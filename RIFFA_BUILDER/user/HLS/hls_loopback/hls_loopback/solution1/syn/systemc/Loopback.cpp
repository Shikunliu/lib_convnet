// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "Loopback.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<32> Loopback::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic Loopback::ap_const_logic_1 = sc_dt::Log_1;
const bool Loopback::ap_true = true;
const sc_logic Loopback::ap_const_logic_0 = sc_dt::Log_0;

Loopback::Loopback(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Loopback_Loop_1_proc_U0 = new Loopback_Loop_1_proc("Loopback_Loop_1_proc_U0");
    Loopback_Loop_1_proc_U0->ap_clk(ap_clk);
    Loopback_Loop_1_proc_U0->ap_rst(ap_rst_n_inv);
    Loopback_Loop_1_proc_U0->ap_start(Loopback_Loop_1_proc_U0_ap_start);
    Loopback_Loop_1_proc_U0->ap_done(Loopback_Loop_1_proc_U0_ap_done);
    Loopback_Loop_1_proc_U0->ap_continue(Loopback_Loop_1_proc_U0_ap_continue);
    Loopback_Loop_1_proc_U0->ap_idle(Loopback_Loop_1_proc_U0_ap_idle);
    Loopback_Loop_1_proc_U0->ap_ready(Loopback_Loop_1_proc_U0_ap_ready);
    Loopback_Loop_1_proc_U0->IN_r_TDATA(Loopback_Loop_1_proc_U0_IN_r_TDATA);
    Loopback_Loop_1_proc_U0->IN_r_TVALID(Loopback_Loop_1_proc_U0_IN_r_TVALID);
    Loopback_Loop_1_proc_U0->IN_r_TREADY(Loopback_Loop_1_proc_U0_IN_r_TREADY);
    Loopback_Loop_1_proc_U0->OUT_r_TDATA(Loopback_Loop_1_proc_U0_OUT_r_TDATA);
    Loopback_Loop_1_proc_U0->OUT_r_TVALID(Loopback_Loop_1_proc_U0_OUT_r_TVALID);
    Loopback_Loop_1_proc_U0->OUT_r_TREADY(Loopback_Loop_1_proc_U0_OUT_r_TREADY);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_IN_r_TREADY);
    sensitive << ( Loopback_Loop_1_proc_U0_IN_r_TREADY );

    SC_METHOD(thread_Loopback_Loop_1_proc_U0_IN_r_TDATA);
    sensitive << ( IN_r_TDATA );

    SC_METHOD(thread_Loopback_Loop_1_proc_U0_IN_r_TVALID);
    sensitive << ( IN_r_TVALID );

    SC_METHOD(thread_Loopback_Loop_1_proc_U0_OUT_r_TREADY);
    sensitive << ( OUT_r_TREADY );

    SC_METHOD(thread_Loopback_Loop_1_proc_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_Loopback_Loop_1_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_OUT_r_TDATA);
    sensitive << ( Loopback_Loop_1_proc_U0_OUT_r_TDATA );

    SC_METHOD(thread_OUT_r_TVALID);
    sensitive << ( Loopback_Loop_1_proc_U0_OUT_r_TVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loopback_Loop_1_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( Loopback_Loop_1_proc_U0_ap_done );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( Loopback_Loop_1_proc_U0_ap_ready );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_reg_procdone_Loopback_Loop_1_proc_U0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loopback_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, IN_r_TDATA, "(port)IN_r_TDATA");
    sc_trace(mVcdFile, OUT_r_TDATA, "(port)OUT_r_TDATA");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, IN_r_TVALID, "(port)IN_r_TVALID");
    sc_trace(mVcdFile, IN_r_TREADY, "(port)IN_r_TREADY");
    sc_trace(mVcdFile, OUT_r_TVALID, "(port)OUT_r_TVALID");
    sc_trace(mVcdFile, OUT_r_TREADY, "(port)OUT_r_TREADY");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_ap_start, "Loopback_Loop_1_proc_U0_ap_start");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_ap_done, "Loopback_Loop_1_proc_U0_ap_done");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_ap_continue, "Loopback_Loop_1_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_ap_idle, "Loopback_Loop_1_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_ap_ready, "Loopback_Loop_1_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_IN_r_TDATA, "Loopback_Loop_1_proc_U0_IN_r_TDATA");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_IN_r_TVALID, "Loopback_Loop_1_proc_U0_IN_r_TVALID");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_IN_r_TREADY, "Loopback_Loop_1_proc_U0_IN_r_TREADY");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_OUT_r_TDATA, "Loopback_Loop_1_proc_U0_OUT_r_TDATA");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_OUT_r_TVALID, "Loopback_Loop_1_proc_U0_OUT_r_TVALID");
    sc_trace(mVcdFile, Loopback_Loop_1_proc_U0_OUT_r_TREADY, "Loopback_Loop_1_proc_U0_OUT_r_TREADY");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, ap_reg_procdone_Loopback_Loop_1_proc_U0, "ap_reg_procdone_Loopback_Loop_1_proc_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
#endif

    }
    mHdltvinHandle.open("Loopback.hdltvin.dat");
    mHdltvoutHandle.open("Loopback.hdltvout.dat");
}

Loopback::~Loopback() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Loopback_Loop_1_proc_U0;
}

void Loopback::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_Loopback_Loop_1_proc_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_Loopback_Loop_1_proc_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(Loopback_Loop_1_proc_U0_ap_done.read(), ap_const_logic_1)) {
            ap_reg_procdone_Loopback_Loop_1_proc_U0 = ap_const_logic_1;
        }
    }
}

void Loopback::thread_IN_r_TREADY() {
    IN_r_TREADY = Loopback_Loop_1_proc_U0_IN_r_TREADY.read();
}

void Loopback::thread_Loopback_Loop_1_proc_U0_IN_r_TDATA() {
    Loopback_Loop_1_proc_U0_IN_r_TDATA = IN_r_TDATA.read();
}

void Loopback::thread_Loopback_Loop_1_proc_U0_IN_r_TVALID() {
    Loopback_Loop_1_proc_U0_IN_r_TVALID = IN_r_TVALID.read();
}

void Loopback::thread_Loopback_Loop_1_proc_U0_OUT_r_TREADY() {
    Loopback_Loop_1_proc_U0_OUT_r_TREADY = OUT_r_TREADY.read();
}

void Loopback::thread_Loopback_Loop_1_proc_U0_ap_continue() {
    Loopback_Loop_1_proc_U0_ap_continue = ap_sig_hs_continue.read();
}

void Loopback::thread_Loopback_Loop_1_proc_U0_ap_start() {
    Loopback_Loop_1_proc_U0_ap_start = ap_start.read();
}

void Loopback::thread_OUT_r_TDATA() {
    OUT_r_TDATA = Loopback_Loop_1_proc_U0_OUT_r_TDATA.read();
}

void Loopback::thread_OUT_r_TVALID() {
    OUT_r_TVALID = Loopback_Loop_1_proc_U0_OUT_r_TVALID.read();
}

void Loopback::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void Loopback::thread_ap_idle() {
    if (esl_seteq<1,1,1>(Loopback_Loop_1_proc_U0_ap_idle.read(), ap_const_logic_1)) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loopback::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void Loopback::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Loopback::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void Loopback::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(Loopback_Loop_1_proc_U0_ap_done.read(), ap_const_logic_1)) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void Loopback::thread_ap_sig_top_allready() {
    ap_sig_top_allready = Loopback_Loop_1_proc_U0_ap_ready.read();
}

void Loopback::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"IN_r_TDATA\" :  \"" << IN_r_TDATA.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"OUT_r_TDATA\" :  \"" << OUT_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"IN_r_TVALID\" :  \"" << IN_r_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"IN_r_TREADY\" :  \"" << IN_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUT_r_TVALID\" :  \"" << OUT_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"OUT_r_TREADY\" :  \"" << OUT_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

