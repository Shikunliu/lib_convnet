// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Loopback_HH_
#define _Loopback_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loopback_Loop_1_proc.h"

namespace ap_rtl {

struct Loopback : public sc_module {
    // Port declarations 12
    sc_in< sc_lv<32> > IN_r_TDATA;
    sc_out< sc_lv<32> > OUT_r_TDATA;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > IN_r_TVALID;
    sc_out< sc_logic > IN_r_TREADY;
    sc_out< sc_logic > OUT_r_TVALID;
    sc_in< sc_logic > OUT_r_TREADY;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;


    // Module declarations
    Loopback(sc_module_name name);
    SC_HAS_PROCESS(Loopback);

    ~Loopback();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Loopback_Loop_1_proc* Loopback_Loop_1_proc_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_ap_start;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_ap_done;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_ap_continue;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_ap_idle;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_ap_ready;
    sc_signal< sc_lv<32> > Loopback_Loop_1_proc_U0_IN_r_TDATA;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_IN_r_TVALID;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_IN_r_TREADY;
    sc_signal< sc_lv<32> > Loopback_Loop_1_proc_U0_OUT_r_TDATA;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_OUT_r_TVALID;
    sc_signal< sc_logic > Loopback_Loop_1_proc_U0_OUT_r_TREADY;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > ap_reg_procdone_Loopback_Loop_1_proc_U0;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_top_allready;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_true;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_IN_r_TREADY();
    void thread_Loopback_Loop_1_proc_U0_IN_r_TDATA();
    void thread_Loopback_Loop_1_proc_U0_IN_r_TVALID();
    void thread_Loopback_Loop_1_proc_U0_OUT_r_TREADY();
    void thread_Loopback_Loop_1_proc_U0_ap_continue();
    void thread_Loopback_Loop_1_proc_U0_ap_start();
    void thread_OUT_r_TDATA();
    void thread_OUT_r_TVALID();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_top_allready();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
