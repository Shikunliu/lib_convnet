// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loopback_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        IN_r_TDATA,
        IN_r_TVALID,
        IN_r_TREADY,
        OUT_r_TDATA,
        OUT_r_TVALID,
        OUT_r_TREADY
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv17_0 = 17'b00000000000000000;
parameter    ap_const_lv17_10000 = 17'b10000000000000000;
parameter    ap_const_lv17_1 = 17'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] IN_r_TDATA;
input   IN_r_TVALID;
output   IN_r_TREADY;
output  [31:0] OUT_r_TDATA;
output   OUT_r_TVALID;
input   OUT_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg IN_r_TREADY;
reg OUT_r_TVALID;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [16:0] i_fu_57_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_41;
wire   [0:0] exitcond_i_i_fu_51_p2;
reg    ap_sig_bdd_48;
reg    ap_sig_ioackin_OUT_r_TREADY;
reg   [16:0] i_0_i_i_reg_40;
reg    ap_sig_bdd_61;
reg    ap_reg_ioackin_OUT_r_TREADY = 1'b0;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_bdd_101;
reg    ap_sig_bdd_100;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_48 | ((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_OUT_r_TREADY))) & ~(exitcond_i_i_fu_51_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_OUT_r_TREADY
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_OUT_r_TREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_100) begin
            if (~(ap_sig_bdd_48 | ((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_OUT_r_TREADY)))) begin
                ap_reg_ioackin_OUT_r_TREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_101) begin
                ap_reg_ioackin_OUT_r_TREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_48 | ((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_OUT_r_TREADY))))) begin
        i_0_i_i_reg_40 <= i_fu_57_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_61)) begin
        i_0_i_i_reg_40 <= ap_const_lv17_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_i_i_fu_51_p2 or ap_sig_bdd_48 or ap_sig_ioackin_OUT_r_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_48 | ((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_OUT_r_TREADY))))) begin
        IN_r_TREADY = ap_const_logic_1;
    end else begin
        IN_r_TREADY = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_i_i_fu_51_p2 or ap_sig_bdd_48 or ap_reg_ioackin_OUT_r_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & ~ap_sig_bdd_48 & (ap_const_logic_0 == ap_reg_ioackin_OUT_r_TREADY))) begin
        OUT_r_TVALID = ap_const_logic_1;
    end else begin
        OUT_r_TVALID = ap_const_logic_0;
    end
end

always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond_i_i_fu_51_p2 or ap_sig_bdd_48 or ap_sig_ioackin_OUT_r_TREADY) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_48 | ((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_OUT_r_TREADY))) & ~(exitcond_i_i_fu_51_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_i_i_fu_51_p2 or ap_sig_bdd_48 or ap_sig_ioackin_OUT_r_TREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_sig_bdd_48 | ((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_OUT_r_TREADY))) & ~(exitcond_i_i_fu_51_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_41) begin
    if (ap_sig_bdd_41) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (OUT_r_TREADY or ap_reg_ioackin_OUT_r_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_OUT_r_TREADY)) begin
        ap_sig_ioackin_OUT_r_TREADY = OUT_r_TREADY;
    end else begin
        ap_sig_ioackin_OUT_r_TREADY = ap_const_logic_1;
    end
end
always @ (ap_CS_fsm or exitcond_i_i_fu_51_p2 or ap_sig_bdd_48 or ap_sig_ioackin_OUT_r_TREADY or ap_sig_bdd_61) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_61) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~(ap_sig_bdd_48 | ((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_OUT_r_TREADY))) & ~(exitcond_i_i_fu_51_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_48 | ((exitcond_i_i_fu_51_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_OUT_r_TREADY))))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign OUT_r_TDATA = IN_r_TDATA;


always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_i_i_fu_51_p2) begin
    ap_sig_bdd_100 = ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_i_fu_51_p2 == ap_const_lv1_0));
end


always @ (OUT_r_TREADY or ap_sig_bdd_48) begin
    ap_sig_bdd_101 = (~ap_sig_bdd_48 & (ap_const_logic_1 == OUT_r_TREADY));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_41 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (IN_r_TVALID or exitcond_i_i_fu_51_p2) begin
    ap_sig_bdd_48 = ((IN_r_TVALID == ap_const_logic_0) & (exitcond_i_i_fu_51_p2 == ap_const_lv1_0));
end


always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_61 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

assign exitcond_i_i_fu_51_p2 = (i_0_i_i_reg_40 == ap_const_lv17_10000? 1'b1: 1'b0);

assign i_fu_57_p2 = (i_0_i_i_reg_40 + ap_const_lv17_1);


endmodule //Loopback_Loop_1_proc

