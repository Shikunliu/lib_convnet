-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100100100001101011000010", 
    1 => "00111110000111001010100000011010", 
    2 => "00111110000001010001101110010011", 
    3 => "10111100110101011010001001011110", 
    4 => "10111100001111011000011011011111", 
    5 => "00111100010010111110000100010101", 
    6 => "10111001110011011101010010101100", 
    7 => "10111100010101001011000100110010", 
    8 => "10111101000000010110101001001000", 
    9 => "00111101100011101100100100001011", 
    10 => "00111101010000101001100000010000", 
    11 => "10111100011100100001000110010101", 
    12 => "10111100110101101111011011110010", 
    13 => "00111101100100010000111011100110", 
    14 => "10111101010110000100011010110011", 
    15 => "10111101000001101111011111110001", 
    16 => "00111110000110010100110111010111", 
    17 => "00111101110110010111011110000101", 
    18 => "10111011101000111001001010010111", 
    19 => "10111101010001011110101101100111", 
    20 => "00111101101100111011101111100010", 
    21 => "10111100111000110100011110011000", 
    22 => "10111110001110101010111110111100", 
    23 => "00111100110101011010001111010110", 
    24 => "00111101000011110001001000100001", 
    25 => "00111101100111001100111001011111", 
    26 => "00111110001000000010010100111001", 
    27 => "00111110001101111110000101110110", 
    28 => "00111101100011100000010001001000", 
    29 => "00111110001000000110000001111000", 
    30 => "00111100001010111010100101100111", 
    31 => "00111101101010110001110010111100", 
    32 => "10111101011011011010010101110000", 
    33 => "10111101101000010100111000000110", 
    34 => "00111110001001111101000001101100", 
    35 => "10111100101111001110011000000101", 
    36 => "10111101101011010100111011000101", 
    37 => "00111100111001010001001101001010", 
    38 => "00111100101010100010010001100001", 
    39 => "10111101011001010010000011010001", 
    40 => "10111110001100111110110100001111", 
    41 => "00111100011000110101101110000101", 
    42 => "00111101011011011011011000110111", 
    43 => "10111100110010011011000010111001", 
    44 => "10111101110000101010001000100001", 
    45 => "00111011100111000000001001010101", 
    46 => "10111110001111001001100000011100", 
    47 => "10111101011000110011101010110011", 
    48 => "10111100001011100100100000010010", 
    49 => "00111101010100011000111101110100", 
    50 => "00111101110011101110110100000011", 
    51 => "10111101101000011100100100000110", 
    52 => "00111110000111100110001100100000", 
    53 => "10111101010000110000110100110000", 
    54 => "10111101111011011010011101101110", 
    55 => "10111100101001010001010001010111", 
    56 => "00111101001111010001000010010111", 
    57 => "00111100110010101100011010011000", 
    58 => "10111101101101101001101110011101", 
    59 => "10111011101010100100011001111011", 
    60 => "10111101110110100011001000101011", 
    61 => "00111101100011000011011111001100", 
    62 => "10111101000000010110100111000010", 
    63 => "00111110001001101011001011110010", 
    64 => "00111101100011111001111101111011", 
    65 => "10111011110100010101100101111001", 
    66 => "00111101000100100000111001010101", 
    67 => "00111101110101001100110000100101", 
    68 => "10111100011010011001010101011010", 
    69 => "00111100001000010111100010110110", 
    70 => "10111101001000011011110001001000", 
    71 => "10111101111001111001100000001111", 
    72 => "00111101110011011101011000010111", 
    73 => "00111101000101111000000100100110", 
    74 => "00111101001001011001001001111100", 
    75 => "10111101010000000011100001001111", 
    76 => "00111101000000101000100011011100", 
    77 => "00111101001000101001111011111100", 
    78 => "00111100111111001100011100110001", 
    79 => "00111101000010001100010001111010", 
    80 => "00111101111000011000101001000100", 
    81 => "00111101101111001111111000110000", 
    82 => "00111101111111111011011110100110", 
    83 => "10111011111001111100001010000111", 
    84 => "10111101101000110010100100100010", 
    85 => "10111101110110011010101011100111", 
    86 => "00111101110100100001110101010100", 
    87 => "10111101001010000011100011001110", 
    88 => "10111101011100000100011000011001", 
    89 => "00111100101100111010100101111011", 
    90 => "10111101000000000111011010011000", 
    91 => "00111100000111001111011111111110", 
    92 => "00111100101011110101001110101011", 
    93 => "00111110000101001100101110011111", 
    94 => "00111101000110001101101100101110", 
    95 => "10111101101010010110111100010101", 
    96 => "10111101101000001100111101101001", 
    97 => "10111101000110010100010000100100", 
    98 => "00111100101001111110000101011011", 
    99 => "10111110000001011000110101011000", 
    100 => "10111110001011111100100011110011", 
    101 => "10111101110111000011000011010011", 
    102 => "00111011101100110011111001011011", 
    103 => "00111110000010110010110100001010", 
    104 => "00111101101111010001100110011100", 
    105 => "00111110000111011111000010010001", 
    106 => "10111110000111101111001111010100", 
    107 => "00111011100001110010011110111101", 
    108 => "00111110001110110010110111010011", 
    109 => "00111101100110011001000110000111", 
    110 => "10111101100111011110000001010000", 
    111 => "10111101011100011000111000110010", 
    112 => "10111100100101110110111110111110", 
    113 => "10111101111011011100110110110011", 
    114 => "10111101110001001101011001011110", 
    115 => "10111100111001100001111110111010", 
    116 => "10111100111001101001111100111100", 
    117 => "10111100110110000110111011000001", 
    118 => "00111101011111110000111010000011", 
    119 => "10111101001000001000111100000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_5 is
    component inference_conv2d_f3_3_3_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_5_rom_U :  component inference_conv2d_f3_3_3_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


