-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001011100100010100000111", 
    1 => "00111101101110000100110001001111", 
    2 => "10111110001101010011101000111111", 
    3 => "00111101100001000011100010000001", 
    4 => "00111100110100011111111110100111", 
    5 => "00111110000000111100011101010000", 
    6 => "00111100101101000001000110110101", 
    7 => "10111110001110011011001011000100", 
    8 => "10111100111011000111110110100010", 
    9 => "00111101010010001010010101110000", 
    10 => "00111101101010011111100111011100", 
    11 => "10111100110010111001111100111011", 
    12 => "00111101101001001001111001010010", 
    13 => "10111100010101100010000100001001", 
    14 => "10111101110011111100011100011101", 
    15 => "00111101010100011101001110111000", 
    16 => "00111101100100101011111100010010", 
    17 => "00111101101011110000011011110111", 
    18 => "00111110000010011010011010110101", 
    19 => "00111110000011010110001010111111", 
    20 => "10111100001110111000001111001111", 
    21 => "10111101001010111101111000100101", 
    22 => "00111101110011001100101101010101", 
    23 => "10111110000011011011111011000010", 
    24 => "00111110000000110100010110001101", 
    25 => "00111011110000001101001011101110", 
    26 => "00111100000001100011000010010001", 
    27 => "00111110001100100000100001011011", 
    28 => "00111101110001001000011110111010", 
    29 => "00111110000101011000000000111101", 
    30 => "10111101101011010001001011001011", 
    31 => "00111100011101101000000111010010", 
    32 => "00111101000110110101110101010100", 
    33 => "00111110000001111101111001010001", 
    34 => "10111101111111111011111001110111", 
    35 => "00111101101011000010101010100011", 
    36 => "00111100101000011101000101000001", 
    37 => "10111110000001101111101010000011", 
    38 => "10111101010100001110000001011000", 
    39 => "10111101110101011111001011001011", 
    40 => "00111110000000010011111100000111", 
    41 => "00111100100010101111000110010110", 
    42 => "00111110001010100010001100111010", 
    43 => "10111101100010010000111011101101", 
    44 => "00111110001110010101010010101000", 
    45 => "00111101000111111100101111100011", 
    46 => "10111101110001111000001001101000", 
    47 => "00111101000000000010100110000110", 
    48 => "10111100000111001011101001010110", 
    49 => "00111101000000101011101110011100", 
    50 => "10111101011010011110101100100000", 
    51 => "10111100110000101101101010100110", 
    52 => "10111101100111101101001000111000", 
    53 => "00111101111001110000111100111001", 
    54 => "10111011001011111000100101000101", 
    55 => "00111011110110011101111011000100", 
    56 => "10111101001011101100100101000001", 
    57 => "10111110000001100100111000000101", 
    58 => "10111100110100010001111100001100", 
    59 => "10111101101110111100100110100101", 
    60 => "10111101000011010111001100000000", 
    61 => "00111101100101111101110100110111", 
    62 => "10111101110010011101011110111010", 
    63 => "00111110001011001110010011101011", 
    64 => "00111101001000110010010100011001", 
    65 => "10111101111010001111010010110110", 
    66 => "00111110011010001100001101101110", 
    67 => "00111110100001011011011111110001", 
    68 => "00111110000101011110101011101110", 
    69 => "00111101101110011011010110110100", 
    70 => "10111110000110001111100110110001", 
    71 => "10111101101110011110001001000100", 
    72 => "00111101111111111000101010001111", 
    73 => "00111100101101001100010000101101", 
    74 => "00111011101010000100000100111101", 
    75 => "00111101111111101011010010100110", 
    76 => "10111101100000010010100100000010", 
    77 => "00111101000110011010011100000110", 
    78 => "10111100110110001010101010111100", 
    79 => "10111101101010111010100111111010", 
    80 => "00111001101111011111111000010111", 
    81 => "00111100111111011101100111101011", 
    82 => "10111100100100011101100110110010", 
    83 => "00111110010101110101111011101010", 
    84 => "00111100101111000110001011110010", 
    85 => "10111101110000110000111001110011", 
    86 => "10111110001001111011101100110000", 
    87 => "00111110010010000111010110010010", 
    88 => "10111101100001000110010011000001", 
    89 => "00111101011101011101000110001110", 
    90 => "00111110000011100001111100111010", 
    91 => "00111100101010000010101001010110", 
    92 => "10111110011100111101110110011000", 
    93 => "00111100100011000000011000110011", 
    94 => "10111110000000010100011110101110", 
    95 => "00111101000001100100110100100001", 
    96 => "00111110001111001000000011000111", 
    97 => "00111101111001001100000001011001", 
    98 => "00111101110110101001001010100011", 
    99 => "10111101010001010001000101100111", 
    100 => "00111101010101001111000001010010", 
    101 => "10111100110000101011011000101000", 
    102 => "00111110001111011111001110110110", 
    103 => "00111101001011110101010111111001", 
    104 => "00111101110001111011001110110001", 
    105 => "10111101011010100100010110011110", 
    106 => "00111101100000000001100010110010", 
    107 => "00111100000100110100011100001111", 
    108 => "10111100111011010000111000100000", 
    109 => "10111100001010000111011001000001", 
    110 => "00111101101001001001000011001100", 
    111 => "10111101011001010010100001111001", 
    112 => "10111101111111011100101001001011", 
    113 => "10111011011111110100011110011110", 
    114 => "10111101110100111111100101100010", 
    115 => "10111110011010001110011100010100", 
    116 => "10111101001110100101010101100110", 
    117 => "10111101100110100011001111011000", 
    118 => "00111010001110011110001000010111", 
    119 => "00111101001111100111000100111010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_0 is
    component inference_conv2d_f3_3_1_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_0_rom_U :  component inference_conv2d_f3_3_1_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


