-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000101011110110001001011", 
    1 => "10111100011001110110010111010101", 
    2 => "00111101100001100100000111000001", 
    3 => "00111101000011111101100001010000", 
    4 => "00111000101010011010101100111000", 
    5 => "00111110000011001000100001100001", 
    6 => "00111101101111111111011111101101", 
    7 => "10111101011011101110101000101110", 
    8 => "10111110001011101001000000110110", 
    9 => "00111101101110010011110111011001", 
    10 => "10111101101100000101111101011110", 
    11 => "00111101000110100010111010110101", 
    12 => "00111101010000010001111010010011", 
    13 => "10111101010011110111100100110101", 
    14 => "10111100111010100001111110001110", 
    15 => "10111100111111101101000111001101", 
    16 => "00111101000100110100111110111001", 
    17 => "00111110010011110110100000111000", 
    18 => "00111101000110101010001100110100", 
    19 => "00111101100000001000111000110000", 
    20 => "10111100111111010110001010010111", 
    21 => "00111101110001101111100010101101", 
    22 => "00111101011001000100101001111101", 
    23 => "00111110100001010000101111111010", 
    24 => "00111100110011101010110000110101", 
    25 => "10111100101101011110000010001101", 
    26 => "00111110010100010011100101000011", 
    27 => "10111101100111011111011110110010", 
    28 => "00111110001101010100011101011010", 
    29 => "10111101110101101111010010111111", 
    30 => "00111101110011011100111111001100", 
    31 => "00111101001110001001100110111111", 
    32 => "00111011100110000110111100001101", 
    33 => "00111101110111011000011010101001", 
    34 => "00111101100101011101001000100010", 
    35 => "00111101001011010001100000110001", 
    36 => "00111011000100001110010100010101", 
    37 => "00111100011100101001010001110010", 
    38 => "10111101100011111010000001101100", 
    39 => "00111101100001110100011100011100", 
    40 => "00111010111010001111011010100100", 
    41 => "00111101101001101110000111011111", 
    42 => "10111101001011001101011010001101", 
    43 => "00111100001101101000100010111110", 
    44 => "10111110000110000100110110111010", 
    45 => "10111100110010110011001001100011", 
    46 => "00111110000111101000010100110100", 
    47 => "00111101011100001111101110011011", 
    48 => "10111101111011111011010101001010", 
    49 => "10111101000001011110110011011111", 
    50 => "00111101001110011001111101111001", 
    51 => "10111100101010111000110110111000", 
    52 => "00111101001011101001100011001111", 
    53 => "10111110010101000001011110000111", 
    54 => "10111110010001110011111101110101", 
    55 => "00111110010100110000100001111000", 
    56 => "10111101110100111111110110010011", 
    57 => "10111101001000101010001000100001", 
    58 => "00111101100101110001000100011100", 
    59 => "00111110000011100110111001100101", 
    60 => "10111101100110111011000110111101", 
    61 => "00111101110100110000010100010000", 
    62 => "10111110000011011010001011111001", 
    63 => "10111100100000100010001000011001", 
    64 => "00111101100010101100011011101001", 
    65 => "10111101100110010101101010010101", 
    66 => "10111101111001010111101110000101", 
    67 => "10111101011101101010101100100010", 
    68 => "10111100100011011010111000111110", 
    69 => "10111101111000110010011001011011", 
    70 => "10111101101001001011001010110111", 
    71 => "10111110001111011011111101001000", 
    72 => "10111101011100110111111110111111", 
    73 => "00111101101101001001101111011100", 
    74 => "00111101011111100010000110111111", 
    75 => "00111101010111001010001010011000", 
    76 => "10111011101011010101111011001000", 
    77 => "00111101111011101100111110100111", 
    78 => "00111101100101110011111111111011", 
    79 => "00111101101010110000000110101110", 
    80 => "00111101101101101001001111000000", 
    81 => "00111100100111110100101101010101", 
    82 => "00111101000010100010101000001011", 
    83 => "10111101100001000011101001010111", 
    84 => "00111100010101100011001010100111", 
    85 => "00111011101111001100011000101111", 
    86 => "00111110000110011101001000111001", 
    87 => "00111100001011100110100100110100", 
    88 => "00111101100101011101011011001100", 
    89 => "10111101110011100110010100111000", 
    90 => "10111100100111010110100001011011", 
    91 => "10111010110010110001000111100010", 
    92 => "00111101101100100101111000000110", 
    93 => "00111011001000110101010110110000", 
    94 => "10111110000101000101101010100011", 
    95 => "10111101110111111111110111100111", 
    96 => "10111100100001001011110011001000", 
    97 => "10111110001010001101100110110110", 
    98 => "00111100111101111111100000101001", 
    99 => "10111110000011100010101101001001", 
    100 => "10111100100011001000110101000010", 
    101 => "00111101001000101010000111010001", 
    102 => "10111110000011111011101100001110", 
    103 => "00111110010001100011000010101001", 
    104 => "00111110000000101000111001010000", 
    105 => "00111101111010111101101010010100", 
    106 => "10111101100000110010011101011010", 
    107 => "00111101011111001001111100111101", 
    108 => "00111101111010010000110111100001", 
    109 => "10111110001000011001110110101010", 
    110 => "10111101001000000100011011111101", 
    111 => "10111110010000011001000110011011", 
    112 => "00111101111010111000101101101001", 
    113 => "00111101101011110101110000101001", 
    114 => "10111101101010111000010000101101", 
    115 => "00111101100101010010110001011010", 
    116 => "10111100111110000100101001011111", 
    117 => "10111101101000101110011010001101", 
    118 => "10111100010000010010100110010110", 
    119 => "00111100110011101001100100100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_6 is
    component inference_conv2d_f3_4_1_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_6_rom_U :  component inference_conv2d_f3_4_1_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


