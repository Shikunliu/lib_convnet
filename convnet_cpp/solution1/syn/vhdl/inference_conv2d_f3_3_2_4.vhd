-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111100111010001110011011", 
    1 => "10111101110011001111111100100010", 
    2 => "10111101011011110000101100000000", 
    3 => "10111101100100010100000100010011", 
    4 => "00111101011010001110011110011011", 
    5 => "00111110000000010111001101110101", 
    6 => "10111101000111100111011101001111", 
    7 => "10111110001010010110111100100010", 
    8 => "10111101100001100100001000111001", 
    9 => "10111101010000110000101001110110", 
    10 => "00111101100111011010010110001010", 
    11 => "10111101110111010100001010000001", 
    12 => "10111101001110000011001100110010", 
    13 => "00111110000000110111011001001111", 
    14 => "10111110000111100111001001010100", 
    15 => "10111101100111000110001101111000", 
    16 => "10111100010010100111100100110101", 
    17 => "10111101000000100011010100101111", 
    18 => "10111101010111100111011101101010", 
    19 => "00111101011001001011011011001110", 
    20 => "10111011010100101001110011110000", 
    21 => "10111101000001000110001010110110", 
    22 => "10111011101110001111101001110010", 
    23 => "00111101100001101011111101111010", 
    24 => "00111101100000111000100010000000", 
    25 => "00111101101111110101101111100110", 
    26 => "10111011000011101001110010010000", 
    27 => "10111101010010110110110111010111", 
    28 => "10111110000101011100111011100001", 
    29 => "10111101100111100111010110000111", 
    30 => "00111101110100111011010110111111", 
    31 => "10111101000001110011000111010011", 
    32 => "00111101111111100100110011010111", 
    33 => "10111101000101000000010010110101", 
    34 => "10111100111100110110011001011111", 
    35 => "00111101000010001100000001100011", 
    36 => "00111101110011111001111111001011", 
    37 => "00111101011100011011110001010110", 
    38 => "00111101011101000010100100110010", 
    39 => "00111101001011111101100101110111", 
    40 => "00111101011000111000101001001001", 
    41 => "10111101001110110101011110101010", 
    42 => "10111101110001110100101101000000", 
    43 => "00111100100110111010110100111010", 
    44 => "00111010101011111011000100001000", 
    45 => "10111101100000111100100100011000", 
    46 => "10111011111111101011100001000010", 
    47 => "10111100111000011111101011111101", 
    48 => "10111100100001101010111011011011", 
    49 => "00111101100010011000110100101101", 
    50 => "10111110001000110000010000000100", 
    51 => "00111101011011100001101101100111", 
    52 => "00111101000110110111000100001010", 
    53 => "00111100000010101110100111011110", 
    54 => "00111110001001111001011101000110", 
    55 => "10111100110000011000101010101111", 
    56 => "10111110000010100110000010010001", 
    57 => "00111101011100001111000100000100", 
    58 => "10111110001001000111011010110000", 
    59 => "10111101000011111011101010001000", 
    60 => "00111101100100010001111001101011", 
    61 => "10111101110001001111100000101111", 
    62 => "00111101010111110010010110110000", 
    63 => "00111101100010101001111101010011", 
    64 => "00111101001100011101100110110010", 
    65 => "10111101111100011110000010000011", 
    66 => "10111101101010000011101100011101", 
    67 => "10111110010010001010101101010000", 
    68 => "10111101101100110010001110010100", 
    69 => "00111101000010110110001011110000", 
    70 => "00111101111000100010100100100000", 
    71 => "10111100111010100100100001110011", 
    72 => "10111101111110100001000000010111", 
    73 => "10111010111111001111000100000010", 
    74 => "10111101111000110101010100000100", 
    75 => "10111101100011010101111010110110", 
    76 => "00111101111011000101001000011110", 
    77 => "00111011101100001001001101011011", 
    78 => "10111100001000111100010101001100", 
    79 => "00111101110100111010001001011001", 
    80 => "10111110001001010010101100001010", 
    81 => "00111101110000011100010101001101", 
    82 => "10111100001001001001110100000011", 
    83 => "00111100101110101100001001110100", 
    84 => "10111011110111011100011000000100", 
    85 => "00111101101001101100101110001001", 
    86 => "00111100111010101100111000001010", 
    87 => "00111100110110100101100000000101", 
    88 => "00111100101010011010110101111000", 
    89 => "00111110000111001101010000100100", 
    90 => "10111101110111011000011010101001", 
    91 => "00111101101011110010000111101001", 
    92 => "10111011100000101000111111101000", 
    93 => "00111101111010011000101100101111", 
    94 => "00111101010100101010100000101001", 
    95 => "00111100001101100010010011101011", 
    96 => "10111101101001100011010110100100", 
    97 => "00111101010110010101011011001110", 
    98 => "00111110000011000000011001011011", 
    99 => "10111101101110010110000110011011", 
    100 => "00111011110011100000010001011010", 
    101 => "00111101100100000001101111100100", 
    102 => "00111110010000101001110011111110", 
    103 => "10111100101101000110001001110011", 
    104 => "00111101001111110000000010010001", 
    105 => "10111101011110000010010000011001", 
    106 => "10111100111010100100100110000000", 
    107 => "10111101110001100001111101011100", 
    108 => "10111110000110000011010011010010", 
    109 => "10111100101001100111011111001110", 
    110 => "10111101101011111101100111001000", 
    111 => "00111100110010010101000100010111", 
    112 => "10111101100011010100101000011011", 
    113 => "10111100100100000111110100100110", 
    114 => "10111101010101100101001110101111", 
    115 => "10111101010000101101100101001001", 
    116 => "00111110000001011010010101110110", 
    117 => "00111110010001000000011101000110", 
    118 => "10111100010110100110010001100101", 
    119 => "10111101100101111110001101001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_4 is
    component inference_conv2d_f3_3_2_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_4_rom_U :  component inference_conv2d_f3_3_2_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


