-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001010001100000110001010", 
    1 => "00111101100001001111001101001111", 
    2 => "10111010110001000110001111110011", 
    3 => "10111100110100100011100101010011", 
    4 => "10111100110111010100111101100110", 
    5 => "00111101100111010011010110110110", 
    6 => "10111110000001101011011000010111", 
    7 => "00111101101010111100001010111001", 
    8 => "00111101111100111111100101100010", 
    9 => "10111110001010000111000100011101", 
    10 => "10111101101101100110111111110001", 
    11 => "00111010011111010100100100001110", 
    12 => "10111100100010010000111100111110", 
    13 => "00111010110101011100101101001110", 
    14 => "10111110000010110011110011000101", 
    15 => "10111101001100000110111101001110", 
    16 => "10111101010011101000000100011101", 
    17 => "10111101110011111011111010111010", 
    18 => "00111101110001110101111101010101", 
    19 => "00111100100111100000000110101000", 
    20 => "00111101010000011100000011001010", 
    21 => "00111101100111000101000101100010", 
    22 => "00111101011010011101100011100010", 
    23 => "00111101100011101101111010110011", 
    24 => "00111011111001101111110000100011", 
    25 => "10111101001000011101101001000101", 
    26 => "00111101110101000000111011100000", 
    27 => "10111100111100111111111101000001", 
    28 => "10111101101100010110000011011001", 
    29 => "00111101000111010101011100001110", 
    30 => "00111110000101111111101101101010", 
    31 => "00111100101111010100001011101100", 
    32 => "00111101001001100100111111110110", 
    33 => "10111101010010011101010111110010", 
    34 => "00111101111001100111011100101101", 
    35 => "00111101100111111111111101011111", 
    36 => "00111010101110010010000110011111", 
    37 => "00111011000101111101000110011000", 
    38 => "10111110001100010010001100111110", 
    39 => "00111110000111000110110001010101", 
    40 => "00111101001100110111110100000101", 
    41 => "10111100111100011000110011010101", 
    42 => "10111101101101010000010101110011", 
    43 => "00111110000000111001100101110000", 
    44 => "00111100101110100100101000010011", 
    45 => "00111110000101000010001101010011", 
    46 => "00111101011111000010101001101110", 
    47 => "00111100100110111010000000000100", 
    48 => "10111101011100101100010010101110", 
    49 => "00111101101010111001111001100100", 
    50 => "00111101110111001011001001010011", 
    51 => "00111110000011010001101010101000", 
    52 => "00111110000100111001101101000101", 
    53 => "10111101010100110011011001011001", 
    54 => "10111110011001110111101100111001", 
    55 => "10111101000111000010001011100001", 
    56 => "10111110001110110011011000110111", 
    57 => "10111000101100101011100100011011", 
    58 => "00111101010101101010011001010000", 
    59 => "00111101000110111100001010011110", 
    60 => "00111101100100001101101101111000", 
    61 => "10111101101101111101110110100010", 
    62 => "10111110000111111000001110111110", 
    63 => "10111101000111000110000100101010", 
    64 => "10111101000110000100111111010011", 
    65 => "10111100001101101100101111011010", 
    66 => "10111101100000011010111000111011", 
    67 => "10111101000011100111100101000000", 
    68 => "10111101000110101110100010011111", 
    69 => "10111110000000001001111101100010", 
    70 => "10111110000010001001011111101010", 
    71 => "10111101100110101000110111011110", 
    72 => "00111101001110001111001110000001", 
    73 => "10111101000000101101011110110110", 
    74 => "10111101010101011010100000100011", 
    75 => "00111101101001100101100001110100", 
    76 => "10111101101001100111110110101110", 
    77 => "00111101110011000101101111111001", 
    78 => "10111101100110110100010110000110", 
    79 => "00111110000000001011010001011011", 
    80 => "10111101100101101001110011010010", 
    81 => "10111101110000110011100111110111", 
    82 => "00111101100011111101110010101010", 
    83 => "00111101101101010010000000100011", 
    84 => "00111110000110000010101110100110", 
    85 => "10111011100011111010001110001100", 
    86 => "00111110000110010000111001100111", 
    87 => "10111100101100011000100000000011", 
    88 => "10111101111100011000110000011001", 
    89 => "10111101110000001000111001110011", 
    90 => "00111101000011001010001011011011", 
    91 => "00111101111010111010101001011000", 
    92 => "10111101110101010001110111101111", 
    93 => "00111110010011101001010001101000", 
    94 => "00111100101110101110000111101001", 
    95 => "00111100110010101000101001101000", 
    96 => "00111101000100001011100110001100", 
    97 => "10111110001101111110000001101001", 
    98 => "00111100111101101110000001100111", 
    99 => "00111101100010100101110101011110", 
    100 => "10111110000110000100111010000011", 
    101 => "00111101111100000101000100000001", 
    102 => "10111100110101110100110011101110", 
    103 => "10111110010010110010110100001010", 
    104 => "00111110001001011110010011100111", 
    105 => "10111101111011110010111000000110", 
    106 => "10111101100001100011100100110101", 
    107 => "10111110010010111000011001101110", 
    108 => "10111101100011010010101100010001", 
    109 => "10111100111110100111011100101010", 
    110 => "00111101101101001000101000010110", 
    111 => "00111110001001000100010000011000", 
    112 => "00111101101111010100010010100111", 
    113 => "00111101111000110101011110100011", 
    114 => "00111101111010101110011011001001", 
    115 => "10111110000100010101110110110011", 
    116 => "10111100111100100010100101111110", 
    117 => "10111100111101101110111110000000", 
    118 => "00111101010101100100111000111011", 
    119 => "10111101011101010001011001000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_6 is
    component inference_conv2d_f3_1_3_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_6_rom_U :  component inference_conv2d_f3_1_3_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


