-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010101100111111001110111", 
    1 => "10111101000001111100011111000101", 
    2 => "00111110000001000011001111010111", 
    3 => "00111101000000110000110000001001", 
    4 => "10111101110101111000000111000111", 
    5 => "00111001111111110011101001100110", 
    6 => "10111110010100101011010101011111", 
    7 => "10111101001100001110110000010110", 
    8 => "00111011111011111001100100000000", 
    9 => "10111100001100011011101101100100", 
    10 => "10111101010001011100010111000010", 
    11 => "10111101011100111010101100001101", 
    12 => "10111110000010100110111000110011", 
    13 => "10111101001100110111001000111000", 
    14 => "00111011101001101111011101111011", 
    15 => "10111101010100000011110000111110", 
    16 => "00111101101000111011010011000000", 
    17 => "10111101101100111000001011110010", 
    18 => "00111110001100100000111101101111", 
    19 => "10111101110101001101010110010101", 
    20 => "00111011110011111001010111101010", 
    21 => "00111101101001111100100100111101", 
    22 => "00111110000001000110101011100100", 
    23 => "00111101011000001100000000110100", 
    24 => "00111100110111000001000010100010", 
    25 => "10111011101000000100110111101001", 
    26 => "10111101100001111111111100001000", 
    27 => "10111100110010101110001111110100", 
    28 => "10111101111011001110000111000110", 
    29 => "10111101100101001001011000001010", 
    30 => "10111101000101001111110100011101", 
    31 => "00111101001000010000000101010010", 
    32 => "10111110010011100101100011100110", 
    33 => "00111100100010111011010100001010", 
    34 => "00111110000110100111000000001001", 
    35 => "00111101001111010010110001111100", 
    36 => "10111101100010011001101001111110", 
    37 => "00111110000000011010101111010010", 
    38 => "00111110000111111001101110011001", 
    39 => "10111110010000100000100100100100", 
    40 => "10111101100000100110011111100010", 
    41 => "00111100100100110000011010100011", 
    42 => "10111101111111100110001011011100", 
    43 => "00111100111101001011111111000101", 
    44 => "00111011100101010001010011100101", 
    45 => "10111101011101111010010110111110", 
    46 => "00111100011100110001110110011001", 
    47 => "00111101101001111101011111011110", 
    48 => "10111101000011001010111000101110", 
    49 => "00111101100010011101111101010101", 
    50 => "00111001111101101000110000000101", 
    51 => "10111101100100010100101100010110", 
    52 => "10111101111001100101111100001111", 
    53 => "00111101011001001000101111101011", 
    54 => "10111010011110111111111000100100", 
    55 => "10111100000111110101000110101010", 
    56 => "00111101010000111000000101111010", 
    57 => "00111101010100000110000111111101", 
    58 => "10111101010110100110101111110010", 
    59 => "00111110000111001110111001011011", 
    60 => "10111101101011001110011011011011", 
    61 => "00111100101110010110101001001111", 
    62 => "10111110000101010100011101011010", 
    63 => "10111101000101100101011100001010", 
    64 => "10111101011011010111111101011111", 
    65 => "10111100000111011110110111000111", 
    66 => "10111110000111001011110100010010", 
    67 => "00111101000101001001010010010010", 
    68 => "10111101111111101100100000001100", 
    69 => "00111101000000111011011011110100", 
    70 => "00111110000010010010011010000101", 
    71 => "00111110000010000110011010100001", 
    72 => "10111101101010011101000110110011", 
    73 => "00111101110100000100101000110000", 
    74 => "00111110000100100010111110101101", 
    75 => "00111110001001011110100000001100", 
    76 => "10111101100101111010000110101000", 
    77 => "10111101111000101101011100110000", 
    78 => "10111101100101111001110101101000", 
    79 => "00111100110100101001011010100110", 
    80 => "00111100100100101111001111000011", 
    81 => "10111100111101111011110010011010", 
    82 => "00111101010110001111110101111000", 
    83 => "00111110011000001001011110000101", 
    84 => "10111110000001010001011011011011", 
    85 => "10111101001000010001010010111000", 
    86 => "00111110000011001010110101011000", 
    87 => "00111101011001001001000000111000", 
    88 => "10111100101110101000000010011010", 
    89 => "00111101110111011101001100110101", 
    90 => "10111101100001110011011010110011", 
    91 => "00111011100011010111111010101110", 
    92 => "00111101010100010011001011000011", 
    93 => "10111100110110110101011100001001", 
    94 => "10111100110101010100101001001010", 
    95 => "10111101010011100010101011101011", 
    96 => "10111101000010110001000110101100", 
    97 => "00111110001110101011111001101010", 
    98 => "00111101100101000010101100001000", 
    99 => "10111110000000101011111010001100", 
    100 => "00111100100000001011001001111000", 
    101 => "00111101001100011101011101001000", 
    102 => "10111011100010000101111000110011", 
    103 => "00111101100011011000011110000000", 
    104 => "00111100000100111011111111110001", 
    105 => "10111011111000100010010001111000", 
    106 => "00111110000001010100111000101011", 
    107 => "10111101110000010011010010100110", 
    108 => "10111101101001000110000111010010", 
    109 => "10111101011100111010100000111001", 
    110 => "10111101100101011110010111100110", 
    111 => "00111101111101011001001001010011", 
    112 => "10111101001101111001101100100111", 
    113 => "10111100110111010111010000011010", 
    114 => "10111101000011110000101010010101", 
    115 => "10111101001111011011111110011001", 
    116 => "10111110000110011100011000101010", 
    117 => "10111101010111010111111101101101", 
    118 => "00111101010100010001011100101111", 
    119 => "10111101101001010111000101100110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_12 is
    component inference_conv2d_f3_3_0_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_12_rom_U :  component inference_conv2d_f3_3_0_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


