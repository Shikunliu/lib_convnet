-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010001101101010101110010", 
    1 => "00111101100110000000111101010110", 
    2 => "00111101010000000000001000011001", 
    3 => "00111101101000110100110101000010", 
    4 => "10111101101111000000111110111110", 
    5 => "10111101010001111010001001010110", 
    6 => "00111100100100000110110100110110", 
    7 => "10111101100100010100100010100000", 
    8 => "00111101100010011101001001100001", 
    9 => "00111100001110110010111111101100", 
    10 => "00111110000110110110010101100111", 
    11 => "00111101010001110111100001001010", 
    12 => "00111101110110000111111001111100", 
    13 => "00111100111001001100010100010001", 
    14 => "00111100000101100101101011000000", 
    15 => "00111100110111101001100000111100", 
    16 => "00111101000110110010110011111101", 
    17 => "00111101100110011101101100111110", 
    18 => "10111100001011001000001100010110", 
    19 => "00111101111100000011111000100001", 
    20 => "00111101010110100011100010101011", 
    21 => "00111101101000011011101001110010", 
    22 => "10111100010011110000001101110011", 
    23 => "00111101111000001110110001110100", 
    24 => "10111101011111111111000101101101", 
    25 => "10111110000110011100100111010110", 
    26 => "10111110000000101000101111110100", 
    27 => "10111110000001100100011110111011", 
    28 => "00111101010001011000111100000110", 
    29 => "00111110000011110110100101000100", 
    30 => "10111101101101110000110001100100", 
    31 => "10111100110011110100011100110000", 
    32 => "10111101010011010010000000001111", 
    33 => "10111101010010011010000000001100", 
    34 => "10111100110001101111110000001000", 
    35 => "10111100110101100100010100011100", 
    36 => "10111101011111001101110000001111", 
    37 => "00111101000100101111110011100010", 
    38 => "00111100101010100011100100100100", 
    39 => "00111101100000100100101011010110", 
    40 => "00111101110100000111110010000101", 
    41 => "00111101101101110001001110111011", 
    42 => "10111110000000101111010011001111", 
    43 => "00111101111111011101010001000001", 
    44 => "00111101100011010000011001000011", 
    45 => "10111100101010011100010011000000", 
    46 => "00111110000000100010101000101100", 
    47 => "00111100100111001011000000000100", 
    48 => "00111011100100000000000011101010", 
    49 => "00111101100111101111101011101000", 
    50 => "00111101101001001010001100001010", 
    51 => "00111101101000101000010001011010", 
    52 => "10111110010001100100000001100100", 
    53 => "10111110000011001100010110111001", 
    54 => "00111101100011001011011110101100", 
    55 => "10111101011111100100100010100110", 
    56 => "00111011100000110111011001101101", 
    57 => "10111101110100011101001011100001", 
    58 => "10111101100000010110011001100111", 
    59 => "10111100100100011100000010000111", 
    60 => "10111101100111001001000111111010", 
    61 => "10111110001000100001111111110011", 
    62 => "10111110000100010001110101111010", 
    63 => "00111110010100011001000000001000", 
    64 => "10111101101001111000010000001000", 
    65 => "10111101001101001100101001111000", 
    66 => "10111101100101010101100001010111", 
    67 => "00111101010101100101001001010010", 
    68 => "10111110000001001110010010000110", 
    69 => "10111101111010001101111100110111", 
    70 => "10111101011101110101101001110101", 
    71 => "10111101011111011111011101000111", 
    72 => "10111110000110100011100111000101", 
    73 => "10111101110111010001001011001011", 
    74 => "10111101111001011001111110110010", 
    75 => "10111101100001110001000010100011", 
    76 => "10111010110110000000100101101100", 
    77 => "10111101011110110010011101010011", 
    78 => "10111100110001111100100000010110", 
    79 => "10111101101000101101100101010110", 
    80 => "10111110001101101110110010011110", 
    81 => "10111100111000110011000101011101", 
    82 => "00111101011111001110100110110000", 
    83 => "00111100100000000110010000111110", 
    84 => "10111101010001101110011111100110", 
    85 => "00111110000111000101110110100111", 
    86 => "00111110001010001101000000000011", 
    87 => "10111101010100000001000011101111", 
    88 => "00111101000100011110111001110101", 
    89 => "10111100000110001000010110110011", 
    90 => "10111110000010010000101110000101", 
    91 => "10111101001010010011010100011000", 
    92 => "10111101111001001111011111101100", 
    93 => "00111101100010100001110001110110", 
    94 => "10111101001111011101011010101011", 
    95 => "10111110000100110111100010101011", 
    96 => "10111101111001000001010101101110", 
    97 => "10111011111101000010011110110000", 
    98 => "10111100001100100001011100111111", 
    99 => "00111101111001001000101101100101", 
    100 => "00111100011011100010001101011111", 
    101 => "00111110010000001110111110011010", 
    102 => "00111101100010111010011111111100", 
    103 => "00111100000110001100011100100001", 
    104 => "10111110000010011001010101101000", 
    105 => "00111110000111111010110101101101", 
    106 => "10111011101101010101100111101010", 
    107 => "10111100101011101010101111100101", 
    108 => "00111101001010111101001111111001", 
    109 => "00111101001000111111111010010010", 
    110 => "00111101011101001110000010011000", 
    111 => "00111101110000111110111111110010", 
    112 => "10111110000100001110011100110110", 
    113 => "00111101010010011100101111111100", 
    114 => "10111011110101000010100100001101", 
    115 => "10111110000001001111110010100100", 
    116 => "10111101101111110000010110001100", 
    117 => "00111101111010011001111100011011", 
    118 => "00111100110100101111111000111111", 
    119 => "00111110010001110110111111110100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_2 is
    component inference_conv2d_f3_2_0_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_2_rom_U :  component inference_conv2d_f3_2_0_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


