-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111010101011101000111000", 
    1 => "00111101010011110101111101101001", 
    2 => "00111101100101100111001001101000", 
    3 => "00111101111011000010110011100100", 
    4 => "10111101110100011110100001100000", 
    5 => "10111101001100101110111101000001", 
    6 => "00111101010101010100000000111001", 
    7 => "10111101000011000001110010100100", 
    8 => "00111101110100000111010110110100", 
    9 => "10111101110010001111100101100001", 
    10 => "10111101111000000010100001011111", 
    11 => "00111100110111111100100011110011", 
    12 => "10111101000011110101100100011110", 
    13 => "10111101010100010101001001101110", 
    14 => "10111110000110000101101001001111", 
    15 => "10111100111100011011000011101000", 
    16 => "00111100001101100111110010010100", 
    17 => "00111110010010010110101100110011", 
    18 => "00111101011010111101110011111110", 
    19 => "10111110000100111100001110100100", 
    20 => "00111101100110010011010111100001", 
    21 => "00111100101111000110100100000111", 
    22 => "00111101000001111000011001110010", 
    23 => "10111110011011000010111000110100", 
    24 => "10111101011000000001001110110111", 
    25 => "00111101110111100101110110011110", 
    26 => "10111101101000101010110000001010", 
    27 => "00111100100001100011000000110000", 
    28 => "00111110001010111101000001011011", 
    29 => "00111101001000111101010100001100", 
    30 => "10111011001110110100000011011110", 
    31 => "00111101100011000110110010001010", 
    32 => "10111101111100111000110011011010", 
    33 => "10111101100000011010110000110000", 
    34 => "10111110000101011111110011000010", 
    35 => "10111110001000001111100111010011", 
    36 => "00111101011001100101000100000010", 
    37 => "00111110001110010000011100010000", 
    38 => "00111110000001011001010001101100", 
    39 => "10111011010000010000101010100010", 
    40 => "10111100000010000000110000110011", 
    41 => "10111110001001011111111000010001", 
    42 => "00111110001010000110100010111010", 
    43 => "10111101001010011110010111000111", 
    44 => "00111101111010110100100111100000", 
    45 => "10111101110100010000110010110011", 
    46 => "00111100111001010100001110000110", 
    47 => "10111101111110111111100101000000", 
    48 => "00111110000000101101110100110111", 
    49 => "10111101101001101011100100111101", 
    50 => "00111110000111000111001101101001", 
    51 => "00111100011000100001101010100111", 
    52 => "00111010111101011100000000110110", 
    53 => "00111101110100111001110110100001", 
    54 => "00111110000100010010111011000111", 
    55 => "00111101011001000010000101111101", 
    56 => "10111101101000111101000111011001", 
    57 => "00111100010111010101100101110111", 
    58 => "00111101111110110001010110110101", 
    59 => "00111101010000100101101110101010", 
    60 => "10111101101110011111001000110100", 
    61 => "00111101110111001100001110100000", 
    62 => "10111101000101011001000011011100", 
    63 => "00111101000011111001101011111000", 
    64 => "00111101100100110010111011001100", 
    65 => "00111110000101101000111011000101", 
    66 => "00111110000000010001001011111101", 
    67 => "10111101001110001010100010001000", 
    68 => "00111010011101101100110100011110", 
    69 => "00111100111011101101000001100011", 
    70 => "00111100011001001100111010110111", 
    71 => "00111110000110110010101011110001", 
    72 => "00111101111001000100001010000101", 
    73 => "10111010101000110110010010011111", 
    74 => "10111101101110101111000011100111", 
    75 => "00111110000001111010011111001010", 
    76 => "00111101011111011001010111000010", 
    77 => "00111101000111111111010000001100", 
    78 => "00111101100000100001110101010100", 
    79 => "00111101110000111101010001101011", 
    80 => "10111110000111001001011001000110", 
    81 => "10111110001101000001101010101100", 
    82 => "00111101110001100101110100010001", 
    83 => "10111101000110110101001101000011", 
    84 => "00111110000010100110110101101010", 
    85 => "00111100100110010001010011011010", 
    86 => "00111110000010011111001001111000", 
    87 => "00111110001111011111100100111000", 
    88 => "10111100011100101100110111101000", 
    89 => "00111101111011001000111101110101", 
    90 => "00111110000111011001101101011111", 
    91 => "00111101110101000101111000001011", 
    92 => "00111110000011000010100010110011", 
    93 => "00111101110110111011010000001011", 
    94 => "00111110010000110101101111010101", 
    95 => "00111101011011011110011010001101", 
    96 => "10111101110011010111000111110011", 
    97 => "00111101111111111110110110100110", 
    98 => "00111101110000001101100100001110", 
    99 => "00111101100001101110110110010000", 
    100 => "00111101010010101011011111101010", 
    101 => "10111101101110110001001100010110", 
    102 => "10111101110100110010001001101100", 
    103 => "10111101000111111010000100110101", 
    104 => "10111100100101100110101011011011", 
    105 => "10111101110000000100011001110111", 
    106 => "10111011011000010110101101101010", 
    107 => "10111011100101101111001001110101", 
    108 => "00111101010111000110101111110111", 
    109 => "10111110010101001000101100100010", 
    110 => "10111101111110111100110000101001", 
    111 => "00111110001111000011011100011110", 
    112 => "10111100010101011101000111000100", 
    113 => "10111100100011001111010000000100", 
    114 => "00111110000001001100011100101010", 
    115 => "00111101110110110010010011101010", 
    116 => "00111101000000010010110101110111", 
    117 => "00111101100100001010001110100001", 
    118 => "00111100100111010100110101001110", 
    119 => "00111101010101111110101010100011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_6 is
    component inference_conv2d_f3_0_1_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_6_rom_U :  component inference_conv2d_f3_0_1_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


