-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_87_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_87_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001101100100010101101100", 
    1 => "10111101011010010011111111100101", 
    2 => "00111101010011111100000011101110", 
    3 => "10111011110111100110001011110111", 
    4 => "10111101100111011110010000110001", 
    5 => "00111101100011101011011001111100", 
    6 => "10111101100100000001011010001011", 
    7 => "00111101101110110000011110001110", 
    8 => "00111101010110111010111000101100", 
    9 => "00111101001111100001100011010101", 
    10 => "00111101111011101100011010111101", 
    11 => "00111101010110001010101000110110", 
    12 => "10111110001001111100100011010010", 
    13 => "00111101010010110110011111111000", 
    14 => "00111101101000100100111100111101", 
    15 => "10111101111100001000100000001110", 
    16 => "00111101010000110010000010110001", 
    17 => "10111100000100100001000101110000", 
    18 => "10111101010010010011111010111110", 
    19 => "10111110001000111011101111000111", 
    20 => "00111101010010000011110011001011", 
    21 => "10111101010101100100110100010100", 
    22 => "10111100101110111111001011000000", 
    23 => "10111110000111011100011010100000", 
    24 => "00111100101110111000100111100100", 
    25 => "00111101101001010000011010001101", 
    26 => "00111101000000111011011001101110", 
    27 => "10111101000111111001000010100100", 
    28 => "00111101111001100101101111101010", 
    29 => "10111110001011100110100010100001", 
    30 => "00111101001101001001010001011100", 
    31 => "10111110000100000110111101101001", 
    32 => "10111101101001101100000100110101", 
    33 => "10111101010110010111111100010010", 
    34 => "10111101010101010000011001110010", 
    35 => "10111011010011101100000001101101", 
    36 => "10111101100010110010100111100101", 
    37 => "10111101110111101011100101011110", 
    38 => "00111011011110001111000000010110", 
    39 => "00111101111100110110100010101101", 
    40 => "00111100000010010010110011110000", 
    41 => "10111100100100001001000010100111", 
    42 => "10111110000001111111001111001111", 
    43 => "10111101011001011000110101110011", 
    44 => "10111101101010011001101001010110", 
    45 => "10111101010010100010110110011011", 
    46 => "10111101010100011000111111111011", 
    47 => "10111100100100010101100101011001", 
    48 => "10111101011101110001010001101001", 
    49 => "10111101110001110011001101001011", 
    50 => "10111011101001001011110110111010", 
    51 => "00111101100101000000100111001011", 
    52 => "00111101101010110000110110001000", 
    53 => "00111100000010110110110000101111", 
    54 => "00111100111011100011100010001101", 
    55 => "00111101100110001000011010101010", 
    56 => "00111100111110100011111111001101", 
    57 => "00111101011101000000101011111111", 
    58 => "10111100101010010111101110001111", 
    59 => "10111101100011101000010001111000", 
    60 => "00111101111100001110001101000111", 
    61 => "10111110000000100001001000001110", 
    62 => "00111110000000111100011110010011", 
    63 => "10111110000010111000110111000101", 
    64 => "00111101000110111011110110010110", 
    65 => "00111110010000001110000011101011", 
    66 => "10111101010000101100000111001100", 
    67 => "10111101111011101101110101001000", 
    68 => "10111110000000100000010111111111", 
    69 => "10111101101000100000100110011101", 
    70 => "00111011100010101000011001000001", 
    71 => "10111011100001000011000000100110", 
    72 => "10111110000100001000110011000101", 
    73 => "10111110001001000111010110100011", 
    74 => "10111100011110111010010100100111", 
    75 => "10111101100001000011001011110011", 
    76 => "00111101101101111101000011001010", 
    77 => "00111101010110010100110010001000", 
    78 => "10111110000001100011110001110101", 
    79 => "00111101110001001010011111111000", 
    80 => "10111101001111111011101111110011", 
    81 => "00111101001011010100110111111100", 
    82 => "00111100011000000100100000111111", 
    83 => "10111101110100011011001111110010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_87 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_87 is
    component inference_mult_1_120_120_84_s_W4_87_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_87_rom_U :  component inference_mult_1_120_120_84_s_W4_87_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


