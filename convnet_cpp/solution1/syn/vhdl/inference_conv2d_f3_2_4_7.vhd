-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111101001001000011001100", 
    1 => "10111101001100110000110110101001", 
    2 => "10111011101110001100111001010011", 
    3 => "10111110001011011011111011000010", 
    4 => "00111101101001110010111100011001", 
    5 => "10111101110101101001011001011111", 
    6 => "10111101100110110101000101011111", 
    7 => "10111110000001000100110001111011", 
    8 => "10111101100111101000110111101000", 
    9 => "10111100011101001010101110100100", 
    10 => "10111101101110110101110000111010", 
    11 => "10111101111110001001000001001111", 
    12 => "00111101110001111101001011010101", 
    13 => "00111100100000011011000001101111", 
    14 => "10111101011110001100000000111011", 
    15 => "10111101110010100000011100010010", 
    16 => "00111011110000101001010001100101", 
    17 => "10111101110010110110010001101000", 
    18 => "00111101100100110011011111101011", 
    19 => "10111101111010010001111110110100", 
    20 => "00111101111011111110001111110011", 
    21 => "10111011100011111101101100101010", 
    22 => "10111011101001110000100110101111", 
    23 => "00111101100001010011001010110010", 
    24 => "10111110000010000110111000111011", 
    25 => "10111100011111100011001000110101", 
    26 => "00111100111100101100110011011100", 
    27 => "10111100110000011000111111101101", 
    28 => "10111000101000001110011010000010", 
    29 => "00111110000010111011101111101000", 
    30 => "10111101010111000101001110100011", 
    31 => "00111110000000110001011000011010", 
    32 => "10111100000111110011001010100000", 
    33 => "10111101001001010001110010000101", 
    34 => "00111110000111100011000000000001", 
    35 => "10111101011110100000101011011001", 
    36 => "10111101111000101110111101001110", 
    37 => "10111100101010100010001011101001", 
    38 => "00111110000000010100001001110000", 
    39 => "10111101101000110101010110011000", 
    40 => "10111101000101110101111101111101", 
    41 => "10111101011111001001100100101000", 
    42 => "00111011100000000111010000000100", 
    43 => "10111101011000100101000010001101", 
    44 => "00111101110001000011110100011110", 
    45 => "00111101101100101100000110001001", 
    46 => "00111101100010010010111011001101", 
    47 => "00111101101011010110010011001011", 
    48 => "10111100100111010110001011100111", 
    49 => "00111101110010100101111101110111", 
    50 => "00111101001100011010101111000100", 
    51 => "00111101100101110001011110000001", 
    52 => "00111101010111001110100111001011", 
    53 => "10111100110111000001011001001100", 
    54 => "10111101101100010011001010001101", 
    55 => "00111101001100010100011110000110", 
    56 => "00111101010000100101101010111001", 
    57 => "00111110000111111011111111000110", 
    58 => "10111110000101011011000110000101", 
    59 => "00111101101110101110001010010111", 
    60 => "10111101111101001001011110110111", 
    61 => "10111101111111001111100010010100", 
    62 => "10111011100111010110101101100000", 
    63 => "00111101100011010101000111101011", 
    64 => "00111101100110100001010010100111", 
    65 => "00111101110010100001010100101101", 
    66 => "10111101111010011010100000000101", 
    67 => "00111110000110010011100000010101", 
    68 => "10111101001101111010101010101100", 
    69 => "00111100111011011010110111101110", 
    70 => "10111100010010011100111011101100", 
    71 => "00111101000100100101011000001110", 
    72 => "10111101001101101101000111101110", 
    73 => "10111010010100100010101011011011", 
    74 => "00111100001000110011110010110001", 
    75 => "10111101100110010011001000000000", 
    76 => "00111011100000001110011010110000", 
    77 => "00111100111010011001101111011011", 
    78 => "00111101100101110100101010111010", 
    79 => "10111101101010010100101110110001", 
    80 => "10111110001001110011000100001010", 
    81 => "10111101111101000000000010111001", 
    82 => "00111011001001110101001111101100", 
    83 => "10111101100111110000110011111110", 
    84 => "00111101101111110100110010010111", 
    85 => "10111101110001101110101100110100", 
    86 => "00111110001001100011100101010000", 
    87 => "10111101010111001000100111011001", 
    88 => "00111100101011100111000001010110", 
    89 => "00111101000010101001001101010010", 
    90 => "10111101001011001110100011001100", 
    91 => "00111101001000000101000100001110", 
    92 => "10111101100110100100001111100100", 
    93 => "10111101100110100101001011111101", 
    94 => "10111100111001011110001101010100", 
    95 => "00111101110001001101011110100000", 
    96 => "10111101110010000010011001100111", 
    97 => "10111110000100001101101100100111", 
    98 => "10111011000000011101111010111101", 
    99 => "00111100111100100100101101000001", 
    100 => "00111100110110000001101000001000", 
    101 => "00111101101001010001101110100000", 
    102 => "00111101010000111100101011111011", 
    103 => "10111101110111010010011000110001", 
    104 => "00111101010100000010101010111011", 
    105 => "10111011011001010111000101011110", 
    106 => "00111101100000000110011000000111", 
    107 => "00111100111001010101101101101111", 
    108 => "00111100001101001111101111110110", 
    109 => "10111101000101111111100000001111", 
    110 => "00111101010011001111010010100101", 
    111 => "10111101101111100100010001100110", 
    112 => "00111101110100111111001110011101", 
    113 => "00111100101110001100011011110001", 
    114 => "10111110000011010010000110111100", 
    115 => "10111101001001101001110100111110", 
    116 => "00111101110110010001100100100110", 
    117 => "10111100001110011110011010101100", 
    118 => "10111101110010010001111111000001", 
    119 => "00111100000010111100100000100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_7 is
    component inference_conv2d_f3_2_4_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_7_rom_U :  component inference_conv2d_f3_2_4_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


