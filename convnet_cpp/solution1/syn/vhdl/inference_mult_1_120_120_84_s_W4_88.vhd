-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_88_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_88_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011001000001101100011000", 
    1 => "10111101110111011011001000101101", 
    2 => "10111011110111010100110000110110", 
    3 => "10111101101000010111001011100010", 
    4 => "10111100110000111000110100011110", 
    5 => "00111101001011001110000011101111", 
    6 => "10111101001101011101111110000000", 
    7 => "00111101010101000000000000110010", 
    8 => "00111101110100011101101000111000", 
    9 => "00111100100010100011000001110000", 
    10 => "00111110000100111011111111111001", 
    11 => "10111101010101010110111101001110", 
    12 => "00111101111111100011101001111110", 
    13 => "10111011010011100001010110100010", 
    14 => "10111101110001101111010001000110", 
    15 => "10111101101101000101001101100111", 
    16 => "10111101000101101011010101001110", 
    17 => "10111101111000110111111011110110", 
    18 => "10111011111001010001111011101001", 
    19 => "00111011111001000011111001000011", 
    20 => "00111101010010101111110011101001", 
    21 => "10111100110000001101001100101111", 
    22 => "00111110000110001000001101110111", 
    23 => "10111101101111101111111001101011", 
    24 => "00111101011110000001110100101101", 
    25 => "10111101100010100101010101110100", 
    26 => "10111101100110001010111010000010", 
    27 => "00111101111101010101001111101111", 
    28 => "00111110000011001000001011100000", 
    29 => "10111101101010001001110101101011", 
    30 => "10111101001011101101000111110101", 
    31 => "10111101100010110011000001110011", 
    32 => "00111100111110001110000000011011", 
    33 => "00111110000100010101100011111011", 
    34 => "10111110000000000101001011010110", 
    35 => "10111100000010001111101100111100", 
    36 => "10111101010100110010010010100000", 
    37 => "00111101111011010111101101100011", 
    38 => "10111101001000001111010110101110", 
    39 => "00111101101011000000111100111000", 
    40 => "00111010110010011010011111010100", 
    41 => "10111100101010010001001001111110", 
    42 => "10111101100010100010111010001101", 
    43 => "00111101011100011110000001001101", 
    44 => "00111011000010000010111110111010", 
    45 => "00111101100001011110111111001110", 
    46 => "10111110000100000111011110001010", 
    47 => "00111101001010100101101001100001", 
    48 => "00111110001001011000110001001100", 
    49 => "10111101111000010101011111101111", 
    50 => "10111101011100110011000001000100", 
    51 => "00111011000101110110011110111011", 
    52 => "10111101100000000110000000011010", 
    53 => "10111011111100100010010110001100", 
    54 => "00111101011111111010000000001110", 
    55 => "00111100111111100001110101110010", 
    56 => "10111011101000010011100111110111", 
    57 => "00111101100011000110010010111011", 
    58 => "10111101111010010001011001000100", 
    59 => "00111101011010111001101100111111", 
    60 => "00111101110011100110111110110101", 
    61 => "00111010100111101001101000110100", 
    62 => "10111100111111101000001111111111", 
    63 => "00111101011000011000110100110011", 
    64 => "00111100010110101110011000000000", 
    65 => "00111110000011101001111000011011", 
    66 => "10111100111110011110011101001101", 
    67 => "00111101111001000110110110000011", 
    68 => "10111101000111111100100011011000", 
    69 => "00111101010000100000011101000001", 
    70 => "00111101100000001011001111000111", 
    71 => "10111101000110111101100100001111", 
    72 => "10111101101100011011110101101111", 
    73 => "00111110000100111101010010101110", 
    74 => "10111110000011100011001101101010", 
    75 => "10111100101111001110111001101000", 
    76 => "10111100100110010011000011110100", 
    77 => "10111100110110000001001000010000", 
    78 => "10111101100010110001110111110001", 
    79 => "00111101011010101110110000111101", 
    80 => "00111101110001101010011111111101", 
    81 => "00111110000110111110010100010001", 
    82 => "00111101110110111100110010101111", 
    83 => "00111100001011101011110111101110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_88 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_88 is
    component inference_mult_1_120_120_84_s_W4_88_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_88_rom_U :  component inference_mult_1_120_120_84_s_W4_88_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


