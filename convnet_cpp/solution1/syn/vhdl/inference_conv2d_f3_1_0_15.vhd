-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110000111101001110010100", 
    1 => "00111101111010000101000000010110", 
    2 => "10111101010001110110000111011001", 
    3 => "10111101101100110001000011110111", 
    4 => "10111101001110101001111100111000", 
    5 => "10111101101101010011010110010100", 
    6 => "00111100101100001000100101101010", 
    7 => "00111101110001100100000111000001", 
    8 => "10111110000101100100111101010101", 
    9 => "00111100101010101111111001111100", 
    10 => "00111011011101111000001111011011", 
    11 => "00111110000101001011101011011000", 
    12 => "00111101100010001100100101001101", 
    13 => "00111011000010011111110011101110", 
    14 => "10111110001100010010110101110111", 
    15 => "10111101011111001110111110001111", 
    16 => "10111100101010110001101010010110", 
    17 => "00111101110110111101110111111101", 
    18 => "00111101010000001011000010010101", 
    19 => "00111100001110101001100101011001", 
    20 => "10111100011011100110100011111111", 
    21 => "00111101100000001000101000011001", 
    22 => "10111101110111011110111001111000", 
    23 => "00111100000110101111000100010010", 
    24 => "00111110000110000110110100101111", 
    25 => "10111101011011001100001100100111", 
    26 => "00111100110100111010010000100010", 
    27 => "10111101000110011100011001000101", 
    28 => "00111100100000001011110101011111", 
    29 => "10111101000100100111111100101001", 
    30 => "10111110000000000100010011110010", 
    31 => "10111101100001010101000111110001", 
    32 => "00111101001100001111001100011101", 
    33 => "00111101110011011111000111100001", 
    34 => "00111100001011110000110100110100", 
    35 => "10111101001110100111100001010001", 
    36 => "00111100010001100000111011011000", 
    37 => "00111110010000001000011100000001", 
    38 => "10111110001101110010100011101001", 
    39 => "00111110000001010000011001010111", 
    40 => "00111011100110001111001111010111", 
    41 => "10111100100011111011011101100011", 
    42 => "00111101100001110001110011110101", 
    43 => "00111100010111110111011111001010", 
    44 => "10111101001101010011101101001011", 
    45 => "00111110000111111011110010100001", 
    46 => "00111101100101110011001000111110", 
    47 => "10111101111000111110010100110010", 
    48 => "00111101110111110111011100101001", 
    49 => "00111100101001110011011011011011", 
    50 => "00111101111111111000000100011111", 
    51 => "00111110010100001101100101010001", 
    52 => "10111110000111100001011100011010", 
    53 => "00111100001110010100100101100010", 
    54 => "00111101000101010110100101010100", 
    55 => "10111101111010011100010111100111", 
    56 => "00111101111000111000000010001000", 
    57 => "00111101000100010100000100111011", 
    58 => "00111100110000010100101111000101", 
    59 => "00111101110001010111110101110101", 
    60 => "00111101100010111010100111111010", 
    61 => "00111101001000010101010011111111", 
    62 => "10111101001010101101001011000010", 
    63 => "10111101111001110001101111001110", 
    64 => "10111101111101111000110101010000", 
    65 => "00111101100111010110110110110100", 
    66 => "10111101111100011011100100110000", 
    67 => "10111101110000101010100011110010", 
    68 => "00111100001000010011000111001001", 
    69 => "00111101110100101000011100111100", 
    70 => "10111100111101100101100010110111", 
    71 => "10111101100100100011011101001000", 
    72 => "10111101100011100010011011101111", 
    73 => "00111101001100001001101000110001", 
    74 => "10111101010001110000110001111111", 
    75 => "10111101011101111010010001000111", 
    76 => "00111100110001101100010000111111", 
    77 => "00111101010010101101101110101100", 
    78 => "10111101100010001110011010001110", 
    79 => "10111100101111011110000000000000", 
    80 => "00111101010101000110111101110011", 
    81 => "10111110001110110000001101011100", 
    82 => "10111101000010101111111000101011", 
    83 => "10111101011010100000101000101010", 
    84 => "00111110001110110011100100011001", 
    85 => "00111101110110111011101101100010", 
    86 => "00111101101000011001001101100011", 
    87 => "00111101110010100101001110011110", 
    88 => "10111101101001011110011011111111", 
    89 => "10111100101111111001111001111100", 
    90 => "00111101000010011011111000001010", 
    91 => "10111101110110010010100001011011", 
    92 => "10111101100100001000011100101001", 
    93 => "10111101100100100001111110001000", 
    94 => "10111101010010001010110110000011", 
    95 => "00111110001110010100001001001110", 
    96 => "10111101001010111101100111110011", 
    97 => "10111101101011111110110010001101", 
    98 => "00111101111001101010000110100101", 
    99 => "00111101000101110010001110000011", 
    100 => "10111100110110111100101100000010", 
    101 => "00111110000000001001001000000100", 
    102 => "10111101100011000100001010100110", 
    103 => "10111100001001101001100010000110", 
    104 => "00111101100100101000000011110001", 
    105 => "00111100110011001011111001010100", 
    106 => "00111110000011110101000101101001", 
    107 => "00111101110111010101110000110001", 
    108 => "10111100111010111001111001111111", 
    109 => "00111011101101010001100101010010", 
    110 => "00111100000001110000001111101011", 
    111 => "10111110010010110011111100100001", 
    112 => "00111101100110100110110000100111", 
    113 => "00111101101111101001010010111001", 
    114 => "10111110000101111110100000000100", 
    115 => "00111101000100011100010101011010", 
    116 => "00111100100110101011011001100101", 
    117 => "00111110001110100111001000100010", 
    118 => "10111100110010001101011001101000", 
    119 => "10111100111101010100000011110101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_15 is
    component inference_conv2d_f3_1_0_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_15_rom_U :  component inference_conv2d_f3_1_0_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


