-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110011111010011000010110", 
    1 => "00111101010001010100110001010101", 
    2 => "00111101101110111100100000101101", 
    3 => "10111100110011101101110101001000", 
    4 => "00111101101001101001111100111100", 
    5 => "00111110001010011001010000011000", 
    6 => "10111100100001010010011100011100", 
    7 => "00111110001100001011000111111111", 
    8 => "10111101100001100010010011011101", 
    9 => "10111110000111100011000000000001", 
    10 => "00111101100000111001001000110011", 
    11 => "10111100110000111101101010110110", 
    12 => "10111101101111001001110110011101", 
    13 => "10111100110111001000111001110110", 
    14 => "10111101100111010011010110110110", 
    15 => "10111101000011101100011011110011", 
    16 => "10111100010110110010100100011100", 
    17 => "00111101010100001100000000001100", 
    18 => "00111011010111101000111001101011", 
    19 => "00111101101010010101001010011101", 
    20 => "10111110000110001100111011110110", 
    21 => "00111101100010011011010100101101", 
    22 => "10111100001111101010010101010111", 
    23 => "10111100111010010010011111100010", 
    24 => "00111101100110110101110100000011", 
    25 => "10111101111001001011110010101110", 
    26 => "00111110000001001111000001010010", 
    27 => "00111100110001110111011011101101", 
    28 => "00111101100011100100101000111000", 
    29 => "00111101010000111100100000001100", 
    30 => "00111101111001110111001001010000", 
    31 => "10111101111111011111111010111001", 
    32 => "10111110000100100001101011111000", 
    33 => "00111100100101000000100100000001", 
    34 => "10111011001010100111100011100101", 
    35 => "00111101001010010010110111110111", 
    36 => "00111101000111000111101000000100", 
    37 => "00111100011001111101101000000100", 
    38 => "10111101101000011000011001110000", 
    39 => "00111101101100110010101000000110", 
    40 => "10111110000100100001000001111011", 
    41 => "10111100100001001000101110110110", 
    42 => "00111110000010011111111000000000", 
    43 => "00111100110001000001101010101100", 
    44 => "10111101111000111000111000101010", 
    45 => "10111110000001000010111100011111", 
    46 => "10111110001001011011010010101011", 
    47 => "00111100111110111111011101011101", 
    48 => "10111101001010010000000001110101", 
    49 => "10111100101001100011110010101011", 
    50 => "10111101001010111000101100110100", 
    51 => "10111101100001001000101011011111", 
    52 => "00111011110110011111100010101111", 
    53 => "00111101010110111110011100110111", 
    54 => "10111101100011110101110101011110", 
    55 => "00111110000011011100010010000111", 
    56 => "00111110000000100001001100011011", 
    57 => "00111101010100011010001000000100", 
    58 => "00111100100000010111100010100110", 
    59 => "10111110011000001111110100111011", 
    60 => "00111101110011000101101110011011", 
    61 => "00111101110111111001100000110001", 
    62 => "10111110000101111000001100010111", 
    63 => "00111100011001100111110000110110", 
    64 => "10111101000101010100111001100001", 
    65 => "00111100011110101101101111010100", 
    66 => "00111110000001010110000110010001", 
    67 => "00111101010001000001011010110000", 
    68 => "10111101011110010001010001101110", 
    69 => "00111110000110111101010101010110", 
    70 => "00111101100110001001001011101111", 
    71 => "10111110000100001110100010000110", 
    72 => "00111101010100000110010100001000", 
    73 => "00111101110011110100011010101010", 
    74 => "10111101111100101011110111000010", 
    75 => "00111101011101100010011011101001", 
    76 => "10111100100101110001110100011101", 
    77 => "10111101110101010101111001101100", 
    78 => "10111101011101001011011001110000", 
    79 => "00111101011100110011000010010100", 
    80 => "10111100111000011000000010000011", 
    81 => "10111100111100010000011010011110", 
    82 => "10111001100000000011110011111100", 
    83 => "00111101101100011011101110110100", 
    84 => "10111101010110110000110001100000", 
    85 => "00111100111010111100111110010010", 
    86 => "00111110000000011100011110011011", 
    87 => "10111010101101010011100001011100", 
    88 => "10111101111110110100011011111110", 
    89 => "00111100100100101010101010010010", 
    90 => "10111101011110010100000010101110", 
    91 => "10111011010101110010001100111101", 
    92 => "10111110001000100000110111011100", 
    93 => "10111100000101001000101100000111", 
    94 => "10111011111101000101010101100111", 
    95 => "00111110010010111101101000001110", 
    96 => "00111101101011011010010010100110", 
    97 => "10111101100101100001010000110001", 
    98 => "00111101000000110101100001111010", 
    99 => "00111110000001100111101110100010", 
    100 => "10111101011101111101011010011100", 
    101 => "10111100100111000000100010101010", 
    102 => "00111101010101110100010100010001", 
    103 => "00111101010001110010101100000010", 
    104 => "00111101101001110001111010010101", 
    105 => "10111101100000001011000011011000", 
    106 => "00111101010100001001110001001010", 
    107 => "00111101101000101010011000111000", 
    108 => "00111101011011010110111001100011", 
    109 => "10111110000000111011110010010000", 
    110 => "00111101101111101110101011001111", 
    111 => "00111011010111001101010011011000", 
    112 => "00111101101111111011111110011110", 
    113 => "00111110000100010011001010110101", 
    114 => "00111100000110100000000100010011", 
    115 => "10111101001110100001011100000010", 
    116 => "00111011100011101000101010000111", 
    117 => "10111100001100011111101100100101", 
    118 => "00111101011011110000101111010111", 
    119 => "00111110010011110001010101100010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_11 is
    component inference_conv2d_f3_2_1_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_11_rom_U :  component inference_conv2d_f3_2_1_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


