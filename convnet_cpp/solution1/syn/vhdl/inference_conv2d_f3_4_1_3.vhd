-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101110001111010011010001", 
    1 => "10111100110101010110011000101110", 
    2 => "00111101100111110001001011111000", 
    3 => "10111101011000111001110100001110", 
    4 => "00111101100011010000111110100110", 
    5 => "10111101101110011101100100010111", 
    6 => "10111011111011010010011011001010", 
    7 => "10111101101000111100110000010101", 
    8 => "10111101111101000111110110000000", 
    9 => "10111101001111100001001011000000", 
    10 => "00111101111010110111111001001110", 
    11 => "00111101100110010111101110011100", 
    12 => "00111101010110001001001101011010", 
    13 => "00111101111011100101000101001100", 
    14 => "10111100001011100100101101101101", 
    15 => "10111011000011001110000110100101", 
    16 => "10111101001111101011000111101100", 
    17 => "10111101110101101001110010101010", 
    18 => "10111100001011100101011001010101", 
    19 => "00111110010000110101101010000110", 
    20 => "00111101101001101110100010000111", 
    21 => "00111100110100001110000010001101", 
    22 => "00111101100011101011011010001010", 
    23 => "10111101011001000000111001101000", 
    24 => "10111101100110011111101011000000", 
    25 => "10111100000001100111010000000011", 
    26 => "00111100110011011111110111110000", 
    27 => "10111110000010111110000000010101", 
    28 => "10111100001000011110011001111010", 
    29 => "00111101100011100010101000000111", 
    30 => "10111100011110010110110100111111", 
    31 => "00111100101110011101100010011111", 
    32 => "10111101110001010101111011100101", 
    33 => "00111101011010110010101001101011", 
    34 => "10111110000110001011100011110001", 
    35 => "00111100111010100011001101111011", 
    36 => "10111110000000010000110101111100", 
    37 => "00111100111111101100001100011111", 
    38 => "00111110000111000100101111010011", 
    39 => "10111101001010000011010011101101", 
    40 => "10111110001100001001000101111101", 
    41 => "00111110000000010110101100010010", 
    42 => "10111101101111101010111110000011", 
    43 => "00111101100000101111110010010010", 
    44 => "00111100111001010010101011111101", 
    45 => "00111101010110101110011000000000", 
    46 => "00111100101011101011000100100011", 
    47 => "00111100111101011100000011100010", 
    48 => "00111110010010110001111100100101", 
    49 => "10111100100111001101011010011011", 
    50 => "10111100101101000101010010011011", 
    51 => "10111101110000100000101100110000", 
    52 => "10111101010000111100100101101001", 
    53 => "00111110000110100111110101100111", 
    54 => "00111101110111100001011011010111", 
    55 => "00111101010000111010001101110011", 
    56 => "10111101111001100010011011110110", 
    57 => "10111011111010011110111001000110", 
    58 => "00111101011100010100011100110101", 
    59 => "00111101010000111000111110111101", 
    60 => "10111101100000110010000100001111", 
    61 => "10111101101001000000000111100000", 
    62 => "00111101101111101101100101100111", 
    63 => "10111101111110011100010010010111", 
    64 => "10111101100100100101010000000011", 
    65 => "10111110001001110001101111001110", 
    66 => "00111110000101111011101001100111", 
    67 => "10111101110100100100111100100010", 
    68 => "10111101010111100000111010101001", 
    69 => "00111101101001010100001001101101", 
    70 => "10111101110110111111011010100001", 
    71 => "10111110000001011010000101000101", 
    72 => "00111101110010010100000100110100", 
    73 => "10111101001110100111011110110000", 
    74 => "00111101111111011100101001001011", 
    75 => "10111100110010010001111000100001", 
    76 => "10111101011110101001111010110010", 
    77 => "00111010100001111110101101000110", 
    78 => "00111100100010100011110110100110", 
    79 => "10111101101101110110001011001011", 
    80 => "00111110000000001001000100111010", 
    81 => "00111101111100000111011101000111", 
    82 => "00111101100100100100101011111110", 
    83 => "00111110001000000000101100000011", 
    84 => "10111110001011001101000000110101", 
    85 => "00111101010101111111101101001111", 
    86 => "10111110000001110111101111000000", 
    87 => "10111101000001110001110100010000", 
    88 => "10111110010100010101111101000110", 
    89 => "00111101100011111010000100011011", 
    90 => "10111101111100111010100000011110", 
    91 => "10111101110001001001111101111010", 
    92 => "00111110001101010011111010110100", 
    93 => "00111101101010011111111100001101", 
    94 => "10111100011000010000110000011111", 
    95 => "10111101110010101000010011110100", 
    96 => "10111101111001010101001010100000", 
    97 => "00111101110110011100000001100110", 
    98 => "00111110010110100111100001101100", 
    99 => "10111101110010100111000111111001", 
    100 => "10111100100110110111100000101100", 
    101 => "10111100111001011000011001101101", 
    102 => "00111101100110100100101001111111", 
    103 => "00111101011100111010010000111101", 
    104 => "00111101011011100101011110110010", 
    105 => "00111100100000101100100010011101", 
    106 => "00111110000111101110111110100010", 
    107 => "10111101100010101001101101111111", 
    108 => "00111110000111100111001000010001", 
    109 => "00111100101101011100111100100101", 
    110 => "00111100100000100001101100101110", 
    111 => "00111110000100110001010101010001", 
    112 => "00111110001001000100101111110101", 
    113 => "00111100110110000011000110111011", 
    114 => "00111110000010111010100111010010", 
    115 => "00111101111111001101001001001110", 
    116 => "10111101101100100100001011011110", 
    117 => "10111101101100011111111100100001", 
    118 => "00111110010000001100011000101110", 
    119 => "00111100100101001100010001111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_3 is
    component inference_conv2d_f3_4_1_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_3_rom_U :  component inference_conv2d_f3_4_1_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


