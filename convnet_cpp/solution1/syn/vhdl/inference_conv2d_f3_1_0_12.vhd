-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100111000100000101111111", 
    1 => "00111101111110001000011111101100", 
    2 => "00111110000000000101000110000111", 
    3 => "10111101101001111111100100101000", 
    4 => "00111101010011110001111001100110", 
    5 => "00111100100000000110111000011010", 
    6 => "00111101110111011111011111101000", 
    7 => "10111101101110011100001000100001", 
    8 => "00111101011011100100001111000101", 
    9 => "10111101010010010111011011010111", 
    10 => "00111101101001110010011000111101", 
    11 => "10111101100111011111110110010010", 
    12 => "10111101000010111101111011100001", 
    13 => "10111101111010100111011100011101", 
    14 => "10111100010011010100001000111110", 
    15 => "10111110001001111100111101011111", 
    16 => "00111100100111101000111100000010", 
    17 => "10111110000110101100101010111100", 
    18 => "00111110010001011101011110001000", 
    19 => "10111101010100010000011101011010", 
    20 => "00111101000001001000101100101111", 
    21 => "00111101101101011101000111010001", 
    22 => "10111110001010010101000010111001", 
    23 => "10111101101101001100001100101110", 
    24 => "00111110010001010000000110011111", 
    25 => "10111100111001110100101000100111", 
    26 => "00111101100110100011010101011110", 
    27 => "00111101101001000000111010101011", 
    28 => "00111101110100100001010001101010", 
    29 => "00111101000101000010111001010101", 
    30 => "00111101101001101101100010111111", 
    31 => "00111110000100010100000101100011", 
    32 => "00111101100110110100010111010111", 
    33 => "00111100001001001101101100010110", 
    34 => "00111101101101111000110110101110", 
    35 => "10111101100100100010110010010110", 
    36 => "10111101010000001010000101111011", 
    37 => "10111110001100100001001101011110", 
    38 => "10111101101101111101110010110000", 
    39 => "00111101100110111000100100001101", 
    40 => "00111101100000110100010010001110", 
    41 => "10111101110001001100101010100000", 
    42 => "10111101001101001010000111100011", 
    43 => "00111110001011000001010101001101", 
    44 => "00111101010000011110101011110001", 
    45 => "10111100101010110111111110101011", 
    46 => "10111100100011001011010001111001", 
    47 => "10111101110001010111010110001011", 
    48 => "10111110000111100010011101011011", 
    49 => "10111101010000101111000100010110", 
    50 => "00111100111100110111000101111100", 
    51 => "10111101000100101101111000001110", 
    52 => "00111100010101110010001011111101", 
    53 => "00111101110111000000111000111001", 
    54 => "00111101101101101010011011111110", 
    55 => "10111100110100100000001100111000", 
    56 => "10111100010110110000111010101111", 
    57 => "10111100100101100110000101101011", 
    58 => "10111101100101101110111110110110", 
    59 => "10111101111010000100100010111111", 
    60 => "00111110000011101010001010010000", 
    61 => "10111110000110001101101001111111", 
    62 => "10111100111110110011110111000100", 
    63 => "00111101110000010000111100001111", 
    64 => "10111110000011100101110011010101", 
    65 => "00111101000011101001100110001011", 
    66 => "00111101110101100011011001101101", 
    67 => "00111100101100000111101111001001", 
    68 => "00111101111111101001111100100111", 
    69 => "10111101010010100010010011100111", 
    70 => "10111110001110100110001110110111", 
    71 => "10111101011010001100100010101100", 
    72 => "10111101010000100011100011110101", 
    73 => "00111101101000001010110010011000", 
    74 => "10111101111011110111100110000101", 
    75 => "00111101011000111010100100000010", 
    76 => "10111101110110100111110100100100", 
    77 => "10111101110100010001110001101101", 
    78 => "00111101110000101010000100110000", 
    79 => "00111101101110101110100010000100", 
    80 => "10111101100101001000000000000101", 
    81 => "00111011011110101111111011100100", 
    82 => "10111110010110011110101101100100", 
    83 => "00111101100101010110101010010110", 
    84 => "10111101101000000111011110010111", 
    85 => "10111110001010000000010010010110", 
    86 => "10111101101000110110101110000010", 
    87 => "00111101101010100000000000011001", 
    88 => "10111100110010011101101110110110", 
    89 => "00111110000001010001101100001101", 
    90 => "00111110001000110011000011010111", 
    91 => "00111101110011010111100011000100", 
    92 => "00111101100110011001010100010111", 
    93 => "10111101100110011110100010001111", 
    94 => "10111100101011111001011011000111", 
    95 => "10111101110110011101100110010000", 
    96 => "10111101110111001000010000110000", 
    97 => "10111010100100000110111010100011", 
    98 => "10111101111111101100110011000100", 
    99 => "00111101010000101100010110010010", 
    100 => "10111100111111101100111011011101", 
    101 => "10111011101011100001010111101000", 
    102 => "10111101100100100100001110110101", 
    103 => "10111101000110101100011011000000", 
    104 => "10111101010001001011001111000100", 
    105 => "00111011101011000100111001111101", 
    106 => "00111110000010100011101111011110", 
    107 => "00111101011000011011101001001010", 
    108 => "00111110001101100000001111010101", 
    109 => "10111101101011001111011110010101", 
    110 => "00111101010000110000111101100100", 
    111 => "10111011100101110010100110101000", 
    112 => "10111110000000110111100000100101", 
    113 => "10111011000001011100000011110101", 
    114 => "00111110000011100101101111001000", 
    115 => "00111110000011100111001100011101", 
    116 => "10111101110010001110011001100110", 
    117 => "10111101000110000001001111110011", 
    118 => "10111101101101011001000111011011", 
    119 => "00111101100100101111101000001101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_12 is
    component inference_conv2d_f3_1_0_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_12_rom_U :  component inference_conv2d_f3_1_0_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


