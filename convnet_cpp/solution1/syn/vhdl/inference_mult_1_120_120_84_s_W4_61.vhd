-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_61_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_61_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110001101111111110011001", 
    1 => "00111100001100100011000101000000", 
    2 => "00111101110001101001000101100100", 
    3 => "00111100101001011101100001101100", 
    4 => "10111101000000000100111001101111", 
    5 => "10111110001110010001111001100100", 
    6 => "10111101000100110110100010101101", 
    7 => "00111101101110011010000001000010", 
    8 => "00111011101101110011100110101000", 
    9 => "10111011101011100010100001110010", 
    10 => "00111110001100111011001101100011", 
    11 => "00111101100011000010101101000100", 
    12 => "00111101000100010000100111011110", 
    13 => "10111101101011110011100011000101", 
    14 => "10111101110001110100000111011110", 
    15 => "10111101001011000111001100100110", 
    16 => "10111101110001110111010010101100", 
    17 => "10111101100010101001011101011011", 
    18 => "10111101101011101001101100111001", 
    19 => "10111101001011000000101100111100", 
    20 => "10111101001101011000111001010111", 
    21 => "10111101111111110110011011101000", 
    22 => "00111101101000010100000001100100", 
    23 => "00111101110000101000110111110010", 
    24 => "00111100100001100010101000011011", 
    25 => "00111010010100010111100100000100", 
    26 => "10111110000101110110000110001001", 
    27 => "00111101010011011010011100111000", 
    28 => "10111100001110000000111011010000", 
    29 => "00111101100100001110000011101011", 
    30 => "10111110000000010101111110001001", 
    31 => "00111110000100100011011100000100", 
    32 => "10111101110001101100001001110111", 
    33 => "10111101101010001011011110101111", 
    34 => "10111110001000000010011001000110", 
    35 => "10111101100101100111100000000100", 
    36 => "10111101010100010010010100000110", 
    37 => "00111100011000100100000011010010", 
    38 => "10111110000001100011010100011110", 
    39 => "00111110010000100001111111110011", 
    40 => "00111100110000110010111000011101", 
    41 => "00111001010100000110100111110110", 
    42 => "00111101100110101111001010111101", 
    43 => "00111101010111011100010010111100", 
    44 => "00111110000011100000111001110011", 
    45 => "00111100110010011001101100011111", 
    46 => "10111100111000111010110011100011", 
    47 => "10111101101011100100001110111000", 
    48 => "00111101101010110010010110001011", 
    49 => "10111110011011101110100010001110", 
    50 => "10111100100110000101011101111010", 
    51 => "10111100110110000011000010101110", 
    52 => "10111101000011100110000100000111", 
    53 => "10111100101110010000001010110110", 
    54 => "00111101000101001101010011110100", 
    55 => "10111101111100001110001011000001", 
    56 => "10111100010011000000111110100011", 
    57 => "00111100100110001101000110111110", 
    58 => "00111011101100100000101011101010", 
    59 => "00111110000101111110100010001010", 
    60 => "00111011111101110000101111010000", 
    61 => "10111101110000010110101100101101", 
    62 => "10111101101010100100110111001100", 
    63 => "10111100111100111010110100001011", 
    64 => "10111101111011010101101011100010", 
    65 => "00111110000001001011101001010010", 
    66 => "10111101011001110010110101101011", 
    67 => "10111101001111001100100110011010", 
    68 => "10111101000110111101011011000000", 
    69 => "10111101011101010100101101110001", 
    70 => "10111101011011000000101100000110", 
    71 => "00111101110010111010010011110010", 
    72 => "00111101100001011011101111011001", 
    73 => "00111101101000001100101101111010", 
    74 => "00111100101110111001010101101101", 
    75 => "10111110000111011000001111000111", 
    76 => "00111101101101101110100110010100", 
    77 => "00111101100010111111001110010110", 
    78 => "10111101110011100000111000110000", 
    79 => "00111101101011110000101111100100", 
    80 => "00111101111000100100010111110110", 
    81 => "10111101101000011111011100001110", 
    82 => "00111101000111000010001001011011", 
    83 => "10111110010111010111110000101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_61 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_61 is
    component inference_mult_1_120_120_84_s_W4_61_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_61_rom_U :  component inference_mult_1_120_120_84_s_W4_61_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


