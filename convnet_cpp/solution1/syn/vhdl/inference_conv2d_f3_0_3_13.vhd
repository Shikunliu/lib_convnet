-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100001111010000111101011", 
    1 => "00111101100111011010000011101101", 
    2 => "10111101011110101101111000100010", 
    3 => "10111101010110111001101110011101", 
    4 => "00111110001111011100011000011001", 
    5 => "10111101001111100000101011100011", 
    6 => "10111101010001111111001111101010", 
    7 => "00111101100111000100111100101110", 
    8 => "00111100111000111010000010000100", 
    9 => "10111100001101000110001011011110", 
    10 => "10111101000100100101000110100111", 
    11 => "10111101100101010011111110100101", 
    12 => "00111011110000100111010010011010", 
    13 => "00111101011101010110010110001101", 
    14 => "00111101010110111111010110010100", 
    15 => "00111100001001111000111010111010", 
    16 => "10111101011101110100001000100001", 
    17 => "10111101010000110011011001100110", 
    18 => "10111101111011010101001110001011", 
    19 => "10111101110010110010011001101111", 
    20 => "10111101100001000010101101001011", 
    21 => "10111101101001001111101110100101", 
    22 => "00111101011010100010101000100101", 
    23 => "10111101100010101100100000111000", 
    24 => "00111101101010000000111100100000", 
    25 => "00111011111010001000010010100100", 
    26 => "10111100110111010011001110000010", 
    27 => "00111100000111011001101111000111", 
    28 => "00111110000010110101000100110111", 
    29 => "10111100010101100101111110001000", 
    30 => "00111101000111001010001011001110", 
    31 => "10111101111010010000011010001010", 
    32 => "00111110001001111100101011101010", 
    33 => "10111110001010111100010010001111", 
    34 => "10111110000000111000000010001000", 
    35 => "10111101111100011010000010001100", 
    36 => "10111110001111001001001000010100", 
    37 => "10111101001001110011100001101110", 
    38 => "10111101100110001000101001111110", 
    39 => "00111110001111110110001011111010", 
    40 => "00111101101001010010110110001111", 
    41 => "00111101011010010100101100000010", 
    42 => "10111101111110010000101110000101", 
    43 => "10111100001001100010101100001101", 
    44 => "00111110001010101010011100010110", 
    45 => "10111110000101111100111010010110", 
    46 => "10111101110000011011010000011010", 
    47 => "10111110000010010000110100010111", 
    48 => "00111101011110000011100100010010", 
    49 => "00111100111000111000101100100000", 
    50 => "00111101111110101111011011000111", 
    51 => "00111011010111001101101011100010", 
    52 => "00111101100101101001001111011011", 
    53 => "00111101110001011011101000011110", 
    54 => "00111011111100011000100010011001", 
    55 => "10111101010110001001110101101011", 
    56 => "10111011110011000100011101000001", 
    57 => "00111101100100010111101010110001", 
    58 => "00111110001111011100100100111111", 
    59 => "10111011001010100001010101101000", 
    60 => "00111100100111010100111111010010", 
    61 => "10111100101101110101010101101100", 
    62 => "10111101011000010000100110011011", 
    63 => "00111101101000100111010101101000", 
    64 => "10111100110011111101110010000001", 
    65 => "00111110000101000110100001000101", 
    66 => "10111100110010011101100110011110", 
    67 => "10111101101000101111010010110100", 
    68 => "10111101101000110000101001101001", 
    69 => "10111110000101110101100000011001", 
    70 => "00111101001000110000110100110000", 
    71 => "10111101001110011000100101011001", 
    72 => "10111101101111100010011111111100", 
    73 => "10111101001000000110000001111000", 
    74 => "10111101110011001111100011010111", 
    75 => "10111101010010001111110110111011", 
    76 => "00111110000100111000001001011110", 
    77 => "10111011111101000011110100101001", 
    78 => "10111101001000101010110010111000", 
    79 => "10111101100010010010110110110100", 
    80 => "00111101110011101101111011011011", 
    81 => "00111110010010000000101110101010", 
    82 => "10111101001001100011000010011100", 
    83 => "10111011000101101011011101100111", 
    84 => "00111110000110001100111111000000", 
    85 => "10111101101100001101001100010100", 
    86 => "10111110001000010010111110010000", 
    87 => "00111101110101011110011000110110", 
    88 => "10111101111011111010110001100000", 
    89 => "00111100111011001101101011110101", 
    90 => "00111101110100010100110010101001", 
    91 => "10111100111101000011111010010110", 
    92 => "10111110000000011111001100011111", 
    93 => "00111100011001001000100001000000", 
    94 => "10111100111000111100011000001110", 
    95 => "10111110010110010111111101100011", 
    96 => "10111101111000100010011100000111", 
    97 => "10111101101000100011101000000010", 
    98 => "10111101100101100001100000111011", 
    99 => "00111110000000101011111101010101", 
    100 => "10111011010011011111100111110011", 
    101 => "10111101110010111101010000111100", 
    102 => "10111101011011110011011101011011", 
    103 => "00111011110000110001110100001011", 
    104 => "10111101111010001001001000100101", 
    105 => "10111101101000010110101011000001", 
    106 => "00111110001101111101111111100011", 
    107 => "10111101011100110010011001101000", 
    108 => "00111101111010000101000000010110", 
    109 => "10111110001000111100101100111110", 
    110 => "00111100101010101001111000111001", 
    111 => "00111110000001001000100001000000", 
    112 => "10111110000101110001100010101000", 
    113 => "00111101111010000010110011110101", 
    114 => "10111110000000010111001001101001", 
    115 => "10111000111010101101000101110000", 
    116 => "00111101000011110101111101001110", 
    117 => "10111101110001101101011111101001", 
    118 => "00111101010011100010001011110011", 
    119 => "10111010111111011111001101100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_13 is
    component inference_conv2d_f3_0_3_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_13_rom_U :  component inference_conv2d_f3_0_3_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


