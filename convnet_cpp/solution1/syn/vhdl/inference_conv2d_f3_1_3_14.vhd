-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110001111000011111101001", 
    1 => "10111110001001010010011111100101", 
    2 => "00111100000001000111100100101100", 
    3 => "00111011110001110001010100111101", 
    4 => "10111101110110100001011011101000", 
    5 => "10111101100101111011111100000100", 
    6 => "00111101110001110001110010110010", 
    7 => "00111100011001001001000000111000", 
    8 => "00111101110000100101101100010111", 
    9 => "10111110000010011110111100001111", 
    10 => "10111100100101010000010001110100", 
    11 => "00111100111001111111110011010100", 
    12 => "00111101010111001100001001000011", 
    13 => "00111101011011001011001110001000", 
    14 => "00111100001100101111110100011000", 
    15 => "00111101000000101011000100111011", 
    16 => "00111101101010011000100010010000", 
    17 => "10111110000000110011110010100011", 
    18 => "10111101011101111111110001000000", 
    19 => "10111101000011010000011011001001", 
    20 => "10111011101010001101110010011000", 
    21 => "00111101100110010001011101010000", 
    22 => "10111101110010010010001110100011", 
    23 => "00111110000101101110111001110100", 
    24 => "10111100010101101010011101000001", 
    25 => "10111100110001011010001011010111", 
    26 => "00111101111010101100000110010000", 
    27 => "00111011101101000010100011010010", 
    28 => "00111110001101000001001111011011", 
    29 => "00111110000101001101011011100100", 
    30 => "10111101110000101011000101111110", 
    31 => "10111110000010010110000000110001", 
    32 => "00111011101111100000101101101001", 
    33 => "10111101000110100010101100100100", 
    34 => "10111101000010000100000010010001", 
    35 => "10111010111100011100010011010100", 
    36 => "10111101011010001111100101010011", 
    37 => "00111011100001101011100111101110", 
    38 => "10111101100000010110010110111001", 
    39 => "00111110011000110000001111000000", 
    40 => "00111110001001100101111011001100", 
    41 => "00111101101111000100101111000110", 
    42 => "10111101010001110010000100100111", 
    43 => "10111100000110000111010001001011", 
    44 => "00111101111110011111011101110011", 
    45 => "10111101100111100111101011100000", 
    46 => "10111101101011000101100110000010", 
    47 => "10111101000111001100110101100000", 
    48 => "00111101000001101110110100111111", 
    49 => "00111101000110110010011010010111", 
    50 => "10111101101000110000000101010111", 
    51 => "00111110011010011101000100101101", 
    52 => "10111101100001111010001011101010", 
    53 => "00111101101011001100100100010100", 
    54 => "10111101010011100000100100101000", 
    55 => "00111101110101011111100110011100", 
    56 => "00111010001010000111001000010011", 
    57 => "10111100000110010001000101010100", 
    58 => "10111101010001001010100101100010", 
    59 => "10111100101100000110101100111000", 
    60 => "10111101110100000011111000100001", 
    61 => "10111101110100000011111110110011", 
    62 => "00111101010011100011110001010011", 
    63 => "10111101000111110001000100111101", 
    64 => "00111101101001110110100110101001", 
    65 => "00111101101100001100001000001010", 
    66 => "00111101000101111111110001000000", 
    67 => "10111101110010100110011001111110", 
    68 => "00111101100011001111111011101100", 
    69 => "10111101010010001011111011010001", 
    70 => "10111110000001111110100110010110", 
    71 => "00111101111100110101100011110011", 
    72 => "10111101011010000010100010101001", 
    73 => "10111101100000001011000111001001", 
    74 => "00111101100101000100011011011111", 
    75 => "00111100010011101111110010111101", 
    76 => "00111100001011010111101111001111", 
    77 => "10111110000110110100110100000101", 
    78 => "10111100101010101010111011001011", 
    79 => "10111101000111011101000011100110", 
    80 => "10111110010010111010101101100101", 
    81 => "10111110000001001010010000001001", 
    82 => "10111101011111101110110100101011", 
    83 => "10111110000010010110011000111000", 
    84 => "00111101100101110001111011100110", 
    85 => "00111101100110100100101111110110", 
    86 => "00111100111111010001000101101110", 
    87 => "00111010011010011010001011111010", 
    88 => "10111101000110101011010011101101", 
    89 => "00111101110001110001001101011101", 
    90 => "00111101100001101001010001000110", 
    91 => "00111100111011101110011001101000", 
    92 => "10111100001100111001001101000000", 
    93 => "10111101111010111100010000001001", 
    94 => "00111101001000000101011011101101", 
    95 => "00111110001110000111010001000011", 
    96 => "00111110000001100100111011001111", 
    97 => "10111110001101010111001010011011", 
    98 => "10111101000111110111001101001000", 
    99 => "00111110000110111101111100001001", 
    100 => "10111101011001111111001011011110", 
    101 => "00111101000000000100000111110101", 
    102 => "00111101100111100101110011111101", 
    103 => "10111101111101110010101101000101", 
    104 => "00111101101000001111110110110100", 
    105 => "10111110000001111001110100001010", 
    106 => "10111101111101011001010101111001", 
    107 => "10111011100001011101011001000011", 
    108 => "00111100111000110000100101001111", 
    109 => "00111100101100111110110001100001", 
    110 => "00111101010111000000000110111110", 
    111 => "10111011101100110110001100000100", 
    112 => "00111110001010010010110000000110", 
    113 => "00111110000101001001100000111101", 
    114 => "10111101111101101111101100001001", 
    115 => "10111101001000011011111111110100", 
    116 => "00111101000110010100000101001111", 
    117 => "10111101000010000011001010000100", 
    118 => "00111101110000111010011110110010", 
    119 => "10111101100101110001110001111100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_14 is
    component inference_conv2d_f3_1_3_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_14_rom_U :  component inference_conv2d_f3_1_3_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


