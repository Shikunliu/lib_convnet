-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100011001000100100000010", 
    1 => "10111101010001110000000001010101", 
    2 => "00111101101000101100001101010001", 
    3 => "10111100101100010100111001010111", 
    4 => "00111101011111000111100000100001", 
    5 => "00111100111011110011010001101011", 
    6 => "10111110000011100110001101100011", 
    7 => "10111101101010110001101100001110", 
    8 => "10111100100100100100110100001010", 
    9 => "00111110000010110100011110000100", 
    10 => "00111101110111000010011111101001", 
    11 => "00111101111110001010001110110101", 
    12 => "00111100011101110100011011110100", 
    13 => "10111101111011000010111001110111", 
    14 => "00111101011001000100010011010011", 
    15 => "00111101100100111100101110000001", 
    16 => "10111100010110101101010100111001", 
    17 => "10111101000000001111100001101000", 
    18 => "10111101011110010111011100110101", 
    19 => "00111101010000011010101101001011", 
    20 => "10111110000110010110111010011100", 
    21 => "00111100010011111010011010011100", 
    22 => "00111110001011101101110011000010", 
    23 => "10111101011000000010001001001010", 
    24 => "00111101001010001110010001000000", 
    25 => "00111101011100000100011001101001", 
    26 => "00111101100001100011110100010110", 
    27 => "00111101001000111100110111101011", 
    28 => "10111101000000000101111100000000", 
    29 => "10111101100010100011001110010101", 
    30 => "10111101100010110100101111011110", 
    31 => "00111100111110110101010110101100", 
    32 => "10111101111011110000010010011011", 
    33 => "00111101101000111010001100110000", 
    34 => "10111101100001011000000000111101", 
    35 => "00111101100010001110000011001010", 
    36 => "10111101000111101000111010110001", 
    37 => "00111101100011000001101000000101", 
    38 => "00111110000001100000001110010010", 
    39 => "00111101101110100101111010100001", 
    40 => "10111110001110000100101010010100", 
    41 => "10111110000010101111110001001000", 
    42 => "10111100010110111111111000101110", 
    43 => "00111100100111100101100001111011", 
    44 => "00111110010000001111110000101111", 
    45 => "10111101001001000010001000011110", 
    46 => "10111101010111001010111010100111", 
    47 => "00111110001111101100000011111001", 
    48 => "10111101110111001000100001100001", 
    49 => "10111110000100111110111001011111", 
    50 => "00111011100101110010001000110001", 
    51 => "00111101101011111010010011101110", 
    52 => "10111101111101001011110011110001", 
    53 => "00111100011011010010101010100110", 
    54 => "00111101010110101011101100110111", 
    55 => "00111101110110011100101101101000", 
    56 => "10111101111110011001111011011000", 
    57 => "10111101110100001001011010111100", 
    58 => "10111101001001100101011110011101", 
    59 => "10111101010010100001010011000001", 
    60 => "00111101100011111010011101100101", 
    61 => "10111101010011100111000101111101", 
    62 => "00111110010001011001011101001110", 
    63 => "10111110000011010001011010111001", 
    64 => "10111011010110010010000111110000", 
    65 => "00111110001010000100000010011110", 
    66 => "10111100111010000000110000100011", 
    67 => "10111100101100010010011101010101", 
    68 => "10111110010010100001011000011110", 
    69 => "10111110000110101110011111010101", 
    70 => "10111101011000000010100110000110", 
    71 => "00111010110111010111101001000100", 
    72 => "10111101000101001100101101001110", 
    73 => "10111100111110100110010100100001", 
    74 => "00111011011011111110001100100111", 
    75 => "00111101110001101110011010111111", 
    76 => "10111100000000001110011110111100", 
    77 => "00111110010001010001010101001000", 
    78 => "00111101001001110010011100100001", 
    79 => "10111101010110100100101100000101", 
    80 => "00111100001100100001010100100110", 
    81 => "00111110000001011001001101100000", 
    82 => "00111101001000100110111101000110", 
    83 => "00111100001010010110010001111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_9 is
    component inference_mult_1_120_120_84_s_W4_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_9_rom_U :  component inference_mult_1_120_120_84_s_W4_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


