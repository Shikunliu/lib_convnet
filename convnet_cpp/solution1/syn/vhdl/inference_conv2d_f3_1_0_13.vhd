-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000000110101101101001111", 
    1 => "00111101110011110000101111110010", 
    2 => "00111101101110001110110011110100", 
    3 => "00111100110011100110011010010101", 
    4 => "10111101011010000110000010100111", 
    5 => "00111101101110010111111010001100", 
    6 => "10111110001010100100001011110010", 
    7 => "10111101010110101101110111010010", 
    8 => "10111101100001000100001101000001", 
    9 => "00111010010001000011010001011110", 
    10 => "00111101101000100100110010010001", 
    11 => "10111101001000011101110110100000", 
    12 => "00111110000001001111111111001001", 
    13 => "00111101100101111001010011001111", 
    14 => "10111101101110100101010011100000", 
    15 => "00111101000011001100100011010001", 
    16 => "00111101000110100001100000101010", 
    17 => "00111100101110101010100000000111", 
    18 => "10111100011011110010100110000100", 
    19 => "10111110000110000011000001011110", 
    20 => "00111100100000110101001100111100", 
    21 => "00111101000100001101101101001111", 
    22 => "10111101100100010111010010001111", 
    23 => "10111101000100010000011111111011", 
    24 => "00111110001010000101101010010010", 
    25 => "00111110001000101011111011001111", 
    26 => "00111101110000111100010101000100", 
    27 => "00111101100000001110010111110100", 
    28 => "10111101001101001010011111000010", 
    29 => "00111101110011011101010110010001", 
    30 => "00111110000000011001100000101001", 
    31 => "10111101110011010110000000100000", 
    32 => "00111101001011011010011111011001", 
    33 => "00111101101001001010101010001010", 
    34 => "10111101010110010001101001001110", 
    35 => "00111101011100111011001010110101", 
    36 => "10111101010010111000100010101111", 
    37 => "00111101010011011000011100100010", 
    38 => "10111110000110100111101001000010", 
    39 => "00111101101000111011001000101111", 
    40 => "00111101001010110101011011100001", 
    41 => "00111101001101111000000010100000", 
    42 => "00111101111011011000110100110111", 
    43 => "10111101101100000110110011100101", 
    44 => "10111100101100100010111001010000", 
    45 => "10111101001111001101001000110011", 
    46 => "10111101001101000001100000011011", 
    47 => "10111101100110101010010111111100", 
    48 => "10111110000100001110100111010101", 
    49 => "10111100010001010100010010101110", 
    50 => "10111110001010100100001001101100", 
    51 => "10111101111011100010100011101101", 
    52 => "00111100100010001110010001110101", 
    53 => "00111101111011000100101101001101", 
    54 => "10111101000100110001100111010011", 
    55 => "00111110001000100101011100000000", 
    56 => "10111110001000010111101000000011", 
    57 => "10111101100001101101100001010100", 
    58 => "00111100011011011010111011000101", 
    59 => "00111100010101111111101011111110", 
    60 => "00111101110010000000001110010111", 
    61 => "10111101101110000110101101011001", 
    62 => "10111101100010110001001001000000", 
    63 => "00111101101100111001000010111100", 
    64 => "00111110010000111101111101101110", 
    65 => "10111101011110101000110101001010", 
    66 => "00111100111101000000100001000101", 
    67 => "00111100110111100100010011000100", 
    68 => "10111101110010010111101111111010", 
    69 => "00111100110000101111111001001101", 
    70 => "10111101101111010100100100110111", 
    71 => "10111101001011111001100100110000", 
    72 => "10111101011101010000110111001001", 
    73 => "00111110000011111110001110110000", 
    74 => "00111110010000010100111101001000", 
    75 => "10111101110000010010111000011000", 
    76 => "00111101001101001001010000100111", 
    77 => "10111101000001110000010000000000", 
    78 => "10111100001001000001100000001101", 
    79 => "10111100101000000111101110100001", 
    80 => "00111110000110001111101001111011", 
    81 => "00111101100100100101010101100000", 
    82 => "10111101101010110010011000000100", 
    83 => "10111101101110001010000000010111", 
    84 => "00111101001000111011101001101010", 
    85 => "00111101111000010001001010111010", 
    86 => "00111101000010100010001010110100", 
    87 => "10111100001100111101001100000001", 
    88 => "00111101000111100001001011011011", 
    89 => "00111101111000000000101001111100", 
    90 => "10111101101110100011110111011100", 
    91 => "10111101000011111101111101110001", 
    92 => "10111101101100100010010010101011", 
    93 => "00111110000000100111000001101101", 
    94 => "00111101100111100011010010011110", 
    95 => "00111110001010100000000111101111", 
    96 => "10111101001101000000101001000011", 
    97 => "00111100011101111111010100000100", 
    98 => "10111110000000001001000010110100", 
    99 => "00111110001000101000111010010011", 
    100 => "00111101100000100011000001011100", 
    101 => "10111100111010110100010000011100", 
    102 => "10111110001000100110001111011000", 
    103 => "00111101001101110000001101101101", 
    104 => "00111110000001010100011011010100", 
    105 => "10111101101111000000010011110001", 
    106 => "10111110000010001001100101111100", 
    107 => "10111101010101001100110001000000", 
    108 => "00111101111001000111110010110111", 
    109 => "00111100110000111101010100001100", 
    110 => "00111110001011000000111100000010", 
    111 => "10111101110011111111010000110100", 
    112 => "10111101101100110011100010011010", 
    113 => "00111100101101111111101001111000", 
    114 => "00111110001111111000000010011001", 
    115 => "00111101110101001000111011001110", 
    116 => "10111101100000101000001010011111", 
    117 => "10111101011110010010001011001100", 
    118 => "00111101101001110100011101011111", 
    119 => "10111100101110111100111100011001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_13 is
    component inference_conv2d_f3_1_0_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_13_rom_U :  component inference_conv2d_f3_1_0_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


