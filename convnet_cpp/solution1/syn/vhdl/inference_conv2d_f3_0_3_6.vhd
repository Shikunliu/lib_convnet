-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100101000010101101001011", 
    1 => "00111100110111100110010001101111", 
    2 => "10111101100110101100111011111011", 
    3 => "10111101001000111110011011111010", 
    4 => "10111101100111100010100010000010", 
    5 => "10111011000010010100110001000100", 
    6 => "00111100111110001111100011011010", 
    7 => "00111110000110110111101001011111", 
    8 => "00111100101100001110011101011110", 
    9 => "00111100110011100100101110111101", 
    10 => "00111101010011000001001111110000", 
    11 => "10111101101000100111011011010011", 
    12 => "10111101101110010111011111001001", 
    13 => "00111101101010011001110101000101", 
    14 => "00111110001001010000110001011111", 
    15 => "00111110010011000101000010001011", 
    16 => "10111100100101110110000011011010", 
    17 => "10111101010101111011110110001100", 
    18 => "10111101101010000100100010111111", 
    19 => "10111110001100110111011110011111", 
    20 => "10111101101011000100101110111000", 
    21 => "10111011110011111010011010000110", 
    22 => "00111110000000111011010011110110", 
    23 => "00111101011001101011110010110011", 
    24 => "10111100111111110101110001101100", 
    25 => "00111100110000000100111000111001", 
    26 => "10111110000011111100111111000100", 
    27 => "10111011100011011110101001001110", 
    28 => "00111100100011000010110011111111", 
    29 => "00111101000010111100110000011100", 
    30 => "00111110000101011010111110110000", 
    31 => "10111100101100011011010001000011", 
    32 => "00111100000010101000111100100101", 
    33 => "00111101100110010110011011001100", 
    34 => "00111110011011101110000011110100", 
    35 => "00111100000100110010000110011011", 
    36 => "00111101100101100010000111000101", 
    37 => "00111100010100001111101110011011", 
    38 => "10111110000111110101001010111001", 
    39 => "10111110000101001001011101110100", 
    40 => "00111101011111011100100101011001", 
    41 => "00111101011100111110111010101111", 
    42 => "00111110000011111001000100011101", 
    43 => "10111011101110110011001111011110", 
    44 => "10111101111010000101111000111110", 
    45 => "00111101110111111010001000100111", 
    46 => "00111101001111110101110110010011", 
    47 => "00111101000101001010101010010111", 
    48 => "00111101110011011001000101101000", 
    49 => "00111101000001111101011100010100", 
    50 => "00111100110111110110001001100110", 
    51 => "00111101001011010100100000111000", 
    52 => "00111101010111011001100110100100", 
    53 => "00111101001000111101000010100101", 
    54 => "00111100101100110101010011110111", 
    55 => "00111100111100001100010001011001", 
    56 => "00111101100000010111010000001001", 
    57 => "00111101110110111010110000101110", 
    58 => "10111101111000010000010010010010", 
    59 => "00111101110111111111000011001100", 
    60 => "10111101001001101010011111010101", 
    61 => "10111101101011100011111101010000", 
    62 => "00111100110011000001011010001111", 
    63 => "00111101101010101001111000011110", 
    64 => "00111110001011011111111011111100", 
    65 => "10111100111000010000000100000010", 
    66 => "00111101110100001000010011101000", 
    67 => "10111110010110100111110101100111", 
    68 => "00111101010100100011111001110110", 
    69 => "00111101100010100000001010000011", 
    70 => "00111000111001100101010110011011", 
    71 => "00111101000011010000100110011110", 
    72 => "00111110011011110100111000000001", 
    73 => "00111101110010001001110010111100", 
    74 => "10111100111101101101101000011100", 
    75 => "00111110001001010010101001000001", 
    76 => "10111101101010011101001101101110", 
    77 => "10111110000111100110001001010110", 
    78 => "10111101101111101110000010001000", 
    79 => "00111100100001110110101100101110", 
    80 => "10111101101010110011011000000001", 
    81 => "10111101101111000111010100100100", 
    82 => "10111101001100001001101010111000", 
    83 => "10111100000100000000111100101100", 
    84 => "00111110000101001000100110001111", 
    85 => "00111101101101110100101101110110", 
    86 => "00111100100100011101010000111110", 
    87 => "10111100010100010111001001001110", 
    88 => "10111101010100110001001110001000", 
    89 => "00111101010100101101000000000001", 
    90 => "00111110010001000110001110001101", 
    91 => "10111101100001100101001100000000", 
    92 => "00111101101110011101001011110101", 
    93 => "00111110001100001100101110110000", 
    94 => "10111100001100010110000001100000", 
    95 => "10111110000110111101000110101011", 
    96 => "00111101111000000100100001011010", 
    97 => "10111100111111001011100111111010", 
    98 => "00111101100001110101010000101010", 
    99 => "00111101111000101010101000011001", 
    100 => "10111011010000111111011100111011", 
    101 => "10111101011100001001011001010000", 
    102 => "10111101100110011000001011110011", 
    103 => "10111100110001100001010111111001", 
    104 => "10111101100011001010111001010111", 
    105 => "00111101010100010111011011010000", 
    106 => "10111100011111101010111110011110", 
    107 => "00111101000100100100010111001101", 
    108 => "00111101000010011110101101110001", 
    109 => "10111101011010001110101011011011", 
    110 => "10111101001010110011100100110100", 
    111 => "00111100100111011100111100011110", 
    112 => "00111101100001000100011100000111", 
    113 => "10111110000100111001110101011110", 
    114 => "10111101000110100110001100001000", 
    115 => "10111101101001011100110010100000", 
    116 => "00111100011011100111011110101101", 
    117 => "10111101010101011001010011011000", 
    118 => "10111110000001001100110101110101", 
    119 => "10111101011001000100100001111111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_6 is
    component inference_conv2d_f3_0_3_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_6_rom_U :  component inference_conv2d_f3_0_3_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


