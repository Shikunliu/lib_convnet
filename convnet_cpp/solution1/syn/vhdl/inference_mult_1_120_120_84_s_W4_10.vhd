-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010011010001011100001010", 
    1 => "10111100011110010000100100000000", 
    2 => "00111101000100111000111101000100", 
    3 => "10111100101001101110010101111101", 
    4 => "00111101000111101101011010111011", 
    5 => "10111100101010101110101101100110", 
    6 => "00111100111101111101001100001011", 
    7 => "10111101100001001001110010100101", 
    8 => "00111110000101100111011001100100", 
    9 => "10111101001010000011101011001101", 
    10 => "00111101101110100001000011010011", 
    11 => "10111110000011000001000100011011", 
    12 => "10111100101101100110011011111010", 
    13 => "10111110001111110011010100011010", 
    14 => "10111101001000011010110001110011", 
    15 => "10111100000100100001000000111000", 
    16 => "10111101011100101010111100010100", 
    17 => "00111100111010100110010010001101", 
    18 => "00111101111001000001100100011010", 
    19 => "10111011000000011110111011011000", 
    20 => "10111101100011010001110011001110", 
    21 => "10111101010011100110100001000011", 
    22 => "00111101010100001110010110010110", 
    23 => "00111101100001111000010010001110", 
    24 => "10111110000110110010100011011000", 
    25 => "00111101000111011000100010100111", 
    26 => "00111100111100101000001111100001", 
    27 => "00111101101110101101001011001111", 
    28 => "10111101010111010110100110111000", 
    29 => "10111101100010011011010010011010", 
    30 => "10111110000000100000011011001000", 
    31 => "10111101100110100000011110110011", 
    32 => "10111011011000010000101010011100", 
    33 => "00111110001000001001110111010000", 
    34 => "00111100100110010101101001000100", 
    35 => "00111011110101011111010100010101", 
    36 => "00111101100101100001111001111000", 
    37 => "10111110000010011101000000100000", 
    38 => "10111101110111110101010000001001", 
    39 => "10111110000100001101010011011100", 
    40 => "00111101000010001000111011100101", 
    41 => "00111101101111101001001011110000", 
    42 => "10111011110100101110111010100101", 
    43 => "10111011111111000100010011001010", 
    44 => "00111101110100110110110101100101", 
    45 => "10111110010000001000000111000011", 
    46 => "10111110000011101100100100011001", 
    47 => "10111101000110100111100111111111", 
    48 => "00111101111010100001100111001010", 
    49 => "10111101010000110101101001000010", 
    50 => "00111101110100111010110011010110", 
    51 => "10111100101111111110110110001100", 
    52 => "10111110000010100011011101101001", 
    53 => "10111101100101110101100100001010", 
    54 => "10111110010001010111010011110111", 
    55 => "00111101111100001100010001011001", 
    56 => "10111101110011011110011101100100", 
    57 => "00111101011110101110000000111011", 
    58 => "10111100011010101101010101100001", 
    59 => "00111101100110100101100001010110", 
    60 => "10111100110001110101111001100011", 
    61 => "10111100101011001001011010010111", 
    62 => "00111011010001100011000011111100", 
    63 => "00111101100101100011011001010011", 
    64 => "00111100110011010101000010000000", 
    65 => "10111101100011110001111111010000", 
    66 => "10111101100001110010010100010101", 
    67 => "10111101101100000001001111111010", 
    68 => "10111110001000001001110100000110", 
    69 => "00111101110110100000000111101111", 
    70 => "10111100010101000010011011001001", 
    71 => "00111110001101000110111110011100", 
    72 => "10111101100010110101101000101110", 
    73 => "00111101100111110110110011100011", 
    74 => "10111101111000010111101100001111", 
    75 => "00111101100000011011010110100000", 
    76 => "00111101000000010101111010100101", 
    77 => "00111101101010111101011111011010", 
    78 => "00111101001011001100011011010011", 
    79 => "10111101111010000100010010001101", 
    80 => "00111011101011101001010000010010", 
    81 => "10111101011010010101101000110111", 
    82 => "00111101110010110110001010011111", 
    83 => "00111100011100000001111110111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_10 is
    component inference_mult_1_120_120_84_s_W4_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_10_rom_U :  component inference_mult_1_120_120_84_s_W4_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


