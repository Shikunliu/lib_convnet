-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000110110001110100001101", 
    1 => "00111101110100101100111100010000", 
    2 => "00111101101100011010010111011000", 
    3 => "00111110000000001111000111110101", 
    4 => "10111100111000010100000110011001", 
    5 => "10111101001011000000100111011111", 
    6 => "00111101100011011001110011110001", 
    7 => "00111101100011000111011110110101", 
    8 => "00111101010101010010100110101101", 
    9 => "00111100001001000111011011011000", 
    10 => "10111100000110001000001110111010", 
    11 => "00111100010110101011001100111111", 
    12 => "10111110000011000101000011001110", 
    13 => "10111101011000001110100101101010", 
    14 => "00111100111011010011001110101010", 
    15 => "00111100110101100100110110110101", 
    16 => "00111101001010111000111010101001", 
    17 => "00111100101101000111010001000110", 
    18 => "10111110000110111000000100110000", 
    19 => "00111101110111100101000010000011", 
    20 => "00111101001011010110001111100110", 
    21 => "10111100111001100010111101110100", 
    22 => "00111101101111011101011110001111", 
    23 => "10111101110000100101100101011100", 
    24 => "10111100100110100000101011011001", 
    25 => "00111100111000011111011011001011", 
    26 => "00111101001011000001101000011111", 
    27 => "10111100101111000100101010011111", 
    28 => "00111101011011101001101100111001", 
    29 => "00111101101110110011000111011101", 
    30 => "00111100111110000001111101100001", 
    31 => "10111101011001000011010010101110", 
    32 => "10111101001101010110101101101100", 
    33 => "00111101001100010000011001001101", 
    34 => "00111101101110111110101010011111", 
    35 => "10111101101101000111111100000110", 
    36 => "00111101110100010011100010111101", 
    37 => "10111100101101000010011001111000", 
    38 => "10111101100100100101101001000000", 
    39 => "00111100110000100000011100001100", 
    40 => "00111110010000111001000101001111", 
    41 => "00111101100100011111001111011011", 
    42 => "00111101001100110000110010111000", 
    43 => "10111101011000001111111000101101", 
    44 => "10111101111100000100001101011111", 
    45 => "10111100110010111001001011011011", 
    46 => "10111110000000111111001111100000", 
    47 => "00111110000101111110101000011100", 
    48 => "10111101001001010000110011100101", 
    49 => "10111101010111000110100010000001", 
    50 => "10111110000111101011011110001001", 
    51 => "00111011110000010011111101111011", 
    52 => "10111001010001101011010011001010", 
    53 => "10111101101001100011000111000011", 
    54 => "00111100101110110011111001100101", 
    55 => "00111101100011100001110000001000", 
    56 => "00111110001101000100010010011110", 
    57 => "10111101100001110100101101101001", 
    58 => "00111101111100111001000010000110", 
    59 => "00111101111011000110110001010101", 
    60 => "00111011111111101001110000111101", 
    61 => "00111010110011101001000101110011", 
    62 => "00111101100001000110101100011001", 
    63 => "00111101100111111110010001010001", 
    64 => "00111101110100001011101001100010", 
    65 => "00111101100001110100110110001111", 
    66 => "00111101111101001101101001001101", 
    67 => "10111100110011001110010101010110", 
    68 => "00111101011110100101011101100100", 
    69 => "10111101111001000011111011011001", 
    70 => "10111100100101111111010000010011", 
    71 => "10111110000011100101010000101110", 
    72 => "00111101101000101110000101001110", 
    73 => "00111110001101001001111010001000", 
    74 => "00111101110101011101101100110100", 
    75 => "10111110001100110111111100111001", 
    76 => "10111101100101010100011010111001", 
    77 => "10111100100101001101000110110100", 
    78 => "00111110001000110100000010010010", 
    79 => "00111101000010110101000111110011", 
    80 => "00111110000000010110000101011111", 
    81 => "00111110001110101110111010100110", 
    82 => "00111101101001001001011011100001", 
    83 => "00111110000101110111111000011100", 
    84 => "00111100011100011001001000010100", 
    85 => "10111100101101010101111010000111", 
    86 => "00111101101111000110111001010011", 
    87 => "10111101011000011110000110110111", 
    88 => "00111101110011001100101000111011", 
    89 => "10111101100001111100111110010101", 
    90 => "10111101011110101100001110011011", 
    91 => "10111101010110110001110110010011", 
    92 => "00111110000101111010001001001001", 
    93 => "10111101101110010011110111100111", 
    94 => "10111110001111110001001110001100", 
    95 => "00111100111101001111011100100011", 
    96 => "10111101001110110000011110101000", 
    97 => "10111101011101001001000001111011", 
    98 => "10111110001011010011110101000011", 
    99 => "10111110000110000111100100111110", 
    100 => "00111110000001000000001100010101", 
    101 => "10111100110001111101011011111001", 
    102 => "10111101000110100000001001011010", 
    103 => "10111110001110000010011101110100", 
    104 => "00111101110101000000111001011010", 
    105 => "10111101111010110101110000111010", 
    106 => "00111101100100101001111100111111", 
    107 => "10111101001000111100101101100111", 
    108 => "10111100100001000000110101000000", 
    109 => "00111101101111111100010010001100", 
    110 => "00111101011011110101110111110001", 
    111 => "10111101101010101100011001000111", 
    112 => "00111101001100011001100001111001", 
    113 => "00111100100011101010111111000110", 
    114 => "10111100101110111110110111101101", 
    115 => "10111101100010111000111000010110", 
    116 => "00111101011010001111111011111101", 
    117 => "10111101111000100101111110100110", 
    118 => "10111101101110110001101100000001", 
    119 => "10111100001000100110111111001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_5 is
    component inference_conv2d_f3_3_2_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_5_rom_U :  component inference_conv2d_f3_3_2_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


