-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010101110011110000001100", 
    1 => "00111011111111100010010011011111", 
    2 => "10111101110000001010101001100101", 
    3 => "10111100111001001101001110111111", 
    4 => "10111110100000101110110111011101", 
    5 => "00111101011111001100101111001110", 
    6 => "00111101010101100110001010010011", 
    7 => "10111101010001100011011110100010", 
    8 => "10111100100110011100001011101010", 
    9 => "00111101101111101000010101110111", 
    10 => "10111101101000101110100011011011", 
    11 => "10111101101010010001001000010010", 
    12 => "00111110001101000001000011111001", 
    13 => "00111101110011001000110100110100", 
    14 => "00111101000100010101111100011110", 
    15 => "00111011101100111010101101101001", 
    16 => "00111100111111010101110111111010", 
    17 => "10111101101001000110001010101000", 
    18 => "00111110010110011110111010001001", 
    19 => "00111100110000101111010110110011", 
    20 => "00111110011110010110011101000101", 
    21 => "00111011101000110010110111000010", 
    22 => "10111101110110111010011011110000", 
    23 => "10111110011110010110100000001110", 
    24 => "10111101110100111011110100010110", 
    25 => "10111100010011101000110100101100", 
    26 => "10111101001110000010111101101100", 
    27 => "10111101001001000011011101001101", 
    28 => "00111110100001001111111111101011", 
    29 => "00111101011111001100101100010010", 
    30 => "10111110011011001100010100110011", 
    31 => "10111101110000001110100101110111", 
    32 => "00111110010000100101011111001001", 
    33 => "00111110010100101010000101110011", 
    34 => "10111110001001111101100011001111", 
    35 => "10111101010100110000100100001100", 
    36 => "00111101001001010111101100011001", 
    37 => "00111100100010010111001010100101", 
    38 => "00111011100000101111010110111110", 
    39 => "10111101010000001100100110001001", 
    40 => "10111101100010111000001111101010", 
    41 => "00111100101100001000111110110101", 
    42 => "10111110001000111111101011110100", 
    43 => "00111110001000101001000000100101", 
    44 => "00111101000000101011000001001001", 
    45 => "10111101101100100000110100000110", 
    46 => "00111010011111101101001011111100", 
    47 => "10111101110010011101011110101101", 
    48 => "00111101010000110000001101110000", 
    49 => "10111101000101010100010000011010", 
    50 => "00111110001000100000011001000010", 
    51 => "10111100010110100011111111100111", 
    52 => "00111100101010110100011001101010", 
    53 => "10111101010010011110001000011100", 
    54 => "10111101100010111111000000000110", 
    55 => "10111100110100111110010110010000", 
    56 => "10111101011001101111001100011110", 
    57 => "00111101110011000110001101111000", 
    58 => "00111101011110011000000111001100", 
    59 => "00111101111001001111001100110100", 
    60 => "10111110000111010101011110111100", 
    61 => "10111110010000011110101011111111", 
    62 => "00111011110110101000001011101110", 
    63 => "00111110010011100111110011010000", 
    64 => "10111101000010110011100110111010", 
    65 => "10111110000001111110101010100011", 
    66 => "10111100111001101111001000010010", 
    67 => "00111101011111010101001000100000", 
    68 => "00111110100101101111100101110110", 
    69 => "00111101101111011100101010001110", 
    70 => "00111101010111110110011110111111", 
    71 => "00111101001101101010010101000011", 
    72 => "00111101001000100001001110100001", 
    73 => "00111101100010001110010101110100", 
    74 => "00111101110011010010111001010001", 
    75 => "10111101101111110010001101010100", 
    76 => "00111101001110110000011111011110", 
    77 => "10111101001010001010000110001111", 
    78 => "10111110000010011000010101101010", 
    79 => "10111101101110110010100011001011", 
    80 => "10111110000001100011110001110101", 
    81 => "00111101000100100010000100011010", 
    82 => "00111101010001001010111100001100", 
    83 => "10111110000000100101110101001010", 
    84 => "00111100101001110110000101101110", 
    85 => "10111101100100001100010011101100", 
    86 => "00111101010110001000001101001111", 
    87 => "00111101101001111000101001111011", 
    88 => "10111101101100111010110110011111", 
    89 => "10111101111100010011110011101111", 
    90 => "10111101111110110111001100001000", 
    91 => "00111101111110100101000000001101", 
    92 => "10111101111100101111101000001101", 
    93 => "00111100110101110011001000010110", 
    94 => "00111100110111111010111111001001", 
    95 => "10111100100111011011101000100101", 
    96 => "00111101001111110111001100101101", 
    97 => "00111101110100000110001011010100", 
    98 => "00111110000110010001001001010101", 
    99 => "00111110000010000001111000000100", 
    100 => "00111101100111010110001110100011", 
    101 => "10111101111100101110101011011001", 
    102 => "10111100100011111010011111011110", 
    103 => "10111011111100110110111110100100", 
    104 => "10111100010001001011001100100011", 
    105 => "10111100101000110110000110011001", 
    106 => "00111110001100100110111101100001", 
    107 => "00111101001101100010110010101101", 
    108 => "00111011111100110001010011100000", 
    109 => "00111101111011000000011110101011", 
    110 => "00111010111111101110000110011101", 
    111 => "10111110011011001011101000110000", 
    112 => "10111101100010011110101010110101", 
    113 => "00111101010011110111000011010001", 
    114 => "00111110001111111010101011001110", 
    115 => "00111011001000010101011001010001", 
    116 => "00111110000001001010010000001001", 
    117 => "00111101001100010000110111011010", 
    118 => "00111101001010110011111011000011", 
    119 => "10111011111010100111010000101000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_9 is
    component inference_conv2d_f3_0_2_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_9_rom_U :  component inference_conv2d_f3_0_2_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


