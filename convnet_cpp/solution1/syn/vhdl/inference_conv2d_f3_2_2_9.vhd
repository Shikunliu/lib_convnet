-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100100010011011000011110", 
    1 => "00111101111011111100100100110110", 
    2 => "00111101011010011010001100010111", 
    3 => "00111100011001011101010011011100", 
    4 => "10111101000001001010110100101001", 
    5 => "10111110001001000010001101010011", 
    6 => "00111101111001111101001101001110", 
    7 => "00111100110011001011010110000110", 
    8 => "10111101111110010111001101010100", 
    9 => "00111101101011111110010001101100", 
    10 => "00111101000111000111111101011101", 
    11 => "00111101000100000111001001011001", 
    12 => "10111101111001100111000011100011", 
    13 => "10111110000111100101000111010010", 
    14 => "10111100000101100001101100011111", 
    15 => "00111100000100000100011110010110", 
    16 => "10111101110011001100110111011001", 
    17 => "10111110001010010000010011110111", 
    18 => "00111101111100111000110111100111", 
    19 => "10111110000001101110111111000011", 
    20 => "00111101100111011110110000000001", 
    21 => "00111101101000011100011010110111", 
    22 => "00111101011110010010100000001010", 
    23 => "00111100110010010101010000111101", 
    24 => "00111101001000001110001010011001", 
    25 => "10111101110000000111001100110000", 
    26 => "10111101100011011010000000111111", 
    27 => "10111110000000101001001011000101", 
    28 => "10111110000000011010101101001011", 
    29 => "10111100110000000000111101001111", 
    30 => "00111110000101010111111011101101", 
    31 => "00111100100111000011000100100100", 
    32 => "10111100000011100001011111110001", 
    33 => "10111101111010111010011010101101", 
    34 => "00111100011101111100010011001000", 
    35 => "10111100100101110001100010000000", 
    36 => "10111101100001000010011010101110", 
    37 => "00111101111111000100100101110111", 
    38 => "00111100001001110110000000101100", 
    39 => "10111101100100010111010110011100", 
    40 => "10111011010001110011001110110001", 
    41 => "00111101111010001111101001111011", 
    42 => "00111101111011100000000110011011", 
    43 => "10111110000111001000100111110100", 
    44 => "00111101100110011100011101111010", 
    45 => "10111101111001111000011011000010", 
    46 => "00111100101110100111011011110100", 
    47 => "00111101001110110010011000010001", 
    48 => "10111011100010110001011010110100", 
    49 => "10111110000001001101100000110100", 
    50 => "00111101100010010111001001111101", 
    51 => "00111011111101010010101110111100", 
    52 => "10111101001111111001101111110111", 
    53 => "10111101100101001000111111100111", 
    54 => "10111101011011000000111100000010", 
    55 => "10111101011111100100110000110110", 
    56 => "10111100010101011010100000111110", 
    57 => "10111100000110010010110101111001", 
    58 => "00111010000111110100011010101101", 
    59 => "10111100110001001101011000101001", 
    60 => "10111101100111011111111110101010", 
    61 => "00111101100000000001011011000001", 
    62 => "00111101001101100100101000001001", 
    63 => "00111100100011001000111111111100", 
    64 => "10111101100111011110011100100001", 
    65 => "10111101000100010011011110010110", 
    66 => "10111101100111011100000011101001", 
    67 => "00111110000101101001110001100111", 
    68 => "00111101101000000001101011100101", 
    69 => "00111101110001101001100101101010", 
    70 => "10111100001011100100001111100000", 
    71 => "00111101011101100011011101011111", 
    72 => "10111101011010111100011101100100", 
    73 => "10111100101111011110001100100101", 
    74 => "00111101100010010100001011010101", 
    75 => "10111101010100100111001110100000", 
    76 => "00111100111000100110010011100101", 
    77 => "10111101101110010000101100110100", 
    78 => "10111101110010100100111010111110", 
    79 => "10111101000010001001001011111100", 
    80 => "10111101001010001110100011000010", 
    81 => "10111101101011100000000100110000", 
    82 => "10111101011111010101010010111111", 
    83 => "10111101000000101000000101001111", 
    84 => "00111101111001010000001101110101", 
    85 => "00111011110101101001100100101001", 
    86 => "00111101101000010011010001111110", 
    87 => "10111110001100011101010000110000", 
    88 => "10111100110011111001111000000011", 
    89 => "00111101101100000000000111110001", 
    90 => "10111110001001101010110101110001", 
    91 => "10111101100010011111111010101111", 
    92 => "00111101100010101111101010101000", 
    93 => "00111110000000101111110001101001", 
    94 => "00111101100111000011001110000000", 
    95 => "10111110000010001111110010010011", 
    96 => "00111101011010100001000101100110", 
    97 => "10111101001110010001011110010100", 
    98 => "00111101010101011111011001000001", 
    99 => "00111101110100000111001100010101", 
    100 => "00111101001111101001011011000100", 
    101 => "00111100101110101010100101111111", 
    102 => "10111100111100010011001110110100", 
    103 => "00111101101011111000011011100100", 
    104 => "00111101010001010111010000101110", 
    105 => "10111101001110111001101011100001", 
    106 => "00111011101010100111100001100100", 
    107 => "00111100100110000111001010111110", 
    108 => "00111100110110100001011111011001", 
    109 => "10111100001001111000011011000010", 
    110 => "00111011110001010001011001100000", 
    111 => "10111101000011100010101110100111", 
    112 => "10111100001100101000100001111110", 
    113 => "00111101001001000010101101110011", 
    114 => "10111100111111001000101111010111", 
    115 => "00111101010111101001011111010000", 
    116 => "00111101011111101001001010010010", 
    117 => "10111100000101100010101101110000", 
    118 => "10111110001010000111010110010010", 
    119 => "10111110010000101000011100111100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_9 is
    component inference_conv2d_f3_2_2_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_9_rom_U :  component inference_conv2d_f3_2_2_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


