-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001110110111101100101001", 
    1 => "10111110000000110010011011100001", 
    2 => "10111110001011101001011100000111", 
    3 => "10111110001011111111011000001010", 
    4 => "00111110000000000000000111010110", 
    5 => "10111100000001011001100100110010", 
    6 => "00111100111111100011000100101001", 
    7 => "00111101101100001101101100011010", 
    8 => "00111110000001101111101100001001", 
    9 => "00111100100100011100011011010010", 
    10 => "10111100111000110100001011111011", 
    11 => "10111110000100001111010010010101", 
    12 => "00111110000100000011011111010110", 
    13 => "00111110000100100111111101011111", 
    14 => "00111101100001100011111011111001", 
    15 => "10111101010100000100110100000101", 
    16 => "00111101001110010001101111111011", 
    17 => "10111101110001101001100110010010", 
    18 => "00111110000011111111100000100011", 
    19 => "00111101001011111000110010110110", 
    20 => "10111101101011001011101001011000", 
    21 => "00111011101100000111110011001011", 
    22 => "00111110000011000010011110100110", 
    23 => "00111001111010111011010110011011", 
    24 => "10111100111010000001110010110100", 
    25 => "00111101010100101010111111101011", 
    26 => "00111101101010111100000100001100", 
    27 => "10111110001001101111111101111110", 
    28 => "10111101101010100001001001100101", 
    29 => "10111100000110101100100000001101", 
    30 => "00111101011111100100001110111000", 
    31 => "10111110010100110101101011001001", 
    32 => "00111011001000011110001000010011", 
    33 => "10111101100000100100101100110100", 
    34 => "00111100101111101101000011000000", 
    35 => "10111101110110001001000101011100", 
    36 => "10111110000111101000000010111111", 
    37 => "00111100110001001111101101111101", 
    38 => "10111110100010111011000111110010", 
    39 => "00111101000110011110001011001010", 
    40 => "00111100101011000110101101100011", 
    41 => "00111101100111000111001011010101", 
    42 => "10111101101001111110100111001100", 
    43 => "00111101101001110110100010110111", 
    44 => "00111100010101001011010000100010", 
    45 => "00111101110000100010100101100011", 
    46 => "00111101101001000100010000110010", 
    47 => "10111101101001111101011000001000", 
    48 => "00111101010111110100110011100111", 
    49 => "00111110000000001111111101010100", 
    50 => "10111101010001100011110111101101", 
    51 => "10111101101111110100000001011111", 
    52 => "00111101100001010100100000010110", 
    53 => "10111101000010111111010110000111", 
    54 => "00111101101001000101001111011111", 
    55 => "00111100100000111101000101000110", 
    56 => "10111110000001000111100100001100", 
    57 => "10111101111000010101101110011010", 
    58 => "00111100100111010110010100000000", 
    59 => "10111100100111101111111100110100", 
    60 => "10111110000110100110101001000100", 
    61 => "00111101111000011010101011000101", 
    62 => "00111101100000010001100100010010", 
    63 => "00111101111001110000010111001001", 
    64 => "10111101111110101000101101001100", 
    65 => "00111110000111100011001100100111", 
    66 => "00111100001001010000100110100101", 
    67 => "10111101100100000010010111011011", 
    68 => "10111100011010011001111000101001", 
    69 => "00111101100110010100110110111100", 
    70 => "10111101101001111000100011001110", 
    71 => "00111110001011111000001010110010", 
    72 => "00111101010011000000010011010110", 
    73 => "00111110001101111101010100100100", 
    74 => "10111101001101010011110000100010", 
    75 => "00111110010001010000010101001011", 
    76 => "10111101010100111110000111001010", 
    77 => "10111101001000011110010011110111", 
    78 => "10111110011000111001111100110100", 
    79 => "00111101110111101111000001101011", 
    80 => "00111101111000001111001000111001", 
    81 => "10111101110111111111010001110111", 
    82 => "10111101010001011110100010101101", 
    83 => "00111101000111111110100111100000", 
    84 => "10111100100100001100000111101111", 
    85 => "10111011111111010100000010001000", 
    86 => "10111101111010000001110111000001", 
    87 => "10111100110011000100000111000010", 
    88 => "10111011101101110110111100000010", 
    89 => "10111101101010111100011010101000", 
    90 => "00111100111010010011000111110011", 
    91 => "10111101100010110010000111010010", 
    92 => "10111011101111000100010011101010", 
    93 => "00111110001000101100000101101110", 
    94 => "00111101101100111011001001110010", 
    95 => "10111101010001011000101100111111", 
    96 => "00111110010001000011100011010010", 
    97 => "10111101101101000100010010111001", 
    98 => "10111110000001100010010111101010", 
    99 => "10111011101001110100101000000110", 
    100 => "00111110000010101100110000001100", 
    101 => "10111100100011110000010010110101", 
    102 => "10111010100101011100101001010111", 
    103 => "00111101100101111001001100101111", 
    104 => "10111101000010111000100001011111", 
    105 => "00111100110110000100101101010000", 
    106 => "00111101110011000110101001010111", 
    107 => "10111011111000011100000101100110", 
    108 => "00111101011111100000111011000100", 
    109 => "00111110000000011111100100100111", 
    110 => "00111101100111101001000000001110", 
    111 => "10111101011001100000010110011110", 
    112 => "10111100111111000001010011101111", 
    113 => "00111110000111011000011101110010", 
    114 => "00111101111011100011100000100010", 
    115 => "10111101100010011010000110011111", 
    116 => "00111101100101110011101000011100", 
    117 => "10111101111010000101110010101011", 
    118 => "10111101100011100010000011000000", 
    119 => "10111101111001011101111010011100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_15 is
    component inference_conv2d_f3_4_4_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_15_rom_U :  component inference_conv2d_f3_4_4_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


