-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011001010101101001000111", 
    1 => "00111101101010110011110011000101", 
    2 => "00111101011111111101110000001001", 
    3 => "10111101111011010111100000111110", 
    4 => "00111100101001011000000010001101", 
    5 => "00111101101100001000100000101000", 
    6 => "10111101101011000101101010110111", 
    7 => "00111101000011111010011111000011", 
    8 => "10111101100110001011011011001011", 
    9 => "00111100101100011011111011110101", 
    10 => "10111101011110010000101011111110", 
    11 => "00111100111111001101001010111001", 
    12 => "00111110000101101101100101111011", 
    13 => "00111101110011110101001100111111", 
    14 => "00111011000001010101100111000111", 
    15 => "10111100100011000110110010001010", 
    16 => "00111101100110011100011001100000", 
    17 => "10111110000001111110011000101110", 
    18 => "10111110000000011111000111010000", 
    19 => "10111110001011101010001001001101", 
    20 => "10111101101111011010100011001011", 
    21 => "00111101010001110011010110110100", 
    22 => "10111101010100101011110100111100", 
    23 => "10111101011110011001111011011000", 
    24 => "10111100100010100011100000110010", 
    25 => "00111101101011101000011100100100", 
    26 => "00111101000011100100000100100110", 
    27 => "00111101101111010111010000001100", 
    28 => "00111101100111111010010111111011", 
    29 => "00111101010011011111100000101011", 
    30 => "00111101000100111110100001100101", 
    31 => "00111101000110100111001111101010", 
    32 => "00111010111000000001110100001100", 
    33 => "00111101111101000000111001011010", 
    34 => "10111101010111110001111011111010", 
    35 => "10111101110010100100000001101110", 
    36 => "00111101010011010110101100001000", 
    37 => "00111100001111010011110101111000", 
    38 => "00111101110100010101100100111110", 
    39 => "10111101100001001110101000100010", 
    40 => "10111101101110110001010000110000", 
    41 => "10111101110011000000011000100110", 
    42 => "00111100101100011111000110110101", 
    43 => "10111101110011101101101110110110", 
    44 => "10111100011100000110111000100111", 
    45 => "00111101101111110110101001010001", 
    46 => "00111110000001011101100010010101", 
    47 => "10111101111100101001010011011101", 
    48 => "10111100001111111101011100011011", 
    49 => "10111100101110101100011110110010", 
    50 => "00111101110001101010100001011011", 
    51 => "10111101111011100110000100000111", 
    52 => "00111100100101110011111110000010", 
    53 => "00111100101100010000010100100110", 
    54 => "10111101000110001011011000001111", 
    55 => "10111011000011110111111110001111", 
    56 => "10111100111100011110011010010111", 
    57 => "10111101101011000000010010000110", 
    58 => "00111101001001000010001110010110", 
    59 => "00111101100001101111100101110110", 
    60 => "10111110001110000101111101001010", 
    61 => "10111101001110001010101001010001", 
    62 => "00111101011000111010100100011101", 
    63 => "10111101100110110110101011011010", 
    64 => "10111101101000000101010000100110", 
    65 => "10111101101001000101000111111100", 
    66 => "10111101101101000001010001100010", 
    67 => "10111101011110010101111111010011", 
    68 => "10111101111000110110111000101111", 
    69 => "00111101001111010111110000101101", 
    70 => "00111110000110001110010010111000", 
    71 => "00111101110111001010010010110001", 
    72 => "10111101110101100111101100011100", 
    73 => "10111101001101010111111010011101", 
    74 => "10111100001001110011101011010111", 
    75 => "10111101010010100001011001010100", 
    76 => "00111101100100100000110111101010", 
    77 => "00111011101111001010001001011101", 
    78 => "10111101001000110110001011110110", 
    79 => "00111100001010001101111100011100", 
    80 => "00111110001101101010110010101000", 
    81 => "10111101000111011110011101010111", 
    82 => "00111110000001000010010010100010", 
    83 => "10111110000011111110101111010001", 
    84 => "10111011011001010100010000010010", 
    85 => "10111101101011000010011100101101", 
    86 => "10111011110001010100110000100101", 
    87 => "00111101000101111010000000110000", 
    88 => "10111110000111111011000011010101", 
    89 => "00111101010001111110001100001000", 
    90 => "00111100010010011000011110011110", 
    91 => "10111101100111001001001001110010", 
    92 => "10111100101100101111000100100100", 
    93 => "00111101001000110000111010101000", 
    94 => "10111110001001101000101001010000", 
    95 => "10111011111010001011101111101100", 
    96 => "10111101101001101010000110110010", 
    97 => "00111101100101101011011100110001", 
    98 => "00111101110001111111100111111111", 
    99 => "10111101001000110011010101110100", 
    100 => "10111100001101111111010100111010", 
    101 => "00111110001011110010010011011001", 
    102 => "10111101000100100000101101100110", 
    103 => "10111101011100010001001000100110", 
    104 => "10111100101111001100001110100000", 
    105 => "00111110001011110011000001100010", 
    106 => "10111110000001100100100001000001", 
    107 => "10111101001000101101001101101010", 
    108 => "00111100110000101100011111111100", 
    109 => "00111110001001011101001101010110", 
    110 => "10111101100100110100000110011110", 
    111 => "00111110000000010010111011000111", 
    112 => "00111101100001101111001110100101", 
    113 => "00111101100101011111111100101011", 
    114 => "00111011100010101001100110001100", 
    115 => "00111101111000000110110100001101", 
    116 => "10111101011101100110011010001111", 
    117 => "10111110000101001011110111111101", 
    118 => "10111100100100011010011111111110", 
    119 => "00111100101110010011111101010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_7 is
    component inference_conv2d_f3_1_3_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_7_rom_U :  component inference_conv2d_f3_1_3_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


