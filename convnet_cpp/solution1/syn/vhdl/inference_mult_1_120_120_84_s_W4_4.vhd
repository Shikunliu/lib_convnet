-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100101110101000000010011", 
    1 => "10111101111100100111000100110111", 
    2 => "00111110000010111010001100000001", 
    3 => "00111101101000100111110110010110", 
    4 => "00111100011101101011111101111010", 
    5 => "00111100110011001111110000110010", 
    6 => "00111110000010100100010011001000", 
    7 => "10111100001010011010010111101100", 
    8 => "00111101010000011110010001010110", 
    9 => "00111101001111111011010000010101", 
    10 => "00111101011001100011100000101000", 
    11 => "00111110001000010001010000001010", 
    12 => "10111101000101011110000101100011", 
    13 => "00111100110000101111001100101111", 
    14 => "00111101011110011010001000011000", 
    15 => "10111110001010110101011001110101", 
    16 => "10111110001101000111101010011110", 
    17 => "10111110001000110111100010101011", 
    18 => "10111101001000000101100010011011", 
    19 => "00111110001010000110111111001110", 
    20 => "10111101111111110101111100001011", 
    21 => "10111101000100100011111011111101", 
    22 => "10111101100010101001001000111000", 
    23 => "00111100110000110101010111000000", 
    24 => "00111101101011111010010011101110", 
    25 => "10111101101001101101000000100110", 
    26 => "00111101101001010011111000010011", 
    27 => "00111110011001010010010011000000", 
    28 => "00111101101110100011010111111111", 
    29 => "00111101000000111000010010000100", 
    30 => "10111101100000011100101010110011", 
    31 => "10111101100010111000101000110101", 
    32 => "00111100100110011101111011001110", 
    33 => "10111100110000011101110101010000", 
    34 => "10111101110111001110110100001011", 
    35 => "00111100101001111011101110011011", 
    36 => "10111011101010100001111100111000", 
    37 => "10111101101011100010000011101000", 
    38 => "00111101010010011001000100101001", 
    39 => "00111101001011111101011110101111", 
    40 => "10111011010010000000100101000100", 
    41 => "10111101101010000001111011101000", 
    42 => "00111101000001010111101111110000", 
    43 => "00111110000011101110001011001010", 
    44 => "10111101001101001000001110110000", 
    45 => "10111101110110011110100011000100", 
    46 => "00111110000001000111111000000111", 
    47 => "10111110001011000011000000001010", 
    48 => "10111101011101000010010011001011", 
    49 => "10111101110001000001101010101100", 
    50 => "00111100100111010100111011000101", 
    51 => "10111101101101110000101000111101", 
    52 => "00111110000001000011110001111101", 
    53 => "10111101110011101001001111100010", 
    54 => "10111011101000100110011100001000", 
    55 => "10111101111110010011110101010011", 
    56 => "10111101011000011111101000001011", 
    57 => "00111101010111011010001011111001", 
    58 => "10111110000110101101000011000100", 
    59 => "10111110010110111110111111010000", 
    60 => "10111101101011111011101101000100", 
    61 => "10111100101001011110010000101011", 
    62 => "00111101111111011001110000101000", 
    63 => "00111110000110100110101100001110", 
    64 => "00111101010001011011000111010110", 
    65 => "10111100100111000100000101111111", 
    66 => "00111110010110110010001001001011", 
    67 => "00111101000101101000111001100111", 
    68 => "00111110001001100110010001001110", 
    69 => "00111101100001111010100111001000", 
    70 => "10111100111011110010111001010110", 
    71 => "00111101110111101011110010000100", 
    72 => "10111110000101110110010010101110", 
    73 => "10111110001111100010101010000000", 
    74 => "00111101100100001101111001011010", 
    75 => "00111101010011111100110000100110", 
    76 => "00111110000001001100011011100111", 
    77 => "00111101011001010000110110000110", 
    78 => "10111101111100110101011001010100", 
    79 => "10111100110011100010011011010101", 
    80 => "10111101101110001010010000000110", 
    81 => "10111101000101000111011100000000", 
    82 => "00111101011000001010011110101011", 
    83 => "10111101100101011001010011011000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_4 is
    component inference_mult_1_120_120_84_s_W4_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_4_rom_U :  component inference_mult_1_120_120_84_s_W4_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


