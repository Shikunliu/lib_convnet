-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011110101001111111011001", 
    1 => "10111100011011100000001100010011", 
    2 => "00111011011100101010011110101000", 
    3 => "00111101000010001101001010111101", 
    4 => "00111100110010111011010101000000", 
    5 => "00111101010111100001110010000000", 
    6 => "00111100011010101100010100000101", 
    7 => "00111101101011011000000101011101", 
    8 => "10111101101101011011010001100111", 
    9 => "00111100111110010000010001100011", 
    10 => "00111101101011101010101111011000", 
    11 => "10111101110011010101101111101110", 
    12 => "00111101100000101100001000001111", 
    13 => "10111101111001000001011100000001", 
    14 => "00111101100100100000100110011101", 
    15 => "10111101000101000111011110111100", 
    16 => "10111110000011100101101110000101", 
    17 => "10111100011111000011001010000001", 
    18 => "00111101110101000001100011010111", 
    19 => "00111101111000100000010111111111", 
    20 => "10111110001101000101110010111100", 
    21 => "00111100011110000001110110110011", 
    22 => "10111101100110110101101011001111", 
    23 => "00111101010110000001001100110111", 
    24 => "10111101110101011100101111111111", 
    25 => "10111101011001010000101001000110", 
    26 => "00111101001010111111110001011000", 
    27 => "10111101110110000001100001000000", 
    28 => "10111101111001100100011101111000", 
    29 => "10111101101001110010101010010111", 
    30 => "00111100100110001011011001000101", 
    31 => "00111100111000101011010110100010", 
    32 => "00111010000001111000111010111011", 
    33 => "10111100011010100010111110110100", 
    34 => "10111011100111101011010100110111", 
    35 => "10111101100101111111010010011001", 
    36 => "10111101000010100010011010110000", 
    37 => "10111101100001100001100100010001", 
    38 => "10111110000100101001011001110000", 
    39 => "00111101101101111001110111010100", 
    40 => "10111101111101011011100000010011", 
    41 => "10111101011011000000111001100001", 
    42 => "00111101100111111110011010100000", 
    43 => "10111100000000110110010111000110", 
    44 => "10111110010101110110100100100011", 
    45 => "00111110000010011100111000000111", 
    46 => "00111110001000010011100110000110", 
    47 => "00111101000111011001110110100000", 
    48 => "10111101010100010101001010001000", 
    49 => "00111011111001001100111111111001", 
    50 => "10111101110111001110110010000101", 
    51 => "10111101000010001010111101100111", 
    52 => "00111101001111001011000111001101", 
    53 => "00111101000000110100011100010010", 
    54 => "00111100111110100100111100011100", 
    55 => "00111101101111010111000101000101", 
    56 => "00111110000010100111100011110010", 
    57 => "00111100101101010101001101101001", 
    58 => "10111101101010010111001110100100", 
    59 => "10111110010010010010110001001001", 
    60 => "10111100101011101110100110001101", 
    61 => "10111110001100011100110011011001", 
    62 => "00111101101100011001001011011101", 
    63 => "10111110000011010001111110100011", 
    64 => "10111110001100000100111011101000", 
    65 => "00111101010000101011000110100110", 
    66 => "00111101100100000100101001001011", 
    67 => "10111100000101000000001001001011", 
    68 => "10111110011011100101000011000110", 
    69 => "10111110001010010001110111011110", 
    70 => "00111101110111101100000100111100", 
    71 => "10111101011000011111110011111011", 
    72 => "10111100110110110001010001011000", 
    73 => "00111101011101000010011111110000", 
    74 => "10111101001111100011100110100111", 
    75 => "10111100011010000101110000001010", 
    76 => "00111110001111011100010111010110", 
    77 => "00111110000110100001010101010101", 
    78 => "10111011001100001100011110001001", 
    79 => "00111110011101011110101000100101", 
    80 => "00111110010000010110111110000111", 
    81 => "10111101001110000100001000110001", 
    82 => "10111100101010101011100011011011", 
    83 => "10111101100010001010011111110101", 
    84 => "10111101110100100010010100110001", 
    85 => "00111110001001001100000010011100", 
    86 => "10111001101101011110000100010010", 
    87 => "10111110000010101011011001001010", 
    88 => "10111101110010010111010110100010", 
    89 => "00111101110001000001011111001010", 
    90 => "10111101101100111001100111001110", 
    91 => "10111101100001000000011110110010", 
    92 => "10111100111000101111001001110011", 
    93 => "10111011010010000011110010011010", 
    94 => "10111110010010111001000000100001", 
    95 => "00111101110010001100111010001011", 
    96 => "10111101100010011110001011100101", 
    97 => "10111100111001011010111011100110", 
    98 => "00111101101110011100111101110010", 
    99 => "10111101100100000111110100001011", 
    100 => "10111101010101001000100101011010", 
    101 => "10111011101110110001010100111111", 
    102 => "10111100100000101011101101100110", 
    103 => "10111101111100100111000100110111", 
    104 => "00111101111100011001101101001110", 
    105 => "10111101101101110011110001101010", 
    106 => "00111101110000111000000000101010", 
    107 => "00111101010100101011110010110110", 
    108 => "00111110000011111110101010000001", 
    109 => "10111101011010110111111010000100", 
    110 => "10111100111111011100111100000011", 
    111 => "10111101111100001100110000110110", 
    112 => "10111101101111001100111101000100", 
    113 => "00111110000001100001110010111101", 
    114 => "00111100100111001110010011011101", 
    115 => "00111110001000000111111110101010", 
    116 => "10111101001101110000110011000010", 
    117 => "10111101100100001110010010111111", 
    118 => "10111101100010110011100110111010", 
    119 => "00111110000110001100101010000010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_0 is
    component inference_conv2d_f3_1_2_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_0_rom_U :  component inference_conv2d_f3_1_2_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


