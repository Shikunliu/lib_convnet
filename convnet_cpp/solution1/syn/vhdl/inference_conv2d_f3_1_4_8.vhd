-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000101100111100000010010", 
    1 => "10111101011111101100010110100011", 
    2 => "00111101001000101010100001101100", 
    3 => "10111101011011000100000100100001", 
    4 => "10111011010111110010110100100010", 
    5 => "10111101100110101010010000001011", 
    6 => "10111101100010011011001010000001", 
    7 => "10111101100100101001110010100000", 
    8 => "10111101110100011110100001100000", 
    9 => "00111110001011100011010110000011", 
    10 => "10111101010011011110001001110111", 
    11 => "10111100000001010111100000001111", 
    12 => "00111101111011001101011101001001", 
    13 => "00111101110111011001011111110110", 
    14 => "00111101111000100010000101000010", 
    15 => "00111100100001110101100010111010", 
    16 => "10111101110000110110001110110010", 
    17 => "00111110010100111100110100010100", 
    18 => "00111100101100101110001100010111", 
    19 => "00111101000100110101011101111011", 
    20 => "00111110010101011010100110101000", 
    21 => "10111100110101110000101001110011", 
    22 => "10111101110101111110110010111011", 
    23 => "00111100101100101101001111111101", 
    24 => "10111110010001100010100011001100", 
    25 => "00111101110000111110001101001111", 
    26 => "00111101001110010111110110110101", 
    27 => "10111101100001000011011101110101", 
    28 => "00111100100111100100101101111010", 
    29 => "00111110000110111001000100101110", 
    30 => "10111101000011000000110111110110", 
    31 => "10111101011101000111010000010000", 
    32 => "10111011100000100100011111101110", 
    33 => "10111100011111101110001110100000", 
    34 => "10111101110000110010010110000100", 
    35 => "00111110001010011111100110001011", 
    36 => "10111110001110111011100011000011", 
    37 => "00111110000110011100111110011010", 
    38 => "00111100001000110010001101111011", 
    39 => "00111100101010100101101010110010", 
    40 => "00111101100000100110110001001001", 
    41 => "10111110000001001101000110100110", 
    42 => "10111100011000001000110100001001", 
    43 => "10111101101000110010000010110001", 
    44 => "00111110000010111101001100111101", 
    45 => "10111101110111111110001110110000", 
    46 => "00111110001111011000001011111101", 
    47 => "10111101100110101110011110101101", 
    48 => "10111101101111000101001010110001", 
    49 => "00111101100011010011110111100100", 
    50 => "00111101000000011000110110011111", 
    51 => "10111101001000110101011000010001", 
    52 => "00111101011011111001010001011101", 
    53 => "00111101000100000100101001001011", 
    54 => "00111101100100110011000001011110", 
    55 => "10111110000001110001110111100111", 
    56 => "10111100100101011000011010110000", 
    57 => "10111100000111001011111000000111", 
    58 => "10111101111101000001101111111100", 
    59 => "10111001011111000111000101001101", 
    60 => "10111101011111100010101011111001", 
    61 => "10111101111001000101001101001100", 
    62 => "10111100110111000011011101101110", 
    63 => "00111101000010010111000010100111", 
    64 => "00111101110000010111100101101111", 
    65 => "00111100110011001100111011100110", 
    66 => "00111101011111111001100010110111", 
    67 => "00111101000011101101000011101001", 
    68 => "10111101100111101010001101011001", 
    69 => "10111101111101101100101101010011", 
    70 => "00111110010000111001111110111010", 
    71 => "10111101011110010010000111011010", 
    72 => "00111011111110110011011100011000", 
    73 => "10111101110100010000110110111111", 
    74 => "00111110000111110011000010100101", 
    75 => "10111100101010100001000110000001", 
    76 => "10111100011000011010101000111111", 
    77 => "00111110000001000010101010101010", 
    78 => "10111101111110011000100001001100", 
    79 => "10111101110110111001010000010000", 
    80 => "10111101000001001000000111000000", 
    81 => "00111101010000010110101110001011", 
    82 => "00111110000110111111110110110101", 
    83 => "10111100110110110010111011111011", 
    84 => "10111101000110001101110100010001", 
    85 => "00111100101011011011000101001001", 
    86 => "10111100001100001000010111011010", 
    87 => "00111101010010001000110111011001", 
    88 => "10111100100000000101000100101001", 
    89 => "10111101101110110110010110101010", 
    90 => "10111101010011011010011110001000", 
    91 => "10111100101010010000111111111001", 
    92 => "10111101000000101011000100000101", 
    93 => "10111100111001101011011111000101", 
    94 => "10111101001001100011110010010000", 
    95 => "10111101111100100110100111100000", 
    96 => "10111100000000101000011110111010", 
    97 => "10111101100000000100000001111101", 
    98 => "10111101110100111100000111001110", 
    99 => "00111101011110011110110100010001", 
    100 => "00111101101110100000011000100001", 
    101 => "00111101000010110011000101110010", 
    102 => "10111101100100101100010100001100", 
    103 => "00111011100001101010110101000011", 
    104 => "10111101110110110101010010100000", 
    105 => "00111101100111110111000011111001", 
    106 => "10111101111010010111110010000001", 
    107 => "00111100000110000100101010011010", 
    108 => "10111101110110011000100011010011", 
    109 => "00111100111110010010111111001100", 
    110 => "10111101010011101111100000111011", 
    111 => "10111101110010100101011010110110", 
    112 => "10111100101011011010001100000110", 
    113 => "00111101101111111110010101011110", 
    114 => "10111011001010111101111101000001", 
    115 => "10111100101110101110001010001010", 
    116 => "00111101101011110101101010111111", 
    117 => "10111101011101001010101111011001", 
    118 => "00111011111001011011101110000110", 
    119 => "00111100111101101000011110110001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_8 is
    component inference_conv2d_f3_1_4_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_8_rom_U :  component inference_conv2d_f3_1_4_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


