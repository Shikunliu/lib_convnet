-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010100100010111010111100", 
    1 => "10111101101011001100011111111010", 
    2 => "00111101111010101011001101101000", 
    3 => "00111101111001000000010110110100", 
    4 => "00111110010011010111000001100001", 
    5 => "10111101001110100111111010011100", 
    6 => "00111100010110000010101100111010", 
    7 => "00111010011001011000001101001001", 
    8 => "00111100000111111111101000110001", 
    9 => "00111100111100111110001111001000", 
    10 => "00111101011111000001100100111011", 
    11 => "00111100101110001101010100110100", 
    12 => "10111101001100001110100000110101", 
    13 => "10111010011000000111011000011001", 
    14 => "00111110000011011111100100111000", 
    15 => "10111100111100111011001100100000", 
    16 => "10111011110111001100011110000001", 
    17 => "10111101101010010010111011001101", 
    18 => "10111101000100111011110010101011", 
    19 => "10111101000110010101010110100111", 
    20 => "10111110000001000001111100100001", 
    21 => "00111101110000010001100101110000", 
    22 => "10111110000111000100001000100000", 
    23 => "10111101101100010110001110010010", 
    24 => "10111101101100001001101001100111", 
    25 => "00111101101100001110101111000110", 
    26 => "10111101111011010100010001010110", 
    27 => "10111100110101111100110001110000", 
    28 => "10111101111110010110010000011111", 
    29 => "00111101110010011100000100100010", 
    30 => "10111100101101101110000111011111", 
    31 => "10111101100010100111110111101101", 
    32 => "10111101000111011111000000001011", 
    33 => "00111100110010010001100110000100", 
    34 => "10111101100100111101101111111000", 
    35 => "00111101011111110011101101111111", 
    36 => "00111101111000010111001110111000", 
    37 => "10111101100011110101010001001100", 
    38 => "10111101111110111101111110001111", 
    39 => "00111110000101010001111000110010", 
    40 => "10111110001101110010000001000011", 
    41 => "00111101111011101000110100010001", 
    42 => "10111101000001101110111101110011", 
    43 => "10111000000101010010100011110010", 
    44 => "00111101011100101101110001100001", 
    45 => "10111011011001010011100010101001", 
    46 => "10111110001101000010100100010111", 
    47 => "00111110000100010001001011111101", 
    48 => "00111101010111110001111100010101", 
    49 => "10111110001001100110010000001010", 
    50 => "00111110000010010000011010001010", 
    51 => "10111101011110011101000001110001", 
    52 => "00111101100010110100101111010001", 
    53 => "00111110000101111010001011001111", 
    54 => "00111101011000111101110011101001", 
    55 => "10111101010101111000000110101100", 
    56 => "00111100111011000110000100011100", 
    57 => "00111101010000111010000110010000", 
    58 => "10111101110000101001000111101110", 
    59 => "00111100011011010100110100001010", 
    60 => "00111011000111010110111001100101", 
    61 => "00111101101011110111011110111101", 
    62 => "00111100010111011101111001101101", 
    63 => "10111101111000010000000101101101", 
    64 => "00111101001000110110000010001101", 
    65 => "00111110000100101001101000011100", 
    66 => "10111100110000101001111110000010", 
    67 => "00111110010011000101000111011011", 
    68 => "10111110001110000101100111001001", 
    69 => "10111110000110001100100100110010", 
    70 => "10111011111001000101000010100010", 
    71 => "00111101100111100111111111110110", 
    72 => "00111110001110111100111110010010", 
    73 => "00111101100001100011111001001011", 
    74 => "10111100101010001101011010111001", 
    75 => "10111101101001111011010011001010", 
    76 => "00111101101001001000000100111001", 
    77 => "10111101111101011001001111100110", 
    78 => "00111101110111110100000010100011", 
    79 => "10111101111000111101111101101110", 
    80 => "10111101110000000111100010100011", 
    81 => "10111100001010011001100111000010", 
    82 => "00111101100011101001000010111100", 
    83 => "00111101101000100101110010101001", 
    84 => "10111101010001100111110010100001", 
    85 => "10111110000110001101001111110010", 
    86 => "10111100001010000001010010000111", 
    87 => "00111110011010010011010110111001", 
    88 => "00111101110000110010110111011010", 
    89 => "00111110000011100111100000011000", 
    90 => "00111101001001010010001101110000", 
    91 => "00111110000111100110001011011100", 
    92 => "10111100110100000000110010111101", 
    93 => "10111110000111110011101001011000", 
    94 => "10111100001010110010100101111001", 
    95 => "10111101100011101001001111010100", 
    96 => "10111110010011100001010110000111", 
    97 => "10111100111101000110100101011110", 
    98 => "10111100110111101011000101100110", 
    99 => "10111100100011110011010111111110", 
    100 => "00111101110100010101000101100001", 
    101 => "00111101111011100111001011011010", 
    102 => "10111101100001001011100110010110", 
    103 => "10111101100000101111100010001000", 
    104 => "10111100011001011001000101010100", 
    105 => "00111110000110010101010011101011", 
    106 => "00111101101101001100000101001011", 
    107 => "10111101100101101011010010101101", 
    108 => "10111101110011111010001101110111", 
    109 => "10111100110010111011011100100011", 
    110 => "00111110001000011010101000111111", 
    111 => "00111101100111100001001010001010", 
    112 => "10111110001101001011010111011101", 
    113 => "10111101000110111101111110001111", 
    114 => "10111110000110101111000101000101", 
    115 => "10111101001111111101000100111100", 
    116 => "10111100011100101101010111100000", 
    117 => "00111011001101010111001001101000", 
    118 => "00111110001110111101101010010100", 
    119 => "00111101100111110011000111110100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_13 is
    component inference_conv2d_f3_1_4_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_13_rom_U :  component inference_conv2d_f3_1_4_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


