-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_22_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_22_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000111110001101011100011", 
    1 => "10111101100010000101100001010001", 
    2 => "10111101010111011100010101111000", 
    3 => "10111101101001001110100100001000", 
    4 => "00111101000000101000010100110000", 
    5 => "10111100101110011100010001111101", 
    6 => "10111101010110111100010110001110", 
    7 => "10111110000110001011101111010100", 
    8 => "10111101101011000100010101000110", 
    9 => "00111101101110100010110011101101", 
    10 => "00111110000110110001101010110001", 
    11 => "10111110000010111100000011100100", 
    12 => "10111101010110011101101010000010", 
    13 => "10111110001101000011010001011101", 
    14 => "10111110010111111010001011110000", 
    15 => "00111100111110001001011111000001", 
    16 => "00111101010000101011011110111011", 
    17 => "10111101111001000000011111001100", 
    18 => "00111101111111000100100111111101", 
    19 => "10111101100000111101011110011110", 
    20 => "00111100101110100000111100100101", 
    21 => "10111101111010100100001000101001", 
    22 => "10111101111001000010101011101101", 
    23 => "10111100000100011101000110001111", 
    24 => "00111101010100010010110100110100", 
    25 => "00111101010100110110001010110011", 
    26 => "10111100111101001000001111001011", 
    27 => "10111101011100001100011110011001", 
    28 => "00111110001010000001011101110110", 
    29 => "00111100011100010101000000111010", 
    30 => "00111100110001001000100001011011", 
    31 => "10111110001110011110010111100010", 
    32 => "10111100010111000001101010110011", 
    33 => "10111100101111101011010010100110", 
    34 => "00111101001110110001111101000000", 
    35 => "10111100110000110101110000001011", 
    36 => "00111110000011110011011111111100", 
    37 => "10111011101010010000110000010011", 
    38 => "00111110000000111001111100110100", 
    39 => "00111110000110101000101011000110", 
    40 => "00111101111110110101100001001011", 
    41 => "00111011001011001011111100010000", 
    42 => "10111101000111001110010101111110", 
    43 => "10111011110001000010000010010110", 
    44 => "00111101000101110110011001101001", 
    45 => "10111110010111011011111001111111", 
    46 => "00111101001010001111000101000000", 
    47 => "10111101101000010110010101011011", 
    48 => "10111101111001100011101111101111", 
    49 => "00111101110011001101011011000011", 
    50 => "10111101011010000011100011001110", 
    51 => "10111101100111101111001000100110", 
    52 => "00111101011010111110100000000000", 
    53 => "10111101111110010111111111101001", 
    54 => "10111101100010011100110111101101", 
    55 => "10111101111001110100000110001101", 
    56 => "00111101101011101011010000101110", 
    57 => "00111101100000011111110100001000", 
    58 => "10111101110001111110001001011010", 
    59 => "10111011110101010100100100011101", 
    60 => "10111101100110100101110101111001", 
    61 => "00111100000110000000101011001110", 
    62 => "00111100001111100111011110011111", 
    63 => "00111011101011111000011101101101", 
    64 => "10111011101111100001001101001100", 
    65 => "10111101101101100101010101101010", 
    66 => "00111101101111111011111000011001", 
    67 => "00111101100111011110111110101101", 
    68 => "10111101111000000100101001110011", 
    69 => "10111101010111111110011011110000", 
    70 => "00111101100000101101100000000111", 
    71 => "10111100000000101101001010000011", 
    72 => "10111100100101001101000110110100", 
    73 => "00111101000000100010000101111000", 
    74 => "10111110001110111011110001101111", 
    75 => "00111101100101100111011110001011", 
    76 => "10111101111101010001011100011110", 
    77 => "00111100110000100000100010000011", 
    78 => "10111101100111101001001011110000", 
    79 => "00111101001010100000111011111101", 
    80 => "00111101110011101100101111111011", 
    81 => "00111110000101011110100101011011", 
    82 => "10111101001001010110010110000000", 
    83 => "00111110000011011000000110101110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_22 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_22 is
    component inference_mult_1_120_120_84_s_W4_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_22_rom_U :  component inference_mult_1_120_120_84_s_W4_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


