-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010000111001110110010100", 
    1 => "00111101000101001000100111111011", 
    2 => "00111101000001000100001111000111", 
    3 => "00111101011011011001000010101101", 
    4 => "10111101111111110100001111001000", 
    5 => "00111110000111010111010111100010", 
    6 => "10111110000001010001111000110010", 
    7 => "00111100010111000111011000100011", 
    8 => "00111101000110000110111110110011", 
    9 => "10111101110100001000001101010110", 
    10 => "10111101100001100011000000110000", 
    11 => "00111001111001000100100101111100", 
    12 => "10111101101101111110000101000000", 
    13 => "10111101010111011111010100101110", 
    14 => "10111110000010110011100001010000", 
    15 => "10111101010100011000001110011011", 
    16 => "10111011101000111100000100100101", 
    17 => "10111100110101011000100101101010", 
    18 => "10111100101010010100001011101111", 
    19 => "10111110000100001001100001001110", 
    20 => "10111100011101001001100110011010", 
    21 => "00111101110001000001110001001100", 
    22 => "10111101100001000011111110010101", 
    23 => "10111101111001001001100100000111", 
    24 => "10111011110011011111001100010011", 
    25 => "00111100101001011000011111100100", 
    26 => "00111101001111111011100101101110", 
    27 => "00111101100110111111011011010111", 
    28 => "00111101010001011011101111001100", 
    29 => "00111101111010001110100000100001", 
    30 => "10111101010111001111111101001010", 
    31 => "10111011100101110010000000011000", 
    32 => "10111101110110011000001100001110", 
    33 => "10111100100010010000110111111011", 
    34 => "00111110000010110001001100010110", 
    35 => "10111011110001000011101000000001", 
    36 => "10111101011111101111100000010011", 
    37 => "00111101100110000100100001101110", 
    38 => "10111101101010100100100110101000", 
    39 => "00111101001111010100010110100110", 
    40 => "00111101111011000101001000011110", 
    41 => "10111101010001001001111100000001", 
    42 => "00111101110110000001011100110011", 
    43 => "00111101101011010001000101000110", 
    44 => "00111110010001000000100001010011", 
    45 => "00111101110101011111010111110001", 
    46 => "00111110010101010001001110110110", 
    47 => "10111101010000111110111110010100", 
    48 => "00111100110010001011110110101001", 
    49 => "10111101101011011010111100110000", 
    50 => "10111010100001101011010010010000", 
    51 => "00111011001110011011010111000100", 
    52 => "00111100101010000000010100000010", 
    53 => "10111101100111000100101110000011", 
    54 => "00111101010011010110000000111011", 
    55 => "10111101101011010101101001001110", 
    56 => "10111100001110011101111010110011", 
    57 => "00111101010111111010111011110010", 
    58 => "10111100110010111111011101001111", 
    59 => "10111110010010110110111000001101", 
    60 => "00111101011000111111000011010110", 
    61 => "10111101001111000110111000101011", 
    62 => "10111110000001001000001100000010", 
    63 => "10111011101011010100011001110101", 
    64 => "10111011100010100100100000000010", 
    65 => "00111010100010101100001101101000", 
    66 => "00111100111100101100011000100110", 
    67 => "00111011000001110010111100110100", 
    68 => "00111101000101010100010111111101", 
    69 => "00111101000101111101111010010100", 
    70 => "10111101101111010100010100101101", 
    71 => "10111101001001100011110000001010", 
    72 => "00111101111110011011011011110110", 
    73 => "00111101100100011100110101000101", 
    74 => "00111100110001100110010100111111", 
    75 => "10111100110111111111010111010100", 
    76 => "00111101011010011000010110100000", 
    77 => "10111100110110110001010100101111", 
    78 => "00111101100101010110000000100111", 
    79 => "10111100101111101110011000100101", 
    80 => "00111100010001001101110110000000", 
    81 => "10111101011001011001011101101001", 
    82 => "00111101100000010010011000111011", 
    83 => "00111100011111011110010000110001", 
    84 => "00111101101110010011000100110111", 
    85 => "00111101001010111110110101110100", 
    86 => "10111100110111010111010100100110", 
    87 => "10111110001001101010110110110100", 
    88 => "00111101000000010001110100011100", 
    89 => "00111101100100011101101110010101", 
    90 => "00111011111010100001000010010101", 
    91 => "10111100101111101100010100111000", 
    92 => "10111100001110010010000111110101", 
    93 => "00111101001000001011010001000000", 
    94 => "10111100111100110001011100011001", 
    95 => "10111101001010011010101101000101", 
    96 => "10111110001101100100110011111001", 
    97 => "00111101000110100010110101110011", 
    98 => "10111100000000011111000000100101", 
    99 => "00111110000100001001011011111111", 
    100 => "00111100111000111011101100100110", 
    101 => "10111100100011101101001001100001", 
    102 => "00111101000110000010111101010001", 
    103 => "00111101000001111111111100111101", 
    104 => "10111101101111101011100010100010", 
    105 => "10111101001101010000110110101110", 
    106 => "10111100000110111110001111100001", 
    107 => "10111101100010011011010010100111", 
    108 => "10111110010001110000101101001010", 
    109 => "00111100111111000000111000000011", 
    110 => "10111101100010110100001010100100", 
    111 => "00111110000001100010111010010000", 
    112 => "10111110000111000011001011101100", 
    113 => "10111101000001111110011100000101", 
    114 => "00111101110110100011001010110001", 
    115 => "00111100010001111010011010001000", 
    116 => "10111100011101101101000010101100", 
    117 => "10111101101110010001001011101001", 
    118 => "00111011110101010111011101010110", 
    119 => "00111101101001000110110001000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_3 is
    component inference_conv2d_f3_0_1_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_3_rom_U :  component inference_conv2d_f3_0_1_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


