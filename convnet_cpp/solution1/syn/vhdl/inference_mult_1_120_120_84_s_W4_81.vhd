-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_81_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_81_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001101111101100001001001", 
    1 => "10111101100101111111010110011000", 
    2 => "10111101101010001110010100110001", 
    3 => "00111101101100101100010110010010", 
    4 => "10111110000001001011000001011011", 
    5 => "10111100100001011100100110100011", 
    6 => "00111110000100010000111111011000", 
    7 => "00111101101001010111001100111100", 
    8 => "10111101000001100010111100001001", 
    9 => "00111101110001011101000100111101", 
    10 => "10111101000110100010111000010100", 
    11 => "00111100001100010100100011100011", 
    12 => "10111100010010110110000111111110", 
    13 => "00111101011000101011111010100111", 
    14 => "00111101100001000110101010101110", 
    15 => "00111101100011111000100110101011", 
    16 => "10111100100011001001011101010011", 
    17 => "00111110000101100010000101110101", 
    18 => "00111110000001010000010011000101", 
    19 => "10111101001001000101111101011011", 
    20 => "00111101111100010111101111011001", 
    21 => "10111101110101010000001100110010", 
    22 => "00111101001000110101110010010001", 
    23 => "00111101010111011110101010010111", 
    24 => "00111110000001111011111101100010", 
    25 => "10111101010001001101011000001110", 
    26 => "10111101011001101101111111010011", 
    27 => "10111011101011110010101011111011", 
    28 => "00111101000000110010100101001010", 
    29 => "00111110001110111100000000011010", 
    30 => "10111110000001110100110010010000", 
    31 => "00111101100010110000110001010011", 
    32 => "10111101111001110100111010101001", 
    33 => "00111101101010100001010101110000", 
    34 => "10111110000100010000011100110001", 
    35 => "10111110001000001111110010110101", 
    36 => "10111101000101111100011110111000", 
    37 => "00111101100100001100101000000010", 
    38 => "10111101101001000010100111100001", 
    39 => "00111101110000110110101111000101", 
    40 => "00111110000011000101100001101000", 
    41 => "10111100011010011010101100101010", 
    42 => "00111101001110000111100010000010", 
    43 => "10111101101001000011001001101100", 
    44 => "00111100101000100000000011011100", 
    45 => "00111110000101011010110001000111", 
    46 => "00111101110000001110011000110111", 
    47 => "00111110010000111011101110000100", 
    48 => "10111101010001101110100110101111", 
    49 => "10111101101001100000100001001010", 
    50 => "00111101110011100111100010011110", 
    51 => "00111101110000010011110000001010", 
    52 => "10111101001100100100010011000001", 
    53 => "10111101001000011111111100010011", 
    54 => "10111101011111101011101010000110", 
    55 => "00111110001011100010110011011100", 
    56 => "00111101001000011110111110101001", 
    57 => "10111100110010111101101010010100", 
    58 => "00111101101011000100110110011100", 
    59 => "10111101100111110010100011100010", 
    60 => "10111101011110110100000100000100", 
    61 => "10111101101110100101110000011100", 
    62 => "10111100011101100110011011111010", 
    63 => "10111110001101100101001101000011", 
    64 => "10111101101100101110001000001010", 
    65 => "00111101000001101011011110001111", 
    66 => "00111101010000111110000010110000", 
    67 => "10111110000110010000100110101111", 
    68 => "00111101101000110010100110000000", 
    69 => "00111100000011000101110101010001", 
    70 => "00111101011011110001111110101000", 
    71 => "00111011110001100010011010010101", 
    72 => "00111110010011111001000010010111", 
    73 => "00111110000011110111110011101110", 
    74 => "00111011110110001101000111111110", 
    75 => "10111101001111111111101100010010", 
    76 => "10111101010001010100000001100001", 
    77 => "00111101110011011110110010100010", 
    78 => "00111110000010100001100111001010", 
    79 => "00111101100100111100001100011110", 
    80 => "00111101101000100110111111011010", 
    81 => "10111100010000110001100011101111", 
    82 => "00111101011010010101001101100110", 
    83 => "00111101010001010000100101010100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_81 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_81 is
    component inference_mult_1_120_120_84_s_W4_81_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_81_rom_U :  component inference_mult_1_120_120_84_s_W4_81_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


