-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110001011010001010111100", 
    1 => "10111101100000010011111101110011", 
    2 => "00111101011111010100101100110101", 
    3 => "10111101100011101011100101010001", 
    4 => "10111110010001110111000111001001", 
    5 => "10111110010000011010110101100100", 
    6 => "00111101000000000111101111010110", 
    7 => "10111100001000100100101001001101", 
    8 => "10111100000101100010101101110000", 
    9 => "10111101011010001101100000010110", 
    10 => "00111101101000101001001101001011", 
    11 => "00111110001011100000101011001000", 
    12 => "10111101000111001001110110101011", 
    13 => "00111101001010011000111100101011", 
    14 => "00111100100110001100110111110111", 
    15 => "00111101100110010111110100010100", 
    16 => "00111101010001011111010110010011", 
    17 => "00111100101001000110001111000010", 
    18 => "10111101110011100011110101100000", 
    19 => "00111101010001000010000100010010", 
    20 => "10111101110001100111000111010100", 
    21 => "00111100000001010011000101100010", 
    22 => "00111011101000001010010100111100", 
    23 => "00111100101011011001000000100110", 
    24 => "00111110001100010110000101011111", 
    25 => "10111101101000011100000111001001", 
    26 => "00111101001100110110010001000110", 
    27 => "10111101101011111110111001100010", 
    28 => "10111101100010011101011111110000", 
    29 => "00111101001110100111100111001001", 
    30 => "10111101001011011001101101111001", 
    31 => "00111101000001100000000000001111", 
    32 => "00111101101010000101000001100110", 
    33 => "10111101000111101111101000101100", 
    34 => "00111101010010001010010000101110", 
    35 => "00111110001111011011110001100110", 
    36 => "10111100100011001001010011001110", 
    37 => "00111101000100010000001101011110", 
    38 => "00111110001001101101001001100111", 
    39 => "10111110000001111011010101101100", 
    40 => "00111011010001111000100100010110", 
    41 => "00111110010001000011110111001101", 
    42 => "10111110001101000010111001010101", 
    43 => "10111101110000001010010110101101", 
    44 => "00111101010001110001111111111111", 
    45 => "10111101111011100011111011110011", 
    46 => "10111101010010001011110100001000", 
    47 => "10111101010011011010101011111110", 
    48 => "00111100111010100100011100110001", 
    49 => "10111100100111110110010111000001", 
    50 => "10111100111101100110001101101001", 
    51 => "00111010001001111011101000100001", 
    52 => "00111101001001100000111111001010", 
    53 => "10111101100110100111100010101111", 
    54 => "00111100010000000011111010110100", 
    55 => "10111101110010110010011100011101", 
    56 => "10111100010011011110111010100000", 
    57 => "10111101110111111000011011100100", 
    58 => "00111110000000010011011111110100", 
    59 => "00111011100011111001011001001011", 
    60 => "00111101001110101010110010111111", 
    61 => "00111101100010000100000001001110", 
    62 => "00111110001101100101010101011100", 
    63 => "10111110000010101111001001010010", 
    64 => "00111101011010011111110111100101", 
    65 => "10111101011111001111100100110101", 
    66 => "10111101111101100010101101101011", 
    67 => "00111101001000111000011010111000", 
    68 => "10111101110011001100101100010010", 
    69 => "10111100111100011010001001101111", 
    70 => "10111101000100111010001110110110", 
    71 => "00111101100001010000110000001110", 
    72 => "10111101111011100010001110101111", 
    73 => "10111110000101001101011010100001", 
    74 => "00111101001110111110001100111011", 
    75 => "10111110000101110111111110101110", 
    76 => "10111101001100101111100000101010", 
    77 => "10111110001011101001110100001111", 
    78 => "10111101100100111111110111001001", 
    79 => "10111110010100100110001101010010", 
    80 => "00111101110000111100110111000011", 
    81 => "10111100001011100100100110111111", 
    82 => "10111100111001110111000101011110", 
    83 => "00111101101100010100011100101000", 
    84 => "00111101001000100010000010100001", 
    85 => "00111100010111100110011010111110", 
    86 => "00111101001011111110011000001100", 
    87 => "00111110001001001110101011010001", 
    88 => "00111100110010011101010110100010", 
    89 => "00111100101111100110010110010110", 
    90 => "10111101010011010101001100011111", 
    91 => "10111100001000101000000101110101", 
    92 => "00111110001111001100010010101100", 
    93 => "00111101010000111011001111101010", 
    94 => "00111101110010110110011110101000", 
    95 => "10111101001001100100101001001100", 
    96 => "10111110000001110100000000111110", 
    97 => "00111110000111101001000010111100", 
    98 => "10111101001100011011010101101010", 
    99 => "10111101010101111111000011101101", 
    100 => "00111101101111110101010100100010", 
    101 => "10111100111011000111110110100010", 
    102 => "10111101010000111100010101010010", 
    103 => "00111101011101010001010100111011", 
    104 => "00111100011000101010111110001101", 
    105 => "00111100000000010111101000010011", 
    106 => "00111101100001100010011111011010", 
    107 => "10111101010100110111011111100010", 
    108 => "00111101110100011110011001000111", 
    109 => "00111011110001011100100000001011", 
    110 => "10111101101111110011001100011100", 
    111 => "10111101001011001100101011101010", 
    112 => "00111101000101010111100111001010", 
    113 => "10111110001000111101000000111001", 
    114 => "10111101011100110011001110011111", 
    115 => "10111010011010011000101001111011", 
    116 => "00111100111100000000100000000110", 
    117 => "00111101100010110011101010010001", 
    118 => "00111101100011101101100010101011", 
    119 => "00110101011011100100110100101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_11 is
    component inference_conv2d_f3_1_2_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_11_rom_U :  component inference_conv2d_f3_1_2_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


