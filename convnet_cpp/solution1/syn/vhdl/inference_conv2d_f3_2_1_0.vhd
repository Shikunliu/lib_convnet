-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000001001100010101010100", 
    1 => "10111101111110011001000110111100", 
    2 => "10111101100010011001001001101011", 
    3 => "10111101000010010100101101101110", 
    4 => "10111100110101100011010010001010", 
    5 => "00111101101100011010010111011000", 
    6 => "10111101000011110011010001101011", 
    7 => "10111110001001100110111000000001", 
    8 => "00111110011000100010011101001010", 
    9 => "10111101110110111001111110011001", 
    10 => "10111101110010100001011110111110", 
    11 => "10111101001010010100110100110110", 
    12 => "10111011111011011001010101011010", 
    13 => "00111100101000110011100011101010", 
    14 => "00111011111001001000110101001000", 
    15 => "10111110001100001000111100100001", 
    16 => "10111101111101000111101001011011", 
    17 => "10111110000000011110000000111111", 
    18 => "00111101110010101001001000001111", 
    19 => "10111101110010000000010111100110", 
    20 => "00111101011010100110000100010111", 
    21 => "00111101011010011000011011111101", 
    22 => "10111001111100001010111010000111", 
    23 => "00111101001110010011110001100010", 
    24 => "00111101001010101111100010011100", 
    25 => "10111100111100101000011011010000", 
    26 => "10111110001100111001011010001101", 
    27 => "00111100110110001010000101001100", 
    28 => "10111100111111000010101011110100", 
    29 => "00111101011000111100011011111111", 
    30 => "10111101000111111010111111100100", 
    31 => "10111011100110111011111110001111", 
    32 => "00111100111100111100111111011011", 
    33 => "10111110000101100111110001101100", 
    34 => "10111101101011001001111000111110", 
    35 => "10111100111110110000011000110001", 
    36 => "00111110000110001010001100101111", 
    37 => "00111100101000100110000001111101", 
    38 => "00111101000000000011100111000111", 
    39 => "00111101000000100111010111100001", 
    40 => "10111100100001001000001110001000", 
    41 => "10111101100010011001100100111100", 
    42 => "10111101010110101010100011011110", 
    43 => "10111011101100000011010111111110", 
    44 => "00111110001011110010010000010000", 
    45 => "00111101111111101011000011111011", 
    46 => "10111110001001110111110001000110", 
    47 => "00111101011100000011100010101101", 
    48 => "00111101000001011000100111001000", 
    49 => "10111101111101011000111000100010", 
    50 => "10111101011010010000011110010110", 
    51 => "10111100100101000000010010011010", 
    52 => "10111100101010100100000000010000", 
    53 => "10111101100001111000011000000110", 
    54 => "10111101000001111001100001100000", 
    55 => "10111110001000010110010001000001", 
    56 => "10111101010000001101100111100101", 
    57 => "10111101100100000000000011111111", 
    58 => "10111110000011010101011001101101", 
    59 => "00111101111110111011111000000001", 
    60 => "10111101111110100000011000100001", 
    61 => "00111101111100110111000010001011", 
    62 => "00111101010001110001111011110011", 
    63 => "00111101111011110110010100010011", 
    64 => "10111011100101001001111111100000", 
    65 => "10111101100110001110100001111111", 
    66 => "10111101000011101110010010000100", 
    67 => "00111100110000000010110010101011", 
    68 => "00111110001110011010000110111010", 
    69 => "00111101100100100010111110101101", 
    70 => "00111110010100101010011001101110", 
    71 => "00111101010000001000010001101111", 
    72 => "10111101010001100001011000010100", 
    73 => "10111110001000101101111000000001", 
    74 => "10111101011111000000100100010101", 
    75 => "00111101001101100000110101010011", 
    76 => "00111101100111110000011110100101", 
    77 => "10111011100000101111100111110000", 
    78 => "10111100110101010000110110101110", 
    79 => "00111101100101000100100001111111", 
    80 => "00111011010011011010000010110010", 
    81 => "00111101100101100011001001110001", 
    82 => "10111101101110110100110011111000", 
    83 => "00111101101111110110110011111101", 
    84 => "10111101010010111011011110101001", 
    85 => "00111010101100010101000100011011", 
    86 => "10111101100011011001100110100100", 
    87 => "00111101100101000111100111010101", 
    88 => "00111110001010110011101011101111", 
    89 => "00111011110001110100000110001000", 
    90 => "00111101011111101001111111111110", 
    91 => "00111101000111010010001111111101", 
    92 => "00111101101000110110000100100001", 
    93 => "00111110000011010001010100100111", 
    94 => "10111101111011110111000010011011", 
    95 => "10111101101111100010100000111111", 
    96 => "00111110000110101100000011000110", 
    97 => "00111110000001001011101111100100", 
    98 => "00111100100000011101110110000110", 
    99 => "00111101110000110001110100111011", 
    100 => "10111110000000101100110101111101", 
    101 => "00111101101101100001110010101111", 
    102 => "10111101100111000010101110010101", 
    103 => "10111110001011101110010011100010", 
    104 => "00111110000000110010011100100100", 
    105 => "10111011110111100010000110011110", 
    106 => "00111110001001101100111000110110", 
    107 => "10111100111011001001100011100101", 
    108 => "00111100100000010001001101011011", 
    109 => "00111101101001100000001111010101", 
    110 => "10111101100010001111001101110100", 
    111 => "00111110001000101111010111011100", 
    112 => "00111101000010101011000000001101", 
    113 => "10111011100010111100001110000011", 
    114 => "00111101010101011000110101100110", 
    115 => "00111101100000110010010010101101", 
    116 => "00111101011100000100111010110010", 
    117 => "00111101100010010001111110011001", 
    118 => "00111100110111101111110010110000", 
    119 => "00111110001110010000010101111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_0 is
    component inference_conv2d_f3_2_1_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_0_rom_U :  component inference_conv2d_f3_2_1_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


