-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111100110010001111111111", 
    1 => "00111101100011100001110000010101", 
    2 => "10111110000101010000101001000110", 
    3 => "00111100100000100101101000011000", 
    4 => "00111101101100101110010000111110", 
    5 => "00111101001010011001011011010010", 
    6 => "00111101010011001101100011011100", 
    7 => "10111100111010011111101010100101", 
    8 => "00111101110101110010011110011010", 
    9 => "10111101000011100010010100100111", 
    10 => "10111011110110110111001010000010", 
    11 => "00111110010111000001100000101111", 
    12 => "00111101110011011001010110011010", 
    13 => "00111101100101000110000011010011", 
    14 => "00111110001011101111000010101110", 
    15 => "00111100001110011101100110101011", 
    16 => "00111100111101100011100101111000", 
    17 => "00111101110010101111000001100001", 
    18 => "10111101010001110001100011111001", 
    19 => "10111101010110001010110011010101", 
    20 => "10111101001011010000111011000001", 
    21 => "10111101101111110110011001010101", 
    22 => "00111101100011110010100000110100", 
    23 => "10111100101011111111000010111110", 
    24 => "00111101110111110000110010111011", 
    25 => "00111101000010101011001011111100", 
    26 => "00111100000001111010001100100010", 
    27 => "10111100110110000000011110010011", 
    28 => "10111100001110001101101100010011", 
    29 => "00111100011000001111111100011110", 
    30 => "00111100100110000110000001001001", 
    31 => "00111101101001000011100000110001", 
    32 => "10111101011101000011100010011100", 
    33 => "10111101010010000111101100101110", 
    34 => "10111100111111110001001101110001", 
    35 => "10111101101011111011110011110010", 
    36 => "10111101110111101111101001100001", 
    37 => "00111101101111101101000011011011", 
    38 => "10111101100110101101100110000101", 
    39 => "10111101101100100000101111000100", 
    40 => "10111101000100000110011010011010", 
    41 => "10111101101110100011000011011011", 
    42 => "10111101100001001011111111000101", 
    43 => "10111110000011111001000111100110", 
    44 => "00111101011111000100100111001000", 
    45 => "10111101100010100011011011111110", 
    46 => "00111100010110010100100011011100", 
    47 => "10111100111001000000010100101101", 
    48 => "10111011100111001101001000011110", 
    49 => "00111101101101000100110101010010", 
    50 => "00111101110110000011100000111011", 
    51 => "10111101011101100011000011111010", 
    52 => "00111110001010011010011000101111", 
    53 => "10111101001100001011001010111011", 
    54 => "00111101100010010000111010110111", 
    55 => "00111101110011000010101000111000", 
    56 => "10111101101010110101101000100001", 
    57 => "00111101001100110011110001010011", 
    58 => "10111100100000001000001010100111", 
    59 => "00111110000010100101001111111100", 
    60 => "10111101110011011110100001110001", 
    61 => "10111101000111111001110110100101", 
    62 => "00111110001010101100010101111110", 
    63 => "00111100110101001100111010001110", 
    64 => "00111100001111101010111000100110", 
    65 => "10111011110011001011011001100111", 
    66 => "10111101010001001110010011110010", 
    67 => "10111101100101011101110001011011", 
    68 => "00111100001111010001100010001111", 
    69 => "00111101000111000001010100111111", 
    70 => "10111101011110010100100100101101", 
    71 => "10111101100011000010000000100111", 
    72 => "10111101101010000011111011010110", 
    73 => "00111110000001001111100010110110", 
    74 => "10111101101001111100100010101001", 
    75 => "10111100011011000001101110110010", 
    76 => "10111100110111011010111100111101", 
    77 => "00111101100010111100101011001100", 
    78 => "00111110001100100101011101000011", 
    79 => "00111101111011000011000100010110", 
    80 => "10111101100010110101001001011110", 
    81 => "10111101001110100111111011010010", 
    82 => "10111110001011110110101111100011", 
    83 => "10111100111011000001111101000011", 
    84 => "00111101011000010010111100001010", 
    85 => "10111110000100100010111100100111", 
    86 => "00111100000011011101000001100011", 
    87 => "00111101100011111011001010000011", 
    88 => "00111100101110111010111111011001", 
    89 => "10111101100001011111001000101010", 
    90 => "10111101110111100000100010101111", 
    91 => "10111101011100101000010101011001", 
    92 => "00111101001101010011100000001011", 
    93 => "00111011011101100101010110110010", 
    94 => "10111101000011111001100110011011", 
    95 => "10111110001000101011010000001111", 
    96 => "00111100000010111101111000000101", 
    97 => "10111011101001111010111110000111", 
    98 => "00111101110111011011000010011010", 
    99 => "00111110000101100000011010111000", 
    100 => "00111101101110100100100001110011", 
    101 => "10111101110001111101100101111110", 
    102 => "10111101001100111100010001101110", 
    103 => "00111110000001000101101111110010", 
    104 => "10111101110111000101111101111100", 
    105 => "10111100101110000100110000001100", 
    106 => "00111100111011100011010001011011", 
    107 => "10111110000000111011011111011000", 
    108 => "00111101010000100110001100011100", 
    109 => "10111100000101110000100011111011", 
    110 => "00111101000011101111001011100010", 
    111 => "00111101101111011101000010100011", 
    112 => "10111100001000111010010110010111", 
    113 => "10111101001101001111011111011111", 
    114 => "00111101101100000101110110110001", 
    115 => "00111101100111001101011100101110", 
    116 => "00111101111000111111111011100011", 
    117 => "00111110001001111001101100110101", 
    118 => "00111101101010001110000010101111", 
    119 => "10111100010001110101011011010111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_9 is
    component inference_conv2d_f3_4_1_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_9_rom_U :  component inference_conv2d_f3_4_1_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


