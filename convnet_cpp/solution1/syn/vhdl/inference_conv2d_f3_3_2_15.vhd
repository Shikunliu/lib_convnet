-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100000000110100000000101", 
    1 => "00111101110110110010100000001111", 
    2 => "00111101100000110100000001001111", 
    3 => "00111110000110001110001001011101", 
    4 => "00111110000100101110101011011001", 
    5 => "00111101001001010001010000111100", 
    6 => "10111101000111101000110001100010", 
    7 => "10111101001101111100101101001000", 
    8 => "10111101000110011101111100011111", 
    9 => "00111101111101111011111000010010", 
    10 => "00111110001100100011110011001001", 
    11 => "10111110000101100110111110010011", 
    12 => "10111110001010011100000011101100", 
    13 => "10111110000100110001011101101010", 
    14 => "10111101001010100010101001000000", 
    15 => "10111100001110010110110000110010", 
    16 => "00111101001010100011110100111011", 
    17 => "00111011101111111001011101000101", 
    18 => "00111101100111000011011100010000", 
    19 => "00111101101101101011001000110110", 
    20 => "10111110001011111001010010000101", 
    21 => "10111110010000000100000111001100", 
    22 => "10111101010111101111101101101110", 
    23 => "00111101101101011110110001100110", 
    24 => "00111100010011111001001000001111", 
    25 => "00111110000000001110111100010011", 
    26 => "00111100101100100100010011110111", 
    27 => "00111100000000001110100001110011", 
    28 => "10111101111011101110110110001001", 
    29 => "10111101010101111110101101000100", 
    30 => "00111011101000111110101110101101", 
    31 => "00111110001010110111100111011001", 
    32 => "10111101110000001111110011101011", 
    33 => "10111101000110000001110000000110", 
    34 => "10111110000011011111101101010000", 
    35 => "10111110000110001010001001100110", 
    36 => "10111101101110000010101001001001", 
    37 => "10111101010111100000000111111001", 
    38 => "10111100100100000000011000001000", 
    39 => "00111101001110001100001111001100", 
    40 => "10111101100101111100001001011111", 
    41 => "00111100111011110101110110111100", 
    42 => "00111101001100000000010101100110", 
    43 => "10111101111000111100110000001000", 
    44 => "00111011111011111111010000000100", 
    45 => "00111101110100100011101100110110", 
    46 => "00111110001000000100010000101000", 
    47 => "00111101101111101011010000101110", 
    48 => "10111101110000001001010000001111", 
    49 => "10111101101111010000010011100110", 
    50 => "00111110011000010100010110010101", 
    51 => "00111101111001010011011011010110", 
    52 => "00111101011011001000110001010000", 
    53 => "10111101100011000100100110111010", 
    54 => "10111101110001111111111011101101", 
    55 => "00111100001000001100111001010111", 
    56 => "10111101010010110101101101111110", 
    57 => "10111101111111010100110011111101", 
    58 => "10111101110111011011001000101101", 
    59 => "10111100000111011111011101100010", 
    60 => "00111101111000011100011100010101", 
    61 => "00111101101010110100000101100010", 
    62 => "10111110001111001000101101000100", 
    63 => "00111101101010110111101001101101", 
    64 => "00111101110001011110111100100000", 
    65 => "10111101101101101011110011110110", 
    66 => "10111101111111100100111011110000", 
    67 => "00111101110111001001010011110111", 
    68 => "00111100111010111110110011101110", 
    69 => "10111110000010100000000111101111", 
    70 => "00111101001101100101110111000000", 
    71 => "00111101111110101000101011000110", 
    72 => "10111100100101111111111101100110", 
    73 => "00111101011111010000100110010001", 
    74 => "00111101110001001010100001100011", 
    75 => "10111101011101111000110000001110", 
    76 => "00111101000111100011101001111110", 
    77 => "00111011000000100110111001011010", 
    78 => "00111101001110011111011110001101", 
    79 => "10111100011001101010111011110110", 
    80 => "10111100111010010111110010011011", 
    81 => "10111101101111110011001010010101", 
    82 => "00111101111000011011000000000011", 
    83 => "00111010110110110100110101000011", 
    84 => "00111011111100011000000011110111", 
    85 => "00111100110011101011000101110100", 
    86 => "00111101100000010100001000000101", 
    87 => "00111101100001011100011010100110", 
    88 => "10111110010010100100111111001010", 
    89 => "10111100010101100010101001000100", 
    90 => "00111100111100110000011100101001", 
    91 => "10111110001110111000001011000011", 
    92 => "10111101000100110000010110110001", 
    93 => "00111101111101000110111011010010", 
    94 => "00111101011110011111101011001110", 
    95 => "00111011101100000100110010111001", 
    96 => "00111101001111101001100010001100", 
    97 => "00111110001000010010111110010000", 
    98 => "10111101101010001110010010010000", 
    99 => "10111101010010111111000110001011", 
    100 => "10111101111110101100001001011001", 
    101 => "10111110000100111100111101110000", 
    102 => "00111101000100011111111000101111", 
    103 => "00111110000000111100001010011000", 
    104 => "00111110001001111011110100000110", 
    105 => "00111100100100100111010101001110", 
    106 => "10111100100010101111110110001010", 
    107 => "10111101101101111110111101001101", 
    108 => "10111101100010010001000001110010", 
    109 => "00111101101100000000101000111001", 
    110 => "10111100110101000101100100011110", 
    111 => "00111101111011000010011000010100", 
    112 => "00111101100010010010110011101010", 
    113 => "10111101001001000101111101110110", 
    114 => "00111101110000001111001110100011", 
    115 => "00111110000110000011000100100111", 
    116 => "10111101100111001001110000001011", 
    117 => "00111101101010010011001011010111", 
    118 => "00111110000011110100110110111110", 
    119 => "10111100111010100101001010000100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_15 is
    component inference_conv2d_f3_3_2_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_15_rom_U :  component inference_conv2d_f3_3_2_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


