-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_23_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_23_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001100100010110000011101", 
    1 => "00111101110000010100101001011011", 
    2 => "10111101100000101011011101000010", 
    3 => "10111011110100101111100011100001", 
    4 => "00111011111010101101000100000100", 
    5 => "00111100111001001001111110000111", 
    6 => "10111101001010100110111100100100", 
    7 => "10111101010101100000011100100011", 
    8 => "10111101001110111010010110101110", 
    9 => "00111110000001010100100010101010", 
    10 => "10111101010111101111011111000010", 
    11 => "10111101100101110100100110111011", 
    12 => "00111110001010000100000010011110", 
    13 => "10111100101000001011001101101001", 
    14 => "00111110000111101111001111010100", 
    15 => "10111101100101101110001110011010", 
    16 => "10111100111111110011111111100111", 
    17 => "10111100100000000101110101010011", 
    18 => "00111100101101010101000001000100", 
    19 => "00111110001001001011100010111111", 
    20 => "10111110000110101000110100100010", 
    21 => "10111110010100011010001100101011", 
    22 => "10111110001110101011000101001111", 
    23 => "10111011011001111110010110000010", 
    24 => "00111101000000100101101111111011", 
    25 => "10111110000101111010101010101100", 
    26 => "10111100001011110100100011000011", 
    27 => "10111101001111000111110000011101", 
    28 => "10111110100011011111010111001111", 
    29 => "00111100111110101101101000100110", 
    30 => "00111101001011011000101110100100", 
    31 => "10111101100111001100100111000010", 
    32 => "00111110000010010111110011000100", 
    33 => "10111101100111111111111100000001", 
    34 => "00111101101110011011001100010101", 
    35 => "10111100010111010100001100111101", 
    36 => "10111101011001000011010011111110", 
    37 => "00111101001011011100000100000011", 
    38 => "10111101111000110011011000010101", 
    39 => "10111110010100111111100010011000", 
    40 => "10111101000110010001001110011000", 
    41 => "10111011011111001110111011111110", 
    42 => "10111101000011101011110110111000", 
    43 => "10111101010110011011111011101110", 
    44 => "00111101010000101100110110001010", 
    45 => "00111101100011011001011110001011", 
    46 => "00111100101101000011100110001110", 
    47 => "00111101010011111001100111010001", 
    48 => "10111101000010101111100010011100", 
    49 => "10111101110100110101010011000001", 
    50 => "10111101100011110011111111011001", 
    51 => "00111101110111111010010011000110", 
    52 => "00111101100100011110000110101010", 
    53 => "10111100100100111010011100010001", 
    54 => "10111100100111110011110000111011", 
    55 => "00111101111001101011101101010110", 
    56 => "00111101001000011100000110111100", 
    57 => "10111110000111100101111000100100", 
    58 => "10111010111011110001000111110001", 
    59 => "00111101110010010101001000100100", 
    60 => "10111100110001001101010100011100", 
    61 => "00111101110110001001000101011100", 
    62 => "10111110000010010101011111001101", 
    63 => "00111110011001110011010011111000", 
    64 => "00111101101110110111001110011100", 
    65 => "10111101011111100000100000101001", 
    66 => "00111101011111100110101110101011", 
    67 => "00111100110010010110110101100111", 
    68 => "00111100010010001010000000010111", 
    69 => "10111100101001101011111011100110", 
    70 => "10111110010001000011100001001100", 
    71 => "10111101101011000111000100101000", 
    72 => "00111110000001001101010011001100", 
    73 => "10111100111110000101000101001010", 
    74 => "00111110001000011001010000111010", 
    75 => "00111101011011111011000001110111", 
    76 => "00111101100101010000110101111001", 
    77 => "10111101101000111000011011000110", 
    78 => "00111110000110111100110001101100", 
    79 => "10111101010010101000111100100000", 
    80 => "10111110001111000111001110101100", 
    81 => "10111100011110010111111000000110", 
    82 => "10111100110010101010111101010001", 
    83 => "00111011100010101111011010111111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_23 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_23 is
    component inference_mult_1_120_120_84_s_W4_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_23_rom_U :  component inference_mult_1_120_120_84_s_W4_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


