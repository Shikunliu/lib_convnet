-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111100000001011111011011", 
    1 => "00111101011000001110000010110110", 
    2 => "10111110000001011010101001110001", 
    3 => "00111100010111010001000011101000", 
    4 => "00111101001101110101010001100000", 
    5 => "10111101010100100001001000000001", 
    6 => "10111101101100011111110101011001", 
    7 => "00111110000011001100001001010000", 
    8 => "00111101100011011011110000100011", 
    9 => "10111101100000111100111111011011", 
    10 => "00111101101111110000111100100100", 
    11 => "00111110001001011000110101011000", 
    12 => "00111101100000110100010000001000", 
    13 => "00111110000100110011111111001000", 
    14 => "10111101110101010110000010000101", 
    15 => "00111110000100011100100100101110", 
    16 => "00111101111101010100001110101111", 
    17 => "00111101101111111111001111110001", 
    18 => "10111101010100000000110011110011", 
    19 => "10111101101101001101011010101111", 
    20 => "00111110000010000100110100110100", 
    21 => "10111101100100111011000110000000", 
    22 => "00111110001110110111011100111010", 
    23 => "10111100100000100000111110100101", 
    24 => "10111101010111011000100111101001", 
    25 => "00111110000011111001001000101001", 
    26 => "10111100101101000010110110011010", 
    27 => "00111101101100010001000100110101", 
    28 => "00111100001100111000011100010110", 
    29 => "00111101010110111110100010101111", 
    30 => "00111101100111101000001111100100", 
    31 => "10111101100000000011000001110010", 
    32 => "00111110000011010100000010101011", 
    33 => "10111101011100001001111000101101", 
    34 => "00111110011000001101010110100110", 
    35 => "00111100010000101010001101111110", 
    36 => "10111100100101001011111101110101", 
    37 => "00111110000100000100101100111100", 
    38 => "00111110001110000110100011111101", 
    39 => "00111101111100001101010110100110", 
    40 => "10111010001000000001110011100011", 
    41 => "10111101111000101100111111011001", 
    42 => "10111110000110010011110011001101", 
    43 => "10111101011000010110100100111100", 
    44 => "00111110000011000101011111100010", 
    45 => "00111101001110100110000110010000", 
    46 => "00111110001101001010100100000100", 
    47 => "00111110010000011101111010101101", 
    48 => "00111100000100110101010110010011", 
    49 => "10111110001110110000001110011111", 
    50 => "10111101010010011000000110111111", 
    51 => "00111101011001101100001001000001", 
    52 => "00111101110100010011010110011000", 
    53 => "10111101011111010011101111001011", 
    54 => "10111110011000100100101110111010", 
    55 => "10111101100000000111101000000000", 
    56 => "00111110000101111011001101010011", 
    57 => "00111110010011011111011110100101", 
    58 => "10111100111011001110111110000010", 
    59 => "00111100011010101100111111101101", 
    60 => "10111101111111110001000101110011", 
    61 => "10111101001001111110111110011110", 
    62 => "00111101001101000011111000101011", 
    63 => "10111101101110111011000010100011", 
    64 => "00111101100110010011101000000110", 
    65 => "00111101100101011011000000110110", 
    66 => "00111110001011011100101011010001", 
    67 => "10111100001111010001011101001101", 
    68 => "00111110000100110000001000101110", 
    69 => "00111101111011111100001111111000", 
    70 => "10111101101101101100010010010000", 
    71 => "00111100001101010000001001000000", 
    72 => "10111101000111101001001001011101", 
    73 => "00111101101111110111001000100001", 
    74 => "00111110010100011010111000101110", 
    75 => "10111101101101010001110111111100", 
    76 => "00111100100111010111010010000101", 
    77 => "10111101110011000100100110010010", 
    78 => "10111101100101111100010011100011", 
    79 => "00111110001101000111101010011110", 
    80 => "00111110001100000011000101001000", 
    81 => "10111101010000001010000111100110", 
    82 => "10111101011111110010001000111010", 
    83 => "10111100110110101001010101000010", 
    84 => "00111101010010101101101011010101", 
    85 => "10111101101101001110100100111110", 
    86 => "10111101010110011010100010110011", 
    87 => "00111010100111101000000001011110", 
    88 => "10111101110111000001010110010000", 
    89 => "10111101111110011111111101010000", 
    90 => "10111101010111000000110010001011", 
    91 => "10111110001101000011010111110000", 
    92 => "10111110001001101001100001111000", 
    93 => "00111101011001011110011001111001", 
    94 => "10111101101101011000001111000000", 
    95 => "10111011011101001000010010100010", 
    96 => "10111110000001001110110101110000", 
    97 => "10111101101010000100110101011100", 
    98 => "10111010101110011110101111110101", 
    99 => "00111110000000010101110100101101", 
    100 => "10111101001011000011110110010001", 
    101 => "00111101001000111111111011001000", 
    102 => "10111110000101110000001000011101", 
    103 => "10111101100010111010001100001111", 
    104 => "00111101110100010000111001000101", 
    105 => "10111110011001011111001011001011", 
    106 => "00111101110110111001100101001110", 
    107 => "00111101101111001111111110101000", 
    108 => "00111110000011101001011100000111", 
    109 => "00111110000010111000110000110011", 
    110 => "00111101110101111110000010101100", 
    111 => "10111101001111110011011001000001", 
    112 => "00111110000001001000000010100110", 
    113 => "00111101010111110101111010000101", 
    114 => "10111100010010110001001010111000", 
    115 => "00111100011010110001111001011100", 
    116 => "00111100101010000011010101110011", 
    117 => "10111101000111010111001101111001", 
    118 => "00111101100110100101111000101000", 
    119 => "00111101001000100100111100110000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_2 is
    component inference_conv2d_f3_0_4_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_2_rom_U :  component inference_conv2d_f3_0_4_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


