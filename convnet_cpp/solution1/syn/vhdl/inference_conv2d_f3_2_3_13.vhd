-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001000110011101010011", 
    1 => "10111100011010100001111111000100", 
    2 => "00111101000101101101001111010010", 
    3 => "00111110001110011101010111100101", 
    4 => "10111101010111001010110101100101", 
    5 => "00111101001000110010001110100001", 
    6 => "10111101111010110001111011100010", 
    7 => "00111110001101011000011100001110", 
    8 => "10111100111100011000101001010001", 
    9 => "10111101111101011101010101101111", 
    10 => "00111101011001101100001111010100", 
    11 => "10111100000000011010111110000011", 
    12 => "00111101100111011010101110010010", 
    13 => "00111110001011001000010101111111", 
    14 => "10111101011111101010011011101010", 
    15 => "00111110000111100011100111110111", 
    16 => "00111101000100000111101111100100", 
    17 => "00111101110001101111000111110111", 
    18 => "00111101000101010001111011100001", 
    19 => "10111101111101100010100111011000", 
    20 => "10111011100100101101011011110010", 
    21 => "10111101000111000101011110111010", 
    22 => "10111101100011111110101010011100", 
    23 => "10111110001010100111011110100011", 
    24 => "00111110001111010011101011100111", 
    25 => "00111100000100010000010000111111", 
    26 => "10111101010001101110010000100000", 
    27 => "00111011111101110000011110001001", 
    28 => "10111101110000001111000111011011", 
    29 => "10111101101111000111110100000001", 
    30 => "10111110001010110101001001000100", 
    31 => "10111101110111001011100100100100", 
    32 => "10111100101100110110010011100111", 
    33 => "00111101001011101100110110101001", 
    34 => "00111101001111101101001110010101", 
    35 => "10111110000100010110010100001010", 
    36 => "00111101101011100100000110011111", 
    37 => "00111100001111010101001101001000", 
    38 => "10111101101100110011101001010101", 
    39 => "10111011101111000010111011110000", 
    40 => "00111101110111010000110010000000", 
    41 => "10111101101111010101101101011011", 
    42 => "00111101000001101011110010011000", 
    43 => "00111101010100110011010001000000", 
    44 => "10111101001000100100011100000010", 
    45 => "10111100101010111100010110000001", 
    46 => "10111101101001000011010101011100", 
    47 => "00111110000010101001001100101001", 
    48 => "10111110000101110010010110000001", 
    49 => "10111101011000100010111110111011", 
    50 => "10111100001110001101110001010101", 
    51 => "10111110000111111110000111011010", 
    52 => "00111011111110001100000101000111", 
    53 => "10111101011010111010011100011000", 
    54 => "10111110000011000011011110100100", 
    55 => "00111100101100010001001000100110", 
    56 => "10111101111110000011000101101010", 
    57 => "10111100010110110110110100001110", 
    58 => "00111101100001110001100001011000", 
    59 => "10111101001010001010010001001001", 
    60 => "00111101100010110111100110100011", 
    61 => "00111100001010010010011011010101", 
    62 => "10111100000010111000001001001010", 
    63 => "10111101010101011111100111101101", 
    64 => "10111101001100110100101110111101", 
    65 => "10111101100100101001101001111010", 
    66 => "10111101000001010000111110000100", 
    67 => "10111100111100000010010011000001", 
    68 => "00111110010001100110010101011010", 
    69 => "00111101111111001001111001100111", 
    70 => "00111100000111101100011010110101", 
    71 => "00111110000101110101111011101010", 
    72 => "10111011110101111100000111001000", 
    73 => "10111101110101100100010100011100", 
    74 => "10111101001011010110100001101001", 
    75 => "00111110010011101110101110110011", 
    76 => "10111101110110101100111111111010", 
    77 => "10111101101000111110001110011111", 
    78 => "00111101111010110011111101100100", 
    79 => "10111101011000001001011110000101", 
    80 => "10111101011011011010001101110010", 
    81 => "00111101110101110011010111000010", 
    82 => "00111101111000111101101100111100", 
    83 => "10111101000101100110001101001111", 
    84 => "10111100111110100110010000010100", 
    85 => "00111101000001001010001101001101", 
    86 => "00111101111101101010010010000111", 
    87 => "10111101111001010010111001110011", 
    88 => "00111100101111101010101110100010", 
    89 => "00111101101110000001011101001110", 
    90 => "00111101010000100010111001011110", 
    91 => "10111110000100101000101101101110", 
    92 => "00111101011100100111001101101010", 
    93 => "00111101010111100010000110001001", 
    94 => "10111101101110011011111000001010", 
    95 => "00111101110010010001110011101101", 
    96 => "10111100101101001000110100000101", 
    97 => "00111101111011011001011110110011", 
    98 => "00111101100011000001110110110000", 
    99 => "00111101100000010100101110001111", 
    100 => "10111101001101110100100110010011", 
    101 => "00111101010011001101001001011100", 
    102 => "10111100111111011001101010010101", 
    103 => "10111110000011010010011011111010", 
    104 => "10111110000010100010010101010011", 
    105 => "10111101100101111111001011010000", 
    106 => "00111101101110011011011000111010", 
    107 => "00111101001001011111001011110100", 
    108 => "00111101100001110110010010000110", 
    109 => "00111100111000001110110000001001", 
    110 => "10111100010100110010001111111111", 
    111 => "00111100111111100111000101010101", 
    112 => "10111101110000101001010101111111", 
    113 => "10111100010110000010000001010011", 
    114 => "10111101100111010110010110010100", 
    115 => "10111100111111011000001001000010", 
    116 => "10111100110100110010100100000111", 
    117 => "00111100010001010000110001111010", 
    118 => "10111101000010010001110110011011", 
    119 => "10111100011010101101110011101110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_13 is
    component inference_conv2d_f3_2_3_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_13_rom_U :  component inference_conv2d_f3_2_3_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


