-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111110000110110010001110", 
    1 => "10111101100111010000111000010011", 
    2 => "00111101101010010000001110001100", 
    3 => "10111101010110010101110010101110", 
    4 => "00111100010100111001010001100111", 
    5 => "00111101100110000110111111001110", 
    6 => "10111100100100011001101100110011", 
    7 => "00111101010110011011100110010101", 
    8 => "10111100000100110000110000010111", 
    9 => "10111110011000001001011001111000", 
    10 => "00111100011000100110010101010000", 
    11 => "00111101010000010010110100100111", 
    12 => "10111100001100101010100100110101", 
    13 => "00111101001111110100000111111111", 
    14 => "10111101101111111111000010111110", 
    15 => "10111101101000100111100100010100", 
    16 => "00111100101100101010010111011010", 
    17 => "00111110010000010011010100010001", 
    18 => "10111110010001100101101000010100", 
    19 => "10111101110001101011110101101111", 
    20 => "10111101000100011100110011100111", 
    21 => "00111101001101000000111100010110", 
    22 => "10111101110011010000111111101001", 
    23 => "00111101011110101110011011010110", 
    24 => "00111101101101011010011110011101", 
    25 => "10111001100010101010100110100011", 
    26 => "10111101010000110101000100100011", 
    27 => "00111100010011111011011000100001", 
    28 => "00111101110000001111011111111101", 
    29 => "00111101100101100010100101000101", 
    30 => "10111110000100011101111101110110", 
    31 => "00111110000110100110100101111011", 
    32 => "00111100011000111101110100011111", 
    33 => "10111100110000010000101010001100", 
    34 => "10111101000101010000100111101000", 
    35 => "10111101001011000110101000111100", 
    36 => "10111100110101110001001010100001", 
    37 => "10111101000010011110010000011010", 
    38 => "10111101000101111001010110011001", 
    39 => "10111100011110111110110011100000", 
    40 => "00111101101000010110111101010001", 
    41 => "00111100010000101001000101110101", 
    42 => "10111101010110101001010110010011", 
    43 => "00111101010011000100011010110000", 
    44 => "10111100001010001111101011001011", 
    45 => "00111101110011100101101101000010", 
    46 => "10111100100111111000111000000101", 
    47 => "10111101010011010001100010011101", 
    48 => "10111101011110010110000001110100", 
    49 => "10111101110111101100101100110010", 
    50 => "10111110001001011111101011101100", 
    51 => "00111110010010010010100100100100", 
    52 => "00111100110110111110111001110011", 
    53 => "10111101100111100100110100000000", 
    54 => "10111110010101111001010000100001", 
    55 => "00111110000010000100100100000010", 
    56 => "00111100001101011111001100000001", 
    57 => "10111101101101111000010101011000", 
    58 => "10111101100000111011001101110001", 
    59 => "10111100110110111111101011010011", 
    60 => "10111101101010111110110110000001", 
    61 => "10111110011010000000001000111010", 
    62 => "00111110000110101001110010011001", 
    63 => "10111101100111011100001011110100", 
    64 => "00111100110000110000101111101110", 
    65 => "10111101010000100101101111111011", 
    66 => "00111101111011000010110111110001", 
    67 => "10111101001000000011011000000000", 
    68 => "10111101000010110011101110111000", 
    69 => "00111101110101110010110101011110", 
    70 => "10111101010101110101111111101001", 
    71 => "00111101101100001000101000100110", 
    72 => "00111100111010011101100111101110", 
    73 => "00111110000110000111100010111000", 
    74 => "00111101101000111100100111010100", 
    75 => "00111101101010011011111101110100", 
    76 => "00111101001101101000011000011111", 
    77 => "10111110000011110110100111001011", 
    78 => "00111101100000110110010000010000", 
    79 => "10111100111101110101000111011100", 
    80 => "00111100101001011011001001000001", 
    81 => "00111101101010010101111110111000", 
    82 => "00111101100000000110000010000101", 
    83 => "00111100111001101101000001001110", 
    84 => "00111110000111111011001111111010", 
    85 => "10111101101000010000111010100011", 
    86 => "00111011111000111101001101100100", 
    87 => "00111101010011010011110110000110", 
    88 => "00111100101100111100010101011111", 
    89 => "10111110000000010001011011101100", 
    90 => "10111101100001101100110100000001", 
    91 => "10111110000001100010111010010000", 
    92 => "10111100111000010011011000010000", 
    93 => "00111100001000100101010110100000", 
    94 => "00111100101111001011111110100100", 
    95 => "00111110010101101100011111101011", 
    96 => "00111101110101001111100100111100", 
    97 => "00111101000100000101100101001001", 
    98 => "00111101111001111001110011000111", 
    99 => "10111011100100001110011010011000", 
    100 => "10111100111011011101001101111000", 
    101 => "10111100110111100010001111010111", 
    102 => "10111100110010000011000100100111", 
    103 => "10111100011010011010100111101000", 
    104 => "00111101100010110000000011011000", 
    105 => "10111101000011001010001101111100", 
    106 => "00111101010011110101011111011100", 
    107 => "00111100011111101110000010110001", 
    108 => "00111100111100010111100001001000", 
    109 => "10111011011011000111011110111000", 
    110 => "00111101101011000101110100100000", 
    111 => "00111101101000010101001100110111", 
    112 => "00111101111010100001101101011100", 
    113 => "00111101110001001101111111101001", 
    114 => "00111100110101001110001001111011", 
    115 => "00111100111110101011110100110110", 
    116 => "10111110001011001000100101101110", 
    117 => "00111101111100000010111111111001", 
    118 => "00111100101011010100000011100001", 
    119 => "10111110001110000100101110100001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_6 is
    component inference_conv2d_f3_1_4_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_6_rom_U :  component inference_conv2d_f3_1_4_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


