-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100101001110100001001101", 
    1 => "00111011011101001100010110001111", 
    2 => "10111101101011000111100100100000", 
    3 => "00111101000000100101111110001100", 
    4 => "10111100110110000011110000000001", 
    5 => "00111101110101010011100000100110", 
    6 => "10111100100000001111000100101100", 
    7 => "10111101000101011011001110101100", 
    8 => "10111100011101010010011000011101", 
    9 => "10111101101010111100010100110000", 
    10 => "00111100110010111000110010010001", 
    11 => "10111110000101010101011000001000", 
    12 => "00111110000100110111000111011010", 
    13 => "00111100000111001100101011111100", 
    14 => "00111101101100001000000011101100", 
    15 => "00111100101001000101010000001000", 
    16 => "10111110000111000010001010101011", 
    17 => "00111101101110101110000011101010", 
    18 => "10111101010001100010001000111110", 
    19 => "10111101011010010010100010111001", 
    20 => "00111101000000111110010101001101", 
    21 => "00111110001010100001110111111100", 
    22 => "00111110001110100111100101111001", 
    23 => "10111101100111010110100101110101", 
    24 => "00111100111001011011001001110111", 
    25 => "10111101101011110101011011010000", 
    26 => "00111100000000111101001001101000", 
    27 => "00111101010111000110010011110000", 
    28 => "10111101100100111000110011001101", 
    29 => "00111101110000011011010100001100", 
    30 => "00111101011101000100010100010111", 
    31 => "00111101111101110101001100011110", 
    32 => "00111011100101101011110001000101", 
    33 => "00111101100111111110010000000001", 
    34 => "00111100111111110100111011001010", 
    35 => "10111110000010000000100100001011", 
    36 => "00111110010011010000011001111001", 
    37 => "10111110000000001100100100010000", 
    38 => "00111110001000100011111101101000", 
    39 => "10111110001101000111101010011110", 
    40 => "00111101101110100001001101010111", 
    41 => "10111101101111010101110001001100", 
    42 => "00111101100000011110011010100101", 
    43 => "10111101000011110001101111100010", 
    44 => "10111101100110101110110010011011", 
    45 => "10111101000111101101101000110000", 
    46 => "00111100010110100101000010101110", 
    47 => "10111100101110111111011011110001", 
    48 => "00111110000100101000111110011111", 
    49 => "10111100110000110110001011110110", 
    50 => "10111011110101001101000111111111", 
    51 => "00111101010010101010001011010110", 
    52 => "10111101011010000010100101111111", 
    53 => "00111101010100110000010111001100", 
    54 => "00111101111110110010100000001111", 
    55 => "00111110000111011110110011100101", 
    56 => "10111100111010001101100011010010", 
    57 => "10111101110110100011101110011011", 
    58 => "00111101100101000001010110010110", 
    59 => "00111101110010100010101011000110", 
    60 => "10111100100101001001100011011111", 
    61 => "00111101011110000000001101000111", 
    62 => "10111101000110010000011011100111", 
    63 => "10111101111101100011110111000101", 
    64 => "00111100101110100111001011111000", 
    65 => "00111100101001101011011100100100", 
    66 => "10111100110000100001101000100001", 
    67 => "00111101000001001110011000110100", 
    68 => "10111011000101100100110011011110", 
    69 => "00111110000000011010000110011000", 
    70 => "00111101100110100110010011111001", 
    71 => "10111100111100000000010000111111", 
    72 => "00111110010010110101101000100001", 
    73 => "00111101110000110100000011100010", 
    74 => "10111101101101100100111000100000", 
    75 => "10111110010100000111110001000010", 
    76 => "00111101110110001010000110011101", 
    77 => "10111110010001110101010110111101", 
    78 => "00111100111111111101010010010111", 
    79 => "10111100010001011111010011010111", 
    80 => "00111100011001010000110001011111", 
    81 => "00111110000000110100010110001101", 
    82 => "00111101011011001000111111100001", 
    83 => "10111101010101100000000100001110", 
    84 => "10111101111010101010010010111010", 
    85 => "10111101110000101001101110000110", 
    86 => "10111110000100100111110001111100", 
    87 => "10111010000011101001001110100100", 
    88 => "10111101110110010001101000110011", 
    89 => "10111101010011011000110110100010", 
    90 => "00111101000000010100011110101110", 
    91 => "10111100111011110110111101011001", 
    92 => "10111100011111111001001101011110", 
    93 => "00111110001000010101110110110011", 
    94 => "10111101000100011101100001110000", 
    95 => "00111101000010011101111101100010", 
    96 => "10111101110110110101101001100100", 
    97 => "10111100110011000010001100100100", 
    98 => "10111110001001100010100001000110", 
    99 => "00111110000010010011100001011000", 
    100 => "00111101100011111101001111001101", 
    101 => "10111101001000111111011100111011", 
    102 => "00111101000100111000111101111010", 
    103 => "00111100111001101100110110010100", 
    104 => "00111101000101001010010100001000", 
    105 => "00111101010110011011111011010011", 
    106 => "00111101010111100110110111011111", 
    107 => "10111101010000001111011110101100", 
    108 => "10111101001011001011111010100101", 
    109 => "10111101111111000001100111000001", 
    110 => "00111110001101100111110001101100", 
    111 => "10111101100111110111100010000110", 
    112 => "00111100100010101101000000001000", 
    113 => "10111101111101110001000010001000", 
    114 => "00111101110111101011111100100011", 
    115 => "10111101110111001100111110101111", 
    116 => "10111101110011111100000101011001", 
    117 => "00111100100011011001001011000101", 
    118 => "00111100010111000100111100100001", 
    119 => "00111101101111110101110100110101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_12 is
    component inference_conv2d_f3_0_0_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_12_rom_U :  component inference_conv2d_f3_0_0_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


