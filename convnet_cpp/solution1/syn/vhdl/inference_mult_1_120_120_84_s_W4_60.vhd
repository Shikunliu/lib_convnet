-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_60_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_60_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110010011111101001010101", 
    1 => "10111110001100111111001110011101", 
    2 => "00111011001000100101111001100100", 
    3 => "10111101100010110011001001001000", 
    4 => "10111100111011110100000111010111", 
    5 => "00111110001001011111101010101001", 
    6 => "00111101101101011001001110001000", 
    7 => "00111100110101101011101110011001", 
    8 => "00111100000000110110111010011111", 
    9 => "10111110001100111011001000010100", 
    10 => "10111110001100010101000101100001", 
    11 => "10111010101001001000101111100110", 
    12 => "00111101000000100000101011010010", 
    13 => "10111101111010111011010001001110", 
    14 => "10111110001100100001100101100101", 
    15 => "10111110000000000001101101000011", 
    16 => "00111101001110110010111111101100", 
    17 => "10111101110100001110000010101000", 
    18 => "00111101110000101111011001111101", 
    19 => "00111101111011110000011010110011", 
    20 => "10111110000111110010110111000011", 
    21 => "00111101110110011111001010111011", 
    22 => "00111101111001111100110110001010", 
    23 => "10111101011001010111001001100101", 
    24 => "00111101001000001110000100100001", 
    25 => "10111101010000101100001010001000", 
    26 => "10111010001100110001000100001111", 
    27 => "00111100010111011110001010011111", 
    28 => "10111101100101011100010100111100", 
    29 => "00111100101110000100010001001010", 
    30 => "00111100001100011100000110101111", 
    31 => "10111101100010101001011011111101", 
    32 => "00111100100011111000011110010010", 
    33 => "10111110000101101100011100100010", 
    34 => "00111100101011110100010010010001", 
    35 => "00111101001111100001010110010101", 
    36 => "10111101100100100100001010001101", 
    37 => "00111110001111110111001000101110", 
    38 => "10111101011100101001001100110000", 
    39 => "10111110001000011001101010000100", 
    40 => "10111101001010001000001010000110", 
    41 => "10111101111101010000101100001111", 
    42 => "00111101001011010100010000100001", 
    43 => "10111101000001100001010100100011", 
    44 => "00111110001111010011101001100000", 
    45 => "10111110000110100111110001011011", 
    46 => "00111101100100101111101100001100", 
    47 => "00111101110011110011100100001000", 
    48 => "00111101110010001010101011110010", 
    49 => "00111101000010000001011001001111", 
    50 => "10111101101101011000010101101110", 
    51 => "10111110000001101010101110011011", 
    52 => "10111101101000111011101000011001", 
    53 => "00111101000001110111110100011101", 
    54 => "10111101001001000100111000001110", 
    55 => "00111101011010001100000110100101", 
    56 => "10111101100001110000000101100001", 
    57 => "10111101100001100101100001110100", 
    58 => "10111110001001101011101101010110", 
    59 => "00111101011110101010000000001111", 
    60 => "10111101110100001111100011000110", 
    61 => "00111110000110000101000101100101", 
    62 => "00111101100101010001110110011110", 
    63 => "10111110001010101010111000101001", 
    64 => "10111101101001011111001011110100", 
    65 => "10111011110011001010010110001011", 
    66 => "10111101100111001010100101000001", 
    67 => "10111110000000011001100000101001", 
    68 => "10111101111101110101100011100010", 
    69 => "00111101011110011101111011001110", 
    70 => "00111101010111101010111111010100", 
    71 => "10111101011011000101110101110001", 
    72 => "00111101001111010001101110011010", 
    73 => "00111101100010011101011000110101", 
    74 => "00111110001000101001111010010000", 
    75 => "10111101111100000001011111011011", 
    76 => "00111011110000001111010100010011", 
    77 => "00111101000101000111110001011001", 
    78 => "10111011101101111011001110100001", 
    79 => "10111101100110110110000100100111", 
    80 => "00111101101010001111110010101110", 
    81 => "00111101111100000101010100110010", 
    82 => "00111101110010011100001110011000", 
    83 => "10111101111011011011100010111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_60 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_60 is
    component inference_mult_1_120_120_84_s_W4_60_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_60_rom_U :  component inference_mult_1_120_120_84_s_W4_60_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


