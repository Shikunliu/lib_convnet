-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000000001001011110000101", 
    1 => "00111101110110100110011010011001", 
    2 => "00111100110101110010100110110011", 
    3 => "00111110000011100100111001101010", 
    4 => "00111100001101111111000101110011", 
    5 => "00111100100001100000101101000111", 
    6 => "10111110001001010011011111100011", 
    7 => "00111101101111010001100010111000", 
    8 => "10111101001101011000110111101100", 
    9 => "10111001010011001100100001011111", 
    10 => "00111101011011010000100001011100", 
    11 => "00111110000110101101101110000011", 
    12 => "00111101000010001000001111001000", 
    13 => "00111100110111111011010101110010", 
    14 => "00111101101010010000101100001100", 
    15 => "00111101010100010000001011110010", 
    16 => "00111101010100111111110011110010", 
    17 => "10111101110101011001101111000011", 
    18 => "00111101100011001110011111011010", 
    19 => "10111101000000101001010111110111", 
    20 => "10111100011101101101100111100111", 
    21 => "10111101101110000000010110111110", 
    22 => "00111010010100010100101101100010", 
    23 => "00111101000111101010100001000111", 
    24 => "10111100101110111101001000001000", 
    25 => "00111100101101001011001000100100", 
    26 => "00111110001000101010101111101111", 
    27 => "00111101001010000101010001111101", 
    28 => "10111110001001000100110100000001", 
    29 => "00111101011110101111000110111110", 
    30 => "00111110000010000011000000011010", 
    31 => "10111101011111011111110111100010", 
    32 => "00111101100100010001000111010110", 
    33 => "00111101101011101001101100000011", 
    34 => "10111101101000111100111110100110", 
    35 => "10111100111101100011110010011101", 
    36 => "00111101100110001110010011111100", 
    37 => "10111101101101110110101011111001", 
    38 => "00111101110010111111000110011000", 
    39 => "10111101010010100101110000001111", 
    40 => "00111101100011101101000010110011", 
    41 => "00111101011001000110001100111100", 
    42 => "10111101100111110001000111111001", 
    43 => "00111110001111101010010111111000", 
    44 => "10111110000001011111110111001110", 
    45 => "00111100111001110001100100010100", 
    46 => "00111100101000010000100110011011", 
    47 => "00111110001011100101100001100000", 
    48 => "00111101010111000000001100110110", 
    49 => "10111101011001000111001101111101", 
    50 => "10111100010100101111000110101010", 
    51 => "10111100101111000111000010010100", 
    52 => "10111101101010110101110110001001", 
    53 => "10111100110001010101100011010000", 
    54 => "10111101110011011110101010001001", 
    55 => "10111101111101011011010001100111", 
    56 => "10111110000101000001001000000110", 
    57 => "10111101000000001110100011001001", 
    58 => "00111101111110110000000111001001", 
    59 => "00111101101000111110000011011000", 
    60 => "00111100110000011011001110010100", 
    61 => "10111100111000100111001010111100", 
    62 => "00111110000001110111001001010000", 
    63 => "10111110000011011111001100110000", 
    64 => "10111101101000010111001100001010", 
    65 => "10111101100010111000110110111000", 
    66 => "10111101110100001011010010011110", 
    67 => "00111101111111100000011100011100", 
    68 => "00111110000000101001110011111110", 
    69 => "00111100100011110011011011010101", 
    70 => "00111011011110011100010001111101", 
    71 => "10111110001001011110010100101010", 
    72 => "10111101101100111001110010010101", 
    73 => "00111100111111100111110011011110", 
    74 => "10111101010001110110010100011001", 
    75 => "10111100110101010111011100101011", 
    76 => "00111011110111101000010011000110", 
    77 => "00111101100100111001101110111110", 
    78 => "00111101011111001110100010001001", 
    79 => "10111101100101100011000010000001", 
    80 => "00111100001011100100110010101111", 
    81 => "10111101010111000100000101001001", 
    82 => "10111101000110111101001001110100", 
    83 => "00111101111101010001011100011110", 
    84 => "00111011000001011110001000000010", 
    85 => "00111100100011110001001001010111", 
    86 => "00111011100001011010000000111101", 
    87 => "00111101000010010111000000111100", 
    88 => "00111101101101010110101111110011", 
    89 => "10111101010000101110011000101111", 
    90 => "00111101100101101000111000110010", 
    91 => "00111101001011111000110000010100", 
    92 => "00111101100101011001111100011110", 
    93 => "10111100001010011100100110010011", 
    94 => "10111101001101011011001000011001", 
    95 => "00111001111010000010100000000011", 
    96 => "00111110000110011101101111101100", 
    97 => "10111101100001111100010000110100", 
    98 => "10111101101010001001101011001100", 
    99 => "00111101001001111111010001010110", 
    100 => "00111110000110101110001011011010", 
    101 => "00111101000110101110001010100101", 
    102 => "00111101110001010101010001001101", 
    103 => "10111101001000110101010010011001", 
    104 => "10111101110100010111010100001000", 
    105 => "00111100000111101101111101101001", 
    106 => "00111101100111101010110101001111", 
    107 => "00111100001101100011000110000000", 
    108 => "10111101011010101110100011000111", 
    109 => "10111101101010010110011111100110", 
    110 => "00111101100100000101000111010111", 
    111 => "00111011001110000000100111000111", 
    112 => "10111011111011100001000011101010", 
    113 => "00111101100011010001011100110010", 
    114 => "10111110010011000100111010110101", 
    115 => "10111101101011100111111110011000", 
    116 => "00111110000000001100010110101000", 
    117 => "00111110000111001001110110011101", 
    118 => "00111011101110110011000001011000", 
    119 => "00111100011100111100011000110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_1 is
    component inference_conv2d_f3_3_3_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_1_rom_U :  component inference_conv2d_f3_3_3_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


