-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110101100010110001110111", 
    1 => "10111101001010011000011001011100", 
    2 => "10111101101000110010110011101001", 
    3 => "00111101111111010001010111110000", 
    4 => "10111101010001000010111100011111", 
    5 => "10111101011100110001010110100001", 
    6 => "00111101111110100101001100110011", 
    7 => "10111101111011011100101000001000", 
    8 => "00111101000100111011001001100100", 
    9 => "00111101101111110000011100111010", 
    10 => "10111101000100101011010111001010", 
    11 => "00111101010011010010101001110000", 
    12 => "00111101010101101111000100010011", 
    13 => "00111100010110010011011110101010", 
    14 => "10111100010101101011110111100111", 
    15 => "00111110001111010011010011011111", 
    16 => "00111101111101101111001000011111", 
    17 => "00111101001000110001001111001100", 
    18 => "10111101100101011011110001111010", 
    19 => "00111101100110111111110111101010", 
    20 => "00111101101011111000100110111000", 
    21 => "00111100110100011110010100111011", 
    22 => "00111101110100001001101101110100", 
    23 => "10111101011000101101010110111000", 
    24 => "10111110000011111111111001101101", 
    25 => "10111101100011011101010001101001", 
    26 => "10111101101001011011111101101010", 
    27 => "00111101100101111011101100010101", 
    28 => "10111101111101111011110110001100", 
    29 => "00111101001111110010011001010001", 
    30 => "00111100110001110010010111111010", 
    31 => "10111011000101010010110010100010", 
    32 => "10111101110011100011010011111100", 
    33 => "10111110001100000011101011111011", 
    34 => "10111101011110100100100000010101", 
    35 => "00111101101100101110101110001000", 
    36 => "00111101111010110011001001001000", 
    37 => "10111101001111111100001011000011", 
    38 => "00111101111000010110101001001000", 
    39 => "10111101100000111110110101010010", 
    40 => "00111101110000110011100100111011", 
    41 => "00111100110101001011001100010101", 
    42 => "10111101100100101000110010000111", 
    43 => "00111101000111101111101111011001", 
    44 => "10111101011111000111010001110101", 
    45 => "10111101010101010101111100101000", 
    46 => "00111100111011001010001111001101", 
    47 => "00111110000110011010111101011100", 
    48 => "00111110001000101110111110010001", 
    49 => "10111100011101001110100110110111", 
    50 => "00111101001110101000110001110011", 
    51 => "10111101100010111110010000010010", 
    52 => "10111101001001110111101100111001", 
    53 => "10111100101000101010000110110110", 
    54 => "10111011111111100100100110110010", 
    55 => "00111101011100101011110010000000", 
    56 => "00111101110111110111001011110111", 
    57 => "10111100100010101010101010110100", 
    58 => "10111101001001011111111001100010", 
    59 => "00111101100110111011100000111101", 
    60 => "00111100010010101010011101011001", 
    61 => "10111100100101010110000101011011", 
    62 => "00111101010101100101010101000001", 
    63 => "10111101001010010100001101000000", 
    64 => "00111101001100100000101000100011", 
    65 => "00111101110100000000011000001000", 
    66 => "00111101101000000111001111000011", 
    67 => "00111101100111000000110110110010", 
    68 => "10111110001001011000100101101010", 
    69 => "00111100100011011000000010111100", 
    70 => "10111101101011000101010100101000", 
    71 => "10111101110111010000001000000100", 
    72 => "10111101000010110010001011000011", 
    73 => "10111101000001111111010101111101", 
    74 => "10111110001001111100101001100100", 
    75 => "00111100000000010110101000001101", 
    76 => "00111100001001111011110001110010", 
    77 => "10111101010000111010101100011011", 
    78 => "00111110001100100100011110001000", 
    79 => "10111100111010100110111111100000", 
    80 => "10111101011101011111110100101101", 
    81 => "00111101001010010110110111010010", 
    82 => "10111110010111111001110100101100", 
    83 => "00111101001000011111101100110010", 
    84 => "00111100111011010000010101010001", 
    85 => "10111110000101001111011010011101", 
    86 => "10111101001100000111111101011001", 
    87 => "00111010011110000011000111001101", 
    88 => "10111101110001010101011110011011", 
    89 => "00111101101110000110010101101100", 
    90 => "00111100010010111100100001010101", 
    91 => "10111110001011101011111111101100", 
    92 => "00111110000011000100000110011010", 
    93 => "00111110010100101010001000111100", 
    94 => "10111011101111001101101010111100", 
    95 => "10111101110110001000110010100100", 
    96 => "00111101111000111010110110011111", 
    97 => "00111101111000110100110000011011", 
    98 => "00111110001001111111100010000111", 
    99 => "00111100010001101100001001011100", 
    100 => "00111101010110100000111010111010", 
    101 => "10111100110111001101110000001111", 
    102 => "10111100010000101010100111001001", 
    103 => "00111011101000011010100000011011", 
    104 => "00111110000000000001100010100100", 
    105 => "00111100111111001101010101110011", 
    106 => "10111110000010000110010100001110", 
    107 => "00111100101100111110110110100011", 
    108 => "10111101101010100110110011001001", 
    109 => "00111101110111110001101101101001", 
    110 => "10111110000100111111111001011101", 
    111 => "10111101010111011001100100011101", 
    112 => "00111101100001001100000100111101", 
    113 => "10111101111001000110011100111000", 
    114 => "00111101000011010111011010101011", 
    115 => "00111101010110010010001100000010", 
    116 => "10111101010001010011101001100111", 
    117 => "10111110000000011001010000111010", 
    118 => "00111100111100011011100110110110", 
    119 => "00111100011011001110111100010111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_7 is
    component inference_conv2d_f3_1_0_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_7_rom_U :  component inference_conv2d_f3_1_0_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


