-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001001101111100010010", 
    1 => "10111011001100100101010000100110", 
    2 => "10111101100110101101000010110110", 
    3 => "00111100110110001110001100100110", 
    4 => "00111101010010011001100111111000", 
    5 => "10111101110000001001000111101001", 
    6 => "00111100101101101111111110100110", 
    7 => "10111110000001110111010110111000", 
    8 => "00111101110110101010111111111111", 
    9 => "10111110001111000100111101111111", 
    10 => "00111100101000000100110000000110", 
    11 => "10111110001001001011000010011111", 
    12 => "10111101111110110011110110001110", 
    13 => "00111101010011001110000100001010", 
    14 => "00111101001100101011000111101001", 
    15 => "10111011111111101010000010000100", 
    16 => "10111101010001111110011111110110", 
    17 => "10111100101001110001100110110101", 
    18 => "00111101111011111011110000011011", 
    19 => "00111100111111001111000001001011", 
    20 => "10111101100011100001111101010101", 
    21 => "00111110000011000010011001010111", 
    22 => "00111110000000101011100100001010", 
    23 => "00111110000100010101010010000110", 
    24 => "10111101001100010011010100101100", 
    25 => "00111101101111100000100110000110", 
    26 => "10111101111001000010111110100101", 
    27 => "10111101101011111001100000010110", 
    28 => "00111100100000000110111001001111", 
    29 => "00111110001000100010111011100100", 
    30 => "00111101100100000000101100111000", 
    31 => "00111101100110000110100110011110", 
    32 => "00111101001111111110011011110000", 
    33 => "00111110000111111010001010101101", 
    34 => "10111101101011010010101111110101", 
    35 => "10111100011110000010100000110000", 
    36 => "00111110000100111111100010011000", 
    37 => "00111101111000000110001010010001", 
    38 => "00111101101010101100100001000101", 
    39 => "10111101101101010001110000011001", 
    40 => "00111101100110101111110010011000", 
    41 => "00111110001011001011000100000011", 
    42 => "00111101010100110001011001111000", 
    43 => "00111011000111111000101000011110", 
    44 => "00111101100011111011101010001000", 
    45 => "00111101110101011110010000011101", 
    46 => "10111110010000111001011100010100", 
    47 => "10111101000110001001110101010000", 
    48 => "10111101001111011010101110101101", 
    49 => "00111101111010111100111100001011", 
    50 => "10111101111000100100111011011111", 
    51 => "00111101111100000011001000010010", 
    52 => "10111101010110111101111001001101", 
    53 => "00111110011100110101100111111111", 
    54 => "00111101101000011111010000000011", 
    55 => "10111101100111001001000101011001", 
    56 => "00111101100001110000101100100010", 
    57 => "10111100001000100100010010111001", 
    58 => "10111100101000110100010110110101", 
    59 => "00111101100000000011011101101011", 
    60 => "10111101101010101011110000011100", 
    61 => "00111011111011001001110110001101", 
    62 => "10111101011100111101111010001010", 
    63 => "10111101000010110111100101100000", 
    64 => "10111011110110100001110000101011", 
    65 => "10111110010110010010010010101111", 
    66 => "10111110000101110000011110011110", 
    67 => "00111101110010110111010000010101", 
    68 => "10111101111101101010010100001101", 
    69 => "00111101101110000010101001100100", 
    70 => "10111101010010100110000110011110", 
    71 => "00111110001111100001001101101110", 
    72 => "10111011101000011000000011000100", 
    73 => "00111110001101001000001001111011", 
    74 => "00111110000101010111110110011110", 
    75 => "00111011101100001001101111111111", 
    76 => "00111101010000010111011011011110", 
    77 => "10111100101010010001100011111110", 
    78 => "10111011111101011111111101100001", 
    79 => "00111100010111010000000000100001", 
    80 => "00111101001100011111101011010100", 
    81 => "00111110001001010001110111101111", 
    82 => "10111100101101101011000011001100", 
    83 => "10111101100010011100111111111000", 
    84 => "10111101111100000100000000111010", 
    85 => "10111101010011000001000101101011", 
    86 => "00111101110101111000100000010010", 
    87 => "00111101110111011001000100100101", 
    88 => "00111101101001011010010001101010", 
    89 => "00111110000010011111000001011111", 
    90 => "10111110000001010000011011011101", 
    91 => "00111101111101000011110100000100", 
    92 => "10111011100011111101001110110011", 
    93 => "10111101101101111101110111001010", 
    94 => "10111101011010000011100111110110", 
    95 => "10111110000110101001100110110111", 
    96 => "00111110010010001011101011000111", 
    97 => "00111110100100000010100101101011", 
    98 => "00111011101101100100000110110000", 
    99 => "10111011100110100111011110111011", 
    100 => "00111101001010001000011101110011", 
    101 => "00111101100001000111110010011100", 
    102 => "00111101100100100110000110100100", 
    103 => "00111010111100101000000101100111", 
    104 => "10111110001001111111101100100110", 
    105 => "10111101000000000100011110111001", 
    106 => "10111100000011011100001100010111", 
    107 => "00111101110110001010111000110010", 
    108 => "10111100110010100100111110101111", 
    109 => "00111101110011111111000100001111", 
    110 => "10111101010010011100011011011001", 
    111 => "00111101011001111000111111100010", 
    112 => "00111100101001000110001101010111", 
    113 => "00111101111011010011100011001110", 
    114 => "10111101010000100111010000011001", 
    115 => "00111101100011100111100110111000", 
    116 => "10111010111111011101011100110001", 
    117 => "10111101001001111110010111000010", 
    118 => "00111100101011110110101100101000", 
    119 => "10111101110110000001101101100101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_0 is
    component inference_conv2d_f3_4_1_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_0_rom_U :  component inference_conv2d_f3_4_1_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


