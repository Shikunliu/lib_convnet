-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001101101001100111110000", 
    1 => "10111101000101011011111110000101", 
    2 => "10111110000110111110010110010111", 
    3 => "00111101110010010100000100100111", 
    4 => "00111101110100100000110100010011", 
    5 => "10111101111111000110000110010101", 
    6 => "00111101111110110001011011000010", 
    7 => "10111100011011000110010010101101", 
    8 => "10111100010010111011110000101100", 
    9 => "10111110001111100010111000101100", 
    10 => "10111110000001011110001011001110", 
    11 => "00111110001110001010111011111011", 
    12 => "10111101111011111010111110000110", 
    13 => "00111101001001011111000011110110", 
    14 => "10111101100001100110111001010001", 
    15 => "00111110010100000010110110011101", 
    16 => "00111011011000001011101110010111", 
    17 => "00111101011101111101110100011100", 
    18 => "00111101100111100010101010000000", 
    19 => "00111101001110001101001101101011", 
    20 => "00111100111100110001000001100011", 
    21 => "00111100011100001111111001110000", 
    22 => "10111101010101000110000110011100", 
    23 => "10111101000000000001011101100010", 
    24 => "00111101101001100101111101010010", 
    25 => "00111011011111101101001000000011", 
    26 => "00111101010100011110011001111101", 
    27 => "10111001011011000000011000100011", 
    28 => "00111100110010101101001110011001", 
    29 => "00111101100111011110010011100000", 
    30 => "00111100100101010111111100100011", 
    31 => "00111100100100111111100110110010", 
    32 => "00111011010101111100010001001101", 
    33 => "00111100110011011011110110001110", 
    34 => "00111101111011010000100110011110", 
    35 => "00111100101010110001101000101010", 
    36 => "00111100111100001010101000100010", 
    37 => "00111110000001001001011011101110", 
    38 => "00111100001100011111111000010100", 
    39 => "00111101011100011011000110001001", 
    40 => "00111101000111000000100110000001", 
    41 => "10111110001001110110011111010011", 
    42 => "00111101101000110110001000111011", 
    43 => "10111101100100101101110001010011", 
    44 => "00111101010110011001100100101110", 
    45 => "10111100111101111011101101011000", 
    46 => "00111100111110010000110011000111", 
    47 => "00111101011100110100101111110010", 
    48 => "10111101111000100100101010101110", 
    49 => "00111101110100101010100011001010", 
    50 => "10111101111101101101001000100100", 
    51 => "10111110001110111100011011101011", 
    52 => "10111100010100101101010010111001", 
    53 => "00111110000010000100100000111000", 
    54 => "10111110000111000111101100000011", 
    55 => "00111101100100010101000110010111", 
    56 => "00111010100111000000110000111011", 
    57 => "10111101011101011100000011111101", 
    58 => "00111101101011001110100100000010", 
    59 => "00111101000010100011101010011100", 
    60 => "00111100110111001010101101100111", 
    61 => "00111101010110011101111100000100", 
    62 => "10111100000010010110011001000110", 
    63 => "10111110000000010011100100000000", 
    64 => "10111110001010010111011000110110", 
    65 => "10111100110111100111001001111100", 
    66 => "10111101111110111000000110110110", 
    67 => "10111101111111101010011001111111", 
    68 => "10111110000001001000101100100010", 
    69 => "00111101100100000010010110010111", 
    70 => "00111101011111111111011011100001", 
    71 => "00111110001011100010001000011101", 
    72 => "00111110000111011010000010011101", 
    73 => "10111110000111100110101000110011", 
    74 => "10111100001000100000100000010011", 
    75 => "00111100001001101110110110101011", 
    76 => "10111101000001111011000101101111", 
    77 => "00111110010101001000001111001011", 
    78 => "00111110001011000111101111001100", 
    79 => "00111101101100001000010000011111", 
    80 => "00111101000010010110101001011101", 
    81 => "10111101111101001010001010111010", 
    82 => "00111101000010110110101011001101", 
    83 => "00111100110001110010010111111010", 
    84 => "00111101100000011111011100000000", 
    85 => "00111110000011100000000110011011", 
    86 => "00111101100010100100010110010001", 
    87 => "10111011100101010011110000111101", 
    88 => "10111101110111111010010111010011", 
    89 => "10111100101101111100001110000110", 
    90 => "10111101100000000001001010000010", 
    91 => "10111100000101100111100101010100", 
    92 => "00111101111100101011100010000100", 
    93 => "00111110001101110111110100001111", 
    94 => "10111101110110101111011111010011", 
    95 => "00111100011111000001011011010010", 
    96 => "00111110001011101001101100111001", 
    97 => "10111101101100110100111101001101", 
    98 => "00111101000100100011110000001101", 
    99 => "00111101100110110111010101100100", 
    100 => "00111101001011100010011001001110", 
    101 => "10111101011001101010101011111010", 
    102 => "00111101001000011110111110001111", 
    103 => "10111110001010000111101111011101", 
    104 => "10111101001100010001100010001100", 
    105 => "10111100010111100100001100010111", 
    106 => "00111110001001001111011010011101", 
    107 => "00111101000000000011001011011011", 
    108 => "00111101101000100100111000111110", 
    109 => "10111110001001101110010011000001", 
    110 => "00111010111101100000001001010000", 
    111 => "00111110000100111000111010110000", 
    112 => "00111100100010001110000001000100", 
    113 => "00111011110010011000011100001000", 
    114 => "10111011101101111000110101100000", 
    115 => "10111101000111001110100001010011", 
    116 => "00111101110100101100101001011000", 
    117 => "00111101001001000011010000001100", 
    118 => "00111101101010011111000100000000", 
    119 => "10111110001010001110111101111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_1 is
    component inference_conv2d_f3_3_4_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_1_rom_U :  component inference_conv2d_f3_3_4_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


