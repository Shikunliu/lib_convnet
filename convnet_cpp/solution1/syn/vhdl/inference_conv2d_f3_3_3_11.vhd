-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011011111111000000111000", 
    1 => "10111101011010011101101100110000", 
    2 => "10111101100000101011010000000010", 
    3 => "00111101101101010000001111010011", 
    4 => "10111101101100111100111011000010", 
    5 => "00111101101000010010101110000111", 
    6 => "00111100101101010111010001010110", 
    7 => "10111101100000010101011001000001", 
    8 => "00111101001000101000010000001001", 
    9 => "10111101111001011010110011001101", 
    10 => "00111110000101011011101010110010", 
    11 => "00111100100110000111011001001110", 
    12 => "00111101110001010000111001000010", 
    13 => "10111101010001101001010010001010", 
    14 => "10111101110011011001010000001000", 
    15 => "00111101000100010011111010011100", 
    16 => "10111101110011001011001000011101", 
    17 => "00111110000101000000000011111100", 
    18 => "10111101000000011101111100110011", 
    19 => "10111101010101000100000001011111", 
    20 => "10111110000000001011010101100111", 
    21 => "10111101101000011010101001100111", 
    22 => "10111110000010100100100000110000", 
    23 => "00111010000101011011010001000011", 
    24 => "00111101110000001110100010101110", 
    25 => "00111110000111011110011101100100", 
    26 => "00111110000001101110010111001101", 
    27 => "00111110000001000101110000110110", 
    28 => "00111101011010010110011111110011", 
    29 => "10111101110111001001111001100111", 
    30 => "10111101100001000000001101110010", 
    31 => "00111101111110000100011111110101", 
    32 => "10111100001001011101011100101010", 
    33 => "00111101101010000011000001101011", 
    34 => "00111110000100111010001000010110", 
    35 => "10111110001101110000100000100101", 
    36 => "00111011101100010010011100101010", 
    37 => "10111101100101011010111010111110", 
    38 => "00111101110111111100011111100111", 
    39 => "10111101101101110011110111111101", 
    40 => "10111110001010101011110111100100", 
    41 => "00111101111010101110100011100010", 
    42 => "10111010001010110100010111111011", 
    43 => "10111100111001010001111100111111", 
    44 => "00111101100011011110011001001010", 
    45 => "10111101101111010010111111110001", 
    46 => "10111110010001011110100101011011", 
    47 => "10111101111010111110001001110001", 
    48 => "10111101001100111100011101000010", 
    49 => "10111101100000010101010000101000", 
    50 => "00111110000110100011100100111111", 
    51 => "00111100111011101011100110000111", 
    52 => "00111011101001011101100111011001", 
    53 => "10111100001100001111001101010010", 
    54 => "10111101010111010111100111000011", 
    55 => "10111110000011011010000101100110", 
    56 => "00111101011100001010111110110000", 
    57 => "10111101111001111100010100100110", 
    58 => "00111101110101111100100010001110", 
    59 => "00111110001101001101011100101000", 
    60 => "10111101010100101111111111101101", 
    61 => "00111101101100001010110101000111", 
    62 => "10111101110010000011011101001001", 
    63 => "00111110000111101011001010001110", 
    64 => "10111101010100101010000100111101", 
    65 => "10111011001001011010011001101101", 
    66 => "00111101100100101101011101011000", 
    67 => "00111101000101100111111011001000", 
    68 => "00111101100111111100101100100111", 
    69 => "00111101010100011010110010110110", 
    70 => "10111101110001100001000011001001", 
    71 => "00111011000011111110111101001100", 
    72 => "10111101110110000010110110111110", 
    73 => "10111110001011011001000101101000", 
    74 => "10111101100001101101000111100001", 
    75 => "00111100000110111111101110111111", 
    76 => "10111101111001011110101110110111", 
    77 => "00111101100000100110010000110110", 
    78 => "10111101011100110101001111010000", 
    79 => "00111011010001100000111100011000", 
    80 => "00111011101011010010111111001110", 
    81 => "10111101000001001011001001001100", 
    82 => "10111101110100101100000111110100", 
    83 => "10111101000110100000001000100101", 
    84 => "10111101011101100011110010000010", 
    85 => "00111100100110101100010101111110", 
    86 => "00111010110011100101111001110010", 
    87 => "00111101010011111010110100110111", 
    88 => "00111100110010100100001110000110", 
    89 => "10111100000001111100100000110110", 
    90 => "00111110000000001001010000011101", 
    91 => "10111100000011110100101110100010", 
    92 => "00111100110111110011100000001001", 
    93 => "00111110000110010111100001001111", 
    94 => "10111001110010000111000110010110", 
    95 => "00111110010001010110011101010101", 
    96 => "10111110000100000001111011101111", 
    97 => "00111101101010111101010101010110", 
    98 => "10111101010101100111000111111101", 
    99 => "10111011100010001001101111000101", 
    100 => "00111100011100101111010101010110", 
    101 => "10111101000110001110011011101100", 
    102 => "10111110000010011100010011011011", 
    103 => "10111100100011010110011101011100", 
    104 => "00111100101000010001010101011001", 
    105 => "10111101110011011101000001010011", 
    106 => "00111100110010101011100010001011", 
    107 => "10111011111000101000001000000000", 
    108 => "10111110000001111001111101100110", 
    109 => "00111100110101100011101011010101", 
    110 => "00111101010001111011101011111010", 
    111 => "00111110001110101100111000100101", 
    112 => "10111100101100110101100010111101", 
    113 => "00111100001111111001010001101011", 
    114 => "00111101110110011110110011110110", 
    115 => "00111101110100001010000100111000", 
    116 => "10111101011100100111111101111001", 
    117 => "00111101101001000001101101110110", 
    118 => "00111101011111000011101011001001", 
    119 => "10111101101110000010111110101111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_11 is
    component inference_conv2d_f3_3_3_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_11_rom_U :  component inference_conv2d_f3_3_3_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


