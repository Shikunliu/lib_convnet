-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011101001010000111110001", 
    1 => "10111011011110011110111000011000", 
    2 => "00111110000101011000001001010110", 
    3 => "00111101011000001110111011000011", 
    4 => "10111101110011010110010111100100", 
    5 => "10111101100101001110000001101111", 
    6 => "10111110000001011011111010100001", 
    7 => "00111101110110011110111010001001", 
    8 => "00111101001010100011100111000101", 
    9 => "10111110000000100111101001100011", 
    10 => "00111110000100010110111000110111", 
    11 => "10111101101100101110010110101000", 
    12 => "00111100110010110110101100000011", 
    13 => "10111110000111111000000100011111", 
    14 => "10111110001011111011101001000101", 
    15 => "10111110001001100101101001010111", 
    16 => "00111100111101001111101111110110", 
    17 => "10111101010101001000001010111111", 
    18 => "10111110001000000011001101100001", 
    19 => "10111110001001101110010011000001", 
    20 => "10111101111000010001011101110010", 
    21 => "10111101100100100111000000001111", 
    22 => "00111101111010011111000001011111", 
    23 => "00111101000111010110001011100111", 
    24 => "00111101100110000001000011110110", 
    25 => "10111101001111011011000111000010", 
    26 => "10111101011110101010000000001111", 
    27 => "10111110000111101010011100000101", 
    28 => "00111101111011011010101000001101", 
    29 => "10111101110111000000001110111100", 
    30 => "10111101010001100101010001000010", 
    31 => "10111101100100010110000101000100", 
    32 => "10111101111110011001000000101010", 
    33 => "00111100111000010001110101010001", 
    34 => "10111101010000010000011011100001", 
    35 => "00111100001101011111011110011110", 
    36 => "00111100010001111100110001000111", 
    37 => "00111101101001100001011100111100", 
    38 => "10111101101001101111110001110100", 
    39 => "10111011101100010010011011111111", 
    40 => "10111100001101000001111101010111", 
    41 => "00111101100111101111010101110100", 
    42 => "10111011011011110011100001011101", 
    43 => "00111110001010111001110001110011", 
    44 => "00111110000000111011000100000111", 
    45 => "10111101111011110000011111000000", 
    46 => "10111110000011110111010001000111", 
    47 => "10111101110010111011010000110011", 
    48 => "00111101001111000011011110100100", 
    49 => "10111101110101101010110001100100", 
    50 => "00111100100010010110000110101001", 
    51 => "00111101100100010100110011101100", 
    52 => "10111110000011100001011100011010", 
    53 => "00111100001111111010111110101110", 
    54 => "00111101101010011001001111010101", 
    55 => "00111101001110111001101101100111", 
    56 => "00111101111010001000101111011011", 
    57 => "00111110000110010100110110010100", 
    58 => "00111100000111000101111101010001", 
    59 => "10111100001100010101011001001111", 
    60 => "00111101001011010001011001001110", 
    61 => "00111101001101101000110010011111", 
    62 => "00111011101011101011101110101010", 
    63 => "10111101101010010110010001001000", 
    64 => "10111101110010011111010101011010", 
    65 => "10111101101101101001001010001100", 
    66 => "10111101110000101111010101010110", 
    67 => "10111101100000110011001110101100", 
    68 => "10111101010000000111000110101010", 
    69 => "00111101100000110100100101100001", 
    70 => "10111101101100010011001001100101", 
    71 => "10111101101101001111110111011001", 
    72 => "10111110000011111100111100111110", 
    73 => "10111100000010001100101101001011", 
    74 => "10111100011110110101101001111111", 
    75 => "10111101110000111110110000111001", 
    76 => "10111101000011101001001010100000", 
    77 => "10111100101110010100001011100010", 
    78 => "10111011011100010001101000001001", 
    79 => "10111101101100110110100111110000", 
    80 => "00111100100011111111100100111101", 
    81 => "10111101010001110000010010000110", 
    82 => "10111011101011000100010010000010", 
    83 => "10111110000001111100101111110111", 
    84 => "00111101100001000100110101101101", 
    85 => "10111100000110001110011001000000", 
    86 => "00111110001011111100011100011101", 
    87 => "00111011110000101101111001001100", 
    88 => "00111110001110010011100111101011", 
    89 => "10111101101100111000110010100101", 
    90 => "00111101001010111010100000001010", 
    91 => "10111100101111011100101111011110", 
    92 => "10111101101001001101100100001011", 
    93 => "00111101100010111101011011101001", 
    94 => "00111110000011100100100100101100", 
    95 => "10111100001111000011011000010001", 
    96 => "10111110000001010101000100001101", 
    97 => "10111101100011111101010000101011", 
    98 => "10111101111110000011110101111001", 
    99 => "00111101011100101000010000110001", 
    100 => "10111101101010101011001100001010", 
    101 => "00111101011010100111110011100001", 
    102 => "10111110001011110001111100010101", 
    103 => "10111101000110111100110110111100", 
    104 => "10111101100101100011010001111101", 
    105 => "10111100110101010100111010110001", 
    106 => "00111110000101111001011000111010", 
    107 => "10111101101101011011110100101001", 
    108 => "10111110000100110000111111010000", 
    109 => "00111101101001111100010001001111", 
    110 => "10111101110000101000001110010000", 
    111 => "00111110001111010110010000001111", 
    112 => "00111100011110011000110001001000", 
    113 => "10111101100011100000001101010110", 
    114 => "00111101000011011111111011100001", 
    115 => "00111101100001011011110101011111", 
    116 => "00111011011001010011111001011110", 
    117 => "00111110000100000011000111001111", 
    118 => "10111101101101010110010011111001", 
    119 => "10111110010111011111001011101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_15 is
    component inference_conv2d_f3_4_3_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_15_rom_U :  component inference_conv2d_f3_4_3_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


