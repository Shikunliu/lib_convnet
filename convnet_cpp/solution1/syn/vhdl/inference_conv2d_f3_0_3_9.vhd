-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100001110100000110101000", 
    1 => "00111101001010100100001111110001", 
    2 => "00111101011110011000101110100111", 
    3 => "00111100101100101101001000011010", 
    4 => "00111101101011011111111111010011", 
    5 => "10111101100110101101110010111000", 
    6 => "10111101011000101000100000000101", 
    7 => "00111101000000111101010010111100", 
    8 => "10111110001011000001110000011101", 
    9 => "00111110011011101010011011000010", 
    10 => "10111101001111100001001101000110", 
    11 => "00111101000100100010001100110011", 
    12 => "10111101101101110110111111100110", 
    13 => "10111101100101110100110100110001", 
    14 => "00111101100110001010111000110010", 
    15 => "10111101001101001101101100100100", 
    16 => "00111110000111111001110111110101", 
    17 => "00111100110001001000000011001110", 
    18 => "00111110010001001010001110000011", 
    19 => "00111101110101111111010010011001", 
    20 => "00111100101011101011001101110010", 
    21 => "00111101100000001001010000110111", 
    22 => "00111110000110000010011010101011", 
    23 => "10111110000010100011111111001101", 
    24 => "10111100100000100110101000111110", 
    25 => "10111010000100111101011010110111", 
    26 => "10111101011110001001010010000001", 
    27 => "00111110001011101011010110110011", 
    28 => "10111101111111100100011000000110", 
    29 => "10111100100100010110111011110011", 
    30 => "10111101100010001111100110001001", 
    31 => "10111101010010100100110011011011", 
    32 => "00111100100001000011101111001111", 
    33 => "00111100111001010000010010011100", 
    34 => "00111101101010010000010011011100", 
    35 => "00111101100100000110000111110000", 
    36 => "10111100110111101010001101011001", 
    37 => "00111110010010111000100010000111", 
    38 => "10111101010010110001111111010100", 
    39 => "10111101101010000010000100110111", 
    40 => "10111110011101010010100001101011", 
    41 => "10111101100000111111101010111110", 
    42 => "10111100110101001011000010010001", 
    43 => "10111101111011000110000011001100", 
    44 => "00111101001010111111101001011010", 
    45 => "00111011010001001110010011110111", 
    46 => "10111101000101101110100111010111", 
    47 => "10111100101110000000001011011011", 
    48 => "10111110001001000101010111101011", 
    49 => "00111101100001001110110111001110", 
    50 => "00111110000011101010100111100111", 
    51 => "10111101011110001100011110010010", 
    52 => "00111110000000000110100101100010", 
    53 => "10111100010011001110011110100101", 
    54 => "00111110011100000100011101001110", 
    55 => "10111101001001010111101111110000", 
    56 => "00111101100100010101010000011011", 
    57 => "00111101101010110011010000111001", 
    58 => "10111100011110101000010010010110", 
    59 => "00111101000110110001001001011010", 
    60 => "10111101101011011101111010100011", 
    61 => "00111101100000000011011110100001", 
    62 => "10111011110010011010011010101000", 
    63 => "10111101101010000100001010101010", 
    64 => "00111100111000100101111101110001", 
    65 => "10111101001101010100000001010100", 
    66 => "00111101000001111110110111010101", 
    67 => "00111001100001100001111101010000", 
    68 => "00111101111100101101001111001000", 
    69 => "10111101001111110110111000001010", 
    70 => "10111100101100111011111110110110", 
    71 => "10111101000011100000101111000111", 
    72 => "00111101010101111001000110011100", 
    73 => "00111110000110010000010001110001", 
    74 => "10111101000101010000101010100100", 
    75 => "00111101001000011001111011101100", 
    76 => "00111101010100101010101111101111", 
    77 => "10111101100010111100010000010110", 
    78 => "00111010111011111111010001101111", 
    79 => "00111101100101011111000110010111", 
    80 => "10111110000010111110000000010101", 
    81 => "10111110000111010100101100100111", 
    82 => "00111101101111010010110110001000", 
    83 => "00111100100111000101001000010000", 
    84 => "00111101101100011101010101110011", 
    85 => "00111011111100010011000111110001", 
    86 => "00111100000100110101101011111100", 
    87 => "10111101100111011000000111111110", 
    88 => "00111110000111001011011001000001", 
    89 => "10111110010001100100000011101010", 
    90 => "10111101110011010010010011100001", 
    91 => "10111110010011010111010111100010", 
    92 => "10111101110000100110111011001101", 
    93 => "10111101001011111101001101100010", 
    94 => "00111110001000000111010010100111", 
    95 => "00111101111110100100010110010001", 
    96 => "00111101110100101011101010011101", 
    97 => "00111101000000000100100000111111", 
    98 => "10111101000010001010001111011110", 
    99 => "10111101011000110111001100110111", 
    100 => "10111100111110110101111111110011", 
    101 => "10111101111100110101110010011110", 
    102 => "00111101000110011100111110011010", 
    103 => "00111101011010000101111111101011", 
    104 => "00111110001001001100000111101100", 
    105 => "00111110000110111110011111110011", 
    106 => "00111110001100000010100100101000", 
    107 => "10111101101010100110101101010001", 
    108 => "10111101101000100011110100011001", 
    109 => "10111011111011010000000011011111", 
    110 => "10111101110011000101011100110100", 
    111 => "00111100101011001000011000111011", 
    112 => "00111011100101011000100011111110", 
    113 => "10111101010111000001010101011010", 
    114 => "10111101101111001101100101101111", 
    115 => "00111101100110001110000000101001", 
    116 => "00111101110001011011100011001111", 
    117 => "10111101100010011000111100000010", 
    118 => "00111110001000010111110101101011", 
    119 => "00111101000010011000100100110001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_9 is
    component inference_conv2d_f3_0_3_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_9_rom_U :  component inference_conv2d_f3_0_3_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


