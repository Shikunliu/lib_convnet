-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110110000001110001110001", 
    1 => "00111100110011111010110111110011", 
    2 => "10111101001011010011001101011010", 
    3 => "10111010000000001101111111111110", 
    4 => "00111101111111110000010111101010", 
    5 => "10111100111100011011110010100110", 
    6 => "10111110000001110111010000100101", 
    7 => "00111100100010111001100101011100", 
    8 => "10111110010001100011100000000000", 
    9 => "00111101100100010101000101000110", 
    10 => "00111101100011101101011001101010", 
    11 => "00111110010010011010000010101110", 
    12 => "10111110000010110111110111001000", 
    13 => "10111010011100101110110111011010", 
    14 => "00111101000000101111110101110110", 
    15 => "00111101100011111011010100111101", 
    16 => "10111011111000010010011110111000", 
    17 => "10111101011110110111001110101001", 
    18 => "10111101000100110101110100100101", 
    19 => "00111110000101101110001000100010", 
    20 => "10111101000100001110100001010000", 
    21 => "00111101001110101000000111000001", 
    22 => "10111100101111100010101111101010", 
    23 => "00111101011011110000001010000010", 
    24 => "10111101111001010110101000111000", 
    25 => "10111101110011011000011101110010", 
    26 => "10111101010001110000101111011110", 
    27 => "10111100110101010110111101101000", 
    28 => "10111100100001011111001010111110", 
    29 => "10111101001010111001011110010011", 
    30 => "00111101100010101111010010100000", 
    31 => "00111101101101100101000110001001", 
    32 => "00111101100000111001110100000000", 
    33 => "00111110000100010010111110010000", 
    34 => "10111011101000011000101010101010", 
    35 => "10111101101001000010101100111110", 
    36 => "10111101100100001011111100110101", 
    37 => "00111101100011110100100001110010", 
    38 => "00111101010111111100011111100111", 
    39 => "00111101001010011000100110000001", 
    40 => "10111101001101010000101010100100", 
    41 => "00111101101011101100011110010100", 
    42 => "00111101101111110000101100000000", 
    43 => "10111101110000101111111100100011", 
    44 => "10111101110111010101000100101111", 
    45 => "10111101101000000111110100011000", 
    46 => "00111100101000011000001111011110", 
    47 => "00111100001010000011000111100011", 
    48 => "10111101101001000001001111110110", 
    49 => "00111101101000101111111001011010", 
    50 => "10111110001011111011100000101100", 
    51 => "00111101101011111110001111001011", 
    52 => "00111101001111001011011111111100", 
    53 => "00111110000001111110000100110011", 
    54 => "00111101010111001010011100011011", 
    55 => "00111110000110111111111001111110", 
    56 => "00111110001110011110111100001111", 
    57 => "10111101001111010110110111101010", 
    58 => "10111101110010110101100010101001", 
    59 => "00111100011011111010000100001101", 
    60 => "00111101011101110000100110110111", 
    61 => "00111110000000000100100101100110", 
    62 => "00111101000101101001010100111000", 
    63 => "10111101111110010100000110000101", 
    64 => "00111101111001010011110100100001", 
    65 => "00111101000000011111101110000011", 
    66 => "00111101000000101110101111011000", 
    67 => "00111101010110001001011111000001", 
    68 => "10111101110111101111010010011101", 
    69 => "10111101001110010111000111011100", 
    70 => "10111110001110100110010111001111", 
    71 => "10111101100111000011111011000101", 
    72 => "00111101100010001100110101010110", 
    73 => "00111010101100111111110001000110", 
    74 => "10111101010000101100000011110101", 
    75 => "10111110000111100001000011001111", 
    76 => "10111110001010010110000111000011", 
    77 => "00111101101100101000100001110000", 
    78 => "10111101111010000000001100000100", 
    79 => "00111100000101011000111010011101", 
    80 => "10111101101111111111101001001001", 
    81 => "10111100111000001010111101101101", 
    82 => "10111101100010101000000011010000", 
    83 => "00111110001111110101101111100110", 
    84 => "00111101110100000011010010110001", 
    85 => "10111110000100101100000101101110", 
    86 => "10111110001000001001100001001110", 
    87 => "10111101100101101110101000100111", 
    88 => "10111101001001000100011111011110", 
    89 => "10111011100101010001100110011000", 
    90 => "10111101111110100101000100011010", 
    91 => "00111101001011100111010101011110", 
    92 => "00111110000000010001001010111010", 
    93 => "10111100110111110001011100011100", 
    94 => "10111101011101101110111110000000", 
    95 => "00111101111001100101000111110100", 
    96 => "00111101111010110001101010110001", 
    97 => "00111100001100001101101101101010", 
    98 => "10111100100011000000011110101011", 
    99 => "00111101000001100111000011111110", 
    100 => "00111100101001111111100011011000", 
    101 => "00111101101111001010001011110110", 
    102 => "10111110001110100100001110111011", 
    103 => "00111110001011101110001110010011", 
    104 => "10111100000010010101101101011110", 
    105 => "00111110000110110111010011011110", 
    106 => "00111101100000101000110010100010", 
    107 => "10111011101000100011011111111001", 
    108 => "00111101000000110110100011010110", 
    109 => "00111101110001111010000000010101", 
    110 => "10111101000101100011111000110000", 
    111 => "10111101001000010110110001100001", 
    112 => "10111101101111101011010101110000", 
    113 => "10111100110110110011111011101011", 
    114 => "00111101100011000111011011101100", 
    115 => "00111110000110110010110001000001", 
    116 => "10111101001110101010010100110010", 
    117 => "10111101100010011011110100001011", 
    118 => "00111101111100100110100101011001", 
    119 => "00111101000111011000011000100011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_0 is
    component inference_conv2d_f3_0_1_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_0_rom_U :  component inference_conv2d_f3_0_1_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


