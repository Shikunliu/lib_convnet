-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_65_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_65_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010011011001110100001100", 
    1 => "10111101110100100101110000111110", 
    2 => "00111100101110111100010100111110", 
    3 => "10111101001010100000011011001111", 
    4 => "10111101100100000101000001111010", 
    5 => "10111110000101111001000010111000", 
    6 => "10111100111111111110100101011010", 
    7 => "00111110000010001000000100011011", 
    8 => "10111110000101010011001001100001", 
    9 => "00111101010000010111001100110010", 
    10 => "00111101101000001110010101010011", 
    11 => "00111100100110011100001011101010", 
    12 => "10111100111101010100101101110001", 
    13 => "10111101001001000110100100000000", 
    14 => "00111101010110100101100000111011", 
    15 => "10111101110111101101100011010011", 
    16 => "00111100001110010101000111000110", 
    17 => "00111101110011111101110110101001", 
    18 => "00111110001011001101000111001000", 
    19 => "00111101011100100000000111110110", 
    20 => "10111001111101110001100010001100", 
    21 => "00111101110011010110101010011100", 
    22 => "10111100101110011100000111111000", 
    23 => "10111101011111000011001101010111", 
    24 => "00111110000111101111110001111010", 
    25 => "10111101001101010011010100000001", 
    26 => "10111101000101011001100011101110", 
    27 => "00111101101010011000101100100001", 
    28 => "00111101100101001111000101000100", 
    29 => "10111110010000100101010011100111", 
    30 => "10111101101111010010001110101101", 
    31 => "10111101100101111111001100111100", 
    32 => "00111101111001001100000011011111", 
    33 => "00111101100100101011011110100000", 
    34 => "10111101101001110100100010010100", 
    35 => "10111010000110011101001100010100", 
    36 => "10111110001101111011100010010001", 
    37 => "00111101100010110000011010011100", 
    38 => "00111110000111111111011011010011", 
    39 => "10111101100001110001100001110011", 
    40 => "10111011110110101011010000000001", 
    41 => "10111101110101000100111001010001", 
    42 => "00111101110010100001100100000001", 
    43 => "00111110001101110100101111000111", 
    44 => "00111110000110011101011111111110", 
    45 => "00111101100010000000011111100100", 
    46 => "10111101011111000111001000100111", 
    47 => "00111100101001001011110110111010", 
    48 => "10111101010011010101011011001011", 
    49 => "10111101101010000110101001011010", 
    50 => "10111110000111011000000000011011", 
    51 => "10111110001000101111001010110110", 
    52 => "10111110000010110111110110000101", 
    53 => "00111101000111000111001100110011", 
    54 => "10111101001101000111111110011001", 
    55 => "00111101101100000000010001110101", 
    56 => "00111101111110001100100101110101", 
    57 => "10111101111100011001101111010100", 
    58 => "10111101111001110010111100110100", 
    59 => "10111011100101101110011111111001", 
    60 => "00111100100111110010100101011011", 
    61 => "00111101010000110110100010000101", 
    62 => "00111101000111010111010100001011", 
    63 => "00111110000000111111110000000001", 
    64 => "00111101101011100110110100111110", 
    65 => "10111110001110111010001000111000", 
    66 => "00111100011011110110110101110110", 
    67 => "10111011100010010011100011100100", 
    68 => "10111101100110011011101010101111", 
    69 => "00111101100101100111111010111010", 
    70 => "10111101000000111111100011001110", 
    71 => "00111101100100111101000000010001", 
    72 => "00111101100101111111011001111100", 
    73 => "00111110000111010011001101001100", 
    74 => "10111110000101011100001011010010", 
    75 => "00111101001101101011101011111000", 
    76 => "10111101000111010000101010011101", 
    77 => "10111100110100110110110100110000", 
    78 => "10111101001110111110111111101011", 
    79 => "00111100011111010010100100100001", 
    80 => "10111100111101011010101010100111", 
    81 => "10111101101011101000011100001001", 
    82 => "10111100100100100010101110110001", 
    83 => "10111101001110011011000011100001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_65 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_65 is
    component inference_mult_1_120_120_84_s_W4_65_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_65_rom_U :  component inference_mult_1_120_120_84_s_W4_65_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


