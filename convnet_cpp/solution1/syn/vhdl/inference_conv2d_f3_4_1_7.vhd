-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000100111001000011001001", 
    1 => "00111101110111001000101110000111", 
    2 => "10111100100111000010100101100001", 
    3 => "00111110001101011000001101100010", 
    4 => "00111011010110001110000011010111", 
    5 => "10111110000101001100000011011111", 
    6 => "00111101101000100101100010010010", 
    7 => "00111101111010100100101000000110", 
    8 => "10111100100110111110110100110001", 
    9 => "00111101100011100001000010011010", 
    10 => "00111101110100010001011000100011", 
    11 => "10111110000101111111100111010111", 
    12 => "10111101111010101111010001101011", 
    13 => "10111110000000011111110011010010", 
    14 => "10111101111110110100111111101000", 
    15 => "00111100001010111010011001110111", 
    16 => "10111101001001111100000010100100", 
    17 => "10111101000011000111100110001011", 
    18 => "10111110010001100110111111010110", 
    19 => "10111110000011101001000000110110", 
    20 => "00111000111111100111001010001100", 
    21 => "00111110001110111101001010110111", 
    22 => "00111100100110011101100010000100", 
    23 => "00111101101000001011001100110100", 
    24 => "10111100011000000110111001101010", 
    25 => "10111101000010101011010101001011", 
    26 => "00111101010011101101000111011010", 
    27 => "00111110010001010001110000011001", 
    28 => "10111110000101100100100111010100", 
    29 => "10111101111010011110100110001110", 
    30 => "00111110001010110101001100001101", 
    31 => "10111011000110000101100111010100", 
    32 => "10111100100011011100100101001100", 
    33 => "10111110010110011101001101000110", 
    34 => "00111100101100100011100110100100", 
    35 => "10111101010000101110111011001000", 
    36 => "00111101011000010001010100100011", 
    37 => "00111101111001001001011001101000", 
    38 => "00111110010001111000001100010111", 
    39 => "10111101001010111000001001100101", 
    40 => "00111101100111010001101010001101", 
    41 => "00111101101011000100010001010100", 
    42 => "00111100100100100001100000110000", 
    43 => "00111101000110111001100000100111", 
    44 => "10111001110001100111001101101100", 
    45 => "00111100100110110000000101111001", 
    46 => "00111100100010110100000010100110", 
    47 => "10111101111001111000011111001111", 
    48 => "00111110001001011111001111011000", 
    49 => "10111101001100000011011110111011", 
    50 => "10111101110111110001000001100110", 
    51 => "00111110010101100110011101110011", 
    52 => "00111101100110011000000111100111", 
    53 => "00111101111111011001010001001011", 
    54 => "00111101000000010110100101110010", 
    55 => "10111100101010111110101010011111", 
    56 => "10111100110011011100011100110011", 
    57 => "10111101011100101101001001101011", 
    58 => "10111110000001010101111001101100", 
    59 => "00111100011100111010000000001011", 
    60 => "00111101111110101010110101100000", 
    61 => "10111011100010010010000011111011", 
    62 => "00111110000110000100011011101001", 
    63 => "00111101100100011100011000100011", 
    64 => "10111101101101000100111011100100", 
    65 => "10111101011000000101111011100101", 
    66 => "10111011111111101111010111010100", 
    67 => "10111101010001101111101011111100", 
    68 => "10111101011000001111111011101001", 
    69 => "10111110000101000010101000100100", 
    70 => "10111100001011101110001000000000", 
    71 => "00111100100010010101001100110000", 
    72 => "10111110000110111010101000010101", 
    73 => "00111100111100110101101100001100", 
    74 => "00111101011101011110001101000111", 
    75 => "00111011001111110010100000011111", 
    76 => "00111101110000110111001000101011", 
    77 => "00111101011011111101101010011110", 
    78 => "00111110000000011001011011011001", 
    79 => "10111110000001010011010010111101", 
    80 => "10111101000101111111000010011101", 
    81 => "00111101101100111001111110010010", 
    82 => "00111110010110011001011100111110", 
    83 => "10111100111100001101110001000001", 
    84 => "00111101010011010111110101000110", 
    85 => "00111101011001011101100001101100", 
    86 => "10111101110101110111011101001011", 
    87 => "10111101010110000111001001010010", 
    88 => "00111001011011001101001010101111", 
    89 => "00111101010101111001010110110011", 
    90 => "10111100110010100111110011000110", 
    91 => "10111110010010111010011110111001", 
    92 => "00111101011001111001010011001111", 
    93 => "10111100101010101000001010001011", 
    94 => "10111101011001100111110101111000", 
    95 => "10111101001100101010001000010100", 
    96 => "00111100100010001111010100111100", 
    97 => "00111101111101000101110011111111", 
    98 => "00111100100000010101000110100100", 
    99 => "00111110010001000001100010010011", 
    100 => "00111101011110001010000111010010", 
    101 => "00111101010100000110011100111011", 
    102 => "10111100111101100000111000001111", 
    103 => "10111100100101101010001110110000", 
    104 => "00111101111001111000100111100111", 
    105 => "10111101001010101000111110001011", 
    106 => "10111101000011101001000001010001", 
    107 => "00111101001111100001011100001101", 
    108 => "10111100111011110000010100111100", 
    109 => "00111101111000001001001011001101", 
    110 => "10111110000001110011010100111011", 
    111 => "00111011111101000011001111101111", 
    112 => "00111101100000100100011101010011", 
    113 => "00111101010100110000101101000000", 
    114 => "10111110000000011010101011000101", 
    115 => "10111101101011101101000000000101", 
    116 => "10111101001001000100101100011110", 
    117 => "10111101000100101110110001101100", 
    118 => "10111110010001101101011111101001", 
    119 => "00111101101100111001110001011111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_7 is
    component inference_conv2d_f3_4_1_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_7_rom_U :  component inference_conv2d_f3_4_1_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


