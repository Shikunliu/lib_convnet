-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110000010001101000010001", 
    1 => "00111101110011000010110010010100", 
    2 => "10111110000001000100000001101100", 
    3 => "00111101010101101010001000111001", 
    4 => "10111101001100011101100100010001", 
    5 => "10111101101111111010000101000011", 
    6 => "10111110010001000001011101000100", 
    7 => "00111100011110011101011111001000", 
    8 => "10111101101110010000000010000010", 
    9 => "10111100101010001111100011101000", 
    10 => "00111101101011011001101110010100", 
    11 => "00111101011110100010010100010000", 
    12 => "00111100101110001110000100101000", 
    13 => "00111100111101000010011100011001", 
    14 => "00111110000010000000101111101101", 
    15 => "00111101111101101111100001101010", 
    16 => "00111101100100010100011100000000", 
    17 => "10111101100000111001101001101111", 
    18 => "00111110001010111111110010101000", 
    19 => "10111101000010010000000110000001", 
    20 => "00111101011100011001110110011100", 
    21 => "00111101000100110101001100101110", 
    22 => "00111101101000101101011001011001", 
    23 => "10111100100011011000000011110010", 
    24 => "10111100001111010110010001111010", 
    25 => "00111101110010100011101000110000", 
    26 => "00111101010110000100111001011011", 
    27 => "00111100101000000110001110111000", 
    28 => "00111110000111000010101011001100", 
    29 => "00111101110101000111011100110110", 
    30 => "00111101000001110110000001111100", 
    31 => "00111100101010110110011011101100", 
    32 => "10111110000101001111010110010000", 
    33 => "10111101010000000000110000001111", 
    34 => "00111100001101100001001000001011", 
    35 => "00111100100101111101101101010011", 
    36 => "10111110010110101100110111100010", 
    37 => "00111101111011010000110111010000", 
    38 => "00111110010010100010011010100010", 
    39 => "10111011110010101000010110100000", 
    40 => "10111101100010001001110100001101", 
    41 => "00111101100110011111111101000010", 
    42 => "00111101101001111000100001000111", 
    43 => "00111101001010011000100110110111", 
    44 => "00111101111101110010111011110001", 
    45 => "00111101111111001001110101011010", 
    46 => "00111101101011011010100000001111", 
    47 => "00111101100000000011000011000010", 
    48 => "10111100110100011001101101101001", 
    49 => "10111101000001011011010000100100", 
    50 => "10111100100010011000100100010110", 
    51 => "10111110000010001001100001110000", 
    52 => "00111101010111111000010111110010", 
    53 => "10111101101001111101100101010101", 
    54 => "00111011001110111111101010011000", 
    55 => "10111101011000111010000110101011", 
    56 => "00111110000010111001000010101000", 
    57 => "00111101001100110010110010011000", 
    58 => "10111101101010000101100001000100", 
    59 => "10111101011010111110000100010101", 
    60 => "10111101111101000000010011101010", 
    61 => "10111100110010010111101101110100", 
    62 => "00111101100000111111001110101011", 
    63 => "00111101110010001110111001000011", 
    64 => "00111101101101101000101000011011", 
    65 => "10111101110110111011000111110010", 
    66 => "10111101000011110001110101110101", 
    67 => "00111101011001111111100010000111", 
    68 => "10111101110010011101000100000100", 
    69 => "10111110000100101011111001001001", 
    70 => "00111110001001010001101110010011", 
    71 => "10111101100010010001000101111111", 
    72 => "00111110000011100001101000111111", 
    73 => "00111110001100001100001111010010", 
    74 => "10111101001111001100100110011010", 
    75 => "10111101001011111010010111000101", 
    76 => "00111100001000100110101111111011", 
    77 => "10111110001101000100111000001110", 
    78 => "10111100110010000011000111111110", 
    79 => "00111101100101100010010101010110", 
    80 => "10111100111010000100011000000101", 
    81 => "10111110001000010101100010111000", 
    82 => "00111101101001111101010000010111", 
    83 => "10111101101011111100110110101011", 
    84 => "00111101100101010101110000011101", 
    85 => "10111101111101110111010110111000", 
    86 => "00111110001000100011110100001100", 
    87 => "00111101110010110101001111001001", 
    88 => "00111110000010010111101101110100", 
    89 => "00111101100110000000111001110010", 
    90 => "10111101101110000100000011111100", 
    91 => "10111101011110000001010110000110", 
    92 => "00111101100011011111011001110000", 
    93 => "10111110001010100011110010100111", 
    94 => "10111101110011100111010101111001", 
    95 => "10111101100011010110000100011111", 
    96 => "10111101111100000010001011011101", 
    97 => "10111101000011010011001101011010", 
    98 => "10111100001000010101011000011100", 
    99 => "10111101010010110000101000000100", 
    100 => "10111101100100011100011100111101", 
    101 => "00111101000110111100011010000000", 
    102 => "10111101100111010101010100000011", 
    103 => "00111101000011110011000110110001", 
    104 => "10111110001000011111111100101110", 
    105 => "10111101111110011001010001011011", 
    106 => "10111101100101101111101101001100", 
    107 => "10111101000111101001111111100011", 
    108 => "10111110000000100011110101001111", 
    109 => "10111101100100111100100010101101", 
    110 => "10111101101000111101000001101111", 
    111 => "10111101111001001110100100111110", 
    112 => "00111101010101110111111111001001", 
    113 => "00111110000000100001110001000111", 
    114 => "10111101010111011000101000000100", 
    115 => "00111101000110001101001110100001", 
    116 => "00111100110100010011101010000101", 
    117 => "10111101010000001110101010101100", 
    118 => "00111100111100001111110001010111", 
    119 => "10111101100101010011010110111100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_1 is
    component inference_conv2d_f3_0_2_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_1_rom_U :  component inference_conv2d_f3_0_2_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


