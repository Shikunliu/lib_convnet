-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_49_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_49_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000011001100011010011101", 
    1 => "10111101001010011000110101000111", 
    2 => "00111101011010101011111001001111", 
    3 => "00111101010100001000100001111001", 
    4 => "10111101100111001000000101001101", 
    5 => "00111101010100100101000000101111", 
    6 => "00111101000011011100100100110001", 
    7 => "00111110000011011010111011000101", 
    8 => "10111101110111010111001101000011", 
    9 => "00111100100110010011000101011111", 
    10 => "10111110001001101110101101001111", 
    11 => "10111110000101100001010111101100", 
    12 => "00111110000100000001111101110101", 
    13 => "00111101110011111000110001100101", 
    14 => "00111110001100000100000101000110", 
    15 => "10111101100110100000010010101001", 
    16 => "10111110000001000110101010100001", 
    17 => "10111110001101010000100111000000", 
    18 => "10111100010101111101101110001001", 
    19 => "10111101010001011010110010011000", 
    20 => "10111101011011101101100010101011", 
    21 => "00111011101000101101101101100010", 
    22 => "00111101111100101110001011111100", 
    23 => "00111110010001111101001001000010", 
    24 => "00111101100001110011000010011110", 
    25 => "00111101100101010001000010010000", 
    26 => "10111101000011100000011101011111", 
    27 => "00111101000010101011010000100100", 
    28 => "00111101000011110000010000101111", 
    29 => "10111101000100110010111010010110", 
    30 => "10111110000001001111101000000101", 
    31 => "00111011110000000010101100010011", 
    32 => "00111110001000001001000011110111", 
    33 => "10111110000101111100111111100110", 
    34 => "00111101101100100010001010101101", 
    35 => "00111100110000010011000100100011", 
    36 => "00111110001101000000000100111111", 
    37 => "00111101011001000111010000111001", 
    38 => "00111101100110110000100110001100", 
    39 => "00111011101100001110101010011001", 
    40 => "00111101101101010001101000110110", 
    41 => "10111101100101010000000110000100", 
    42 => "10111101100011101000100100111101", 
    43 => "00111101001010110101001110111011", 
    44 => "00111110010001100001011011111000", 
    45 => "00111101010010110101010011111110", 
    46 => "10111101101100000111110100110011", 
    47 => "10111100111011101100011100101000", 
    48 => "10111101101101000110110110011110", 
    49 => "00111101100110101011101100101010", 
    50 => "10111101111001010101000000000001", 
    51 => "00111100011101101110110100110010", 
    52 => "00111010100010110010101101101101", 
    53 => "10111100110000000010111001011001", 
    54 => "10111110000111001011001111100101", 
    55 => "00111101111111011100111100000011", 
    56 => "10111011101101110111110011000100", 
    57 => "00111100111001010011111001111110", 
    58 => "10111100010000000011101111000101", 
    59 => "00111100010101001111100101010111", 
    60 => "10111100100110010101010000101111", 
    61 => "10111110000001001010011101110010", 
    62 => "10111100100001111000010011000100", 
    63 => "10111100101110010101010101010110", 
    64 => "00111110000001011000101111000110", 
    65 => "10111110000001100000010001011100", 
    66 => "00111100000010101111101110010001", 
    67 => "10111100010111100001010000011101", 
    68 => "10111011110011110101001101111010", 
    69 => "10111101010001101001001111101000", 
    70 => "10111101111100010000010111100010", 
    71 => "10111110000001001101001100111001", 
    72 => "10111101001010100000101000101010", 
    73 => "00111101111010010100100110100101", 
    74 => "10111100100000010011100110000110", 
    75 => "00111101100100100001001110010011", 
    76 => "00111100011110111101011000111010", 
    77 => "10111101101000000010001110100111", 
    78 => "00111101000010010000110111100001", 
    79 => "10111110000011101111011000110000", 
    80 => "10111011000101001100010011001001", 
    81 => "10111110001100100010100111101001", 
    82 => "00111100101100000110001011010100", 
    83 => "00111101110000001001111110011000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_49 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_49 is
    component inference_mult_1_120_120_84_s_W4_49_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_49_rom_U :  component inference_mult_1_120_120_84_s_W4_49_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


