-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001010001111101010111110", 
    1 => "10111110000011010010100011010000", 
    2 => "10111101101101100100010100011100", 
    3 => "10111101100000110001011101110111", 
    4 => "00111110001110010010010011110010", 
    5 => "00111110000000110001110001100101", 
    6 => "00111100110111011001101110111101", 
    7 => "10111110000001010110001111101101", 
    8 => "00111100110101100110010010010001", 
    9 => "00111110000010111010110111000001", 
    10 => "10111101011110010011111110000111", 
    11 => "10111101110101001110010101001111", 
    12 => "10111101100101110000101110001101", 
    13 => "00111011000000000011001001101010", 
    14 => "10111101100001111100110111100111", 
    15 => "00111100010001001010010011100000", 
    16 => "00111100011100001101111010001111", 
    17 => "10111101001100001110101111000110", 
    18 => "00111100001111010101000011000011", 
    19 => "10111101100111110110101111111110", 
    20 => "10111100000111101111011011000110", 
    21 => "00111101101110001100110000101111", 
    22 => "10111101001000001000000111010000", 
    23 => "10111101000101010001010011101010", 
    24 => "00111101011010100111011101010010", 
    25 => "10111101101011101110010010000100", 
    26 => "00111110010101100000110101000101", 
    27 => "00111011111010100111101101011110", 
    28 => "10111100001000110010010100110100", 
    29 => "00111110001001101110010001111110", 
    30 => "10111100100001010000011100000110", 
    31 => "10111101010001010001010001010111", 
    32 => "00111101001100011101100000111010", 
    33 => "00111101110010111101101100011010", 
    34 => "00111101101110011111011001100110", 
    35 => "00111101010001000010001010100100", 
    36 => "00111010111000110010101000110001", 
    37 => "10111101010010001010000101110100", 
    38 => "10111110000100111001010100111110", 
    39 => "00111100111001011101101011110000", 
    40 => "00111101011110001100100010111001", 
    41 => "00111101110101101010011110101101", 
    42 => "10111110001001111101010011100001", 
    43 => "00111110010100110000101001001110", 
    44 => "10111101100111000010100100111001", 
    45 => "00111101011101100000001011110001", 
    46 => "00111110000010010110001101010110", 
    47 => "10111110010110111001110011111010", 
    48 => "00111100111001010100000100000010", 
    49 => "10111101001011100101001000100011", 
    50 => "00111101110000001111011001001111", 
    51 => "00111101110001001110011011100010", 
    52 => "00111101000101100001011101100100", 
    53 => "00111110000000111110010100110010", 
    54 => "10111110000101101010111000111010", 
    55 => "10111101000110011101001010001010", 
    56 => "10111101011000100101100111000111", 
    57 => "00111100011011111000010101011110", 
    58 => "10111101010011001000000101001101", 
    59 => "10111101100011011000110111110011", 
    60 => "10111100111000010110101011101010", 
    61 => "10111110001010011010000001101010", 
    62 => "00111101111011110010110110000000", 
    63 => "10111101000110010001001010001011", 
    64 => "10111101101000110110010001111100", 
    65 => "00111101001101111000101111011000", 
    66 => "10111101001110100101011011011110", 
    67 => "00111100110100111101101001110011", 
    68 => "10111101001110001000010010101100", 
    69 => "10111101000110100001010111110110", 
    70 => "10111101110111010110110001110010", 
    71 => "00111101101101110010100110100101", 
    72 => "00111101111011111010000001010001", 
    73 => "00111010110011000010100100001110", 
    74 => "10111101110101101111010111001011", 
    75 => "10111101000001110111001001101011", 
    76 => "10111110000001001001101100100000", 
    77 => "10111101100111110111001110100110", 
    78 => "00111101001101110100001000111100", 
    79 => "00111110001000001010001011001011", 
    80 => "00111100111000101111110111000110", 
    81 => "00111101110110111001110110000000", 
    82 => "00111101010001001110001000011101", 
    83 => "10111110000010110011100101011100", 
    84 => "00111101100111001010110011000100", 
    85 => "00111101111001011101111010011100", 
    86 => "00111101010101010111100100001110", 
    87 => "10111101000011101110010011010101", 
    88 => "00111100110001010011111000101101", 
    89 => "10111101011001001001001101111000", 
    90 => "10111101100011110111101010111010", 
    91 => "00111011110110010001001101010111", 
    92 => "10111100000101011100000100000111", 
    93 => "10111101010101110101101001110101", 
    94 => "00111110000110111000000110110110", 
    95 => "00111011100100001110010011101010", 
    96 => "00111110001000010000010000001100", 
    97 => "00111101010010010011000001000101", 
    98 => "10111101001001111100100000110001", 
    99 => "00111100001001011001000001001000", 
    100 => "00111010011000010110010000110100", 
    101 => "00111101000100001001101111111010", 
    102 => "00111100010000011111011110000111", 
    103 => "10111110000100111011101011111110", 
    104 => "00111101100001010001101111100100", 
    105 => "10111101101000100111110000011110", 
    106 => "00111010010101010101000100001000", 
    107 => "10111101010100111101000111110100", 
    108 => "10111101100111111101100101001111", 
    109 => "10111101000001100011110110011100", 
    110 => "10111101110001000110010101100010", 
    111 => "10111101111101010000010101001011", 
    112 => "10111101001110001010000011100001", 
    113 => "10111101111000000100010100110101", 
    114 => "10111110000011101110100110011010", 
    115 => "10111010110110100101111110110010", 
    116 => "10111100101000001100101101010010", 
    117 => "00111101111000110101100010110000", 
    118 => "10111101101010100111000110000000", 
    119 => "00111101000100010101011000110100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_10 is
    component inference_conv2d_f3_2_3_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_10_rom_U :  component inference_conv2d_f3_2_3_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


