-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001000101111000101001100", 
    1 => "10111101110000110001010010010101", 
    2 => "10111101111100011100001010100000", 
    3 => "00111101100010000100000101001101", 
    4 => "10111101110010111100100110110010", 
    5 => "00111101101111101110100000110000", 
    6 => "10111101001100101010100100011010", 
    7 => "10111101101011000111011111111000", 
    8 => "10111101001011000100001010011001", 
    9 => "00111101010111100011010111000110", 
    10 => "00111101010111011010110101011010", 
    11 => "00111100110110111100111100110100", 
    12 => "10111101010001110000000110110010", 
    13 => "00111101000001101100110010111110", 
    14 => "00111101101101001000011110101100", 
    15 => "10111110000111000000111110001000", 
    16 => "10111110010110001001100110111111", 
    17 => "00111101101100101010011000011101", 
    18 => "10111101011101000001011011110011", 
    19 => "00111100110000100110100001011010", 
    20 => "00111100101111101111001010111010", 
    21 => "10111101001010001111011111000001", 
    22 => "10111110000001001000100101001100", 
    23 => "00111101010010101001000001100010", 
    24 => "00111101100000110001000010001011", 
    25 => "00111101000110101101001111000001", 
    26 => "00111011111100001111011111100101", 
    27 => "00111101101011010001101001100101", 
    28 => "00111101010000010011000111011111", 
    29 => "10111101010001101011101011101010", 
    30 => "10111101100100000110000101101010", 
    31 => "00111011111011001011010011011111", 
    32 => "10111101111000011110111011101110", 
    33 => "00111100010100110100101010010101", 
    34 => "10111101011001001110111001111100", 
    35 => "00111100011010001011101101000000", 
    36 => "00111101001110111001100101101001", 
    37 => "00111110000010011000000110111111", 
    38 => "10111110001001001110100100111110", 
    39 => "10111101101101110101101110011100", 
    40 => "10111101111010011000111011011010", 
    41 => "10111100110001011101001101111111", 
    42 => "00111101010110111101111001001101", 
    43 => "00111110000010000011010001001100", 
    44 => "00111101000101010110111011111101", 
    45 => "00111101101101011000001010110100", 
    46 => "10111100000000010101011001110111", 
    47 => "10111101011001110111011101110011", 
    48 => "00111011110110111101100010011001", 
    49 => "10111101111100101001110000110100", 
    50 => "10111101110101000101010100100010", 
    51 => "00111001011011100111011101010011", 
    52 => "00111011001010101010101100001111", 
    53 => "10111101011100110111100110101010", 
    54 => "10111100001010010001101110000010", 
    55 => "00111101111100100011101010110000", 
    56 => "10111110001001010000000100011001", 
    57 => "00111100110111001101010111111010", 
    58 => "00111101101101000100111011001010", 
    59 => "10111110001110110000001101011100", 
    60 => "00111010010101110111101000000011", 
    61 => "10111011000111011011010100000111", 
    62 => "00111110010110100111000011010010", 
    63 => "10111101111011001010001001010101", 
    64 => "00111101001101100110111010111100", 
    65 => "10111110000111001111000111000011", 
    66 => "00111101100000011010000110011000", 
    67 => "10111110001010010100011100000110", 
    68 => "00111101010100110100110000001101", 
    69 => "00111101100110011001110101100000", 
    70 => "00111101100011111110001100000010", 
    71 => "10111101111010010011110000000100", 
    72 => "10111101100011101010101011100110", 
    73 => "10111110001000111010000010000100", 
    74 => "10111101111000100100101000100111", 
    75 => "10111101110001101101111010101100", 
    76 => "10111101011111101100001001001000", 
    77 => "10111110000001100010011101111100", 
    78 => "00111101101101010001111010011101", 
    79 => "00111101011000001111100011101111", 
    80 => "00111100100100110010100011010010", 
    81 => "00111110000110101000000000000110", 
    82 => "00111101100001000100010101011010", 
    83 => "00111101001011011010000010000010", 
    84 => "00111100110010111000111001110100", 
    85 => "00111100011110010001000101100100", 
    86 => "10111101101000011101111110111001", 
    87 => "10111101100010100100001111111110", 
    88 => "00111100101100110010011011010100", 
    89 => "00111101111011111101011011011000", 
    90 => "10111101100000111101101000100010", 
    91 => "10111101000110000101101110010001", 
    92 => "10111110000000110001101000001001", 
    93 => "10111110000100000000011011010001", 
    94 => "10111101100010011010000110011111", 
    95 => "00111101100101100101101011111000", 
    96 => "00111101010000010011111011111010", 
    97 => "00111101111010110100100011010100", 
    98 => "10111101011110101111101001110010", 
    99 => "00111101011000010111110000000001", 
    100 => "00111101010101100110110111100110", 
    101 => "10111101010101011010101011111000", 
    102 => "10111101001010101010100010000000", 
    103 => "00111100110011011010100100000000", 
    104 => "10111101010101110010001001110110", 
    105 => "10111110001111000010101111011000", 
    106 => "10111110000110001101011000001010", 
    107 => "10111110000011111001110100101100", 
    108 => "10111101010100100001100111111001", 
    109 => "00111101010001101000100110100010", 
    110 => "10111101101001010010110010011101", 
    111 => "00111101000010111101010010011010", 
    112 => "10111101000000101010111111000011", 
    113 => "10111101100101001001100110101000", 
    114 => "00111100011111010011111011110000", 
    115 => "10111101100011010100110000110100", 
    116 => "00111110000000101000001101001101", 
    117 => "10111100001101110000110001110001", 
    118 => "10111101110101001101010100001111", 
    119 => "00111110000000111000000010001000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_11 is
    component inference_conv2d_f3_1_4_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_11_rom_U :  component inference_conv2d_f3_1_4_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


