-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011101101100101111000100000", 
    1 => "10111101101111001111011100101010", 
    2 => "00111101110101011111110000111011", 
    3 => "10111101101011110010011000101001", 
    4 => "00111010100110001100101100010011", 
    5 => "00111100100000110101101110011111", 
    6 => "10111101100110111110011110000111", 
    7 => "00111100101100010000010100100110", 
    8 => "00111101001101110000110000111011", 
    9 => "10111100000111110110100000111011", 
    10 => "10111101010110100001010010110100", 
    11 => "00111101100101001110110111110110", 
    12 => "00111100110101010110101010010110", 
    13 => "00111101001100001011000001010001", 
    14 => "10111100100110110101101001100100", 
    15 => "00111101000100100000000111110110", 
    16 => "10111100101001100110110000010000", 
    17 => "00111110000100011110100101101100", 
    18 => "10111101111111010100000001101000", 
    19 => "00111110000111101111101111110100", 
    20 => "10111100011101011101001000010100", 
    21 => "00111101001000101100110100111010", 
    22 => "00111101110111100011110010010111", 
    23 => "00111101010011010110100110101011", 
    24 => "10111101110111010101110010111000", 
    25 => "00111101101010111100110111010111", 
    26 => "00111101100100011101010000111110", 
    27 => "10111101110010111101001010101010", 
    28 => "00111110001100010000110011110110", 
    29 => "00111101110001110010111000001101", 
    30 => "10111101000011011110101011011010", 
    31 => "10111101001001101010111011011011", 
    32 => "00111110010001011101110101001100", 
    33 => "10111101001011011000010111100000", 
    34 => "10111100110010000001111111110101", 
    35 => "00111110010000111000111000101010", 
    36 => "10111110001000110110111010110101", 
    37 => "10111100000001111001110100000010", 
    38 => "10111101101000101000001101011011", 
    39 => "10111100100010101100000000011000", 
    40 => "10111101101011001001101011111110", 
    41 => "10111110000001001101000100100000", 
    42 => "00111011110000011011111111101001", 
    43 => "00111110000011110101100110001010", 
    44 => "10111110000100100111011111000100", 
    45 => "10111101010101100010101011001010", 
    46 => "00111110001101010100000000000011", 
    47 => "10111101100010110000100001001001", 
    48 => "00111101111010011001101111110110", 
    49 => "10111011110001001110000110011100", 
    50 => "10111101101111111110011100100110", 
    51 => "10111101011100110111111000101100", 
    52 => "00111100100100110101010001110001", 
    53 => "10111100111111001111111011000100", 
    54 => "00111110000111001111101011110000", 
    55 => "10111110000111000111111000101000", 
    56 => "10111101101011010101101110011110", 
    57 => "10111110000010011110010010010011", 
    58 => "00111101101100101010000110001110", 
    59 => "00111101100000010101001010001000", 
    60 => "10111101010100010011110110101011", 
    61 => "00111110000101101011101010001100", 
    62 => "00111101101001101011110000111010", 
    63 => "00111100100101001011100111001011", 
    64 => "00111110000000001010101001100101", 
    65 => "00111110001011110111110001100111", 
    66 => "00111100001100100010111110010011", 
    67 => "10111100111011101101110101100011", 
    68 => "10111101101100001100101001111011", 
    69 => "10111110001000111001100001100011", 
    70 => "10111101110010001111100100011110", 
    71 => "10111101001010010101000110011110", 
    72 => "10111100010001100000110001010100", 
    73 => "00111110001101011000110011010010", 
    74 => "00111101100100000100101000111101", 
    75 => "00111101000000101100000000000100", 
    76 => "00111101011111011000001100110011", 
    77 => "10111100111101001011011010001011", 
    78 => "10111101000100000101010100110010", 
    79 => "00111100110011010000101100010110", 
    80 => "10111101010010011111100011000010", 
    81 => "10111101000111101010000010111010", 
    82 => "10111101110010101111111110001000", 
    83 => "00111110001000011111001000010011", 
    84 => "10111101101000001100001001000000", 
    85 => "00111101110000010111010100010101", 
    86 => "00111011010101000001101100100000", 
    87 => "10111101111110110101011111000101", 
    88 => "00111101111011000111011111011110", 
    89 => "00111101101000001101100101010001", 
    90 => "00111101101111101110111110100010", 
    91 => "10111110001010101111101100111011", 
    92 => "10111100111011010110110101010110", 
    93 => "00111101100001010110001010000011", 
    94 => "10111101101010001111100001101111", 
    95 => "10111101101001010110000110011111", 
    96 => "10111101000001000101100100101011", 
    97 => "00111100110111011011010101010010", 
    98 => "00111100111101101110011010110001", 
    99 => "10111101001110011100111100010100", 
    100 => "00111101011101101001111111101010", 
    101 => "00111101000110011010111000001100", 
    102 => "10111110000010001010101010000110", 
    103 => "00111101000010010111010000011101", 
    104 => "10111101100011000110000011100111", 
    105 => "00111101011001001101101111010010", 
    106 => "00111011110101111000000110011100", 
    107 => "10111101011010101101101100100101", 
    108 => "00111101100010100111110001110110", 
    109 => "10111101011011001001111010001111", 
    110 => "10111100100110010010111111100111", 
    111 => "00111110000101010111000111010010", 
    112 => "00111100000000111110101110000111", 
    113 => "00111101101101101010000011000001", 
    114 => "00111011011111101000111100111101", 
    115 => "00111101100001101110111101011000", 
    116 => "10111101001101111011000000000101", 
    117 => "00111101101110110101111000101010", 
    118 => "10111100000110010110001011101000", 
    119 => "00111101001010010110000010000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_3 is
    component inference_conv2d_f3_4_4_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_3_rom_U :  component inference_conv2d_f3_4_4_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


