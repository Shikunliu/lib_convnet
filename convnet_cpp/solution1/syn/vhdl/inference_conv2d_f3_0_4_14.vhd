-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001011111000111110001010", 
    1 => "00111101000011100110101010101100", 
    2 => "10111110001000000110111011100011", 
    3 => "00111101011101110100110111111010", 
    4 => "00111110000101000111110111000011", 
    5 => "00111101100111110010001100011110", 
    6 => "00111101110001010001000001110110", 
    7 => "00111101100100111000010101011011", 
    8 => "10111101011011011110101010111111", 
    9 => "00111101011000101001011011001110", 
    10 => "10111101101000010000000010010110", 
    11 => "10111101011100111100001000111010", 
    12 => "00111101110011011010000000010111", 
    13 => "00111101011000000010001010011010", 
    14 => "10111110000000110001001001101111", 
    15 => "10111101111001001000101111101011", 
    16 => "00111110000001100001111001001111", 
    17 => "10111100100111111111111101111010", 
    18 => "10111110001100000010001101100100", 
    19 => "10111101100000110101001011000011", 
    20 => "00111110001101111011110001111111", 
    21 => "10111110001011011110000010010011", 
    22 => "10111110000111010100101001011110", 
    23 => "00111011101110110011111011110000", 
    24 => "00111100000111001011110001001110", 
    25 => "00111101011101100111011101010110", 
    26 => "10111100110101011010101111001110", 
    27 => "00111101100011101010001011111011", 
    28 => "00111101111000100000011100001100", 
    29 => "00111011000000100111111111001101", 
    30 => "10111001011011011101100011110010", 
    31 => "00111101100100101111111011010011", 
    32 => "10111110000000001110000001100101", 
    33 => "10111101011110011100010010110010", 
    34 => "00111101010110110000001101011100", 
    35 => "00111101101110110000010100001001", 
    36 => "00111010000100101111010100111011", 
    37 => "10111101000100001011100000010100", 
    38 => "00111101100100111101110000111011", 
    39 => "10111110001111010101000111111000", 
    40 => "00111101101000000001000110101011", 
    41 => "00111101011100101100111001101111", 
    42 => "00111101001111001100001111010110", 
    43 => "10111101110101010110000110010001", 
    44 => "00111101011110011011101110010011", 
    45 => "00111100010100101001010101100100", 
    46 => "00111101100011001011010110111011", 
    47 => "00111101010011101010110010000110", 
    48 => "00111011110100010011101001110000", 
    49 => "10111100000100101110010110100000", 
    50 => "10111101011010010011100011111001", 
    51 => "10111101101000101111110101110110", 
    52 => "00111101110010101111000101101110", 
    53 => "10111110000011110110000010011110", 
    54 => "10111110001001011101111011011111", 
    55 => "00111100111111101010111100110011", 
    56 => "00111101010100011111111000010100", 
    57 => "10111101001101110001010011101111", 
    58 => "00111101100010110010000001100111", 
    59 => "10111101001111101001010011000110", 
    60 => "10111100111100000001001111000100", 
    61 => "10111101111010101000011011010111", 
    62 => "00111101101010001000100011111000", 
    63 => "10111101110100001011100001001010", 
    64 => "10111101001100001000011011001011", 
    65 => "10111100111011111101101101011010", 
    66 => "10111100100010001101001101000011", 
    67 => "10111101110001001111100010110110", 
    68 => "00111100100111100101010000010011", 
    69 => "00111100001001101011110101101111", 
    70 => "00111100010111111011111100011000", 
    71 => "10111101101110101110001101100001", 
    72 => "10111101110100000100111001100010", 
    73 => "10111110001001110111100000010100", 
    74 => "00111101100111001000011100010010", 
    75 => "10111101011111111100010011011100", 
    76 => "10111101001111010111001111001001", 
    77 => "10111011100010011111011010111001", 
    78 => "10111110000000010110010110010000", 
    79 => "00111110000101100001011000101111", 
    80 => "00111101100011110111100010111100", 
    81 => "10111101100001100110110010100100", 
    82 => "10111101100110111101110010000101", 
    83 => "00111101100011000010111011010101", 
    84 => "10111110000001100101000101101110", 
    85 => "10111101101010101111000111001100", 
    86 => "10111101010000000000011111000010", 
    87 => "10111110000011011100000110100100", 
    88 => "00111101101000111010110101101001", 
    89 => "10111100110001100001100011101001", 
    90 => "00111101011101100110101000011111", 
    91 => "10111110000000110000111100000110", 
    92 => "10111101111101001110100011111011", 
    93 => "00111101011101101101001111010010", 
    94 => "00111010010111101011011100111001", 
    95 => "10111000101000000011000111011010", 
    96 => "10111101001000010000111101000100", 
    97 => "10111101000110010001010010100100", 
    98 => "00111101000000011101010011101100", 
    99 => "00111101101011111000011101001111", 
    100 => "00111110000010111011001111001000", 
    101 => "00111101001110110110001001011100", 
    102 => "10111101100000011000110011111110", 
    103 => "10111101101010111101110110011111", 
    104 => "10111101110010010101001001100111", 
    105 => "00111101100100110110001110001010", 
    106 => "00111101100101101010011011100011", 
    107 => "10111101110000111100101001110101", 
    108 => "00111110000100011001111110000000", 
    109 => "10111110000001100001101001100001", 
    110 => "10111101011000111010110110000100", 
    111 => "10111101101000100110100110001111", 
    112 => "00111101011101001101101101110100", 
    113 => "10111101111111110011101101100100", 
    114 => "00111101010010011000001100110111", 
    115 => "00111110000110010010111011101000", 
    116 => "10111101100101010111001100101111", 
    117 => "10111101111110110001101011110100", 
    118 => "10111101010111010001000110001001", 
    119 => "00111101111001110011101000110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_14 is
    component inference_conv2d_f3_0_4_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_14_rom_U :  component inference_conv2d_f3_0_4_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


