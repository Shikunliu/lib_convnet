-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_97_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_97_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100100001010111100000010", 
    1 => "10111011101110101111110110010111", 
    2 => "00111101011101100101100001100111", 
    3 => "10111110001000111001011111011101", 
    4 => "10111101011101101011111110110000", 
    5 => "10111100100000000011100000110100", 
    6 => "00111101100000011100100111001111", 
    7 => "10111110001001101101011111101001", 
    8 => "00111011101010001010110011000111", 
    9 => "00111100001100010010011101010101", 
    10 => "10111101101100011100010010101100", 
    11 => "00111110000001100000010111101110", 
    12 => "10111101100001111001011100000011", 
    13 => "00111100110100100001110111011010", 
    14 => "10111011110000111110000100000000", 
    15 => "10111101000001010001011110010111", 
    16 => "00111110000011100010100011101101", 
    17 => "10111100101001101101001011010011", 
    18 => "10111101100011010100110101001110", 
    19 => "00111101110101011110000001110010", 
    20 => "10111100101101001001111110101111", 
    21 => "10111100010010101011010100110000", 
    22 => "10111110000011010011001101001100", 
    23 => "10111101101111000011101001011110", 
    24 => "00111101001100010011001001010111", 
    25 => "00111110000010101101100100100111", 
    26 => "00111101101011110000011011101001", 
    27 => "10111100101101010101111111111110", 
    28 => "10111101111010001010010110001011", 
    29 => "00111101110011111100110011100010", 
    30 => "00111110000000101111111101001100", 
    31 => "00111101100100101111100001101101", 
    32 => "00111100000100101100010100101010", 
    33 => "10111101101111111100011100010000", 
    34 => "00111101001011000111110001111011", 
    35 => "00111101001111111011100001100010", 
    36 => "00111101110101100010010000010100", 
    37 => "10111101010011111000101111011111", 
    38 => "10111101110000011111110110110110", 
    39 => "00111101100101000110110101011010", 
    40 => "00111101101101100000111110101111", 
    41 => "10111101011111011111110111000111", 
    42 => "00111101100000111010101111010111", 
    43 => "00111101000011111110010011001010", 
    44 => "00111101100010010010100011101110", 
    45 => "00111101011101010110111001110111", 
    46 => "00111101011010000101111100010100", 
    47 => "00111101000110010111110101100101", 
    48 => "10111101101000101010110111100000", 
    49 => "10111101111110010101001001001100", 
    50 => "00111101010000100101110010011100", 
    51 => "00111110001110010001000011000011", 
    52 => "10111101101000111110001100100111", 
    53 => "10111100001111110100001101110111", 
    54 => "00111101000010011111000001111001", 
    55 => "10111110001100011001111110000000", 
    56 => "10111100100010010101011100101100", 
    57 => "10111101101110111011110111100110", 
    58 => "10111100001100000111111010111000", 
    59 => "00111101101110000010001000011011", 
    60 => "10111101000010000010010010010010", 
    61 => "10111100101111101100101000001010", 
    62 => "10111110000111011001011101110000", 
    63 => "00111101100101111010000001001011", 
    64 => "00111101001000001111100011101111", 
    65 => "00111101101011011011110111101100", 
    66 => "10111110001101100100111111011011", 
    67 => "00111011101101110111011001100100", 
    68 => "10111100010010001000110011001100", 
    69 => "00111101011001101100001111101111", 
    70 => "10111100011110011100011000101010", 
    71 => "10111101011100011111101101000000", 
    72 => "10111100101001001111100110110101", 
    73 => "10111101110010101111001011011000", 
    74 => "00111100100011111110111101100001", 
    75 => "00111101101011000111011001110011", 
    76 => "00111101110100001001100111100001", 
    77 => "10111110000111111101010110001000", 
    78 => "00111101101101000101110111010110", 
    79 => "00111101100101110000001100101010", 
    80 => "00111101100111010000110011000011", 
    81 => "10111101111001000110101011100100", 
    82 => "00111110000010101011000101001111", 
    83 => "10111101001101000010001010010111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_97 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_97 is
    component inference_mult_1_120_120_84_s_W4_97_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_97_rom_U :  component inference_mult_1_120_120_84_s_W4_97_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


