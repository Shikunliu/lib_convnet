-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_56_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_56_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000011010110001010111111", 
    1 => "10111101100011101001110011110100", 
    2 => "10111101101001100000101101100010", 
    3 => "00111110001111100011010100111111", 
    4 => "00111101101100011000100011100111", 
    5 => "10111100010111000100100101000010", 
    6 => "10111100110110001000100111001111", 
    7 => "10111100111001110100100100011010", 
    8 => "10111100011011000001101110110010", 
    9 => "10111101100001001000010011110010", 
    10 => "00111100000001010111111110111100", 
    11 => "00111101110110110001000001110111", 
    12 => "10111100100101010111001010001110", 
    13 => "10111110010011010001100101011001", 
    14 => "10111101111100000001000100001010", 
    15 => "00111010110111110010100011000101", 
    16 => "10111101111101000000110111010100", 
    17 => "10111100100111111101101110011101", 
    18 => "00111101100110011101110110110100", 
    19 => "10111100011111010111101001111111", 
    20 => "10111101110101001111000011011000", 
    21 => "00111011100011011100010010100100", 
    22 => "00111100101100011111101110010000", 
    23 => "00111100001101001111001010111011", 
    24 => "00111101001101011101000010110111", 
    25 => "00111110010010000111110110110011", 
    26 => "10111101100101101011001111010110", 
    27 => "10111100101000010100010001010011", 
    28 => "10111110001101110000101111010000", 
    29 => "00111101111000111000010101000000", 
    30 => "00111100101101111010101011111101", 
    31 => "00111100101100100011110011111111", 
    32 => "00111101010001000110101011111110", 
    33 => "00111101101010101001110001110001", 
    34 => "10111101010011001111110101011001", 
    35 => "00111100111010111010100010010000", 
    36 => "10111101010011111100100100011011", 
    37 => "00111110000011010011111101011011", 
    38 => "10111101000011100100110111010110", 
    39 => "00111011111100011001001111010111", 
    40 => "00111110000100110101111010110111", 
    41 => "00111101111011100101000111010010", 
    42 => "00111100000001110111111001101111", 
    43 => "00111101000110001000001001111000", 
    44 => "00111101010011001110111000001010", 
    45 => "10111110010001000110010100011111", 
    46 => "00111011101110101000100101111110", 
    47 => "10111101011000010000110000011111", 
    48 => "00111101000011011110010000111111", 
    49 => "10111100110001011010011000110010", 
    50 => "00111101100101101001011100101001", 
    51 => "10111101100111000111000100011010", 
    52 => "00111101000000101101111011110010", 
    53 => "00111101110110101110000011000001", 
    54 => "00111101010010100010111000000111", 
    55 => "00111100111011101000010011100011", 
    56 => "10111101101110000100101001010001", 
    57 => "00111101100110101001110100111010", 
    58 => "00111101110100101011010011011001", 
    59 => "00111101001011101110101010110100", 
    60 => "10111010111010000000000010110000", 
    61 => "10111100100011010100011000000100", 
    62 => "00111100101100000101000001100000", 
    63 => "00111011111111000111101001100100", 
    64 => "10111110001001011111010101101010", 
    65 => "00111100001101111101111101101010", 
    66 => "00111101100100111111101010100100", 
    67 => "10111100010001101111010100011100", 
    68 => "10111100001001101011110010011000", 
    69 => "00111101101100011111010101100000", 
    70 => "10111101000011100011101101111101", 
    71 => "10111101001101100100110101001001", 
    72 => "10111101110000111010100010100100", 
    73 => "10111110001010100001010100010010", 
    74 => "10111100111010000111110001010110", 
    75 => "10111101110010000001111100000011", 
    76 => "10111100001001001000100001110110", 
    77 => "10111101001011110111111000111101", 
    78 => "10111101111110110110111101011101", 
    79 => "00111101001000001011110010100100", 
    80 => "00111110001101001011111011000110", 
    81 => "00111110001010100100101000000110", 
    82 => "10111011110101011101011100001101", 
    83 => "10111101001001100111110011010111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_56 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_56 is
    component inference_mult_1_120_120_84_s_W4_56_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_56_rom_U :  component inference_mult_1_120_120_84_s_W4_56_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


