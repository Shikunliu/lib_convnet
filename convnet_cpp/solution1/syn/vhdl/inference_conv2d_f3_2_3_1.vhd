-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111011000101111101101111", 
    1 => "10111101001010100111100110100001", 
    2 => "10111101101010100010011101011110", 
    3 => "10111100111010111010111011011010", 
    4 => "00111100111111100101010010011010", 
    5 => "10111101110100111110111011100101", 
    6 => "10111101000101001011111010000011", 
    7 => "00111101010010011100011011110011", 
    8 => "00111101101010101000011011001010", 
    9 => "00111101111000110111000001001000", 
    10 => "00111100010011100001011110111011", 
    11 => "10111101010000001001001001100010", 
    12 => "10111110001000100011110011001001", 
    13 => "10111101000010010001011100000000", 
    14 => "10111100110110010010101010101001", 
    15 => "00111011101101110111010111111000", 
    16 => "10111101101110000000110000010110", 
    17 => "10111101011110111100000111111101", 
    18 => "00111100011111010011100111101000", 
    19 => "10111110000011011011111101001000", 
    20 => "10111101010110001101010011111110", 
    21 => "10111100101000011001000000001000", 
    22 => "10111101100011011100100110001111", 
    23 => "10111101100110100011011111101111", 
    24 => "00111100110110001011000111011101", 
    25 => "10111101000111011011010101101101", 
    26 => "10111101101000111010110110101100", 
    27 => "10111100100011110011101001100101", 
    28 => "00111101001001010110011010100111", 
    29 => "00111110000011011010011011100111", 
    30 => "00111101101100001101100110000111", 
    31 => "00111100110101001101011011110010", 
    32 => "00111110010000001000101010101101", 
    33 => "10111101100111011101110110100100", 
    34 => "00111110001110001010101010000110", 
    35 => "00111011110001111010101001001110", 
    36 => "00111101110100100000100101101000", 
    37 => "00111101111000000010110010010001", 
    38 => "00111101101110101110001101111011", 
    39 => "00111101101000010001110000110111", 
    40 => "00111100111101001100010000101101", 
    41 => "10111101110110100101000110100000", 
    42 => "00111101011011110000110001111000", 
    43 => "10111110000001011011111000011011", 
    44 => "00111101000000011100010111010011", 
    45 => "00111101110001100011111010101001", 
    46 => "00111101101101101001001101000111", 
    47 => "00111101000010111100011101001001", 
    48 => "00111110000000000001110101011100", 
    49 => "00111101001010010110100001000100", 
    50 => "00111100101010001010011010110011", 
    51 => "10111101101101000100011010000001", 
    52 => "10111100111101010100100111000100", 
    53 => "00111100000101101101010100001110", 
    54 => "00111100000001001110100001000111", 
    55 => "10111110000101101000110100110011", 
    56 => "10111101101010101110000101110000", 
    57 => "00111101100111000101100010111001", 
    58 => "00111100010100110100111110011110", 
    59 => "00111101111011110100011010101010", 
    60 => "10111101100110111001001011011011", 
    61 => "10111101101100010110111111111111", 
    62 => "10111101100101001101010001010011", 
    63 => "10111110000000001011000001101100", 
    64 => "10111101010111000111110111100101", 
    65 => "00111100100000011011001001010010", 
    66 => "00111101001101011100001000100100", 
    67 => "10111110001110100001110100110010", 
    68 => "10111110000111110110001010110111", 
    69 => "10111101110001000001000000001000", 
    70 => "10111101000000001000001100010010", 
    71 => "10111101000111000010110000011011", 
    72 => "10111110001011110011010011010111", 
    73 => "00111100111011101010010101100101", 
    74 => "10111101001001001010110000011100", 
    75 => "00111100100001011100001010111000", 
    76 => "00111110010010001110101001111101", 
    77 => "00111101100110001011110001110101", 
    78 => "10111011100011101011110001110001", 
    79 => "10111101010100110111101110001101", 
    80 => "10111100110010001111101011100110", 
    81 => "10111101111011100100110110100001", 
    82 => "10111110000001010001010111001111", 
    83 => "00111110010010110101100100010100", 
    84 => "00111110001000000110011101001001", 
    85 => "10111101101010000111001100001110", 
    86 => "10111101011001101111010001100001", 
    87 => "10111110000010010001111110110100", 
    88 => "10111011100100110001001011010111", 
    89 => "00111101100010100010101101110101", 
    90 => "10111101111010111010101011011110", 
    91 => "00111101111100000110011110001100", 
    92 => "10111010001100011000111110000101", 
    93 => "00111100111000001100001111111011", 
    94 => "10111101000100001101010010110100", 
    95 => "00111101100111010111010011111110", 
    96 => "00111110001100001101010111101001", 
    97 => "10111100111000110100100010100101", 
    98 => "00111101011101100101000001010100", 
    99 => "10111011101001100011001110000110", 
    100 => "10111100111001000111010101100000", 
    101 => "00111101111110100101111000110101", 
    102 => "00111110001000001111010110100001", 
    103 => "10111101101111110010010001100000", 
    104 => "10111010100010001101100011010111", 
    105 => "00111110000111111101011111100100", 
    106 => "10111110010101110000000111011010", 
    107 => "10111101100110001110010100110001", 
    108 => "10111110000110001011111000101111", 
    109 => "00111110000111101011110100001010", 
    110 => "00111110010001010111000000111111", 
    111 => "00111101111010000011110000101001", 
    112 => "00111101011110010111111101100011", 
    113 => "10111100000101001111101110011010", 
    114 => "10111100110001011000100001101011", 
    115 => "10111100000010011001110100000010", 
    116 => "00111101001111111110101100100010", 
    117 => "10111110000100011110010000101110", 
    118 => "10111101110001000111001110011000", 
    119 => "00111101011111111100110100100101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_1 is
    component inference_conv2d_f3_2_3_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_1_rom_U :  component inference_conv2d_f3_2_3_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


