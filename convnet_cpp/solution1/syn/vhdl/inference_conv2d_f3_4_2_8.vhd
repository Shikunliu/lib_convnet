-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100001111111100011110011", 
    1 => "10111101100001000110101110010010", 
    2 => "00111101101011100001010101010010", 
    3 => "10111110000101011010111110110000", 
    4 => "00111100011111010001001101010001", 
    5 => "00111101100110111111011101101010", 
    6 => "10111101100001000110011111110100", 
    7 => "10111101110111111001101101010110", 
    8 => "10111101000011111011111001101001", 
    9 => "00111100000000000010011001000001", 
    10 => "00111101010011011110010000111111", 
    11 => "00111100111010101100100011001100", 
    12 => "00111101010010100010001101101111", 
    13 => "10111101010100011100010101011010", 
    14 => "10111100111110100101010110011100", 
    15 => "10111110000001010011010110000111", 
    16 => "10111101010001000101000110011110", 
    17 => "00111110010001000011011100111111", 
    18 => "00111110000110000010011010101011", 
    19 => "00111101000100110111111111011010", 
    20 => "00111101000011000101011011010110", 
    21 => "10111101101101101000011101010011", 
    22 => "10111100111000001111110001100100", 
    23 => "10111100001000111111000100001011", 
    24 => "00111101101101010100110101111101", 
    25 => "10111101110011110111001000101110", 
    26 => "00111011010010001100010010101010", 
    27 => "00111100101000101111001100010100", 
    28 => "10111101101001000010100001011011", 
    29 => "00111101110010100111001011011101", 
    30 => "10111110000000110100001000100100", 
    31 => "00111101000011100111000001010110", 
    32 => "10111101000000101000100001010110", 
    33 => "00111101111000010000011110111000", 
    34 => "10111101010000001111001100001111", 
    35 => "00111110001000101001010110100111", 
    36 => "00111110000010010001111101110001", 
    37 => "00111101101111101100010000010000", 
    38 => "10111100111111011101110110110001", 
    39 => "00111101111010111001010011011001", 
    40 => "10111101001010100001111100111110", 
    41 => "00111110000101010010100111111110", 
    42 => "10111110000110010100101010110010", 
    43 => "10111100111000101011111101111101", 
    44 => "00111110000100110111010100000000", 
    45 => "00111100101001111101100011110111", 
    46 => "10111100111010011111111101111000", 
    47 => "00111011110001001101100001110111", 
    48 => "00111100101111111110101111011110", 
    49 => "10111011011110101000100100011110", 
    50 => "00111100010011011011110111111001", 
    51 => "10111101011110000101011001101110", 
    52 => "00111010111110110010101000000010", 
    53 => "00111101000011010010000001111010", 
    54 => "00111101101111111101111111011100", 
    55 => "00111011110110101101000011011100", 
    56 => "00111101010011000101001110110001", 
    57 => "00111101100000011010101100111110", 
    58 => "10111101110000001000000010110110", 
    59 => "00111100101101110001101110001011", 
    60 => "10111101000100111111011011111000", 
    61 => "00111101011100111001101001000110", 
    62 => "10111010100001010100100100101011", 
    63 => "10111110000110010001001111101000", 
    64 => "10111011110110011111010110010101", 
    65 => "00111100110011111001001110111100", 
    66 => "00111110000110000011000010100001", 
    67 => "00111101001010100111101001011101", 
    68 => "10111100001001111011101100110000", 
    69 => "10111101101101010001011110100100", 
    70 => "10111101101001101000001101111111", 
    71 => "00111100111010000110110011010001", 
    72 => "10111100111000001101000000100100", 
    73 => "10111101100101011011110101000100", 
    74 => "10111101011001000110111111101100", 
    75 => "10111101010111101010101110111101", 
    76 => "00111101011110111011010001000001", 
    77 => "10111011101110011010011100101011", 
    78 => "00111100110000000100010001011110", 
    79 => "10111101000011001000100001101111", 
    80 => "10111101101111111100111011000101", 
    81 => "00111100110110001000110111001011", 
    82 => "00111101101111110100011010011101", 
    83 => "00111101010010001110001101001110", 
    84 => "00111101111110011001111101011110", 
    85 => "10111101000101101010101001001100", 
    86 => "10111110000100001000110110001111", 
    87 => "00111110010100001100110110000101", 
    88 => "10111101011001100101100000001001", 
    89 => "10111101111001111111000100110000", 
    90 => "10111101110001110111000010100010", 
    91 => "00111101100010011010000101000001", 
    92 => "10111100110011100101110010000100", 
    93 => "10111110000001010101110010010110", 
    94 => "00111101100101001000011111000111", 
    95 => "10111100010011110011001001101101", 
    96 => "10111110000001010010001101110000", 
    97 => "00111100011011111000010011110011", 
    98 => "10111101101010101011100000111010", 
    99 => "10111100110010001000011111111001", 
    100 => "10111101100011111100111100110000", 
    101 => "00111100111000101110110101101011", 
    102 => "10111101000001111110101001111010", 
    103 => "00111110000011100110110000001001", 
    104 => "00111100000011110001011111000000", 
    105 => "00111100111001011111001010100011", 
    106 => "00111110001010010010010100110101", 
    107 => "10111100101101110111010100010111", 
    108 => "00111101111100101101011011101101", 
    109 => "00111101111111110011110011110111", 
    110 => "10111011000101100110011010110100", 
    111 => "10111011100010011100110001000111", 
    112 => "00111101100110010001001010110011", 
    113 => "00111100010001001101000011101010", 
    114 => "00111101101011101011101000110101", 
    115 => "10111011110010110011111110101111", 
    116 => "10111011001100000100101000001010", 
    117 => "00111110000111101110111111100101", 
    118 => "00111101111001010001011011011011", 
    119 => "00111100000100010110101100000010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_8 is
    component inference_conv2d_f3_4_2_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_8_rom_U :  component inference_conv2d_f3_4_2_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


