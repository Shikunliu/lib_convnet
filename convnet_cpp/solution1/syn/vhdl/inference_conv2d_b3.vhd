-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_b3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_b3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011001100000100000001", 
    1 => "00111101101100011101111001000001", 
    2 => "00111101110010100011011100001011", 
    3 => "00111101110111010010000111111111", 
    4 => "00111101111011110001100010000111", 
    5 => "00111101110010000010100011011110", 
    6 => "00111101110100011110110100011000", 
    7 => "00111101101100000010000000001001", 
    8 => "00111101101100000100001111100101", 
    9 => "00111101110101001011000111101110", 
    10 => "00111101101110111000010011011100", 
    11 => "00111110000000110000100000110101", 
    12 => "00111101111000100100010111110110", 
    13 => "00111101111100101101000100101000", 
    14 => "00111101110110011010011111000001", 
    15 => "00111101111010001100010110000111", 
    16 => "00111101110101010111010011110111", 
    17 => "00111101111110111000000000100100", 
    18 => "00111101101110001001010000100011", 
    19 => "00111101111001000010101001100111", 
    20 => "00111101101011111110101110110110", 
    21 => "00111101101010000101010110111111", 
    22 => "00111101101011011011001011110110", 
    23 => "00111110000001011100101100110110", 
    24 => "00111101101011010001111000000011", 
    25 => "00111101101101011110010011100111", 
    26 => "00111101111001001110100010111000", 
    27 => "00111101110111110011000111110100", 
    28 => "00111101110100011000001110110110", 
    29 => "00111101111000100101001100010001", 
    30 => "00111101111010001010111011111011", 
    31 => "00111101110011100111010011110011", 
    32 => "00111101110100001110110100111110", 
    33 => "00111101110010101001101110001101", 
    34 => "00111101110000100010001111100010", 
    35 => "00111101110111110001100111010110", 
    36 => "00111101110111010100010000010011", 
    37 => "00111101101011111000111101100010", 
    38 => "00111101111000101100001111001010", 
    39 => "00111101111101011010110110010111", 
    40 => "00111101110011110010100001000001", 
    41 => "00111101110010111010101010011011", 
    42 => "00111101110001100100111000111011", 
    43 => "00111101101010001100010001111010", 
    44 => "00111101110011010000101010101010", 
    45 => "00111101110100100111000110111101", 
    46 => "00111101111011001000000011000111", 
    47 => "00111101111001010111110010010001", 
    48 => "00111101111001001101110000100011", 
    49 => "00111101110011010110011001101011", 
    50 => "00111101101110011100111001011000", 
    51 => "00111101110001011000011101101100", 
    52 => "00111101101111111000010101010001", 
    53 => "00111101110000001000000100100010", 
    54 => "00111101111111010111100110001110", 
    55 => "00111101110101000011010100100110", 
    56 => "00111101111000110110100011110001", 
    57 => "00111101101101001100010001100011", 
    58 => "00111101110000010010001011101101", 
    59 => "00111101110101100111111001000001", 
    60 => "00111101101111000111110101111010", 
    61 => "00111101111000110110101110010000", 
    62 => "00111101110100101111000100100100", 
    63 => "00111101110010011101110011111001", 
    64 => "00111101111001000011010101101001", 
    65 => "00111101110011011011011110101110", 
    66 => "00111101110110000111100100111110", 
    67 => "00111101111111001000111110111000", 
    68 => "00111101100100010001001001110111", 
    69 => "00111101101101010101100000100001", 
    70 => "00111101111100010001100000111011", 
    71 => "00111101110011011110100101111101", 
    72 => "00111101101000001011100111110111", 
    73 => "00111101110001010100101111011100", 
    74 => "00111101110100101011001000111010", 
    75 => "00111101110010100110000001110110", 
    76 => "00111101110011101000010110111010", 
    77 => "00111101111101000010111111101000", 
    78 => "00111110000010001110010011111100", 
    79 => "00111101110011000111010000111111", 
    80 => "00111101111001010001011011011011", 
    81 => "00111101110010110011111100000110", 
    82 => "00111101110111100100011100010011", 
    83 => "00111101111000101110100110001010", 
    84 => "00111101101000101101001010010011", 
    85 => "00111101110011001100110011001101", 
    86 => "00111101110010000110010010110001", 
    87 => "00111101110101011011010111111010", 
    88 => "00111101110001010001001110110110", 
    89 => "00111101110100000111101101111000", 
    90 => "00111101110011001100110011001101", 
    91 => "00111101101111111110101100000111", 
    92 => "00111101101011111100111010001111", 
    93 => "00111101110001010100111011100111", 
    94 => "00111101110001001101110110000000", 
    95 => "00111101101000101100100001011010", 
    96 => "00111101110001100111011010100111", 
    97 => "00111101111000111101100010011101", 
    98 => "00111101110101001110111010111111", 
    99 => "00111101110001011111111011000000", 
    100 => "00111101111000000110100101100010", 
    101 => "00111101111100010001010100010110", 
    102 => "00111101110000000011101111111011", 
    103 => "00111101111011001010100110101100", 
    104 => "00111101110110101110101010111000", 
    105 => "00111110000001000110101100100111", 
    106 => "00111101101011011111110100001011", 
    107 => "00111101110001100101001011011000", 
    108 => "00111101111010001100111001110000", 
    109 => "00111101111001011110011011111111", 
    110 => "00111101110010111010010110100000", 
    111 => "00111101110111101110111001010010", 
    112 => "00111101110100001010011001110110", 
    113 => "00111101111101101010000011011100", 
    114 => "00111101110001101101110101101010", 
    115 => "00111101110010101111110011000001", 
    116 => "00111101110000101111001100010100", 
    117 => "00111101111011110100111110010100", 
    118 => "00111110000000101110001111000101", 
    119 => "00111101111001101001100000110101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_b3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_b3 is
    component inference_conv2d_b3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_b3_rom_U :  component inference_conv2d_b3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


