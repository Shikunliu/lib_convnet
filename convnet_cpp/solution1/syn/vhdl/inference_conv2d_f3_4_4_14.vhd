-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100011000000001001010001111", 
    1 => "10111110000111110010111111011100", 
    2 => "10111100011011001010111101010110", 
    3 => "00111100111000010111010110011100", 
    4 => "00111100111010101011101100101010", 
    5 => "00111101110100001001001010001010", 
    6 => "00111101001000011110011010001010", 
    7 => "00111011100010111011011100101110", 
    8 => "00111101001110001110011100000111", 
    9 => "00111110010000010011100010111101", 
    10 => "00111101101111010111110000111010", 
    11 => "00111101110000111010010110001100", 
    12 => "00111110001101101000011110110001", 
    13 => "00111101101110010000000010101010", 
    14 => "10111101010101011010110110110001", 
    15 => "00111101001110100011100000100101", 
    16 => "10111101100100011010101101110100", 
    17 => "10111110001110010011101001110001", 
    18 => "00111011110110100001101001010011", 
    19 => "10111101100001110100000101001010", 
    20 => "10111110001110010010001101100000", 
    21 => "00111101011111111110101111011110", 
    22 => "10111110000100110000000111101011", 
    23 => "00111101100000100000011000011010", 
    24 => "10111101111110000101010110010111", 
    25 => "10111101101011000001101001111101", 
    26 => "00111110000100011100100010101000", 
    27 => "00111101010001000011001001011111", 
    28 => "10111100000000001111010110010100", 
    29 => "10111101010011010000101110110111", 
    30 => "00111101000010110011001000101101", 
    31 => "10111101110100111011101001110111", 
    32 => "10111101000100011111001000100000", 
    33 => "00111100101110111110000110001101", 
    34 => "10111101010011001110100110111110", 
    35 => "00111101001000100000001001101110", 
    36 => "00111101011010001101000100101010", 
    37 => "00111101001010110000110110110000", 
    38 => "10111101101100011101000101011100", 
    39 => "00111011011101000101000110100001", 
    40 => "10111100100110000011110100001110", 
    41 => "10111101110110010010111110110010", 
    42 => "00111011001011110111011010100110", 
    43 => "10111101110100101100110011110111", 
    44 => "10111101011001001000101101100101", 
    45 => "10111101110101110011011111011010", 
    46 => "00111101101101101010111101100010", 
    47 => "10111110000101100011010010011000", 
    48 => "10111100001001010111110111010011", 
    49 => "00111101000011011011011111001001", 
    50 => "10111100110000110010100110110110", 
    51 => "00111101001011111000111000010010", 
    52 => "10111100000110000111100111010100", 
    53 => "10111101101001110001110010111111", 
    54 => "00111101011111110000100100001111", 
    55 => "10111100111101011110110111000011", 
    56 => "10111110001000110010010011001000", 
    57 => "10111110010010100000000111101111", 
    58 => "10111011010111011010001111100000", 
    59 => "00111100110010011001100011010000", 
    60 => "10111110000101111100010110101100", 
    61 => "00111100101000010010100101000101", 
    62 => "00111110010100110010101011010000", 
    63 => "00111110000011111001001110111100", 
    64 => "10111100111010011101011010010011", 
    65 => "00111110000011010000100011010101", 
    66 => "00111110001010011011110010111010", 
    67 => "00111101000101100111010100000111", 
    68 => "00111101101111001110111111100000", 
    69 => "10111011111010101111111111101001", 
    70 => "00111101110110110001011101001000", 
    71 => "10111100100011001111111111111000", 
    72 => "00111011111001100000011110110001", 
    73 => "10111110000111101011011110001001", 
    74 => "00111101100011100110111111010000", 
    75 => "00111101001010000111100001110101", 
    76 => "10111101101000111010110111010101", 
    77 => "00111110010001110100110001001101", 
    78 => "10111101110101110001010111000110", 
    79 => "00111110001100010101000010011000", 
    80 => "00111010011001101111111000011110", 
    81 => "00111100100111001011111010110010", 
    82 => "10111101100101001010100011000001", 
    83 => "00111101001110110001010111010000", 
    84 => "00111101100000010010000110000011", 
    85 => "00111011010100111110010110011011", 
    86 => "10111101010011010110100010111001", 
    87 => "00111110000101010101111010101111", 
    88 => "00111101001100101101111011001010", 
    89 => "00111101110110001111100010100101", 
    90 => "00111100100111100010111111001100", 
    91 => "10111100001010110011010100111000", 
    92 => "00111101010110111011100010101000", 
    93 => "10111101100101001011101100110110", 
    94 => "00111101000010011010100100010001", 
    95 => "10111101011101111010100111110000", 
    96 => "10111110001001001000100011000110", 
    97 => "10111100111101110011011011001110", 
    98 => "00111110000010100101111001111000", 
    99 => "00111101010011110010111000100001", 
    100 => "10111101110110111001010100011100", 
    101 => "10111100011101010001100100011100", 
    102 => "00111101010100011100100100100000", 
    103 => "00111110000110111001111011001111", 
    104 => "00111110000110111011001001111001", 
    105 => "10111101000001011000011011011000", 
    106 => "10111110000110000110010000000010", 
    107 => "00111101001010000001001011011001", 
    108 => "00111011001011111101000010010011", 
    109 => "00111100111000011001111001001011", 
    110 => "10111101011000010011000110001110", 
    111 => "10111001001100100010110101011100", 
    112 => "00111110001111111011011011011101", 
    113 => "00111011110111111111111100000100", 
    114 => "10111101101001010010100111010110", 
    115 => "00111100101001011101010010100110", 
    116 => "00111101010110010110011111100110", 
    117 => "10111101110011000001001110010010", 
    118 => "00111100110110101111110100010001", 
    119 => "10111101011001001100011000111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_14 is
    component inference_conv2d_f3_4_4_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_14_rom_U :  component inference_conv2d_f3_4_4_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


