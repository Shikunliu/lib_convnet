-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100101110011000101110101", 
    1 => "10111101111011011111001001100111", 
    2 => "10111101110100111111110100001101", 
    3 => "00111011100000110011011000010101", 
    4 => "10111101100000101111110011000111", 
    5 => "10111110010000001011010011100001", 
    6 => "00111101111100101001110000110100", 
    7 => "10111100111000001000111110001101", 
    8 => "10111101110001010010100011111111", 
    9 => "00111101101111011010100010111101", 
    10 => "10111100011110110001111000011001", 
    11 => "00111101101000111011110101001100", 
    12 => "10111101101011111111101110011001", 
    13 => "10111101000110110011001011110111", 
    14 => "10111101100111111001000010100100", 
    15 => "10111100111000011000100000010000", 
    16 => "00111101101000011010001111011010", 
    17 => "00111110000100000100010111111110", 
    18 => "00111100110010010110100000101001", 
    19 => "00111101000111101111000101000010", 
    20 => "00111101000011110111000100100010", 
    21 => "10111101110010000111001101111001", 
    22 => "10111101100011011001000101000000", 
    23 => "00111100111111100100110101111000", 
    24 => "00111101100000010111111101101001", 
    25 => "10111100100100001110000011000011", 
    26 => "10111101000011010000001110001001", 
    27 => "00111101100110010101110110111010", 
    28 => "10111100000111101010010100110010", 
    29 => "10111110001011000001010100001001", 
    30 => "10111101100011010001101110001100", 
    31 => "00111100100010000000011010010100", 
    32 => "10111101100110010100111010010011", 
    33 => "10111101011100001001110001100101", 
    34 => "00111101011001100011111100101111", 
    35 => "10111101101111111100111000111111", 
    36 => "10111001000000100011011010010101", 
    37 => "00111101000111010000010010100011", 
    38 => "00111110000011000011100110111101", 
    39 => "10111100101011110000101011100101", 
    40 => "00111101011011001001111110110110", 
    41 => "00111100111111000000101000000111", 
    42 => "10111011011101111000011010110101", 
    43 => "00111101110111100110110011010011", 
    44 => "10111100100000001010000001101111", 
    45 => "10111101110001010001010111011100", 
    46 => "10111011100001101100100100000111", 
    47 => "00111101111110011011011001110000", 
    48 => "00111101111011000010010010000001", 
    49 => "10111101011111110010111001111111", 
    50 => "10111100110011100000000111101100", 
    51 => "00111101100100011100000010111101", 
    52 => "00111100101111000111100100101101", 
    53 => "10111100100011001000011000100000", 
    54 => "10111101001001100111111111000111", 
    55 => "00111101110010011010110100011010", 
    56 => "10111110001001000101010111101011", 
    57 => "00111101101011101100011100101000", 
    58 => "10111101110001001000101000001000", 
    59 => "00111110001011010111001010111101", 
    60 => "10111101010000111011011111100110", 
    61 => "00111101110010000110011000011011", 
    62 => "10111101000001110001010100011000", 
    63 => "00111101100100111011111010000001", 
    64 => "10111101101011010100010011111000", 
    65 => "10111011000110011010010111011001", 
    66 => "00111101000011100000010100010001", 
    67 => "00111100100111000010110001010001", 
    68 => "00111101010011011110001000001011", 
    69 => "00111101100101100110010111111011", 
    70 => "10111100000001010010001110001011", 
    71 => "10111110000000010001010000001010", 
    72 => "10111101101001110100111101001010", 
    73 => "00111101000010100001111100001000", 
    74 => "00111101101100011111110111101100", 
    75 => "00111101110011001011000000111010", 
    76 => "00111101001011111010001000110100", 
    77 => "00111100110011111011110110101101", 
    78 => "10111100010111010111000011110100", 
    79 => "10111110000001101011100110000000", 
    80 => "10111101100111101100111110011001", 
    81 => "00111110000100101101010111100000", 
    82 => "00111101000011010100011000000100", 
    83 => "10111110001101001111111001111010", 
    84 => "10111101010111101001000100110101", 
    85 => "10111010011001101100001111011110", 
    86 => "00111110000000001001111010011001", 
    87 => "00111101100100011010110111010000", 
    88 => "00111100111100111010111010111001", 
    89 => "00111110000100010011110000100101", 
    90 => "10111101110111000001110011100111", 
    91 => "10111101111010011001101101101111", 
    92 => "00111110000010010110110101001100", 
    93 => "00111101100111010100000110101010", 
    94 => "10111101101011011110101110010110", 
    95 => "10111000001001010100001111001010", 
    96 => "00111010111010101010011011010010", 
    97 => "00111101010001111011101001110100", 
    98 => "00111101100001010100101000100010", 
    99 => "00111101010011011001110001010000", 
    100 => "10111100101000111001001101001101", 
    101 => "10111101100111011111011011101001", 
    102 => "00111101100011011001110101011101", 
    103 => "00111110000110110101101100101101", 
    104 => "10111110010001000101101001100000", 
    105 => "00111100100110100001011101101110", 
    106 => "10111100010111000111110101000100", 
    107 => "00111100011001111111011010001001", 
    108 => "10111101101101110000110111110110", 
    109 => "10111100011011010011101101101101", 
    110 => "10111101101011000001001110010010", 
    111 => "00111101100101100001010010110111", 
    112 => "00111010100000110100101111001111", 
    113 => "00111110000001101011100001110011", 
    114 => "00111101111100010010011001100011", 
    115 => "10111101110001100101000111011001", 
    116 => "10111101101011101110101100111010", 
    117 => "00111101111010010000011010001010", 
    118 => "00111110001001000011001101010001", 
    119 => "00111101110110111010010101011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_6 is
    component inference_conv2d_f3_3_4_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_6_rom_U :  component inference_conv2d_f3_3_4_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


