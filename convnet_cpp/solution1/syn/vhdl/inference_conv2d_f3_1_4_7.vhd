-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010001111010101000110011", 
    1 => "00111101001101110101010100110111", 
    2 => "00111101010000000100101101100101", 
    3 => "10111100110101100110110001010011", 
    4 => "10111110010100011111100110101101", 
    5 => "00111110000100110110001110110010", 
    6 => "10111101101110000011111011100011", 
    7 => "00111110001001101100110010100011", 
    8 => "00111100010001000110110110000011", 
    9 => "10111101010010111001111000010011", 
    10 => "00111101001111000101000000101101", 
    11 => "00111100101110010001110111000011", 
    12 => "10111100111001110001010001000001", 
    13 => "00111101101100011001010001100010", 
    14 => "10111110000000101001001101001011", 
    15 => "00111101101010011111011110000000", 
    16 => "00111101011011010000100100011000", 
    17 => "00111101110101001001111010001000", 
    18 => "00111101001011110010110110000000", 
    19 => "10111101000000010011010001111110", 
    20 => "10111101001100100011000110010001", 
    21 => "10111100100010110111111110010000", 
    22 => "10111101001010100011110101010110", 
    23 => "00111101001011111110101100010101", 
    24 => "10111100100011111111011111000101", 
    25 => "00111101111101111111110110000010", 
    26 => "10111100101100011111100111100011", 
    27 => "10111110001000001010011100111111", 
    28 => "10111110000111111110110111101001", 
    29 => "10111101011100000001111001110110", 
    30 => "00111100001111100110110010111000", 
    31 => "00111101100001100101001100101001", 
    32 => "10111110001001010101010001110110", 
    33 => "10111100110100110101010011011100", 
    34 => "10111101101111101111111111010101", 
    35 => "10111101110000101011011011100100", 
    36 => "00111100100010110101000100000001", 
    37 => "00111110000000111110011011000101", 
    38 => "00111110000001111100111010010110", 
    39 => "10111101111000000111100110100011", 
    40 => "10111101100010110100101111000011", 
    41 => "00111100110010011010010110011011", 
    42 => "10111101100001000000100110110000", 
    43 => "10111101000000111101101111111000", 
    44 => "00111101101001111010110101110011", 
    45 => "00111110000000010100000001010111", 
    46 => "10111101111110010011011110001111", 
    47 => "00111110001001011110011110000110", 
    48 => "00111100110010101110000010011001", 
    49 => "10111101100110110101010101011011", 
    50 => "00111110000100001011100000000110", 
    51 => "10111101001000010110010010000100", 
    52 => "00111100000110011111101000010010", 
    53 => "10111110010001101010000001010101", 
    54 => "10111101111110001100110010011010", 
    55 => "10111011110100100000110110111111", 
    56 => "10111110010010011111001011111110", 
    57 => "10111101011011110001101011010101", 
    58 => "10111101100001111110011101111101", 
    59 => "00111101100101110101000110110011", 
    60 => "10111110000110100000110101111000", 
    61 => "00111100101011110111100001011110", 
    62 => "10111101101011110111100000001101", 
    63 => "10111101110011000001001101001111", 
    64 => "00111110000101000101111110011110", 
    65 => "10111011100000100111111001001010", 
    66 => "10111100110000001000101101110110", 
    67 => "00111100100000000011010000000010", 
    68 => "00111110000001000000011000111010", 
    69 => "10111101001001111000000011100011", 
    70 => "10111110001001000111100010000101", 
    71 => "00111101001101011101110110011101", 
    72 => "10111100000010001100010100101011", 
    73 => "10111101100011001111001001100100", 
    74 => "10111100011100100000111100010001", 
    75 => "00111101101100000111101000000000", 
    76 => "10111101111000101001100001000110", 
    77 => "10111101111010100010010101010011", 
    78 => "00111101001111100010110100101101", 
    79 => "00111101100101110001001011001001", 
    80 => "00111101101000101000010001110100", 
    81 => "10111101101001100111001011000110", 
    82 => "10111101101010110011011011100101", 
    83 => "10111100100010000111111011110101", 
    84 => "10111011110000101000010100100000", 
    85 => "00111011011100111010110100001011", 
    86 => "00111101111110010100010010101010", 
    87 => "10111110001110110100001101010010", 
    88 => "10111101011001100111011000000110", 
    89 => "10111101110110000111010100001100", 
    90 => "10111101110010101000000001110010", 
    91 => "10111100111010001110111000110110", 
    92 => "10111101100010101010011001110100", 
    93 => "00111101111110100110010010000000", 
    94 => "10111101110111101000110111011010", 
    95 => "00111100011110110010110100110010", 
    96 => "00111101000111000000011010010001", 
    97 => "00111011100010001001100101101100", 
    98 => "00111110000001111011110111001111", 
    99 => "00111101110100001010001101010001", 
    100 => "00111101111010011000010111110000", 
    101 => "10111110001110000110011010100001", 
    102 => "10111101010010101110010111110010", 
    103 => "00111100110011010100110100100101", 
    104 => "00111101000011010100010110011001", 
    105 => "00111110000110100101010110001111", 
    106 => "10111101010110011000001110010100", 
    107 => "00111011110001101110101110110111", 
    108 => "00111101111100000111111110101010", 
    109 => "00111100101100010110101110110011", 
    110 => "10111100000111111100000110010001", 
    111 => "10111110000000111000000000000010", 
    112 => "00111101001101111111000110101001", 
    113 => "00111100011010001100000010110100", 
    114 => "10111100110110111100110010101111", 
    115 => "10111101011000010001110111110010", 
    116 => "10111010110001001100011001000011", 
    117 => "10111101111111000110110000010010", 
    118 => "00111101101011100101011011000000", 
    119 => "00111100111111011101000100011100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_7 is
    component inference_conv2d_f3_1_4_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_7_rom_U :  component inference_conv2d_f3_1_4_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


