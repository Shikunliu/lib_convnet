-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001110001101100101101", 
    1 => "00111110000001111000010110110110", 
    2 => "00111101110000111100001000101100", 
    3 => "10111101110010111101111001110101", 
    4 => "10111110000111111000100001110110", 
    5 => "10111110001001101011010110010001", 
    6 => "10111101011101000110010000111011", 
    7 => "00111100010101101101010101100100", 
    8 => "00111110000001111010010110110001", 
    9 => "10111100111101100011101011110000", 
    10 => "00111101010100111010001110011011", 
    11 => "00111100001110001111110000110101", 
    12 => "10111101000001011101100000110111", 
    13 => "10111100111001001110010111001000", 
    14 => "10111100110010111011101001111110", 
    15 => "00111110001101010100001011100101", 
    16 => "10111110001011011010000100100011", 
    17 => "00111101110010110100001011100111", 
    18 => "10111101101010101101001111000001", 
    19 => "00111101100111111101001000000101", 
    20 => "00111100111000111010110000001100", 
    21 => "00111010101000111100101101001100", 
    22 => "00111101100101100000100010011011", 
    23 => "10111101110001001101101011100001", 
    24 => "00111101110100010011111010000001", 
    25 => "10111011000000111001011110100101", 
    26 => "10111011100100110000001110111110", 
    27 => "00111101001111011000011111010000", 
    28 => "10111110000001010001111100111111", 
    29 => "10111101000111100000101010010010", 
    30 => "10111101100000101111010110011001", 
    31 => "00111101110111111001011110101011", 
    32 => "00111100101011000010000101011100", 
    33 => "00111110000001001110000111100111", 
    34 => "10111101110010110011110011101101", 
    35 => "10111101101000010011011101010010", 
    36 => "10111101100000100111100111111000", 
    37 => "10111101011010101100000010000011", 
    38 => "00111101101000011001001011000010", 
    39 => "10111101100110100100101101010101", 
    40 => "10111100000011100111001111100001", 
    41 => "00111101010111110010001101000110", 
    42 => "10111101101100011000001100111101", 
    43 => "10111101100000011001101000110100", 
    44 => "10111110000100000111111010011110", 
    45 => "10111101100000111110110101100000", 
    46 => "10111101011010111010110011110111", 
    47 => "00111110000010100010000001011000", 
    48 => "10111101000001111010000000111101", 
    49 => "00111101011011011011000101001001", 
    50 => "00111101001001111001001010000001", 
    51 => "10111101000010100101001111100001", 
    52 => "00111101101101101010011000110101", 
    53 => "00111011111000001010011101110101", 
    54 => "00111110001011111110000011001110", 
    55 => "10111101010000001011001110011111", 
    56 => "00111101010001010010001110100110", 
    57 => "00111101101010010111101110011100", 
    58 => "10111110000100100001011101001100", 
    59 => "00111101100000000101010000001011", 
    60 => "10111101010110110101010010000101", 
    61 => "00111101101001010111011000000100", 
    62 => "10111101010010101001001001100000", 
    63 => "00111100110100011101010111101011", 
    64 => "10111100111001011000111011010000", 
    65 => "00111100001110011000001110101111", 
    66 => "00111101100000001001101100111110", 
    67 => "10111010101011111001101110001111", 
    68 => "00111110001010011011101001011110", 
    69 => "00111101000000111100011000001110", 
    70 => "10111101011010111110111111111000", 
    71 => "00111011101101000010111111110011", 
    72 => "00111101110000001100000001101010", 
    73 => "00111101100100001100011111011100", 
    74 => "10111100100101101111000111101010", 
    75 => "00111100101101100110010100010111", 
    76 => "10111101001100000111101011010111", 
    77 => "10111101100000110011110001100000", 
    78 => "00111101111110010111011110000101", 
    79 => "10111101110100110110111101111110", 
    80 => "00111101000000101001101110000110", 
    81 => "10111100100110011101011010100001", 
    82 => "00111101010001101010100001000000", 
    83 => "10111101000111100100110000000001", 
    84 => "00111101101001001001001010000110", 
    85 => "00111100001000010111010000001110", 
    86 => "00111101100001010010011111110011", 
    87 => "00111101101001100000010010000100", 
    88 => "00111101011001111001011100011110", 
    89 => "00111101111001011010000111001011", 
    90 => "10111101100100101001101001010001", 
    91 => "10111101110101110110100100100011", 
    92 => "10111011101001101011000110011011", 
    93 => "00111101001100111110110110100011", 
    94 => "00111101010000111100001101101110", 
    95 => "00111101101100011110010100100000", 
    96 => "10111110001111100001111100111010", 
    97 => "10111101000001110000101111000011", 
    98 => "00111110000101010001010001111111", 
    99 => "10111101110110010110111110101000", 
    100 => "00111101110100101100011010101100", 
    101 => "00111100011110110001011010001100", 
    102 => "10111101100111000001010011111100", 
    103 => "10111101011001111110000010111010", 
    104 => "00111100100100011101111110010001", 
    105 => "00111011110010110001111110001110", 
    106 => "00111110000101010010100101111000", 
    107 => "10111101111110100111111000110001", 
    108 => "00111101000011001111100101011101", 
    109 => "00111101001101010000100011011011", 
    110 => "00111101111010010011010110111001", 
    111 => "00111110000101000100001111010100", 
    112 => "10111101100110010011111000000010", 
    113 => "00111110000011111001001000101001", 
    114 => "10111110001101111000010110110110", 
    115 => "10111100100110101100010111101010", 
    116 => "10111101101110110001101110110000", 
    117 => "10111101101110100010110111101100", 
    118 => "00111110001011011010001101111111", 
    119 => "10111101010100110101101111001000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_6 is
    component inference_conv2d_f3_0_0_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_6_rom_U :  component inference_conv2d_f3_0_0_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


