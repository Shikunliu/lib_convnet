-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101100000100110111101001", 
    1 => "00111110010001001010011011101100", 
    2 => "10111101010011111101101111111011", 
    3 => "00111101101111011101110111110100", 
    4 => "00111110000011011010110000100110", 
    5 => "10111110000011111011010110001101", 
    6 => "00111101110011110000101101101011", 
    7 => "00111101010100111101101000111101", 
    8 => "10111101010101011010000100011100", 
    9 => "00111101101011100011111111001001", 
    10 => "10111100101100101011001001101111", 
    11 => "00111101111101011011010011101110", 
    12 => "00111100100100011011011001000001", 
    13 => "00111101100011100000101110111001", 
    14 => "00111101110000100111001101111000", 
    15 => "00111110000001000001001001001001", 
    16 => "10111101010110011010110111110001", 
    17 => "00111110001000010011010111011011", 
    18 => "10111101111001101100111000110110", 
    19 => "00111101000010100010101000100101", 
    20 => "00111101101111101000000000111001", 
    21 => "10111100101010011100100101011101", 
    22 => "10111101110001010000010000111110", 
    23 => "10111100000111110000101110001001", 
    24 => "10111101101010110001111011000111", 
    25 => "10111101001111110101111000011010", 
    26 => "10111110000000000110001001001110", 
    27 => "00111101101000111100000110100110", 
    28 => "10111101001001000100100011001111", 
    29 => "10111110000100011010101101001011", 
    30 => "10111101010110001110011111011110", 
    31 => "10111011100010111111111101111101", 
    32 => "10111101001000000101011111111010", 
    33 => "10111110000100010101001110111101", 
    34 => "00111100101101100000101011101001", 
    35 => "00111110001100111000111000101010", 
    36 => "00111101000101101001101011000111", 
    37 => "10111101011010100110010001110010", 
    38 => "10111101010111000001100010110101", 
    39 => "00111101111010100001011010100101", 
    40 => "10111101111000011101100101101111", 
    41 => "00111011100111101000111111111001", 
    42 => "10111101100110011100101110000011", 
    43 => "10111101110010010110011100110111", 
    44 => "00111100010011101011110111010011", 
    45 => "00111101001111011010010000000101", 
    46 => "00111101001101100010111100110001", 
    47 => "00111110000101010101001100100110", 
    48 => "10111110001100111111100011011011", 
    49 => "00111100101110010111101011100000", 
    50 => "00111110000011110010011111111110", 
    51 => "00111101001100010001101100010000", 
    52 => "10111100100011101101001010010110", 
    53 => "00111101000000000100000101010100", 
    54 => "10111100011101011100101101011110", 
    55 => "10111100000010111100110100011101", 
    56 => "00111100110111011100100110101010", 
    57 => "00111100111000111011011000011101", 
    58 => "00111101111011000001101110010111", 
    59 => "10111101110010111000001000010100", 
    60 => "00111101110110001011011000001111", 
    61 => "10111101000001100001000101110111", 
    62 => "10111110000011100110111001100101", 
    63 => "10111010100100011011000100011000", 
    64 => "10111100101010111011111100110110", 
    65 => "00111101111000111001101111001100", 
    66 => "00111101110001110000001101000100", 
    67 => "10111110000001001010111010000110", 
    68 => "10111101101110101100100100101010", 
    69 => "00111100011011010100100110101111", 
    70 => "10111010000001000110100100101000", 
    71 => "10111101001011011010111100110000", 
    72 => "00111101101111111101100001011101", 
    73 => "10111100110000010100111111110111", 
    74 => "00111110000110100011000100011111", 
    75 => "10111110001001111010011100000001", 
    76 => "10111101011100100000100010010001", 
    77 => "10111101100001001011011000100000", 
    78 => "00111101111010100001001101111111", 
    79 => "00111101011000001110001111110110", 
    80 => "10111100101001100111100101111100", 
    81 => "10111101001011000010100110111111", 
    82 => "10111100111000001111010011011000", 
    83 => "00111100001001010110111110010001", 
    84 => "00111101100111001111110100001001", 
    85 => "10111110000011110000011000101101", 
    86 => "10111101100001111011000000000101", 
    87 => "10111101111001100000000110111101", 
    88 => "10111101100100110000001101001000", 
    89 => "10111101100100000101101100011111", 
    90 => "00111100101100000111101101011101", 
    91 => "10111100000011011110000111001011", 
    92 => "00111101110011100100001100100100", 
    93 => "00111110000111001011001011011001", 
    94 => "10111101000001010100001100110110", 
    95 => "10111100110011010110101100100011", 
    96 => "10111101100110000100101111110001", 
    97 => "10111000110000010000100111110011", 
    98 => "00111101100000001001111100111010", 
    99 => "00111110000011101110111101011111", 
    100 => "00111101011110000010010111111100", 
    101 => "00111110000101111111101011100011", 
    102 => "10111110000011100111100011100010", 
    103 => "10111100111001011110111001110001", 
    104 => "00111101101110100011100100001001", 
    105 => "10111101100111011111001110001110", 
    106 => "10111100010011100010010111111110", 
    107 => "00111101110010111100010011100000", 
    108 => "10111101101110110100001110100011", 
    109 => "10111101000101000010010100000000", 
    110 => "10111101110011010011110011111111", 
    111 => "00111110000011010000000101111110", 
    112 => "00111110000011101011100000001111", 
    113 => "10111101100011001001001000101111", 
    114 => "10111110000011111100110101101000", 
    115 => "00111101111111110101010010001111", 
    116 => "10111101110101010010100101111000", 
    117 => "10111011100100100110001011011001", 
    118 => "10111101110101110101110000000111", 
    119 => "10111101011000001101110010011111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_13 is
    component inference_conv2d_f3_3_0_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_13_rom_U :  component inference_conv2d_f3_3_0_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


