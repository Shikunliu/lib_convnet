-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110010111100001111010011", 
    1 => "00111000100011100011100010110101", 
    2 => "10111101101010010110100001010001", 
    3 => "10111100110100000001101100000000", 
    4 => "10111110001101000101010100100010", 
    5 => "00111110000101000011111000010000", 
    6 => "10111101100110100000110000000000", 
    7 => "10111110001001001010010111011111", 
    8 => "00111101010111100001100000110100", 
    9 => "00111101010001111010000000000111", 
    10 => "10111101001001110101101011010011", 
    11 => "00111100001001111010111000101111", 
    12 => "00111101110000110101110011101111", 
    13 => "00111110000000000011111100101101", 
    14 => "00111101111101010010101010000100", 
    15 => "00111101111110001001010110001110", 
    16 => "10111101000001001011010011010000", 
    17 => "10111101000001101110110100100100", 
    18 => "00111101101100111111001010111001", 
    19 => "10111110001000110101010111001110", 
    20 => "10111101001011001101110101000011", 
    21 => "10111011110010000111001100100001", 
    22 => "00111101110000010110011000010111", 
    23 => "00111101101101001101000001100100", 
    24 => "00111101111000010001001010111010", 
    25 => "00111101011011010101111101001001", 
    26 => "10111011010101001101111110010110", 
    27 => "00111010100111000110101010000100", 
    28 => "10111100000101110000101011110100", 
    29 => "00111110001100001000000111000011", 
    30 => "00111101101000100111111010110000", 
    31 => "00111011100011000011011100011011", 
    32 => "10111101110010011011000011111100", 
    33 => "10111110010001110000010010111100", 
    34 => "00111011111100111100011110111000", 
    35 => "10111010110101101011110011100110", 
    36 => "10111101000001111010101101110101", 
    37 => "00111101110110110000110001000110", 
    38 => "00111101101000100010001001011100", 
    39 => "00111101110001011000000111001111", 
    40 => "10111101101010010010110100100000", 
    41 => "10111101101011011000010110000010", 
    42 => "10111100001101001011000110111000", 
    43 => "00111100010010001101011111100000", 
    44 => "10111101011001111100001111111111", 
    45 => "10111101101001110111101011000001", 
    46 => "10111101100000111000011011000110", 
    47 => "00111101011110010010001001000110", 
    48 => "00111100011111010010001110101101", 
    49 => "00111110001000101110111010000101", 
    50 => "00111110000101101011001101111000", 
    51 => "10111100101001000011000010010111", 
    52 => "10111010111010011110111110011101", 
    53 => "00111101011000000100000111011010", 
    54 => "00111100100101010101100011000010", 
    55 => "10111110001000010100111001111111", 
    56 => "00111101000000101111111111111010", 
    57 => "10111101101001010011110011101011", 
    58 => "00111100010000000110010101001011", 
    59 => "00111010101100000101101100100111", 
    60 => "10111110000000110010111000111000", 
    61 => "00111110000010000011001101000000", 
    62 => "00111101010110000011001111101110", 
    63 => "10111100001001110110101000111101", 
    64 => "10111101001010000111000111110100", 
    65 => "10111101011100100000011110000100", 
    66 => "00111101110011101011111011100000", 
    67 => "00111101010010111101001100111101", 
    68 => "10111101001000010001011111111000", 
    69 => "10111101101010011001111111110010", 
    70 => "00111101100000110011110011110100", 
    71 => "00111101101110001000111110010100", 
    72 => "00111110001110010100100011011100", 
    73 => "10111100000001100011100010110100", 
    74 => "00111100100111010010001001010000", 
    75 => "10111101011011000000000110110001", 
    76 => "00111101110001001111010111101110", 
    77 => "00111100001001011011011000001000", 
    78 => "00111101110101011110000001110010", 
    79 => "10111101000010010001001100011111", 
    80 => "00111101101100100010110111001010", 
    81 => "10111101100001101111001101100010", 
    82 => "10111100100000001000011100001110", 
    83 => "00111100111111101011101010111011", 
    84 => "10111110000100001000110111010010", 
    85 => "00111101100001001010000000001101", 
    86 => "00111101011000011110000110110111", 
    87 => "10111101001100010110111011110011", 
    88 => "10111101100101101101100010010111", 
    89 => "10111101110011011100111101000110", 
    90 => "00111101101011100011000110100001", 
    91 => "10111101110110000000011001101100", 
    92 => "10111100111100000100111110001001", 
    93 => "10111101000000110110000011011110", 
    94 => "10111110001001001001000001100000", 
    95 => "10111011111010111000101000100111", 
    96 => "10111110000000111101110110011000", 
    97 => "00111100100001001110101010000000", 
    98 => "10111101100100011011110001010110", 
    99 => "00111100111001011011001110000011", 
    100 => "00111101111000110101001001100101", 
    101 => "10111100101001101111100111010100", 
    102 => "10111110000011110100000100101001", 
    103 => "00111101111000000010100011100101", 
    104 => "10111101000010100000010001100110", 
    105 => "00111100111110001100101111111001", 
    106 => "10111101000010101010111110000110", 
    107 => "10111100000110011100101111011001", 
    108 => "00111100100110011101001101111011", 
    109 => "10111101010111101000010011010110", 
    110 => "00111101101101011011010100100011", 
    111 => "00111101001100001101101001111001", 
    112 => "00111101010100110100110111110000", 
    113 => "00111110000001101000000000010111", 
    114 => "10111101101110101100001011111010", 
    115 => "10111101101100000111011101000111", 
    116 => "00111101101111000000110011110111", 
    117 => "10111100000110011111011110100011", 
    118 => "10111101100001111100101101100011", 
    119 => "10111110010010011101011101110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_7 is
    component inference_conv2d_f3_3_1_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_7_rom_U :  component inference_conv2d_f3_3_1_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


