-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001011001011110111101001", 
    1 => "00111011010001110111111000101110", 
    2 => "10111110001110100010001101111101", 
    3 => "10111011011101000110101010100001", 
    4 => "10111100110000100010001100100110", 
    5 => "00111100110001001001111100000001", 
    6 => "10111101001111011010011010111111", 
    7 => "00111101001011000011100001010010", 
    8 => "10111101101101001010110011100110", 
    9 => "10111100101011010100010111101001", 
    10 => "00111100101001111111110110101011", 
    11 => "00111101111011011100000100011110", 
    12 => "10111101001111100101010010110101", 
    13 => "00111101001101111100001000001110", 
    14 => "10111101001110011011000011111100", 
    15 => "00111101000001000011001100011011", 
    16 => "00111101110001000000101010111100", 
    17 => "10111101001110111101100011110100", 
    18 => "10111101000010111000110011100001", 
    19 => "00111101110010000011110001101101", 
    20 => "10111101101000010001011111010000", 
    21 => "10111110001111001111100100011010", 
    22 => "00111101100001100110000110111100", 
    23 => "10111110001110011000011010111010", 
    24 => "10111110001000101011000101110000", 
    25 => "00111110001110000001101100100010", 
    26 => "00111110000110001101110100011110", 
    27 => "10111110001001001101011000011011", 
    28 => "10111100111000111000101010110100", 
    29 => "10111101100100111110011110110110", 
    30 => "10111100101110001101100011111010", 
    31 => "10111101100001110100110110000010", 
    32 => "10111100000101100111101001100000", 
    33 => "00111101101101101010110000101111", 
    34 => "10111110001010101001001001100000", 
    35 => "00111101101001111011010010110000", 
    36 => "00111100101000110010000100111000", 
    37 => "10111100011001000011101111101010", 
    38 => "10111101000100001011001010100000", 
    39 => "00111101101011100100110111111111", 
    40 => "10111101010101111101110001100000", 
    41 => "00111101100000001111110001100100", 
    42 => "10111100100110000011001100110010", 
    43 => "00111101111010011011000111111011", 
    44 => "00111110001011011110010110001110", 
    45 => "10111101101111111001010101001111", 
    46 => "10111101110100100110101011101100", 
    47 => "10111101110000100100110010000011", 
    48 => "10111101111110111011101011011100", 
    49 => "10111101000111010110100111010011", 
    50 => "00111011000110100001001000001111", 
    51 => "10111101100010010011000100110111", 
    52 => "10111100111100000011110010101001", 
    53 => "10111101100010111110001011000010", 
    54 => "10111100111100010101101101010111", 
    55 => "10111101100100010110101011110111", 
    56 => "10111101100001011011011000001000", 
    57 => "10111101110001010011111111001101", 
    58 => "00111100000001000110000001100010", 
    59 => "10111101010000010010010110110101", 
    60 => "00111101100111010100000001101000", 
    61 => "10111101010110001000011111010001", 
    62 => "00111100011001000101110111100011", 
    63 => "10111100100101111100011101100111", 
    64 => "10111101000110000110000011101010", 
    65 => "10111101100000001011011010011100", 
    66 => "00111101001101111111011100011101", 
    67 => "10111110010001010100100001100111", 
    68 => "10111100101000001000101010111010", 
    69 => "00111101100100001010110001001000", 
    70 => "10111101000100000111001110011011", 
    71 => "10111101001011111101011001101101", 
    72 => "00111100101111101101100011101110", 
    73 => "10111101001111010000010101000100", 
    74 => "10111100111111011000000100110101", 
    75 => "10111011101100111000100011101110", 
    76 => "10111101000110100010100100001100", 
    77 => "00111100011010100010110001011001", 
    78 => "00111101000101110011011110001010", 
    79 => "00111100100001001010010000111111", 
    80 => "10111101011101100011010100010001", 
    81 => "10111100100000010100010111100110", 
    82 => "10111101100101100001110011001010", 
    83 => "00111110001100101110101110100010", 
    84 => "10111101000101011110101000010111", 
    85 => "00111101111001011001110000000110", 
    86 => "00111101011011110001011011110100", 
    87 => "10111101100010100010110001110100", 
    88 => "00111100100001100011011100011100", 
    89 => "00111100100100111011100100011010", 
    90 => "10111101100000000010111100000111", 
    91 => "00111101100110100100101001100100", 
    92 => "00111100110011010100010010001100", 
    93 => "00111101110000110011010010011110", 
    94 => "00111110000100011111000110001101", 
    95 => "10111110000000010001111011001001", 
    96 => "00111110000111000011011101100001", 
    97 => "00111101100110001001110001010001", 
    98 => "10111101101011000100100001010000", 
    99 => "00111101111110010101111101100111", 
    100 => "10111101101001111010001000000101", 
    101 => "00111110000110100011110001100100", 
    102 => "00111100101000100110110010100111", 
    103 => "10111110010000100111001101010000", 
    104 => "00111101011010001011110110101001", 
    105 => "00111100100010101001111100101011", 
    106 => "10111101011010001101110101101111", 
    107 => "10111101000100100110010101000010", 
    108 => "00111100110001011111011010111010", 
    109 => "00111101000011010111110000000100", 
    110 => "00111100101110111111011111111110", 
    111 => "10111101111001101001011100101001", 
    112 => "10111010000110010010101110010011", 
    113 => "10111110001110100100100001110011", 
    114 => "00111110001101000010110110001100", 
    115 => "10111010100010101010101010010011", 
    116 => "00111110001110111000001100000110", 
    117 => "00111101011010111001111111011100", 
    118 => "00111110001010011001110111001011", 
    119 => "00111101100010010111110100111100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_4 is
    component inference_conv2d_f3_2_3_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_4_rom_U :  component inference_conv2d_f3_2_3_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


