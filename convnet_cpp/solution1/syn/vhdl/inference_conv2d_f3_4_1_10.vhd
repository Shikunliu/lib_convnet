-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000110011011101110101110", 
    1 => "00111101000100101001100001010011", 
    2 => "00111100000110110000000011111000", 
    3 => "10111001101110010110010110001001", 
    4 => "10111100101111001111011011001100", 
    5 => "10111101110100110110111101111110", 
    6 => "10111100110100111011101110011111", 
    7 => "10111100101100010000101110100110", 
    8 => "00111110000110101010011001001100", 
    9 => "00111101001011001010010110110000", 
    10 => "00111100111111110001101111010100", 
    11 => "10111100101000010111100010001011", 
    12 => "10111101111111000100010111001100", 
    13 => "10111110000110100000111110010001", 
    14 => "10111100110001001110010110101101", 
    15 => "00111110000001111000000001111000", 
    16 => "00111101010111111010001000100111", 
    17 => "10111110001011111011011100100000", 
    18 => "00111110000100100000011110010010", 
    19 => "00111100000111011100111111001010", 
    20 => "10111101010010010100101010110010", 
    21 => "00111110000011010101101111101110", 
    22 => "00111010111011001110011110011111", 
    23 => "00111101111100101100001110000111", 
    24 => "10111101101100011111000110011010", 
    25 => "10111110001000001100011100111011", 
    26 => "00111101110010101001110001001001", 
    27 => "00111010010001010111001001010100", 
    28 => "10111110000110000000111111011100", 
    29 => "10111101010000100010011000110000", 
    30 => "00111110000100111110001010010011", 
    31 => "00111011110010011101001101110011", 
    32 => "10111101011101010100111001100001", 
    33 => "00111101110101101101001010101010", 
    34 => "10111101110000111101110010100110", 
    35 => "10111101100110111110000001100110", 
    36 => "00111101101011011100100000001010", 
    37 => "10111100100110101011001101110101", 
    38 => "10111101011100100000101110000000", 
    39 => "00111110001000100000010100110110", 
    40 => "10111101011100110110000110001100", 
    41 => "00111100111011011001111000110011", 
    42 => "10111101001010001101001110101110", 
    43 => "10111010100100100000010111111100", 
    44 => "10111101000101110000000011001110", 
    45 => "00111110010110100100001001101100", 
    46 => "10111100101110011000100000010111", 
    47 => "10111101000111000000100000001001", 
    48 => "00111101000110100010111100111011", 
    49 => "10111110000000011100100010101000", 
    50 => "00111101010011001110000001101001", 
    51 => "10111110001000101110011000100001", 
    52 => "00111110001001001000011100110011", 
    53 => "00111110011110101100011001000111", 
    54 => "10111100110001001000000110100101", 
    55 => "10111101000000100011010001110011", 
    56 => "00111101101000100100000110001110", 
    57 => "10111110001000011010110001011000", 
    58 => "10111101100011000111111110100000", 
    59 => "00111101111001100100110010110110", 
    60 => "00111101100101100111001100111111", 
    61 => "00111101111001011100100010010111", 
    62 => "10111110000000011110001100100010", 
    63 => "00111101111000000111101100110101", 
    64 => "00111101101100110100111101011011", 
    65 => "00111101001000111010111100110010", 
    66 => "10111101000000111111001111111011", 
    67 => "00111110000111100000110011100001", 
    68 => "10111101011011111011110111001000", 
    69 => "10111101101100111110001001010000", 
    70 => "10111101100101111111011110010110", 
    71 => "00111101110111000000001000101010", 
    72 => "00111101010111001111101000100111", 
    73 => "00111101010110010101111011000110", 
    74 => "10111010111101110111011101110000", 
    75 => "10111101110110011010100011001110", 
    76 => "10111101110100011011100000100100", 
    77 => "00111101011000011010100010101100", 
    78 => "00111101100100111100101000110010", 
    79 => "10111101110010101010111001011111", 
    80 => "00111101101000110000011001000101", 
    81 => "00111101010110101101111000100010", 
    82 => "00111101101000001000001101010110", 
    83 => "00111101011101110000100000111111", 
    84 => "00111101100110010001110111010001", 
    85 => "00111011001011011101101011101111", 
    86 => "10111101111010010011111000011101", 
    87 => "10111101000010001010000101110100", 
    88 => "00111101011011011111111000100101", 
    89 => "00111110010011101010011100000101", 
    90 => "10111101110010110101010110111001", 
    91 => "10111100001100011010010001010010", 
    92 => "00111011100101111111010000101000", 
    93 => "10111101100001111001011000000100", 
    94 => "00111101110111000100111100111100", 
    95 => "00111100101101110100100110101110", 
    96 => "00111101000001110101011000110110", 
    97 => "00111101000001011010100011101100", 
    98 => "10111101011101101011011001011011", 
    99 => "10111100110010011101011110111010", 
    100 => "10111101111110101001111010110010", 
    101 => "10111100111011010110000100101100", 
    102 => "10111101100101101001111101110001", 
    103 => "10111101001101100010010001111111", 
    104 => "00111101011011010101000100111100", 
    105 => "10111100110001110011011000011111", 
    106 => "00111101100101100011111000100010", 
    107 => "10111101001100100011111110000011", 
    108 => "10111101101101010101001100100110", 
    109 => "10111011111001011110010100001100", 
    110 => "10111100010110100011110000100001", 
    111 => "00111100101110011101100101110101", 
    112 => "00111101010011001110100001111011", 
    113 => "00111101101001000011111011110100", 
    114 => "10111110001101010000010011000101", 
    115 => "00111100101001110011110100100110", 
    116 => "10111101110111101111111110100000", 
    117 => "10111101110010111011000011100110", 
    118 => "00111101110000100111101111101001", 
    119 => "10111101100011101000100101110011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_10 is
    component inference_conv2d_f3_4_1_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_10_rom_U :  component inference_conv2d_f3_4_1_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


