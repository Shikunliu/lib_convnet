-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011101000111100111110000", 
    1 => "00111101111111110011000101101110", 
    2 => "10111101111010001110101000111010", 
    3 => "00111110010000000001100010100100", 
    4 => "10111101110100111111110110010011", 
    5 => "00111101011100000001011100111010", 
    6 => "10111101101100001111100100010111", 
    7 => "00111110001101100110010010010001", 
    8 => "00111110100001111010111110100111", 
    9 => "10111110010000011011101110001100", 
    10 => "10111110001100011100010001110110", 
    11 => "00111101011100101110010011000100", 
    12 => "10111100010101000011101011101011", 
    13 => "10111110001010101000011100011010", 
    14 => "00111100100000000100000110100100", 
    15 => "00111101101011111110011100100110", 
    16 => "00111101100101101000110110000011", 
    17 => "10111011100110111011011101010110", 
    18 => "10111101001000100110101001110011", 
    19 => "10111110010101110110100110101001", 
    20 => "00111010001010110110101111110110", 
    21 => "00111101110100000010101010111011", 
    22 => "10111101011100001001111011001111", 
    23 => "00111101100001010001111100100100", 
    24 => "00111101111001010110100010100101", 
    25 => "10111101100101110100101011110000", 
    26 => "00111110000100000101011011000101", 
    27 => "10111101101001100001000000110101", 
    28 => "00111101001111000111100100101101", 
    29 => "00111101100100111001111000001101", 
    30 => "00111110001100100101111101100011", 
    31 => "10111101100010100110001011100000", 
    32 => "00111110000001101001100111001000", 
    33 => "00111101101101101111010100101010", 
    34 => "00111101100011111111100110101000", 
    35 => "00111110000100001000100110100000", 
    36 => "00111101101010101100111100111111", 
    37 => "10111101111011010011010100100010", 
    38 => "10111101100100111110000101010001", 
    39 => "00111101011011100110011101010001", 
    40 => "00111110001011010000101010101010", 
    41 => "00111101100101001011111110101011", 
    42 => "00111101100010010001110011010010", 
    43 => "00111101101000001111110101001001", 
    44 => "10111110001001100010000011101111", 
    45 => "00111100110101000110100110101111", 
    46 => "00111101010111011111011011110110", 
    47 => "10111101100110110101000111001011", 
    48 => "00111100001000111100010100110111", 
    49 => "00111101111100111011010010110011", 
    50 => "00111110000000110001010111010111", 
    51 => "00111101010010000010110001101111", 
    52 => "10111101001101100010100101010010", 
    53 => "10111101011011001111010100101100", 
    54 => "10111110010101111000011110001011", 
    55 => "10111100110001000100011011101100", 
    56 => "00111101110000010101111011101000", 
    57 => "00111101100110000100101110111100", 
    58 => "00111101000111000001101101010100", 
    59 => "10111101100001000010011111001000", 
    60 => "10111011110101111111110101101101", 
    61 => "10111110011101101100001110111001", 
    62 => "10111110000000011101100100101011", 
    63 => "10111101011010111100100100010001", 
    64 => "10111101111101101110100110111100", 
    65 => "10111101101011011101010101011011", 
    66 => "00111101011001100001011010110101", 
    67 => "10111110000111001110011011000001", 
    68 => "00111101010000001000100101000010", 
    69 => "10111011110001100100101000010001", 
    70 => "10111101100011111101000100000110", 
    71 => "00111101000110101010100011111001", 
    72 => "00111101111100011000110110101100", 
    73 => "10111101100111111010010100100100", 
    74 => "00111100110101110110111110001000", 
    75 => "00111101101001001111001000000000", 
    76 => "00111100100001100111101010100011", 
    77 => "10111110000101000010101000100100", 
    78 => "10111101100001001000101000110000", 
    79 => "10111100110001001100110111111011", 
    80 => "10111011001110011101101100000011", 
    81 => "00111100100111111100101110101101", 
    82 => "00111101100000101010110010011110", 
    83 => "10111101110111001011111011101000", 
    84 => "10111100001000111101110111000000", 
    85 => "00111101001101001110000100011110", 
    86 => "10111101000100011010110000110000", 
    87 => "10111110001101011000010100111000", 
    88 => "10111110000100000100111110110001", 
    89 => "10111110001010001101010110000100", 
    90 => "00111101100000100010000110100000", 
    91 => "00111101101011010010111111110001", 
    92 => "00111101110111000101010100000000", 
    93 => "10111101000110100011100011100001", 
    94 => "00111110001000110000101111100001", 
    95 => "00111101111011010110010101011110", 
    96 => "00111100111110001110101100000011", 
    97 => "00111101110011010100000100110001", 
    98 => "00111011110010011001110111000011", 
    99 => "00111101100111100110101001110111", 
    100 => "00111101100011101010011100010010", 
    101 => "00111101110111000000101000000111", 
    102 => "00111100110110001001111110011111", 
    103 => "10111101010100001010110001010101", 
    104 => "00111101011010010010011110010001", 
    105 => "10111110011000101011101000010111", 
    106 => "10111101001001000010011010000110", 
    107 => "00111100101011001100101111011011", 
    108 => "00111100100101100111111000100110", 
    109 => "00111101100001100000101100011111", 
    110 => "00111101001010111101010010011010", 
    111 => "10111100000010000101110110111101", 
    112 => "00111110001011010010001001000010", 
    113 => "00111100111111000010110000000000", 
    114 => "10111100101011001111101101110110", 
    115 => "10111101001010000001110111011100", 
    116 => "00111101101000000000011111101011", 
    117 => "10111101101010110101001010010100", 
    118 => "00111101000101000010100011000111", 
    119 => "00111101011001001110101100100001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_9 is
    component inference_conv2d_f3_2_4_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_9_rom_U :  component inference_conv2d_f3_2_4_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


