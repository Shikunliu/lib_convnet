-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001011000001101111101", 
    1 => "10111110000010001010111010111000", 
    2 => "10111101100000100011011011101010", 
    3 => "00111011101100001011010010010011", 
    4 => "00111100001000101111111011010011", 
    5 => "10111110000010010000000111010010", 
    6 => "10111101101111011011100110011111", 
    7 => "00111101101001101110010011101001", 
    8 => "10111101100100110111010101111000", 
    9 => "10111101110000001111011110010010", 
    10 => "00111101101001000000110100110011", 
    11 => "10111100101110111001000011010000", 
    12 => "10111101000011010000010011100110", 
    13 => "00111101010111101101111110001001", 
    14 => "00111110001000110111100111111011", 
    15 => "10111101100001010011110001100101", 
    16 => "00111110001010100100010001000001", 
    17 => "00111101001000010011000011010010", 
    18 => "10111101110000101010101001110111", 
    19 => "10111101000110011110011110111000", 
    20 => "00111101011101100001000010101110", 
    21 => "10111101001100111100011110101110", 
    22 => "00111101000010111110101101000000", 
    23 => "00111101100100100010110110111101", 
    24 => "00111100110110010111010101010010", 
    25 => "00111011110100100111111011101000", 
    26 => "00111101111110001111011100010010", 
    27 => "00111100100100000101110001101111", 
    28 => "00111100101000001100100100000011", 
    29 => "10111100111110001011011111010111", 
    30 => "00111101010000111101011100001010", 
    31 => "00111101000110000101100000000000", 
    32 => "10111100101010000010000000001111", 
    33 => "00111100100000001110110100110000", 
    34 => "10111101111100100111001011001001", 
    35 => "00111110000010000100110001101010", 
    36 => "10111101110011011000111011001001", 
    37 => "10111011110011000101010010010111", 
    38 => "00111110001101011101010001100011", 
    39 => "10111101111011010010110010111111", 
    40 => "00111110000000000011110111011110", 
    41 => "00111101111110100110101001000100", 
    42 => "00111100101111111000101111010001", 
    43 => "10111100101101110100011000011101", 
    44 => "00111101111010111111110000100010", 
    45 => "00111101010100001000101111101111", 
    46 => "10111101101100000000001011000111", 
    47 => "10111101000010010010010110101110", 
    48 => "00111101111100110010110101101111", 
    49 => "10111101010101111001110001101001", 
    50 => "00111101100001000111101001001110", 
    51 => "00111101011001100011101010010010", 
    52 => "00111110001011110101111010000101", 
    53 => "00111101101000001101010001010110", 
    54 => "00111110001011110110011000011111", 
    55 => "00111110000000110100001000100100", 
    56 => "10111110000000011000011001010101", 
    57 => "00111101011010101011000010101110", 
    58 => "00111101101010101100111010000011", 
    59 => "00111101110101111000010001100110", 
    60 => "10111101001111110000001111101100", 
    61 => "10111110000011110000001000111111", 
    62 => "10111110001001111010111110100111", 
    63 => "10111101101010101010111100110110", 
    64 => "10111100101010000100111100111111", 
    65 => "00111101111000000000011101010111", 
    66 => "10111100001011010111101000100001", 
    67 => "10111101100110000010001111111110", 
    68 => "00111100110101011010100011011111", 
    69 => "00111101111010111111010001000101", 
    70 => "10111101110010010010111110110010", 
    71 => "10111100110010010001010101010010", 
    72 => "10111110001010000110010111011000", 
    73 => "00111101010001001101010111110011", 
    74 => "00111101000010101010000100101001", 
    75 => "10111101100110111111111110100101", 
    76 => "10111101101101101001100101011100", 
    77 => "10111101010011000000101011101011", 
    78 => "10111110000100100011110010000110", 
    79 => "00111011001110111011010101111000", 
    80 => "00111101001111000001100101110001", 
    81 => "10111101111100100101100110011111", 
    82 => "00111101100000010111101000000011", 
    83 => "10111110000010101000000011010000", 
    84 => "10111110000111100000111001110011", 
    85 => "00111101001111110111110111111010", 
    86 => "00111101000100101101101001111110", 
    87 => "10111101101100010001111111100011", 
    88 => "10111100111110100000101111001010", 
    89 => "00111101110110101110001001010100", 
    90 => "10111101101101011111000100000011", 
    91 => "10111101001111110010100011010101", 
    92 => "10111101111001101101011000010011", 
    93 => "00111101101100111010110010000101", 
    94 => "10111110001010110101001011001010", 
    95 => "10111110000110011101010111100101", 
    96 => "00111101110101001011011000100000", 
    97 => "00111100110000100101000001110010", 
    98 => "10111101000100001000101001011100", 
    99 => "00111100011110010111010011001100", 
    100 => "10111101100101101101101110100001", 
    101 => "00111101110111000011000101011001", 
    102 => "00111100101001110010011100100001", 
    103 => "00111101111011110110010010001100", 
    104 => "00111101100010101011110111111111", 
    105 => "10111101110100000110000101000001", 
    106 => "10111101100011000101011111010101", 
    107 => "00111100010010100101000010000110", 
    108 => "00111101010000101101111001101100", 
    109 => "00111101000111110000010100101110", 
    110 => "10111100000001110001101111001000", 
    111 => "10111010100110111110010111111010", 
    112 => "10111101001110101001101100111100", 
    113 => "00111101000111011110101010110010", 
    114 => "10111100010000001010001000011100", 
    115 => "00111101101010101100010011101011", 
    116 => "00111110000010111001000001100100", 
    117 => "10111101000111110111011000011101", 
    118 => "10111110001010000000011110111100", 
    119 => "10111101000110010110011100101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_11 is
    component inference_conv2d_f3_2_3_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_11_rom_U :  component inference_conv2d_f3_2_3_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


