-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_118_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_118_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101110010101100110001000", 
    1 => "00111110001011001101010001100111", 
    2 => "10111100001111110101101010001001", 
    3 => "10111101001000101001001000010110", 
    4 => "10111110001010111110001000101110", 
    5 => "00111100111001111100001111111111", 
    6 => "10111101101011100010000011011010", 
    7 => "00111110000001101010010100001101", 
    8 => "10111110000000000110011110001100", 
    9 => "00111110010001101100010100001001", 
    10 => "10111110010001101011010010000101", 
    11 => "10111101100000000010011001000110", 
    12 => "10111101100100110111101011010001", 
    13 => "10111101110110111010110100111010", 
    14 => "10111100101111101100001010110011", 
    15 => "10111110000010011100110011111011", 
    16 => "00111101000110000010101110001011", 
    17 => "00111101000010010010101010110111", 
    18 => "10111101111011001001010010110100", 
    19 => "00111110000010100110000000001011", 
    20 => "10111100000011000100011101101100", 
    21 => "10111100110001100010001001011001", 
    22 => "00111101010000100110001100011100", 
    23 => "10111011001101000001010110011100", 
    24 => "10111101010011011001100000011110", 
    25 => "10111101011111110000100111100110", 
    26 => "00111101101110000000100001011101", 
    27 => "00111100011011000001110011110100", 
    28 => "10111110000100111100110101010111", 
    29 => "10111101000011110111111010101000", 
    30 => "00111101110101010101001101101001", 
    31 => "10111101111001110100000010000001", 
    32 => "00111101100111000001010000001010", 
    33 => "10111101111011011010010101010101", 
    34 => "10111010100010100111000100110011", 
    35 => "00111001100011111101000101100110", 
    36 => "00111101001111100110000110011010", 
    37 => "10111100111101011101011110111110", 
    38 => "00111101100111101111110100000000", 
    39 => "10111110000100000001001100100011", 
    40 => "00111100111011100110100010010011", 
    41 => "10111011011100011110010010001001", 
    42 => "00111101001111000001110110100011", 
    43 => "10111101111110101011111100110100", 
    44 => "00111110010110111111010110010100", 
    45 => "00111101010001101010000100011111", 
    46 => "10111101101011101101111010001010", 
    47 => "10111101111100100000000100000100", 
    48 => "10111101111111111001001111111111", 
    49 => "00111100111011101001111110111011", 
    50 => "10111101011101000011100000010110", 
    51 => "10111101000000001101010111101001", 
    52 => "10111101101101000011001100001101", 
    53 => "00111101000101100010111011111100", 
    54 => "00111101100000010100111010001100", 
    55 => "10111110010100010101111011000000", 
    56 => "00111110000100000001111001101001", 
    57 => "10111100111001010110110111100011", 
    58 => "00111101001111001001101000110101", 
    59 => "00111101110001010100000001100001", 
    60 => "10111110011000011000110010100000", 
    61 => "00111100100100110010111101010010", 
    62 => "10111100111101100010000101011010", 
    63 => "10111110001110100110010111001111", 
    64 => "00111101100101100110111100101000", 
    65 => "00111101111100011010110000010101", 
    66 => "10111100110011110000000101011010", 
    67 => "10111101000110110001000001110111", 
    68 => "00111101011100110011110000000010", 
    69 => "10111101101101000100100001111111", 
    70 => "00111101100000010100100000100111", 
    71 => "10111110000101100000111110100001", 
    72 => "10111110001010101101001100100000", 
    73 => "10111101111100110011000000001110", 
    74 => "00111101110111111100001000100010", 
    75 => "00111110001101110111100000010100", 
    76 => "10111101000110001100011111100011", 
    77 => "10111110001110001010101001000011", 
    78 => "00111100100000101100110111011011", 
    79 => "00111110001001000100010000011000", 
    80 => "00111110010011011110001101110110", 
    81 => "00111101111110110100011011111110", 
    82 => "10111100010000100111001101000010", 
    83 => "10111100101101111110010101111111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_118 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_118 is
    component inference_mult_1_120_120_84_s_W4_118_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_118_rom_U :  component inference_mult_1_120_120_84_s_W4_118_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


