-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000111111100011010100101", 
    1 => "00111101000110101000101010010000", 
    2 => "00111110000001010010100101111000", 
    3 => "00111011101010001101111110110011", 
    4 => "00111101111010010101001000001001", 
    5 => "10111101110011101001110001000101", 
    6 => "00111101000000011010101110000001", 
    7 => "00111101110011101111010011100000", 
    8 => "10111101011111001111101001011100", 
    9 => "10111011100110101010100111001111", 
    10 => "00111101111111111100000100010110", 
    11 => "00111101110001011001111110100100", 
    12 => "10111101111000111011010011110110", 
    13 => "00111100000101011010010010001101", 
    14 => "10111110001001011000010110111110", 
    15 => "10111110000101010100001010100010", 
    16 => "00111110000000101101010101011010", 
    17 => "00111101101111101001010110101010", 
    18 => "10111101101001101000010110011000", 
    19 => "00111100010001101011011100001001", 
    20 => "10111100111110110111101100000000", 
    21 => "00111101000110101101111110110101", 
    22 => "00111101000101110101100111101111", 
    23 => "10111101010110100110000010111001", 
    24 => "00111100110100100001110100111001", 
    25 => "00111101101001011100100110001000", 
    26 => "00111110001000110100000010010010", 
    27 => "00111110001000101111010001001001", 
    28 => "00111110010010110100001010001001", 
    29 => "10111101111101000011101011101011", 
    30 => "10111101001100000011100010101101", 
    31 => "00111101001011000111110100011100", 
    32 => "00111110000011101000101001110010", 
    33 => "10111110001110010011110001000111", 
    34 => "00111101110111010000100111100001", 
    35 => "10111101011100110100110101001111", 
    36 => "10111101100111110011100110110111", 
    37 => "00111100011000011001011101011111", 
    38 => "10111101000110000111010011110001", 
    39 => "00111101100110110001110101000010", 
    40 => "10111101101000110110100010010011", 
    41 => "00111101110100100000011101001111", 
    42 => "00111110000000010101000011011011", 
    43 => "10111110000101001011000111101110", 
    44 => "10111011101001101001011001101101", 
    45 => "10111110010010011000011101000000", 
    46 => "10111100010111110001001111110111", 
    47 => "10111100101010100101100010011001", 
    48 => "10111101101001111010011010111101", 
    49 => "00111101000111011001111110111001", 
    50 => "00111101000111001010001001100011", 
    51 => "00111100101000111010000000011000", 
    52 => "00111101111111110000101110101111", 
    53 => "00111101001100010010000111100001", 
    54 => "10111110000011001100000001111011", 
    55 => "10111101100111000010100000101100", 
    56 => "10111101010001110111001110101101", 
    57 => "00111101111000001100101011100110", 
    58 => "10111101110101101110100000101001", 
    59 => "00111101100101010000000010111011", 
    60 => "00111000000101100101111100100110", 
    61 => "00111101110010111101001001100110", 
    62 => "10111110001101010110111001101001", 
    63 => "00111101101100111111111101101001", 
    64 => "00111100110001110011111000011000", 
    65 => "00111100011001001011001000110001", 
    66 => "10111001110111000111101111001010", 
    67 => "00111101111000011010101111010010", 
    68 => "10111110000101000011010111110000", 
    69 => "00111101001101000010110000111101", 
    70 => "00111101101000010110000001010010", 
    71 => "00111101011110011111110111011000", 
    72 => "10111101000000110010101001010111", 
    73 => "00111101101010111001011010101111", 
    74 => "10111101111011111100110101101000", 
    75 => "00111100111110100110011111011011", 
    76 => "00111101110110000111101011010001", 
    77 => "00111101010000011011110010011001", 
    78 => "10111011101001001111010010010111", 
    79 => "10111101111101110110100000010110", 
    80 => "10111100001110000110000010011010", 
    81 => "00111101000010111111101100110001", 
    82 => "00111101000001110010010101110011", 
    83 => "00111101111111000011111110000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_5 is
    component inference_mult_1_120_120_84_s_W4_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_5_rom_U :  component inference_mult_1_120_120_84_s_W4_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


