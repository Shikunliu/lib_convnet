-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_17_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_17_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110100000001101101100000101", 
    1 => "00111110011001110101101001110101", 
    2 => "00111101011000011011110000101101", 
    3 => "10111101110001000001000000111101", 
    4 => "10111100101000001010001101000011", 
    5 => "10111110001000011101001100100100", 
    6 => "10111110001010011101000001100011", 
    7 => "10111011000001110001101100010010", 
    8 => "00111100000100011101011011001101", 
    9 => "10111101111111101110010011100010", 
    10 => "00111101101111111110001000101011", 
    11 => "10111101110101100110001011111110", 
    12 => "00111101111101101000010100010010", 
    13 => "10111100011101101100101110100100", 
    14 => "00111101001000010101101110110101", 
    15 => "00111101000101111100000000010000", 
    16 => "00111110011111000010100110111111", 
    17 => "10111100110101010001010100111011", 
    18 => "00111101110001010100000110111110", 
    19 => "00111101000010001010111000111111", 
    20 => "00111101100111101101011011010101", 
    21 => "00111101011010110001101000101010", 
    22 => "10111110011010010101110001000010", 
    23 => "10111110000110010000110010010001", 
    24 => "00111101101011010111010101011100", 
    25 => "10111100101010000101100000001110", 
    26 => "10111101101001000101110110101101", 
    27 => "10111101111001101110111000110001", 
    28 => "10111110011010010111000011111000", 
    29 => "00111110000010111100000001011101", 
    30 => "00111101010110001111000001011100", 
    31 => "10111010111000100111000111111011", 
    32 => "10111100101101111101001100001011", 
    33 => "10111100101111101010101111011000", 
    34 => "00111110001110101100011101010100", 
    35 => "00111101101100010111110101011110", 
    36 => "00111101101101000010000011000001", 
    37 => "00111110000001110010001101101000", 
    38 => "00111100010101101000010011011100", 
    39 => "00111101010011111101111101010110", 
    40 => "10111110000110011011001010000001", 
    41 => "10111101011110010011111011100110", 
    42 => "00111101100000011010011001111001", 
    43 => "00111101100100001001110111010000", 
    44 => "00111101010101110001011101110100", 
    45 => "00111110010011011000000000011011", 
    46 => "10111110100100001001110100000110", 
    47 => "00111101011010010101001100110000", 
    48 => "00111101011101101110000101110011", 
    49 => "00111101101000001101010101111101", 
    50 => "10111110001001100111010101011000", 
    51 => "00111101111001011000110011010010", 
    52 => "00111101110011101100010110110000", 
    53 => "10111110001001000000110111010100", 
    54 => "00111101011110001001000111000111", 
    55 => "00111100001110111000101101011100", 
    56 => "10111101000110000000101010000011", 
    57 => "00111101101010001101100110000000", 
    58 => "10111101111010001100011100011001", 
    59 => "10111101111010110010101011110001", 
    60 => "00111100000001001010100010111100", 
    61 => "10111101100000000101000000001111", 
    62 => "10111110100010100100010101101111", 
    63 => "00111101100111100101000011010011", 
    64 => "00111101101110010011111110000111", 
    65 => "00111101010001101110010001110000", 
    66 => "00111101010111100011111001011111", 
    67 => "00111101111001101000010001001001", 
    68 => "00111110010011110110001000110000", 
    69 => "10111101101100001001000001100100", 
    70 => "00111101101110110110010100110001", 
    71 => "00111100100001000100101001111101", 
    72 => "10111100101100101110101111100110", 
    73 => "10111100110011000011011111100111", 
    74 => "00111101000101011110001010001011", 
    75 => "00111101110001110000000011011011", 
    76 => "10111101110000110110001000100000", 
    77 => "10111101111111010100010000010011", 
    78 => "00111110010100100001000110001000", 
    79 => "10111101100011100001111110110011", 
    80 => "00111101010101001111001110101101", 
    81 => "00111101111000100101100101011100", 
    82 => "10111101101011111100110111100001", 
    83 => "10111100010111011010000110011100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_17 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_17 is
    component inference_mult_1_120_120_84_s_W4_17_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_17_rom_U :  component inference_mult_1_120_120_84_s_W4_17_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


