-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011101010011100110111101111", 
    1 => "10111101000000011111100000001101", 
    2 => "10111110001011001101100000010010", 
    3 => "10111110001100001111111010001011", 
    4 => "10111100001101111111000111011111", 
    5 => "00111101100110001000000010111101", 
    6 => "00111101011010011010111011010101", 
    7 => "10111101110000100010010111100000", 
    8 => "00111101101101101000101011001001", 
    9 => "00111100000100000111010011011000", 
    10 => "10111100101111001110011010100110", 
    11 => "10111101000100110111110010011010", 
    12 => "10111101111110101110000111001110", 
    13 => "00111100110010010001110010101010", 
    14 => "00111101100101010011110000100010", 
    15 => "00111100011110010100010101100110", 
    16 => "10111011011011000011110001010100", 
    17 => "10111101010110111111010100001110", 
    18 => "00111010111011111101011110010100", 
    19 => "00111101100010100110111000110011", 
    20 => "10111110000010100001000100100011", 
    21 => "10111100111101111000101001000101", 
    22 => "10111110000011101000111111110011", 
    23 => "00111101011101011101000111111001", 
    24 => "10111101111000000111111001011010", 
    25 => "00111110000001100001001100001010", 
    26 => "00111100111011000000100000110001", 
    27 => "00111101010011001110101010101111", 
    28 => "10111100111100111001110000001111", 
    29 => "00111110000101111010101001101001", 
    30 => "00111011100001110010001000011110", 
    31 => "10111101101001001111010101110101", 
    32 => "00111101000010110100000111001101", 
    33 => "10111110000110011100110111000100", 
    34 => "00111101101100111000101010001100", 
    35 => "10111110000000010110110001100001", 
    36 => "00110111001110000100011100010000", 
    37 => "10111100011111011100100010000011", 
    38 => "00111101000001110001110000111001", 
    39 => "10111100100011011111110010101101", 
    40 => "00111101110110101101101110000011", 
    41 => "00111101101110001001010100100010", 
    42 => "00111100011010101100100100110111", 
    43 => "10111110000011111110011000001100", 
    44 => "00111100100001010100110001110000", 
    45 => "10111110000000000011100110101100", 
    46 => "00111101111011001100101010110100", 
    47 => "10111101011000001011011110110110", 
    48 => "10111101111110001011010100000011", 
    49 => "10111101101100110010000000010000", 
    50 => "00111100100001100011111110110101", 
    51 => "10111101101101010010010100111001", 
    52 => "10111101110111101100101110111000", 
    53 => "00111100000000000110111111000111", 
    54 => "00111101110011011011101111100000", 
    55 => "10111110001100110100011111101001", 
    56 => "10111101101000110101000001110101", 
    57 => "10111101100100111100110011111001", 
    58 => "00111101110100110110010110001000", 
    59 => "10111100100011011111010110001100", 
    60 => "00111011001100101001111111111011", 
    61 => "00111101110110111111110011101011", 
    62 => "10111101110001101101101110100001", 
    63 => "10111101010001101111101011111100", 
    64 => "00111101100100000000110001101101", 
    65 => "10111101101011001011010011110010", 
    66 => "10111101100000111100110110110101", 
    67 => "10111110010011010000010000011101", 
    68 => "10111110001100111100011111010110", 
    69 => "10111101011010011011111011111011", 
    70 => "10111101000001111011000000010011", 
    71 => "00111110001000010010101000001111", 
    72 => "10111110000010001111001000010111", 
    73 => "00111101100110111111100011010101", 
    74 => "00111010000101011010110001011000", 
    75 => "00111100010101010011110011011110", 
    76 => "10111101010000001100100100111001", 
    77 => "10111101111011010101000101110010", 
    78 => "10111110000101111011001010001001", 
    79 => "10111100001011101110100111111000", 
    80 => "00111101001100001100010000001000", 
    81 => "10111101111011100001111101111101", 
    82 => "10111101110110000110010001000101", 
    83 => "10111100010111101101011010111011", 
    84 => "00111101011111000010111110010001", 
    85 => "00111100000110101011011101110001", 
    86 => "00111101111110000011111010000101", 
    87 => "00111101100100000010111001001011", 
    88 => "00111110001111001111010010100101", 
    89 => "00111101100001010101110010100011", 
    90 => "00111101011010100010110111101100", 
    91 => "00111101110100011011001111110010", 
    92 => "00111110001010110011010111110100", 
    93 => "00111101111011011100011101101001", 
    94 => "00111101100110101110010001111010", 
    95 => "10111100010100000010101100100110", 
    96 => "00111101000011101110001101000010", 
    97 => "00111101111111000111001001011100", 
    98 => "10111101110100011111011000000001", 
    99 => "10111100101101010110001110001111", 
    100 => "00111100100110000110110110110101", 
    101 => "10111101001000010000001100110101", 
    102 => "10111110010000100001000010111111", 
    103 => "00111101110101100000101001100011", 
    104 => "10111101110000001110110111101100", 
    105 => "00111101000100110000101001001110", 
    106 => "00111101111010100000010111011110", 
    107 => "00111011110111111010100011011101", 
    108 => "00111101010001001101110010001110", 
    109 => "00111110001011111010100000101111", 
    110 => "00111101110111000010101010001000", 
    111 => "00111100110110001000000000101010", 
    112 => "00111110001011010010111101011110", 
    113 => "00111100101101101000110010111010", 
    114 => "10111110000111100111110010001101", 
    115 => "10111101100010011010100011000000", 
    116 => "00111110000010110101011100111111", 
    117 => "00111100101101010001000110001111", 
    118 => "10111100110001011000101101011010", 
    119 => "00111101000101001110100110110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_8 is
    component inference_conv2d_f3_3_4_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_8_rom_U :  component inference_conv2d_f3_3_4_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


