-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111000110000000100100001", 
    1 => "10111100001100011101111010011111", 
    2 => "10111101000010010111110101110010", 
    3 => "10111011111000000111010100001011", 
    4 => "00111110001100100011001110011100", 
    5 => "00111110001011010110111110010111", 
    6 => "00111110001100110010000111100110", 
    7 => "00111011101101011100101110111111", 
    8 => "00111100001100011010010110010100", 
    9 => "10111101011010101101110000110010", 
    10 => "00111101000001001100010011011011", 
    11 => "10111110000010011000110101000111", 
    12 => "10111110000001111000001100010111", 
    13 => "10111101110010111110001001111111", 
    14 => "10111101110100000000110001010010", 
    15 => "10111101111111111110110100100000", 
    16 => "10111101011011100010110101110000", 
    17 => "00111101000010101001101000100010", 
    18 => "00111101101100110100101101000100", 
    19 => "10111101001110010000111111101100", 
    20 => "10111101010010110001111110011110", 
    21 => "10111110000100101001001000111110", 
    22 => "00111101110010110000001110000100", 
    23 => "10111101101011000001111100101000", 
    24 => "00111011001011000101001010101111", 
    25 => "00111101001110111011011000111111", 
    26 => "10111101110111001010101011111100", 
    27 => "00111101010000000011011101000011", 
    28 => "10111101101010011111110000101011", 
    29 => "10111101000011000110010010101101", 
    30 => "10111100010110001001110000001110", 
    31 => "00111110010110011110010001010000", 
    32 => "00111101100010101100110010111010", 
    33 => "00111100101110101010110110110001", 
    34 => "00111011101110110110001111011001", 
    35 => "00111100011000110110111110100111", 
    36 => "00111101000100110100011100011111", 
    37 => "10111101010101001010000011110001", 
    38 => "10111100000001010101011110101110", 
    39 => "00111101110000111000100010101001", 
    40 => "10111101100001000010001110111110", 
    41 => "00111101011010001010101001011110", 
    42 => "00111101101001101000101100001100", 
    43 => "00111101111110111110001100111011", 
    44 => "00111101100111111010011000100011", 
    45 => "00111100010101100101011010111001", 
    46 => "00111100110000111101000000000100", 
    47 => "00111011100010011101100000000110", 
    48 => "00111010101101010101000010000100", 
    49 => "10111101101001101011010111111101", 
    50 => "10111101100100000010101111101111", 
    51 => "10111101010010010000111011101101", 
    52 => "10111110001111100100001110101010", 
    53 => "10111101000011001101100011011100", 
    54 => "00111101001001010010000011101100", 
    55 => "00111101100001010011101001001100", 
    56 => "00111100011101001101001111100111", 
    57 => "00111110000110010110101000100111", 
    58 => "00111101110010111010001111110011", 
    59 => "10111110000010101010010101000000", 
    60 => "10111101111010010011101101111110", 
    61 => "00111110000001001100010110010111", 
    62 => "10111101101110110111000100100101", 
    63 => "00111110000011101110010100100110", 
    64 => "00111101100010110011010000111001", 
    65 => "10111101011101110110110100111010", 
    66 => "00111110000011100100111100110011", 
    67 => "10111101010001101100110110010100", 
    68 => "00111100010001011110100111101111", 
    69 => "00111110000101011100110010000101", 
    70 => "00111101110110110100000000101101", 
    71 => "10111100110100100000110100010011", 
    72 => "00111101011011111011111010111010", 
    73 => "00111110010000100101000111000010", 
    74 => "00111101010001011010101001001001", 
    75 => "00111100101011011010011110100011", 
    76 => "00111110000111011010100111001010", 
    77 => "10111101110000010001010001110101", 
    78 => "10111110000101110000001000011101", 
    79 => "00111101011111010111100101011000", 
    80 => "00111110000000100010001010010010", 
    81 => "00111101100100100111000100001110", 
    82 => "00111101111011111110110101100011", 
    83 => "00111101111100011100111100110101", 
    84 => "00111101111110001111011110011000", 
    85 => "10111100111000100101001111101000", 
    86 => "10111101001010101010000010100011", 
    87 => "10111101111111101101110110001011", 
    88 => "10111101100000100111111001000101", 
    89 => "10111101001101000001000000100011", 
    90 => "10111101010111101011100101111001", 
    91 => "00111101011010111101110001011101", 
    92 => "00111101110101111001001100010100", 
    93 => "10111100110011001001110010010001", 
    94 => "00111101110110101111100111101100", 
    95 => "00111110001010101101110101011001", 
    96 => "00111101101011110101011001100101", 
    97 => "00111101110011111001000100011101", 
    98 => "10111100101001010111100011001011", 
    99 => "10111101101111101111000011110001", 
    100 => "00111100000001100111111101000000", 
    101 => "00111100110100010101110001111111", 
    102 => "10111101111000011010111011110111", 
    103 => "00111101010110011110000010110010", 
    104 => "10111100001001011010100010011100", 
    105 => "10111010000000011001101001101100", 
    106 => "00111101111000011000110101101001", 
    107 => "00111101000001111001011100111001", 
    108 => "00111101100001111101101100011110", 
    109 => "00111100111010000100110100100110", 
    110 => "10111101001111011001010000010101", 
    111 => "00111101110011010001101111111000", 
    112 => "00111101100001101011111011011001", 
    113 => "10111101000000100001001000101001", 
    114 => "10111100011100110001000010011001", 
    115 => "10111101001111010011111111100010", 
    116 => "10111101001110101100001000111110", 
    117 => "10111110010011001010101001110110", 
    118 => "10111101110001010000111010100000", 
    119 => "10111100010100111001111101001111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_12 is
    component inference_conv2d_f3_2_1_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_12_rom_U :  component inference_conv2d_f3_2_1_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


