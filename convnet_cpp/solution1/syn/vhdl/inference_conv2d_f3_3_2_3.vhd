-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010111011011100011001000", 
    1 => "10111101101000011010001011110101", 
    2 => "00111100100111101000010101011100", 
    3 => "10111101001001110010010100001000", 
    4 => "00111100110000001011100111001111", 
    5 => "10111110001001000000001100010101", 
    6 => "10111101001001000011110001010101", 
    7 => "00111011000001100001111111101010", 
    8 => "00111011111100011010100100010000", 
    9 => "10111110001000010100000000010100", 
    10 => "10111101000100100110100111111010", 
    11 => "10111011111110111100010110011110", 
    12 => "10111101110000101100110000111011", 
    13 => "10111010011101101000010100101101", 
    14 => "00111100100001000010111011001110", 
    15 => "10111011011000000100111011100000", 
    16 => "00111101100011111110000101100010", 
    17 => "00111101001111100110011000011101", 
    18 => "10111101101010110010110001110111", 
    19 => "00111100001010000111101000000111", 
    20 => "00111100111001001110010000011011", 
    21 => "10111011111100100010100111101001", 
    22 => "10111101100110000110111000101110", 
    23 => "10111110001110010001101000110011", 
    24 => "10111101111101101100111011111111", 
    25 => "10111101001011100011001101101010", 
    26 => "10111101010011111111111001000101", 
    27 => "10111101010000101011000001100100", 
    28 => "00111101111010011011000011101110", 
    29 => "00111101101001111111100101011110", 
    30 => "00111101111101010000011001010111", 
    31 => "10111101001011001000110010000110", 
    32 => "10111101010110010010011010101101", 
    33 => "00111101011110100001100000101010", 
    34 => "10111101001001111110000110101100", 
    35 => "10111110000011101110110001111101", 
    36 => "00111100100010010010100100111111", 
    37 => "00111101111001000000011011000000", 
    38 => "10111101101111111101001001110000", 
    39 => "10111011101111010011010111010110", 
    40 => "00111101111000101011100001000001", 
    41 => "00111110000010001100100001101001", 
    42 => "10111101100111011001100000011110", 
    43 => "10111101111000010001000100100111", 
    44 => "00111110001111011010011000011110", 
    45 => "00111100101000001010110101010100", 
    46 => "10111110000101100000001001000011", 
    47 => "10111101111110010001110011010010", 
    48 => "10111100111010000101001100000101", 
    49 => "00111110000011001110001000001001", 
    50 => "00111100111100010001010000001010", 
    51 => "00111100101011100000011101000101", 
    52 => "10111101001111101010101101010001", 
    53 => "00111101101011011111011010100110", 
    54 => "00111101001000101000100101000111", 
    55 => "10111101110101011101001111011101", 
    56 => "00111110001001010001100110111101", 
    57 => "00111101010000010011001111000010", 
    58 => "10111101100010101000111001100100", 
    59 => "10111101101010111001101000100101", 
    60 => "10111101110011011100000110100100", 
    61 => "00111101110001010001110001101010", 
    62 => "10111101111101010100100001100111", 
    63 => "00111101001100111100000011000010", 
    64 => "10111110000011000010000000001100", 
    65 => "10111110001001011001011101001110", 
    66 => "10111100010111110100011111111010", 
    67 => "00111101011110111100101101101101", 
    68 => "10111101011000001000001000000110", 
    69 => "10111101001010011100000111010000", 
    70 => "00111101110101111101000111111110", 
    71 => "00111110001101101001101111100001", 
    72 => "00111110010001001010111101001111", 
    73 => "00111011100000000001101110000100", 
    74 => "10111100011001111101100110011001", 
    75 => "10111100100010100100110001010100", 
    76 => "10111101110110101001111000101100", 
    77 => "10111101011110000010111010010101", 
    78 => "00111101100111100100001110111000", 
    79 => "00111101000111110000110101011100", 
    80 => "00111101000111010001100100010101", 
    81 => "10111100000100010101100100001110", 
    82 => "00111101111111100001101100001001", 
    83 => "10111101101010001010111100110001", 
    84 => "10111101010110010010100110000010", 
    85 => "10111100110001001111110000011110", 
    86 => "10111001001001100011011000111110", 
    87 => "10111101111001101100011011011110", 
    88 => "00111101111110110011001100010010", 
    89 => "00111101000110101000011101101011", 
    90 => "00111101101100110100100010100101", 
    91 => "10111110000101100110010011010100", 
    92 => "00111101110101011101100110100001", 
    93 => "10111100110011101001101100000011", 
    94 => "10111101100001111101000101111000", 
    95 => "10111100101011010010111011011000", 
    96 => "10111101010001100111111111111100", 
    97 => "10111100111001010011111111110110", 
    98 => "00111110001100001100010011011111", 
    99 => "10111101100011110000100110110001", 
    100 => "10111101000100000110011111110111", 
    101 => "10111101011000001010110101101111", 
    102 => "10111100110101011100011000000101", 
    103 => "10111110000000000010011100001111", 
    104 => "10111101011111101001000000001110", 
    105 => "00111101110100011100101110001010", 
    106 => "00111101001000111111110100110101", 
    107 => "00111101100010010101111011010100", 
    108 => "10111011010010010001100110001111", 
    109 => "00111110001101001000011101110111", 
    110 => "10111011100110110110111101011101", 
    111 => "00111101100110000001100001101000", 
    112 => "10111101011100001011111011100101", 
    113 => "00111100101010110010101101011101", 
    114 => "10111101001110011111101010110011", 
    115 => "00111101110111001000110100011001", 
    116 => "00111101111010011100110010111000", 
    117 => "10111110001111100001010111001010", 
    118 => "00111011100100011000011011111100", 
    119 => "10111101000100011111100110101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_3 is
    component inference_conv2d_f3_3_2_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_3_rom_U :  component inference_conv2d_f3_3_2_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


