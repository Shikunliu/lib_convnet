-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111011000101001010100100", 
    1 => "00111101101111110110010110001011", 
    2 => "10111101010010101100011101010100", 
    3 => "10111011111111011101011011000101", 
    4 => "10111101011111010100100100000001", 
    5 => "10111011100110111110010001111000", 
    6 => "00111100100010000011011100000110", 
    7 => "00111101101010110000110001111011", 
    8 => "10111110001101111110000101110110", 
    9 => "00111011001111001101110011101011", 
    10 => "00111101100010011111110110000111", 
    11 => "00111110000011101110100010001110", 
    12 => "00111101111110110100001101010010", 
    13 => "00111110010011101000010010101101", 
    14 => "10111100001011101000001100110110", 
    15 => "00111101101000111011001000111100", 
    16 => "10111101100110111011011101011001", 
    17 => "10111101111110101110011100001100", 
    18 => "10111110000101101111000001001010", 
    19 => "00111100110010000100011000100000", 
    20 => "10111101010000010111100101000111", 
    21 => "00111101000010111011001110010010", 
    22 => "00111101001000100100100100011011", 
    23 => "00111101100011111001110100000100", 
    24 => "10111101010000010110101011001111", 
    25 => "10111110001000100110011010111010", 
    26 => "00111100110100100001010110101100", 
    27 => "00111101111100111001100011101001", 
    28 => "10111101100000111000100110001101", 
    29 => "10111101000000000011111111110111", 
    30 => "00111101010111011001101100011011", 
    31 => "10111101101011110101011100101110", 
    32 => "10111100110100101001101010100010", 
    33 => "00111101110100010011011100101010", 
    34 => "10111100111110110110000100110101", 
    35 => "00111101101010000110111011110111", 
    36 => "00111101000010110110101101010011", 
    37 => "10111110001001110000010001111001", 
    38 => "00111101111001001001110100111001", 
    39 => "10111100100000010000101011111000", 
    40 => "00111101101111000110111101101101", 
    41 => "10111101011101000000001101110010", 
    42 => "00111110000101011010010001101010", 
    43 => "10111110011101010110110001010001", 
    44 => "00111110000010100001110000100110", 
    45 => "00111101101001110011100111011000", 
    46 => "00111101000001011000000001110011", 
    47 => "10111100011100010110100010001110", 
    48 => "00111100100001010011100001001110", 
    49 => "00111101101101111001100001101101", 
    50 => "00111101001101111000111011111101", 
    51 => "10111101101100101010101010111010", 
    52 => "10111101000000110101011100000010", 
    53 => "10111101100010110011111100000110", 
    54 => "10111101001101100110011111101100", 
    55 => "00111101110111000101011110011111", 
    56 => "00111101101000010000001010100010", 
    57 => "10111110001100111011011111011000", 
    58 => "00111110001010100100110010100101", 
    59 => "00111101000100100101000111110111", 
    60 => "10111011011011111010111000100011", 
    61 => "00111101110100100010111100100111", 
    62 => "00111110001011001010011111010110", 
    63 => "00111101110010010000101100011001", 
    64 => "00111100111000110000011100110110", 
    65 => "10111101111111010101100110010010", 
    66 => "00111101101111000000001111110010", 
    67 => "00111011111111011111000001000110", 
    68 => "10111101000010110000110100101010", 
    69 => "00111101011101111000101000101011", 
    70 => "00111101110000111001100110011000", 
    71 => "10111101001011010011001111100000", 
    72 => "00111110000100010111000000001101", 
    73 => "10111101100100011110001000100011", 
    74 => "00111100010101001010011100100001", 
    75 => "00111101010010010010011011110000", 
    76 => "10111010001011101100111101101001", 
    77 => "00111101010001110000000011011011", 
    78 => "00111101100001100001110000110111", 
    79 => "00111101100101101010000111110110", 
    80 => "00111101000110001101100011000100", 
    81 => "10111101101100110010011101011010", 
    82 => "10111110000000100011100111100111", 
    83 => "00111101100010010100111001111000", 
    84 => "10111101100011000011111110001111", 
    85 => "10111100011101111011100100001010", 
    86 => "10111101010100101000101110100011", 
    87 => "10111101000011110001101000011010", 
    88 => "10111101001101101000111111011111", 
    89 => "00111101010011010100001001011000", 
    90 => "10111101000000100001011110000010", 
    91 => "10111101110110111100001101000000", 
    92 => "10111101010010100011110110100110", 
    93 => "10111100010000001100010011101100", 
    94 => "00111110001101100100001110001001", 
    95 => "10111011001001001010000011011111", 
    96 => "10111110000100001100101110110000", 
    97 => "00111110000100011100000011001010", 
    98 => "00111101110000001110011101010001", 
    99 => "00111101111100010010110000101000", 
    100 => "10111110000100100110110110001011", 
    101 => "00111110001100111010001000010110", 
    102 => "00111100111110001011100110111011", 
    103 => "00111101110111111100010011000001", 
    104 => "10111101000001011100101010110000", 
    105 => "00111101111101101010111100000100", 
    106 => "00111110000100110101000110011100", 
    107 => "00111101100010010100110110111100", 
    108 => "00111101101000111000001110111011", 
    109 => "00111100111010011000010100110101", 
    110 => "10111100000000101000010111101100", 
    111 => "10111011100001000010011100101100", 
    112 => "10111110000010001010000101011010", 
    113 => "00111101110100111010000001000000", 
    114 => "10111110000010101010010111000110", 
    115 => "10111101100110001111011011110111", 
    116 => "00111110011010010001111000100001", 
    117 => "00111101110001010011011011001001", 
    118 => "00111101101110111111010111001010", 
    119 => "00111101010101000110001000100010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_1 is
    component inference_conv2d_f3_2_1_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_1_rom_U :  component inference_conv2d_f3_2_1_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


