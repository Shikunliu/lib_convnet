-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011001111101010001000000", 
    1 => "10111101110110001100111000101101", 
    2 => "00111101000100001011000110010100", 
    3 => "10111101010011011111110001111000", 
    4 => "00111101100110001100010010111101", 
    5 => "00111101100010010111000100101101", 
    6 => "10111101110011111100111011111011", 
    7 => "10111110000110100100010010000101", 
    8 => "10111101111100000101100101100100", 
    9 => "10111101111101101100111011111111", 
    10 => "10111100011001101010001001100001", 
    11 => "10111101110011001111011000111000", 
    12 => "00111101001011000110110110110010", 
    13 => "10111110001101010000110001011111", 
    14 => "10111011110011101001010010111001", 
    15 => "10111101101100010000110000101100", 
    16 => "10111101100011110001000000110001", 
    17 => "10111101000110000001101110000000", 
    18 => "10111101001010001010110111010100", 
    19 => "10111100010001101001101011101111", 
    20 => "10111101100100001100111010111010", 
    21 => "00111100111000001011001010010011", 
    22 => "00111100110010001001110000011011", 
    23 => "00111101011100011110010000101110", 
    24 => "10111101110111001111010101101111", 
    25 => "00111101100110101010110111100110", 
    26 => "00111100100101001000000000011111", 
    27 => "10111110000110011101011000101000", 
    28 => "10111101000100100011100110100100", 
    29 => "10111001000010100000111110001110", 
    30 => "10111100111001110000010101011101", 
    31 => "00111101001100010111010000110001", 
    32 => "10111100100100010010011001100011", 
    33 => "10111100010110110000010100001001", 
    34 => "00111100110111011110001101110110", 
    35 => "10111100110111111100111100111110", 
    36 => "10111100010010001010100001111011", 
    37 => "00111110000111111110101111010001", 
    38 => "10111101111111111001100000110001", 
    39 => "00111100101101100101110111000000", 
    40 => "00111110001110000110011101101010", 
    41 => "10111100101011110001111000110000", 
    42 => "00111011100100101010001001011010", 
    43 => "10111101111001101010001110111110", 
    44 => "00111101000110000101001011000010", 
    45 => "00111101100001010111011010100101", 
    46 => "00111110001100010001010100010110", 
    47 => "00111110010100111101001000001111", 
    48 => "00111101100101000000110111010100", 
    49 => "10111101001111001111010001111101", 
    50 => "10111101100010000101001101111110", 
    51 => "00111101000111010101010100101011", 
    52 => "00111110000011110010110111000011", 
    53 => "10111110011001001011000010011111", 
    54 => "00111101111010111011101000010011", 
    55 => "10111101100011001001011111100110", 
    56 => "00111101111110010101011001111110", 
    57 => "00111101101111000000010001000011", 
    58 => "10111110001011101110111101011111", 
    59 => "10111110010001101011101110011001", 
    60 => "10111101111010100101010100001000", 
    61 => "10111101110110100011000100011111", 
    62 => "00111100010010000101010101101111", 
    63 => "00111101001001111010111110100111", 
    64 => "00111110010011101010100111100111", 
    65 => "00111101100111100101011000010010", 
    66 => "10111110000000001100100001000111", 
    67 => "10111101010100011011010111110000", 
    68 => "10111101100011111100001000000111", 
    69 => "10111101101110001101111000101011", 
    70 => "00111101111010100110100101111011", 
    71 => "00111101010110110010110100110010", 
    72 => "10111101010000010100110100111101", 
    73 => "10111101110100101010010010011000", 
    74 => "00111101010010000011101101101110", 
    75 => "10111101100001100100011101001111", 
    76 => "00111110000101010111010010110100", 
    77 => "10111011010111101101000000000101", 
    78 => "10111011110000011100100011001101", 
    79 => "10111100011010101000100100001011", 
    80 => "00111010101011010110000001110110", 
    81 => "10111101010111101100101101001101", 
    82 => "00111110001111101101011010111011", 
    83 => "00111101101100010010100110110001", 
    84 => "00111101111101011001010111111111", 
    85 => "10111101110001101110011010110001", 
    86 => "10111100101101100110110000000011", 
    87 => "10111101100000001000110111000100", 
    88 => "10111101101010111010011000001100", 
    89 => "10111100101010011011011110001001", 
    90 => "00111101111001101011111001111011", 
    91 => "10111110001101111100101101110001", 
    92 => "00111101001100111111010100010101", 
    93 => "00111101100101011001111011000000", 
    94 => "00111110001001100100100010000100", 
    95 => "10111011101100010010011101010101", 
    96 => "00111101111011101001100010011010", 
    97 => "00111100001011001001111001011001", 
    98 => "00111101010010101111101000010100", 
    99 => "10111101100111111111101011101010", 
    100 => "00111110010100010101011101101001", 
    101 => "00111101000111001010101001110110", 
    102 => "10111101101110111100011110110100", 
    103 => "00111101111011001010010011110100", 
    104 => "00111101100110100011100110011101", 
    105 => "00111110000111101010110001000011", 
    106 => "00111101101111001101110111010111", 
    107 => "00111110001100010110011011100000", 
    108 => "10111110001110001010100001101101", 
    109 => "10111101111001000111110000110001", 
    110 => "00111011010101110001111000110100", 
    111 => "10111101100100001000101010010010", 
    112 => "00111100101000000110000111010101", 
    113 => "00111110011000000110111001011101", 
    114 => "00111100111001110010100000101101", 
    115 => "10111011110011100110101111011110", 
    116 => "00111100011010111111111110011000", 
    117 => "10111101111011001001111110110110", 
    118 => "00111101100110011101000011001111", 
    119 => "00111101100101111010000001001011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_11 is
    component inference_conv2d_f3_0_1_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_11_rom_U :  component inference_conv2d_f3_0_1_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


