-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001011110010001111011010", 
    1 => "10111101101110101011111011010110", 
    2 => "10111011000101101010100001001110", 
    3 => "10111011001011011001000001110001", 
    4 => "10111101101101111000101011011001", 
    5 => "10111101111010101100011011001110", 
    6 => "00111101001111100100010001110100", 
    7 => "10111100100100111100000101001000", 
    8 => "00111100100110100010010100010000", 
    9 => "00111101100001110110111011100111", 
    10 => "10111101101010011101011110101101", 
    11 => "00111101000001011010010110101100", 
    12 => "00111100111001100011011011001011", 
    13 => "00111110010010100110101010000111", 
    14 => "10111101110000110010111111110011", 
    15 => "00111101010000101111100010111110", 
    16 => "00111100100001010011010101011111", 
    17 => "00111101000100111011110110111000", 
    18 => "10111101001010110011100010010011", 
    19 => "10111110000110110101110001111101", 
    20 => "00111101101101110101110111111000", 
    21 => "00111100011011101000011001011011", 
    22 => "10111110000010011000010100100111", 
    23 => "00111101000111111111110011011011", 
    24 => "10111110000001101010011110101101", 
    25 => "00111101111111110101000101101001", 
    26 => "00111110001010100010001011110111", 
    27 => "00111101110101011001000101000111", 
    28 => "00111101101101111011001100000010", 
    29 => "10111100110101111010011111110010", 
    30 => "10111101011011101100011001101100", 
    31 => "10111110010111010110111000000101", 
    32 => "00111101010111011001110010101110", 
    33 => "00111100100010100110001000100100", 
    34 => "10111101100110001011101111100001", 
    35 => "10111100001000000100011101001000", 
    36 => "00111110001010101101011001000101", 
    37 => "10111110001100010110001010101110", 
    38 => "00111110000100000100110000000110", 
    39 => "00111110000011000010001000100101", 
    40 => "10111101011000010000111100101001", 
    41 => "00111110001001011111001100001110", 
    42 => "10111110000111000001100001110010", 
    43 => "00111100111111100100000110111010", 
    44 => "00111110010101011011101010110010", 
    45 => "00111100100111011010000011111011", 
    46 => "00111101001100001001100101110110", 
    47 => "00111100001110000110010001100000", 
    48 => "00111101100111010000101101110100", 
    49 => "00111110000011100001001011101000", 
    50 => "10111101110100111000010001110111", 
    51 => "00111110000100111010110011010110", 
    52 => "00111101011010111101010110100111", 
    53 => "00111110000110001101101001111111", 
    54 => "00111101000100000100001100101001", 
    55 => "00111101111000110000011101101100", 
    56 => "10111100011010100001110110101011", 
    57 => "00111101110100100011010111111000", 
    58 => "10111101111100011100000100001101", 
    59 => "00111101110000101111100000111000", 
    60 => "10111011001110110000110001011011", 
    61 => "00111101101001011100100001010100", 
    62 => "10111110000000001011100000000110", 
    63 => "10111110000011110011000010100101", 
    64 => "00111110000010010001001011011100", 
    65 => "00111100100110010000011100000010", 
    66 => "10111101110101000110111001001100", 
    67 => "00111110010100100011111111101110", 
    68 => "10111101010101000011010101011100", 
    69 => "00111100110100101111101001111001", 
    70 => "10111101100010100011111011000000", 
    71 => "10111110001010100010111100000110", 
    72 => "10111100000100110001111001001011", 
    73 => "10111101010111101000100100000111", 
    74 => "00111110000111000100000001001010", 
    75 => "00111100110100011000010000100001", 
    76 => "00111110000000100011011101001000", 
    77 => "00111011100110011110101011111000", 
    78 => "00111101001100001111101110110110", 
    79 => "10111101110011100011111111111111", 
    80 => "10111101001101101011010001110111", 
    81 => "00111101001011110011010110101101", 
    82 => "10111101000110100111111010011100", 
    83 => "00111101111100111100001011011011", 
    84 => "00111100111010001000001011010110", 
    85 => "00111110000000100111110110001001", 
    86 => "10111101110010100001100000101010", 
    87 => "10111101110001010100001101111001", 
    88 => "00111011110110100111101011110110", 
    89 => "10111100100000100101000101001001", 
    90 => "00111011001111001111010111101010", 
    91 => "10111101110111111111001111110001", 
    92 => "00111101000111100100100000000100", 
    93 => "10111101010000101110110111110001", 
    94 => "10111101111000010111101100001111", 
    95 => "10111110011001001011100001111100", 
    96 => "00111101111000001011000010101111", 
    97 => "00111100011011100100000001001111", 
    98 => "00111101100110101000000001010111", 
    99 => "00111101101010011111100111000001", 
    100 => "00111101010111100111100100010111", 
    101 => "10111110000011001011100011100001", 
    102 => "10111101001101001110001010010110", 
    103 => "00111100110110000101000000100011", 
    104 => "00111101000010001101010111111101", 
    105 => "00111110000000110000110011101101", 
    106 => "10111101100100101111010111101001", 
    107 => "10111110000000110111010101000011", 
    108 => "10111110001110010001010001101110", 
    109 => "00111100111001100000001001011110", 
    110 => "00111101101110010101001000010110", 
    111 => "10111011010001000011001001110100", 
    112 => "10111101110001111111110011111100", 
    113 => "00111110001111100001011110100000", 
    114 => "00111101110000110111110101010110", 
    115 => "10111101110001110010000001101011", 
    116 => "10111100111000010101100101001100", 
    117 => "00111101111001111011000111000000", 
    118 => "00111101111111100011110100011101", 
    119 => "10111101110010000110110011000011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_8 is
    component inference_conv2d_f3_1_2_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_8_rom_U :  component inference_conv2d_f3_1_2_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


