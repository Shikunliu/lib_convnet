-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011101110100111100011001101", 
    1 => "00111101110111100101000100001001", 
    2 => "00111101110101110110101100111100", 
    3 => "10111011011111000101111101100010", 
    4 => "00111110000111011111110100100110", 
    5 => "10111100110010110010000101100111", 
    6 => "10111101110110001101010001111000", 
    7 => "00111101101000011111110111101100", 
    8 => "00111101101011110100011001001100", 
    9 => "10111110000001000001101010101100", 
    10 => "10111101000100100110011001101010", 
    11 => "10111110001111011000101000010001", 
    12 => "00111110000010000100100001111100", 
    13 => "00111100101010010001010001100001", 
    14 => "10111110000000111000100011101100", 
    15 => "10111101110101111110111001001110", 
    16 => "00111101100010011101110100101110", 
    17 => "00111101100111011001100100000011", 
    18 => "00111101111011001001010010110100", 
    19 => "00111110010011101011110101001101", 
    20 => "00111100101101001111101010110100", 
    21 => "10111101110010110100110111011100", 
    22 => "10111100100100101100001110111101", 
    23 => "10111101011001100001010100001000", 
    24 => "10111101110101010111011000000100", 
    25 => "00111101101001110010001011010100", 
    26 => "10111100111111100110110110001110", 
    27 => "10111100010001111101000101010000", 
    28 => "10111101110001110100000000111110", 
    29 => "00111101000110010011001000000000", 
    30 => "10111101000001100101110101100010", 
    31 => "10111101101011100101010010110101", 
    32 => "10111110010000110110101110010000", 
    33 => "00111101011001101100000001111001", 
    34 => "10111011100011010111110111010111", 
    35 => "00111101101010011000101011101100", 
    36 => "00111101110100100000101110000000", 
    37 => "10111011010000011111110010001111", 
    38 => "10111101101010000000110101100101", 
    39 => "10111101010000010011110101001101", 
    40 => "10111101111000100010100010011001", 
    41 => "10111101000010000011101100111000", 
    42 => "00111101101100110110001010110011", 
    43 => "10111101011100011000100000000011", 
    44 => "00111101000101101110001101010110", 
    45 => "00111100100000000011010000000010", 
    46 => "00111101111000110101001111111000", 
    47 => "10111101101000011010001100111000", 
    48 => "00111101010001110111101100000100", 
    49 => "00111101001101110011000101110101", 
    50 => "00111101001110010010111101000110", 
    51 => "00111101111010000101010101010100", 
    52 => "10111101010111110000000111101110", 
    53 => "00111101101111000100010110110001", 
    54 => "00111101101000110010011011100001", 
    55 => "00111100000100001001001000011110", 
    56 => "10111011101010011001001101110111", 
    57 => "10111101100011101011110111111011", 
    58 => "00111101110010010000010111110110", 
    59 => "10111100111010000110101111000100", 
    60 => "00111101110100100111111011011000", 
    61 => "00111100101010101011111010000101", 
    62 => "10111101010101000101010110101000", 
    63 => "10111011000101000111001010111110", 
    64 => "10111101000001110100011001111011", 
    65 => "10111110001100010110000011011001", 
    66 => "00111101101000000111000100110010", 
    67 => "00111011110100010011100001101100", 
    68 => "00111101111001000000001010001110", 
    69 => "00111101110000011011101010101000", 
    70 => "10111101100100011110100011100110", 
    71 => "10111101001001011110110000001000", 
    72 => "10111101000111100100010000100011", 
    73 => "10111100110100111001011000010101", 
    74 => "10111110001011111111011011010011", 
    75 => "00111110000110110011100000001101", 
    76 => "10111100101010010010100111000101", 
    77 => "10111101100100110001111101100010", 
    78 => "10111101100111000011010100101101", 
    79 => "00111101000110001011011101010001", 
    80 => "00111101101100100101010111011000", 
    81 => "10111101011111101110100010101001", 
    82 => "10111100110100101010011001100000", 
    83 => "00111100000000111111000011100110", 
    84 => "00111110000001000100101000011111", 
    85 => "00111101010100010010010010110110", 
    86 => "00111100001100111001110110111100", 
    87 => "10111110000110111010001001111011", 
    88 => "10111110001001010010011001010010", 
    89 => "00111101100101110110000011110101", 
    90 => "10111101010000101110100001000111", 
    91 => "10111101100000011101110110100000", 
    92 => "00111101010110001011100110000101", 
    93 => "10111101100010100011000011011011", 
    94 => "00111101010101011100001011111011", 
    95 => "00111101111101110000111101111100", 
    96 => "00111101110010111110110000001010", 
    97 => "00111101101001111101011011111001", 
    98 => "10111101001000011000011010011000", 
    99 => "10111101001100111000100101001010", 
    100 => "00111011101111101011010010011100", 
    101 => "00111101110001111010100101011101", 
    102 => "00111101100011001111100100101000", 
    103 => "00111101010011010000111010001100", 
    104 => "10111101110110100110000011010100", 
    105 => "10111101000000000011110100000111", 
    106 => "00111101100111110101011001110010", 
    107 => "00111101100110110100011100011001", 
    108 => "00111110010100101111111000111111", 
    109 => "00111101110001011011111000110101", 
    110 => "10111100100000010011110001000000", 
    111 => "10111100101010001101110000101101", 
    112 => "00111101110111110010010101011111", 
    113 => "10111100010011010110010101111001", 
    114 => "10111101000101010011100011111101", 
    115 => "10111101110111011111101010000111", 
    116 => "00111101011100111001111100110100", 
    117 => "00111101110001001010100111101001", 
    118 => "00111101001100110111001001010011", 
    119 => "00111100011101001100011000010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_15 is
    component inference_conv2d_f3_3_1_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_15_rom_U :  component inference_conv2d_f3_3_1_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


