-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000001100000010101101000", 
    1 => "10111101010010111110001000111100", 
    2 => "10111100000100011010010010100011", 
    3 => "00111101101110011101100111101110", 
    4 => "10111101011100000010101011010110", 
    5 => "10111101000101011011011100100001", 
    6 => "00111110000101100101000101101110", 
    7 => "10111110010010011000010010100001", 
    8 => "10111110000000011101111111111100", 
    9 => "10111101011001010010110110000001", 
    10 => "00111110000110000100101101011110", 
    11 => "10111101010011000110000000101011", 
    12 => "10111101100001001111100010000000", 
    13 => "00111110000001101001011011100110", 
    14 => "10111101001110111100100101101111", 
    15 => "00111101010101010001001010110111", 
    16 => "10111110000110000001001101000101", 
    17 => "00111110000111010001110011000001", 
    18 => "10111101101110000101001001110010", 
    19 => "00111101001100011100111001111001", 
    20 => "10111100010110001011011011100110", 
    21 => "00111101101110010000000110110111", 
    22 => "00111101100011110101110010101111", 
    23 => "00111110010011010001000011110101", 
    24 => "00111100011000111011111010000001", 
    25 => "00111101001111111000000100111010", 
    26 => "00111101011010101111000101100000", 
    27 => "10111101000101011001110001100100", 
    28 => "00111100101000001100101110111101", 
    29 => "10111101110111011001011011101010", 
    30 => "00111101010000111100000010110101", 
    31 => "00111101010110001001100100011110", 
    32 => "00111101101011111100111110001110", 
    33 => "00111011110001110011010110001001", 
    34 => "10111100100010101000100011110000", 
    35 => "00111101111011001010110001001011", 
    36 => "00111110010010110110000100110101", 
    37 => "10111101110110011001101000100000", 
    38 => "10111101110011010010110000111000", 
    39 => "00111101111011001111001010001100", 
    40 => "00111101001001000101101000111000", 
    41 => "10111101010000100010001110010001", 
    42 => "00111101010011001010010100101010", 
    43 => "10111001011000010001001010011001", 
    44 => "00111011010010110100100011101001", 
    45 => "00111011101011011101101101110000", 
    46 => "10111100110001110110110010100110", 
    47 => "10111101110110001011011100011100", 
    48 => "00111110000001001010011101110010", 
    49 => "00111101011000010100101100111111", 
    50 => "10111110001110101110101110000001", 
    51 => "10111101101101011001110100100000", 
    52 => "10111100100110000100101110111100", 
    53 => "10111100111100000110000010000101", 
    54 => "00111101010011111010000011010111", 
    55 => "10111101000011101010001011000110", 
    56 => "10111101100000100110110110001011", 
    57 => "00111101010110001111000110111001", 
    58 => "00111100011110110011101000110011", 
    59 => "10111100011100011000011110010111", 
    60 => "00111100011100100111011010101011", 
    61 => "00111110010100000111101000101001", 
    62 => "00111011100011111011110001100001", 
    63 => "00111101100011011001111101011011", 
    64 => "00111110001000001011110110001000", 
    65 => "00111110001010100110010101001001", 
    66 => "10111101011011100111100111000110", 
    67 => "00111011000001100101011001110001", 
    68 => "10111110000100101110000010100000", 
    69 => "10111100110100011011111011011010", 
    70 => "10111110010101001111110011100111", 
    71 => "00111101001111011111001011111010", 
    72 => "00111101101110101111000000011110", 
    73 => "10111110010101011110101111111011", 
    74 => "00111101101010100100010110101100", 
    75 => "00111101100000100110000111011010", 
    76 => "00111101010001001110110001001001", 
    77 => "10111100110111010101100011010110", 
    78 => "10111101010000011111011010110000", 
    79 => "00111101100111101001110110100010", 
    80 => "00111110000111101000101010110101", 
    81 => "10111101110000000001110011100011", 
    82 => "10111101111111111110000010001011", 
    83 => "00111101000010100001101001101011", 
    84 => "10111100100000110011111100011010", 
    85 => "10111101010111000111010001011010", 
    86 => "10111110000011001000111010101100", 
    87 => "00111100001101111100011001000000", 
    88 => "10111101000100110100111110111001", 
    89 => "00111110000111001101100000010010", 
    90 => "10111101111101100001001001000000", 
    91 => "00111101100010011101110111001111", 
    92 => "10111101111001011100000010111010", 
    93 => "10111011101011000111111000100011", 
    94 => "00111101101011011101111001101101", 
    95 => "10111101100001110111101000100000", 
    96 => "00111101110001010001111111000101", 
    97 => "10111101101001010011010010100011", 
    98 => "10111101100110011011001011010001", 
    99 => "00111101110011010010111001010001", 
    100 => "00111101110100100100100011011000", 
    101 => "10111101010011100110010000101100", 
    102 => "00111011011010111111110001101000", 
    103 => "10111110001111011101100001110011", 
    104 => "10111011111000011110100011010011", 
    105 => "10111100110111000001111110000110", 
    106 => "10111101100010011000100111011111", 
    107 => "10111101000110011000100101110100", 
    108 => "00111110000110011101101010011101", 
    109 => "00111100111010110110000011010111", 
    110 => "00111100111111110010111110001011", 
    111 => "10111100101110000110110101100101", 
    112 => "10111101101101111111100001000100", 
    113 => "00111110010000111101111110110001", 
    114 => "10111101001100101011011110101110", 
    115 => "00111101011101011101111000111110", 
    116 => "00111100101100111100001001101111", 
    117 => "00111101111000100100110101001101", 
    118 => "00111110001011000100100101110111", 
    119 => "10111101010101000001010011000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_1 is
    component inference_conv2d_f3_2_2_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_1_rom_U :  component inference_conv2d_f3_2_2_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


