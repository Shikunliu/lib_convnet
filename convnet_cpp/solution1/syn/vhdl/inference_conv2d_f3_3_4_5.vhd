-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100110111001100011001000", 
    1 => "10111101001110101110101111111010", 
    2 => "10111100000100110110010100100010", 
    3 => "00111101110001011110011010000111", 
    4 => "00111101001100101101000110010100", 
    5 => "10111101011011111010011100100010", 
    6 => "00111110001010100101101000000100", 
    7 => "00111110000001110110000110001001", 
    8 => "00111100111001000101101100101001", 
    9 => "10111101011111011010001001110011", 
    10 => "10111110001010000001011000100111", 
    11 => "10111101100110100111110110011101", 
    12 => "00111101111101101111100001101010", 
    13 => "10111100011110100001110010010001", 
    14 => "10111011111000000011011010100001", 
    15 => "10111110010011100010011000001011", 
    16 => "10111010010000001010001011110011", 
    17 => "10111101110000111010001101011000", 
    18 => "10111101110111100001011001010001", 
    19 => "00111100101011011000000111100100", 
    20 => "00111110001111011110011011011110", 
    21 => "10111101001000110100000111101111", 
    22 => "00111101111001000011010001011101", 
    23 => "00111101011111000101001001111100", 
    24 => "10111101000000111001101101100000", 
    25 => "00111101100110110001110011100100", 
    26 => "10111101011000100000100100001010", 
    27 => "10111101000010001100000011001111", 
    28 => "00111101001110001100010000000001", 
    29 => "10111101011001101001110011010010", 
    30 => "10111101000011000110001000001110", 
    31 => "10111110010010010111101001101000", 
    32 => "10111101110000100111110000101100", 
    33 => "10111101101111000001010111010011", 
    34 => "00111100000101000010111111101110", 
    35 => "10111100110001101110011010100100", 
    36 => "00111101101001010100001000110111", 
    37 => "00111101100101010001111110001111", 
    38 => "00111101011101001010011100111100", 
    39 => "10111101111001010001011111100111", 
    40 => "00111101101010001000110000010000", 
    41 => "00111011001000101111111101110100", 
    42 => "10111110001111001001100101101011", 
    43 => "10111101100011100101011111011010", 
    44 => "10111100000100000000001110111001", 
    45 => "10111011111101100111110101100000", 
    46 => "00111101100100111000010001001111", 
    47 => "00111011010000100010111010111001", 
    48 => "10111110000100000110011101001001", 
    49 => "00111101100110010010100111100000", 
    50 => "00111101101010010101000010111001", 
    51 => "10111101110011001011001000011101", 
    52 => "00111110001001001011000000011000", 
    53 => "10111110000011101011001100010100", 
    54 => "00111101011111111001010010111011", 
    55 => "00111101111011100001000101010110", 
    56 => "10111101100010011110110101111100", 
    57 => "00111101110111000010000010010010", 
    58 => "10111101110001001100001110001100", 
    59 => "10111110000111001001010111000000", 
    60 => "10111110000100100001011110001111", 
    61 => "10111110001100110100001011101110", 
    62 => "00111101010000001111001111100110", 
    63 => "00111100010101100100101101100110", 
    64 => "10111101000101110010110101000011", 
    65 => "10111101010101111000111001110111", 
    66 => "00111101101110010100010011111011", 
    67 => "00111101110000111111011111001111", 
    68 => "10111100100000011100000110100001", 
    69 => "10111101111001100000100100010100", 
    70 => "10111101110111111000011011100100", 
    71 => "00111110001010000010011001100111", 
    72 => "00111101011100100110110101110000", 
    73 => "10111101111011010000000100111011", 
    74 => "10111101001110001100000111001110", 
    75 => "00111110000000001011100100010011", 
    76 => "10111101110100100100100111100100", 
    77 => "00111101100000000110011011011110", 
    78 => "00111101111110110001110110010011", 
    79 => "00111011111101111011100101110101", 
    80 => "10111100110100000001101101101100", 
    81 => "10111101000010010111110110001101", 
    82 => "00111101100010111010010011111111", 
    83 => "00111101001011111010010000110010", 
    84 => "00111110001110001100111010110011", 
    85 => "00111100000011111111110110100100", 
    86 => "10111110000100100011100011011010", 
    87 => "10111101000100111100001110010111", 
    88 => "10111101111001001010100000111011", 
    89 => "10111101100011011110001011010100", 
    90 => "00111100111010000101001010011010", 
    91 => "00111100111100111000100101100101", 
    92 => "00111101100101111101111110010011", 
    93 => "00111100100111101000110100011110", 
    94 => "10111010100000101111110011110101", 
    95 => "00111100111111110100010100100101", 
    96 => "10111101101010011110110101100010", 
    97 => "00111110001011000111000100001101", 
    98 => "10111101100010010010101111000011", 
    99 => "00111101001011100001111001110001", 
    100 => "00111100110111111011001011101110", 
    101 => "10111110001001111000110110010011", 
    102 => "10111101100001110110011101101000", 
    103 => "00111100111111111100101111111110", 
    104 => "10111100110001001101101011111011", 
    105 => "10111110010010000101110110110111", 
    106 => "00111101001111000011000110001111", 
    107 => "10111100101010010011000110111101", 
    108 => "00111010000011110001110001111001", 
    109 => "00111101101010101000101111111010", 
    110 => "10111110000101011100111010011110", 
    111 => "00111101100111010001110010011001", 
    112 => "00111101100000011010011110111011", 
    113 => "00111110000111000000101010001101", 
    114 => "10111101011011011100101111010000", 
    115 => "10111101110001110101001001111101", 
    116 => "10111101100000000111101110000110", 
    117 => "00111101101111001110010011000011", 
    118 => "00111101110001001111111100000000", 
    119 => "10111101000111010111111101101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_5 is
    component inference_conv2d_f3_3_4_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_5_rom_U :  component inference_conv2d_f3_3_4_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


