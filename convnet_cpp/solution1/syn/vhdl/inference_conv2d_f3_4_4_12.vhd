-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110010000100110101011100", 
    1 => "10111110010100001110000010101000", 
    2 => "00111110000000101111010101010110", 
    3 => "00111101100010110010110110101011", 
    4 => "00111100001111111110001000000011", 
    5 => "10111101010000101011100011100010", 
    6 => "00111101111000111011110101011010", 
    7 => "10111101000110101011101100000010", 
    8 => "10111101011001010110111111111100", 
    9 => "10111100000101010001110011010010", 
    10 => "10111100111001110101010110101111", 
    11 => "10111110000011011010011110110001", 
    12 => "00111101101111100001100011010101", 
    13 => "00111101000111010010111010010100", 
    14 => "10111100001101001111010101000000", 
    15 => "10111110010000000111101001101100", 
    16 => "00111110000101001000110100111011", 
    17 => "10111101101110001100110100000110", 
    18 => "00111110010110001110101000111010", 
    19 => "10111110001110110001000000110100", 
    20 => "00111100100111001001101111100010", 
    21 => "00111001010010100010001000001001", 
    22 => "00111101010011111101001101000111", 
    23 => "10111101101001001111011000010110", 
    24 => "00111101000110010110011000111000", 
    25 => "10111100000011000011101101010111", 
    26 => "10111110000111100001111111000001", 
    27 => "00111101100011111111111100011100", 
    28 => "00111101000001000010101010000010", 
    29 => "10111101111010110110111010010011", 
    30 => "00111101100001011111001101111010", 
    31 => "00111101011010011000011001011100", 
    32 => "10111101111100001101101101101010", 
    33 => "00111110000101010101101110001010", 
    34 => "00111100101011100101100010100011", 
    35 => "00111110000001001011000001011011", 
    36 => "10111011010011001101110111101010", 
    37 => "10111101010100011101101100101010", 
    38 => "10111101110011101011000111000100", 
    39 => "10111101010001101100011010001110", 
    40 => "00111110001110000010011000100100", 
    41 => "00111101001000010100000101111110", 
    42 => "10111110001100110001111110001010", 
    43 => "00111101100001010001000110111000", 
    44 => "00111110000101110011100010100100", 
    45 => "10111101011101101001111000100010", 
    46 => "10111101101100111011000110001110", 
    47 => "00111011110101101100100011001111", 
    48 => "10111100001101001000001001010011", 
    49 => "00111101001001110101101111000100", 
    50 => "00111110000001111100101010100111", 
    51 => "00111110000011010111101101100011", 
    52 => "10111101011011011110000111010101", 
    53 => "00111101000010100001011100101011", 
    54 => "10111011001101011111101001001101", 
    55 => "00111101001100101101111100011011", 
    56 => "00111011101110111011110111000110", 
    57 => "10111101101111000100110100001000", 
    58 => "00111101010011110111011111110010", 
    59 => "00111101010011101110100010011011", 
    60 => "00111101110111011101010011000111", 
    61 => "00111110000010101000001011101000", 
    62 => "00111101101011010100101110111011", 
    63 => "00111011110111110101010101010000", 
    64 => "10111101100111000101011010101110", 
    65 => "10111101011101010101110101011111", 
    66 => "10111101010110110011111110001100", 
    67 => "10111100001010011111100011111000", 
    68 => "00111101101001000110111110000001", 
    69 => "10111101110001111001100111100101", 
    70 => "10111100110000110010001001011111", 
    71 => "00111101010000010011100101101011", 
    72 => "10111101000110111010010100001101", 
    73 => "10111101010100100001110111110101", 
    74 => "00111101001101110110000010111111", 
    75 => "00111101110001010010110101100110", 
    76 => "00111101010000011100000010110000", 
    77 => "10111101001010111111000011101010", 
    78 => "10111101010010110111001011100000", 
    79 => "00111110000001010110111011110000", 
    80 => "00111100111101100001111101000001", 
    81 => "00111100111010110011101101001101", 
    82 => "10111101010001110010001111111100", 
    83 => "00111100001110011011001010101001", 
    84 => "10111101100100111000101101010101", 
    85 => "00111101101111010010110001000110", 
    86 => "00111101101010111000011011100111", 
    87 => "00111110000001101111011010010100", 
    88 => "00111101111101001000000010100110", 
    89 => "00111110000110011100010000010001", 
    90 => "00111101110000111111110100101000", 
    91 => "00111100111011010101111100010100", 
    92 => "00111100101110010110010101000111", 
    93 => "00111101100011110011010111100011", 
    94 => "10111110010100000100000100000011", 
    95 => "10111101010001011101001010101000", 
    96 => "00111100111111100010101110110101", 
    97 => "10111101010001111011101011011111", 
    98 => "00111101001000001000101101000000", 
    99 => "00111101101000000000010110000001", 
    100 => "10111100101010101110100001000001", 
    101 => "00111101101011101101110001110010", 
    102 => "00111101001010100111101011100011", 
    103 => "10111110001000110001011100100111", 
    104 => "10111101011011010010010000001011", 
    105 => "10111101110000001100010011011111", 
    106 => "00111110000100100110011101000001", 
    107 => "10111101101000000000001110010001", 
    108 => "10111101100111000110000101100000", 
    109 => "00111110000011100000101011001000", 
    110 => "10111101001101100101001000000001", 
    111 => "00111101110100101011111101010101", 
    112 => "10111100000000010011101001010010", 
    113 => "00111100010010010010101101011000", 
    114 => "10111101100100101010101101101001", 
    115 => "00111100001010100000010110001101", 
    116 => "10111100101000010111011101001001", 
    117 => "00111110000011001000111100110010", 
    118 => "00111100111010100110001110000001", 
    119 => "00111101101011110001000001110100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_12 is
    component inference_conv2d_f3_4_4_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_12_rom_U :  component inference_conv2d_f3_4_4_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


