-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010100000110100110100101", 
    1 => "10111110000100100111011110000001", 
    2 => "00111110000011101010111010011111", 
    3 => "00111101111101011100011011000001", 
    4 => "00111110000000011010010100000001", 
    5 => "10111101000000110110000111101010", 
    6 => "00111101100000100011110000110101", 
    7 => "10111110001101110110011011000111", 
    8 => "00111110000100000110111001011101", 
    9 => "10111101110000101011001111110101", 
    10 => "00111101011100100100011111001011", 
    11 => "00111100100001110110001011001011", 
    12 => "10111101010100101111110001000001", 
    13 => "00111101101111010000010010100011", 
    14 => "10111101001000101101000011001011", 
    15 => "10111101100110110111111011111100", 
    16 => "10111100010011000100011000101010", 
    17 => "00111101110110011001001001000011", 
    18 => "10111101011111101100111101001001", 
    19 => "10111011101110100010101110100000", 
    20 => "10111110000011110011000111110100", 
    21 => "00111101101010010000001100010100", 
    22 => "00111101111010011010001001000000", 
    23 => "00111100001110101010000000001111", 
    24 => "00111110001000110000010100010000", 
    25 => "10111101101101111101110110111101", 
    26 => "10111101101100110010101011101011", 
    27 => "10111110001011000011111000110010", 
    28 => "00111101100001001011001000001001", 
    29 => "00111101101111011110110011100101", 
    30 => "00111101010110100000101100101001", 
    31 => "10111101001001111111110100111111", 
    32 => "00111100000101100010010001100100", 
    33 => "10111100111111110000100111001011", 
    34 => "00111101100110100100110100111001", 
    35 => "00111101101010111100101011011010", 
    36 => "10111110001101010011100110111001", 
    37 => "10111100101011010011010011101100", 
    38 => "00111101111010111000000111111001", 
    39 => "10111101111110101100001011011111", 
    40 => "10111010101110111100000010110110", 
    41 => "10111101111001111010110110001110", 
    42 => "10111101110011010010000010110000", 
    43 => "00111100110000010101000100111001", 
    44 => "10111100000001010010010001110111", 
    45 => "00111110001010000110011110101110", 
    46 => "10111011111000010000001100111011", 
    47 => "10111110000101111001001011010001", 
    48 => "10111100100000100101100000110100", 
    49 => "00111101110101111101111100011010", 
    50 => "00111110001101010000110101101011", 
    51 => "00111101110111111011111110000011", 
    52 => "10111101101011101100011110101110", 
    53 => "00111101101011111011100101100001", 
    54 => "10111101100010101000000100010011", 
    55 => "00111101100011101111101001000111", 
    56 => "10111101001111001001010011000001", 
    57 => "10111110000001011010100110101000", 
    58 => "00111100100111001011111110111111", 
    59 => "00111101110001111011111000010010", 
    60 => "10111011101010110000110001011110", 
    61 => "10111110001110000100101101011110", 
    62 => "10111011110010000101010100101110", 
    63 => "00111101100000000001101101101100", 
    64 => "00111100101100001111100011000110", 
    65 => "00111101110100110100001001101000", 
    66 => "00111101101010010001100001010000", 
    67 => "00111101101001101011001111111111", 
    68 => "10111100101010110111000111010100", 
    69 => "00111011101001000110100111101101", 
    70 => "00111011100110111010111001000111", 
    71 => "00111101011111101101111100000011", 
    72 => "00111101010010000101101111101111", 
    73 => "00111101110011011101011000010111", 
    74 => "10111011110111101110101010110010", 
    75 => "00111011100001100011010100111001", 
    76 => "00111100101011110011111100011101", 
    77 => "00111101101001010001100111100110", 
    78 => "00111101011100011110100000001111", 
    79 => "00111101110100110100100010110010", 
    80 => "00111101011010100111110011000110", 
    81 => "00111101101000011101000101101001", 
    82 => "10111110000110011000100000001001", 
    83 => "00111100111011011010001001100101", 
    84 => "00111101101110100001000110011100", 
    85 => "10111101111100110111110110100110", 
    86 => "00111101110000111010000111010011", 
    87 => "10111100110101000011000001101110", 
    88 => "00111101100011101101010010100010", 
    89 => "10111011101000111000101100110101", 
    90 => "00111110001001100001110000110111", 
    91 => "10111100110100101011110111011101", 
    92 => "00111101101010100000111101110110", 
    93 => "00111110001011101010100110100100", 
    94 => "10111011101101010000011100001000", 
    95 => "00111101011101001010000111111110", 
    96 => "00111101000001101111101111010010", 
    97 => "10111101011101001111000100001110", 
    98 => "10111101110101011101111001011001", 
    99 => "10111101101101110011110010000101", 
    100 => "10111100100000100011010100101111", 
    101 => "10111100100101100110101010100110", 
    102 => "00111101100001111100111101111010", 
    103 => "10111101100110110011000101010111", 
    104 => "00111101110010000100101000110111", 
    105 => "10111110001010101100010000101111", 
    106 => "00111101011000000110101101000101", 
    107 => "10111101111011011101000001010011", 
    108 => "00111101101110001101000101111011", 
    109 => "00111110010010110011011111001010", 
    110 => "00111101001000110101001111011101", 
    111 => "00111110000001101111111100111011", 
    112 => "00111101101001000010011100011001", 
    113 => "00111100010001100111001100010110", 
    114 => "00111101111100101110111010000101", 
    115 => "00111100110101011000111101001001", 
    116 => "00111101001110011000111001111100", 
    117 => "00111100111100110100001010111000", 
    118 => "00111101111111011101100011111001", 
    119 => "10111101110101100111000110101100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_13 is
    component inference_conv2d_f3_1_1_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_13_rom_U :  component inference_conv2d_f3_1_1_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


