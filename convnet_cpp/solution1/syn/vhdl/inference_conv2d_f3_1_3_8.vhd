-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011000000001001001110100", 
    1 => "10111110001111011110001101110110", 
    2 => "00111101001110000010000010111110", 
    3 => "10111101110010111010110110001011", 
    4 => "10111101100001011110011001010001", 
    5 => "10111101101011100010001100001110", 
    6 => "00111101110111110001110011111100", 
    7 => "00111110001010011111000011100101", 
    8 => "10111110000010011000010001011110", 
    9 => "10111101110001110011010101110001", 
    10 => "10111101111111011100011000011001", 
    11 => "10111101001000001011110111001011", 
    12 => "00111110000000110100001101110100", 
    13 => "00111101010001010011010100101001", 
    14 => "00111101000011001101000010010011", 
    15 => "00111101100101101110010101111101", 
    16 => "10111101100110001100101010110111", 
    17 => "00111101110100001110011001101101", 
    18 => "00111101101111010100111000001001", 
    19 => "00111101010010010011000010110001", 
    20 => "10111110001000101001011001110000", 
    21 => "10111101100101000100011001110100", 
    22 => "10111100010000111101110110100101", 
    23 => "00111101001101010101000111110001", 
    24 => "10111110000101000110001100000110", 
    25 => "00111101010010010001111011111000", 
    26 => "10111110001111000001110100101010", 
    27 => "00111101101000111010101010101111", 
    28 => "00111110001100001011000000101001", 
    29 => "00111110001011011100011100100110", 
    30 => "10111100011011010111111011110100", 
    31 => "10111110010000100101111010011010", 
    32 => "00111101000011011000001000110100", 
    33 => "10111100111001001001011010000011", 
    34 => "00111110000100001001010011100110", 
    35 => "00111101011001011110111010100111", 
    36 => "10111101100110101111001001101101", 
    37 => "00111100110100100101011110111100", 
    38 => "00111101100000100010101100011110", 
    39 => "10111101101001000000000111101101", 
    40 => "00111110001011010101000100101111", 
    41 => "10111101001011011111011000101101", 
    42 => "00111110010000010000100010000001", 
    43 => "10111110010110111001110001110011", 
    44 => "00111101001100101001111101110101", 
    45 => "10111011110110100100011010011101", 
    46 => "10111100111010110111000100110010", 
    47 => "00111110010011001000101100000000", 
    48 => "00111101100101011010000010010110", 
    49 => "00111100110010101101111111000010", 
    50 => "10111010100010111111111001111011", 
    51 => "00111110001010001111100101101110", 
    52 => "00111101100101101100000111110001", 
    53 => "10111011011010100000000011100101", 
    54 => "00111101100001011000000011111001", 
    55 => "10111110010000010011010101010100", 
    56 => "10111100100111100111101011100000", 
    57 => "10111100110111000101010101101011", 
    58 => "00111101110100001011011100111101", 
    59 => "00111110010000000111100110100011", 
    60 => "10111101111110100111111010110111", 
    61 => "00111101111110011100011000101010", 
    62 => "10111110010110010000101111001000", 
    63 => "00111110000010101000010101000100", 
    64 => "00111110010101111010000000110000", 
    65 => "10111101110010011011110000011001", 
    66 => "10111101100111011010100001101101", 
    67 => "00111101110001111001001000001000", 
    68 => "10111110000100000000001010011111", 
    69 => "10111101100011101100100011001000", 
    70 => "00111110000000011011010110000101", 
    71 => "00111101111100101010000101110011", 
    72 => "10111101110111101011100011011000", 
    73 => "00111110000000110111000010001011", 
    74 => "00111100011011010110000001010110", 
    75 => "10111101110111001110111110101010", 
    76 => "10111110000000101100011000100110", 
    77 => "10111101001000011110000001011010", 
    78 => "10111100011000000001000000001011", 
    79 => "00111100100001101111111110011001", 
    80 => "10111100111011000100100000101000", 
    81 => "00111100100110111010111001111100", 
    82 => "00111110000110100111001100101110", 
    83 => "10111101000110100111100101111001", 
    84 => "00111100111100100100000101100110", 
    85 => "10111101000000110000011010110000", 
    86 => "00111011001001101101110101001111", 
    87 => "00111110001110101101001111101001", 
    88 => "10111101110000001000100101010000", 
    89 => "00111101100000011111100001010000", 
    90 => "10111101001011000110001011001010", 
    91 => "00111101101010101000011000011011", 
    92 => "00111100101000010100010001010011", 
    93 => "10111100110010011001110001100001", 
    94 => "10111100000001111111010011101100", 
    95 => "10111101000101001111110001100001", 
    96 => "00111110000001010100011010010001", 
    97 => "00111110001100010101001000101010", 
    98 => "00111101111101110101110010001110", 
    99 => "00111100110100111110001010100000", 
    100 => "00111101110000001101100000001111", 
    101 => "00111110001101101111000100010011", 
    102 => "00111110001000101110011110110100", 
    103 => "10111101010111111101001100011111", 
    104 => "10111101111100001101110001110111", 
    105 => "00111101000110001011100110111011", 
    106 => "10111101101100011110010000010011", 
    107 => "10111101001010001010001101011000", 
    108 => "00111001101001110111111110011100", 
    109 => "10111011000110011000110101011010", 
    110 => "10111101001001001000110001110010", 
    111 => "00111110000011000011100010110000", 
    112 => "00111100110010011110111111011000", 
    113 => "00111100010111111100110010000100", 
    114 => "00111101110000110000010101000110", 
    115 => "00111101011100110001101000001001", 
    116 => "00111101000000010010111101000000", 
    117 => "00111101010100011001110110000010", 
    118 => "00111110011111111010100011111000", 
    119 => "00111101101101001111000110101111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_8 is
    component inference_conv2d_f3_1_3_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_8_rom_U :  component inference_conv2d_f3_1_3_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


