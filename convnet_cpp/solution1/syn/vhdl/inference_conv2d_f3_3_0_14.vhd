-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100000111100010100001111", 
    1 => "10111101000010110111001101001011", 
    2 => "00111110010101101001111110001100", 
    3 => "00111101100101010001011101101111", 
    4 => "00111101111101010101101000111010", 
    5 => "00111101101000000000100100101101", 
    6 => "10111101100110100001011010100101", 
    7 => "00111101100000010100000111101010", 
    8 => "00111011101111001101111000101101", 
    9 => "10111100111011111100100101010001", 
    10 => "00111110001011111100001100101111", 
    11 => "00111100010101101111101010111001", 
    12 => "10111100110000111010011111110101", 
    13 => "10111101100011000010010010000001", 
    14 => "10111101011101110000111000011111", 
    15 => "00111101010111101100111111101010", 
    16 => "10111100010100110111110011101010", 
    17 => "00111101001110101100111100111111", 
    18 => "00111101011001000011110010100110", 
    19 => "10111101111011101111111101011100", 
    20 => "00111110000100101010000001100110", 
    21 => "10111100110011110001000111101100", 
    22 => "10111101111011000111100111110110", 
    23 => "10111101010001100101010011100100", 
    24 => "10111100000001011000010001111001", 
    25 => "00111100101110010010101011111010", 
    26 => "00111100111011011000011111000011", 
    27 => "10111101110011101001111001011110", 
    28 => "10111010010100110101101010000110", 
    29 => "00111110000110000110110101110010", 
    30 => "00111010111010000101011110011000", 
    31 => "00111011101111001000010100101100", 
    32 => "00111011101111001000010101101100", 
    33 => "10111110000100010100100111000111", 
    34 => "00111100101011110111101100011000", 
    35 => "10111101100011001100001000011011", 
    36 => "10111011110111001010110111000000", 
    37 => "10111100000001101011000001111110", 
    38 => "10111101001010010011110001010100", 
    39 => "00111100011100111111001111101110", 
    40 => "10111101100111110111011110010101", 
    41 => "00111100001011110111001010110100", 
    42 => "10111011110011000010101101111101", 
    43 => "00111101011011011011101001001101", 
    44 => "00111101110010001111010000001000", 
    45 => "10111101100011000000001100011011", 
    46 => "10111100110111101101100110101010", 
    47 => "00111101001011000011010000000110", 
    48 => "10111101011000010000110011110110", 
    49 => "10111100100100010111111001111000", 
    50 => "00111100111110001100000010100110", 
    51 => "10111101110001101100101000011111", 
    52 => "10111101100011011001111100001010", 
    53 => "10111100111101000001101001001110", 
    54 => "00111101101001110101011111010110", 
    55 => "10111101011101101111001101100010", 
    56 => "00111101111110111101111100001001", 
    57 => "00111101001111100011101011101001", 
    58 => "10111101010101111100010101101001", 
    59 => "00111100011110110010000000110010", 
    60 => "10111101110010111100111011010110", 
    61 => "10111101001000110110010010100100", 
    62 => "00111011101110111001110000001101", 
    63 => "10111101111110101110101100111110", 
    64 => "00111010101110100110100011000111", 
    65 => "10111110001000011000000110011101", 
    66 => "00111110000011100111111100101100", 
    67 => "10111100001000100001110101100001", 
    68 => "10111101110010101000001101010100", 
    69 => "10111101101100011000101111010110", 
    70 => "00111101111001100000111011011000", 
    71 => "00111101111100000001011011001110", 
    72 => "00111101100110110010001010110110", 
    73 => "00111110001001011011000110000101", 
    74 => "00111110011000111100110001001011", 
    75 => "00111101100110011100100111010110", 
    76 => "10111100110101010000011001010111", 
    77 => "10111101001011011011011101011110", 
    78 => "00111110001001111000100000010010", 
    79 => "10111101100001110010100101100010", 
    80 => "00111101101100011110111001100111", 
    81 => "00111101111001000101100000000100", 
    82 => "10111110001110111011110001101111", 
    83 => "10111101111100111000110111100111", 
    84 => "10111101110110011110010100011001", 
    85 => "00111110000011001011010110111011", 
    86 => "10111110000100110110001011101001", 
    87 => "00111100110101011001111101101111", 
    88 => "00111101010110010111100001110111", 
    89 => "00111010111000010111010111111100", 
    90 => "10111100101111010100111001110101", 
    91 => "10111101011101101101100111001100", 
    92 => "10111110000011011100001001101110", 
    93 => "00111101000010010111001000111010", 
    94 => "10111100101101001011110101000001", 
    95 => "10111101110001110010000101011100", 
    96 => "00111100101100101111010110001011", 
    97 => "00111101010000111100110110011010", 
    98 => "00111100100011011010011010110010", 
    99 => "10111101011010000110011101000010", 
    100 => "00111110000001010001001000100011", 
    101 => "00111100100001001111011110000001", 
    102 => "00111110000100110011010111010010", 
    103 => "00111100011001001101111010100111", 
    104 => "10111001111000000100110000010111", 
    105 => "10111011100011110000111111111110", 
    106 => "00111100001010100010110011111010", 
    107 => "00111101111110001111101111001010", 
    108 => "10111101100100110111010010101111", 
    109 => "10111101111101000111110011111010", 
    110 => "10111101110111101011010000100000", 
    111 => "00111101000010110110010101011001", 
    112 => "00111101111001110100100111110001", 
    113 => "10111101101101100010001000100011", 
    114 => "10111100000110110010100101100111", 
    115 => "00111110000001100000110000111001", 
    116 => "10111101110000111111101111001011", 
    117 => "00111101000000001100100101101110", 
    118 => "00111101011011110010000111110111", 
    119 => "10111101011010010011000100110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_14 is
    component inference_conv2d_f3_3_0_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_14_rom_U :  component inference_conv2d_f3_3_0_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


