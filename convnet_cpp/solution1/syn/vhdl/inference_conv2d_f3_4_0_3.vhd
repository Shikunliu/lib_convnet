-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100101000000010011000010", 
    1 => "10111110000011001100110100010000", 
    2 => "10111101101100011111101010101100", 
    3 => "00111101111001010111000100001001", 
    4 => "10111110000100001011110000111000", 
    5 => "00111100110010101011011100010011", 
    6 => "10111101110010010000100001000100", 
    7 => "10111101001111100110010110010110", 
    8 => "10111101110001111100010111111101", 
    9 => "10111110000111010000011110000101", 
    10 => "00111101111100001010011001110110", 
    11 => "00111110000001101011110111110101", 
    12 => "10111101111111000110110010011000", 
    13 => "10111100111111100010000000101100", 
    14 => "10111101100111011100111001111101", 
    15 => "00111101110100001110001111001110", 
    16 => "00111101100000100110001010010110", 
    17 => "10111101000100000000000001111001", 
    18 => "00111101111101110101111010100110", 
    19 => "00111110001100001001001011001101", 
    20 => "10111101110010100100110011001101", 
    21 => "10111110001101011110010011100111", 
    22 => "00111101000100100010000111010110", 
    23 => "10111101000010010001000110001100", 
    24 => "00111101101111101011010101110000", 
    25 => "00111101110010010110101010100000", 
    26 => "00111100100101110101010100011100", 
    27 => "10111101001111011110100001001000", 
    28 => "10111101100101011100011101000111", 
    29 => "10111101000011111001110011110110", 
    30 => "10111100100111011111000111101110", 
    31 => "00111011010101110011001011010111", 
    32 => "10111100101000001100100111011010", 
    33 => "00111100101110000111110100011111", 
    34 => "00111010001011001000100100111110", 
    35 => "10111101111010011010010111101100", 
    36 => "10111100100110111100010111111001", 
    37 => "00111100111110000101111111000011", 
    38 => "00111110000110000111101110011010", 
    39 => "00111101001101110100100010100001", 
    40 => "10111100000001000011001011000000", 
    41 => "00111100001100011101101000000010", 
    42 => "00111101111011000010110001011110", 
    43 => "00111110000111010110001010111111", 
    44 => "10111101001110000100011100011111", 
    45 => "10111110000100001111001001111100", 
    46 => "00111100101010010100101011101000", 
    47 => "00111101011000000100101011111001", 
    48 => "00111101100101111000100011110110", 
    49 => "00111100100110111011101100010010", 
    50 => "00111101100001111000001010011110", 
    51 => "00111110010001101010101100010101", 
    52 => "00111100011100111110100111011101", 
    53 => "00111110001010101001100011101110", 
    54 => "10111101111001110100100101101011", 
    55 => "00111101111000001100010110101000", 
    56 => "00111100111000111011101100100110", 
    57 => "10111110010000111101010001101011", 
    58 => "10111101100011110100110111100110", 
    59 => "10111101101100011101101010100011", 
    60 => "00111101001100000001011110100101", 
    61 => "00111011101000101000110000110001", 
    62 => "00111101110101100000110110001000", 
    63 => "10111101101011100010010100011010", 
    64 => "10111101100111111000111011001110", 
    65 => "10111100010111011001011010110100", 
    66 => "10111101110111000011111001110101", 
    67 => "00111101100110101110110011011110", 
    68 => "10111101110010111101011000101101", 
    69 => "10111101110111000010010011000100", 
    70 => "00111101001011001100011000010111", 
    71 => "10111101101100110010000010010110", 
    72 => "00111101100011000010111101011011", 
    73 => "00111101011001110000111010010111", 
    74 => "10111101010111111111100011111001", 
    75 => "10111101111000001001010001100000", 
    76 => "10111101001001001110011001101001", 
    77 => "10111100101100010011010011000001", 
    78 => "00111101100010010011100000010101", 
    79 => "10111110001010010001000011000011", 
    80 => "00111101100111111001101101100100", 
    81 => "00111100111101110000010111110001", 
    82 => "10111110000000000110011100000110", 
    83 => "00111101111101101110110101100111", 
    84 => "00111101101011100010001111001010", 
    85 => "10111101011111100111000100011111", 
    86 => "10111100100111011011111101100011", 
    87 => "00111100111101111110000110000011", 
    88 => "10111101000001101100101010100101", 
    89 => "00111101111101001011010010001101", 
    90 => "00111110000001110110101001110010", 
    91 => "10111011111000001000110011110011", 
    92 => "10111101101010101111110110110010", 
    93 => "10111101110010011001000110000111", 
    94 => "00111101111100111010001011100000", 
    95 => "10111011011011100111110100100001", 
    96 => "00111010101100010000000000111110", 
    97 => "10111110000101110100110000001010", 
    98 => "10111101100001110000111000000100", 
    99 => "00111101011010110000101010001011", 
    100 => "10111101111010010100111101101010", 
    101 => "10111100000010111010011000111100", 
    102 => "10111100001111111010110100101010", 
    103 => "10111101110111110010110100111100", 
    104 => "00111101111010001000101101010100", 
    105 => "10111101011000100010110100000001", 
    106 => "00111101011100000100000000000100", 
    107 => "00111101100011011000010000010111", 
    108 => "00111101000010100011111110111111", 
    109 => "10111011110111011111111001111000", 
    110 => "10111101111001001111101000000101", 
    111 => "10111110000011100111001001010100", 
    112 => "00111101100111000001010111100000", 
    113 => "10111101111111100010111001101111", 
    114 => "10111101101011110000011000100000", 
    115 => "10111101000100000000001011111101", 
    116 => "10111100001101111001100111001010", 
    117 => "10111100101010110000010011000110", 
    118 => "10111101111011110100101011011100", 
    119 => "00111110000000100111101110110011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_3 is
    component inference_conv2d_f3_4_0_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_3_rom_U :  component inference_conv2d_f3_4_0_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


