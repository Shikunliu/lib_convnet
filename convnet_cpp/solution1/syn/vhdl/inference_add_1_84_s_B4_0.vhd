-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_add_1_84_s_B4_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_add_1_84_s_B4_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110101010000100101111101", 
    1 => "00111101111100011000110100100110", 
    2 => "00111101111011111010111001111001", 
    3 => "00111101110111111011111011111101", 
    4 => "00111101110011110001011101111010", 
    5 => "00111101101101010001011000011111", 
    6 => "00111101101110110001010000001000", 
    7 => "00111101111010111001011101111000", 
    8 => "00111101110101000111110001110100", 
    9 => "00111101111011011110001110111001", 
    10 => "00111101110010001101100101110011", 
    11 => "00111101110000010001101000010001", 
    12 => "00111101110010110110001111101111", 
    13 => "00111101110100110000010100010000", 
    14 => "00111101111111001111111111101011", 
    15 => "00111101110010001011000101110010", 
    16 => "00111101110011110100100101001001", 
    17 => "00111101110000111000111111001010", 
    18 => "00111101110001111010000010001110", 
    19 => "00111101111010101010001000011010", 
    20 => "00111101101100010001101111100111", 
    21 => "00111101110000010001011111111000", 
    22 => "00111101101100101000001001011100", 
    23 => "00111101111001001110100010111000", 
    24 => "00111101110111001011100000010111", 
    25 => "00111101110011111010011010011100", 
    26 => "00111101110010011011100000111000", 
    27 => "00111101111100001001100011010100", 
    28 => "00111101101010111001000110100111", 
    29 => "00111101101110111001000011011101", 
    30 => "00111101111011100001110111101011", 
    31 => "00111101110010110100111111001101", 
    32 => "00111101111101010011011010010011", 
    33 => "00111101110110111100001101000000", 
    34 => "00111101101110100010111111001111", 
    35 => "00111101110001001111101111001101", 
    36 => "00111101111010101111100010011100", 
    37 => "00111101110001000001110110000001", 
    38 => "00111101101100100110011001101010", 
    39 => "00111101111000100100111011011111", 
    40 => "00111101111010111110110001101000", 
    41 => "00111101110100000100101100111100", 
    42 => "00111101111000011011110110100101", 
    43 => "00111101111011100100010111000011", 
    44 => "00111101111100111100001011011011", 
    45 => "00111101111001100001100111011011", 
    46 => "00111101111110011011010011011101", 
    47 => "00111101110100000010110111100000", 
    48 => "00111101111000100001010000100111", 
    49 => "00111101100101110111110110001000", 
    50 => "00111101110101001010011011101100", 
    51 => "00111101110010101100010110100110", 
    52 => "00111101111100001000000010110110", 
    53 => "00111101110100010000010101011100", 
    54 => "00111101110011001100110011001101", 
    55 => "00111110000000010100011001011111", 
    56 => "00111101101100010011010010011001", 
    57 => "00111101110100100100111110101001", 
    58 => "00111101110100001010101010101000", 
    59 => "00111101110010111010110111001110", 
    60 => "00111101101010111010111110010110", 
    61 => "00111101110001010100100000111110", 
    62 => "00111101110100111100110111011101", 
    63 => "00111101110110000100101110100001", 
    64 => "00111101110011100110001110100110", 
    65 => "00111101110000010100001001001000", 
    66 => "00111101111111101000000101000101", 
    67 => "00111101110011001100110011001101", 
    68 => "00111101110111101100101010101100", 
    69 => "00111101110111101000010111111101", 
    70 => "00111101101111100001101010101011", 
    71 => "00111101110010010000100001010010", 
    72 => "00111101110001000011111101100000", 
    73 => "00111101110000010111110100011011", 
    74 => "00111101111000001010101111110111", 
    75 => "00111101110000111100100111111100", 
    76 => "00111101110101111000011110001011", 
    77 => "00111101110001101010111101111100", 
    78 => "00111101110001101100110010001000", 
    79 => "00111101111101011011100100011111", 
    80 => "00111101101111010100100111001010", 
    81 => "00111101110000111111111010111011", 
    82 => "00111101110000000010101111000111", 
    83 => "00111101110011000100011000011100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_add_1_84_s_B4_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_add_1_84_s_B4_0 is
    component inference_add_1_84_s_B4_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_add_1_84_s_B4_0_rom_U :  component inference_add_1_84_s_B4_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


