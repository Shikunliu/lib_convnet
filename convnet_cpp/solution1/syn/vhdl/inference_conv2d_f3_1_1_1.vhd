-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000110011001001011001001", 
    1 => "00111101111001000101000010101101", 
    2 => "10111100000011011010111100110101", 
    3 => "00111101110010111110001101010110", 
    4 => "00111101001101110101011111110001", 
    5 => "00111100111110010110001110011001", 
    6 => "10111110000001111101100000000110", 
    7 => "00111101110011101011100100011011", 
    8 => "10111101001000000001011100101100", 
    9 => "00111101101101110010010001100111", 
    10 => "00111101111101101011110100101011", 
    11 => "00111011010111111110110100111011", 
    12 => "10111100101101101010000010100110", 
    13 => "00111101001111100110110011010011", 
    14 => "10111110001011010100101011100100", 
    15 => "10111010101011010111000010010001", 
    16 => "10111101100010111010001010111110", 
    17 => "10111101101101100011110000111111", 
    18 => "00111101111000010111111010111011", 
    19 => "10111100100001010111000011101110", 
    20 => "10111110000001000100100011001111", 
    21 => "10111101110000101011111111000000", 
    22 => "10111101100000101101001000001101", 
    23 => "10111101000001000111011010100010", 
    24 => "10111101111010101110110110011010", 
    25 => "10111101000110110110011110110101", 
    26 => "00111101101001100000100011011110", 
    27 => "00111101000111101101111011101000", 
    28 => "00111011110110001010001000011000", 
    29 => "10111110001100000010011101010010", 
    30 => "00111110010101100010100010001001", 
    31 => "00111101000110100000000101001110", 
    32 => "00111101010111100111010000101010", 
    33 => "00111101010000101101001011100011", 
    34 => "00111100111010010001111011011101", 
    35 => "10111110000110011110000100101010", 
    36 => "00111110001111110001100111010110", 
    37 => "10111100000010110001010010000110", 
    38 => "10111101111011001111111010011011", 
    39 => "00111101011111010011110101111000", 
    40 => "10111101101011011100010011010111", 
    41 => "00111011010010000101101111111010", 
    42 => "00111101111001100111011100101101", 
    43 => "10111101101101100101010001011101", 
    44 => "00111110000100101011011111111110", 
    45 => "10111101000110100110111111010011", 
    46 => "00111101110100010010010011010001", 
    47 => "10111110000101001111110111110100", 
    48 => "00111101100111001110111011101110", 
    49 => "00111011110100010011010000111011", 
    50 => "00111100010101011001010000011100", 
    51 => "00111011110000100000001000000011", 
    52 => "00111101110111011110100010110100", 
    53 => "10111101010111100000010101101111", 
    54 => "00111110001101111011100010010001", 
    55 => "10111101001010100100010011111101", 
    56 => "10111101111001110110000100000010", 
    57 => "10111101001101100010110011100011", 
    58 => "00111011101101000010110011011000", 
    59 => "10111101010100100100111100111101", 
    60 => "00111101111010000000101011100001", 
    61 => "00111100011000101000111101000001", 
    62 => "00111101101100010001011100000111", 
    63 => "00111110001001111100111100011100", 
    64 => "10111101000111001110001010101010", 
    65 => "00111101011111000111000011111111", 
    66 => "10111101011010011010111101000001", 
    67 => "00111101100110001011100000011011", 
    68 => "00111101111011011001010100010100", 
    69 => "00111100111000100001001001000100", 
    70 => "10111101100011111111100010110110", 
    71 => "00111110000100011011100000100100", 
    72 => "00111101111000101010111011010001", 
    73 => "00111100010011001101101101111011", 
    74 => "10111101101010111001100010101101", 
    75 => "10111101000010101111100010000010", 
    76 => "00111101011001001011001111111010", 
    77 => "00111100000110000010011000011100", 
    78 => "10111110000000111111011111001111", 
    79 => "00111110001111011100100100111111", 
    80 => "00111101111101010110100111110101", 
    81 => "10111110001100000010000100001000", 
    82 => "10111101100011111001111010110001", 
    83 => "00111100100010001111110101101010", 
    84 => "10111101001101101101010100010100", 
    85 => "10111101111100110111100101110100", 
    86 => "00111101101100000111110000100111", 
    87 => "00111101010000110101111100110000", 
    88 => "00111101101100101111101011110010", 
    89 => "10111100101001111110011100111010", 
    90 => "00111101010001111010010100010000", 
    91 => "10111101101000010011111001011001", 
    92 => "10111100111110100000110000110110", 
    93 => "10111101101000000010111101100101", 
    94 => "10111101001001000101111010000100", 
    95 => "00111101101111100001010110111101", 
    96 => "10111100101110001010101111100011", 
    97 => "10111101010110101001010101000010", 
    98 => "00111100010011101000001100011011", 
    99 => "00111100111001101111100101101001", 
    100 => "10111101101001101110000001001100", 
    101 => "00111110001000100011011011000001", 
    102 => "10111110001101001000000101101111", 
    103 => "10111011101101011011111100101010", 
    104 => "00111101100000100111111001100000", 
    105 => "00111101111110101110101000110001", 
    106 => "00111101111011010010011001110100", 
    107 => "10111101100001000000111101001100", 
    108 => "10111101011111000001010101110101", 
    109 => "00111101100111001111001100101110", 
    110 => "00111101111000000010010000101101", 
    111 => "00111101010101001011100111001011", 
    112 => "10111110000010101111011110010000", 
    113 => "10111101101000011110110011010101", 
    114 => "10111100011110111110000110001101", 
    115 => "10111101101101101111101010011110", 
    116 => "00111101100110110001111110010001", 
    117 => "00111101001001111101111000110110", 
    118 => "10111101111011000100110111101100", 
    119 => "00111101000110100011101011011111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_1 is
    component inference_conv2d_f3_1_1_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_1_rom_U :  component inference_conv2d_f3_1_1_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


