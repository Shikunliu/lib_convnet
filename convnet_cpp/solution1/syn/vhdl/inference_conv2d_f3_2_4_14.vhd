-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110100011110101111110", 
    1 => "10111101101010010010110000000110", 
    2 => "00111101101011011011100110000100", 
    3 => "00111011001110000000000000001100", 
    4 => "10111110000001011011100001010110", 
    5 => "10111100011111100001100101110110", 
    6 => "00111100000110111011111101011001", 
    7 => "10111110000000001100110101000010", 
    8 => "10111010100100111110010100100101", 
    9 => "10111011101001010111011000011100", 
    10 => "00111010000100100111111001010000", 
    11 => "10111100111110101001000001010100", 
    12 => "00111100010111101100101000100101", 
    13 => "00111101111011101001100110100110", 
    14 => "00111100001101110101100011000111", 
    15 => "00111101011011011101011100001001", 
    16 => "00111101111010011100000000100011", 
    17 => "00111101110111000100000100010100", 
    18 => "10111101100010011010101001111011", 
    19 => "00111101011001001100110110001111", 
    20 => "00111101011101101111010110110000", 
    21 => "10111011101010000001100010100011", 
    22 => "10111101000101001001101010001100", 
    23 => "00111100011000110110001111101000", 
    24 => "10111101110111101111011010110110", 
    25 => "00111101100000111001010011000101", 
    26 => "10111101111100101100011110111001", 
    27 => "10111101000111110111110100100011", 
    28 => "10111100101010100101110100110110", 
    29 => "00111101111110110010100100011100", 
    30 => "10111100010011001010100111111101", 
    31 => "00111100101111101010111011000111", 
    32 => "00111010100101100001001111010011", 
    33 => "00111101001000110000011110000111", 
    34 => "10111110010000111010010000101111", 
    35 => "00111101101000110111011101001110", 
    36 => "10111010000010110101010100101011", 
    37 => "10111101110101111100000010110001", 
    38 => "00111011110100011000100101110101", 
    39 => "10111101111100100011100000010001", 
    40 => "00111101111001001110101101010111", 
    41 => "10111101011110101001100010111000", 
    42 => "10111101100010110101001111110001", 
    43 => "00111110000100101110001001110110", 
    44 => "10111101101001111010110110000001", 
    45 => "10111101110011010010010001011011", 
    46 => "10111101100111110011000001010100", 
    47 => "10111101111011001100010101110110", 
    48 => "10111101110010100011011010000101", 
    49 => "10111110000000111011111001100110", 
    50 => "00111101001110001010001010101001", 
    51 => "00111011110100100011011011011010", 
    52 => "10111101010000011101010010000001", 
    53 => "10111101011100110110100001111000", 
    54 => "00111101111010011101110001110010", 
    55 => "10111101100001001110011111010100", 
    56 => "10111101011001010011010101111001", 
    57 => "00111101100111001110111000001010", 
    58 => "00111101000101111010000110001101", 
    59 => "00111101101001010100111010001001", 
    60 => "10111101110001101001101011010100", 
    61 => "00111100001100011110110101001101", 
    62 => "00111101110101100011001111001110", 
    63 => "00111101101001010011000100111010", 
    64 => "00110111110110011101000011101011", 
    65 => "10111110000111100001111100111010", 
    66 => "00111101100000101000111101000001", 
    67 => "00111110000100000000011100010100", 
    68 => "00111101011100101000101110100011", 
    69 => "00111101100111000100110011100000", 
    70 => "10111101100101110111001100100110", 
    71 => "10111110000001101110010011000001", 
    72 => "00111100100111100011111111110010", 
    73 => "00111101110111000110000000000011", 
    74 => "10111101010101011101100110100001", 
    75 => "10111101111000110000010011001101", 
    76 => "10111101001001100010001011111010", 
    77 => "00111101101110000010000111001010", 
    78 => "00111110000001000011111111100110", 
    79 => "10111110001100010011000001011001", 
    80 => "10111101010000111000010110010001", 
    81 => "10111101101111001011101110000000", 
    82 => "00111101001100001101011111110100", 
    83 => "10111101001101110100100001010001", 
    84 => "10111101000001010100001111110010", 
    85 => "00111101010111001110100010100100", 
    86 => "10111101110000010101000000111010", 
    87 => "10111100001110111100101111110100", 
    88 => "00111101001101001101001011011011", 
    89 => "00111101101110101000100011100011", 
    90 => "00111101111110100010100111000111", 
    91 => "00111100101011011100011110111001", 
    92 => "00111101110010100100100101100101", 
    93 => "10111100001010100000011011001111", 
    94 => "00111101000101110011110111010100", 
    95 => "10111101010011110110101000000000", 
    96 => "00111110001011001111101001101010", 
    97 => "00111110010110111110110001101000", 
    98 => "00111110000010101001000100010000", 
    99 => "00111101000001100100011011110001", 
    100 => "00111110000001010001100101111010", 
    101 => "10111011101010010110111010111001", 
    102 => "00111101011110111011101000111011", 
    103 => "00111101110100101011101010011101", 
    104 => "10111101011100010001011011111001", 
    105 => "10111101101100010110101001111110", 
    106 => "10111100101001000111100001010000", 
    107 => "10111110000111010100010000010011", 
    108 => "10111101011000100111100111000010", 
    109 => "00111101111000100001111110110000", 
    110 => "00111101011110011010010000010110", 
    111 => "10111101100011011110000101110111", 
    112 => "10111101001010110010010111101001", 
    113 => "10111100001010000010101011000001", 
    114 => "00111101010010001000111100011011", 
    115 => "10111101001110001111111100100101", 
    116 => "10111100000101101111001111111000", 
    117 => "00111100011010001111011011001111", 
    118 => "00111101100101010000000010101110", 
    119 => "10111101101111000011011100111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_14 is
    component inference_conv2d_f3_2_4_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_14_rom_U :  component inference_conv2d_f3_2_4_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


