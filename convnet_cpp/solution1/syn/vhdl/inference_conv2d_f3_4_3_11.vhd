-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101011010001111000010001", 
    1 => "10111011110001010001100100100100", 
    2 => "00111110000010010101011110001010", 
    3 => "00111101011010101011001011000111", 
    4 => "00111011010011100001111000000110", 
    5 => "00111101101100111111000000011010", 
    6 => "00111110001101111000010101110011", 
    7 => "00111101000110101111001110100001", 
    8 => "00111110000000010111000110011111", 
    9 => "00111101101001101000011101010011", 
    10 => "10111101001001101011000111100110", 
    11 => "10111100110010010101100001101110", 
    12 => "10111101101101000110001000100010", 
    13 => "00111110000110000111100110000001", 
    14 => "00111100111011010110100111000110", 
    15 => "10111101100001110011001011101101", 
    16 => "00111101011100101011111101110000", 
    17 => "10111101101111111100011000011110", 
    18 => "10111100111001000010101000010110", 
    19 => "00111110000010111101011100101100", 
    20 => "00111110000111001010101110000010", 
    21 => "00111100111000011101011001001001", 
    22 => "00111101001010101101110101011001", 
    23 => "10111110000000100000111100101100", 
    24 => "00111100001111101000010111100010", 
    25 => "10111101011011000101000001110000", 
    26 => "00111110000011001000001001011010", 
    27 => "00111101101110100101100010100111", 
    28 => "00111101110111100010010011111111", 
    29 => "10111101110000010011010101111101", 
    30 => "10111100111110111000111111111001", 
    31 => "00111100010111011000111111111110", 
    32 => "00111101001101110010111111000111", 
    33 => "10111101100011000000011000011000", 
    34 => "00111010101010101100011000010010", 
    35 => "10111101000111000101001000101011", 
    36 => "10111100110110000110100110111001", 
    37 => "00111101111000011110110001001110", 
    38 => "00111100100011100000011110010101", 
    39 => "10111101100100110000111100111100", 
    40 => "10111110011000010011110110111000", 
    41 => "00111101010100000010010011110110", 
    42 => "00111110001101101110110001011011", 
    43 => "00111101011000001101000100010110", 
    44 => "10111101011001100011010010110011", 
    45 => "10111100101001010110100101111100", 
    46 => "00111101100100110101011011011010", 
    47 => "10111101100101001000011010101101", 
    48 => "00111100100101010110011110100110", 
    49 => "00111101000001000010110111000010", 
    50 => "00111110001110001111000100001011", 
    51 => "00111100100001001101010001000101", 
    52 => "00111110000011100111111100101100", 
    53 => "00111011011011111010001000111010", 
    54 => "10111101111100111110110111011001", 
    55 => "00111110000000010000110011110110", 
    56 => "10111101010101001111000101011110", 
    57 => "10111100110010000101011000010000", 
    58 => "00111101010110011000001111100101", 
    59 => "10111101110001111010001001001001", 
    60 => "10111100100001001110011010111010", 
    61 => "00111101010110001001101001111011", 
    62 => "00111101010100010000001100101000", 
    63 => "10111101110011001000011010110100", 
    64 => "10111110001000110100011100011111", 
    65 => "00111101101001111001001100100010", 
    66 => "10111100000100001110101000011110", 
    67 => "00111101000010110101010011111110", 
    68 => "00111100100110100100101100111011", 
    69 => "10111100110001110010011101110001", 
    70 => "00111101101110100110100001111100", 
    71 => "10111110000110011000111110100011", 
    72 => "00111101110111000100000100010100", 
    73 => "00111110000110111000000010101010", 
    74 => "00111101111001000100100111011100", 
    75 => "10111100000100001011000010100111", 
    76 => "10111101110000010100111111001110", 
    77 => "00111110001000101001100000000011", 
    78 => "10111101001100111110000011110011", 
    79 => "00111101011001100001111101101001", 
    80 => "10111101101011101111011110110101", 
    81 => "00111110000001000101010000010101", 
    82 => "00111101110110101001010000110110", 
    83 => "10111101101100111100101000111111", 
    84 => "00111110000100110010110111110101", 
    85 => "00111101101000011111101010000100", 
    86 => "10111101010001011101100000011100", 
    87 => "10111100110110111111011101111000", 
    88 => "00111110000111010111000000011110", 
    89 => "10111101101010000001010111111110", 
    90 => "00111101100101110010000101000010", 
    91 => "00111101000100001111000000101101", 
    92 => "00111101100101111100111001101110", 
    93 => "00111101111101001010111011001001", 
    94 => "10111101111110111000111111011110", 
    95 => "00111101011100100100001110011010", 
    96 => "10111110001010001010100101111010", 
    97 => "00111101001001001001100100111100", 
    98 => "00111101100100011100111111110001", 
    99 => "10111100000110011010010011010111", 
    100 => "00111011101000010100011001001100", 
    101 => "00111101101111001110111001101000", 
    102 => "00111110001000010000100101001010", 
    103 => "00111100110100110111110101010110", 
    104 => "10111101010110111100011010011011", 
    105 => "00111101101001110101111000111011", 
    106 => "10111100110010110111101110010100", 
    107 => "00111110000101000101001101001100", 
    108 => "10111110010001100100111101010101", 
    109 => "00111101110110011100111110011010", 
    110 => "00111110000010111100100111001101", 
    111 => "00111011100001110111110101001101", 
    112 => "10111101010110100101011100101111", 
    113 => "00111100101001110101111001001001", 
    114 => "00111101110001011100000001001110", 
    115 => "10111101010110111111100110010000", 
    116 => "10111101101110100101000100110101", 
    117 => "00111101110000010001110000001111", 
    118 => "00111011100001110000001000111101", 
    119 => "10111011000101001101110011000110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_11 is
    component inference_conv2d_f3_4_3_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_11_rom_U :  component inference_conv2d_f3_4_3_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


