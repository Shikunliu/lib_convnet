-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_95_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_95_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000111101001010110000010", 
    1 => "10111101000101010011011110000101", 
    2 => "10111100101100011111011101011110", 
    3 => "00111101010111100011111110111100", 
    4 => "10111100001010111110100100100111", 
    5 => "10111011010100111000011001001111", 
    6 => "10111101010110110001101010001000", 
    7 => "00111011110101011110011101101000", 
    8 => "00111110001000111101100101100110", 
    9 => "10111101110011000110111010111110", 
    10 => "10111100011001011010111111110011", 
    11 => "00111101110001111100101010110101", 
    12 => "00111101100101011111110110001011", 
    13 => "10111101001111111101011000001111", 
    14 => "10111101110110101000100100110011", 
    15 => "00111101001101101100110110111101", 
    16 => "10111101001101011000011110111100", 
    17 => "00111101011100110100101101010001", 
    18 => "10111110000110100100111100000001", 
    19 => "10111110000110000100100000111000", 
    20 => "10111100010101010100000000111001", 
    21 => "10111100001010111001000010101000", 
    22 => "00111101011001111111010010001011", 
    23 => "10111101001110010111010000010000", 
    24 => "10111110000101111011000101111101", 
    25 => "00111101000010111010001001000101", 
    26 => "00111101110011001011111110111111", 
    27 => "00111101110100011110010000101110", 
    28 => "00111110001010000111010000000000", 
    29 => "00111011100000001110001111000000", 
    30 => "00111100101000111010000100100101", 
    31 => "10111101101100101011110001001011", 
    32 => "00111101010000110000010101101110", 
    33 => "00111110010000110001101000001001", 
    34 => "00111101000001111101000011111111", 
    35 => "10111010111001100000011000000100", 
    36 => "10111100100100100110110001001001", 
    37 => "00111011000111101111010011001101", 
    38 => "00111101101010000000010101101101", 
    39 => "00111100000100110000110100011000", 
    40 => "10111110000110111011010010010001", 
    41 => "00111110000110101010000111010111", 
    42 => "10111100100111010100011010011000", 
    43 => "10111100000110011101111101101111", 
    44 => "10111110000011001001110000001011", 
    45 => "10111101101110100000111001110111", 
    46 => "00111100111010100001000000001001", 
    47 => "10111100110111110010101011010011", 
    48 => "10111110001110000110111101001000", 
    49 => "00111101110111011001011101110000", 
    50 => "00111101110110111011101001010110", 
    51 => "00111101010101000011011000011000", 
    52 => "10111101000101001100100001111010", 
    53 => "10111101111011011010111111010001", 
    54 => "10111110000011010000100010010010", 
    55 => "10111110000101111111110100111111", 
    56 => "10111101100010101000111000000110", 
    57 => "00111101110110010110010100101100", 
    58 => "00111011101001100011101011010010", 
    59 => "10111110010001101010110100101110", 
    60 => "00111101100010001111001001001101", 
    61 => "00111101100001110100001111110111", 
    62 => "00111110000000000001001100100011", 
    63 => "10111101111000101001111110011101", 
    64 => "10111100100011110001110100001001", 
    65 => "10111011101100000011111010001100", 
    66 => "00111100110011001111100100001101", 
    67 => "10111101100100100101011011001010", 
    68 => "10111101000110000101010101111100", 
    69 => "00111100111000011000000101011010", 
    70 => "10111101011011000111010111100000", 
    71 => "10111110001101000010101000100100", 
    72 => "00111100100101100101110001100011", 
    73 => "00111110000001011000100111110000", 
    74 => "00111101111001001011111011000110", 
    75 => "10111101010101110001111101101100", 
    76 => "00111101110000111110101010100110", 
    77 => "10111101000010101000001110010111", 
    78 => "10111100111110100100011100100100", 
    79 => "10111101011010100000110110100000", 
    80 => "10111101000000010011000100111110", 
    81 => "00111010101011010000100011100010", 
    82 => "10111101101001111011111100000100", 
    83 => "00111101100110011111001001101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_95 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_95 is
    component inference_mult_1_120_120_84_s_W4_95_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_95_rom_U :  component inference_mult_1_120_120_84_s_W4_95_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


