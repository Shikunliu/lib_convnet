-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001001111101101111110101", 
    1 => "00111110010111000110010010111011", 
    2 => "00111110000100111101010011110001", 
    3 => "00111101001011100101110101110110", 
    4 => "00111011101111100010010110010101", 
    5 => "00111110010010011111111000000000", 
    6 => "10111101001011010110101110101001", 
    7 => "10111101000101100110111101011110", 
    8 => "00111011001110101010111011101000", 
    9 => "10111101100101101001111000000111", 
    10 => "10111101000101010001010111000001", 
    11 => "10111100010101110010110000110111", 
    12 => "00111101110000010001011000110000", 
    13 => "10111101010100011010010001101101", 
    14 => "10111110001101101110100001101100", 
    15 => "10111010100111001110010101010100", 
    16 => "00111100101000100101100111111101", 
    17 => "10111101110011010011101101101101", 
    18 => "00111101001011101001101100000011", 
    19 => "00111100110111001100001101001111", 
    20 => "10111101101001010011110010000000", 
    21 => "10111010101100101100100101000000", 
    22 => "10111110000000110000111101001001", 
    23 => "00111100101111100010001010110000", 
    24 => "10111110000101010110000100001011", 
    25 => "10111101110101110001100101110010", 
    26 => "00111100100111101111110110000111", 
    27 => "00111101101001101010110001010111", 
    28 => "00111101101011001110001010001111", 
    29 => "10111101000000111110101101000111", 
    30 => "00111100100100101011110100000111", 
    31 => "00111101110010000001010000000000", 
    32 => "10111101101000011011111111001011", 
    33 => "00111110000100101011011110111011", 
    34 => "10111101101001110111011010011100", 
    35 => "10111100110000100010000010100001", 
    36 => "00111101110101011000101110000010", 
    37 => "10111101000010011011011011101000", 
    38 => "00111100010101001000010110010011", 
    39 => "10111101000111010000001010100101", 
    40 => "10111101100111000001000001011111", 
    41 => "00111100101000101000111110101101", 
    42 => "10111101101100000101001111111110", 
    43 => "00111110000011111000011011100100", 
    44 => "10111110010010100101000011010111", 
    45 => "10111101101010000110000101111110", 
    46 => "10111101001110010010011011111110", 
    47 => "10111100101100111001100010110100", 
    48 => "10111101110011011011001011110110", 
    49 => "10111101001111010011010011011111", 
    50 => "00111101101111110110101011110010", 
    51 => "10111110010101110101010110111101", 
    52 => "00111101110110011010000101110111", 
    53 => "10111101100100100011001111000100", 
    54 => "10111100110101111001011100101011", 
    55 => "00111110000011011011110100110000", 
    56 => "10111100111100001010101100101110", 
    57 => "00111100011111100001100010011111", 
    58 => "10111100100010001000001111001000", 
    59 => "00111101001101001011110001101010", 
    60 => "10111110000110110101110101000110", 
    61 => "00111101011001001010010110000001", 
    62 => "00111110000010011011110111000111", 
    63 => "10111101000010001011100011110001", 
    64 => "10111101101110001001001111101110", 
    65 => "10111100100000011101101111011000", 
    66 => "00111100100101101111111111110111", 
    67 => "00111101100001010011001110111110", 
    68 => "10111101101111010000010000000010", 
    69 => "00111101010011011101100011101100", 
    70 => "00111100111000100001100101100101", 
    71 => "00111101110100010000110000101100", 
    72 => "10111101001000111000011100111110", 
    73 => "00111101100110100100010110101100", 
    74 => "10111101011100001111010111010111", 
    75 => "00111101100110110110000101011101", 
    76 => "00111101010011111100011111011001", 
    77 => "10111101010010001101010010111011", 
    78 => "00111110000001011000001100011111", 
    79 => "00111101110100010010100110001001", 
    80 => "10111101001100001110101100001010", 
    81 => "10111101000001100000011100110000", 
    82 => "10111100011010001110111000000000", 
    83 => "00111101111110111011010010010001", 
    84 => "10111101000100101100101111001111", 
    85 => "10111101010001011010111101101100", 
    86 => "10111001011100101111100010000110", 
    87 => "00111101001111010110110001010111", 
    88 => "10111101101001011100010011011110", 
    89 => "10111100100110110000100011010000", 
    90 => "10111101110001001110100100100011", 
    91 => "00111101101001000001011010111110", 
    92 => "10111101101110010110001110001100", 
    93 => "10111101100101011010001001101100", 
    94 => "00111100100111101101000001110000", 
    95 => "00111100111001110111010010000011", 
    96 => "00111100100101000101110111110000", 
    97 => "10111101110011110011001010111110", 
    98 => "00111011111011001010110101111101", 
    99 => "10111110000100011010110110100111", 
    100 => "10111101000110111011110000000011", 
    101 => "00111100100101011110101111000101", 
    102 => "10111101001110011110101100010011", 
    103 => "10111101100000001100001111010010", 
    104 => "10111101101111011010011010010111", 
    105 => "10111101110011010011000011110000", 
    106 => "00111011101100000101100111001111", 
    107 => "10111101111100110011000000001110", 
    108 => "10111101001000011101011111000001", 
    109 => "00111101010111010101001010100111", 
    110 => "10111100101101000001000000111101", 
    111 => "00111101000010010001100110111010", 
    112 => "10111110000011000111110101011111", 
    113 => "10111110000110101000010111001011", 
    114 => "10111101000010000100010111001111", 
    115 => "00111100111001011111100110001111", 
    116 => "10111110000011100001001011101000", 
    117 => "00111100000111110101101111110001", 
    118 => "00111100101100010101011110010001", 
    119 => "10111100000100110101010011010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_11 is
    component inference_conv2d_f3_3_2_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_11_rom_U :  component inference_conv2d_f3_3_2_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


