-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001100100011001101011001", 
    1 => "00111101000011011111010101010110", 
    2 => "10111100011111011100110111110111", 
    3 => "00111110000100001010100010001111", 
    4 => "00111101111000111010000100001010", 
    5 => "00111101000000111101000011000000", 
    6 => "10111100010011111011111011110000", 
    7 => "00111101011111111111110001101111", 
    8 => "10111100010100011110111110110111", 
    9 => "00111101111000100011011111001110", 
    10 => "00111100110101110001100010000000", 
    11 => "10111101001000111001001100011000", 
    12 => "10111100110100010100011110111100", 
    13 => "00111101011111100111111100101100", 
    14 => "00111101111000111010100111110100", 
    15 => "00111101100100111110011111111001", 
    16 => "10111110000011011100010111010110", 
    17 => "00111110001000010000010100011000", 
    18 => "10111101100110001011101100001010", 
    19 => "00111101101000111111000011110001", 
    20 => "10111110010011111000011100100111", 
    21 => "10111110000101101111011011010111", 
    22 => "10111101000011011000101100000011", 
    23 => "10111101000011010110011010100000", 
    24 => "10111101000100111011011110001000", 
    25 => "10111110000011110100010111100001", 
    26 => "10111101101001000101001001011010", 
    27 => "00111101111101100111010101011000", 
    28 => "00111011100101110101000010101010", 
    29 => "00111101111101001001010000001100", 
    30 => "10111110010101011111011110000011", 
    31 => "00111110010011111110001010100100", 
    32 => "10111110000010101011101110001000", 
    33 => "10111110000010000001000100101100", 
    34 => "10111101101000010010110110101101", 
    35 => "10111101100100100000001011001100", 
    36 => "00111101000001111010011010111101", 
    37 => "00111101011001100000101101000111", 
    38 => "00111101000111010101010010001010", 
    39 => "00111101011111001110000011000110", 
    40 => "00111101101111111111010000001100", 
    41 => "00111100110010011001010110101011", 
    42 => "10111101010010100100111111100101", 
    43 => "00111100011011111010011010000001", 
    44 => "10111101000100011010111011001111", 
    45 => "10111011100001001000110101011000", 
    46 => "00111101100101111011011000001101", 
    47 => "00111100000011010111010100111110", 
    48 => "10111100011001100110110111110011", 
    49 => "00111100000010010000000011110000", 
    50 => "00111100110100100100010010100110", 
    51 => "10111101101110101000000110011001", 
    52 => "10111101110011000110001110010011", 
    53 => "00111101111000011101111000100111", 
    54 => "10111101000001111110100100111000", 
    55 => "00111010000010110111010110000011", 
    56 => "10111101101001100001011010001101", 
    57 => "00111101000100111111100110110010", 
    58 => "00111101101110010010101111000011", 
    59 => "10111101101111001011110001110001", 
    60 => "10111101000110010101110110011111", 
    61 => "00111101010100110100100101010011", 
    62 => "00111101100101011000100011010110", 
    63 => "00111101101011111100111011000101", 
    64 => "00111110010000101001110011111110", 
    65 => "10111101001111110011010110111011", 
    66 => "00111101011110011000110100011111", 
    67 => "10111101100010101001010111110001", 
    68 => "10111110000101001111011010011101", 
    69 => "00111101000000010001000101011101", 
    70 => "10111100101000101111011011011011", 
    71 => "00111101000001101010001100000010", 
    72 => "00111110000001101101011001010110", 
    73 => "10111101100111000001010101011010", 
    74 => "10111100111101010110101001000101", 
    75 => "10111100111010011011010000101110", 
    76 => "10111100001001001001101011101010", 
    77 => "00111101110001111100111100000001", 
    78 => "00111110001001010111001100100001", 
    79 => "00111110010101001011110111111101", 
    80 => "10111101101110001011100100011010", 
    81 => "00111101010000001100011101110000", 
    82 => "10111101110100111011010010110011", 
    83 => "00111101111010010000110001001110", 
    84 => "00111110000101011011111010100001", 
    85 => "10111101101010000000101001001101", 
    86 => "00111101101110000110011100011010", 
    87 => "10111101001010001110001111010100", 
    88 => "10111110000100011010100000100110", 
    89 => "10111101100100011011001000011100", 
    90 => "10111101001010100110111011010100", 
    91 => "00111101010110110101100111111001", 
    92 => "00111101100110000110100100100101", 
    93 => "00111101101010100000011011101010", 
    94 => "10111011110010110101111010100011", 
    95 => "10111101011011010101000100000111", 
    96 => "10111101011001001010001101101000", 
    97 => "00111101000111101110101000000110", 
    98 => "00111101011011111111010100100110", 
    99 => "10111100000010111001111011011010", 
    100 => "10111110001111000001100101111110", 
    101 => "00111100011011000010000111111101", 
    102 => "10111100100000011110010100010010", 
    103 => "00111100111001011001011111010101", 
    104 => "10111010000000100110000001100100", 
    105 => "10111011100100110101100011001101", 
    106 => "10111101110100010110010001000001", 
    107 => "10111110000011111111010011111101", 
    108 => "10111110001010000110011110101110", 
    109 => "10111011100101100101000010111010", 
    110 => "00111100011101111111111000111110", 
    111 => "00111110010111111110111110111111", 
    112 => "10111110000101010100011101011010", 
    113 => "10111101101011001101010100001000", 
    114 => "10111011111111010101001001100110", 
    115 => "10111110010010010001010011110101", 
    116 => "10111101000010100000100110001001", 
    117 => "00111100101001101111110010001110", 
    118 => "00111110010110000101110000100101", 
    119 => "00111101110000110110011101111001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_0 is
    component inference_conv2d_f3_2_2_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_0_rom_U :  component inference_conv2d_f3_2_2_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


