-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_85_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_85_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110000001000110100100", 
    1 => "00111101100001000110010000100000", 
    2 => "10111100100111011001011001111110", 
    3 => "10111011110000010100101100111001", 
    4 => "00111101100100000110110000110111", 
    5 => "00111101101000000100101011000011", 
    6 => "00111101011101100001010001110100", 
    7 => "10111101101100111110010100100101", 
    8 => "10111101101101011001011111010101", 
    9 => "10111100100000001110000101110010", 
    10 => "00111101001011100010010010111100", 
    11 => "00111110000010011100001011000010", 
    12 => "10111101111011001111001010001100", 
    13 => "00111101100110011100000111000011", 
    14 => "00111110001011010001001010001000", 
    15 => "10111101010001101110010110011000", 
    16 => "10111110010001011110110011000100", 
    17 => "10111011111000101001111111011101", 
    18 => "10111110001100101110000110101100", 
    19 => "00111101101010000010110101000110", 
    20 => "10111101100100100111100101001010", 
    21 => "00111110000000011111010001101111", 
    22 => "10111101100100100010101110110001", 
    23 => "10111101100011000110100001011001", 
    24 => "00111101100110000011000100001100", 
    25 => "10111100111011010000001100000011", 
    26 => "10111101111000110000111011000011", 
    27 => "00111011100110110010010110001011", 
    28 => "00111010111101010100101111000111", 
    29 => "00111100100111011011000010000000", 
    30 => "10111101101111010100011110110001", 
    31 => "00111101000001111101011001110011", 
    32 => "00111110000101110100110100010110", 
    33 => "10111101010010010101100101111011", 
    34 => "00111101001000110000111110110101", 
    35 => "00111101011110110011110100001000", 
    36 => "00111101010011000111000111100011", 
    37 => "10111101010001100110110001000110", 
    38 => "00111101011000001110010001100001", 
    39 => "10111100100100011111111110100111", 
    40 => "00111100111111001110000111010011", 
    41 => "10111101010011111110101100110000", 
    42 => "10111101110111011000000101101011", 
    43 => "00111101101110101001110000111011", 
    44 => "00111101110010011100110011010011", 
    45 => "10111100100110101011100111110101", 
    46 => "00111100100011100101110101011011", 
    47 => "00111100101000111011110011010011", 
    48 => "10111101110001101011100100101111", 
    49 => "00111101100001010011110101001001", 
    50 => "00111101110010011101010011001011", 
    51 => "10111101111001001010010100010110", 
    52 => "10111110000110000011010000001001", 
    53 => "10111110000110011100011000101010", 
    54 => "10111101010000101111101010000110", 
    55 => "10111101010110100000101010100011", 
    56 => "10111101101100110100110001111000", 
    57 => "00111101111110111110101000001100", 
    58 => "10111101101001001110010001011110", 
    59 => "10111101010101001011001110110110", 
    60 => "00111101010110101001110010011001", 
    61 => "00111101001001101111001001100011", 
    62 => "10111110001010110011001000000101", 
    63 => "00111110000111000111110011011001", 
    64 => "00111011111111011101100001011101", 
    65 => "00111100000011100011111100110011", 
    66 => "10111101111110011101110100111100", 
    67 => "00111011111110100000111100100101", 
    68 => "00111101110011001011001010010110", 
    69 => "00111100011101101000010110011000", 
    70 => "00111101011110011110010001111000", 
    71 => "10111100100000100110010101101011", 
    72 => "00111101001101001100000000010110", 
    73 => "00111110000110010111010101101101", 
    74 => "10111010001111001100000110111101", 
    75 => "10111101111110100011000110100101", 
    76 => "00111101100100001100000000001100", 
    77 => "10111110000101101001000010011011", 
    78 => "00111100000110101111000101011101", 
    79 => "10111101110001101100110101010001", 
    80 => "00111110000011000101000110011000", 
    81 => "00111101111111000111101101000110", 
    82 => "10111101101110110110110000000010", 
    83 => "10111011110110101011111110111111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_85 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_85 is
    component inference_mult_1_120_120_84_s_W4_85_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_85_rom_U :  component inference_mult_1_120_120_84_s_W4_85_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


