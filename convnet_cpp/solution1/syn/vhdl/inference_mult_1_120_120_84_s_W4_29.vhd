-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_29_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_29_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001111010000101010101010", 
    1 => "00111101100010011110111110001000", 
    2 => "10111101101001111001011100101011", 
    3 => "10111101000110111111111010110100", 
    4 => "10111100110000100010011001001011", 
    5 => "10111101010000010001010011101110", 
    6 => "00111101000100110010110110100100", 
    7 => "00111110000011001100100111101011", 
    8 => "10111100101011110000101001000100", 
    9 => "10111100000010001101010100100110", 
    10 => "00111101111111011000100111001110", 
    11 => "10111101101000101100010000000000", 
    12 => "00111110011010010000100100101001", 
    13 => "10111101001011010001010000011010", 
    14 => "10111101110010100010010111110100", 
    15 => "10111101111101001010101110100100", 
    16 => "10111101100000100111010001000001", 
    17 => "00111101110111110011011100110011", 
    18 => "10111100101111101101110111110111", 
    19 => "00111101100000011110110111101111", 
    20 => "00111110000010001000000010010101", 
    21 => "10111110001001011000111011101011", 
    22 => "10111101000110000101011010001001", 
    23 => "00111101011010100001100111100101", 
    24 => "10111101101100010101001000111000", 
    25 => "10111101000011101011100100000000", 
    26 => "00111101000110111001000110100111", 
    27 => "10111110000110111101101001010001", 
    28 => "10111011011011000111000100000010", 
    29 => "10111011110001100101101101101111", 
    30 => "10111101001000000110000010101110", 
    31 => "10111101111110010111100010010010", 
    32 => "00111101110010100110000110000011", 
    33 => "10111100111010011001010100100101", 
    34 => "00111101001011111111101110100110", 
    35 => "00111110010001111111100101010001", 
    36 => "00111101001110110010100010110000", 
    37 => "00111101000010101000111000101110", 
    38 => "00111110010101010010011100011100", 
    39 => "00111101110011110000011100111010", 
    40 => "00111110001000101001001000111110", 
    41 => "00111101011101000110000110011100", 
    42 => "00111101001000010100101000110010", 
    43 => "00111101100010101100110000001100", 
    44 => "10111101001011100000001111101010", 
    45 => "00111101001101110001100000010101", 
    46 => "10111100101000110000000111000010", 
    47 => "00111110001100110111000101010100", 
    48 => "10111110001011111101000101010111", 
    49 => "00111101100111000010110110000101", 
    50 => "10111101010100111110111100110110", 
    51 => "10111101001111010010100100100001", 
    52 => "00111011100011001010110111100011", 
    53 => "10111101111001100111110001101100", 
    54 => "10111010101010001111110001100011", 
    55 => "00111101000101111101111010101110", 
    56 => "10111101001100101110001011111100", 
    57 => "00111101011110010100101001010100", 
    58 => "10111101001100010011101010000101", 
    59 => "10111101101001100110000111010111", 
    60 => "10111100111010101000101110001111", 
    61 => "10111101111101101011101010001100", 
    62 => "10111110001110001101110000010010", 
    63 => "00111110000011111000011100100111", 
    64 => "10111100000001111111100100111110", 
    65 => "10111110001000000011111111110111", 
    66 => "00111101010111001010001000010010", 
    67 => "00111110000100111011011110010101", 
    68 => "00111101010001111100110000101101", 
    69 => "10111101001101011011110100000001", 
    70 => "00111100000000101000011100000011", 
    71 => "00111110000000010011101110011111", 
    72 => "00111101011000111001100110011000", 
    73 => "10111110000110010100111110101101", 
    74 => "00111101101001011101101110101100", 
    75 => "10111110001010111000000000100100", 
    76 => "00111101001000111100001010110011", 
    77 => "10111100100110011100000100111100", 
    78 => "00111100110000011111111101001001", 
    79 => "10111010101011010010100101101110", 
    80 => "00111100111100100100001111101010", 
    81 => "00111110000001011101100111100100", 
    82 => "00111101110010010010111111011010", 
    83 => "00111101110001000111001000000101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_29 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_29 is
    component inference_mult_1_120_120_84_s_W4_29_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_29_rom_U :  component inference_mult_1_120_120_84_s_W4_29_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


