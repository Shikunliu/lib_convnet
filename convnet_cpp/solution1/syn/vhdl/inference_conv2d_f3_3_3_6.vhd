-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100011000100100101001111000", 
    1 => "10111101110000100101010000000011", 
    2 => "10111101010010100011110111000001", 
    3 => "00111100000001001000111100110001", 
    4 => "00111110010001111000111100100110", 
    5 => "00111011111011111010110111001101", 
    6 => "10111101010100000011101111101101", 
    7 => "10111101100011010101001000000110", 
    8 => "00111101011110010110101010100000", 
    9 => "00111101011111011000100111001110", 
    10 => "10111101001111010000110111011101", 
    11 => "10111101110111001100010010101100", 
    12 => "10111110000111011000000111110001", 
    13 => "10111100110100011111001001110001", 
    14 => "10111101000010011101001110111110", 
    15 => "00111101100001000101001011010011", 
    16 => "00111101011010111010010000001110", 
    17 => "10111001101110000111010000110110", 
    18 => "10111100000111010111001111100100", 
    19 => "00111110001000010000100100000111", 
    20 => "00111101101010010010001101111010", 
    21 => "00111100000101111000100100101001", 
    22 => "10111101011010011001011110101001", 
    23 => "10111110010000101100000010100101", 
    24 => "10111110000101000111101011100001", 
    25 => "10111100101011010101101000001011", 
    26 => "00111010111111010101111010111011", 
    27 => "00111110000110011011010100100000", 
    28 => "00111101011010010100001010111010", 
    29 => "10111101100101001110011111101111", 
    30 => "10111101001010001100110000111101", 
    31 => "00111110000010011110110010110011", 
    32 => "10111110001110011101101101100110", 
    33 => "10111101100010110100110100010011", 
    34 => "00111101101010001100010101000011", 
    35 => "00111101101111100000110111101101", 
    36 => "10111101011111000010111010011111", 
    37 => "10111100101011011011111101010110", 
    38 => "10111110000100010011010110011000", 
    39 => "00111100100000101000001011000111", 
    40 => "00111101101010111011111001000100", 
    41 => "00111100111111000100101101000000", 
    42 => "10111101100010110011100010010011", 
    43 => "10111100010100100101100010010010", 
    44 => "00111101011101100111100110100100", 
    45 => "10111110000001101011111100000001", 
    46 => "10111101110000001111100011101111", 
    47 => "10111100001100100110101001001011", 
    48 => "00111110000010101101001010011010", 
    49 => "10111110000101110011010101111110", 
    50 => "00111110001111010111100010000001", 
    51 => "00111101111000010010011100101101", 
    52 => "00111011101100110001101011110101", 
    53 => "00111010000011101101000001110000", 
    54 => "00111101101101001111101100011111", 
    55 => "10111101000011101101010010101111", 
    56 => "10111101010010101000000011000010", 
    57 => "00111100100111110100000010100011", 
    58 => "10111110001000100111010001011100", 
    59 => "00111101110011000110101111001111", 
    60 => "00111101000010101110001101010011", 
    61 => "00111101111111010110010000001111", 
    62 => "00111101110111000101111001110000", 
    63 => "00111110001110110111100101010011", 
    64 => "10111101100000011101011110100110", 
    65 => "00111110000000001101000100110001", 
    66 => "10111101100001011101001110110100", 
    67 => "10111101101100110111101010110110", 
    68 => "00111101110100000101001000001101", 
    69 => "00111100101011110011111111110100", 
    70 => "00111100010101110000000100000011", 
    71 => "10111101110111000011100100110111", 
    72 => "10111100101101110011010010110101", 
    73 => "10111100101101110101100101101000", 
    74 => "10111101111101110100011000000010", 
    75 => "10111101001101101101000000100110", 
    76 => "10111110001010111100010101011000", 
    77 => "00111101010000010001100100100000", 
    78 => "10111101000101011111101011011110", 
    79 => "00111100111010001001110000110110", 
    80 => "00111101110111100011101100000100", 
    81 => "10111101111011101001100100100000", 
    82 => "00111100110100011110001000010101", 
    83 => "10111110000000000000001101101000", 
    84 => "10111101100110010000110110011101", 
    85 => "00111100010011101111111110101101", 
    86 => "10111100100110111100111101101001", 
    87 => "00111011101010111011001100110111", 
    88 => "10111101101100111110110110010110", 
    89 => "10111110000100010110110101101110", 
    90 => "10111110000101011100011000111011", 
    91 => "10111101101111101000011001001110", 
    92 => "10111101011000011000010100100000", 
    93 => "00111101100100011100101010100110", 
    94 => "10111110000001010101001100100110", 
    95 => "00111101110000101010001110100110", 
    96 => "00111101101111101000100000010110", 
    97 => "10111100001000101001001101001000", 
    98 => "10111101010100110000011100101001", 
    99 => "00111101000111110110010111000001", 
    100 => "10111101111100100110111100011110", 
    101 => "10111100101011001110000001101001", 
    102 => "10111110000010100110000000001011", 
    103 => "00111100101011010100100011011001", 
    104 => "10111101111100000010011010001001", 
    105 => "10111100100111100101100000010000", 
    106 => "00111101101110100010010000101011", 
    107 => "00111100110000111011100010111100", 
    108 => "10111110001011100010100000100100", 
    109 => "00111011101001010101001001001010", 
    110 => "00111101100011011000011010110110", 
    111 => "00111110001010100011001011110100", 
    112 => "10111101100011100010010000001101", 
    113 => "10111101100010110000111010100010", 
    114 => "00111110001101000101101100101001", 
    115 => "00111100100010110010111011010010", 
    116 => "00111100010110101001000000000100", 
    117 => "10111011101110010110110100110100", 
    118 => "10111101000001000101101001101101", 
    119 => "00111101111011000000110011101001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_6 is
    component inference_conv2d_f3_3_3_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_6_rom_U :  component inference_conv2d_f3_3_3_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


