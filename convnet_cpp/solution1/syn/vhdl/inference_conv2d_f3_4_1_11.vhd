-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110000100101010101111011", 
    1 => "00111101101001101111100110101100", 
    2 => "00111101011010101101100011010111", 
    3 => "10111100101001110111101100000100", 
    4 => "10111101000010110011101110011101", 
    5 => "00111101110110101000011000001110", 
    6 => "00111101110010111111101110101001", 
    7 => "00111011101111001001100110100100", 
    8 => "00111100110010110100001001010011", 
    9 => "00111101110110100010100111000111", 
    10 => "00111101001111010100101000101000", 
    11 => "10111101101101100000110001100001", 
    12 => "10111101111100100010111100100111", 
    13 => "00111110001011111100110110101011", 
    14 => "00111101100001100011110000111111", 
    15 => "10111110001000100100010100101100", 
    16 => "10111101010000001011110011011001", 
    17 => "10111110001110111110110101110100", 
    18 => "00111101000111100001101000010111", 
    19 => "00111101011001100011010110111111", 
    20 => "10111101010001101001010100101011", 
    21 => "10111101100000101010011101010010", 
    22 => "00111101101110001110011010101001", 
    23 => "00111101001011000001100001010111", 
    24 => "10111101110011111011111010111010", 
    25 => "00111011110101111011111100000100", 
    26 => "10111011111011010100001010001110", 
    27 => "10111101011010010001011110000110", 
    28 => "10111100111110011010101001000110", 
    29 => "00111110010000010100011111110001", 
    30 => "10111101110101010101000011001010", 
    31 => "10111110000000101111111110001111", 
    32 => "10111100101000011111010110111110", 
    33 => "10111101010000111101000101111100", 
    34 => "00111110000010010001011001000100", 
    35 => "00111101001101101001010110001001", 
    36 => "10111101100010001001100100010001", 
    37 => "00111101101101011000110101100110", 
    38 => "00111101100010001100011001000010", 
    39 => "10111101110100110100000011010101", 
    40 => "00111101000100100011000101000000", 
    41 => "10111100101101100100100111010100", 
    42 => "10111101101000000010111010101001", 
    43 => "00111011000000001010101010110101", 
    44 => "10111101100011010010111011011000", 
    45 => "10111101100001101101110000011010", 
    46 => "10111100000101110101100010001100", 
    47 => "10111100101001100010001100010101", 
    48 => "10111101110011101110001000000000", 
    49 => "10111110000001111001101010101110", 
    50 => "10111101101000110011101000011111", 
    51 => "00111110001000011011000100010000", 
    52 => "00111101100010101100101000101001", 
    53 => "00111100111101011110100100100110", 
    54 => "10111110001000101110110101111000", 
    55 => "00111100000010010111011101100011", 
    56 => "10111101111011111111110100011110", 
    57 => "00111010010001011001111111000011", 
    58 => "10111101110100110101010000111011", 
    59 => "10111101010011010001000111001100", 
    60 => "00111101111000111000111000101010", 
    61 => "00111011101110001010100000111101", 
    62 => "10111110000011011101011100100011", 
    63 => "10111101100101011110111000010011", 
    64 => "00111101010011101111001010010010", 
    65 => "00111101111011011101011100100011", 
    66 => "00111101101100101000110001010010", 
    67 => "00111100101000001110000001001010", 
    68 => "00111101101110000101000100110000", 
    69 => "10111100111110101011000101000001", 
    70 => "10111101111111011101001100110101", 
    71 => "10111100001101100110110101111010", 
    72 => "10111110000111000001010110010000", 
    73 => "00111101100000001110100010101110", 
    74 => "10111100011010001100101100110000", 
    75 => "10111100111010100111110011100001", 
    76 => "00111101110010011110010010111011", 
    77 => "00111101000010111000101110111010", 
    78 => "00111101101101111011001101111011", 
    79 => "00111101101110100111101000011010", 
    80 => "00111011110101101110010100010100", 
    81 => "00111101101001010111101110101101", 
    82 => "00111001101011101101011100110010", 
    83 => "10111101111100100101000010110101", 
    84 => "10111100011011001101010100010101", 
    85 => "10111101010100101100111010001001", 
    86 => "00111101111111101110011011111011", 
    87 => "00111100010001011000001001010110", 
    88 => "10111100111111101000011101011010", 
    89 => "10111101101100011010101101011001", 
    90 => "10111101101111110100111011100101", 
    91 => "10111100110000101001101010101111", 
    92 => "10111101101010111010110010001100", 
    93 => "00111100101001011111100101011001", 
    94 => "00111101101110100000111101001101", 
    95 => "00111101100001111100010001000010", 
    96 => "00111110010000000101010100110010", 
    97 => "00111101001001100001011100111100", 
    98 => "10111100101000100011110111100011", 
    99 => "10111101110101011011000101000010", 
    100 => "10111101100111110000001001001100", 
    101 => "00111101110101001010011011101100", 
    102 => "10111101101101000101100010110010", 
    103 => "10111101110100011010010101000100", 
    104 => "00111100100010001110001001011101", 
    105 => "00111101001111000111010010010000", 
    106 => "00111100010100000010000110000001", 
    107 => "00111101100110101101110111101101", 
    108 => "10111101000000100001100101100101", 
    109 => "00111101001110100010110011101101", 
    110 => "10111101010100110000111010000000", 
    111 => "00111101101110000001111010011000", 
    112 => "00111101101111110100000100110110", 
    113 => "10111101101001110000010110101110", 
    114 => "00111101001111011010111010000010", 
    115 => "10111101000111110110001010000001", 
    116 => "10111101111000000111110001000010", 
    117 => "10111101011000101000011111101010", 
    118 => "10111101101001100011110101011001", 
    119 => "00111101101011001100001000011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_11 is
    component inference_conv2d_f3_4_1_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_11_rom_U :  component inference_conv2d_f3_4_1_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


