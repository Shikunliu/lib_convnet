-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110100100001001001010001", 
    1 => "00111011101011001000111110000000", 
    2 => "00111011000111010001000101001000", 
    3 => "00111101000000001101110101000000", 
    4 => "00111110010010100010100110000100", 
    5 => "10111100100100110000100010111100", 
    6 => "10111110001000000001111010101100", 
    7 => "00111101101111100110101101011011", 
    8 => "00111101011111111010011111010001", 
    9 => "00111101110101111010111101100100", 
    10 => "00111101010101000001100101011101", 
    11 => "10111101111110011100101101101000", 
    12 => "10111101101011100101100101010010", 
    13 => "10111101110000111001010100110000", 
    14 => "10111101111110101111111110110000", 
    15 => "10111110100110110111110100100000", 
    16 => "00111110010110110000001110011111", 
    17 => "10111110001011000101010101000011", 
    18 => "00111100111100001110111010110101", 
    19 => "00111010100110110001100101001100", 
    20 => "00111101101100011011000001101111", 
    21 => "10111101101111110011100011111011", 
    22 => "00111110000000010110110011101000", 
    23 => "00111101001111000000001010010101", 
    24 => "10111100011110011001111010111101", 
    25 => "10111110000111011001110111111110", 
    26 => "00111101101101101110010011011100", 
    27 => "10111110000010100011101000001000", 
    28 => "00111110010100001111110001110010", 
    29 => "10111100100001100011101000001100", 
    30 => "10111011010111000001010000111101", 
    31 => "10111101011111001000010010011011", 
    32 => "10111101001011011111111010101011", 
    33 => "00111110011000111000001011100100", 
    34 => "00111101101010111101010001010111", 
    35 => "00111101101010111111110000010101", 
    36 => "10111100010111001011000011011011", 
    37 => "10111101101011000101011000001100", 
    38 => "10111101110101110100000000111110", 
    39 => "10111100100101100011011001101101", 
    40 => "10111101001100101010010011001110", 
    41 => "00111101111101111010010011101000", 
    42 => "10111110001001011010101010110100", 
    43 => "00111101111101000010000010110100", 
    44 => "00111101101001111011010101000011", 
    45 => "00111100100001010011101100001000", 
    46 => "10111110001001011001010110111100", 
    47 => "00111100110100000100110101010101", 
    48 => "00111110011010100111010000111010", 
    49 => "00111110000001001111011101100110", 
    50 => "00111110001101000011000000101011", 
    51 => "00111100000001011001000111100101", 
    52 => "10111101000110000101001010100111", 
    53 => "00111101000000010110001001101011", 
    54 => "10111100101101101010100111100000", 
    55 => "00111101111001011010101010110100", 
    56 => "00111101110100001100011101111110", 
    57 => "10111100110010000100110110101100", 
    58 => "10111101001000011110011000111010", 
    59 => "10111100110011110111000100100010", 
    60 => "10111101000110110100111100010001", 
    61 => "00111110000111001110110111010101", 
    62 => "10111011100110101000101101000111", 
    63 => "10111100000100001111010000011001", 
    64 => "10111110000001110110010110111010", 
    65 => "00111101001111100111010001000100", 
    66 => "10111101111110101001011011010101", 
    67 => "00111101100000101101011101110011", 
    68 => "10111100111101111010001100111010", 
    69 => "00111101110110110110111011010110", 
    70 => "00111100111010101111001010000111", 
    71 => "00111101111111000010000110011111", 
    72 => "10111101110100100111000100110111", 
    73 => "10111101011010001011100100100111", 
    74 => "00111110001011000011110011100010", 
    75 => "00111100111100011000111010000011", 
    76 => "00111101100101110000001000011101", 
    77 => "10111101010001101110011101111011", 
    78 => "10111101100101110001011000100100", 
    79 => "00111101111011101010100011011010", 
    80 => "00111100010011100101001001110011", 
    81 => "00111101101010000101010101101111", 
    82 => "00111101001010100111110010101011", 
    83 => "10111100011111111001001101011110", 
    84 => "00111100001011000000100100001000", 
    85 => "10111101101100111100010001100000", 
    86 => "00111101001001010001010101100011", 
    87 => "10111101101100100001100010110111", 
    88 => "00111101110111000011000101011001", 
    89 => "00111101111110001111000101001110", 
    90 => "00111110000110110000010000100101", 
    91 => "10111101000110010000000101011001", 
    92 => "00111101101100110000011001100000", 
    93 => "00111100110101000001000110011010", 
    94 => "10111101000010100111111100010101", 
    95 => "00111101010000110101000110101001", 
    96 => "00111100011000000000100011101010", 
    97 => "10111101000001011101001100101110", 
    98 => "00111101100101011110110100000111", 
    99 => "10111101000010011111111001010001", 
    100 => "10111100110101000001100000011011", 
    101 => "10111110000110010100001001001110", 
    102 => "10111101000100010011001011011110", 
    103 => "00111101100110001110110000010000", 
    104 => "10111101010111101001111010000110", 
    105 => "10111101001010101000010110110000", 
    106 => "10111101001110111000101110101100", 
    107 => "10111101010100000000100000111011", 
    108 => "10111011110111110000111011101111", 
    109 => "00111110000101110011011011001110", 
    110 => "10111110000110001110110010010110", 
    111 => "10111101101000100110000001111101", 
    112 => "10111101110101001010000100100111", 
    113 => "10111110011011000100011000001111", 
    114 => "10111100000111110101101010100100", 
    115 => "00111100001011110000101100011011", 
    116 => "10111110010111100010100000100100", 
    117 => "00111101101001101000000000111111", 
    118 => "10111101111111101111011100111100", 
    119 => "10111101011000011111010100011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_14 is
    component inference_conv2d_f3_1_4_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_14_rom_U :  component inference_conv2d_f3_1_4_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


