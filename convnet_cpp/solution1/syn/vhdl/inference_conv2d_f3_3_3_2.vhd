-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101110010011100110001101", 
    1 => "00111101010010111100110010111101", 
    2 => "10111101001011000101110100100000", 
    3 => "00111110010001011000110001001100", 
    4 => "10111101001101001010100111000000", 
    5 => "00111101000011111010101011101000", 
    6 => "10111100001111011100010101011101", 
    7 => "00111100111110010010111100101011", 
    8 => "00111100010100100000011110011111", 
    9 => "00111110000100101010101011100011", 
    10 => "10111011111010001100111100100001", 
    11 => "10111110000101010111101000110101", 
    12 => "10111101000110110011100111111101", 
    13 => "00111101111000010101101010001110", 
    14 => "10111101001000000101001101011101", 
    15 => "00111101001111110111000001011000", 
    16 => "00111110000001001100110111111011", 
    17 => "10111011111100100101101000111011", 
    18 => "00111101111110101111001110100001", 
    19 => "10111011101011100001111000100000", 
    20 => "00111101001110000011111101110111", 
    21 => "00111101001101010000110100001101", 
    22 => "00111101110100100011100110100100", 
    23 => "00111100101011110110100101000100", 
    24 => "00111101100110011111011111000011", 
    25 => "00111101010110111000010010001011", 
    26 => "00111101101111111110001011100111", 
    27 => "00111100010111111111100011111001", 
    28 => "00111100101011000101010010000111", 
    29 => "00111100101101000001000100010100", 
    30 => "10111101001011011010100110100001", 
    31 => "00111011101010101010000001101000", 
    32 => "10111110010000011100111111111111", 
    33 => "00111101101111010100101111111110", 
    34 => "00111101101111110000110101001111", 
    35 => "00111100101001001000110100010011", 
    36 => "10111101100001001101001011011011", 
    37 => "00111101111100110000100000110101", 
    38 => "10111100101100011001001010110101", 
    39 => "10111100101001001110111100111000", 
    40 => "00111100100011111101000100101110", 
    41 => "10111101000100111001101000010001", 
    42 => "10111101110111101001111110101110", 
    43 => "10111101100011101001001001001111", 
    44 => "00111101001100111011001001100100", 
    45 => "10111101101100101001010110100111", 
    46 => "00111110001000000100100000010111", 
    47 => "00111100010011011000101001100010", 
    48 => "10111101101111100010010101111000", 
    49 => "00111101111100110101011101100000", 
    50 => "00111110000000011000011110100101", 
    51 => "10111101001111010001111001101111", 
    52 => "10111110000000001010010001011101", 
    53 => "10111100001011101111100111101001", 
    54 => "10111100100010001010000100100100", 
    55 => "00111110001010011001110010111111", 
    56 => "10111101001000100110010000101001", 
    57 => "00111101100011111110111011001110", 
    58 => "00111100100000101010000110011011", 
    59 => "00111110000110011111011001100110", 
    60 => "00111011100110110010011100001101", 
    61 => "00111101010011010010011011011111", 
    62 => "10111101010000011010101011000101", 
    63 => "00111101110100101111110110111001", 
    64 => "00111100100101110000011000001100", 
    65 => "10111110001001100011110000110010", 
    66 => "10111100101101111110101000011100", 
    67 => "10111101110000001010011111000110", 
    68 => "10111101011100110000000100010100", 
    69 => "00111101111000011010110011011110", 
    70 => "10111011100010110101111111011011", 
    71 => "00111101100000111111010111000011", 
    72 => "10111110000100010001001000110100", 
    73 => "00111101011101010001111101001100", 
    74 => "10111110000101100011100100001101", 
    75 => "10111110001001100110110001101110", 
    76 => "10111100111001101111010100000010", 
    77 => "00111100001100001100110001010001", 
    78 => "10111010110000001011111111001110", 
    79 => "00111101110110101000000101010110", 
    80 => "10111101001000100010101100111001", 
    81 => "00111110000100000000010000110010", 
    82 => "10111101001111111000110011111001", 
    83 => "10111101101110101000000011010000", 
    84 => "00111100011000100101010011110100", 
    85 => "10111110000011110110100110001000", 
    86 => "00111101010001111111000101001011", 
    87 => "10111101110001101100011111010000", 
    88 => "00111101111101110010101101000101", 
    89 => "00111011111011111001001011100000", 
    90 => "10111101010101011101111110000000", 
    91 => "10111101111111100100001001011011", 
    92 => "10111101001011000010000001101010", 
    93 => "00111101111011111101101100001010", 
    94 => "10111110010011110011111001000111", 
    95 => "00111100111111100101001100100010", 
    96 => "10111110001011100011011100010101", 
    97 => "10111101000111011001000111111100", 
    98 => "00111010110000101110010011000010", 
    99 => "10111110000101100101111011001100", 
    100 => "10111101101011001001010110011000", 
    101 => "00111110000000001001111100011111", 
    102 => "10111101010110010101000101000000", 
    103 => "00111101000010011111010110111000", 
    104 => "00111101100010001100000011011100", 
    105 => "10111100001101010001100110111101", 
    106 => "00111101011011000000010101110111", 
    107 => "10111110010100000001110101011100", 
    108 => "10111101110110011101010101011110", 
    109 => "10111101011100011010101110001111", 
    110 => "00111101100010010011101011110111", 
    111 => "00111101110100010001110001101101", 
    112 => "00111101110010011000111011110101", 
    113 => "10111101100110010111110010001110", 
    114 => "00111101000101100010001010110111", 
    115 => "00111110001101010001101001000011", 
    116 => "00111101110100100100111110101001", 
    117 => "10111101001100000000000101010000", 
    118 => "10111110001110001010001000100011", 
    119 => "00111101101010101010100110011010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_2 is
    component inference_conv2d_f3_3_3_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_2_rom_U :  component inference_conv2d_f3_3_3_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


