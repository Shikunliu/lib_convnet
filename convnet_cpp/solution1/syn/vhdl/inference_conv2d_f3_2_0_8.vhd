-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110100010111010110001110", 
    1 => "10111110001100010000001010111100", 
    2 => "00111101011011000001111000000001", 
    3 => "10111101000101001010111001011101", 
    4 => "10111100010011001110100101010010", 
    5 => "10111101110011011101101101010101", 
    6 => "10111100110111000110110101010100", 
    7 => "00111101100100010110100011010001", 
    8 => "00111010011000001111110100110000", 
    9 => "10111100100111010010110011001100", 
    10 => "10111101101010011000101101001001", 
    11 => "10111101011111101100111100010011", 
    12 => "10111100110011010001110101010101", 
    13 => "00111101100111111101101010111001", 
    14 => "00111101101100110011101101000110", 
    15 => "00111100111110010000100010010101", 
    16 => "00111101100000110100111101101000", 
    17 => "00111101001001100111010000001000", 
    18 => "10111110000010101000001011101000", 
    19 => "00111101011011001110001001001100", 
    20 => "00111101100101110011111001110110", 
    21 => "10111101000011001001010001001000", 
    22 => "10111101111010001000000101011110", 
    23 => "00111110000101000111001111001101", 
    24 => "00111110000100100001101111000001", 
    25 => "10111101011010111010111000000100", 
    26 => "10111011101000110001001010101010", 
    27 => "00111101100011100110011110100010", 
    28 => "00111101001011001000000011111101", 
    29 => "10111011110000001001000000111110", 
    30 => "00111101111001001001101110100110", 
    31 => "00111110000000010111011101100100", 
    32 => "00111100101011001001001001100101", 
    33 => "10111101100111110010011101010000", 
    34 => "00111110000101001010011001100101", 
    35 => "10111100111011011010001110100111", 
    36 => "10111100101110100000011110011000", 
    37 => "00111100111010001000101010011000", 
    38 => "10111101011111100001101101011001", 
    39 => "10111110001001001011001011111011", 
    40 => "00111101101000110001110010001101", 
    41 => "10111101101100010110011010111000", 
    42 => "10111100011000010100011110101110", 
    43 => "10111101110000111100111000111011", 
    44 => "10111101101110100111100000011100", 
    45 => "10111101110100011100101001111101", 
    46 => "00111101000010010001011000001110", 
    47 => "00111011010000110111000010101110", 
    48 => "00111110010010010100001010010001", 
    49 => "10111101100101111010000001100101", 
    50 => "00111110010000011010011101011101", 
    51 => "00111101100110000110010111001010", 
    52 => "10111101111110110001011111001110", 
    53 => "10111101101101001100011100101010", 
    54 => "00111101010110000100001000010110", 
    55 => "10111101110111111010101010001011", 
    56 => "00111100011101010110111110000011", 
    57 => "00111101110011011011010000000011", 
    58 => "10111101001100111011101010101101", 
    59 => "00111110011011111100010011000001", 
    60 => "00111110000001100010100000000010", 
    61 => "10111110001100111100000000111100", 
    62 => "00111101111111010010000101111001", 
    63 => "00111101111000111111111001011101", 
    64 => "10111101110011100110001000010011", 
    65 => "00111100110110010111110000111101", 
    66 => "10111101011001110001111010100011", 
    67 => "10111101111100101100110101111101", 
    68 => "00111011110101010010011011001110", 
    69 => "10111110000011110110111110001111", 
    70 => "10111100111011000011000100010110", 
    71 => "00111101100000111111101011100111", 
    72 => "10111101111100111011110000001010", 
    73 => "10111101101101110011111011010011", 
    74 => "10111101001110000011010100110000", 
    75 => "00111110001100011111101110000011", 
    76 => "00111101001000011110001001011000", 
    77 => "00111110010010001110010111000101", 
    78 => "00111110000011110101000111110000", 
    79 => "00111100101011000100010010010111", 
    80 => "10111110000110010101001100010101", 
    81 => "10111101110111000000101000000111", 
    82 => "10111101010010111110010011011011", 
    83 => "10111110010100100010110111011000", 
    84 => "00111101101111111001111111001011", 
    85 => "10111100000010001111000111101100", 
    86 => "00111101100000000100111110110001", 
    87 => "00111101001101011111011100110011", 
    88 => "00111110000011111111010001110111", 
    89 => "00111100110011100010000000011111", 
    90 => "10111110000010001010011000010001", 
    91 => "10111101110000001000010100111001", 
    92 => "10111110000101011001010100110110", 
    93 => "00111101101100000000110111001010", 
    94 => "10111101101101011101111111000011", 
    95 => "00111101001010000010001010101111", 
    96 => "00111110000111101111100100010010", 
    97 => "10111101100100101110000000100111", 
    98 => "10111101011000111100110111010000", 
    99 => "00111100011001010000101001000110", 
    100 => "10111101100101110001010010011111", 
    101 => "00111101111110100010010110010110", 
    102 => "10111011101010101000001001100000", 
    103 => "10111110001001101011011001011011", 
    104 => "10111101101111010000010110100010", 
    105 => "00111101100010111110010110001001", 
    106 => "10111110001011101011001110011010", 
    107 => "00111101101000111010001111011111", 
    108 => "00111100010100000000011010101001", 
    109 => "10111101111111010000100011010101", 
    110 => "00111100101011000000110111011011", 
    111 => "00111011110011100000011110100000", 
    112 => "10111110001000101100100111010001", 
    113 => "00111101101000101101011110001110", 
    114 => "10111101100010011010101101000101", 
    115 => "10111101111110001111110101011101", 
    116 => "10111101011110111000011010001001", 
    117 => "10111101010001110000010111100011", 
    118 => "10111101010010011010100101111100", 
    119 => "10111100011110100110100000010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_8 is
    component inference_conv2d_f3_2_0_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_8_rom_U :  component inference_conv2d_f3_2_0_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


