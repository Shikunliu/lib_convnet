-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_63_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_63_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001101001111011110101001", 
    1 => "00111110001000110001100000110011", 
    2 => "10111101010101100101111101101101", 
    3 => "10111101110001101000011101000110", 
    4 => "10111101100010010000101001101011", 
    5 => "10111100100011110100010001110110", 
    6 => "00111101010100001111110011000010", 
    7 => "00111101110101001101001011110110", 
    8 => "00111101100111110110011110010111", 
    9 => "00111110001110111001110100111101", 
    10 => "10111101010001011001101111010001", 
    11 => "10111101110111000101000101010101", 
    12 => "10111101100100011000010000000111", 
    13 => "10111101000111111100101100100111", 
    14 => "10111100000001111110000010011111", 
    15 => "10111100110111110111100111100011", 
    16 => "10111101101111001110110111111101", 
    17 => "00111101011000111101001110101111", 
    18 => "10111101011100111111111100100110", 
    19 => "00111101101110100000101111001010", 
    20 => "00111101110011101110001010000110", 
    21 => "00111100100100010010100100011101", 
    22 => "10111100111110000011010000100100", 
    23 => "10111101101100110010011100100100", 
    24 => "00111110000001101000111101001011", 
    25 => "00111101000011010110100101110101", 
    26 => "00111110000100000100000011000000", 
    27 => "10111101110000010101110100000101", 
    28 => "10111100111110010101100010110001", 
    29 => "10111101110101111000100000010010", 
    30 => "10111100111001110010011010110101", 
    31 => "00111101011010010001010011100111", 
    32 => "10111110010000001011101100101100", 
    33 => "00111101010000001100100110001001", 
    34 => "10111101010001010101110100011100", 
    35 => "00111101010011101110010000011001", 
    36 => "00111101001100000101001101001111", 
    37 => "10111101100110001111001100001001", 
    38 => "10111100111110011001010110000011", 
    39 => "00111101101111110101100001010101", 
    40 => "10111100100101001001101100101101", 
    41 => "10111110000110000101101001001111", 
    42 => "00111100111000000100000010110010", 
    43 => "10111101110011100101000001000000", 
    44 => "00111100100110111010010101000010", 
    45 => "00111110000011001100010111111100", 
    46 => "10111110000011101110000010110001", 
    47 => "00111101100001101000000011100000", 
    48 => "00111101100010110001000110111001", 
    49 => "10111011100111010001100000010100", 
    50 => "10111101110110011101001111001100", 
    51 => "00111101100101010110100100011110", 
    52 => "10111101001100110001101101001011", 
    53 => "00111101100110110000011111010001", 
    54 => "10111110001100000101011011000101", 
    55 => "10111100001010000001100010111000", 
    56 => "00111101111000010110111100000000", 
    57 => "00111101001111010110110011011101", 
    58 => "00111110001110010111000111000001", 
    59 => "10111011100011111000111011010100", 
    60 => "10111101100000100101100110000100", 
    61 => "10111101111010011011010000010100", 
    62 => "10111100111010110101111010111110", 
    63 => "10111110010010110001011101001000", 
    64 => "00111101101101010011011011111111", 
    65 => "00111101100100001000101010011111", 
    66 => "10111101011111001101111011100011", 
    67 => "00111101110010011101011011100100", 
    68 => "00111101100111001001010101101111", 
    69 => "10111110000110111100101100011101", 
    70 => "10111101100111010100101110010011", 
    71 => "10111101110011001111000110000000", 
    72 => "00111101111011101001111101101011", 
    73 => "10111110000010101001010011111111", 
    74 => "10111110000110101010001110101101", 
    75 => "10111101100010001111001100010110", 
    76 => "10111101000111010001011001000001", 
    77 => "00111110001011110100101111101000", 
    78 => "10111101001000010101101010101001", 
    79 => "10111101010000110101010101110000", 
    80 => "00111101101100001110101011111100", 
    81 => "10111100110110000100111010101011", 
    82 => "00111100110100000111000100110010", 
    83 => "10111101010010111111001011101000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_63 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_63 is
    component inference_mult_1_120_120_84_s_W4_63_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_63_rom_U :  component inference_mult_1_120_120_84_s_W4_63_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


