-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101010110111100101010011", 
    1 => "10111100110110111100111001011101", 
    2 => "10111101100011011111111100010111", 
    3 => "00111110001110101110011000000000", 
    4 => "10111101010010110100110100000101", 
    5 => "10111101011000110010010000100111", 
    6 => "10111100001011101110001101000010", 
    7 => "00111110010001111110000000100110", 
    8 => "10111100110111100101111011111011", 
    9 => "00111101101011011110110000001111", 
    10 => "00111101100110000101000010000001", 
    11 => "10111001111100011011000110010001", 
    12 => "10111110000011100110011000000010", 
    13 => "00111101101111000100111011010000", 
    14 => "10111101100110100101010110000001", 
    15 => "10111100110011101110100000110000", 
    16 => "00111101011110011101011011110001", 
    17 => "00111101011110110110111011010110", 
    18 => "00111101111010100000011001100100", 
    19 => "00111101111000010101010011001010", 
    20 => "10111101110110100010110001100111", 
    21 => "00111101100101001000010001010001", 
    22 => "00111100110101111001001110011010", 
    23 => "00111110000001001111001001101011", 
    24 => "10111101110100110001111111001101", 
    25 => "10111101110101100100010100011100", 
    26 => "00111100000000101000101001001001", 
    27 => "00111110001100000000011011010001", 
    28 => "10111110000010010100101101111011", 
    29 => "00111110010011010110111111011011", 
    30 => "00111101010101111101001110010001", 
    31 => "10111101101001101100111110101101", 
    32 => "10111101010010011001110000101011", 
    33 => "10111101100101111011101110011011", 
    34 => "00111110011001101110011100011101", 
    35 => "00111101110101111111110110000010", 
    36 => "00111101101111011000000001000100", 
    37 => "10111100100101101111001100101100", 
    38 => "00111110001000001011111000001110", 
    39 => "00111101001101111100101100010011", 
    40 => "00111101101011010111101010011010", 
    41 => "00111101100011110100001010100001", 
    42 => "00111110001000011011111010110010", 
    43 => "00111100110000000011111001111111", 
    44 => "10111100101000001001001001111100", 
    45 => "00111100001111010011100110110010", 
    46 => "00111101000001010010101100110011", 
    47 => "00111101110001111000100001100010", 
    48 => "00111100001000001111010000101100", 
    49 => "00111100001101011101001001001010", 
    50 => "10111101001110001010110110010001", 
    51 => "10111101101111110110011001010101", 
    52 => "00111110000000001010011110000011", 
    53 => "10111101110001001001110000011111", 
    54 => "00111110000000000110000011111110", 
    55 => "10111110001010001110111100110101", 
    56 => "10111100001110111111101000010111", 
    57 => "10111101110101011101010111110101", 
    58 => "10111101100100001100111001110111", 
    59 => "10111101011101000010110110110100", 
    60 => "10111101101110010100100011000001", 
    61 => "10111011111010011100110011100011", 
    62 => "10111101011100110110110110000000", 
    63 => "00111101110111001100011111010010", 
    64 => "00111101010000010100100110010001", 
    65 => "10111101000110001101000100011101", 
    66 => "10111101111110111100111101001111", 
    67 => "10111101010101101010000110110010", 
    68 => "00111110000100001111011001101010", 
    69 => "10111101101101100101101111000010", 
    70 => "00111100100101111101000110101110", 
    71 => "10111100010110000010011000110010", 
    72 => "10111101111100110001001000101011", 
    73 => "00111100110011100011101100101100", 
    74 => "10111110010011010010110000111000", 
    75 => "00111101001010101000000001010111", 
    76 => "00111101100101101001100010000110", 
    77 => "10111101100101001101011010101111", 
    78 => "10111101011100101110001110011101", 
    79 => "10111101101001100110111111010110", 
    80 => "00111101101100011101100100000011", 
    81 => "00111110000011100001011101011101", 
    82 => "10111101111110101101010100111001", 
    83 => "10111110000101101110111010110111", 
    84 => "10111011100001110111011101101110", 
    85 => "10111110001100100110011000110100", 
    86 => "10111101101100010110000010111110", 
    87 => "00111101111001101111100000100111", 
    88 => "10111110010001001010101111100111", 
    89 => "10111011010101001011010001001101", 
    90 => "10111110000011101001101001110000", 
    91 => "00111101101010111011100011101011", 
    92 => "10111101101001000000101001101100", 
    93 => "00111101000111111000110111001111", 
    94 => "00111101000111111100010110110011", 
    95 => "00111010111001011011100100101101", 
    96 => "00111100110001010111110111101110", 
    97 => "00111110011101111111101100100110", 
    98 => "00111100010010000111110101000111", 
    99 => "00111101000111110001111000100011", 
    100 => "10111101011000111111000010111011", 
    101 => "00111101100001001100001100101110", 
    102 => "00111101100110111100000001010000", 
    103 => "10111110001101010010100100110101", 
    104 => "00111101000110110001110110101110", 
    105 => "00111101000100000111011011011011", 
    106 => "10111110000010111010101000010101", 
    107 => "00111101010100101100100101001011", 
    108 => "10111011011100010111011111010010", 
    109 => "10111100010010110101101001110001", 
    110 => "00111101110001011010000110100010", 
    111 => "10111100100110111011101010100110", 
    112 => "00111101100011011011100011001000", 
    113 => "10111101111011000010000001001111", 
    114 => "00111101110100001010001001000100", 
    115 => "00111101100010011000111100000010", 
    116 => "10111101110011100110001110100110", 
    117 => "10111100001011001000110100100111", 
    118 => "00111011101101111000011000111111", 
    119 => "00111101100010010001100001011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_13 is
    component inference_conv2d_f3_4_4_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_13_rom_U :  component inference_conv2d_f3_4_4_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


