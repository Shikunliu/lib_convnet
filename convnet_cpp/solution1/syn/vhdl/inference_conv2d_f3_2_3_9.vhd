-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111100101110110011110010", 
    1 => "00111101110011011101100100111100", 
    2 => "10111101101001001101000010011010", 
    3 => "00111101011001110011000101001101", 
    4 => "00111101011111101111010010011101", 
    5 => "10111101011010000000101001000000", 
    6 => "00111011110111000010111000101001", 
    7 => "00111101111111010000011010111100", 
    8 => "00111101101100100101110111000011", 
    9 => "10111101100001101011011011111100", 
    10 => "10111101101010000001101111111001", 
    11 => "10111101101001111100111011110100", 
    12 => "00111110000110010001100111110000", 
    13 => "00111101001101101010100101110101", 
    14 => "10111110100001110011110001110001", 
    15 => "10111110010011001111100001010001", 
    16 => "00111101111100100001111001100000", 
    17 => "00111101000110011110000010010111", 
    18 => "00111101100000100011111001000001", 
    19 => "10111110010000000101100101100100", 
    20 => "10111100101010001001000101001110", 
    21 => "00111101100101110100001011011101", 
    22 => "00111100110100001011110001000110", 
    23 => "10111100101100101110101111100110", 
    24 => "10111101100111111110110011011101", 
    25 => "00111010100111111111111010001110", 
    26 => "10111101101110000001011000110100", 
    27 => "00111110000110100100000111100101", 
    28 => "10111101100001010101010001110110", 
    29 => "00111101101000110001101010110111", 
    30 => "10111110001000011111001011011100", 
    31 => "10111101100010011100100000000000", 
    32 => "10111100101001001001100001100110", 
    33 => "00111100010000001000101100001011", 
    34 => "10111101110000001101111111010010", 
    35 => "10111101101010110101000000101011", 
    36 => "00111110001001101010001100111000", 
    37 => "10111101011111110010000001010111", 
    38 => "10111101101011001010011111111111", 
    39 => "00111110001100011100011011010010", 
    40 => "00111101101111110111100101001111", 
    41 => "10111011011010001001100001011010", 
    42 => "10111101110111001111011001111011", 
    43 => "10111010001010001000110101110101", 
    44 => "00111110000001011110110110001101", 
    45 => "00111101100000010010101111110010", 
    46 => "10111101100000001011111111110001", 
    47 => "10111101111101110001100001100101", 
    48 => "00111110000100011111100111110000", 
    49 => "10111101101110111000100111110010", 
    50 => "10111110001101011000001110100101", 
    51 => "00111101010000101101000001111010", 
    52 => "10111101110111001010110010001110", 
    53 => "00111101000100010111010010011101", 
    54 => "00111101001000010001000111001000", 
    55 => "10111101010000010101000100111001", 
    56 => "10111101110101110010011010001101", 
    57 => "10111101100000010111001101001101", 
    58 => "00111101110011111100011100011101", 
    59 => "10111011100010110111010010010011", 
    60 => "00111101000010000111101000111101", 
    61 => "10111110001001010110000101001110", 
    62 => "00111101101000011110101010010100", 
    63 => "00111011100110110100111001010000", 
    64 => "10111100110001000011000001111100", 
    65 => "00111110001001101001001100111010", 
    66 => "00111101001010110011100100110100", 
    67 => "00111101010100100010111101011101", 
    68 => "00111101101110011100001000111011", 
    69 => "00111101100111111010000100101000", 
    70 => "00111100100011111010100010110101", 
    71 => "10111101001111001000100110001001", 
    72 => "00111101100011000101101011010010", 
    73 => "00111101101011101000110110110010", 
    74 => "00111101101010000101100101101011", 
    75 => "10111101101001000110111011100000", 
    76 => "00111100110000011001100010111100", 
    77 => "10111101000110001001110110000110", 
    78 => "10111110000000001011100111011100", 
    79 => "00111110001110110111000101110110", 
    80 => "10111101100000110101001010011011", 
    81 => "10111101110100010111100010110011", 
    82 => "00111101100000111010000000110011", 
    83 => "10111101111110100001011001100001", 
    84 => "00111110010111011101001100110101", 
    85 => "00111101101100000111101110111011", 
    86 => "00111101111010101110100011100010", 
    87 => "10111101001000010100010111100110", 
    88 => "10111101000010101000001000011111", 
    89 => "00111110001010000100010011010000", 
    90 => "00111101101000101010110100100100", 
    91 => "00111100100100001010101101111111", 
    92 => "00111110011000010101001010110001", 
    93 => "10111101110011001100001011111111", 
    94 => "10111110010010100001011111110100", 
    95 => "00111110001010011001001011001001", 
    96 => "00111101101001010011101100110000", 
    97 => "00111101011010000111101100010100", 
    98 => "00111101100010111010110001111110", 
    99 => "00111110000011011011001000101101", 
    100 => "10111100011001000110000100111110", 
    101 => "00111101000101010101001111101111", 
    102 => "00111110001010111101110111111101", 
    103 => "10111110001000001000010010100101", 
    104 => "00111101001111110001101101001110", 
    105 => "00111101011000110111100011100001", 
    106 => "10111100001110101110110001100101", 
    107 => "00111101011110000001110011111000", 
    108 => "10111100000100101011110110011101", 
    109 => "00111110010101001100111010000001", 
    110 => "10111100100001110010011111011101", 
    111 => "10111101110010001001010111111001", 
    112 => "00111101010011001001010011001110", 
    113 => "10111100010000010011100110000110", 
    114 => "00111101100011001011111111100111", 
    115 => "10111101001001101011110001000111", 
    116 => "10111101010111011111010111101010", 
    117 => "00111101101100110011001100110011", 
    118 => "00111110001110100010110001100111", 
    119 => "10111101101110110111011001100011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_9 is
    component inference_conv2d_f3_2_3_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_9_rom_U :  component inference_conv2d_f3_2_3_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


