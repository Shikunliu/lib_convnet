-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011101010011010101010110100", 
    1 => "00111100101011000001010000100101", 
    2 => "10111110000011101100110100001000", 
    3 => "10111101100111101001111101000010", 
    4 => "00111100100111110011100000111111", 
    5 => "00111101011100101011100101110110", 
    6 => "00111110000110010101100111100110", 
    7 => "00111100110111000101001000010000", 
    8 => "10111100111101000001000110000000", 
    9 => "00111100100111111101011011001010", 
    10 => "00111101001101110101111101001000", 
    11 => "10111101101000101100010111001000", 
    12 => "00111101111010010101001100010101", 
    13 => "00111101101001000011101100111011", 
    14 => "10111101001111000101010000101001", 
    15 => "10111101010111100101001000010101", 
    16 => "10111101101010001111110111010110", 
    17 => "10111011011001011011111100001100", 
    18 => "00111100011100010101101100100010", 
    19 => "10111101111011111111010111000111", 
    20 => "00111110010110110110111000001101", 
    21 => "00111110010010100111011001010011", 
    22 => "00111101100010100101111001011110", 
    23 => "00111101010111101010110100110101", 
    24 => "10111101101101101001111110100111", 
    25 => "00111100101100000000011011000011", 
    26 => "10111101000000001111111001100010", 
    27 => "00111101000010111101110011100011", 
    28 => "00111101101010111010011001001111", 
    29 => "00111011010010101100001111011110", 
    30 => "00111101100010111001101001011011", 
    31 => "00111100101001100011110111101101", 
    32 => "00111100101001110010011111111000", 
    33 => "00111101011111001000010011010001", 
    34 => "10111101110001111111000110110111", 
    35 => "00111110000000001100010100100010", 
    36 => "00111101100110111110001011101010", 
    37 => "00111101010010001000001010100000", 
    38 => "10111101001101111110100110010110", 
    39 => "00111101101110100011101111010001", 
    40 => "00111101000101100010011010110011", 
    41 => "10111101010000110001011101011100", 
    42 => "00111101100011111110100001110110", 
    43 => "00111101110000110001010011011000", 
    44 => "00111110000100110101111000110001", 
    45 => "00111100001001101110101100100110", 
    46 => "00111100101001000110110111010011", 
    47 => "10111100100110001111111110101011", 
    48 => "00111101100001100000110101000101", 
    49 => "00111100001111001011001100001111", 
    50 => "00111100000011111111001100000111", 
    51 => "10111110000010101110000011000001", 
    52 => "10111101111111110100010001001110", 
    53 => "10111100111001110011101000000001", 
    54 => "00111101111101011100000011111101", 
    55 => "00111101000111000110010101110110", 
    56 => "10111101010111100111001111011001", 
    57 => "00111110000011001011000110001001", 
    58 => "00111101101101110101000010011001", 
    59 => "10111101010110111011101000100000", 
    60 => "00111011110101101101101011000011", 
    61 => "10111100100110000111000001101111", 
    62 => "10111101001010110010110101110110", 
    63 => "00111110010000100000010000101001", 
    64 => "00111100101001010001011110110010", 
    65 => "10111011011110000100000111000110", 
    66 => "00111011101100010011100100110011", 
    67 => "10111101100000000110101100011101", 
    68 => "00111110001101000111000111111000", 
    69 => "00111101100000000100000011001101", 
    70 => "00111101011010001010000011010011", 
    71 => "10111101011010000101111110000000", 
    72 => "00111101100100000101100110011010", 
    73 => "00111110010100011101101010111110", 
    74 => "00111101001101010000001011000111", 
    75 => "00111101001101110000001100000001", 
    76 => "00111101001000001001010001100000", 
    77 => "10111110000110101011110101011110", 
    78 => "10111100110000001011110111001011", 
    79 => "00111100111110101101101011000111", 
    80 => "00111011011000100101010100011111", 
    81 => "00111110000001111011111010011000", 
    82 => "10111101100011110110110101011011", 
    83 => "00111110001010111101110110111010", 
    84 => "00111101100101001011100100000010", 
    85 => "00111100100001100001011100000110", 
    86 => "00111101010101101100000100100111", 
    87 => "00111100111010111010001011100110", 
    88 => "10111101011001010000001000011000", 
    89 => "10111101100101001100010001010101", 
    90 => "00111100100011111000011100100111", 
    91 => "00111101001100110110100001011101", 
    92 => "10111101100100101001111010101011", 
    93 => "00111101100000100101011110100001", 
    94 => "00111101111100011000011001010101", 
    95 => "00111101100111011111000011101111", 
    96 => "00111101111000000000001100100101", 
    97 => "00111101110100101001101100101000", 
    98 => "00111100101010011010100110110010", 
    99 => "00111110001001100110101011011011", 
    100 => "00111101100111101100110010011100", 
    101 => "10111101000100000011000100100000", 
    102 => "10111110001010100110010010000000", 
    103 => "00111101001001010111101111010101", 
    104 => "10111110000101101000000001011010", 
    105 => "00111001110101111110110111111001", 
    106 => "00111101000001101000001010000000", 
    107 => "00111110001001011111011001110111", 
    108 => "00111011101000101100001001100010", 
    109 => "00111101111101100101001111001010", 
    110 => "10111110000000010110010001000001", 
    111 => "00111101110001001000011101110111", 
    112 => "10111101001111110000011101100010", 
    113 => "00111110001110111001011100110101", 
    114 => "10111101110111010010000101111001", 
    115 => "10111110001011101000000001111100", 
    116 => "00111110001000101110011101110001", 
    117 => "10111101110110110011101101110101", 
    118 => "10111101001001011001010001000100", 
    119 => "00111101100110110000000000001110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_7 is
    component inference_conv2d_f3_0_4_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_7_rom_U :  component inference_conv2d_f3_0_4_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


