-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100000001111000101000111", 
    1 => "10111101100011011011100011001000", 
    2 => "00111110001011011111000110011101", 
    3 => "10111101111000011101111110111001", 
    4 => "10111100001001100111001110011101", 
    5 => "10111101101000111111110111111111", 
    6 => "00111110000000011001001011101010", 
    7 => "00111100100101000001100101011101", 
    8 => "10111101001011101010000001110111", 
    9 => "10111110000101011101101000100111", 
    10 => "00111101011100011001101101001110", 
    11 => "10111110000000001011001100001011", 
    12 => "00111101111110000101100101000011", 
    13 => "00111101100000011011101101110001", 
    14 => "10111100110100100000100110111000", 
    15 => "00111101111010101010000100001110", 
    16 => "00111011101000111011010100010001", 
    17 => "10111101111010010111010100101001", 
    18 => "00111101011000001101011010001010", 
    19 => "00111110001110000010011101110100", 
    20 => "00111101111001010100111101111011", 
    21 => "00111110001110001111001100100011", 
    22 => "00111101101110010011000001100000", 
    23 => "00111110001000011101101111001011", 
    24 => "10111101011011000101101110001110", 
    25 => "00111101010111011010011010001001", 
    26 => "00111100111100111101110000000101", 
    27 => "10111110000000011111110111011111", 
    28 => "10111101110100101110010110011011", 
    29 => "00111100100100011111101011010100", 
    30 => "00111100100100111100111101010101", 
    31 => "10111101110111110110000000011000", 
    32 => "10111110000011110010100101001110", 
    33 => "00111100011100000100011010111010", 
    34 => "00111110001101001001000111110011", 
    35 => "10111101011010110000001111010101", 
    36 => "00111011011000000100001100100001", 
    37 => "00111101101110111101011111001101", 
    38 => "10111101101110100101101111110100", 
    39 => "00111110001001111010110010000010", 
    40 => "10111101100010100001011010111111", 
    41 => "10111101000001111111111101110011", 
    42 => "10111100110010011001111110111100", 
    43 => "00111101001101011111010001011110", 
    44 => "10111100101000010100001010100110", 
    45 => "10111101010000010111100000100000", 
    46 => "10111100010001000010111010011001", 
    47 => "10111001100010111011011101001000", 
    48 => "10111101100000101010100010010100", 
    49 => "10111101111000100100010111110110", 
    50 => "00111101001001011000101111000110", 
    51 => "10111100110101000101100101010011", 
    52 => "00111100100100101000010001100111", 
    53 => "00111101111010100101010110001111", 
    54 => "00111101000001011010000001010011", 
    55 => "00111101110101011110101111111011", 
    56 => "00111101011111101011001110011010", 
    57 => "10111100101010111000111111010001", 
    58 => "10111101110100100100000001110100", 
    59 => "10111101001000011000011100000100", 
    60 => "10111101000001010011000100010010", 
    61 => "10111101110001011100110011110001", 
    62 => "00111101100001100011100111111110", 
    63 => "00111100110001011100110100110100", 
    64 => "00111100011110000000111010011010", 
    65 => "00111100100100010001000010010100", 
    66 => "10111101111011101001100100100000", 
    67 => "10111010110111001011100110101010", 
    68 => "00111101000000100111111010010101", 
    69 => "00111110001000111000101110001011", 
    70 => "10111110001111001000100111110100", 
    71 => "00111101111101101111010000111000", 
    72 => "00111101001111101100110000100011", 
    73 => "00111101000000110100100101000110", 
    74 => "10111100101100111101110010100110", 
    75 => "00111110001011010010100110011001", 
    76 => "10111110000010000101001000101111", 
    77 => "00111101111101000000100100011100", 
    78 => "00111110001110100010001000101101", 
    79 => "00111101100000101100110001001000", 
    80 => "00111101000000100100010101101111", 
    81 => "10111100111010010000010110110011", 
    82 => "10111110001111000011110010011111", 
    83 => "00111101010110100111100001101100", 
    84 => "10111101000111111010111000000000", 
    85 => "10111100110000010010111101000000", 
    86 => "00111101101101010111010000100000", 
    87 => "10111101100011110101100011110110", 
    88 => "10111101001100001101110101101000", 
    89 => "10111101001101000111100100011001", 
    90 => "10111101101010010100000110010010", 
    91 => "10111101000100010111111111010101", 
    92 => "10111101000011011101010100100101", 
    93 => "10111101010010110000100000100001", 
    94 => "00111101111000010111100011110111", 
    95 => "00111101011000111010011000101101", 
    96 => "00111010100001000111101100100100", 
    97 => "00111101111010101111111011100111", 
    98 => "10111101101101000110100001011111", 
    99 => "00111110000101000101001100001001", 
    100 => "10111100011111101011010010100110", 
    101 => "10111011100011010101101010110001", 
    102 => "00111101110010111000111100100010", 
    103 => "10111101110110011011111101011001", 
    104 => "10111100011000000110111011010110", 
    105 => "00111110000110010011001000001110", 
    106 => "00111101110000111000111101000100", 
    107 => "10111101010101100110110100101010", 
    108 => "00111110000001001010011110110101", 
    109 => "00111100101101110110000101100000", 
    110 => "00111011010101100100011001001000", 
    111 => "10111101111111111000000000010011", 
    112 => "00111100001011100000010011110110", 
    113 => "10111101010001000010001000000011", 
    114 => "10111101000111101101100000110010", 
    115 => "10111101010111000010011111101001", 
    116 => "00111101001001100011111111101011", 
    117 => "10111011010101000110110110101011", 
    118 => "10111101011100100000001101101101", 
    119 => "00111100010100010001111110101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_0 is
    component inference_conv2d_f3_1_1_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_0_rom_U :  component inference_conv2d_f3_1_1_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


