-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000000110100100001101111", 
    1 => "00111100011000001000110100001001", 
    2 => "00111100100111000110110110111111", 
    3 => "10111011101101100010110011111000", 
    4 => "10111101110001011111001101111010", 
    5 => "00111100111111111010001100011001", 
    6 => "10111101111001101010110000100001", 
    7 => "00111101111110000000011011110010", 
    8 => "00111110001010001100000100010010", 
    9 => "10111110010000111100010011110100", 
    10 => "10111100100100100111000110111101", 
    11 => "10111101101100011011100110001110", 
    12 => "00111101011011110100011011000101", 
    13 => "10111101111101011000010100111000", 
    14 => "10111100111001001001111110111101", 
    15 => "00111101100111001110001001011001", 
    16 => "00111110000011111111011101011001", 
    17 => "10111100100111011101110101100001", 
    18 => "10111101101100000111110010000101", 
    19 => "10111110100001100111111101001110", 
    20 => "10111101000001110010001010000100", 
    21 => "00111100110100001010000110100011", 
    22 => "00111101001000011000001011010010", 
    23 => "00111101110000011101011101010110", 
    24 => "00111101111011110110101111100011", 
    25 => "00111101011111010110010100011011", 
    26 => "10111101011110101010101101000111", 
    27 => "00111101001010101110111101111101", 
    28 => "00111110000010101000111001110001", 
    29 => "00111110001110000110001000101100", 
    30 => "00111101111110010011111111110010", 
    31 => "00111101111011011000000100101000", 
    32 => "10111101110000000011110001110011", 
    33 => "10111101011101010101010100010111", 
    34 => "00111010001111101001001111110001", 
    35 => "10111101110101111000100110100100", 
    36 => "00111110000001111001100101011111", 
    37 => "10111100110111001000111110111000", 
    38 => "00111101100001101110111100110000", 
    39 => "00111101111110010101011110001010", 
    40 => "00111110000010000101001000101111", 
    41 => "10111101111111010100011100111001", 
    42 => "10111101111110100101111111001000", 
    43 => "00111101101100110110001100111010", 
    44 => "10111101110000001111101110101001", 
    45 => "10111101000011111110111100010001", 
    46 => "10111010110010010110110000011010", 
    47 => "00111110000000011100000011001010", 
    48 => "10111101000011100000000100010101", 
    49 => "00111101100110100000100000011111", 
    50 => "00111101110001010101000100110101", 
    51 => "00111011100111111001011101100000", 
    52 => "10111100111101110111010011100001", 
    53 => "10111101100001010110101011011001", 
    54 => "10111110100010000101000111101100", 
    55 => "10111100011011110010011010010100", 
    56 => "00111011000110100011111100000110", 
    57 => "00111101110101101100101101010011", 
    58 => "00111101011110000001001001000101", 
    59 => "10111101011110110101101111011100", 
    60 => "10111011100000010110000000111101", 
    61 => "10111101110010100110101111100100", 
    62 => "00111101110110011001010111101110", 
    63 => "10111110100101001010111101001111", 
    64 => "00111101110000100000110111011100", 
    65 => "10111101010100111110110111011001", 
    66 => "00111110011101000111000011101011", 
    67 => "10111110000010111100100101000111", 
    68 => "00111101100000010010110110111010", 
    69 => "10111100111100100010110000000010", 
    70 => "00111101010111111101000000101111", 
    71 => "00111110001101101010110011101011", 
    72 => "00111110001111110011101100100001", 
    73 => "00111110000111000010011000010100", 
    74 => "00111101100111110100100010000000", 
    75 => "10111101101000001000011001000101", 
    76 => "00111101110010010101110110101101", 
    77 => "10111110010100010100111111001110", 
    78 => "00111101101001100000100101100100", 
    79 => "00111100011111001011110011101010", 
    80 => "10111110000010100000110111111110", 
    81 => "10111101101111111110010000001110", 
    82 => "10111101110111011100101001001011", 
    83 => "00111100001010010111100100001011", 
    84 => "00111101100000001111111111101000", 
    85 => "10111100100001100010001111010001", 
    86 => "10111100100111111101000100100001", 
    87 => "10111011010010001100000000100011", 
    88 => "00111011001010010101111010110100", 
    89 => "00111101100001110100101011110000", 
    90 => "00111101100100010100100100110011", 
    91 => "00111110001110001101100001100110", 
    92 => "00111101101110010111011101111000", 
    93 => "00111101101011000000111000101011", 
    94 => "10111101001110001001111001110111", 
    95 => "00111110000011110101101010010110", 
    96 => "00111101010011010000111011000001", 
    97 => "10111110010010010000111111111001", 
    98 => "00111110010110000011110111111111", 
    99 => "10111100010010001001111110101100", 
    100 => "00111110001001011110010100101010", 
    101 => "10111110010111000011001101110010", 
    102 => "00111100011110101011000101110111", 
    103 => "10111110010010000010001000110110", 
    104 => "10111100001000111111111000001100", 
    105 => "10111110010110011100100010000110", 
    106 => "00111101001111110001011001111011", 
    107 => "10111110000001101100001011110000", 
    108 => "00111110000001011110000011111000", 
    109 => "00111101100110101001001010100011", 
    110 => "00111100001111011101100111101011", 
    111 => "00111011111100111100111111110001", 
    112 => "00111100111100101101000101000011", 
    113 => "00111101001100001100100111100111", 
    114 => "10111101110110000010101010011001", 
    115 => "10111101100001010001010101100011", 
    116 => "10111101101000100100001110100111", 
    117 => "10111101110110101000000011010000", 
    118 => "10111110000111010101110111000100", 
    119 => "00111110001101001101110000100011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_9 is
    component inference_conv2d_f3_1_4_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_9_rom_U :  component inference_conv2d_f3_1_4_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


