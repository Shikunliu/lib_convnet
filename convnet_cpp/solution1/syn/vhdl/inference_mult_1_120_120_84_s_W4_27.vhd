-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_27_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_27_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011110001100001001110001011", 
    1 => "00111100100100001000010110111111", 
    2 => "00111101100110110010000110011100", 
    3 => "10111110000010011010110010111101", 
    4 => "10111101101010010000100110100001", 
    5 => "10111101000100110111001001101110", 
    6 => "00111100010100001100010010101001", 
    7 => "00111100000101011011110101000001", 
    8 => "00111101100010000100010001110010", 
    9 => "00111101111010001010110011100010", 
    10 => "00111101000000101000011000111101", 
    11 => "10111100011110011010000101000001", 
    12 => "00111100101010110100111100000011", 
    13 => "10111110001111110110010111011100", 
    14 => "00111101011101001110000110100100", 
    15 => "10111011110010100111000011010010", 
    16 => "10111101100111101010001111011111", 
    17 => "00111101101100011010101110110111", 
    18 => "00111101000010000110101111011111", 
    19 => "00111100101010000111010110100000", 
    20 => "00111110001001111010110111010001", 
    21 => "10111101100001100010000111000101", 
    22 => "10111101101100001001101111000100", 
    23 => "10111101101001001011011101111101", 
    24 => "10111101000101101010111101101111", 
    25 => "10111011110010111110111100101100", 
    26 => "10111011011000001111101101011000", 
    27 => "00111101001001100100000010001100", 
    28 => "10111110001100000101000000110111", 
    29 => "10111101001111101010101110000111", 
    30 => "00111100010110000111101111000010", 
    31 => "00111101100000000101110010001001", 
    32 => "10111100101101111110110111100011", 
    33 => "00111101010100011110011011001101", 
    34 => "10111110000101001001110001101111", 
    35 => "00111101101010100000001000111111", 
    36 => "10111011110111110101100110000010", 
    37 => "00111101001100111010110101000001", 
    38 => "10111101010010110100010101000011", 
    39 => "00111100110101000110111111000100", 
    40 => "00111101000010100010001001111110", 
    41 => "10111101111111101101100101011010", 
    42 => "00111100111110010001101110101011", 
    43 => "10111100101001100110000000011100", 
    44 => "00111101000011011100011010101101", 
    45 => "10111110001100111111110011001010", 
    46 => "10111100111101000011111110100011", 
    47 => "00111100001010001000100001001010", 
    48 => "00111110001110110110110111001010", 
    49 => "00111100111100110000010000000100", 
    50 => "00111110001101011111010101101010", 
    51 => "10111011001101001111000010001101", 
    52 => "00111101100100110101100011110011", 
    53 => "00111101011010101100011011101001", 
    54 => "10111010101000001001100100111101", 
    55 => "00111101011111011101101100010010", 
    56 => "00111101011100000000011110011010", 
    57 => "10111101111100011011101000111101", 
    58 => "00111100111000001011000000001110", 
    59 => "10111100110010100101001110101011", 
    60 => "10111101011010010100010001100111", 
    61 => "00111101101011110011011000110100", 
    62 => "10111101100110000011111101110111", 
    63 => "00111001001001000010111101011011", 
    64 => "10111100111110110101111111110011", 
    65 => "10111100110110100100000010001001", 
    66 => "00111110000101001101111001111111", 
    67 => "00111101011011110101100111011010", 
    68 => "10111101110000000010011010100100", 
    69 => "10111101111110110000001101011100", 
    70 => "00111101111010101100001100100010", 
    71 => "00111100100010110101011101001100", 
    72 => "10111100001111010010011001100111", 
    73 => "00111100100001001000111100010001", 
    74 => "00111100111110001010011100010000", 
    75 => "00111100110110010110010110010111", 
    76 => "00111100011110111100011100100001", 
    77 => "00111110000101110001000011001011", 
    78 => "00111101101111111000101001011010", 
    79 => "00111110001110000011100110001010", 
    80 => "00111101001000111100100100110011", 
    81 => "10111101000001010101110111110011", 
    82 => "00111101011101000001111101110010", 
    83 => "10111100110010110100101000010110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_27 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_27 is
    component inference_mult_1_120_120_84_s_W4_27_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_27_rom_U :  component inference_mult_1_120_120_84_s_W4_27_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


