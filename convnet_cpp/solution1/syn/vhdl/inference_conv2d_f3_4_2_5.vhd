-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011000110000001101000111110", 
    1 => "00111101010010000110100101000000", 
    2 => "00111110001011010010010111101110", 
    3 => "10111100101100000110111000100111", 
    4 => "00111110000101010011111001110000", 
    5 => "00111101101010100110001000010110", 
    6 => "10111110000100010001101100011110", 
    7 => "10111110011001010011000110011000", 
    8 => "00111101000010011111000100011011", 
    9 => "10111101100111001101000000000000", 
    10 => "10111101010000000100101001110011", 
    11 => "00111101110001101011110100010001", 
    12 => "10111100000011001101001100010111", 
    13 => "00111110000101110001001000011011", 
    14 => "00111011110011011000100100001010", 
    15 => "10111101010101000111110110110110", 
    16 => "10111101011001110011110111100010", 
    17 => "10111101010000011010001011101000", 
    18 => "00111100101000110100001101100111", 
    19 => "10111101101111000011011010110010", 
    20 => "10111101010010110110001000011001", 
    21 => "00111100101000010100111111011100", 
    22 => "00111101110011100100111110111001", 
    23 => "10111101011111100100010100010101", 
    24 => "00111011111111111010011101000000", 
    25 => "00111100110100100100100100001110", 
    26 => "10111101110101011001101010110111", 
    27 => "00111110000000110100101011001011", 
    28 => "00111101010101011101001010110101", 
    29 => "10111101001111101011101001101011", 
    30 => "00111010011101000110011110101101", 
    31 => "00111110001101011000000110001100", 
    32 => "00111101110010000111011010010001", 
    33 => "10111100110110011011100111100101", 
    34 => "00111100000101110000000001010111", 
    35 => "00111110000011110101001100111111", 
    36 => "10111101111111110011010100011010", 
    37 => "10111101000010100010000001100101", 
    38 => "00111100111101110000010001000011", 
    39 => "00111110001010110001010110110101", 
    40 => "00111100010001001100011001101110", 
    41 => "10111101010111001010011110100001", 
    42 => "10111011011010000000100010010010", 
    43 => "00111100001001001001011001001101", 
    44 => "00111101110111101011000110000001", 
    45 => "00111110001010001000001010101110", 
    46 => "10111100111101110101010100110111", 
    47 => "10111110000010001100110001010111", 
    48 => "00111101110011001011110110110011", 
    49 => "10111101111111000011001111111000", 
    50 => "00111101010100110111000011110110", 
    51 => "00111110001001100100110101111111", 
    52 => "00111100101010011010011011000010", 
    53 => "00111100100110100000010100101111", 
    54 => "00111101110110000101011000011101", 
    55 => "10111101001100011011100101100110", 
    56 => "00111101100010110101001000000000", 
    57 => "00111100111011110101101000101011", 
    58 => "00111101110111110001110011111100", 
    59 => "10111101111011000001000110100001", 
    60 => "10111101010010000111100101001011", 
    61 => "10111101111100001001110100000110", 
    62 => "10111110000101001011010101010111", 
    63 => "00111100110010101001000011101000", 
    64 => "10111101101100101010100000000000", 
    65 => "00111110000010111110001101111110", 
    66 => "10111101010100001101100110100010", 
    67 => "00111101100101110000001101000100", 
    68 => "10111100011110110000100001001001", 
    69 => "00111100000110100100000100011111", 
    70 => "10111101110010101111101001010111", 
    71 => "10111100110001111100001101111001", 
    72 => "00111101011100000011111110011001", 
    73 => "10111110001111010011010111101011", 
    74 => "10111101000111000000000000010001", 
    75 => "10111110011000100000011111010101", 
    76 => "00111101000001000111010111100110", 
    77 => "10111010101110000100011110000101", 
    78 => "10111110010000101101101010011000", 
    79 => "00111101110111100000100000101001", 
    80 => "00111101100000101000100101000111", 
    81 => "10111101111111100000001111110111", 
    82 => "10111100111101011100000010101100", 
    83 => "10111101110110010001111011101011", 
    84 => "10111100101011010110101101110011", 
    85 => "00111101011011000000011000110011", 
    86 => "00111101111110110000010001101000", 
    87 => "10111011000001000101110001000110", 
    88 => "10111101101010001111010110110101", 
    89 => "10111101011011001000111110010000", 
    90 => "10111110000100001100100111011010", 
    91 => "00111101101000000010101001101010", 
    92 => "10111100001010001011111001100101", 
    93 => "10111100001111010000111111000000", 
    94 => "10111101101100110110100111010101", 
    95 => "00111101010101100101001101011110", 
    96 => "00111101010010101011111001001111", 
    97 => "10111011111110010101111010111100", 
    98 => "00111110001011000011100110111101", 
    99 => "10111101100110011001100011000011", 
    100 => "00111101011101101110101001000010", 
    101 => "10111101001000100101111011101010", 
    102 => "10111110000000111101100110101001", 
    103 => "00111101110000011010111111101001", 
    104 => "00111101000101000110000011000101", 
    105 => "10111100110010011110001101000011", 
    106 => "10111100100011101010101010001000", 
    107 => "00111100110001100000001101001111", 
    108 => "00111101110011111111111100110111", 
    109 => "00111100100101111011001001101110", 
    110 => "10111100110000001000110101011001", 
    111 => "10111101111001101111011100011010", 
    112 => "10111100101101111011111111110101", 
    113 => "00111101011110001101001001011111", 
    114 => "00111101101101101010101111011110", 
    115 => "10111100001000101001001110111110", 
    116 => "00111101111100110100110101101010", 
    117 => "00111100100010001000001010000110", 
    118 => "00111100110110100111101001101010", 
    119 => "00111110010000100111100010001110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_5 is
    component inference_conv2d_f3_4_2_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_5_rom_U :  component inference_conv2d_f3_4_2_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


