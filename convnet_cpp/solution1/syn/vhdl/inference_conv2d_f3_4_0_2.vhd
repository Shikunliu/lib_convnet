-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000101100001000010010011", 
    1 => "00111100110010011001001111111101", 
    2 => "00111011010101000100011111000000", 
    3 => "10111100101100100001010101011100", 
    4 => "10111101101010011010101001000110", 
    5 => "00111101100010000010110011101000", 
    6 => "10111100101110111011101011000001", 
    7 => "10111100100011110110111001101000", 
    8 => "10111101101010010000010010001011", 
    9 => "00111101100100010110111101101100", 
    10 => "10111100011100111101011111010100", 
    11 => "00111101111000011110111111111010", 
    12 => "00111110001000001001001001000111", 
    13 => "00111011101011001111101110100001", 
    14 => "00111100101111111111001110100000", 
    15 => "10111101011111111001011000011000", 
    16 => "00111011100101001011100000001000", 
    17 => "00111101010000001011101111001101", 
    18 => "10111101100101101110111111011110", 
    19 => "10111010100000110011110101100010", 
    20 => "00111110000000110001000110100101", 
    21 => "00111110000001010011100100110010", 
    22 => "10111101111001001011110010101110", 
    23 => "00111011100110100100111011100001", 
    24 => "10111011101001111011001011110111", 
    25 => "00111101001111110110111000100101", 
    26 => "00111101101111001111010011110110", 
    27 => "00111110000101100100111111011011", 
    28 => "00111100100100111100101111111010", 
    29 => "10111110001000101110111100001011", 
    30 => "00111101100110001010100110100010", 
    31 => "10111110001100001110001001111110", 
    32 => "10111101001110100101101101111011", 
    33 => "10111100100001100011101100011000", 
    34 => "10111110000101101000010001001001", 
    35 => "00111101110011111110000011001110", 
    36 => "10111110001101111011101000100011", 
    37 => "10111101111110101100111101110100", 
    38 => "10111101110011011100000100011110", 
    39 => "00111100100100100010010001011010", 
    40 => "00111110001111101010011100000101", 
    41 => "10111101100011101110011000001010", 
    42 => "00111110000100001010101010101000", 
    43 => "00111101101011110000110100100110", 
    44 => "10111101101010101101110100111110", 
    45 => "00111011011100100010011100100100", 
    46 => "00111010101101111010010111001001", 
    47 => "00111101001100001101100000001111", 
    48 => "00111101000101000101000100001011", 
    49 => "10111110000101101110110001011011", 
    50 => "10111101101101100111101100001111", 
    51 => "00111100110100100100010011011100", 
    52 => "00111101100011000001010001011011", 
    53 => "10111100000100000110100111011011", 
    54 => "00111100011001100101000000101100", 
    55 => "10111101010101000001001111001110", 
    56 => "00111101101101000100100001010111", 
    57 => "00111101000000010001000010100001", 
    58 => "10111100111111100100000010101101", 
    59 => "10111100110000100101100110101100", 
    60 => "10111100111001001010100111001110", 
    61 => "00111100101000110001011010111011", 
    62 => "00111101000101100001001000001011", 
    63 => "10111110000001111111110100111111", 
    64 => "00111100111011101110100111000011", 
    65 => "00111101000100111001001110010000", 
    66 => "10111101101000111111000000110101", 
    67 => "00111110000010100000110110111011", 
    68 => "00111100000110010101010111000111", 
    69 => "00111101110010101100001010001111", 
    70 => "00111100001100010100101101100111", 
    71 => "10111101011011100110111101100100", 
    72 => "00111011110001101000000101011001", 
    73 => "00111101100001111100011101011010", 
    74 => "00111101101001001101101111100000", 
    75 => "00111100110101000101010110001101", 
    76 => "00111110001001101110011001010100", 
    77 => "00111101010000011010000110100110", 
    78 => "00111011100100111100100000110100", 
    79 => "00111101101000110010000010110001", 
    80 => "00111110000000001101101000011011", 
    81 => "10111110001111010000010110101111", 
    82 => "00111101010101101110101011001000", 
    83 => "10111101100000000111110100100110", 
    84 => "00111011001010111010100000111010", 
    85 => "10111100101010100110001010101010", 
    86 => "10111100010001110101110010110110", 
    87 => "00111101110000100001110101111100", 
    88 => "10111101111010111100101011011010", 
    89 => "10111101001011101101101000111110", 
    90 => "10111101111001011001001010010110", 
    91 => "10111110000011110100111000000001", 
    92 => "10111101111011001110001011010010", 
    93 => "10111110010000100101000001110010", 
    94 => "10111101011000111110000011001011", 
    95 => "00111101001001010111110011111101", 
    96 => "00111100000101101000010100110010", 
    97 => "10111101001100000111101011110010", 
    98 => "10111101010110111111111000101110", 
    99 => "10111100111000000000000110010011", 
    100 => "10111101110101111011111010011000", 
    101 => "00111100100010010101000111101110", 
    102 => "10111011101111110001010001010010", 
    103 => "00111100111010111001111111000001", 
    104 => "10111101100001000110100100101001", 
    105 => "10111101001010101110111110011000", 
    106 => "00111100111111100111111101100010", 
    107 => "10111101010010101100101110111011", 
    108 => "10111101001110000111111000010001", 
    109 => "00111101000101110010100000000101", 
    110 => "00111110001000101101100101001001", 
    111 => "10111101001010100110110010111011", 
    112 => "10111101111000001101000010101011", 
    113 => "00111110001000010000011100110001", 
    114 => "00111010000000111001100000011101", 
    115 => "00111100111111000101010011100101", 
    116 => "10111110000000010111101101010011", 
    117 => "10111101000001101011010010111011", 
    118 => "10111101100011000000100101001011", 
    119 => "10111101110011000100111010011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_2 is
    component inference_conv2d_f3_4_0_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_2_rom_U :  component inference_conv2d_f3_4_0_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


