-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100111011000011010001110", 
    1 => "10111110001001101111010000111000", 
    2 => "10111101110111011001011111110110", 
    3 => "10111101111111011011101100010111", 
    4 => "00111011100000001001110001011101", 
    5 => "10111110011111010011111010010010", 
    6 => "00111011010001101001001001001011", 
    7 => "00111011001111000010011100111000", 
    8 => "00111100111010100001110001101001", 
    9 => "00111100100011100101101011010111", 
    10 => "10111110100011111110101011000100", 
    11 => "00111101110111101011101011110001", 
    12 => "00111110000011010010000000101001", 
    13 => "10111101100100001010011100111111", 
    14 => "10111101000001111111011101100000", 
    15 => "00111110010101011111110000111011", 
    16 => "10111101101011111011010010000001", 
    17 => "00111110000010110110011101111111", 
    18 => "10111101011110001011000001001011", 
    19 => "00111101101111001010011010010100", 
    20 => "00111101001001111001011000101100", 
    21 => "10111110000011001000111001101001", 
    22 => "10111110000000101101110001101110", 
    23 => "00111101111010010001000110001100", 
    24 => "10111101101001011000110110000001", 
    25 => "10111101101100101010110010010000", 
    26 => "00111101111000111110001100011001", 
    27 => "00111101001100000110000100001100", 
    28 => "10111101111010001110111101111000", 
    29 => "00111011100000001011011010110100", 
    30 => "00111101110110100100101001001001", 
    31 => "00111101010110101011000001101011", 
    32 => "00111011100101011000010010100010", 
    33 => "10111100110101100110011101001011", 
    34 => "10111101101100001111011111110000", 
    35 => "00111101011110111111110110100111", 
    36 => "10111100110111000110111100000001", 
    37 => "10111110000010101111001011011000", 
    38 => "10111101001000111110010101101000", 
    39 => "00111100010110000101101100001011", 
    40 => "00111101001100000001010110100111", 
    41 => "00111101111001001110100010111000", 
    42 => "10111101100101110001011000001001", 
    43 => "00111100110000100101000111101010", 
    44 => "10111101011001001101110010101001", 
    45 => "10111101000001010011011011010110", 
    46 => "00111100010100111100111110001011", 
    47 => "00111101010011111111100010011100", 
    48 => "00111110001001111011101110110110", 
    49 => "00111011101100101011000010000001", 
    50 => "00111101110010011001100011101011", 
    51 => "10111100101010001010100001100000", 
    52 => "10111101101101100011001001110001", 
    53 => "10111101110011100000011111100110", 
    54 => "00111010010010000011111101010010", 
    55 => "00111101010001000001010110100100", 
    56 => "10111110000101000110101000011010", 
    57 => "10111101111001010100101101001001", 
    58 => "00111011110101110011001100000010", 
    59 => "10111011100111100111101101010110", 
    60 => "00111101101100100010100100100000", 
    61 => "10111011010111111010111011010010", 
    62 => "10111101110000011111110111000100", 
    63 => "00111110000011111010001101110111", 
    64 => "10111101001000010110000100001110", 
    65 => "00111100001001011010011000010111", 
    66 => "00111101100111000001000001101100", 
    67 => "00111100111110111101010110011001", 
    68 => "00111101001100100101101011100001", 
    69 => "00111101000011101101001101010010", 
    70 => "10111101110001111011110101100100", 
    71 => "00111101101010010000100010110000", 
    72 => "10111101100000000011101001000000", 
    73 => "00111100111000110011000111111110", 
    74 => "00111101100111110000100100101010", 
    75 => "00111100101101111111110111010011", 
    76 => "10111110010101111101100011001111", 
    77 => "00111101010111111001110010011000", 
    78 => "00111101101100001111100000110011", 
    79 => "10111101000011111111110011001101", 
    80 => "10111101011000100110110000111100", 
    81 => "10111101110111101011101101110111", 
    82 => "00111101011000110111001010110001", 
    83 => "10111110000011010111111111011000", 
    84 => "10111110001001000001010101101110", 
    85 => "00111010101111111101101110100011", 
    86 => "00111101110100000101000100000001", 
    87 => "00111110010101100001011100111100", 
    88 => "00111101101010010100110101000011", 
    89 => "00111100110110011101110010110101", 
    90 => "10111101111001111101000100110101", 
    91 => "10111101111111010011010111101011", 
    92 => "00111110001001011110001101010100", 
    93 => "10111101001110001111011101001000", 
    94 => "10111101101111110101100010011000", 
    95 => "00111101110101111111001100000110", 
    96 => "10111110001000011111000010000000", 
    97 => "10111110010010001010000011010011", 
    98 => "00111110011000011100010111000101", 
    99 => "10111100000011000101100010101001", 
    100 => "00111110000011111111100101110010", 
    101 => "00111101010101101111101110101010", 
    102 => "10111101010101010110101111110011", 
    103 => "00111100101011011001001010101011", 
    104 => "00111101110001010001001011111010", 
    105 => "00111101110010010100111010100000", 
    106 => "00111101100011101011001010110110", 
    107 => "10111101101010101101010000010001", 
    108 => "10111101100000010010011111101000", 
    109 => "10111101110100000111001110011011", 
    110 => "00111101000100001100001001011011", 
    111 => "00111101110010010111100001011100", 
    112 => "00111101110111100101101110000101", 
    113 => "00111101001011001111001000111100", 
    114 => "10111100001000011010100101101000", 
    115 => "00111101100110001110100111001110", 
    116 => "00111101101000110001111100000100", 
    117 => "00111011110001001001010100110000", 
    118 => "00111110001100111011110000001010", 
    119 => "00111101001010101100011101101111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_1 is
    component inference_conv2d_f3_2_0_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_1_rom_U :  component inference_conv2d_f3_2_0_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


