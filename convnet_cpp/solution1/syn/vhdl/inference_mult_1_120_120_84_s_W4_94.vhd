-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_94_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_94_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011111010101001110110011", 
    1 => "10111100110010101101101110010001", 
    2 => "10111110001001011001110100010011", 
    3 => "00111101100100001011001100110100", 
    4 => "00111110010010101000000111011100", 
    5 => "00111101101011001000100000010001", 
    6 => "00111110000110000000101000011000", 
    7 => "10111101010010110111101000011100", 
    8 => "00111100110101111010111001110010", 
    9 => "00111101001001001000110101111110", 
    10 => "00111101111011111100111110000001", 
    11 => "00111100100001010010110101100110", 
    12 => "10111100100000111001010110110111", 
    13 => "00111100101000111100011001111001", 
    14 => "00111010010001101101010101010110", 
    15 => "00111101101101101011011011100001", 
    16 => "00111010100000110101000111011010", 
    17 => "10111101101110101110100111111100", 
    18 => "00111100010100100011011000101110", 
    19 => "10111101100101000100110100001111", 
    20 => "10111110000001100010010011011101", 
    21 => "10111101111010010111100011010101", 
    22 => "10111101000101001010101110100100", 
    23 => "10111100101000010010100000111001", 
    24 => "00111101001011101000110000011111", 
    25 => "10111100100111000000110000111011", 
    26 => "10111100101011011101101010011001", 
    27 => "00111110001110101001000001000111", 
    28 => "10111110000100111010010101111111", 
    29 => "00111101011010010111001000000100", 
    30 => "10111010100011110001011001011110", 
    31 => "10111110000100001110001101000111", 
    32 => "00111101110010101010111111100100", 
    33 => "10111101100111111011110010111100", 
    34 => "10111100111100110101010110011000", 
    35 => "10111100001011101101100110011101", 
    36 => "10111101111111010001110011000001", 
    37 => "00111101001010111101001101110011", 
    38 => "10111101010001001111000110000111", 
    39 => "00111011100110100011100001100101", 
    40 => "10111100101100100010000001111001", 
    41 => "10111101100011111010110010100011", 
    42 => "10111101101000111111110110100001", 
    43 => "10111110000000111110110100001111", 
    44 => "10111101110001000000100001010011", 
    45 => "10111101110110001001111011111110", 
    46 => "10111100111100111100000101100011", 
    47 => "00111101110110010100001000001011", 
    48 => "00111101010000011001100011110010", 
    49 => "00111110001100111111100110100101", 
    50 => "00111101011000010111011110110100", 
    51 => "00111110001111011010101000001101", 
    52 => "00111101011111110001101100110011", 
    53 => "10111100111101011101010110100101", 
    54 => "00111101110000010111000111111101", 
    55 => "10111110001100101010101001011100", 
    56 => "10111101011111111001101100000110", 
    57 => "00111100111110101001101011010001", 
    58 => "00111101011110111011000010110000", 
    59 => "00111100100100111001000101111000", 
    60 => "10111011000010000001011100010000", 
    61 => "10111101101001100101000100111000", 
    62 => "00111101111001101011000001010011", 
    63 => "10111101110000100100100111110010", 
    64 => "10111101101111100010010010101110", 
    65 => "00111101101110110111011001110001", 
    66 => "10111101000111101000000000111001", 
    67 => "00111101000011001111001010100111", 
    68 => "00111110000110010101011001111110", 
    69 => "10111010111010110010000001001010", 
    70 => "00111101010010101101101010111010", 
    71 => "10111011111100010101000110111100", 
    72 => "10111110000000010011011011100111", 
    73 => "10111101010111000110100001100110", 
    74 => "00111100011111010011110101000011", 
    75 => "10111101101011011111100010100100", 
    76 => "00111101011011011000100111110111", 
    77 => "00111100100101111011110001111111", 
    78 => "00111100110011101011000111011111", 
    79 => "10111100010111101111011010011011", 
    80 => "00111100011010111100010101001011", 
    81 => "00111100101111100010001110111101", 
    82 => "00111100101011111011000011001000", 
    83 => "10111101101001001111010010111001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_94 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_94 is
    component inference_mult_1_120_120_84_s_W4_94_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_94_rom_U :  component inference_mult_1_120_120_84_s_W4_94_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


