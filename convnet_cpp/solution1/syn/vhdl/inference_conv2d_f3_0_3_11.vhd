-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111111101100000111000010", 
    1 => "00111110000110010110010110110010", 
    2 => "00111101111101101110101011001000", 
    3 => "00111110000001101010101001001100", 
    4 => "00111101100001011010111000101010", 
    5 => "00111101100101110110001010100011", 
    6 => "10111011100100000110100101101111", 
    7 => "10111101010001101000011100111000", 
    8 => "00111101101001010111010100011111", 
    9 => "00111101001001001100110110101010", 
    10 => "00111101111001101110010111001101", 
    11 => "00111011101100010001010011110110", 
    12 => "00111101111110111010100010000010", 
    13 => "00111101100100110011111000110110", 
    14 => "10111101011110110010000111000100", 
    15 => "10111101110101100000100111011101", 
    16 => "00111110001011100101001100100010", 
    17 => "00111110001111110110111110001111", 
    18 => "00111100001111000111101000000100", 
    19 => "10111110000111111010111010111100", 
    20 => "00111110010111100100011000000110", 
    21 => "10111100010001010111010011101010", 
    22 => "10111110001111001111111101100101", 
    23 => "00111101000000011000111100110001", 
    24 => "00111100110101100000110000010001", 
    25 => "10111100010010100101011110101000", 
    26 => "10111110000000111000000000000010", 
    27 => "00111101101110111001100111101111", 
    28 => "00111101011111101001010011000110", 
    29 => "00111101011000110100001000100100", 
    30 => "10111101100101111001010100010010", 
    31 => "00111100100000011101101011001100", 
    32 => "10111100100011011001011000100000", 
    33 => "10111100111110111110011111011000", 
    34 => "10111110000101111011000111000000", 
    35 => "10111100110100010011101010111011", 
    36 => "00111110000100100101100110011111", 
    37 => "00111101111100110001001110111110", 
    38 => "10111101100110011110011011111100", 
    39 => "10111101101010110011000111111000", 
    40 => "00111100110110100001011001100001", 
    41 => "10111101110100000011001000010010", 
    42 => "00111100101101000010111101111101", 
    43 => "00111100110110011100111011011110", 
    44 => "10111101000010111001100001001111", 
    45 => "00111101100100111011111010101001", 
    46 => "00111110000010101111011011000111", 
    47 => "10111101100100111111000100011001", 
    48 => "10111110000001111011110000111100", 
    49 => "00111100110101101000001111010000", 
    50 => "10111100110001100100100010000100", 
    51 => "00111110001111111100101000000000", 
    52 => "10111100000110010111001011011000", 
    53 => "00111101101010010010010111110001", 
    54 => "00111110000100100101100100011001", 
    55 => "00111011110111101101101111000011", 
    56 => "10111110010110011010110010111101", 
    57 => "10111101000110111111111010110100", 
    58 => "00111110000011000101010001111010", 
    59 => "00111101110100111100101100111110", 
    60 => "10111011110100100111000101010001", 
    61 => "00111100100010001011101011101111", 
    62 => "10111101110100000100110101010101", 
    63 => "00111100001011000110000100011100", 
    64 => "00111101010111110110000110001111", 
    65 => "00111101011111010010010100001010", 
    66 => "00111100111110100111101111111101", 
    67 => "10111100100110111011010011000111", 
    68 => "10111101111101010101001011100011", 
    69 => "00111101110110111111000111101001", 
    70 => "00111100100100110110110011111010", 
    71 => "10111101010111110100111000101001", 
    72 => "10111100011100011110000000010111", 
    73 => "00111101011011000110111010001000", 
    74 => "10111101111100000101100111101010", 
    75 => "10111101011001110001111111001010", 
    76 => "10111100101101101000010011110111", 
    77 => "00111101100111100010000011110101", 
    78 => "00111100111110111011000100011100", 
    79 => "10111101000000011001101001101010", 
    80 => "00111101101100101101100001100101", 
    81 => "00111101010000001001000100011111", 
    82 => "00111110010001110011110111100010", 
    83 => "00111101000001110010111011100011", 
    84 => "00111100110110110001110110010011", 
    85 => "00111101100000000100001100110111", 
    86 => "10111110010110000011010101011001", 
    87 => "10111100110110110110100101001000", 
    88 => "10111100100111001010000111000010", 
    89 => "00111101110110101001110110100110", 
    90 => "10111101010101001101011001101100", 
    91 => "10111100100000010000111111001010", 
    92 => "10111101110001001110001000001111", 
    93 => "10111110001010100011111001111101", 
    94 => "00111001101011011011101110011000", 
    95 => "10111110000110011101101110101001", 
    96 => "10111110000010001011011000001111", 
    97 => "00111101101111100101010010011010", 
    98 => "10111101111111111101111011111000", 
    99 => "00111101110001111110100110010110", 
    100 => "10111101100100000011001011101001", 
    101 => "10111101101011111110101010110111", 
    102 => "10111100100110111100110001000100", 
    103 => "00111100000000010110100101101100", 
    104 => "10111100100101100010100100000010", 
    105 => "00111011001101000011110100001001", 
    106 => "00111101100100101100000111110100", 
    107 => "10111101101010101101001101110000", 
    108 => "10111110010010100110011110100101", 
    109 => "10111101111101101011111010111110", 
    110 => "10111101110110010011000101000100", 
    111 => "00111101100000111011101000100111", 
    112 => "10111101101010111110001100101101", 
    113 => "10111100101110001110111110100000", 
    114 => "00111110000101010111000101001100", 
    115 => "10111110001110010111110000111101", 
    116 => "00111100101111111010100010001100", 
    117 => "00111110000011111011111010111010", 
    118 => "10111100001001101101100010110010", 
    119 => "00111101001110011111001010111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_11 is
    component inference_conv2d_f3_0_3_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_11_rom_U :  component inference_conv2d_f3_0_3_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


