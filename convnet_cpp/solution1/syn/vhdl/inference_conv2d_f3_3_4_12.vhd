-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100110111000011000111001", 
    1 => "00111100100001110000110011001111", 
    2 => "00111100101101010011111000111011", 
    3 => "10111101001101111111110011111100", 
    4 => "10111100100011001100101110001011", 
    5 => "10111110010001000111011010110000", 
    6 => "10111110000111110001100110010011", 
    7 => "00111101101001111101101100000011", 
    8 => "00111101111100000101010010101100", 
    9 => "00111101010111011111110011010110", 
    10 => "10111110000111110001010100011110", 
    11 => "10111101000100011101101110010101", 
    12 => "00111101001100000110101111011001", 
    13 => "10111110001101101001011010100010", 
    14 => "00111110000000000100011110010001", 
    15 => "00111011111000000110101101010000", 
    16 => "00111101111001010110111011110000", 
    17 => "00111100001111000110011110001111", 
    18 => "10111110000010101001001110101111", 
    19 => "00111101000000001000000000100011", 
    20 => "00111110001000001010101101110001", 
    21 => "00111101100001100101101110011010", 
    22 => "00111110001000110111110011011101", 
    23 => "10111101011011010100010100010010", 
    24 => "10111101100000111000101010011001", 
    25 => "00111101100110010101100000111001", 
    26 => "10111101110010011111100001100100", 
    27 => "00111101101110110101110001100010", 
    28 => "00111101110101010000110110101110", 
    29 => "00111101010110110101001001010001", 
    30 => "00111101000010111000100001000100", 
    31 => "10111110000111111100110011100010", 
    32 => "10111101111011010000100000001011", 
    33 => "10111100111000000001001110011100", 
    34 => "00111101100101010111000110000001", 
    35 => "10111100110001110000010101000010", 
    36 => "00111101100000101110101100000001", 
    37 => "10111011101110010111111000100110", 
    38 => "00111100100101110111110010001001", 
    39 => "00111100110001100111100110010111", 
    40 => "10111101001010100010011011001010", 
    41 => "00111110010011100111010110111100", 
    42 => "00111101000001101011100111000011", 
    43 => "10111101001101111100010000001100", 
    44 => "00111101001100011010010011011001", 
    45 => "00111100111110101110000100010010", 
    46 => "00111101011101111011001010001001", 
    47 => "10111101100010110011100100011001", 
    48 => "00111101101010010111100001001111", 
    49 => "10111101000101011001111110100100", 
    50 => "00111110010001111000111000011001", 
    51 => "00111110000101010010011000001111", 
    52 => "00111101100010100010001011000001", 
    53 => "10111101100100101101001011111110", 
    54 => "10111011010101000010111101000010", 
    55 => "00111110010000111011111000100011", 
    56 => "00111101101100111000111001111011", 
    57 => "00111101001000001111011111100010", 
    58 => "00111101000110010110010000000101", 
    59 => "00111101111000100001001010010100", 
    60 => "00111101010111111101001110001010", 
    61 => "00111101101111111010111011001010", 
    62 => "10111100010001001010011010001110", 
    63 => "00111110000100101001010000010100", 
    64 => "10111100000001111000101111011011", 
    65 => "10111011001100101011001101000110", 
    66 => "00111101110010001010011100000011", 
    67 => "10111101110101010010001000100001", 
    68 => "00111101101100100001011100111111", 
    69 => "10111101001001011001011100110100", 
    70 => "00111101011010010111010101011111", 
    71 => "10111101011011111001110011000001", 
    72 => "10111101100010001101100110000000", 
    73 => "00111110000000101001001100001000", 
    74 => "10111101111011101000111010100100", 
    75 => "00111101100011111101101100010111", 
    76 => "10111101000110011111111100011010", 
    77 => "10111101010111111011111101101000", 
    78 => "10111101111010101110111000100000", 
    79 => "00111101111011110011111011001101", 
    80 => "10111101101010010111110000010101", 
    81 => "10111101011011101110111110000111", 
    82 => "10111101110111110110111101001100", 
    83 => "10111100111111001001000111101100", 
    84 => "00111101101010010100100111110110", 
    85 => "00111101010001001010101101111011", 
    86 => "00111110000011110001111110011011", 
    87 => "00111101011100101011001011000000", 
    88 => "00111010010010001110101010000100", 
    89 => "10111101110001100110010001011011", 
    90 => "10111101100001100111101101111010", 
    91 => "00111100110110010101110101101001", 
    92 => "00111101000101100000101010110100", 
    93 => "10111101101111000001010100001001", 
    94 => "00111101001110110000000010000111", 
    95 => "00111110000010011010011100111011", 
    96 => "00111100101011001011111001101111", 
    97 => "10111101111000101101011110110110", 
    98 => "00111101011000000000100100011111", 
    99 => "00111100100010011110110000010010", 
    100 => "10111101111101010011111011110111", 
    101 => "10111101000001011011100111101001", 
    102 => "10111101110000010110111100011011", 
    103 => "10111101110011001111010000011111", 
    104 => "00111101110100111010100100101010", 
    105 => "00111101111100001110000110110101", 
    106 => "00111101000111011100101010000001", 
    107 => "00111101110111001010101011111100", 
    108 => "10111101110110011110001001111010", 
    109 => "00111101011010001100000101010101", 
    110 => "00111100100100110100010111111000", 
    111 => "10111100010011110100000001000101", 
    112 => "10111101110011011101100100111100", 
    113 => "10111110001011100100111000100111", 
    114 => "00111100100110001111111100001010", 
    115 => "10111110000101010011110111101010", 
    116 => "10111101000101111101011110001101", 
    117 => "10111101101001101000010111001110", 
    118 => "10111101000010010101010111001111", 
    119 => "10111101101010010110000010101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_12 is
    component inference_conv2d_f3_3_4_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_12_rom_U :  component inference_conv2d_f3_3_4_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


