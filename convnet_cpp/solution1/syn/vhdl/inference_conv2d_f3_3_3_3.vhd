-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001111000101111101000111", 
    1 => "00111101000101001101001111001101", 
    2 => "10111110001001000100000110111100", 
    3 => "00111101101100011011010010000110", 
    4 => "00111101101010101011110101010000", 
    5 => "10111110001001111110010001011000", 
    6 => "10111101100101101101110110000101", 
    7 => "00111101000110110111110101101010", 
    8 => "10111101101111110100001010100001", 
    9 => "00111100001100001111110000100001", 
    10 => "00111011101001011111010110110011", 
    11 => "10111011010101000001101110100001", 
    12 => "10111101001000000001111011101111", 
    13 => "10111011110001101111000001010100", 
    14 => "00111101101100001011011011010010", 
    15 => "10111101101000101000101010010111", 
    16 => "00111110010000101100011101110101", 
    17 => "00111101001010011000010100011010", 
    18 => "10111101011111000010101101011111", 
    19 => "10111100100110110101000111001011", 
    20 => "00111101111010000001001010111110", 
    21 => "00111101000111101011111000110001", 
    22 => "00111100100101100000110011100111", 
    23 => "10111110000000101100110011110111", 
    24 => "10111101111100101110101001010011", 
    25 => "00111011110011111001011111000011", 
    26 => "00111100100001101110001110110100", 
    27 => "00111101100010111000111100111101", 
    28 => "00111011101111101110011101000110", 
    29 => "10111101011100100100111111011110", 
    30 => "00111101100011111110000011011011", 
    31 => "10111101110000101001111001011011", 
    32 => "00111101011000000010010001111110", 
    33 => "10111110001001011101001010001101", 
    34 => "10111101111001011001001010010110", 
    35 => "10111101111000110011101001000111", 
    36 => "00111100101011011000001111000111", 
    37 => "00111110000100101010110001110101", 
    38 => "10111101110001001111011110011100", 
    39 => "10111110000001100111100011000000", 
    40 => "10111101110101110000101011000100", 
    41 => "10111101101001010111100110010100", 
    42 => "10111100110001000000001100101111", 
    43 => "10111110001101000101101010100011", 
    44 => "10111101100001010110011111011100", 
    45 => "10111101000011010111101101111110", 
    46 => "10111101000001000101110101011101", 
    47 => "00111100111111000101101110011011", 
    48 => "00111101011101110111101001010101", 
    49 => "10111110000100101011001101000110", 
    50 => "00111101100100111011010110100101", 
    51 => "10111101010110010110110111100000", 
    52 => "00111110000100010110011011100000", 
    53 => "00111101101101110001100000111101", 
    54 => "10111100101110111000011111001011", 
    55 => "00111101100001010010110000100100", 
    56 => "00111101110101001001101111101001", 
    57 => "00111110010000011110000011000110", 
    58 => "00111001000011011101000000000100", 
    59 => "10111100111011001100110000010001", 
    60 => "00111100111110011011100000011101", 
    61 => "00111011101000101110101010010001", 
    62 => "00111101011110111010111110001001", 
    63 => "10111100110001001110111000010001", 
    64 => "10111101000010001011001100010010", 
    65 => "00111101011100100110110100111011", 
    66 => "10111100110110111000111010011100", 
    67 => "00111101101011100000111101001010", 
    68 => "00111100100110100101110101111001", 
    69 => "10111101010111110010001010001010", 
    70 => "00111110000111000001010110010000", 
    71 => "00111101001111100101100010110001", 
    72 => "00111101110110000110111011000001", 
    73 => "10111011010100011011000011100010", 
    74 => "00111100000110001011111110111111", 
    75 => "00111101001100110111100100001001", 
    76 => "10111100100101010000110100001101", 
    77 => "00111011101100111001001111101100", 
    78 => "00111101100110000011000000001101", 
    79 => "00111101001011110101100110100101", 
    80 => "10111101001000110101111111010001", 
    81 => "10111100101110100000110101000010", 
    82 => "10111101010000111110110010001001", 
    83 => "10111101110011111111110110100100", 
    84 => "10111101010101011011011000010101", 
    85 => "00111101101010110001001000010111", 
    86 => "00111101100101000101100101111100", 
    87 => "10111101101000100110101000001000", 
    88 => "10111101011110000011110110101111", 
    89 => "10111110010001011110100100011000", 
    90 => "10111101110011100001101111010010", 
    91 => "10111011011101001000101010000001", 
    92 => "00111100110111000100101111111100", 
    93 => "00111100001011110100010101101000", 
    94 => "10111100001110110011111010011010", 
    95 => "10111100111000001101001010101001", 
    96 => "10111101010001001010000011001001", 
    97 => "00111101111110011111101010011000", 
    98 => "00111101101100000111110110101100", 
    99 => "00111100101011111010011001001011", 
    100 => "10111101101101111111101001000010", 
    101 => "10111101010101100000011010000010", 
    102 => "10111101110000101011111110001011", 
    103 => "10111101001101100101011110101011", 
    104 => "10111101100010010000011100111000", 
    105 => "00111110000111100110111110110101", 
    106 => "10111101011000110000011100110110", 
    107 => "00111101111100110110100100110100", 
    108 => "10111100110010010010100011010011", 
    109 => "10111101011110110010011011001101", 
    110 => "10111101111111111111110001010100", 
    111 => "10111101010111100010110011011100", 
    112 => "00111110000101100000111001010010", 
    113 => "10111101011011100100001111100000", 
    114 => "10111100011111101010010111111000", 
    115 => "00111110001000011111010000101100", 
    116 => "00111100100110000100101010101111", 
    117 => "10111101111000000100111000011110", 
    118 => "10111100011010001000010110010000", 
    119 => "00111110000110000010010101011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_3 is
    component inference_conv2d_f3_3_3_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_3_rom_U :  component inference_conv2d_f3_3_3_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


