-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110101110100101111000111", 
    1 => "10111100111010001100001101101110", 
    2 => "00111101100000000110011101001001", 
    3 => "00111101011110010111001011001101", 
    4 => "10111101101011111011000110101100", 
    5 => "10111101101000100010100111001110", 
    6 => "00111110001001101011101101010110", 
    7 => "10111101011111010011100101100001", 
    8 => "10111101010100010101111111011010", 
    9 => "00111101110101011001100010011110", 
    10 => "10111101101100001110100100001100", 
    11 => "00111100000011111110010001101111", 
    12 => "00111101110100101001101010100010", 
    13 => "00111101101101001001111001101101", 
    14 => "10111100010001001100011001101110", 
    15 => "10111110001001010101010110000010", 
    16 => "00111100101001001111011011111011", 
    17 => "00111110000000000101101011110111", 
    18 => "10111011101000011000000110110000", 
    19 => "10111100001111110011100011111011", 
    20 => "10111101110010110010000110101010", 
    21 => "10111101110000101001000101001101", 
    22 => "00111110000010101111100111101100", 
    23 => "00111100101001000001010001000111", 
    24 => "10111100111111110110110110011110", 
    25 => "00111100000100101001111111010101", 
    26 => "00111010000110101010000010100010", 
    27 => "00111101110101000110110000110011", 
    28 => "00111101101100001111011010100000", 
    29 => "00111100101110100001101001000011", 
    30 => "10111101110101001100000100100010", 
    31 => "10111110001011001001110101011010", 
    32 => "00111100111011110001110000011000", 
    33 => "00111110010111011000010110011101", 
    34 => "00111011001101010101110000011000", 
    35 => "10111101110111101000111011100111", 
    36 => "10111110000110110100100110011101", 
    37 => "10111101010001010111100000001111", 
    38 => "00111100101001010001110010111010", 
    39 => "10111101010101010110011000010011", 
    40 => "00111011101000000110001011110111", 
    41 => "00111011001110011110010000010010", 
    42 => "00111100011101001010011000110000", 
    43 => "00111011100001010100001100001011", 
    44 => "00111101000011000101000010100110", 
    45 => "10111101110111101010001011010011", 
    46 => "00111110000000111010001101100110", 
    47 => "00111100100101110100100111111110", 
    48 => "10111101101111111111010110000100", 
    49 => "00111101000000010100110111000011", 
    50 => "00111101101111111000011011001001", 
    51 => "00111101111110010001100000011010", 
    52 => "00111101101101011000011010010101", 
    53 => "10111101101011101110101101100011", 
    54 => "00111100111100101100001001100000", 
    55 => "10111110001010100110001000100100", 
    56 => "10111110011001000111010011011010", 
    57 => "10111110000111111110111010110011", 
    58 => "10111110001000101011011011110010", 
    59 => "00111101101001101001111101111111", 
    60 => "00111101101111101100101101110101", 
    61 => "00111101000111100110000000100010", 
    62 => "10111100110101001111111111010111", 
    63 => "00111101110100000110010101110011", 
    64 => "10111101101110100000011101110000", 
    65 => "10111110001111010001001010001000", 
    66 => "00111101111111010100100101010010", 
    67 => "10111110000000000100001111100101", 
    68 => "00111101001111111111100001110011", 
    69 => "00111101111001010011001110110001", 
    70 => "10111101011110000111001110101111", 
    71 => "10111100011000111000011001001101", 
    72 => "10111101011101010001001100100010", 
    73 => "00111101000100101011101111111010", 
    74 => "10111101101001101110010111011011", 
    75 => "10111101000000111110001001000010", 
    76 => "00111101111000100111010100100101", 
    77 => "00111110001000110010000101100000", 
    78 => "00111100100101111001110011010101", 
    79 => "00111101000110110010110110000011", 
    80 => "00111101010011011000000111111110", 
    81 => "00111101111010010101000001110110", 
    82 => "10111101101101100011010010110011", 
    83 => "00111101111100110100000101011011", 
    84 => "00111110000010010110010101101111", 
    85 => "00111101000101001110101000111101", 
    86 => "10111100111110000011100100101100", 
    87 => "00111101010010101010111111010111", 
    88 => "10111101101111010100111000001001", 
    89 => "10111110001010101000000001001001", 
    90 => "10111101010110100010100111100010", 
    91 => "10111011101100011100011001001100", 
    92 => "10111110001101010011101011000101", 
    93 => "10111011101100110000011011010011", 
    94 => "00111101010000111011000101100101", 
    95 => "10111101000001111101111110010011", 
    96 => "00111101110110101001011101011011", 
    97 => "00111110000010110101000101111010", 
    98 => "00111101110101001011001110000001", 
    99 => "10111100111011011000101111110101", 
    100 => "10111110000011011001000111101111", 
    101 => "10111101100001000101111001011100", 
    102 => "10111100110010010100011110100111", 
    103 => "10111100110010010111000001010111", 
    104 => "00111011101000101000100001000000", 
    105 => "00111100111010011100111000110000", 
    106 => "10111011110101110010011011011000", 
    107 => "00111101101010110010000001110101", 
    108 => "00111110000110100111011111100110", 
    109 => "10111101100100111110100001110010", 
    110 => "10111110000101000001110100001000", 
    111 => "00111101100110100000010110101000", 
    112 => "10111110010010100101100111000000", 
    113 => "10111101011011011111011000101101", 
    114 => "10111101001000101100101001100101", 
    115 => "00111101011101101010111001001000", 
    116 => "10111101111000110000010011001101", 
    117 => "00111101100000000100100011101110", 
    118 => "10111101010001010110010100101111", 
    119 => "10111101001110011001101101111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_0 is
    component inference_conv2d_f3_3_4_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_0_rom_U :  component inference_conv2d_f3_3_4_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


