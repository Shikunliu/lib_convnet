-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111010001101011001101000100011", 
    1 => "10111100011101100000101001001000", 
    2 => "00111110000100010001010011010011", 
    3 => "00111101010100100010110000000010", 
    4 => "10111101110011111101010010111111", 
    5 => "00111101101000001111100000100101", 
    6 => "10111101001101010001111100110001", 
    7 => "10111101010110111100001000110011", 
    8 => "00111100101000001010101001100101", 
    9 => "00111101101001001001111011110011", 
    10 => "00111101100101100110111000110110", 
    11 => "00111110001000101000010100100011", 
    12 => "00111110000101011110010000011101", 
    13 => "00111101111110101010010110000011", 
    14 => "10111110000110011010010001011001", 
    15 => "00111101000011001110100010110001", 
    16 => "00111100100011000000111000101011", 
    17 => "10111101011100010110110010100100", 
    18 => "10111100100001000010001101111011", 
    19 => "10111101110110011001111011011000", 
    20 => "10111110000111110111011000011101", 
    21 => "00111100111111101010111101101000", 
    22 => "00111011100001011000001000001011", 
    23 => "10111110000000101001110010111011", 
    24 => "10111100101010001010100100110111", 
    25 => "10111110000011011011101101011010", 
    26 => "00111101100011100000111101110010", 
    27 => "10111011111101101000110010111010", 
    28 => "10111110000001101010011100100110", 
    29 => "00111101101011110101101000101011", 
    30 => "10111101010111000001010101110101", 
    31 => "10111110000100010101111000111001", 
    32 => "00111110000100011100100000100001", 
    33 => "00111101000011001010001101111100", 
    34 => "10111101111000101111101011010111", 
    35 => "10111100110111111101000010000000", 
    36 => "00111100011000011001000111101011", 
    37 => "10111101000001100110010010011110", 
    38 => "10111100010001101010001000010000", 
    39 => "00111101011011000101011001010000", 
    40 => "00111110010000000111111111101101", 
    41 => "10111110001000010011111000111110", 
    42 => "10111110000010100001000110101001", 
    43 => "10111101100111011011101100100100", 
    44 => "10111100110000011010100001000001", 
    45 => "00111110000001111001100011011001", 
    46 => "10111101111111111011100000101100", 
    47 => "00111110001000101000111001010000", 
    48 => "10111110001110001101100001100110", 
    49 => "00111110000000111111101000101011", 
    50 => "10111101001100110100111110011110", 
    51 => "00111110000111010000110010000000", 
    52 => "10111100101100000011010000010000", 
    53 => "00111101100011010001011110101011", 
    54 => "10111101100000100100111011101101", 
    55 => "00111101010101110110100111111010", 
    56 => "00111101010000110100010001011000", 
    57 => "00111100101100000000111111001000", 
    58 => "10111110001000100111111011011000", 
    59 => "10111101001000100011001101001100", 
    60 => "00111101010000101100100001001100", 
    61 => "00111100000111011001001100001110", 
    62 => "10111110001001010110011101010101", 
    63 => "10111110000101100011010100011110", 
    64 => "10111101001010110100001110010110", 
    65 => "00111011110010010101110011000000", 
    66 => "10111110001011011111111001110110", 
    67 => "10111100000001110101100111010001", 
    68 => "00111101100111011000100000111100", 
    69 => "00111101001011110101101001000110", 
    70 => "10111100010100000000101000000100", 
    71 => "00111010010001100000100101110101", 
    72 => "00111110000000100000011111010101", 
    73 => "00111101010100100000110111101010", 
    74 => "00111101100000100011001111101101", 
    75 => "10111011100011010010101011100001", 
    76 => "00111101000010110010001110011010", 
    77 => "00111110000100111011011110010101", 
    78 => "10111110010000110110011111100100", 
    79 => "10111101101000011110010010110100", 
    80 => "00111101111001110110010100110100", 
    81 => "10111101000000101110100110100100", 
    82 => "00111011100001001110100000000111", 
    83 => "00111101100111001000111001110110", 
    84 => "10111101001000011110001101001010", 
    85 => "10111100011101111111001011101011", 
    86 => "10111101011010001100100110011101", 
    87 => "00111100001000100101111100000101", 
    88 => "10111101100110111111111111001110", 
    89 => "00111011110100000111100001010011", 
    90 => "00111100100111110101110001010001", 
    91 => "10111101111010000010001011111111", 
    92 => "10111100111000111011000000001000", 
    93 => "10111101111111010001101010101000", 
    94 => "00111110001011110000010100100001", 
    95 => "00111100100010110110000011110010", 
    96 => "10111100001110001001100110100101", 
    97 => "00111011111110100111100000010110", 
    98 => "00111101100011011110010111101100", 
    99 => "10111101001000010001010111011111", 
    100 => "10111101010000110011111110100000", 
    101 => "10111100010010111100010000100100", 
    102 => "10111101110000011011011101000000", 
    103 => "00111101101011000100011100101001", 
    104 => "10111101000101011100111100100101", 
    105 => "00111011000000010100010110010000", 
    106 => "10111110000011011111000101011010", 
    107 => "10111100001101111001101000110110", 
    108 => "10111100010100111011110001000000", 
    109 => "00111110001111100101000110001111", 
    110 => "10111011010111100001101001010010", 
    111 => "00111100101110110011010100101011", 
    112 => "00111011110010000011011010100110", 
    113 => "00111110010000001100101001100000", 
    114 => "10111100111010010010010101011110", 
    115 => "10111100110001111000011110110100", 
    116 => "10111101000101000110011101111011", 
    117 => "10111101001101000100000111010110", 
    118 => "00111100010100101001111100001001", 
    119 => "10111100010010100111001001111111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_15 is
    component inference_conv2d_f3_1_2_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_15_rom_U :  component inference_conv2d_f3_1_2_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


