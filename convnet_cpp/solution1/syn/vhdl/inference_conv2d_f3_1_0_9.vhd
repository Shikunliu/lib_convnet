-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101001110111000010000111", 
    1 => "10111100100011001101101111100110", 
    2 => "10111101110111001101110011001010", 
    3 => "10111101000001011010000111001011", 
    4 => "10111101110011000111011111000011", 
    5 => "10111101111001111110000011110000", 
    6 => "10111101010111000011100101101100", 
    7 => "10111110000111111000110011101011", 
    8 => "10111101110011110100101111101000", 
    9 => "10111101111001010001111000110010", 
    10 => "00111101010011001010111000010100", 
    11 => "00111101000010111100000011001001", 
    12 => "10111101111111001111011001111011", 
    13 => "10111101100010010011110101111100", 
    14 => "10111110001000001100101110110000", 
    15 => "10111100011000100111100000110000", 
    16 => "10111011110100101101101000011000", 
    17 => "00111110010010011111110001101110", 
    18 => "10111100110001101100010111101101", 
    19 => "00111100010111010111001111100100", 
    20 => "00111101001011011101110110100100", 
    21 => "00111101100101100110101101111100", 
    22 => "10111100001101011100001110011100", 
    23 => "00111110000001111010110101001011", 
    24 => "00111100101010111000100010101111", 
    25 => "10111100111101111000101110001000", 
    26 => "00111100001000010010001111110010", 
    27 => "00111100101111000010010011011111", 
    28 => "10111110011000001101110111000110", 
    29 => "00111101001011100100010110001110", 
    30 => "10111110001010101001111000101100", 
    31 => "10111101100000111101011111101110", 
    32 => "00111110000110111110011011100110", 
    33 => "00111100010100101010111010001110", 
    34 => "00111101001000001011111100001101", 
    35 => "10111101111001010010000001001011", 
    36 => "00111100100001000100110101101101", 
    37 => "10111101011111100111011101001111", 
    38 => "00111101100100111011100100001101", 
    39 => "10111101100100011001011110110000", 
    40 => "10111100101011000001110101100000", 
    41 => "10111100110110110100001010110001", 
    42 => "00111100110001000000011011000000", 
    43 => "10111101101101010001000000011000", 
    44 => "10111101111110110100111101100001", 
    45 => "00111100010101010100000100010000", 
    46 => "10111101110001000110101011100100", 
    47 => "00111101011011011101001101011101", 
    48 => "10111101101000010010001110101001", 
    49 => "10111101110100000110001001001110", 
    50 => "10111101010101010011000100011111", 
    51 => "00111110000101100001111010010011", 
    52 => "00111101010010101011010010001111", 
    53 => "10111101110110001111000111010100", 
    54 => "00111110000010110000011000111110", 
    55 => "00111100101110100101010000100100", 
    56 => "00111101000110000111111001100001", 
    57 => "10111110001001000111010000010000", 
    58 => "10111100100100111100100001101010", 
    59 => "00111110001101011101001111011101", 
    60 => "00111101111110001110011111011110", 
    61 => "10111101000011110000010010110101", 
    62 => "00111101101111011100100101100111", 
    63 => "00111110000000000110000110000100", 
    64 => "00111101100101100101100011111010", 
    65 => "00111110010000011011110000010010", 
    66 => "00111010101111001010010010001100", 
    67 => "00111101100000110110111101001001", 
    68 => "00111110000000100011000011111101", 
    69 => "10111101110010000010101100000101", 
    70 => "10111101101011010010011111011110", 
    71 => "00111011000100000110110001001001", 
    72 => "10111110000001000101000111111100", 
    73 => "10111110000100111010110011010110", 
    74 => "10111110001111011000000101101011", 
    75 => "00111101101101001101100110000100", 
    76 => "00111110000000110001111100000100", 
    77 => "10111100000100110101011000111110", 
    78 => "10111100101100010101110010011001", 
    79 => "10111101111010110010011011000000", 
    80 => "00111011011110111100010000110001", 
    81 => "10111101010111101110111100001110", 
    82 => "00111101101001011001101100000111", 
    83 => "10111110001001010010010111001100", 
    84 => "10111101110011000011011000111001", 
    85 => "10111101100110101010010001110110", 
    86 => "10111110000011111001110111110101", 
    87 => "10111101011001011100111111010011", 
    88 => "00111100010101011101100011100101", 
    89 => "10111101111010111001101010011110", 
    90 => "00111101101000101100000010110010", 
    91 => "00111011100100001001111001110011", 
    92 => "00111101100001110010001000011000", 
    93 => "00111101101000000110110110111100", 
    94 => "00111011101001000001111110101111", 
    95 => "10111110010101100000000101111001", 
    96 => "00111100100111000000100101001011", 
    97 => "10111101001111111111000110001000", 
    98 => "10111101000110101111000010110010", 
    99 => "00111110001011100110011001000101", 
    100 => "00111101010100011000000010010001", 
    101 => "00111101011100000011111100101101", 
    102 => "10111101101100011000011101100010", 
    103 => "10111010011010001010001000100111", 
    104 => "00111110000000101111011010100101", 
    105 => "10111010010011001110101110101100", 
    106 => "10111101100011001010100111111101", 
    107 => "00111101000101100010011111011010", 
    108 => "00111101000101101110011100000010", 
    109 => "10111101101110111011110011011010", 
    110 => "00111101101011000101010101010001", 
    111 => "00111101000010011101101110000001", 
    112 => "10111101101110101011001011101111", 
    113 => "10111101001000011111010001111100", 
    114 => "10111101010000101100110000010011", 
    115 => "00111100100101001011110010000101", 
    116 => "00111100100111110111010101111100", 
    117 => "00111110000110010000111101110011", 
    118 => "00111110010001111000101101111010", 
    119 => "00111110010101110000100000100101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_9 is
    component inference_conv2d_f3_1_0_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_9_rom_U :  component inference_conv2d_f3_1_0_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


