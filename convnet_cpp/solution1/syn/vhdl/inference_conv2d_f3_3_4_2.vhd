-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011000011110100110010101", 
    1 => "00111101100111001111011001000101", 
    2 => "00111110001100000001111001101001", 
    3 => "00111101001101111000100001000111", 
    4 => "10111101110101111001011000111010", 
    5 => "10111101011010000101111011111010", 
    6 => "00111101111011111111110110100100", 
    7 => "10111100111000001011100000000110", 
    8 => "10111101110001110010110111111111", 
    9 => "10111101110111110111100101000010", 
    10 => "10111101001111011111100010111111", 
    11 => "00111011110100110101010011111100", 
    12 => "00111101111100011001110011100000", 
    13 => "00111101001110001011000110101000", 
    14 => "00111110000000010011101110011111", 
    15 => "10111100111110010000110101101000", 
    16 => "10111110000000100100001101010111", 
    17 => "00111100101100011100101110001010", 
    18 => "00111100000100000010010100110001", 
    19 => "00111110001000000111111110101010", 
    20 => "00111101110010011000101110110101", 
    21 => "10111101100000000010010111000000", 
    22 => "00111100110000101110011100111011", 
    23 => "00111101110001110010011110110100", 
    24 => "10111110010110010110011010111110", 
    25 => "00111110000101111001001011010001", 
    26 => "10111100100101000100111101111000", 
    27 => "10111101001011100111100000011000", 
    28 => "00111101001101101111110010110111", 
    29 => "00111100101000100110011000100111", 
    30 => "10111100110000000000110000101010", 
    31 => "00111101100000010101001110100010", 
    32 => "00111110000101001001111001000101", 
    33 => "00111101100011111111010001011100", 
    34 => "10111101110111001100110110010110", 
    35 => "10111101101001001111001000011010", 
    36 => "10111101010111111111111010001000", 
    37 => "10111101100001101100111011001001", 
    38 => "10111101101000100000011000011010", 
    39 => "00111101101000111110010111010011", 
    40 => "10111100101011011001111111100001", 
    41 => "10111101001110001110110110000111", 
    42 => "10111100010011001100011000010111", 
    43 => "10111100111000010101001110100010", 
    44 => "10111101011001100110011100000111", 
    45 => "10111101100001101100111110111011", 
    46 => "00111101110001110011001100111101", 
    47 => "10111101101110011110000000000011", 
    48 => "10111100001101001011111100100100", 
    49 => "10111110001011011000101111100111", 
    50 => "10111101000000001101000100110001", 
    51 => "00111101011100100010011101001010", 
    52 => "10111101111001010001100101111010", 
    53 => "00111101011101001100110110011101", 
    54 => "10111100010011010010011111010001", 
    55 => "00111101011110011010100010011000", 
    56 => "00111101100101100001001100100101", 
    57 => "00111101001110001111001001110101", 
    58 => "00111011010101111111111111011100", 
    59 => "00111101110110001000011101100110", 
    60 => "10111011101100111011000110110011", 
    61 => "00111110000011100111101100111110", 
    62 => "00111110010001011100000000110011", 
    63 => "00110111100111111101000101101110", 
    64 => "00111110010101110111000100000000", 
    65 => "00111100010010011100011011110011", 
    66 => "00111110000010111100000001011101", 
    67 => "10111110001010001011011111100101", 
    68 => "00111101000001001100000011111010", 
    69 => "10111101111000011011000000000011", 
    70 => "00111101111100100011111101101000", 
    71 => "10111110000000001010110101000111", 
    72 => "10111101110110101100100100101010", 
    73 => "10111101110111101101010100101000", 
    74 => "00111101100111000100111000111101", 
    75 => "00111100100101100111001011010011", 
    76 => "00111101000100111000000011001011", 
    77 => "10111101001100011010000000111011", 
    78 => "00111011101100000001101000001111", 
    79 => "00111101001001000100100101110001", 
    80 => "00111101001111111110110110100110", 
    81 => "10111101100011111101011010111101", 
    82 => "10111101101110010001000110110100", 
    83 => "10111110000010010011100110101000", 
    84 => "10111001111011111011010111110101", 
    85 => "00111110001100101001101010100010", 
    86 => "10111101001111100010010100110100", 
    87 => "10111101000010010100100100011111", 
    88 => "10111110000011101101000001110000", 
    89 => "00111101010110100010111111011100", 
    90 => "10111100001010010111110001100110", 
    91 => "10111101010010110100111001111101", 
    92 => "10111101101001101000111011100000", 
    93 => "10111010111100111111011100110011", 
    94 => "00111101100110000111111101010011", 
    95 => "00111101011010110100110001100100", 
    96 => "10111110000101111111100101010001", 
    97 => "00111100011111011010100010100010", 
    98 => "10111101111111110111110001100111", 
    99 => "10111110000111001001001100100001", 
    100 => "10111100000011100010010011100111", 
    101 => "10111110001011010000000011110111", 
    102 => "10111011001000110011001100100000", 
    103 => "00111101011011011000010011010011", 
    104 => "10111101000100101110110111100100", 
    105 => "10111110000000010111000000001101", 
    106 => "00111100101011110111001000010011", 
    107 => "10111101101000010111100010100110", 
    108 => "10111101101011010100010110110011", 
    109 => "10111101110000010010001011000101", 
    110 => "00111110000010110011001100010010", 
    111 => "10111101101110010111010101000100", 
    112 => "00111100111100111100101100111110", 
    113 => "10111101000101111101001010111010", 
    114 => "10111010111001101111100110011111", 
    115 => "00111011011001100111010010010100", 
    116 => "00111101111100000100001011011001", 
    117 => "00111101110111010011111101011011", 
    118 => "00111101101100011001001101110001", 
    119 => "10111100111011100011100000100010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_2 is
    component inference_conv2d_f3_3_4_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_2_rom_U :  component inference_conv2d_f3_3_4_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


