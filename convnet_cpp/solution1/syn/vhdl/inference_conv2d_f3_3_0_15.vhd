-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010010001011111000101111", 
    1 => "10111110001111110101110110111100", 
    2 => "00111101011110110011000000111101", 
    3 => "00111100101000011101011000010100", 
    4 => "10111100100010100111101001000010", 
    5 => "10111110001101111010000010110110", 
    6 => "10111101000100101001111001001101", 
    7 => "00111101101100010100011011001010", 
    8 => "10111011100001010000111110001001", 
    9 => "00111110010011110011100010000010", 
    10 => "00111101110001110100111110110101", 
    11 => "00111100100001000010000011000001", 
    12 => "10111011011000010011110101000111", 
    13 => "10111101101010011000011001001110", 
    14 => "10111100111101000101100100000011", 
    15 => "10111100101000110011000001010001", 
    16 => "10111011111000111100001001110010", 
    17 => "10111101001001111101101011000000", 
    18 => "10111101001010011110001010000111", 
    19 => "10111101010001010110100010100101", 
    20 => "00111100101101100100110000100010", 
    21 => "00111110000111001100101111000000", 
    22 => "00111101010001001110100100100011", 
    23 => "10111101010000101110100110001010", 
    24 => "10111101110100111000011110011100", 
    25 => "10111101100111011111101110000110", 
    26 => "00111101000010010100001000011001", 
    27 => "10111101101000100111110010111111", 
    28 => "00111101011111010101100011010110", 
    29 => "10111101101111001010101001011011", 
    30 => "10111101101011001101010111000100", 
    31 => "00111011110110111100011000100100", 
    32 => "10111101000101110011100001000110", 
    33 => "00111101011001011111110011001111", 
    34 => "10111101010101001111001011010110", 
    35 => "00111101101110100000111110000011", 
    36 => "00111011001111101100010100100010", 
    37 => "10111101100100010110100010000000", 
    38 => "10111100000111001111111111010110", 
    39 => "10111110000100101010111000001000", 
    40 => "10111101100010010111101011000110", 
    41 => "00111101100110011111001110010001", 
    42 => "10111101011001001110001100001110", 
    43 => "00111101100110110000100001111111", 
    44 => "00111101100010110010010111000001", 
    45 => "10111101110100010010000110101011", 
    46 => "10111101100001111110110001011110", 
    47 => "00111101110110000101000101100101", 
    48 => "00111101101111000010111110010001", 
    49 => "00111100100101010100101010000000", 
    50 => "10111100001111001111110011100001", 
    51 => "10111110000011011010010001001000", 
    52 => "10111101001110000110110010001110", 
    53 => "10111101101001001001000000010000", 
    54 => "10111101100100001100011101110000", 
    55 => "10111101010011110001001110110100", 
    56 => "00111100010111101001011010001110", 
    57 => "00111101110110101111010110111010", 
    58 => "00111100100101111011011101000001", 
    59 => "10111100111101110101001101010011", 
    60 => "00111101100101010010000011111001", 
    61 => "10111101100111000010011100100000", 
    62 => "00111101111100111001101001111100", 
    63 => "00111010101110011100011100001100", 
    64 => "00111101011011001111000110011011", 
    65 => "10111101001001110000110010110100", 
    66 => "00111101001111010000010111001010", 
    67 => "10111101100110110101010100100110", 
    68 => "10111101110101000101010000010101", 
    69 => "10111110000000010110011011100000", 
    70 => "10111101111101000101001110001111", 
    71 => "00111100000111100001001001000100", 
    72 => "10111101001101110011000100111111", 
    73 => "00111100101000010110010001101001", 
    74 => "10111101010000101010110010111000", 
    75 => "10111101101000000111101110111011", 
    76 => "10111101001001011010100000010101", 
    77 => "00111101000011000011001000001000", 
    78 => "00111101011001110010101011100111", 
    79 => "00111101101000010101111100111000", 
    80 => "00111110010010110001011101001000", 
    81 => "00111101100000100100001111011101", 
    82 => "00111101010001010010010100000011", 
    83 => "10111101001101010101100101001000", 
    84 => "10111101000110001111110000110101", 
    85 => "10111100100010000101001111110111", 
    86 => "10111101110101110000001101101101", 
    87 => "00111101100001011111101111010000", 
    88 => "10111100100011011110100011000001", 
    89 => "10111010111100000111001010011001", 
    90 => "10111101110011011101110011101000", 
    91 => "10111101100010111001100111101111", 
    92 => "10111101110001100000110000101100", 
    93 => "10111101110010110010000110110111", 
    94 => "10111101111011011011101011010100", 
    95 => "00111101001101111111010101010101", 
    96 => "10111101100010010101101001101100", 
    97 => "00111100000000011000111000010101", 
    98 => "00111101111110010110100111100100", 
    99 => "10111100110000000100101101111111", 
    100 => "10111110001011010001111000010001", 
    101 => "10111101100001011000111100010011", 
    102 => "00111110001011101001101101111100", 
    103 => "00111110001010100111001110110100", 
    104 => "10111110000010010100001001001110", 
    105 => "00111101110001101100100001100100", 
    106 => "10111101100011011110101101000101", 
    107 => "10111101100111011100011110010001", 
    108 => "10111101100111100100000110111010", 
    109 => "10111100001000010101110001111100", 
    110 => "10111011011100011110011000110111", 
    111 => "00111101111010000111000100011101", 
    112 => "10111100110000101100000010100101", 
    113 => "00111101111011110001101110101100", 
    114 => "00111101010101001111100111011101", 
    115 => "00111101000100011100011011010010", 
    116 => "10111110000100000011001011011011", 
    117 => "10111101100101101111001000011111", 
    118 => "00111101001000111001100000111011", 
    119 => "10111101010111000111100000100001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_15 is
    component inference_conv2d_f3_3_0_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_15_rom_U :  component inference_conv2d_f3_3_0_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


