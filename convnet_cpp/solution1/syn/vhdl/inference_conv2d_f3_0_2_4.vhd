-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100010110011001011001111", 
    1 => "00111101111110101111001110100001", 
    2 => "00111011101010000010000000110000", 
    3 => "00111101000110111110010110100100", 
    4 => "00111110000010101011111001101010", 
    5 => "10111011110000011101101101010111", 
    6 => "00111110000001001111100011111001", 
    7 => "00111101010000010011001000010100", 
    8 => "10111110001100111100101010111000", 
    9 => "10111011111110000101101100110000", 
    10 => "00111101111110010111111101100011", 
    11 => "00111101110011101010011000111011", 
    12 => "10111101000111101010010101010111", 
    13 => "00111101001000101100000011011010", 
    14 => "00111101111110111010011111111100", 
    15 => "00111101111110001101011110011101", 
    16 => "10111101010101010101011111101011", 
    17 => "00111110000011001010101110000010", 
    18 => "00111100011000101011010101101100", 
    19 => "10111101101100101011111100111010", 
    20 => "00111101000100110110111101111110", 
    21 => "00111101100100001000111000100010", 
    22 => "00111101000010101010011010000010", 
    23 => "00111101100000000100001001101101", 
    24 => "10111110010000000111101010101111", 
    25 => "10111100111011000100001100011111", 
    26 => "10111101100111100001111001111110", 
    27 => "10111100111110110011100011110001", 
    28 => "10111110001100110100001010101011", 
    29 => "00111100011101000101011011101010", 
    30 => "10111100100100110100110111110000", 
    31 => "00111100101010101000011010111100", 
    32 => "10111100000111111001001110111001", 
    33 => "00111101100001111011101111010001", 
    34 => "00111110010101010010001010100111", 
    35 => "00111100111011110111010110100100", 
    36 => "00111101001000001100011100111011", 
    37 => "00111110001001001110110101110000", 
    38 => "00111101000010101111001001010010", 
    39 => "00111101011001101110111010110111", 
    40 => "10111100111101100011111010110110", 
    41 => "10111110011001101000001010110110", 
    42 => "10111101010010000101001001001001", 
    43 => "00111101100101000011101110001100", 
    44 => "10111110001100000101001010010011", 
    45 => "10111101111110110011111010011010", 
    46 => "10111101110100111110000000110111", 
    47 => "00111110000101010001000101011010", 
    48 => "10111101000010111100111001101010", 
    49 => "10111101101100010000111000011101", 
    50 => "10111101100010000001100010010000", 
    51 => "00111101111101010010111010110110", 
    52 => "10111100111110111110101011001000", 
    53 => "10111101010101010011011001011110", 
    54 => "00111101010101011001000111101000", 
    55 => "00111001111010011010101111000101", 
    56 => "10111101011010001111101010110000", 
    57 => "10111101110000000100011000011001", 
    58 => "00111101110010001100000000010011", 
    59 => "00111100000111111010001100001001", 
    60 => "10111101011001101101011001001000", 
    61 => "10111100100111101000100011101101", 
    62 => "00111101010111110001010010011000", 
    63 => "00111101101001010101100001110010", 
    64 => "10111101111100111011011011001100", 
    65 => "00111100110101001000111010011000", 
    66 => "10111100011101001111100011010000", 
    67 => "00111101011000010000011101100111", 
    68 => "10111101101001110000110000111011", 
    69 => "10111101010011010000110111101011", 
    70 => "10111101110100111011110110011101", 
    71 => "00111101011011101100100110101101", 
    72 => "10111101100001111110100111011001", 
    73 => "00111101100100111100010101101101", 
    74 => "10111100000100101111011010101000", 
    75 => "10111101110101001110111000111001", 
    76 => "00111101100101010001101001111001", 
    77 => "00111110001111001011010001101100", 
    78 => "10111100000111100001010001110011", 
    79 => "10111100110101011110100000110100", 
    80 => "10111101000111111011110110111011", 
    81 => "10111100011010011100110010111000", 
    82 => "10111010111000010001001101010110", 
    83 => "10111101110100001010000110111110", 
    84 => "10111101111001110101101010111000", 
    85 => "10111101110110000011101001010100", 
    86 => "10111101000000101100010010111100", 
    87 => "10111101101111101011011110010110", 
    88 => "00111101010000011101011010011010", 
    89 => "00111101110000001010111100101010", 
    90 => "10111101100011001010110011011111", 
    91 => "00111101101011101010111111101110", 
    92 => "10111100000111010111011101101010", 
    93 => "10111110000001001100110110111000", 
    94 => "10111101001101101001011001000100", 
    95 => "10111110010011000100000111011101", 
    96 => "10111101011001101100110100101001", 
    97 => "00111110000110101000000001001001", 
    98 => "10111101100001011101000101011000", 
    99 => "00111110000111111101100011110001", 
    100 => "10111110000110010110010011101001", 
    101 => "10111101000011101011011011001101", 
    102 => "10111101110110011001010001011011", 
    103 => "10111101101111000100111100111100", 
    104 => "10111101110110010010010010101111", 
    105 => "00111101001000001111100100111111", 
    106 => "00111101001101000010100000100110", 
    107 => "00111101101101111011000010110100", 
    108 => "10111110000110110100010011100101", 
    109 => "10111100111111011001010010000000", 
    110 => "00111101110110000010010001001111", 
    111 => "10111110000001010101110001010011", 
    112 => "10111101101100101001101110000110", 
    113 => "10111101000100001111001110001000", 
    114 => "10111101011111000110101101110001", 
    115 => "00111110000110111100111111010101", 
    116 => "00111101110000101011110011111001", 
    117 => "10111010000011110110101001100011", 
    118 => "00111101001000100010001010111010", 
    119 => "00111110001001100011000101110010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_4 is
    component inference_conv2d_f3_0_2_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_4_rom_U :  component inference_conv2d_f3_0_2_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


