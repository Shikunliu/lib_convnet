-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000001111010111101010111", 
    1 => "10111101101000011000110011100011", 
    2 => "10111110001000111011110100010110", 
    3 => "00111101011110101111011000100110", 
    4 => "10111100110101001010001111111100", 
    5 => "10111110001010111110101010010010", 
    6 => "10111101010101110000111011011011", 
    7 => "00111101001010001101100100100010", 
    8 => "10111100111011101110001000110110", 
    9 => "00111100110101001010010001100111", 
    10 => "10111110011011000100101111010011", 
    11 => "00111011111010000110111110101011", 
    12 => "00111101111101111010110101001011", 
    13 => "10111101100010110000001110010010", 
    14 => "00111101110110001100000100010010", 
    15 => "00111101110110110011001100010010", 
    16 => "00111101011000011100010001110110", 
    17 => "10111101001111100111111100101100", 
    18 => "00111101010100101011001100010000", 
    19 => "00111101001101111111110110111000", 
    20 => "10111100010101000101000100100110", 
    21 => "10111101001011011000000000110110", 
    22 => "10111101110001110110011010010001", 
    23 => "00111100100010000100111111111011", 
    24 => "00111101111111100101011101010100", 
    25 => "10111101011101011101110011100001", 
    26 => "00111001101101011000111101110111", 
    27 => "10111100010110001100001111100110", 
    28 => "00111101011110101110010010111110", 
    29 => "00111101001110001010111000010111", 
    30 => "10111011101011010111100101110101", 
    31 => "10111110000000110100000010010010", 
    32 => "00111101000001010100111000000011", 
    33 => "00111011111000001001101111001100", 
    34 => "00111100000010111101101011010101", 
    35 => "00111101101111001111001111000001", 
    36 => "00111101010001110011000101101000", 
    37 => "10111101110101001111100100111100", 
    38 => "10111101011010100000001101110100", 
    39 => "10111110000010001110110010010110", 
    40 => "10111101101110010001001100101100", 
    41 => "00111110001100111011110110011101", 
    42 => "00111100000101010100100000100110", 
    43 => "10111101100100100101011101010000", 
    44 => "00111101101111011111010110100111", 
    45 => "00111101001010101000110011101100", 
    46 => "00111101100010100010111100000110", 
    47 => "10111101100111010000010001101101", 
    48 => "00111101110001000101000001011100", 
    49 => "10111110001110010101000010111001", 
    50 => "00111100100100111111101010001001", 
    51 => "00111110011100101001001011000101", 
    52 => "10111110000000110100011100011111", 
    53 => "10111100010110001011001010110100", 
    54 => "00111101000101001000001110110000", 
    55 => "00111011110101110011101101010000", 
    56 => "10111101100001110111101101000111", 
    57 => "00111101011110111000001111001111", 
    58 => "10111101011111111011100100011110", 
    59 => "00111101111010101010001000011010", 
    60 => "00111101001110010111101111010010", 
    61 => "00111101110010011110110001110000", 
    62 => "10111101001101111011011010000101", 
    63 => "00111110000110101011111101110111", 
    64 => "10111101100010110000010100110010", 
    65 => "10111100100011001011001101101101", 
    66 => "10111100011101000100111000011011", 
    67 => "00111110001100000010010111000000", 
    68 => "00111101011111001101110101010001", 
    69 => "10111101110100101100100111010001", 
    70 => "00111110010101110011111000100101", 
    71 => "00111100000000001011000010101010", 
    72 => "10111011100111011010111010100111", 
    73 => "00111101101111101111111000011010", 
    74 => "00111101110010011001101100011111", 
    75 => "00111101010100110001000001100011", 
    76 => "00111100000011100010110011111111", 
    77 => "10111101111011110110101111100011", 
    78 => "00111101010010010000100010111101", 
    79 => "10111101000110010011101011101010", 
    80 => "10111101101011011110000010100001", 
    81 => "00111101111000001101101010100001", 
    82 => "10111101000000001110111110011010", 
    83 => "00111100101010000100110010111011", 
    84 => "00111110001100000000100110110011", 
    85 => "00111101101111000000111110111110", 
    86 => "00111101010010010000010111101000", 
    87 => "10111101001010111001001110110010", 
    88 => "10111100110100001100001101100111", 
    89 => "00111101100111101000011111101110", 
    90 => "10111101000001100100100111111100", 
    91 => "10111110000001101111101010000011", 
    92 => "00111101101101110111000010111101", 
    93 => "00111101101001010011101110110111", 
    94 => "10111110010011111001111110001000", 
    95 => "00111100001111110010101100100100", 
    96 => "10111101001100111110001111111101", 
    97 => "10111100101010010001011010101111", 
    98 => "00111101110100010010101000001111", 
    99 => "10111011000111111100000101010001", 
    100 => "00111101111001110001100100101111", 
    101 => "10111101101100010100001111011010", 
    102 => "10111101000010110101101111001110", 
    103 => "10111110000101100000011100111110", 
    104 => "10111110000011001001001001011000", 
    105 => "10111110000001011000001001010110", 
    106 => "10111100111110111000011011110100", 
    107 => "10111101010010110101100010101001", 
    108 => "00111101100001110100100010101111", 
    109 => "00111011100111110100101110110101", 
    110 => "10111110000110000101101000001100", 
    111 => "10111011011000111000011111001111", 
    112 => "00111110000110011101110011111001", 
    113 => "10111110000011100010001100101001", 
    114 => "00111101111011011001010110011010", 
    115 => "10111101101001001111001101011101", 
    116 => "00111011011111111000101001100100", 
    117 => "00111101011001111000110100001101", 
    118 => "00111100110101010001010011010000", 
    119 => "00111101111001000111101110101011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_0 is
    component inference_conv2d_f3_2_0_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_0_rom_U :  component inference_conv2d_f3_2_0_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


