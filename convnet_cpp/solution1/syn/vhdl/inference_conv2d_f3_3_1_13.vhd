-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001100010110010001000001", 
    1 => "00111101010110111001001111110101", 
    2 => "00111101101000100100110111000110", 
    3 => "10111100010101111110111101000000", 
    4 => "10111101110011011010000010011101", 
    5 => "10111101100010000111010110101101", 
    6 => "10111101011011101110101110001011", 
    7 => "00111101100110100111100111111111", 
    8 => "00111110000110111101000100100100", 
    9 => "10111101111110111100110000101001", 
    10 => "10111101001111010111001010000111", 
    11 => "00111110001110011101010101011110", 
    12 => "00111101010110101110011110101101", 
    13 => "00111101111010011011100001000101", 
    14 => "00111101110001010011100000110011", 
    15 => "10111101000110000010111111110010", 
    16 => "00111100010011001101000101101010", 
    17 => "10111100011101110001010000110100", 
    18 => "00111110001110010111111101100011", 
    19 => "00111100100011011011111100000101", 
    20 => "10111100001000111001001101001101", 
    21 => "10111101101100011100011010000001", 
    22 => "10111110001110011010101000011101", 
    23 => "00111101100110011111111010100001", 
    24 => "10111101101000111100110111101011", 
    25 => "00111101001001111000100111100111", 
    26 => "10111101101011000100110011010010", 
    27 => "00111101101011010011001100010111", 
    28 => "10111110001100011000100101111010", 
    29 => "10111101100000100011010110101000", 
    30 => "10111101111011110000101011100101", 
    31 => "00111101000010000100000011111100", 
    32 => "10111101100011011101101100010010", 
    33 => "00111101000010101110100100011000", 
    34 => "00111100111011011011010000111001", 
    35 => "00111100101100011111000100010100", 
    36 => "10111011110001110111100000001111", 
    37 => "00111100000010100110100001000100", 
    38 => "00111101110111011111001110110110", 
    39 => "00111101111100111010010001110010", 
    40 => "00111101100101010010101010111010", 
    41 => "10111101111000001000010000011111", 
    42 => "00111101010000101011000111011100", 
    43 => "10111101011000000010100001111010", 
    44 => "10111101100111101011001100101111", 
    45 => "00111101101100101100000100101011", 
    46 => "10111101101011100000111001011001", 
    47 => "00111101010010000000101111101101", 
    48 => "10111110000011001011101111000011", 
    49 => "10111110001011001100111111110010", 
    50 => "00111101000110111111011000110101", 
    51 => "00111101000110011101010011011000", 
    52 => "00111101001101111000000010100000", 
    53 => "00111101100010001101100101001011", 
    54 => "00111101100100001010011001000000", 
    55 => "10111101110011000111010101011001", 
    56 => "10111101100000111000000000111000", 
    57 => "10111101001011000111001001101010", 
    58 => "00111101101011100101110101011011", 
    59 => "10111101010111000000110000100000", 
    60 => "10111100101000001111100011010100", 
    61 => "10111101110100100000011001000010", 
    62 => "10111101011000100010110011001011", 
    63 => "00111101100101111110010011010001", 
    64 => "00111101101011011011101000100101", 
    65 => "00111101011111010100101110100000", 
    66 => "00111110010101101110111110000000", 
    67 => "00111101001010101110010001000101", 
    68 => "10111101111100101000111000001101", 
    69 => "00111100001111110111011100001110", 
    70 => "00111101101001110010000110100000", 
    71 => "10111101110111101001010000100101", 
    72 => "00111100101100101111000101011001", 
    73 => "10111101000111011010001010001101", 
    74 => "00111101010101000101011000010011", 
    75 => "00111101010010100110101111001001", 
    76 => "00111110001101001000000101101111", 
    77 => "10111101001000111010001001001100", 
    78 => "00111101010110101110010101000100", 
    79 => "00111110010011001100001001010000", 
    80 => "10111011110010110010110010100100", 
    81 => "10111101010110000010001001101011", 
    82 => "00111101011010101011011000100010", 
    83 => "10111100001010000101100101010000", 
    84 => "10111101101000111001000110100000", 
    85 => "10111101000100011111000101111111", 
    86 => "00111110000001011000000101001001", 
    87 => "00111001100000001011111000011010", 
    88 => "10111101100101100111111100100101", 
    89 => "00111101001100110110000100100001", 
    90 => "00111011000010010100000000110000", 
    91 => "00111011110011111000111001001000", 
    92 => "00111100000101100000101110100101", 
    93 => "10111101001001111010100010000110", 
    94 => "10111101101010101100010110110100", 
    95 => "10111101111110110010101010101110", 
    96 => "10111101000000101110111011001000", 
    97 => "00111100010001111010111011101011", 
    98 => "10111110001011111001111101000101", 
    99 => "10111101000000000111111100010110", 
    100 => "10111110001001100001110111001001", 
    101 => "00111101100010011110111011100111", 
    102 => "00111101101000010000101100101101", 
    103 => "00111100101010000000101111101101", 
    104 => "00111101001001100000101110110011", 
    105 => "00111100111001111101001101001110", 
    106 => "00111101010100111100100101000000", 
    107 => "00111101110110101011100011101001", 
    108 => "10111011011010010110111111110001", 
    109 => "00111100101100100111010101101000", 
    110 => "10111101110110111001010110100011", 
    111 => "00111101101000101001111010111001", 
    112 => "10111101111011111110101111010001", 
    113 => "00111101111110110110001111010100", 
    114 => "00111101100001000011101101110001", 
    115 => "10111101000001101001001010001100", 
    116 => "00111101110111100010000001000111", 
    117 => "00111101101001111101100010001100", 
    118 => "10111101101101101001110001001100", 
    119 => "10111101001000011011001010001000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_13 is
    component inference_conv2d_f3_3_1_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_13_rom_U :  component inference_conv2d_f3_3_1_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


