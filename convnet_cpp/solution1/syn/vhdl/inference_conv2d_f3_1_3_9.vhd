-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101100000101011011010010", 
    1 => "00111011100011001011101101111010", 
    2 => "10111101000100110001110011000011", 
    3 => "00111101000011010000001101010011", 
    4 => "10111110001101110000010010111100", 
    5 => "00111101010010111011111011100110", 
    6 => "00111110001000001111011000100111", 
    7 => "00111110001000101000010111101100", 
    8 => "10111011111111111101101111101110", 
    9 => "10111101111010010101001110011100", 
    10 => "10111101100001101111010101010010", 
    11 => "10111101110000101010000000110001", 
    12 => "00111101101101011101100111100100", 
    13 => "10111100111100001110000000111101", 
    14 => "00111100111100101001110001101010", 
    15 => "10111100010111011101010110011110", 
    16 => "00111101101000110100110100100111", 
    17 => "10111101110100001010001101010001", 
    18 => "10111001100011111101110011001111", 
    19 => "10111101110101101001011111110010", 
    20 => "10111011100110111110001101100000", 
    21 => "00111100111110110010110111010011", 
    22 => "00111101001100010110100000000111", 
    23 => "10111101010101001011100111001011", 
    24 => "00111110000100010101101101010111", 
    25 => "00111100011011110001111111011110", 
    26 => "00111101010110100111110101110101", 
    27 => "00111110001001000100100001001001", 
    28 => "00111100010001110011010101001001", 
    29 => "00111011011011111111110001111101", 
    30 => "00111101100010011010010011000100", 
    31 => "00111110001010001111100000011111", 
    32 => "00111100101110001000000111110010", 
    33 => "00111110000000110100100001101111", 
    34 => "00111110010010111010011110111001", 
    35 => "10111110001011110100101011011100", 
    36 => "00111110001001100001010100100011", 
    37 => "10111100011001011100100111110100", 
    38 => "00111110000011110111001111000001", 
    39 => "00111100000100011001111101001111", 
    40 => "00111101010001011101010101111101", 
    41 => "00111100100110110100101001110100", 
    42 => "10111101100111101001001011100011", 
    43 => "00111101011001010011001110110001", 
    44 => "10111101011010000111010111110000", 
    45 => "10111100000010111010000001100111", 
    46 => "10111101010011010101010001100010", 
    47 => "10111110000000010000010001001111", 
    48 => "10111101101010101100101111111110", 
    49 => "10111100101110011010110100000000", 
    50 => "00111011010110000011101011101010", 
    51 => "00111100110001101000101001011110", 
    52 => "10111101100101100110010111010011", 
    53 => "00111101000101100110111110010011", 
    54 => "10111100110100101111111010101011", 
    55 => "00111101010110001100011100100111", 
    56 => "10111101101101101101110100011001", 
    57 => "00111110000110010100010011101101", 
    58 => "00111110000010110110100100010010", 
    59 => "00111101010111010101100110101101", 
    60 => "10111101001010110010010010100111", 
    61 => "10111011101101101100001110001100", 
    62 => "00111110001010111100001101000000", 
    63 => "00111010110110111111010100001001", 
    64 => "00111110010000101110010001001011", 
    65 => "10111101010010100111110001110110", 
    66 => "00111101011100110011111101000010", 
    67 => "10111101100101010110010111010000", 
    68 => "00111101111110001101011010010001", 
    69 => "10111101001000110001011111100010", 
    70 => "10111101110010000111110101010101", 
    71 => "00111101000111100011010010111001", 
    72 => "00111101110100000001011111011011", 
    73 => "00111101000001110101100010000100", 
    74 => "00111110010101110100110001001101", 
    75 => "00111011100111011011111101101110", 
    76 => "10111100011001001010100101100010", 
    77 => "10111011111010100000100001000111", 
    78 => "00111110000110101000001001100010", 
    79 => "00111101101010000111101010110110", 
    80 => "10111101011010111100100110110010", 
    81 => "00111101001100000101010111010011", 
    82 => "10111011000001111001010001011110", 
    83 => "00111101100100001010001001101101", 
    84 => "00111101100101101101010100000110", 
    85 => "10111100000000110000101110001110", 
    86 => "00111011101110111101001010010100", 
    87 => "00111100111000100101011111100100", 
    88 => "10111110000101101001001100111010", 
    89 => "10111110001000010110001000101000", 
    90 => "10111101010001110100111001011000", 
    91 => "00111110001011110010110111000011", 
    92 => "10111101100000010101000000101100", 
    93 => "00111100111000101111101001101011", 
    94 => "10111101100011111101101001011011", 
    95 => "00111100110011001011011111010100", 
    96 => "10111110001011101111000011110001", 
    97 => "10111101101101110100101000001100", 
    98 => "10111011000011001011111001101010", 
    99 => "00111110011010011010010010011100", 
    100 => "10111110000000111111100010011000", 
    101 => "00111110000011111111011001001101", 
    102 => "10111101100100111010110111010101", 
    103 => "10111011110101111101010100101001", 
    104 => "10111101001110101011001111000110", 
    105 => "10111101110111011010101111100010", 
    106 => "10111010111011010111110110011100", 
    107 => "10111101110100011111100010100001", 
    108 => "00111101101000100111100000100010", 
    109 => "00111101111000100011001000001001", 
    110 => "10111101000111110001111100101111", 
    111 => "00111101000000011011101111011101", 
    112 => "00111110010110100001111100001000", 
    113 => "10111100100101000001101001101001", 
    114 => "10111101101000000110011111001111", 
    115 => "10111110001000101110011000100001", 
    116 => "10111110010011111000010111010111", 
    117 => "00111101101000100011011001010110", 
    118 => "10111011000110001011101001110111", 
    119 => "00111100110010101000001000000100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_9 is
    component inference_conv2d_f3_1_3_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_9_rom_U :  component inference_conv2d_f3_1_3_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


