-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001000110100101100001110", 
    1 => "00111110010010110101100110011011", 
    2 => "00111101100100110111110011000010", 
    3 => "00111110001000110111110111101001", 
    4 => "00111001101110010110110111111110", 
    5 => "10111101011011110101011100111011", 
    6 => "10111100001101010110101100011100", 
    7 => "00111110000111101101111111100111", 
    8 => "00111101100011000111100011101010", 
    9 => "10111101101111111011000111010100", 
    10 => "10111100100100010001000010010100", 
    11 => "10111101101000011011000101100000", 
    12 => "10111101101001111001001100010100", 
    13 => "00111101000111000100011100001110", 
    14 => "10111101000000001001001100111000", 
    15 => "10111100010111100010011000100110", 
    16 => "10111101110100101001010111101010", 
    17 => "10111101111101101000000011100000", 
    18 => "10111101110000100110100111111010", 
    19 => "00111101100010000000000011111000", 
    20 => "10111101011011010010101101100010", 
    21 => "10111101001110100111011000011110", 
    22 => "00111011010010111110110110101010", 
    23 => "10111101001010010010100010000011", 
    24 => "00111101100001000111000111111000", 
    25 => "10111101101111011001011010110100", 
    26 => "00111100110100111101001001111011", 
    27 => "10111101111100010011011100101010", 
    28 => "00111110001100111010010001110010", 
    29 => "10111101100011011110100110110011", 
    30 => "10111101100001001111101011101001", 
    31 => "10111100111100110101100010001000", 
    32 => "00111101101111011110111111010101", 
    33 => "00111101010011011000100001111111", 
    34 => "00111101110001000011011001110110", 
    35 => "10111101110001110001000011011001", 
    36 => "00111101101101101100100010011001", 
    37 => "10111101001110100111110000011000", 
    38 => "00111101110110000010100010000000", 
    39 => "10111110000000110001101110011011", 
    40 => "00111101111011011010000010011101", 
    41 => "00111101110000011101000110011111", 
    42 => "00111100111010101100111110110111", 
    43 => "00111101111110001100011001010000", 
    44 => "00111110000101111000000011111110", 
    45 => "00111101101000101110000011010110", 
    46 => "00111110011001100111101000010000", 
    47 => "00111100100001010000000000011010", 
    48 => "10111101001111011100101010110110", 
    49 => "00111101000110100011010010101111", 
    50 => "10111110001001011100100011011010", 
    51 => "00111101110001100010010011000010", 
    52 => "00111101100010111110101010101101", 
    53 => "10111101111001111100101011101010", 
    54 => "00111100010101110110100101110011", 
    55 => "00111101100011000010010011010001", 
    56 => "10111100111111111001011111000110", 
    57 => "00111110000000101110000101101001", 
    58 => "10111101000111111101101111101110", 
    59 => "10111101101111011111100101100000", 
    60 => "10111011001000101000111001100000", 
    61 => "10111110000001001011011100101100", 
    62 => "10111101101100000111111000001010", 
    63 => "10111110000000101100101000010101", 
    64 => "00111101111101010100100111111001", 
    65 => "10111101000010000100101111001001", 
    66 => "10111101000101001000111001000111", 
    67 => "00111110001011010101010000010001", 
    68 => "00111110000100110101000001001100", 
    69 => "10111110001001100011010001010101", 
    70 => "00111101100010001111111001011100", 
    71 => "10111110000000001011011000110001", 
    72 => "00111100110001000011110000000101", 
    73 => "10111101011000110100101101111001", 
    74 => "10111100000101101100001110100110", 
    75 => "10111110000001100010010111101010", 
    76 => "00111110010000001100000111111101", 
    77 => "00111100101011011111100101101101", 
    78 => "00111101100001101010001101101101", 
    79 => "00111100100000100000110011101011", 
    80 => "10111110000000011100010000110011", 
    81 => "10111100000101000111111111111111", 
    82 => "10111101100000100111110010010111", 
    83 => "00111101100111010100010100000101", 
    84 => "00111110001000101100100010000010", 
    85 => "10111110000010100010111110001100", 
    86 => "10111101000101100111110001000011", 
    87 => "10111101100001000110100000101010", 
    88 => "10111101100111000101000101101111", 
    89 => "00111101101111101100001100010001", 
    90 => "00111101011011111010000101011110", 
    91 => "10111011101011010000110111010101", 
    92 => "00111110001110011101000100101101", 
    93 => "10111101111011000011010101001000", 
    94 => "00111100000111001000001100111001", 
    95 => "00111101010110110011110011010010", 
    96 => "10111101010010010111010011110100", 
    97 => "10111010000100100010111100110001", 
    98 => "00111101100101110011100000000011", 
    99 => "10111101000100001011100010011010", 
    100 => "00111101101000011010000100010010", 
    101 => "10111101101111101110110111100111", 
    102 => "00111110000010011011100100001111", 
    103 => "00111110000111000000001000101010", 
    104 => "10111100111011011011111111110111", 
    105 => "00111101100110000010100010000000", 
    106 => "10111101110000000101100010101000", 
    107 => "00111101010110011000011100100101", 
    108 => "10111100011010110000000111010111", 
    109 => "10111101001110001001011100000101", 
    110 => "00111101110000100101111000111100", 
    111 => "10111011001000111100001110111111", 
    112 => "00111101101110010011111010100011", 
    113 => "10111101101101010011101100111110", 
    114 => "00111100110010000010101010100111", 
    115 => "10111100011100110101001101001001", 
    116 => "10111101000100001001110010011011", 
    117 => "10111100110000001111011110101100", 
    118 => "10111110001101110111101101111100", 
    119 => "10111110000011010111000011100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_6 is
    component inference_conv2d_f3_3_0_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_6_rom_U :  component inference_conv2d_f3_3_0_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


