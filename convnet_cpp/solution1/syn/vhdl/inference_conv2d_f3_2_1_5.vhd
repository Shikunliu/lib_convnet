-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001000101010011101111010", 
    1 => "10111100001111100111101000100100", 
    2 => "00111110010101010001101001000011", 
    3 => "00111101100110010010011100001011", 
    4 => "10111110001001100110011001100110", 
    5 => "00111110000011001101101110111110", 
    6 => "10111110001000100111000100110111", 
    7 => "00111101110001011111101110011010", 
    8 => "00111101101010010000101111100011", 
    9 => "00111110010001011111111101100001", 
    10 => "00111101111101100111000010100000", 
    11 => "00111101110001100001101000111001", 
    12 => "00111101011111011100111100000011", 
    13 => "00111100000100100001001100111101", 
    14 => "00111101111111111000101110011100", 
    15 => "10111010000101111000001011011000", 
    16 => "00111011110001011110010010111100", 
    17 => "10111101011111111110101101011000", 
    18 => "00111101101010111100001100001010", 
    19 => "10111101100011101101001001100001", 
    20 => "10111100000110011100111111100000", 
    21 => "00111101100001101000101101001111", 
    22 => "10111101001010011001000010001000", 
    23 => "10111101100101011010100000001000", 
    24 => "10111100001000000000000100110010", 
    25 => "00111110000000111010001101100110", 
    26 => "00111101101100101100010000110101", 
    27 => "00111101100101001111100100100001", 
    28 => "00111101100010000110011011010111", 
    29 => "10111101101101010011000100101101", 
    30 => "10111101000101111010011110111100", 
    31 => "10111100000110001010101010010001", 
    32 => "10111100100001011001101001110100", 
    33 => "00111110000011001110100101100000", 
    34 => "00111101000000011011010001101011", 
    35 => "10111100111010111110000000100011", 
    36 => "10111100001111000101101000100011", 
    37 => "10111100101100010010011001111110", 
    38 => "00111110001000100111011010111000", 
    39 => "10111011111100010011111100110010", 
    40 => "10111101100001101101111001110110", 
    41 => "10111100111100110111000110110010", 
    42 => "10111100111111101100001001111110", 
    43 => "00111110001101000000101001101100", 
    44 => "00111110001101011110111100100000", 
    45 => "10111101011101000011110011001110", 
    46 => "10111100111111011101000011100110", 
    47 => "10111101001110011000100001001100", 
    48 => "00111100110010001100011011100011", 
    49 => "10111101011010011010100101000111", 
    50 => "10111100001100101011001011011011", 
    51 => "10111011000111000010101111110000", 
    52 => "10111110001111100101100101101101", 
    53 => "10111101001001010110100000111010", 
    54 => "00111101100001011010101111110111", 
    55 => "10111101100101011110000110011001", 
    56 => "10111100100110101100011111001101", 
    57 => "10111101111100100101001001001000", 
    58 => "10111101110100110010111110001000", 
    59 => "10111101001101110001101101010101", 
    60 => "00111100110110001110010101110100", 
    61 => "10111100111000111110110101111011", 
    62 => "10111110000000010101111110001001", 
    63 => "00111101100011011011000111101010", 
    64 => "10111110000111011100001101111010", 
    65 => "10111101011000000000011111111000", 
    66 => "00111101110011110100000001011111", 
    67 => "00111101011010111111001100011110", 
    68 => "00111101111000101110111001000010", 
    69 => "00111101101001001010100001001001", 
    70 => "10111101100001111100111100000001", 
    71 => "10111101010001001011100100000010", 
    72 => "10111101000101110000100000001010", 
    73 => "10111110001111111110111011110110", 
    74 => "00111110001100100000000111001101", 
    75 => "10111110001001010101101011000000", 
    76 => "10111100111111110111110110001111", 
    77 => "00111011101010100011000011010110", 
    78 => "00111100000010011101001101001000", 
    79 => "10111101100011100100111110111001", 
    80 => "00111101100111110101100101010100", 
    81 => "00111101111101100110010100010111", 
    82 => "10111101100100110011001100001011", 
    83 => "10111110001111010100100010001000", 
    84 => "00111101101011011100100111101101", 
    85 => "00111100101010011100011101111010", 
    86 => "00111100100111100000010001100010", 
    87 => "10111110001100100101011000110110", 
    88 => "00111101011010010110111010001110", 
    89 => "00111100111101011011010110001111", 
    90 => "00111110001010100111001100101110", 
    91 => "00111110000111110011101110100111", 
    92 => "10111100101111010101001110110011", 
    93 => "00111010110001111100010101010001", 
    94 => "00111101101001011001101000100011", 
    95 => "10111101110010110000011101001010", 
    96 => "00111101011111000000101010001101", 
    97 => "00111100100010111000010100111010", 
    98 => "00111101001000010100000101001001", 
    99 => "00111101101010001110101001101111", 
    100 => "00111001001101001100011101011001", 
    101 => "10111110010101010101001000011010", 
    102 => "00111100101010111101011110001010", 
    103 => "00111101011111000111110000011101", 
    104 => "10111101000001101010000000010010", 
    105 => "10111101101100110110000000000111", 
    106 => "00111110000010110110001101001110", 
    107 => "00111101000001011010001001101100", 
    108 => "10111110000110110111100111011001", 
    109 => "10111101011110110001110000011011", 
    110 => "00111110001111110110000101100111", 
    111 => "10111101010110001001101100011100", 
    112 => "10111101011011110011101001100101", 
    113 => "10111100001101010110100101101110", 
    114 => "00111100111011100010111001000110", 
    115 => "00111101101011010011001111101101", 
    116 => "10111100111010000010101011000001", 
    117 => "10111101100101110000111010001010", 
    118 => "10111101011101010111010000000110", 
    119 => "10111101000011001101000101101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_5 is
    component inference_conv2d_f3_2_1_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_5_rom_U :  component inference_conv2d_f3_2_1_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


