-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000000111111001110101011", 
    1 => "10111100011110000110100100110011", 
    2 => "00111101100011110010111011001111", 
    3 => "00111101001101100000101001100011", 
    4 => "00111100000000100111100100100001", 
    5 => "00111110100011111000000010011001", 
    6 => "10111101010101100101101111000010", 
    7 => "10111100100111001101100100011111", 
    8 => "00111110001001001111110011100111", 
    9 => "10111101101101000100001110111010", 
    10 => "10111101010110000001100111010010", 
    11 => "10111101010000000000011100000111", 
    12 => "00111101110011100111101000110001", 
    13 => "00111101010100111101111000111001", 
    14 => "10111110001001110000100101110100", 
    15 => "10111101110110000010100010000000", 
    16 => "10111011001000111001001011000010", 
    17 => "00111110000001111011111100011111", 
    18 => "00111101001010111011010001001110", 
    19 => "10111100100100101010011001100000", 
    20 => "10111101011111010011010111010001", 
    21 => "00111100100100011010000101001000", 
    22 => "00111110010010111001010100011100", 
    23 => "00111101111010100101011100100001", 
    24 => "10111101100100111111110101111000", 
    25 => "00111101001011001011000100011110", 
    26 => "00111100100011101000011000001010", 
    27 => "00111110000000011000000100010111", 
    28 => "10111101110110011001000010110000", 
    29 => "00111101101010010000001111010000", 
    30 => "10111101110010100000101000001111", 
    31 => "10111011110100010011010101111101", 
    32 => "10111100110110111110110000100101", 
    33 => "10111101100000011010000111001110", 
    34 => "00111101001101100100101000100100", 
    35 => "00111110000010011000010010100001", 
    36 => "10111100111001010111100010010101", 
    37 => "00111101000101010111001110011010", 
    38 => "10111101010110110111010010011011", 
    39 => "10111110000001101111101110001111", 
    40 => "10111101101111111000100110000011", 
    41 => "10111100011011111100011001100001", 
    42 => "00111100001100111001100100011111", 
    43 => "00111100110011000110001001000100", 
    44 => "00111101001011101010011101100011", 
    45 => "00111101110011111010001001101010", 
    46 => "00111101100100011110010000100001", 
    47 => "10111101000100111100011101111000", 
    48 => "10111101000011101100100101110111", 
    49 => "00111110000100001001011000110101", 
    50 => "00111101111011010110010111100100", 
    51 => "10111101000110111011111010001000", 
    52 => "10111011100101011000111010001000", 
    53 => "00111101011100001001010010001000", 
    54 => "10111101101110101111011101001101", 
    55 => "00111110000101111111110011111100", 
    56 => "10111101110101110000010001111001", 
    57 => "00111110000010101101001110100110", 
    58 => "10111011001111000110010011110110", 
    59 => "10111101000011101100010010111111", 
    60 => "00111100101000000101010111100001", 
    61 => "10111101110010110110111011001001", 
    62 => "00111110001110011001110100000010", 
    63 => "10111101111111000110100111111001", 
    64 => "10111101100010010101100010010111", 
    65 => "00111101111001001101001010110011", 
    66 => "00111101101000110101100101101100", 
    67 => "10111110100111100000100010101111", 
    68 => "10111101000011110100011110000001", 
    69 => "10111101100000110000100110111011", 
    70 => "00111101110011110101110110111100", 
    71 => "10111101100001111010010010010111", 
    72 => "00111100101010010100110100110110", 
    73 => "10111101001101100001100100101100", 
    74 => "10111100111001011001101000100011", 
    75 => "10111101101000010010100011100111", 
    76 => "00111101101100010001011010110110", 
    77 => "10111110001011100101100101101101", 
    78 => "10111110010111001011011100001011", 
    79 => "00111100110101001001001001011110", 
    80 => "10111110000111100000110101100111", 
    81 => "00111011000111010110110010111000", 
    82 => "10111101001001100111111111111100", 
    83 => "10111101101110111000010100011111", 
    84 => "00111110000011100001011111100011", 
    85 => "00111010100111011101010000111100", 
    86 => "00111101101100011000010110100111", 
    87 => "10111110011000111110011101001011", 
    88 => "10111101110101101011010101001110", 
    89 => "10111101111111101101000001110000", 
    90 => "00111101100000011100000000011100", 
    91 => "00111100110100001101101100011010", 
    92 => "00111101011010111100111010111011", 
    93 => "00111110000101101010101100010101", 
    94 => "00111101010011010111001100011011", 
    95 => "00111100111001100010100010001001", 
    96 => "10111101001110101110001100010000", 
    97 => "10111101100011000011100011110011", 
    98 => "10111101111000010001100110001011", 
    99 => "00111101000000111101100010111000", 
    100 => "00111101101101001001010000011001", 
    101 => "10111100101001011111001101111010", 
    102 => "00111101110101101100010010000010", 
    103 => "10111101101110111101010011010000", 
    104 => "00111110100000111101010011010000", 
    105 => "00111101001010101011010011111010", 
    106 => "10111101111100000001011001001000", 
    107 => "00111101011010010111111111011100", 
    108 => "00111101011110111111101101110100", 
    109 => "10111101100111110110011100011110", 
    110 => "10111101010100110110101101100111", 
    111 => "00111011110011000001001011010011", 
    112 => "00111101101010101110010011011000", 
    113 => "10111101101101111100001100001101", 
    114 => "00111101100001111110101011100110", 
    115 => "00111101111011010011110011111111", 
    116 => "10111101110010100101011110001101", 
    117 => "10111101010101000101111010101100", 
    118 => "10111101010110100001010101110000", 
    119 => "00111110010101000100100100010011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_14 is
    component inference_conv2d_f3_0_2_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_14_rom_U :  component inference_conv2d_f3_0_2_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


