-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101100100011111111110", 
    1 => "10111101111011001011101001110011", 
    2 => "10111110000001000011000101111011", 
    3 => "00111101000000111010011010011001", 
    4 => "10111101010010011100111111111000", 
    5 => "00111100111111000110000110110000", 
    6 => "00111101110001011000010001000110", 
    7 => "00111101000000111001100001110001", 
    8 => "10111101010101100001101111001011", 
    9 => "10111101000100000110010011010010", 
    10 => "10111101010010011110000000111001", 
    11 => "00111110000000000100110010001100", 
    12 => "00111110001000100011000000110100", 
    13 => "10111011010000111010100111100011", 
    14 => "00111101001100010001110001010010", 
    15 => "10111110000101011110101000100101", 
    16 => "10111101010101010010100001101011", 
    17 => "00111100111001110011101100001101", 
    18 => "10111101011100000101110111100110", 
    19 => "10111101011111111110000011011011", 
    20 => "10111110010010000111101111011101", 
    21 => "10111110010100011100010001110110", 
    22 => "00111011010010011111110111100101", 
    23 => "10111100010100000000101101000110", 
    24 => "00111010001101111110111001100110", 
    25 => "00111100101100000011000110001100", 
    26 => "00111110001000101001101110101110", 
    27 => "10111100111100010101100010011101", 
    28 => "00111100100100000011110011000100", 
    29 => "00111100111101011111110000000110", 
    30 => "10111101010110110010000101110100", 
    31 => "10111101111011010010001111010101", 
    32 => "00111100000011000010001001001101", 
    33 => "00111101110110010011110111011001", 
    34 => "10111101100101010011010101101100", 
    35 => "00111110010001100001000010101110", 
    36 => "10111101000001001000011110000100", 
    37 => "00111101010110000011010000111111", 
    38 => "10111100101011000010011111011100", 
    39 => "00111101000101000110100000011100", 
    40 => "10111100111011100010010011010110", 
    41 => "10111101100011101110010111101111", 
    42 => "00111101100110111110010111001100", 
    43 => "10111101010011110100011010101010", 
    44 => "00111101010010011011100110000111", 
    45 => "00111101100011110110110011100011", 
    46 => "10111110010010000001100001000000", 
    47 => "00111101000000110001010101111001", 
    48 => "00111110010000101101000011100101", 
    49 => "10111101100111100110111101010111", 
    50 => "00111100100011101011000101110100", 
    51 => "00111100101100001101100011100110", 
    52 => "10111101110000010100010010100100", 
    53 => "00111100111100110010000011110100", 
    54 => "10111110000101100110111001000100", 
    55 => "00111101111100100110111110100100", 
    56 => "10111110000011010000000111000001", 
    57 => "00111110001000011001010100000011", 
    58 => "10111101110000110000001000111011", 
    59 => "10111101101101011100000000100110", 
    60 => "10111100101010100101001111111100", 
    61 => "00111101001011101011100000101010", 
    62 => "10111101001000000000011111011101", 
    63 => "00111100011010111001010101111010", 
    64 => "10111101100111110000100101000101", 
    65 => "10111100010101010101110001010011", 
    66 => "00111100101000011101001011101110", 
    67 => "00111110000011001010001010011000", 
    68 => "10111101101101001001110010100101", 
    69 => "00111101101011101001011011000100", 
    70 => "00111101101101101001011111010111", 
    71 => "10111101001110001010001110110101", 
    72 => "00111101010101011010100110110101", 
    73 => "00111101111110101100111101110100", 
    74 => "00111101110100100000000100000100", 
    75 => "10111100110011000010011111110111", 
    76 => "10111110000100000110100000010010", 
    77 => "00111110011000111010111110111000", 
    78 => "10111011101000000011000110111001", 
    79 => "10111101010000010111110010100010", 
    80 => "10111101100001101100001010101101", 
    81 => "10111101111110111001111110011001", 
    82 => "00111101100001110010100110011000", 
    83 => "00111101010010011000110100101101", 
    84 => "00111100000101100100110110011111", 
    85 => "10111101101011010001100101001011", 
    86 => "00111101011101011111100101100111", 
    87 => "10111101011110111010001010100011", 
    88 => "10111100101100100011000111100001", 
    89 => "00111101011011101010010110011010", 
    90 => "10111101101100110010110000111010", 
    91 => "00111100100100000110100100111001", 
    92 => "10111101001100110001000001111110", 
    93 => "00111101001000010011001101010110", 
    94 => "00111110000011011010010000000101", 
    95 => "00111011101001110011101111000100", 
    96 => "10111110000000010000111101010010", 
    97 => "00111101111101010010000000001000", 
    98 => "00111101010010001110101101000110", 
    99 => "00111101101110111001111111110111", 
    100 => "00111101110001110101111001001001", 
    101 => "10111101101010110110100111110110", 
    102 => "00111100101111111011100100011110", 
    103 => "00111110000001111110000001101001", 
    104 => "10111101100000011101100001100010", 
    105 => "10111100010101010011111011110111", 
    106 => "00111011011001000101111101100110", 
    107 => "10111101010100100011101100000001", 
    108 => "00111101010011110110110011110000", 
    109 => "00111101101101100100001011000000", 
    110 => "00111101110110111000000100110000", 
    111 => "10111100001101010010101011110000", 
    112 => "10111011111101000110011100011011", 
    113 => "10111101101001111101101110110001", 
    114 => "10111101110010110100110101100011", 
    115 => "10111101101101011110101100010110", 
    116 => "10111010111011111101000111100000", 
    117 => "00111101111110100011110010100111", 
    118 => "00111101101111101110011000110010", 
    119 => "10111101100101110000111111001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_8 is
    component inference_conv2d_f3_3_0_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_8_rom_U :  component inference_conv2d_f3_3_0_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


