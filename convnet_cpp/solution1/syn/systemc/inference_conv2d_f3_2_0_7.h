// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_7_H__
#define __inference_conv2d_f3_2_0_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_7_ram) {
        ram[0] = "0b10111101111111111000110010101000";
        ram[1] = "0b00111101100101010011000101110000";
        ram[2] = "0b10111100101100000010010010001011";
        ram[3] = "0b00111101100011011000101001100010";
        ram[4] = "0b10111101100110011011010110110100";
        ram[5] = "0b00111100000001101111101101100111";
        ram[6] = "0b00111101010010101001011111101111";
        ram[7] = "0b10111101001000101011000111110111";
        ram[8] = "0b10111100001010100100010001110111";
        ram[9] = "0b10111101100001000011001100110110";
        ram[10] = "0b00111011110001000101001011000000";
        ram[11] = "0b00111100100100100000001110100011";
        ram[12] = "0b10111010100011110010110110000101";
        ram[13] = "0b10111100010010010100001101000000";
        ram[14] = "0b10111100010001010111000001001101";
        ram[15] = "0b10111101111100101111011101101110";
        ram[16] = "0b10111101010000011110010010001100";
        ram[17] = "0b00111101001011111001011001110110";
        ram[18] = "0b00111110001001100011110010111000";
        ram[19] = "0b00111100001010010101100001010011";
        ram[20] = "0b00111010111010110001111110011110";
        ram[21] = "0b00111100111111110110000001101000";
        ram[22] = "0b00111101101000100111011010111000";
        ram[23] = "0b00111110000010110100000011110110";
        ram[24] = "0b00111100011101101001110111101100";
        ram[25] = "0b10111101101000000001100010001001";
        ram[26] = "0b10111101100110110110010001011010";
        ram[27] = "0b00111101010111011011110000100011";
        ram[28] = "0b10111100010011000110101000111100";
        ram[29] = "0b10111110000010001010100110111101";
        ram[30] = "0b10111110011101111000001100010111";
        ram[31] = "0b10111101011111011010001100101110";
        ram[32] = "0b00111011010000110000101110000011";
        ram[33] = "0b10111100111011001000101011011000";
        ram[34] = "0b10111101000001010100111011110100";
        ram[35] = "0b10111010111011110101111001110010";
        ram[36] = "0b10111101101010000110001101100001";
        ram[37] = "0b00111101001010100100000101101101";
        ram[38] = "0b10111100101100100110100011010011";
        ram[39] = "0b00111100101110110011000001011000";
        ram[40] = "0b00111101011001010000010001001100";
        ram[41] = "0b00111100100001101110110001001110";
        ram[42] = "0b10111101111111011000000101101011";
        ram[43] = "0b00111101100100000000100001110001";
        ram[44] = "0b00111100011101110111011100110000";
        ram[45] = "0b00111100110111011001111111101110";
        ram[46] = "0b10111100100000100111000010001000";
        ram[47] = "0b10111110000010100111101100001011";
        ram[48] = "0b00111011100100000010101111000111";
        ram[49] = "0b10111101100101010111010110011000";
        ram[50] = "0b00111101110011010111011000100101";
        ram[51] = "0b00111101000000101100011111000110";
        ram[52] = "0b00111110001100010101011000011001";
        ram[53] = "0b00111101001110101110111000101101";
        ram[54] = "0b10111101100110111000111010011100";
        ram[55] = "0b00111101001110110111011100011111";
        ram[56] = "0b10111101000011101010011000100001";
        ram[57] = "0b00111101101111110001000011101101";
        ram[58] = "0b10111110001000100000001111100110";
        ram[59] = "0b10111101001000101110101100000001";
        ram[60] = "0b10111110001000111100000011000010";
        ram[61] = "0b00111110000111001100101000101110";
        ram[62] = "0b00111101011010101110100011000111";
        ram[63] = "0b00111110000011011100100000110010";
        ram[64] = "0b10111100111011110100011100010101";
        ram[65] = "0b00111100100100010010111011000111";
        ram[66] = "0b00111101110011111101001100101100";
        ram[67] = "0b10111101011000101110010111011110";
        ram[68] = "0b00111100100010110010000110011100";
        ram[69] = "0b00111101101110001000101100010001";
        ram[70] = "0b00111110001000001110010111100110";
        ram[71] = "0b10111110000010111110101010010010";
        ram[72] = "0b00111101101110010001000000100010";
        ram[73] = "0b00111101001111000000111101000101";
        ram[74] = "0b00111101100001100010100000000010";
        ram[75] = "0b10111110001011000111111001101011";
        ram[76] = "0b10111101001111011011000000101111";
        ram[77] = "0b00111100100001111011010100110110";
        ram[78] = "0b10111011111111101100110010100100";
        ram[79] = "0b00111110001000101000110000110111";
        ram[80] = "0b10111101101000111001010000010111";
        ram[81] = "0b00111100010110101101001010110100";
        ram[82] = "0b00111101010100101000011111011101";
        ram[83] = "0b00111101111101101011101010001100";
        ram[84] = "0b00111101101110010100010010101010";
        ram[85] = "0b00111101111110101011001110101011";
        ram[86] = "0b10111101001000101111111100001001";
        ram[87] = "0b00111101110011010101110001110100";
        ram[88] = "0b10111101111100001011101101101111";
        ram[89] = "0b00111101100001001111010001000001";
        ram[90] = "0b10111101111001101110001010101000";
        ram[91] = "0b10111100110000000111001111111001";
        ram[92] = "0b10111011111100001100001110110111";
        ram[93] = "0b00111101110101110001010010111010";
        ram[94] = "0b00111110001010001010101101010000";
        ram[95] = "0b00111101100001000001110101110100";
        ram[96] = "0b10111101100010100010001111000000";
        ram[97] = "0b10111101101101101000001000111101";
        ram[98] = "0b00111101101001111111010101100010";
        ram[99] = "0b00111101100010100110111111010011";
        ram[100] = "0b00111100001111000100100000011010";
        ram[101] = "0b10111101110110000101010010001011";
        ram[102] = "0b00111101011101100101111111011001";
        ram[103] = "0b10111110001111111010001001101010";
        ram[104] = "0b00111100000101001010110100100001";
        ram[105] = "0b10111101000101011111111101111011";
        ram[106] = "0b00111100100101000011111001111011";
        ram[107] = "0b10111101100010110011010001100001";
        ram[108] = "0b00111101110001110110001101010001";
        ram[109] = "0b00111110001011010011010010011100";
        ram[110] = "0b00111100111110011001110110110000";
        ram[111] = "0b10111101101100101011110000110000";
        ram[112] = "0b10111101100110011100011010100011";
        ram[113] = "0b10111101001011010001011111111100";
        ram[114] = "0b10111101000101111100000011100111";
        ram[115] = "0b10111110010001000011001101010001";
        ram[116] = "0b00111101011101110100001100101101";
        ram[117] = "0b00111101101100011110011001100010";
        ram[118] = "0b10111110001100111101111111110100";
        ram[119] = "0b10111110000011111100010111001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_7) {
meminst = new inference_conv2d_f3_2_0_7_ram("inference_conv2d_f3_2_0_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_7() {
    delete meminst;
}


};//endmodule
#endif
