// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_15_H__
#define __inference_conv2d_f3_4_2_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_15_ram) {
        ram[0] = "0b10111101001100111011000101110011";
        ram[1] = "0b10111101101010000110111101110000";
        ram[2] = "0b00111100000111011110100101001010";
        ram[3] = "0b10111101110101110001101100000100";
        ram[4] = "0b00111101100101110110110100010001";
        ram[5] = "0b00111101010001000010111101101111";
        ram[6] = "0b00111101001000100001011010010000";
        ram[7] = "0b00111101110000101100001010111101";
        ram[8] = "0b00111101101111100000100111001001";
        ram[9] = "0b00111100011111011011101111101110";
        ram[10] = "0b00111101010000111001001100110010";
        ram[11] = "0b10111011101001110111010010111001";
        ram[12] = "0b10111101100101100001100001111110";
        ram[13] = "0b10111100100001011011101111001100";
        ram[14] = "0b10111110000100101010010100011110";
        ram[15] = "0b10111101000011100101100111001010";
        ram[16] = "0b10111101100110000011111010111011";
        ram[17] = "0b10111110010010111000110110000010";
        ram[18] = "0b10111011101000100010011110110011";
        ram[19] = "0b10111101001011100011111010111101";
        ram[20] = "0b10111101010110000010100101010111";
        ram[21] = "0b10111101000010101011011110011001";
        ram[22] = "0b10111101111111000001001011110001";
        ram[23] = "0b10111101010001010000100001001000";
        ram[24] = "0b00111110001101110010101111001011";
        ram[25] = "0b10111101000100101101010111111011";
        ram[26] = "0b00111110001110111011110101111011";
        ram[27] = "0b10111110000010010010111001100010";
        ram[28] = "0b10111110011001101101010111010000";
        ram[29] = "0b00111101101010010100001111010100";
        ram[30] = "0b10111101111111101011011101000101";
        ram[31] = "0b10111101101011011110111110010010";
        ram[32] = "0b10111100011011111001100100010101";
        ram[33] = "0b10111101010110110010101011111111";
        ram[34] = "0b10111101010101111110010011011110";
        ram[35] = "0b10111110001001011100000101000000";
        ram[36] = "0b10111101111000100010101110111111";
        ram[37] = "0b10111100110110011011001011000100";
        ram[38] = "0b10111100011110010101000010111001";
        ram[39] = "0b10111110010100110011011111101011";
        ram[40] = "0b10111101100001111100001100011011";
        ram[41] = "0b00111110000011010101101110101011";
        ram[42] = "0b10111101100101001010010001110101";
        ram[43] = "0b10111100110011100010110010110100";
        ram[44] = "0b00111101010010000001101100111101";
        ram[45] = "0b10111101100101010000111101101001";
        ram[46] = "0b10111101011001010111010001100011";
        ram[47] = "0b10111100101101100000101110001010";
        ram[48] = "0b00111101111000100001011011000110";
        ram[49] = "0b00111101100110101000011101111000";
        ram[50] = "0b10111110000010010011001111100011";
        ram[51] = "0b00111101110101010011000101010101";
        ram[52] = "0b10111101011101100000111110100001";
        ram[53] = "0b10111101000011101001100001111111";
        ram[54] = "0b00111100110100110101110101110101";
        ram[55] = "0b00111101101010101111010001010000";
        ram[56] = "0b00111101000011100100010000010110";
        ram[57] = "0b00111101011010000111001001111010";
        ram[58] = "0b10111101111001110100010000101100";
        ram[59] = "0b00111101100001101100101000011111";
        ram[60] = "0b10111101101000111001110110010100";
        ram[61] = "0b00111101110100101101001010111011";
        ram[62] = "0b10111110011011100011111010101111";
        ram[63] = "0b10111101010001110101011111100011";
        ram[64] = "0b00111110001101000010010100101001";
        ram[65] = "0b00111101110001001010110101010001";
        ram[66] = "0b00111110001001100011111000001000";
        ram[67] = "0b00111101000100110101101001010000";
        ram[68] = "0b10111110010010101110111111110110";
        ram[69] = "0b00111100111010110110001101011011";
        ram[70] = "0b10111110000110001001000111100010";
        ram[71] = "0b00111110000100001100011101111110";
        ram[72] = "0b00111110001000110010010111010101";
        ram[73] = "0b00111101001000000101001010111100";
        ram[74] = "0b10111101001100011111001111101001";
        ram[75] = "0b00111100000001110011000100010111";
        ram[76] = "0b00111101011101100100010000101010";
        ram[77] = "0b10111100100010011100010101111100";
        ram[78] = "0b00111100111101000101001001001101";
        ram[79] = "0b00111100110101111001010101111110";
        ram[80] = "0b00111110000011001110110001000010";
        ram[81] = "0b00111011110100110111010000110001";
        ram[82] = "0b10111101010111111111001011111111";
        ram[83] = "0b00111110000010101011001101101000";
        ram[84] = "0b10111110000001000111011111111111";
        ram[85] = "0b00111101010010100010100011100011";
        ram[86] = "0b10111101000000100000101010110111";
        ram[87] = "0b00111101100010000001100000110010";
        ram[88] = "0b00111101110111000011111001110101";
        ram[89] = "0b10111101001010101101011100001110";
        ram[90] = "0b00111110001110010011010110111001";
        ram[91] = "0b00111101100110000001101000111110";
        ram[92] = "0b00111101101100000101001010101110";
        ram[93] = "0b10111101001011010111110001010101";
        ram[94] = "0b10111101100011110110001101001010";
        ram[95] = "0b10111101100111110000100100001111";
        ram[96] = "0b10111101000110000001000100000011";
        ram[97] = "0b10111101101110110000110100110111";
        ram[98] = "0b10111101101010110100011000110101";
        ram[99] = "0b00111101100110011101001011011010";
        ram[100] = "0b00111011111100111110111010100101";
        ram[101] = "0b00111101000100100100001101100100";
        ram[102] = "0b10111101110000101111010000101110";
        ram[103] = "0b10111101101011011101010011111101";
        ram[104] = "0b00111101010010010010010000110110";
        ram[105] = "0b10111011101011001110110110011111";
        ram[106] = "0b00111100001110100101100001010110";
        ram[107] = "0b10111101100100001101011011000000";
        ram[108] = "0b10111100001101111010100001111000";
        ram[109] = "0b00111110001000011000010011000010";
        ram[110] = "0b00111100010011011011101111100000";
        ram[111] = "0b10111100100010111011100110100111";
        ram[112] = "0b10111101101111011010111111111001";
        ram[113] = "0b10111101110011010100110111000110";
        ram[114] = "0b00111101101110010111010100110111";
        ram[115] = "0b00111100001010000001001011011001";
        ram[116] = "0b10111100001100110011001011001000";
        ram[117] = "0b00111100110110111001001101101111";
        ram[118] = "0b00111100111011010001101001001010";
        ram[119] = "0b00111101110110001010111100111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_15) {
meminst = new inference_conv2d_f3_4_2_15_ram("inference_conv2d_f3_4_2_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_15() {
    delete meminst;
}


};//endmodule
#endif
