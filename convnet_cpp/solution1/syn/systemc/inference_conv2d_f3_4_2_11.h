// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_11_H__
#define __inference_conv2d_f3_4_2_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_11_ram) {
        ram[0] = "0b00111101101000000001000110010000";
        ram[1] = "0b10111101100111000101101100111101";
        ram[2] = "0b00111100101110011000110110001011";
        ram[3] = "0b10111101101100111101110001100011";
        ram[4] = "0b00111101111001010011000110011000";
        ram[5] = "0b00111110000110001101010011111110";
        ram[6] = "0b10111100010111100011110001100001";
        ram[7] = "0b00111110000110110001001100010110";
        ram[8] = "0b10111101100001111100001100001101";
        ram[9] = "0b00111101101011010100011001101111";
        ram[10] = "0b00111101100110101011011110011001";
        ram[11] = "0b00111110010010100111000100010101";
        ram[12] = "0b10111101010011010101111011000011";
        ram[13] = "0b00111101111100001000101010101101";
        ram[14] = "0b10111011101010001010100010010110";
        ram[15] = "0b00111011001101111101010101101111";
        ram[16] = "0b00111101000110011011000101001100";
        ram[17] = "0b10111101100111001010010100000010";
        ram[18] = "0b00111101100000111010001100111110";
        ram[19] = "0b00111100111111000010010001110011";
        ram[20] = "0b00111110001000011101111010101101";
        ram[21] = "0b10111101010010000111100110000001";
        ram[22] = "0b10111101100100001010010111110000";
        ram[23] = "0b10111101000001000001110101001011";
        ram[24] = "0b00111101111100101100111110010110";
        ram[25] = "0b10111100101000000101000000110111";
        ram[26] = "0b00111110001100111010001011100000";
        ram[27] = "0b00111100101110100111110101110101";
        ram[28] = "0b10111110000000011011111100111000";
        ram[29] = "0b00111110001010001000111110000110";
        ram[30] = "0b00111110001101110000100010101011";
        ram[31] = "0b00111100110000100000110000010100";
        ram[32] = "0b00111110001011101100001101010100";
        ram[33] = "0b10111110010101011010100010011100";
        ram[34] = "0b00111110001010111011000011100110";
        ram[35] = "0b10111101011111010100000001001101";
        ram[36] = "0b00111101101110010101100010110001";
        ram[37] = "0b10111101011000101010111110101000";
        ram[38] = "0b10111101110100010011111110001110";
        ram[39] = "0b00111101100110111011001111010110";
        ram[40] = "0b00111101101001010000101101100000";
        ram[41] = "0b00111101101010110010111010000010";
        ram[42] = "0b10111110001000111010111100110010";
        ram[43] = "0b10111101111100010010111011000111";
        ram[44] = "0b00111100001001001110010100100111";
        ram[45] = "0b00111101110010111111000100111010";
        ram[46] = "0b10111101010100100010100001110001";
        ram[47] = "0b10111101011000100101010101100000";
        ram[48] = "0b00111101111100111111001010010001";
        ram[49] = "0b00111101110001001010001000001011";
        ram[50] = "0b10111101011001011101011000011110";
        ram[51] = "0b00111101101000101010101011010101";
        ram[52] = "0b00111101100100111111100010001011";
        ram[53] = "0b00111101011110000011000101101010";
        ram[54] = "0b00111100101110001000000111110010";
        ram[55] = "0b10111101001101111011001111001011";
        ram[56] = "0b00111101110100101011101010011101";
        ram[57] = "0b00111110000101110000101101001010";
        ram[58] = "0b10111110000000111111001101011010";
        ram[59] = "0b10111110000011000100110011100000";
        ram[60] = "0b10111110001101001000010110100001";
        ram[61] = "0b10111101111000011000000001001110";
        ram[62] = "0b10111110001000110100101101010001";
        ram[63] = "0b10111101110000111000101011000010";
        ram[64] = "0b00111110001101010100000100010000";
        ram[65] = "0b10111101110001110001101101010101";
        ram[66] = "0b00111101111111100001000000000110";
        ram[67] = "0b00111110000010010010011101001110";
        ram[68] = "0b10111110001101000001001000000110";
        ram[69] = "0b00111101100101000011101101001001";
        ram[70] = "0b10111101100000101000100000101101";
        ram[71] = "0b10111110001011001011101000110000";
        ram[72] = "0b10111101101000101000000001111000";
        ram[73] = "0b10111101100101010101010101011010";
        ram[74] = "0b10111110000111011001000101101000";
        ram[75] = "0b00111101110101111000111011100011";
        ram[76] = "0b00111110000000010111010101001011";
        ram[77] = "0b10111101000111111110111100000011";
        ram[78] = "0b00111110001000010001010010010000";
        ram[79] = "0b10111100100100001001101010111000";
        ram[80] = "0b00111110001010010111000011111000";
        ram[81] = "0b00111110001010001011001001100100";
        ram[82] = "0b00111101011111110110100010010110";
        ram[83] = "0b10111101101011110110011010110011";
        ram[84] = "0b10111101101011010100100001100000";
        ram[85] = "0b00111101010111011101010010010010";
        ram[86] = "0b10111101101011011000101100101011";
        ram[87] = "0b00111101010000111101111001000110";
        ram[88] = "0b00111110001100010111100011110111";
        ram[89] = "0b00111110000101011100101001101101";
        ram[90] = "0b00111110001100111001101101000101";
        ram[91] = "0b00111101011001010000100011001110";
        ram[92] = "0b00111110000000110011000101011101";
        ram[93] = "0b10111110010001100111000101101001";
        ram[94] = "0b10111011100011111110000011011110";
        ram[95] = "0b10111100111100110110001100000100";
        ram[96] = "0b00111101101010100011100110011101";
        ram[97] = "0b10111100000111010000111011101111";
        ram[98] = "0b00111101001110101110111111011011";
        ram[99] = "0b10111011111110010011010101110110";
        ram[100] = "0b10111101111001110000100011101110";
        ram[101] = "0b10111101011001111110110011100100";
        ram[102] = "0b10111100000010011010101000011000";
        ram[103] = "0b00111011011011000100010100111000";
        ram[104] = "0b10111100000011110010110101101111";
        ram[105] = "0b10111101000111010110010100011011";
        ram[106] = "0b00111100010110100000001111101101";
        ram[107] = "0b10111110001000101101001010111011";
        ram[108] = "0b10111101110011100001101011000101";
        ram[109] = "0b00111100110111001010111011111000";
        ram[110] = "0b10111100100001111010001000100000";
        ram[111] = "0b00111010001010111011000010011101";
        ram[112] = "0b00111110000101001101101100010110";
        ram[113] = "0b00111110001001100011101101101001";
        ram[114] = "0b10111110000001101000101011010111";
        ram[115] = "0b10111011110100001111110010110010";
        ram[116] = "0b10111100101010100110001000111111";
        ram[117] = "0b00111101101111010101110011111011";
        ram[118] = "0b10111100110100111101111000000011";
        ram[119] = "0b10111110000010010110010011101001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_11) {
meminst = new inference_conv2d_f3_4_2_11_ram("inference_conv2d_f3_4_2_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_11() {
    delete meminst;
}


};//endmodule
#endif
