// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_4_H__
#define __inference_conv2d_f3_1_4_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_4_ram) {
        ram[0] = "0b10111110001110001100110011011110";
        ram[1] = "0b10111101001110100111011111100110";
        ram[2] = "0b10111101001110010011000101011111";
        ram[3] = "0b10111101000011100100010010011100";
        ram[4] = "0b10111110001111100110001101100011";
        ram[5] = "0b00111101100111111101101001110110";
        ram[6] = "0b10111101011011001101010101001011";
        ram[7] = "0b10111101110101000010110101001001";
        ram[8] = "0b00111110000101011000010101111011";
        ram[9] = "0b10111101100101010000001111000110";
        ram[10] = "0b10111110000001100111011110110100";
        ram[11] = "0b10111100100111010110101110110110";
        ram[12] = "0b10111100010101011000001111000000";
        ram[13] = "0b10111101100001101011110111110101";
        ram[14] = "0b00111110001111110100000111110010";
        ram[15] = "0b10111110100000001010010001111111";
        ram[16] = "0b10111011111010011000000001001100";
        ram[17] = "0b10111101110001011111011010000100";
        ram[18] = "0b10111101001000101000100101000111";
        ram[19] = "0b10111100110110110010101011001001";
        ram[20] = "0b10111101100010001011111111000010";
        ram[21] = "0b00111110001101011111010001011110";
        ram[22] = "0b10111101001001001000101101100101";
        ram[23] = "0b10111110000010110011110100001000";
        ram[24] = "0b00111101001110000010001101011101";
        ram[25] = "0b00111110000001001101110110110101";
        ram[26] = "0b00111110000011001001000110001110";
        ram[27] = "0b10111110011010110101011010111000";
        ram[28] = "0b00111100110100111000100111101011";
        ram[29] = "0b10111101110010101010100110011010";
        ram[30] = "0b10111101100000000011011000011011";
        ram[31] = "0b10111110001010110111100101010011";
        ram[32] = "0b00111101001101010001000001001101";
        ram[33] = "0b00111100010001101101101111110010";
        ram[34] = "0b10111110000010100000001010111000";
        ram[35] = "0b10111101100100100001011100110001";
        ram[36] = "0b00111101100100101101001011001001";
        ram[37] = "0b00111101010101000100011000111110";
        ram[38] = "0b00111100000110110100110100111000";
        ram[39] = "0b00111101111111100110111011101011";
        ram[40] = "0b00111110001001111010010100101011";
        ram[41] = "0b00111101100001111110110100100111";
        ram[42] = "0b00111101100001000110011100000010";
        ram[43] = "0b00111101111001010011000110011000";
        ram[44] = "0b00111100101000110010011100010111";
        ram[45] = "0b10111110000101100100110100111100";
        ram[46] = "0b10111101111001100111010000001000";
        ram[47] = "0b10111101100010111100001001000001";
        ram[48] = "0b00111101010100101110100000000100";
        ram[49] = "0b00111101111001111100011100111111";
        ram[50] = "0b10111101101111111010011010101001";
        ram[51] = "0b10111101111011010010111011011000";
        ram[52] = "0b00111011111101110100000000111110";
        ram[53] = "0b10111101000011111100111100010101";
        ram[54] = "0b00111101100000011101010111101011";
        ram[55] = "0b00111101010001111110000000011001";
        ram[56] = "0b10111101001101110011010100000110";
        ram[57] = "0b00111100111100101101000011011000";
        ram[58] = "0b10111100000110101011111110011111";
        ram[59] = "0b10111101010110100001101100110100";
        ram[60] = "0b10111110010001101010111100000100";
        ram[61] = "0b00111101000111011011010011100111";
        ram[62] = "0b10111011101100010100011100100000";
        ram[63] = "0b10111101111000000001100100101010";
        ram[64] = "0b10111101111111110011010110100000";
        ram[65] = "0b10111101101011101100011000101001";
        ram[66] = "0b00111011101010011001101010000011";
        ram[67] = "0b10111101110100010111010100001000";
        ram[68] = "0b10111101001000100010111000001101";
        ram[69] = "0b00111101010000100100100111110010";
        ram[70] = "0b10111110000111100011100010101000";
        ram[71] = "0b00111011110000110101100110110001";
        ram[72] = "0b10111101101111111101110111101100";
        ram[73] = "0b10111101000100101011011101000010";
        ram[74] = "0b10111011111010001010111010101011";
        ram[75] = "0b10111101110000011111001010110100";
        ram[76] = "0b10111101101100000010110101011010";
        ram[77] = "0b00111110000100001010000001101111";
        ram[78] = "0b10111101110011111111000000000010";
        ram[79] = "0b10111110000111011110111001111000";
        ram[80] = "0b10111101011010100000100010010111";
        ram[81] = "0b10111011101100010000111110010111";
        ram[82] = "0b00111110000100100101011100000000";
        ram[83] = "0b10111100111110001000001000101000";
        ram[84] = "0b00111101011000000000001111111100";
        ram[85] = "0b10111110001100101101000011100101";
        ram[86] = "0b00111100101111011110011111000010";
        ram[87] = "0b00111011111101000011000110101011";
        ram[88] = "0b00111101100111000001011111111001";
        ram[89] = "0b00111101111101100001000110111010";
        ram[90] = "0b00111101100100110111101010101001";
        ram[91] = "0b10111101000011000111010001001101";
        ram[92] = "0b00111011110101110100001001000111";
        ram[93] = "0b10111110000000111100000110001011";
        ram[94] = "0b10111100011001110100001000101110";
        ram[95] = "0b00111100101111101111011010000000";
        ram[96] = "0b10111110000101011011101101111011";
        ram[97] = "0b00111100100010001001100101100001";
        ram[98] = "0b10111110001111111011000110011110";
        ram[99] = "0b00111101010001111000111101000000";
        ram[100] = "0b10111100100000100111110001000111";
        ram[101] = "0b00111100111110110110001110111001";
        ram[102] = "0b10111110000000011101101100000001";
        ram[103] = "0b00111011110000110111101100101010";
        ram[104] = "0b10111101111100100110100111100000";
        ram[105] = "0b10111110010010110010001100010100";
        ram[106] = "0b00111110001111110000011000101101";
        ram[107] = "0b00111110000011110110010111011100";
        ram[108] = "0b10111110000010010011100000010101";
        ram[109] = "0b00111110000001101011100011111010";
        ram[110] = "0b00111100110011100000101011110000";
        ram[111] = "0b10111101100101000101100110001001";
        ram[112] = "0b00111101111111011011011111110001";
        ram[113] = "0b10111100000000110010010101101111";
        ram[114] = "0b10111110001110101011100001100011";
        ram[115] = "0b00111101100101001001110000101100";
        ram[116] = "0b10111100010101100101001010001000";
        ram[117] = "0b00111101000011010001111001000110";
        ram[118] = "0b10111101011111001100010011111101";
        ram[119] = "0b00111101001111010001011111101110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_4) {
meminst = new inference_conv2d_f3_1_4_4_ram("inference_conv2d_f3_1_4_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_4() {
    delete meminst;
}


};//endmodule
#endif
