// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_14_H__
#define __inference_conv2d_f3_2_3_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_14_ram) {
        ram[0] = "0b10111101100011111111001001101100";
        ram[1] = "0b00111101111000101111110011110000";
        ram[2] = "0b00111101111101000000000000110010";
        ram[3] = "0b10111100101100011110110101001101";
        ram[4] = "0b00111101110111010011100100010001";
        ram[5] = "0b10111101101101110001010111101110";
        ram[6] = "0b00111101111000110110011001010001";
        ram[7] = "0b00111101101011001111101011001000";
        ram[8] = "0b10111101101101001010011001100101";
        ram[9] = "0b10111110001110001001110011100101";
        ram[10] = "0b00111110001011010110101000010110";
        ram[11] = "0b00111101111100010010111011000111";
        ram[12] = "0b00111110001110001001000011010110";
        ram[13] = "0b10111101111100010101000101100001";
        ram[14] = "0b10111101100101111011010011100101";
        ram[15] = "0b10111101111100110110110011011111";
        ram[16] = "0b10111100010010101011111110101100";
        ram[17] = "0b10111101000010010010010101000011";
        ram[18] = "0b10111101101110110110110000001111";
        ram[19] = "0b00111110000011101100001010001011";
        ram[20] = "0b00111110000010111100110011110011";
        ram[21] = "0b00111100010011111111010010011111";
        ram[22] = "0b00111101100010001010010110100110";
        ram[23] = "0b00111100110001110000001100101010";
        ram[24] = "0b00111101010101100001101110110000";
        ram[25] = "0b00111101101111000011101011110001";
        ram[26] = "0b10111101110110110011110010000010";
        ram[27] = "0b10111101110111110001010100011110";
        ram[28] = "0b00111101101101011001001101000101";
        ram[29] = "0b10111101110001100011000010000001";
        ram[30] = "0b10111101100110101000010100001111";
        ram[31] = "0b00111100011001110011011000000101";
        ram[32] = "0b00111101110010011111011110001101";
        ram[33] = "0b00111100111101011101101011100011";
        ram[34] = "0b00111101001101110101000001100100";
        ram[35] = "0b10111110000000100011100101100000";
        ram[36] = "0b00111110000101101001010110010110";
        ram[37] = "0b10111101110111110111010000000100";
        ram[38] = "0b10111101001001111010101111100001";
        ram[39] = "0b00111100100100101111010010011010";
        ram[40] = "0b10111100101011101000000100011101";
        ram[41] = "0b00111101110011101010010000100011";
        ram[42] = "0b10111110001000010000110110111111";
        ram[43] = "0b00111110000101000101101001100000";
        ram[44] = "0b00111101000001100011001000101110";
        ram[45] = "0b10111101000001001010100111001110";
        ram[46] = "0b10111110010010011011010100100000";
        ram[47] = "0b10111100111001110111111010010100";
        ram[48] = "0b10111101111101101100000001010001";
        ram[49] = "0b00111100111010010100101110111110";
        ram[50] = "0b00111011100001000100000101000011";
        ram[51] = "0b00111100110101010110111011111101";
        ram[52] = "0b10111010110011101010111101010000";
        ram[53] = "0b00111101000010101110111010001011";
        ram[54] = "0b00111100011011010000000001001001";
        ram[55] = "0b00111101010001010010000111000011";
        ram[56] = "0b00111110000101110111001011010110";
        ram[57] = "0b10111100111011010100000110000010";
        ram[58] = "0b10111101111110011101010111100101";
        ram[59] = "0b00111110000100001100010011011111";
        ram[60] = "0b10111110001110111111001100111000";
        ram[61] = "0b00111100011111110000101010100010";
        ram[62] = "0b10111110011001000000111011100000";
        ram[63] = "0b10111101101010110110010001011010";
        ram[64] = "0b10111100001111000101010001000100";
        ram[65] = "0b00111101101010100100011000110010";
        ram[66] = "0b00111110001111100110111001100101";
        ram[67] = "0b10111110000000110001110100101110";
        ram[68] = "0b00111100101010001010110111010100";
        ram[69] = "0b10111101110011011101100111000010";
        ram[70] = "0b00111101110010010111000101100011";
        ram[71] = "0b00111101101000010111001001011011";
        ram[72] = "0b10111101011011100110000001001011";
        ram[73] = "0b00111110010011000000101100010011";
        ram[74] = "0b10111100100011001001000001100111";
        ram[75] = "0b10111110001000111101100111101100";
        ram[76] = "0b10111101101010001010000110001111";
        ram[77] = "0b10111100101111101011000011100000";
        ram[78] = "0b10111101010101010111111100100011";
        ram[79] = "0b10111011110111100101100110101000";
        ram[80] = "0b10111100000011101101010110100110";
        ram[81] = "0b00111101000011000001001010010011";
        ram[82] = "0b00111101111101011010111100101001";
        ram[83] = "0b00111011000110001000110111010110";
        ram[84] = "0b00111101110111010110011100110100";
        ram[85] = "0b10111101111101100110010010010001";
        ram[86] = "0b10111101010101010010010100010000";
        ram[87] = "0b10111101100101001111100010110110";
        ram[88] = "0b00111100001101011010001000001110";
        ram[89] = "0b00111110001000001110010110100011";
        ram[90] = "0b10111110001001011010010011110000";
        ram[91] = "0b10111101011010101100101110000110";
        ram[92] = "0b10111101100101000101010111010000";
        ram[93] = "0b10111101100000100011110001000011";
        ram[94] = "0b00111101011011011000010111000101";
        ram[95] = "0b00111011000011100001000100100101";
        ram[96] = "0b10111100100010100111001111000010";
        ram[97] = "0b00111110000011101110010100100110";
        ram[98] = "0b10111110000101000001111110100111";
        ram[99] = "0b10111101100011111100110110101011";
        ram[100] = "0b00111100100010101110110011000011";
        ram[101] = "0b10111101100010001011100010000110";
        ram[102] = "0b00111100101000001001100011111101";
        ram[103] = "0b00111100010001100101111010001001";
        ram[104] = "0b00111101101111100111000111110110";
        ram[105] = "0b10111101000100011100010111100000";
        ram[106] = "0b00111101001001001100001100101110";
        ram[107] = "0b10111100111010000000010011001100";
        ram[108] = "0b10111100110011101111000001011110";
        ram[109] = "0b00111100111010111010111100010000";
        ram[110] = "0b00111110000000110011011011011111";
        ram[111] = "0b10111110001001010101110010010110";
        ram[112] = "0b10111101001111110100110111011001";
        ram[113] = "0b10111101001010010110110000100101";
        ram[114] = "0b10111110000101001110110110110011";
        ram[115] = "0b00111110010000111101010001101011";
        ram[116] = "0b00111101000011000000111000101011";
        ram[117] = "0b10111101100011001000001100110001";
        ram[118] = "0b10111101000101001011100100010000";
        ram[119] = "0b00111101110100111101110000000101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_14) {
meminst = new inference_conv2d_f3_2_3_14_ram("inference_conv2d_f3_2_3_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_14() {
    delete meminst;
}


};//endmodule
#endif
