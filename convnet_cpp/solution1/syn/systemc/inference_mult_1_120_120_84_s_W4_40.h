// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_40_H__
#define __inference_mult_1_120_120_84_s_W4_40_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_40_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_40_ram) {
        ram[0] = "0b00111100101010010000111110001110";
        ram[1] = "0b10111011110101000001010001101010";
        ram[2] = "0b10111101001110010011100011101100";
        ram[3] = "0b00111101111111001110111110101010";
        ram[4] = "0b10111001110110100000011100011101";
        ram[5] = "0b10111110010110100101111011111111";
        ram[6] = "0b10111100111001100100110001100101";
        ram[7] = "0b00111101010001111000111110010001";
        ram[8] = "0b00111101001100010110101011110111";
        ram[9] = "0b10111101101001010000001111000110";
        ram[10] = "0b10111110001101010100011001001110";
        ram[11] = "0b10111101111100001101101001011110";
        ram[12] = "0b00111101011111011111111010011110";
        ram[13] = "0b10111100101111010111010000110101";
        ram[14] = "0b10111101010001100001101001111100";
        ram[15] = "0b10111100010100010100100011001000";
        ram[16] = "0b00111010111001001011111010000110";
        ram[17] = "0b10111101101000000110011101110001";
        ram[18] = "0b00111110010011011111011100011111";
        ram[19] = "0b00111101110110000000111001001001";
        ram[20] = "0b00111101011001011010100100000111";
        ram[21] = "0b10111101110110000010110000101100";
        ram[22] = "0b10111110000001000111011110111100";
        ram[23] = "0b00111101111001001100000001011001";
        ram[24] = "0b10111101000000011100101000111010";
        ram[25] = "0b00111101100111101010010101110010";
        ram[26] = "0b10111101101001001001110100101011";
        ram[27] = "0b10111100111110100010010001010100";
        ram[28] = "0b10111101010001110010000010111011";
        ram[29] = "0b10111101100110011100001110110011";
        ram[30] = "0b00111101101001110010110110101111";
        ram[31] = "0b00111011110110001110010101110100";
        ram[32] = "0b00111100000111011011011100100000";
        ram[33] = "0b10111101001010000010001011001001";
        ram[34] = "0b00111101110011011110000100011010";
        ram[35] = "0b00111110001000001110111001001010";
        ram[36] = "0b00111011111001100100101101111001";
        ram[37] = "0b10111101110111101010000101000000";
        ram[38] = "0b00111101011100111000001110100000";
        ram[39] = "0b00111100111000110110110111000011";
        ram[40] = "0b00111101100011011111101111001001";
        ram[41] = "0b10111101000101011100110110101101";
        ram[42] = "0b10111101100010100000001011100001";
        ram[43] = "0b10111101101110000101100110111011";
        ram[44] = "0b00111101010001000010110000101111";
        ram[45] = "0b00111011000010001010000001001101";
        ram[46] = "0b00111101010110011011111001101000";
        ram[47] = "0b00111101111110111001110011111010";
        ram[48] = "0b00111101000000100111101011101010";
        ram[49] = "0b00111100000110011100001100110101";
        ram[50] = "0b00111101101101010010111011000011";
        ram[51] = "0b00111100110011100100101010110001";
        ram[52] = "0b10111101101001011001101111010001";
        ram[53] = "0b00111100011111010010100110001100";
        ram[54] = "0b10111101111010111001001000111010";
        ram[55] = "0b00111101010010001001000010010011";
        ram[56] = "0b10111101100000100010001100110011";
        ram[57] = "0b10111100101111111111000110001000";
        ram[58] = "0b10111101111000111011000111010001";
        ram[59] = "0b00111101111110100100111100000001";
        ram[60] = "0b00111100110000000011010000111000";
        ram[61] = "0b10111101101111101110011010000011";
        ram[62] = "0b00111100011100001110111111000010";
        ram[63] = "0b00111101100101111111101000011010";
        ram[64] = "0b00111100101111011001001101110100";
        ram[65] = "0b10111110000101010111000100001001";
        ram[66] = "0b10111101110010000101001101110001";
        ram[67] = "0b10111101001101110000010110111011";
        ram[68] = "0b00111101101000101111000001000000";
        ram[69] = "0b10111101000001001111100101111111";
        ram[70] = "0b00111101101111000101010011110011";
        ram[71] = "0b00111101101111010110000101111101";
        ram[72] = "0b00111101110011110010000111110111";
        ram[73] = "0b00111101000111111011011010110100";
        ram[74] = "0b10111110000011000111011011010001";
        ram[75] = "0b00111110000110101100101001111001";
        ram[76] = "0b00111101101100101111010000111100";
        ram[77] = "0b00111100111110010111010100000001";
        ram[78] = "0b10111100000100111001001100010000";
        ram[79] = "0b00111101110010111000001000101111";
        ram[80] = "0b10111101100101110011000100111111";
        ram[81] = "0b10111101000011011010100110111100";
        ram[82] = "0b10111101100001000110011000000011";
        ram[83] = "0b00111100010001000010111111011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_40) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_40_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_40) {
meminst = new inference_mult_1_120_120_84_s_W4_40_ram("inference_mult_1_120_120_84_s_W4_40_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_40() {
    delete meminst;
}


};//endmodule
#endif
