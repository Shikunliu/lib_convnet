// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_117_H__
#define __inference_mult_1_120_120_84_s_W4_117_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_117_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_117_ram) {
        ram[0] = "0b00111100100000011010101011111011";
        ram[1] = "0b00111101101110100100110111001100";
        ram[2] = "0b10111101101010101010111111110010";
        ram[3] = "0b10111101000010101001100110000001";
        ram[4] = "0b10111101001000000100111100010000";
        ram[5] = "0b10111101111111110100001010111011";
        ram[6] = "0b00111101110001000011111111011000";
        ram[7] = "0b00111110010110011100110110000001";
        ram[8] = "0b00111011001001111000110111111001";
        ram[9] = "0b00111101101101010000110011100101";
        ram[10] = "0b10111100011101010110010101110010";
        ram[11] = "0b10111101000111111010101100010001";
        ram[12] = "0b10111110001010101001011111100001";
        ram[13] = "0b10111101000100000100100001001101";
        ram[14] = "0b00111110000001111111000100110000";
        ram[15] = "0b10111101110110111110010001000111";
        ram[16] = "0b10111101001100000111110000011001";
        ram[17] = "0b10111110001110011011011000101100";
        ram[18] = "0b10111101111111011110001101110110";
        ram[19] = "0b00111101110001001011101101111001";
        ram[20] = "0b10111100101010000001010100101000";
        ram[21] = "0b10111100101010111001111111110111";
        ram[22] = "0b10111101100111010100101000000000";
        ram[23] = "0b10111101101110100011100100110001";
        ram[24] = "0b00111101011010101001110011110111";
        ram[25] = "0b00111011110010011011100110011101";
        ram[26] = "0b00111101001000111101110110001011";
        ram[27] = "0b10111101100110101100001000100011";
        ram[28] = "0b00111011100100100000010110100111";
        ram[29] = "0b10111100110010010100101100000010";
        ram[30] = "0b00111101010110010101011101010100";
        ram[31] = "0b10111101010111101111100111011011";
        ram[32] = "0b10111100001011000011001101100101";
        ram[33] = "0b00111110000010111000010110100101";
        ram[34] = "0b00111011001001001100010000011010";
        ram[35] = "0b00111101111001010010101001000001";
        ram[36] = "0b00111010110010110110100100011111";
        ram[37] = "0b00111101011110101100110100100110";
        ram[38] = "0b10111101100000001000111101010111";
        ram[39] = "0b00111101111110100110111001110110";
        ram[40] = "0b00111101101011111100101001111000";
        ram[41] = "0b10111101110010101110010111100101";
        ram[42] = "0b00111101100011111100101001101011";
        ram[43] = "0b00111101110011111100110111101110";
        ram[44] = "0b00111101000011001011011110000100";
        ram[45] = "0b00111110001000001101111011010011";
        ram[46] = "0b00111101111111111111000111011000";
        ram[47] = "0b10111101111011110111001000101110";
        ram[48] = "0b10111101100010010010110000000110";
        ram[49] = "0b00111101010110101100101001010001";
        ram[50] = "0b00111100010010010111001000111010";
        ram[51] = "0b10111101100000110100101100110110";
        ram[52] = "0b00111101100001000110000100111110";
        ram[53] = "0b00111101001101100101001100101001";
        ram[54] = "0b10111101001001010100110011000001";
        ram[55] = "0b00111101100101010000100001111101";
        ram[56] = "0b00111110000101111011000101111101";
        ram[57] = "0b00111101110111011000011010101001";
        ram[58] = "0b00111101111001100101100011000101";
        ram[59] = "0b00111101100100001000111100000111";
        ram[60] = "0b00111100100111100011001010000110";
        ram[61] = "0b10111110010110100000000111101111";
        ram[62] = "0b10111110000001010010100111111110";
        ram[63] = "0b10111110000110010100000010111100";
        ram[64] = "0b00111011110101011001111110000100";
        ram[65] = "0b10111110001011111100101001000011";
        ram[66] = "0b10111101011011101101110011011101";
        ram[67] = "0b10111101000001111011110000000111";
        ram[68] = "0b10111100011101110101111011011100";
        ram[69] = "0b10111101110101010000111010111011";
        ram[70] = "0b10111100000110100101110000101100";
        ram[71] = "0b00111101011111111011011000010011";
        ram[72] = "0b00111101101111100101111000110010";
        ram[73] = "0b10111110011010110010010011101010";
        ram[74] = "0b00111110001101011010101100111011";
        ram[75] = "0b10111101000100101000110010010101";
        ram[76] = "0b10111100111110110011010011110101";
        ram[77] = "0b10111101101010111010100000010111";
        ram[78] = "0b10111101101001011111100011010011";
        ram[79] = "0b00111110000101011111111010010111";
        ram[80] = "0b10111110000010100100100001110011";
        ram[81] = "0b10111101100010101011000010111011";
        ram[82] = "0b00111101000001001011111101101000";
        ram[83] = "0b10111110001101110110111011100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_117) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_117_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_117) {
meminst = new inference_mult_1_120_120_84_s_W4_117_ram("inference_mult_1_120_120_84_s_W4_117_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_117() {
    delete meminst;
}


};//endmodule
#endif
