// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_8_H__
#define __inference_conv2d_f3_2_2_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_8_ram) {
        ram[0] = "0b10111110010101110100011000000010";
        ram[1] = "0b00111101110001100100101100100011";
        ram[2] = "0b10111101001111000111001110011110";
        ram[3] = "0b00111101101100110000110001001100";
        ram[4] = "0b10111101100110111100011111001111";
        ram[5] = "0b10111100111110000101110000110010";
        ram[6] = "0b10111110001100000001010100111100";
        ram[7] = "0b00111101011001111100100111000011";
        ram[8] = "0b00111101100011000000111100011101";
        ram[9] = "0b10111100110110001101011010010001";
        ram[10] = "0b00111100101010000110110101110010";
        ram[11] = "0b10111101010010101001000100111001";
        ram[12] = "0b00111101101110000000000011101011";
        ram[13] = "0b10111110000110101101011010001000";
        ram[14] = "0b10111101100010001110110010010110";
        ram[15] = "0b10111101101001101011000111011000";
        ram[16] = "0b00111101010010000001111010011000";
        ram[17] = "0b00111100101000101000011000111101";
        ram[18] = "0b00111101100100111011100010101111";
        ram[19] = "0b10111011111010100110101100011000";
        ram[20] = "0b00111101011111101111110001000101";
        ram[21] = "0b10111101110111000100110010011101";
        ram[22] = "0b10111100100001111001011011001101";
        ram[23] = "0b00111010011100011001110010010000";
        ram[24] = "0b00111110000010010011010101110110";
        ram[25] = "0b10111101010010010000011000011110";
        ram[26] = "0b10111101111110101011101001111100";
        ram[27] = "0b10111101011000011111101011100010";
        ram[28] = "0b10111101100000110000111100111100";
        ram[29] = "0b00111101000010000011011100111100";
        ram[30] = "0b10111101110111000000100110000001";
        ram[31] = "0b10111110000010110010010000100000";
        ram[32] = "0b00111100010100111111011011111000";
        ram[33] = "0b00111101111100001011100111011100";
        ram[34] = "0b10111100101011101101001110001000";
        ram[35] = "0b10111110000001111100000010110001";
        ram[36] = "0b00111101001000011100111000110110";
        ram[37] = "0b10111101001010110001111011000111";
        ram[38] = "0b10111101011111010011100001010101";
        ram[39] = "0b00111101011110011011010011111000";
        ram[40] = "0b00111110001010000001111001000111";
        ram[41] = "0b00111101100101110111110011011001";
        ram[42] = "0b00111100110010111001100111000111";
        ram[43] = "0b00111110001000011010010100000001";
        ram[44] = "0b00111101001011011111010100100001";
        ram[45] = "0b10111101100011101100100010111011";
        ram[46] = "0b10111101101011000011101011001001";
        ram[47] = "0b10111110000110111000110011111100";
        ram[48] = "0b00111101100011001011010100011010";
        ram[49] = "0b00111100000011110101100111010000";
        ram[50] = "0b00111101101100011110101110101101";
        ram[51] = "0b10111100100111000000101011111001";
        ram[52] = "0b10111101100111111001011110000010";
        ram[53] = "0b00111100011001101110101101011100";
        ram[54] = "0b00111110000011110010000100101101";
        ram[55] = "0b10111101010110010110101100100110";
        ram[56] = "0b10111101101110000011011111001111";
        ram[57] = "0b00111100101101010110100010011000";
        ram[58] = "0b10111110001101111010010101101110";
        ram[59] = "0b00111100111011100001101111010010";
        ram[60] = "0b00111101010101101001101011111100";
        ram[61] = "0b00111101010001011101011001101110";
        ram[62] = "0b00111101111000011110101000110110";
        ram[63] = "0b10111101001100110110001111011011";
        ram[64] = "0b10111101100010011111101100010001";
        ram[65] = "0b00111110001010101010011111011111";
        ram[66] = "0b00111100110101011110101111000101";
        ram[67] = "0b00111101000010001101010010100000";
        ram[68] = "0b00111101110010100111010011101001";
        ram[69] = "0b00111011010101011000110100111011";
        ram[70] = "0b00111101101011011010111011111010";
        ram[71] = "0b00111100001000001001100000110001";
        ram[72] = "0b00111100001000011111111000000010";
        ram[73] = "0b00111101101010111101110110010001";
        ram[74] = "0b00111101010000010100101001101000";
        ram[75] = "0b10111110000010100000111101001101";
        ram[76] = "0b00111011100010100011100000101000";
        ram[77] = "0b10111101110001001101010010001001";
        ram[78] = "0b00111110000101001111001100110100";
        ram[79] = "0b10111101100011100011100111101010";
        ram[80] = "0b10111110000000010101100000110010";
        ram[81] = "0b10111101110001101000111100100011";
        ram[82] = "0b10111101000001111111100000011100";
        ram[83] = "0b10111101100000000101000010001000";
        ram[84] = "0b10111101001101100010011001100010";
        ram[85] = "0b10111101001010001110100110011001";
        ram[86] = "0b00111101010010111100111010111011";
        ram[87] = "0b10111101110111001111010011101000";
        ram[88] = "0b10111011000010000111001101010111";
        ram[89] = "0b10111101011100011111111111011101";
        ram[90] = "0b10111110001001001011111010000011";
        ram[91] = "0b10111110000100010001000100100111";
        ram[92] = "0b00111101101100101100010100110100";
        ram[93] = "0b00111101100001100101001001011111";
        ram[94] = "0b00111101110110000110111000111011";
        ram[95] = "0b00111110001100011001110010011101";
        ram[96] = "0b00111100011010011110101111000010";
        ram[97] = "0b10111100101000101011101000111111";
        ram[98] = "0b10111101000011101011001011010001";
        ram[99] = "0b10111100101000111011011010001001";
        ram[100] = "0b00111101100000100010110101111010";
        ram[101] = "0b00111101010100101000110110100001";
        ram[102] = "0b10111110000100111000110001010100";
        ram[103] = "0b10111110001101101000011010100101";
        ram[104] = "0b10111100101000001111010101000011";
        ram[105] = "0b00111101101110010111111001100100";
        ram[106] = "0b10111110000010111110011010100011";
        ram[107] = "0b10111101111111010111101110100110";
        ram[108] = "0b10111100000001100100110001100000";
        ram[109] = "0b00111100110001000100010110101010";
        ram[110] = "0b00111110001011100011001001011101";
        ram[111] = "0b00111110010100010011010000000101";
        ram[112] = "0b00111101010100010010011101110000";
        ram[113] = "0b10111101000011001101001110011110";
        ram[114] = "0b10111100111011110010000001111111";
        ram[115] = "0b10111101011001110100100001011110";
        ram[116] = "0b00111100110100011111111100111100";
        ram[117] = "0b00111100100001011100101110111100";
        ram[118] = "0b00111110001001000110011101111011";
        ram[119] = "0b10111011111111001111011000110101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_8) {
meminst = new inference_conv2d_f3_2_2_8_ram("inference_conv2d_f3_2_2_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_8() {
    delete meminst;
}


};//endmodule
#endif
