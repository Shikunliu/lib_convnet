// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_9_H__
#define __inference_mult_1_120_120_84_s_W4_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_9_ram) {
        ram[0] = "0b00111101100011001000100100000010";
        ram[1] = "0b10111101010001110000000001010101";
        ram[2] = "0b00111101101000101100001101010001";
        ram[3] = "0b10111100101100010100111001010111";
        ram[4] = "0b00111101011111000111100000100001";
        ram[5] = "0b00111100111011110011010001101011";
        ram[6] = "0b10111110000011100110001101100011";
        ram[7] = "0b10111101101010110001101100001110";
        ram[8] = "0b10111100100100100100110100001010";
        ram[9] = "0b00111110000010110100011110000100";
        ram[10] = "0b00111101110111000010011111101001";
        ram[11] = "0b00111101111110001010001110110101";
        ram[12] = "0b00111100011101110100011011110100";
        ram[13] = "0b10111101111011000010111001110111";
        ram[14] = "0b00111101011001000100010011010011";
        ram[15] = "0b00111101100100111100101110000001";
        ram[16] = "0b10111100010110101101010100111001";
        ram[17] = "0b10111101000000001111100001101000";
        ram[18] = "0b10111101011110010111011100110101";
        ram[19] = "0b00111101010000011010101101001011";
        ram[20] = "0b10111110000110010110111010011100";
        ram[21] = "0b00111100010011111010011010011100";
        ram[22] = "0b00111110001011101101110011000010";
        ram[23] = "0b10111101011000000010001001001010";
        ram[24] = "0b00111101001010001110010001000000";
        ram[25] = "0b00111101011100000100011001101001";
        ram[26] = "0b00111101100001100011110100010110";
        ram[27] = "0b00111101001000111100110111101011";
        ram[28] = "0b10111101000000000101111100000000";
        ram[29] = "0b10111101100010100011001110010101";
        ram[30] = "0b10111101100010110100101111011110";
        ram[31] = "0b00111100111110110101010110101100";
        ram[32] = "0b10111101111011110000010010011011";
        ram[33] = "0b00111101101000111010001100110000";
        ram[34] = "0b10111101100001011000000000111101";
        ram[35] = "0b00111101100010001110000011001010";
        ram[36] = "0b10111101000111101000111010110001";
        ram[37] = "0b00111101100011000001101000000101";
        ram[38] = "0b00111110000001100000001110010010";
        ram[39] = "0b00111101101110100101111010100001";
        ram[40] = "0b10111110001110000100101010010100";
        ram[41] = "0b10111110000010101111110001001000";
        ram[42] = "0b10111100010110111111111000101110";
        ram[43] = "0b00111100100111100101100001111011";
        ram[44] = "0b00111110010000001111110000101111";
        ram[45] = "0b10111101001001000010001000011110";
        ram[46] = "0b10111101010111001010111010100111";
        ram[47] = "0b00111110001111101100000011111001";
        ram[48] = "0b10111101110111001000100001100001";
        ram[49] = "0b10111110000100111110111001011111";
        ram[50] = "0b00111011100101110010001000110001";
        ram[51] = "0b00111101101011111010010011101110";
        ram[52] = "0b10111101111101001011110011110001";
        ram[53] = "0b00111100011011010010101010100110";
        ram[54] = "0b00111101010110101011101100110111";
        ram[55] = "0b00111101110110011100101101101000";
        ram[56] = "0b10111101111110011001111011011000";
        ram[57] = "0b10111101110100001001011010111100";
        ram[58] = "0b10111101001001100101011110011101";
        ram[59] = "0b10111101010010100001010011000001";
        ram[60] = "0b00111101100011111010011101100101";
        ram[61] = "0b10111101010011100111000101111101";
        ram[62] = "0b00111110010001011001011101001110";
        ram[63] = "0b10111110000011010001011010111001";
        ram[64] = "0b10111011010110010010000111110000";
        ram[65] = "0b00111110001010000100000010011110";
        ram[66] = "0b10111100111010000000110000100011";
        ram[67] = "0b10111100101100010010011101010101";
        ram[68] = "0b10111110010010100001011000011110";
        ram[69] = "0b10111110000110101110011111010101";
        ram[70] = "0b10111101011000000010100110000110";
        ram[71] = "0b00111010110111010111101001000100";
        ram[72] = "0b10111101000101001100101101001110";
        ram[73] = "0b10111100111110100110010100100001";
        ram[74] = "0b00111011011011111110001100100111";
        ram[75] = "0b00111101110001101110011010111111";
        ram[76] = "0b10111100000000001110011110111100";
        ram[77] = "0b00111110010001010001010101001000";
        ram[78] = "0b00111101001001110010011100100001";
        ram[79] = "0b10111101010110100100101100000101";
        ram[80] = "0b00111100001100100001010100100110";
        ram[81] = "0b00111110000001011001001101100000";
        ram[82] = "0b00111101001000100110111101000110";
        ram[83] = "0b00111100001010010110010001111101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_9_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_9) {
meminst = new inference_mult_1_120_120_84_s_W4_9_ram("inference_mult_1_120_120_84_s_W4_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_9() {
    delete meminst;
}


};//endmodule
#endif
