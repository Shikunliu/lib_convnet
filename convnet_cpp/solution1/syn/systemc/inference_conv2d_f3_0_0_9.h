// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_9_H__
#define __inference_conv2d_f3_0_0_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_9_ram) {
        ram[0] = "0b00111101101000000001011010001011";
        ram[1] = "0b10111101000001111110101001000101";
        ram[2] = "0b00111110000011110010000100101101";
        ram[3] = "0b00111101100011100110001100000101";
        ram[4] = "0b00111101110001000011111110001000";
        ram[5] = "0b00111101110011011100110010100111";
        ram[6] = "0b10111101111100011100011111011110";
        ram[7] = "0b10111110011001001000001101000101";
        ram[8] = "0b10111101111010101101110101011001";
        ram[9] = "0b00111101001011111000100011101111";
        ram[10] = "0b00111110010000111001111000101000";
        ram[11] = "0b10111100100000110101110101001101";
        ram[12] = "0b00111101000000101110010000110001";
        ram[13] = "0b00111110010100111000100110110101";
        ram[14] = "0b10111101110010001000100100111011";
        ram[15] = "0b00111110000101110001000111011000";
        ram[16] = "0b10111100111010001011100111111110";
        ram[17] = "0b10111101111110100010001011110111";
        ram[18] = "0b00111101100010101110100111100001";
        ram[19] = "0b00111100100011010001000110010110";
        ram[20] = "0b00111110000110110011110000111110";
        ram[21] = "0b00111101111011010110011111111101";
        ram[22] = "0b00111101111010101001100100110001";
        ram[23] = "0b00111101001111011001111010101100";
        ram[24] = "0b10111101100000000101111111010111";
        ram[25] = "0b10111100100001111111011101000101";
        ram[26] = "0b10111100010111000100110010011101";
        ram[27] = "0b00111100101010101100110100110011";
        ram[28] = "0b10111110011001100100111111011011";
        ram[29] = "0b10111101011110000001011011001000";
        ram[30] = "0b00111100100110111100001010011110";
        ram[31] = "0b00111100100010111010001011001011";
        ram[32] = "0b00111101000110110010101010010011";
        ram[33] = "0b00111100111100011011100001110100";
        ram[34] = "0b00111110000100011001011111100101";
        ram[35] = "0b10111110000101001110011100100101";
        ram[36] = "0b10111110000000110011011011011111";
        ram[37] = "0b00111101101111010001001100101001";
        ram[38] = "0b10111101111111011010011110110001";
        ram[39] = "0b10111101100110111101100001100000";
        ram[40] = "0b00111101011101101111011111001001";
        ram[41] = "0b10111101110011100110111000100010";
        ram[42] = "0b00111101111101011001111001100010";
        ram[43] = "0b00111100100100100110111100111001";
        ram[44] = "0b10111100101110010101010111000010";
        ram[45] = "0b00111100110111101111100111000000";
        ram[46] = "0b10111000100111001001010100001010";
        ram[47] = "0b10111101100100001101110010111010";
        ram[48] = "0b00111110010100010000100111010000";
        ram[49] = "0b10111110001011011000110000101010";
        ram[50] = "0b10111100111111101000001110010100";
        ram[51] = "0b00111101010111101111011111000010";
        ram[52] = "0b10111101101100111011100101111000";
        ram[53] = "0b10111110000000000001100111110100";
        ram[54] = "0b10111101110111010100111100010110";
        ram[55] = "0b10111011001000101101100110001001";
        ram[56] = "0b10111100000100111011101111111111";
        ram[57] = "0b00111101101111100000010001001000";
        ram[58] = "0b00111011110111110101001101111000";
        ram[59] = "0b00111110000010010010111101101111";
        ram[60] = "0b00111101101100110010001111010111";
        ram[61] = "0b00111110001011011001111001000001";
        ram[62] = "0b00111101001110111110001010110101";
        ram[63] = "0b00111101011100100101001010011000";
        ram[64] = "0b10111101100101110000001100101010";
        ram[65] = "0b10111101000101100001101011110100";
        ram[66] = "0b10111101011010010000100001010010";
        ram[67] = "0b10111101111011011011111100000101";
        ram[68] = "0b00111100101010001111101011001011";
        ram[69] = "0b00111110000000100101110000111110";
        ram[70] = "0b10111101110011100111011100001100";
        ram[71] = "0b10111110010100011010000100010010";
        ram[72] = "0b10111101110001100010101100110101";
        ram[73] = "0b00111101001001000111011100001101";
        ram[74] = "0b10111100111010011001101001100011";
        ram[75] = "0b00111011001100100110111001010010";
        ram[76] = "0b00111100000101101111111111101100";
        ram[77] = "0b00111101111011000000001011110011";
        ram[78] = "0b10111110000101001011000010011111";
        ram[79] = "0b10111101110000101100110101010101";
        ram[80] = "0b00111101111010101001101000111101";
        ram[81] = "0b10111100110100010000110000101100";
        ram[82] = "0b10111001000100000010111000100101";
        ram[83] = "0b10111101001111000011110101001101";
        ram[84] = "0b10111110010000001111101100100010";
        ram[85] = "0b00111101001010010010010100101000";
        ram[86] = "0b00111100010001000100000000110110";
        ram[87] = "0b10111101110111011011101000001010";
        ram[88] = "0b10111101101000001001100001011100";
        ram[89] = "0b00111110000001001110000111100111";
        ram[90] = "0b10111110000101001100111000111110";
        ram[91] = "0b00111101000101001011101001101100";
        ram[92] = "0b10111110000001111110111000001011";
        ram[93] = "0b10111101000110111100001110010000";
        ram[94] = "0b10111101001011100010010101000010";
        ram[95] = "0b00111100001001100011010001000111";
        ram[96] = "0b00111100000000111001011011101110";
        ram[97] = "0b10111110000011111000011010100001";
        ram[98] = "0b10111100100010000010011100010110";
        ram[99] = "0b10111101101111111000001000010001";
        ram[100] = "0b10111110001101000000100101011111";
        ram[101] = "0b00111101100010000011101010110010";
        ram[102] = "0b00111100001001011100100011100111";
        ram[103] = "0b00111101010000101001101101101011";
        ram[104] = "0b00111100010011010110110111011100";
        ram[105] = "0b10111101001100000101110101000101";
        ram[106] = "0b10111101011101000111010100111000";
        ram[107] = "0b10111101100100011001000111000011";
        ram[108] = "0b10111101010001100011011100011100";
        ram[109] = "0b00111110000010111101110010101101";
        ram[110] = "0b10111100011111010101011011011000";
        ram[111] = "0b00111110001010101001111011110101";
        ram[112] = "0b10111100010010000101111100010100";
        ram[113] = "0b00111101100101111000000111111101";
        ram[114] = "0b10111110000000000110100000010010";
        ram[115] = "0b00111101101111111101110000001001";
        ram[116] = "0b00111110000010000111011011100010";
        ram[117] = "0b00111101000011001101110110101111";
        ram[118] = "0b10111101100010110011100100001100";
        ram[119] = "0b10111110001000101000100100010010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_9) {
meminst = new inference_conv2d_f3_0_0_9_ram("inference_conv2d_f3_0_0_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_9() {
    delete meminst;
}


};//endmodule
#endif
