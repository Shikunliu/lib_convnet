// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_25_H__
#define __inference_mult_1_120_120_84_s_W4_25_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_25_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_25_ram) {
        ram[0] = "0b10111110000011101110000011110100";
        ram[1] = "0b10111101001010001100000110001010";
        ram[2] = "0b00111101101010011000100000110010";
        ram[3] = "0b00111101001110011010000111000111";
        ram[4] = "0b00111100110001011011011001011000";
        ram[5] = "0b10111101111110111111101111011111";
        ram[6] = "0b10111101000110110111010010000000";
        ram[7] = "0b00111100101011110100101101000111";
        ram[8] = "0b00111110010011010000101000100100";
        ram[9] = "0b10111110000100000111000110000010";
        ram[10] = "0b00111110001100110101010110001010";
        ram[11] = "0b10111101111100001010100110011011";
        ram[12] = "0b00111110010001000111111011010000";
        ram[13] = "0b10111101100000011001111010000001";
        ram[14] = "0b10111101001011000101111101010100";
        ram[15] = "0b00111101110110111101000111101110";
        ram[16] = "0b00111101101101001101001000011111";
        ram[17] = "0b10111110001010110011010001100001";
        ram[18] = "0b10111101100100011100100000010100";
        ram[19] = "0b00111101111110011000011000110100";
        ram[20] = "0b00111110010110011000010100100111";
        ram[21] = "0b00111101111001011000010011110101";
        ram[22] = "0b00111101111101101100011000010101";
        ram[23] = "0b10111110000010010001110100010101";
        ram[24] = "0b10111101111001110100000010000001";
        ram[25] = "0b00111110000001110000011011010101";
        ram[26] = "0b00111101010000100011100110010110";
        ram[27] = "0b10111101001001000011010110111010";
        ram[28] = "0b00111101011111001110011110110010";
        ram[29] = "0b00111100110101011111111100010000";
        ram[30] = "0b00111011100000000101100111000010";
        ram[31] = "0b10111101111110111000001101001001";
        ram[32] = "0b10111101001001111001000111111010";
        ram[33] = "0b10111110011111110101111001000010";
        ram[34] = "0b10111101101101110111110111100110";
        ram[35] = "0b10111101100111001001101111111101";
        ram[36] = "0b00111110001110001000000001010010";
        ram[37] = "0b10111110000101111101011100111101";
        ram[38] = "0b10111101000000000101100011101011";
        ram[39] = "0b00111101001110000100110001000010";
        ram[40] = "0b10111101111001111001101000101000";
        ram[41] = "0b00111101111111110100101000010010";
        ram[42] = "0b10111101001010111010111010100101";
        ram[43] = "0b10111011111101001011010011001000";
        ram[44] = "0b10111101010111001101000100100111";
        ram[45] = "0b10111100100010111100100001010101";
        ram[46] = "0b10111101100000100010110011110011";
        ram[47] = "0b00111101110110111100110000101001";
        ram[48] = "0b00111110000001110101010011110011";
        ram[49] = "0b00111110000001111101111010010100";
        ram[50] = "0b00111101110010001101111111011000";
        ram[51] = "0b00111101110101000000011001111101";
        ram[52] = "0b10111101100001001000010010111101";
        ram[53] = "0b10111110000100010100110101110010";
        ram[54] = "0b00111101110100010101001001101110";
        ram[55] = "0b00111101000100101100001000101010";
        ram[56] = "0b00111101011100001111111000111010";
        ram[57] = "0b10111110010001011000000011000011";
        ram[58] = "0b10111101110010010110110100001001";
        ram[59] = "0b10111010111001001110110011010100";
        ram[60] = "0b00111110000100001001000111000001";
        ram[61] = "0b10111101101101100101110001110000";
        ram[62] = "0b00111101100001111000101011011001";
        ram[63] = "0b10111100111010111000011100000010";
        ram[64] = "0b00111101001111011110010100111110";
        ram[65] = "0b10111101100100001001010110000111";
        ram[66] = "0b10111101010101101001000100111100";
        ram[67] = "0b00111101101001001011111100100100";
        ram[68] = "0b00111101100111101001011010001110";
        ram[69] = "0b00111100100111111110010000110110";
        ram[70] = "0b00111110010001000000011101000110";
        ram[71] = "0b00111110000010011101010111100101";
        ram[72] = "0b10111101001101011111101000001000";
        ram[73] = "0b00111110001011101010100011011010";
        ram[74] = "0b00111101001111100010100111101100";
        ram[75] = "0b00111101111101110110111101101101";
        ram[76] = "0b10111101101001000000110100100110";
        ram[77] = "0b00111101110011111011100011110101";
        ram[78] = "0b10111100100011010101011100110110";
        ram[79] = "0b00111100010110001100110001001010";
        ram[80] = "0b10111101110101101011010001000010";
        ram[81] = "0b10111110000110000100101010010100";
        ram[82] = "0b00111101001111101111000111001000";
        ram[83] = "0b00111110000010100110010110001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_25) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_25_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_25) {
meminst = new inference_mult_1_120_120_84_s_W4_25_ram("inference_mult_1_120_120_84_s_W4_25_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_25() {
    delete meminst;
}


};//endmodule
#endif
