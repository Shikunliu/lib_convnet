// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_10_H__
#define __inference_conv2d_f3_2_3_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_10_ram) {
        ram[0] = "0b00111110001010001111101010111110";
        ram[1] = "0b10111110000011010010100011010000";
        ram[2] = "0b10111101101101100100010100011100";
        ram[3] = "0b10111101100000110001011101110111";
        ram[4] = "0b00111110001110010010010011110010";
        ram[5] = "0b00111110000000110001110001100101";
        ram[6] = "0b00111100110111011001101110111101";
        ram[7] = "0b10111110000001010110001111101101";
        ram[8] = "0b00111100110101100110010010010001";
        ram[9] = "0b00111110000010111010110111000001";
        ram[10] = "0b10111101011110010011111110000111";
        ram[11] = "0b10111101110101001110010101001111";
        ram[12] = "0b10111101100101110000101110001101";
        ram[13] = "0b00111011000000000011001001101010";
        ram[14] = "0b10111101100001111100110111100111";
        ram[15] = "0b00111100010001001010010011100000";
        ram[16] = "0b00111100011100001101111010001111";
        ram[17] = "0b10111101001100001110101111000110";
        ram[18] = "0b00111100001111010101000011000011";
        ram[19] = "0b10111101100111110110101111111110";
        ram[20] = "0b10111100000111101111011011000110";
        ram[21] = "0b00111101101110001100110000101111";
        ram[22] = "0b10111101001000001000000111010000";
        ram[23] = "0b10111101000101010001010011101010";
        ram[24] = "0b00111101011010100111011101010010";
        ram[25] = "0b10111101101011101110010010000100";
        ram[26] = "0b00111110010101100000110101000101";
        ram[27] = "0b00111011111010100111101101011110";
        ram[28] = "0b10111100001000110010010100110100";
        ram[29] = "0b00111110001001101110010001111110";
        ram[30] = "0b10111100100001010000011100000110";
        ram[31] = "0b10111101010001010001010001010111";
        ram[32] = "0b00111101001100011101100000111010";
        ram[33] = "0b00111101110010111101101100011010";
        ram[34] = "0b00111101101110011111011001100110";
        ram[35] = "0b00111101010001000010001010100100";
        ram[36] = "0b00111010111000110010101000110001";
        ram[37] = "0b10111101010010001010000101110100";
        ram[38] = "0b10111110000100111001010100111110";
        ram[39] = "0b00111100111001011101101011110000";
        ram[40] = "0b00111101011110001100100010111001";
        ram[41] = "0b00111101110101101010011110101101";
        ram[42] = "0b10111110001001111101010011100001";
        ram[43] = "0b00111110010100110000101001001110";
        ram[44] = "0b10111101100111000010100100111001";
        ram[45] = "0b00111101011101100000001011110001";
        ram[46] = "0b00111110000010010110001101010110";
        ram[47] = "0b10111110010110111001110011111010";
        ram[48] = "0b00111100111001010100000100000010";
        ram[49] = "0b10111101001011100101001000100011";
        ram[50] = "0b00111101110000001111011001001111";
        ram[51] = "0b00111101110001001110011011100010";
        ram[52] = "0b00111101000101100001011101100100";
        ram[53] = "0b00111110000000111110010100110010";
        ram[54] = "0b10111110000101101010111000111010";
        ram[55] = "0b10111101000110011101001010001010";
        ram[56] = "0b10111101011000100101100111000111";
        ram[57] = "0b00111100011011111000010101011110";
        ram[58] = "0b10111101010011001000000101001101";
        ram[59] = "0b10111101100011011000110111110011";
        ram[60] = "0b10111100111000010110101011101010";
        ram[61] = "0b10111110001010011010000001101010";
        ram[62] = "0b00111101111011110010110110000000";
        ram[63] = "0b10111101000110010001001010001011";
        ram[64] = "0b10111101101000110110010001111100";
        ram[65] = "0b00111101001101111000101111011000";
        ram[66] = "0b10111101001110100101011011011110";
        ram[67] = "0b00111100110100111101101001110011";
        ram[68] = "0b10111101001110001000010010101100";
        ram[69] = "0b10111101000110100001010111110110";
        ram[70] = "0b10111101110111010110110001110010";
        ram[71] = "0b00111101101101110010100110100101";
        ram[72] = "0b00111101111011111010000001010001";
        ram[73] = "0b00111010110011000010100100001110";
        ram[74] = "0b10111101110101101111010111001011";
        ram[75] = "0b10111101000001110111001001101011";
        ram[76] = "0b10111110000001001001101100100000";
        ram[77] = "0b10111101100111110111001110100110";
        ram[78] = "0b00111101001101110100001000111100";
        ram[79] = "0b00111110001000001010001011001011";
        ram[80] = "0b00111100111000101111110111000110";
        ram[81] = "0b00111101110110111001110110000000";
        ram[82] = "0b00111101010001001110001000011101";
        ram[83] = "0b10111110000010110011100101011100";
        ram[84] = "0b00111101100111001010110011000100";
        ram[85] = "0b00111101111001011101111010011100";
        ram[86] = "0b00111101010101010111100100001110";
        ram[87] = "0b10111101000011101110010011010101";
        ram[88] = "0b00111100110001010011111000101101";
        ram[89] = "0b10111101011001001001001101111000";
        ram[90] = "0b10111101100011110111101010111010";
        ram[91] = "0b00111011110110010001001101010111";
        ram[92] = "0b10111100000101011100000100000111";
        ram[93] = "0b10111101010101110101101001110101";
        ram[94] = "0b00111110000110111000000110110110";
        ram[95] = "0b00111011100100001110010011101010";
        ram[96] = "0b00111110001000010000010000001100";
        ram[97] = "0b00111101010010010011000001000101";
        ram[98] = "0b10111101001001111100100000110001";
        ram[99] = "0b00111100001001011001000001001000";
        ram[100] = "0b00111010011000010110010000110100";
        ram[101] = "0b00111101000100001001101111111010";
        ram[102] = "0b00111100010000011111011110000111";
        ram[103] = "0b10111110000100111011101011111110";
        ram[104] = "0b00111101100001010001101111100100";
        ram[105] = "0b10111101101000100111110000011110";
        ram[106] = "0b00111010010101010101000100001000";
        ram[107] = "0b10111101010100111101000111110100";
        ram[108] = "0b10111101100111111101100101001111";
        ram[109] = "0b10111101000001100011110110011100";
        ram[110] = "0b10111101110001000110010101100010";
        ram[111] = "0b10111101111101010000010101001011";
        ram[112] = "0b10111101001110001010000011100001";
        ram[113] = "0b10111101111000000100010100110101";
        ram[114] = "0b10111110000011101110100110011010";
        ram[115] = "0b10111010110110100101111110110010";
        ram[116] = "0b10111100101000001100101101010010";
        ram[117] = "0b00111101111000110101100010110000";
        ram[118] = "0b10111101101010100111000110000000";
        ram[119] = "0b00111101000100010101011000110100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_10) {
meminst = new inference_conv2d_f3_2_3_10_ram("inference_conv2d_f3_2_3_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_10() {
    delete meminst;
}


};//endmodule
#endif
