// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_2_H__
#define __inference_conv2d_f3_1_3_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_2_ram) {
        ram[0] = "0b00111101000110011001100001110010";
        ram[1] = "0b10111101000010001111001101110100";
        ram[2] = "0b10111100110011001111001101100011";
        ram[3] = "0b10111101101111110100000001101101";
        ram[4] = "0b10111101101111101010000101110110";
        ram[5] = "0b10111100100000100010001001001111";
        ram[6] = "0b00111101100101101000000000010111";
        ram[7] = "0b00111101100011010000101010011101";
        ram[8] = "0b10111101101111011001101010110000";
        ram[9] = "0b10111101001001110011101011110010";
        ram[10] = "0b00111101100011001101100110100101";
        ram[11] = "0b10111101000011001110011101010100";
        ram[12] = "0b10111101001110110000000101111001";
        ram[13] = "0b00111110010100001101110011111101";
        ram[14] = "0b00111100110111011111011001010101";
        ram[15] = "0b10111110000001100110101100011110";
        ram[16] = "0b00111101101111111011010010000001";
        ram[17] = "0b00111100110010000000000010000000";
        ram[18] = "0b10111100010111011110001010011111";
        ram[19] = "0b00111101101010111000000110110110";
        ram[20] = "0b00111101011001000011000100011101";
        ram[21] = "0b10111110000001010001001100110000";
        ram[22] = "0b10111101101110001101001001011111";
        ram[23] = "0b10111101101011010010110100101010";
        ram[24] = "0b00111101001100101000010011101101";
        ram[25] = "0b10111101111000101010110100111111";
        ram[26] = "0b00111101100110000100100101010010";
        ram[27] = "0b10111100001011101110011100001001";
        ram[28] = "0b10111100000111001100111101101111";
        ram[29] = "0b00111101010100100001111001000101";
        ram[30] = "0b10111100110011110110100010001000";
        ram[31] = "0b10111110001011001110101100110101";
        ram[32] = "0b10111100000001101110101011001011";
        ram[33] = "0b00111011110011010011001001100011";
        ram[34] = "0b00111100001100111110011111111001";
        ram[35] = "0b00111101101110001111011111101001";
        ram[36] = "0b10111101000001000110010011101010";
        ram[37] = "0b00111100101000001101000111010010";
        ram[38] = "0b10111110001000001100010100100010";
        ram[39] = "0b10111110000001101111000100010011";
        ram[40] = "0b00111110000010101101111111111000";
        ram[41] = "0b10111101100100110000011100000001";
        ram[42] = "0b10111101101001001101100110011110";
        ram[43] = "0b10111101001011000100111110110100";
        ram[44] = "0b10111100100011001111011001010011";
        ram[45] = "0b10111101000000111010110000001100";
        ram[46] = "0b00111100111110111011110000000011";
        ram[47] = "0b00111101110001101100110100101001";
        ram[48] = "0b00111110001011100000000100010101";
        ram[49] = "0b00111101101011100011110001010011";
        ram[50] = "0b00111010111011000100010100111000";
        ram[51] = "0b00111101110011010000010101101100";
        ram[52] = "0b10111011011010101100100110111000";
        ram[53] = "0b00111110000010110001111100100101";
        ram[54] = "0b00111101010110101011010100100011";
        ram[55] = "0b00111110000101111000010010101001";
        ram[56] = "0b00111101011010011011110111010100";
        ram[57] = "0b00111101110000111001001100100101";
        ram[58] = "0b10111101101111100010100001001100";
        ram[59] = "0b00111101011011110011001100101001";
        ram[60] = "0b10111011110101011000110110100110";
        ram[61] = "0b10111101100110110010000000111111";
        ram[62] = "0b10111101101101000000111000100101";
        ram[63] = "0b10111101100011110100001010000110";
        ram[64] = "0b10111110000000110000001101111101";
        ram[65] = "0b00111100101010100001011010111111";
        ram[66] = "0b00111100111110110010010011001111";
        ram[67] = "0b00111100110111001110000011100001";
        ram[68] = "0b10111101101001011000110011111010";
        ram[69] = "0b10111100111010100000111101101000";
        ram[70] = "0b10111101110100101001110101000001";
        ram[71] = "0b10111101111011101101011110000100";
        ram[72] = "0b00111100000111001110011000110101";
        ram[73] = "0b00111011100010111000001001010101";
        ram[74] = "0b10111101101000010101000101010100";
        ram[75] = "0b00111011111000001111101111011001";
        ram[76] = "0b00111101001100101000111011001001";
        ram[77] = "0b00111101001110010000011110001001";
        ram[78] = "0b10111101110000110110001110110010";
        ram[79] = "0b00111101001101011101101010101101";
        ram[80] = "0b10111010010111111100010101000100";
        ram[81] = "0b00111100110010011100100011010111";
        ram[82] = "0b10111100101100101001001010001111";
        ram[83] = "0b00111101101010000011000111100011";
        ram[84] = "0b00111101111110011111010011010011";
        ram[85] = "0b00111101110111110110110110111001";
        ram[86] = "0b00111100111101100001000011001001";
        ram[87] = "0b00111100101010100101010010011101";
        ram[88] = "0b10111110000100010101111011000000";
        ram[89] = "0b00111101001100100011100000101100";
        ram[90] = "0b10111101010111111100100110010100";
        ram[91] = "0b00111110000101110001110001010100";
        ram[92] = "0b00111110001111011111001101110011";
        ram[93] = "0b10111101100010100111011000010000";
        ram[94] = "0b00111100010111100000001101010110";
        ram[95] = "0b00111101100011010100100110101111";
        ram[96] = "0b10111100000010000011100010111110";
        ram[97] = "0b10111100100010010111010001010011";
        ram[98] = "0b10111101100001110110001000110111";
        ram[99] = "0b00111101010001100110111101101011";
        ram[100] = "0b10111101111011011101101101010101";
        ram[101] = "0b10111110001101110101110010001110";
        ram[102] = "0b10111101011101011000011100011011";
        ram[103] = "0b00111100110010101001011010010010";
        ram[104] = "0b00111101110110110011111110100111";
        ram[105] = "0b10111100100011011000010101011001";
        ram[106] = "0b00111101000001011011111010100001";
        ram[107] = "0b00111011001111000000110111100011";
        ram[108] = "0b00111101111111110100010101011010";
        ram[109] = "0b00111101011011100011100011011110";
        ram[110] = "0b10111101110001011011101100101011";
        ram[111] = "0b10111110001010001101001100101000";
        ram[112] = "0b00111101110001011001000100011111";
        ram[113] = "0b00111101101101000110100011110011";
        ram[114] = "0b00111101011111010100001001100110";
        ram[115] = "0b00111101100110011011001111000011";
        ram[116] = "0b10111100111101101001010001000110";
        ram[117] = "0b10111101001111000101010111110010";
        ram[118] = "0b00111101001101001001011001011010";
        ram[119] = "0b00111101111111110110100110001000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_2) {
meminst = new inference_conv2d_f3_1_3_2_ram("inference_conv2d_f3_1_3_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_2() {
    delete meminst;
}


};//endmodule
#endif
