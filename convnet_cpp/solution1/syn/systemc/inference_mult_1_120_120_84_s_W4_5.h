// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_5_H__
#define __inference_mult_1_120_120_84_s_W4_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_5_ram) {
        ram[0] = "0b10111101000111111100011010100101";
        ram[1] = "0b00111101000110101000101010010000";
        ram[2] = "0b00111110000001010010100101111000";
        ram[3] = "0b00111011101010001101111110110011";
        ram[4] = "0b00111101111010010101001000001001";
        ram[5] = "0b10111101110011101001110001000101";
        ram[6] = "0b00111101000000011010101110000001";
        ram[7] = "0b00111101110011101111010011100000";
        ram[8] = "0b10111101011111001111101001011100";
        ram[9] = "0b10111011100110101010100111001111";
        ram[10] = "0b00111101111111111100000100010110";
        ram[11] = "0b00111101110001011001111110100100";
        ram[12] = "0b10111101111000111011010011110110";
        ram[13] = "0b00111100000101011010010010001101";
        ram[14] = "0b10111110001001011000010110111110";
        ram[15] = "0b10111110000101010100001010100010";
        ram[16] = "0b00111110000000101101010101011010";
        ram[17] = "0b00111101101111101001010110101010";
        ram[18] = "0b10111101101001101000010110011000";
        ram[19] = "0b00111100010001101011011100001001";
        ram[20] = "0b10111100111110110111101100000000";
        ram[21] = "0b00111101000110101101111110110101";
        ram[22] = "0b00111101000101110101100111101111";
        ram[23] = "0b10111101010110100110000010111001";
        ram[24] = "0b00111100110100100001110100111001";
        ram[25] = "0b00111101101001011100100110001000";
        ram[26] = "0b00111110001000110100000010010010";
        ram[27] = "0b00111110001000101111010001001001";
        ram[28] = "0b00111110010010110100001010001001";
        ram[29] = "0b10111101111101000011101011101011";
        ram[30] = "0b10111101001100000011100010101101";
        ram[31] = "0b00111101001011000111110100011100";
        ram[32] = "0b00111110000011101000101001110010";
        ram[33] = "0b10111110001110010011110001000111";
        ram[34] = "0b00111101110111010000100111100001";
        ram[35] = "0b10111101011100110100110101001111";
        ram[36] = "0b10111101100111110011100110110111";
        ram[37] = "0b00111100011000011001011101011111";
        ram[38] = "0b10111101000110000111010011110001";
        ram[39] = "0b00111101100110110001110101000010";
        ram[40] = "0b10111101101000110110100010010011";
        ram[41] = "0b00111101110100100000011101001111";
        ram[42] = "0b00111110000000010101000011011011";
        ram[43] = "0b10111110000101001011000111101110";
        ram[44] = "0b10111011101001101001011001101101";
        ram[45] = "0b10111110010010011000011101000000";
        ram[46] = "0b10111100010111110001001111110111";
        ram[47] = "0b10111100101010100101100010011001";
        ram[48] = "0b10111101101001111010011010111101";
        ram[49] = "0b00111101000111011001111110111001";
        ram[50] = "0b00111101000111001010001001100011";
        ram[51] = "0b00111100101000111010000000011000";
        ram[52] = "0b00111101111111110000101110101111";
        ram[53] = "0b00111101001100010010000111100001";
        ram[54] = "0b10111110000011001100000001111011";
        ram[55] = "0b10111101100111000010100000101100";
        ram[56] = "0b10111101010001110111001110101101";
        ram[57] = "0b00111101111000001100101011100110";
        ram[58] = "0b10111101110101101110100000101001";
        ram[59] = "0b00111101100101010000000010111011";
        ram[60] = "0b00111000000101100101111100100110";
        ram[61] = "0b00111101110010111101001001100110";
        ram[62] = "0b10111110001101010110111001101001";
        ram[63] = "0b00111101101100111111111101101001";
        ram[64] = "0b00111100110001110011111000011000";
        ram[65] = "0b00111100011001001011001000110001";
        ram[66] = "0b10111001110111000111101111001010";
        ram[67] = "0b00111101111000011010101111010010";
        ram[68] = "0b10111110000101000011010111110000";
        ram[69] = "0b00111101001101000010110000111101";
        ram[70] = "0b00111101101000010110000001010010";
        ram[71] = "0b00111101011110011111110111011000";
        ram[72] = "0b10111101000000110010101001010111";
        ram[73] = "0b00111101101010111001011010101111";
        ram[74] = "0b10111101111011111100110101101000";
        ram[75] = "0b00111100111110100110011111011011";
        ram[76] = "0b00111101110110000111101011010001";
        ram[77] = "0b00111101010000011011110010011001";
        ram[78] = "0b10111011101001001111010010010111";
        ram[79] = "0b10111101111101110110100000010110";
        ram[80] = "0b10111100001110000110000010011010";
        ram[81] = "0b00111101000010111111101100110001";
        ram[82] = "0b00111101000001110010010101110011";
        ram[83] = "0b00111101111111000011111110000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_5_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_5) {
meminst = new inference_mult_1_120_120_84_s_W4_5_ram("inference_mult_1_120_120_84_s_W4_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_5() {
    delete meminst;
}


};//endmodule
#endif
