// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_2_H__
#define __inference_conv2d_f3_4_2_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_2_ram) {
        ram[0] = "0b10111101101000110100101000011101";
        ram[1] = "0b00111100110000000000111100011001";
        ram[2] = "0b00111100111000010000010011111110";
        ram[3] = "0b00111100111110010111001111110101";
        ram[4] = "0b10111101110110000110101110011100";
        ram[5] = "0b10111100110101101100011011101100";
        ram[6] = "0b00111100001001001101100101101001";
        ram[7] = "0b00111101100000001101100000101010";
        ram[8] = "0b00111110001110000001101010011100";
        ram[9] = "0b10111101100101110101001010001010";
        ram[10] = "0b10111011110110110000110101010111";
        ram[11] = "0b00111101100110000011100011101001";
        ram[12] = "0b00111101000100011100100000101111";
        ram[13] = "0b00111101110000000111111011111100";
        ram[14] = "0b00111011100010111100110100101000";
        ram[15] = "0b00111101001100010011000011100000";
        ram[16] = "0b00111110000011000001101100010001";
        ram[17] = "0b00111110001110110011111010011010";
        ram[18] = "0b00111101000111010001100001110100";
        ram[19] = "0b10111101101110010101101000001110";
        ram[20] = "0b10111110000010101011110101011110";
        ram[21] = "0b00111100010001011110111101100011";
        ram[22] = "0b10111100100001011010001111100100";
        ram[23] = "0b00111101110110010110010100101100";
        ram[24] = "0b00111101001001011001000111011011";
        ram[25] = "0b00111110001101110110000111001100";
        ram[26] = "0b00111101100100001010110001111110";
        ram[27] = "0b10111101011110000111001011011000";
        ram[28] = "0b10111011000000100010000110101110";
        ram[29] = "0b00111101001110101010000111110010";
        ram[30] = "0b00111101010101111010001000101110";
        ram[31] = "0b10111100110010010110011001000110";
        ram[32] = "0b00111100010110000011111011110001";
        ram[33] = "0b10111101111010000111110100101100";
        ram[34] = "0b10111101000100010111111010101110";
        ram[35] = "0b00111101011000100010111100110101";
        ram[36] = "0b10111011111000111010101011110101";
        ram[37] = "0b00111100100001010110001010101011";
        ram[38] = "0b10111101100110101111000001100001";
        ram[39] = "0b10111101011101111001010100010010";
        ram[40] = "0b10111110000111101101011110000100";
        ram[41] = "0b10111101110101110000100000100101";
        ram[42] = "0b10111101100011111100111111011111";
        ram[43] = "0b00111101000000010110001001010000";
        ram[44] = "0b00111011110011110001111110001101";
        ram[45] = "0b00111100110110000100110001011101";
        ram[46] = "0b00111101000011011110101010001001";
        ram[47] = "0b00111101000011001010111010110101";
        ram[48] = "0b00111101100011110010101000110010";
        ram[49] = "0b00111100001110111110100101010000";
        ram[50] = "0b10111110001110110100001011001100";
        ram[51] = "0b10111101001010101001000010110010";
        ram[52] = "0b10111110000010011000010010100001";
        ram[53] = "0b10111100110110001000110010111111";
        ram[54] = "0b00111100101010101010010010111010";
        ram[55] = "0b10111110000010011101101101100110";
        ram[56] = "0b10111100111001101110110001101000";
        ram[57] = "0b10111101010001000110011101010011";
        ram[58] = "0b00111110001001011011111100100111";
        ram[59] = "0b00111100111100011001000010011100";
        ram[60] = "0b10111101101001100000110000000011";
        ram[61] = "0b00111101000000100110111011000000";
        ram[62] = "0b00111101110011010101101111101110";
        ram[63] = "0b00111101110101011011111011100100";
        ram[64] = "0b10111101100101000010011000001101";
        ram[65] = "0b10111110000011010001010100100111";
        ram[66] = "0b00111101100111011010101110111010";
        ram[67] = "0b10111101101001111010010110111110";
        ram[68] = "0b00111101011011010000000010011010";
        ram[69] = "0b10111101101100100000001001000110";
        ram[70] = "0b00111101110001011010101100000101";
        ram[71] = "0b10111100100110100111010000100000";
        ram[72] = "0b00111100111001101011101001111111";
        ram[73] = "0b10111101000110010101001010000010";
        ram[74] = "0b10111100011111011100000000011111";
        ram[75] = "0b10111101001000111000110100011110";
        ram[76] = "0b00111110000110101001000110010111";
        ram[77] = "0b00111100110110001100001000000011";
        ram[78] = "0b10111101111010011011101011100100";
        ram[79] = "0b00111101101001001101111000111100";
        ram[80] = "0b10111101100111001001111100001000";
        ram[81] = "0b10111101100001101100110111011000";
        ram[82] = "0b00111101001000100111001011010111";
        ram[83] = "0b00111110000111111001100001110100";
        ram[84] = "0b10111100100101000110011100101011";
        ram[85] = "0b00111100010101111111101101101010";
        ram[86] = "0b00111101001110011011101101000010";
        ram[87] = "0b00111101111101110110100110101001";
        ram[88] = "0b00111110001100100000001000010000";
        ram[89] = "0b00111101101011101011001100000110";
        ram[90] = "0b10111101000011111100001111011101";
        ram[91] = "0b10111100001101101010111011101001";
        ram[92] = "0b00111101100101011110011011100101";
        ram[93] = "0b10111100110101110001010000011001";
        ram[94] = "0b10111100111001101011000000000011";
        ram[95] = "0b10111100100100100110110111000001";
        ram[96] = "0b00111101000000000010111100010101";
        ram[97] = "0b00111100000101100110110000011101";
        ram[98] = "0b10111101110010101000111111000001";
        ram[99] = "0b00111101110010111101100010100100";
        ram[100] = "0b00111110000101001100101100011001";
        ram[101] = "0b10111101100011000100001000000101";
        ram[102] = "0b00111101010001011001011001000010";
        ram[103] = "0b00111100111000010101100111101101";
        ram[104] = "0b00111110001010010111100110011110";
        ram[105] = "0b10111110000101100100110000110000";
        ram[106] = "0b10111101111001101110101100001011";
        ram[107] = "0b00111101001111001110101110101110";
        ram[108] = "0b00111101001111001110011000000101";
        ram[109] = "0b10111100110000000001010101100100";
        ram[110] = "0b00111101111100000000101010111111";
        ram[111] = "0b00111100000001101000011111101111";
        ram[112] = "0b10111110000010100011010111010110";
        ram[113] = "0b10111101110010000010001110010011";
        ram[114] = "0b10111100100100101000101101010011";
        ram[115] = "0b00111101101011010000010001100000";
        ram[116] = "0b00111101100111010000101011111011";
        ram[117] = "0b10111101010011110111000100100010";
        ram[118] = "0b00111101011010100011110011010000";
        ram[119] = "0b10111101011101110100100010000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_2) {
meminst = new inference_conv2d_f3_4_2_2_ram("inference_conv2d_f3_4_2_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_2() {
    delete meminst;
}


};//endmodule
#endif
