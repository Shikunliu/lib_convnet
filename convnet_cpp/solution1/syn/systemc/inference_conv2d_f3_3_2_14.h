// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_14_H__
#define __inference_conv2d_f3_3_2_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_14_ram) {
        ram[0] = "0b00111101011011101001010111000101";
        ram[1] = "0b10111101100000111011000010001111";
        ram[2] = "0b00111100111011111001110000000101";
        ram[3] = "0b10111101101111110100000001000101";
        ram[4] = "0b10111110001101010100010111001000";
        ram[5] = "0b00111101101010000111100100100011";
        ram[6] = "0b00111101011100010101001010100011";
        ram[7] = "0b10111101101001000101000111111100";
        ram[8] = "0b10111100000010101001010110010000";
        ram[9] = "0b10111101010101010010011110010101";
        ram[10] = "0b00111101100001111101100100100000";
        ram[11] = "0b10111101101111011001100000000100";
        ram[12] = "0b10111101101001010111001010011011";
        ram[13] = "0b00111101011001111010110001100111";
        ram[14] = "0b10111100100100010001110001010010";
        ram[15] = "0b00111110000111110111000000010101";
        ram[16] = "0b10111011110111000000001010100000";
        ram[17] = "0b10111101001110100111110000011000";
        ram[18] = "0b10111100011110011101010011011000";
        ram[19] = "0b00111101101110011010010110011011";
        ram[20] = "0b10111101010100101011100111100001";
        ram[21] = "0b00111101100001011101000001110100";
        ram[22] = "0b00111110000000010111111001111000";
        ram[23] = "0b00111101100101011100100100011101";
        ram[24] = "0b10111110000001011001110111011100";
        ram[25] = "0b10111101011100001101001010110110";
        ram[26] = "0b10111101111011000100000001001010";
        ram[27] = "0b00111110000101010010001001100100";
        ram[28] = "0b10111101001000111111101100000010";
        ram[29] = "0b00111101100100000111110011100011";
        ram[30] = "0b10111101010110001010011110010111";
        ram[31] = "0b10111101100110011111001110010001";
        ram[32] = "0b10111100101010010011000100011100";
        ram[33] = "0b10111101100011111110010110101110";
        ram[34] = "0b00111100101101011001000100010001";
        ram[35] = "0b00111101010110110111111100110010";
        ram[36] = "0b00111101011011111110011101101001";
        ram[37] = "0b10111101110101111010101100110010";
        ram[38] = "0b00111100111000100111001101011101";
        ram[39] = "0b10111110000011101011111001011001";
        ram[40] = "0b10111101011010010000011110010110";
        ram[41] = "0b00111101100011100001101010111000";
        ram[42] = "0b00111110001010111000010001010101";
        ram[43] = "0b10111101100110011101001101100000";
        ram[44] = "0b10111101111000000111111111101101";
        ram[45] = "0b00111101001001001001110000010001";
        ram[46] = "0b10111101000010100011001011011001";
        ram[47] = "0b00111100111010011110111111110011";
        ram[48] = "0b00111101101011001100111001101101";
        ram[49] = "0b10111100111111110100010111000110";
        ram[50] = "0b00111101111101110001000000000010";
        ram[51] = "0b00111101010010111011001110010010";
        ram[52] = "0b00111110001000101110011110110100";
        ram[53] = "0b00111110000011101001000110000110";
        ram[54] = "0b10111101011010100011010010000111";
        ram[55] = "0b00111100000111110011100101000001";
        ram[56] = "0b00111101100100110011101010110011";
        ram[57] = "0b10111101010111001001001011011110";
        ram[58] = "0b10111101110100111000111001101101";
        ram[59] = "0b00111101101001111011010100001110";
        ram[60] = "0b10111101011010010100010000010111";
        ram[61] = "0b10111101111110000100101000001110";
        ram[62] = "0b10111100001110001000101101100010";
        ram[63] = "0b00111100110110011011110000110100";
        ram[64] = "0b10111101101111110110100011100110";
        ram[65] = "0b00111101100111110011011100011000";
        ram[66] = "0b00111101100111101111111001111000";
        ram[67] = "0b00111101010111110110000001101000";
        ram[68] = "0b00111100011101110100001110011001";
        ram[69] = "0b10111101010010110011101110000011";
        ram[70] = "0b00111101110110010011010001101010";
        ram[71] = "0b10111110000100011111100110101101";
        ram[72] = "0b00111101100101101101110010111011";
        ram[73] = "0b00111101001110100001000011010011";
        ram[74] = "0b10111101101001010101101001110000";
        ram[75] = "0b10111101100001001110010001011110";
        ram[76] = "0b10111100101100000010010111001101";
        ram[77] = "0b10111101100110111000100000110111";
        ram[78] = "0b00111110001010110000100010011010";
        ram[79] = "0b10111100101011000001111000000001";
        ram[80] = "0b00111101011011000001110111100110";
        ram[81] = "0b10111101000111011011000100111011";
        ram[82] = "0b10111110010100101010011011110100";
        ram[83] = "0b00111101011100000001010110100111";
        ram[84] = "0b10111101111011110011111101010011";
        ram[85] = "0b10111100110100011010101111111010";
        ram[86] = "0b10111100110010111011011011101101";
        ram[87] = "0b00111110001111101110111111100101";
        ram[88] = "0b00111101110001001010010100110001";
        ram[89] = "0b00111010110111101110001011111010";
        ram[90] = "0b10111101000100110010111111110011";
        ram[91] = "0b10111101010011000010100001000111";
        ram[92] = "0b00111110001000011100101001111101";
        ram[93] = "0b00111101101100011000101101101011";
        ram[94] = "0b10111110000010001111101001111011";
        ram[95] = "0b00111110001100001110101001011011";
        ram[96] = "0b00111100101000100100010000101101";
        ram[97] = "0b10111110000100001111111010001011";
        ram[98] = "0b10111101111100011110111110110111";
        ram[99] = "0b10111110001111100111100101101000";
        ram[100] = "0b10111110000000101001011111000000";
        ram[101] = "0b00111101100111011011001001110000";
        ram[102] = "0b00111110000000101001000100110010";
        ram[103] = "0b00111100010111100111001101010011";
        ram[104] = "0b00111100101111011011010100111000";
        ram[105] = "0b10111100110010100000011110001011";
        ram[106] = "0b00111101000010010011100000001000";
        ram[107] = "0b00111101110111001001001101100100";
        ram[108] = "0b10111101001001111000111100100110";
        ram[109] = "0b10111101111111110010010111100101";
        ram[110] = "0b00111100101110111010011010011111";
        ram[111] = "0b10111100100110001001100110001010";
        ram[112] = "0b00111100000000000111101011100101";
        ram[113] = "0b10111110000111111010110000011101";
        ram[114] = "0b10111100101111001001100101000011";
        ram[115] = "0b00111101100011100011111001101100";
        ram[116] = "0b10111101000011111011100011011011";
        ram[117] = "0b00111101000000010010011010001100";
        ram[118] = "0b10111101101101010010101010010010";
        ram[119] = "0b10111101110110111001100101001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_14) {
meminst = new inference_conv2d_f3_3_2_14_ram("inference_conv2d_f3_3_2_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_14() {
    delete meminst;
}


};//endmodule
#endif
