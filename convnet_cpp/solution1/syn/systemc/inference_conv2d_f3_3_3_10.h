// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_10_H__
#define __inference_conv2d_f3_3_3_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_10_ram) {
        ram[0] = "0b10111100000100000010001110001111";
        ram[1] = "0b00111101101001101001101001001110";
        ram[2] = "0b10111101001011111101111110001100";
        ram[3] = "0b10111101101001001010010110101001";
        ram[4] = "0b00111101111110101000100010101101";
        ram[5] = "0b10111101110001000100111011001010";
        ram[6] = "0b10111101011100000100111100000011";
        ram[7] = "0b00111101001010001001110000000000";
        ram[8] = "0b00111110000100000001100111110100";
        ram[9] = "0b10111100010101100110000100110110";
        ram[10] = "0b10111110001111000100000001001010";
        ram[11] = "0b10111011010010001001110000111100";
        ram[12] = "0b10111100101011101000101010001101";
        ram[13] = "0b10111101101011111100110000100110";
        ram[14] = "0b00111110001001100100101011100000";
        ram[15] = "0b00111101010010110011010111011001";
        ram[16] = "0b00111101101111110110100000010000";
        ram[17] = "0b10111011010100011000000100010010";
        ram[18] = "0b10111100111100010110011100010110";
        ram[19] = "0b10111101000100110110110011011111";
        ram[20] = "0b10111101111000100110010101101011";
        ram[21] = "0b10111011101110110100111101100001";
        ram[22] = "0b00111101101000011001110001011010";
        ram[23] = "0b10111101111001010100000111011001";
        ram[24] = "0b00111101011001000101000010101101";
        ram[25] = "0b00111100111011100000000111010001";
        ram[26] = "0b00111101111100000111011011000000";
        ram[27] = "0b10111101100011101000010011111110";
        ram[28] = "0b00111101011101001111001000000000";
        ram[29] = "0b00111101111010101100111110110111";
        ram[30] = "0b00111100110000001001100110000011";
        ram[31] = "0b10111110000101101101101101010001";
        ram[32] = "0b00111110010000010001101110100100";
        ram[33] = "0b00111110000101101010111110001010";
        ram[34] = "0b00111110000011000001101000000101";
        ram[35] = "0b00111101101001101000100011011001";
        ram[36] = "0b00111101010101011001111100000011";
        ram[37] = "0b10111100100000000111010100111011";
        ram[38] = "0b10111101100000111111101100101010";
        ram[39] = "0b00111101110110000011111110010010";
        ram[40] = "0b10111101101101010000101110010101";
        ram[41] = "0b10111110010100000101000001111010";
        ram[42] = "0b10111101110000011101001111111011";
        ram[43] = "0b00111110000001001100100110000110";
        ram[44] = "0b00111100010011000100111011111001";
        ram[45] = "0b10111101100010101011110100101000";
        ram[46] = "0b10111101100011100001101001001101";
        ram[47] = "0b10111101011101011111100110110111";
        ram[48] = "0b00111101101011110111100001011110";
        ram[49] = "0b10111101100111101010111010000100";
        ram[50] = "0b00111110000100100001000111001011";
        ram[51] = "0b00111100011010000110011000011011";
        ram[52] = "0b10111110010000111000011000001010";
        ram[53] = "0b00111101011110001100100100001010";
        ram[54] = "0b10111101111101011010010100110011";
        ram[55] = "0b00111101101001001011110110111010";
        ram[56] = "0b00111101110110001101001001011111";
        ram[57] = "0b00111101101111101101110111001110";
        ram[58] = "0b00111101001110011000111001000110";
        ram[59] = "0b10111101101001101110010001110000";
        ram[60] = "0b00111100100011110110011011011011";
        ram[61] = "0b00111100011010111011110001111100";
        ram[62] = "0b00111101101001011001001100101010";
        ram[63] = "0b10111110001110001000101101010100";
        ram[64] = "0b10111101110011001101010000100100";
        ram[65] = "0b10111101101101100010011000000100";
        ram[66] = "0b00111110000011101110000110111101";
        ram[67] = "0b10111110000111000010110100101000";
        ram[68] = "0b00111101100111100010111111100110";
        ram[69] = "0b00111101101110110000110111110011";
        ram[70] = "0b10111100011010011010111111000111";
        ram[71] = "0b00111011001100100110010000010110";
        ram[72] = "0b00111100111111111101111110110100";
        ram[73] = "0b10111100011100001111000111011011";
        ram[74] = "0b10111110000101001010010001001100";
        ram[75] = "0b10111101001011110100011101001011";
        ram[76] = "0b00111110000101111001111110101001";
        ram[77] = "0b00111110000010010101000111000110";
        ram[78] = "0b00111101110110000101110001101000";
        ram[79] = "0b10111101101111101101001011100111";
        ram[80] = "0b00111110001110011010111001001111";
        ram[81] = "0b00111100001001011011101000111001";
        ram[82] = "0b10111101110010101001100110001111";
        ram[83] = "0b00111100001101101100111110100000";
        ram[84] = "0b00111110000110110010000011111011";
        ram[85] = "0b00111100010010101101110000110010";
        ram[86] = "0b00111100000000001011000010101010";
        ram[87] = "0b10111101001000011010000001001001";
        ram[88] = "0b10111100000010110000010011101100";
        ram[89] = "0b10111101101000011101010001001011";
        ram[90] = "0b00111101010000000000110011001011";
        ram[91] = "0b10111101100011011011100101001110";
        ram[92] = "0b10111101011111101101010110101110";
        ram[93] = "0b00111110000000111100000000111100";
        ram[94] = "0b00111101000011101111111001101011";
        ram[95] = "0b00111110000011101010000011111101";
        ram[96] = "0b00111110001010111000000000100100";
        ram[97] = "0b10111101111110000111111100000010";
        ram[98] = "0b10111101000101010110110111010110";
        ram[99] = "0b10111110000010011111101100011110";
        ram[100] = "0b10111101100011100111100010101100";
        ram[101] = "0b00111101000100001001010000011101";
        ram[102] = "0b00111101100011000010011100000101";
        ram[103] = "0b10111110010101100100101100100011";
        ram[104] = "0b00111110100000100000011001100100";
        ram[105] = "0b00111100100111100111101010101010";
        ram[106] = "0b10111101010111000001000001101100";
        ram[107] = "0b00111101100001001100001101100100";
        ram[108] = "0b10111101100100100010100111000001";
        ram[109] = "0b10111101101001011110000001110010";
        ram[110] = "0b00111101011101110111101111101000";
        ram[111] = "0b10111011011100011101111001010100";
        ram[112] = "0b10111101011101010110000111111100";
        ram[113] = "0b10111101101001010111011111110100";
        ram[114] = "0b00111011100011101001001110000001";
        ram[115] = "0b00111110001111011101010100001011";
        ram[116] = "0b00111100001100000110010110001110";
        ram[117] = "0b10111100111001100101111111100110";
        ram[118] = "0b00111101000001011011111000000000";
        ram[119] = "0b00111101111100000100101100111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_10) {
meminst = new inference_conv2d_f3_3_3_10_ram("inference_conv2d_f3_3_3_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_10() {
    delete meminst;
}


};//endmodule
#endif
