// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_13_H__
#define __inference_mult_1_120_120_84_s_W4_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_13_ram) {
        ram[0] = "0b10111110011010011100101101101000";
        ram[1] = "0b00111101101001100011101111000110";
        ram[2] = "0b00111101110110011111001000110100";
        ram[3] = "0b00111101001010101000111111000001";
        ram[4] = "0b10111101110111000111000011001010";
        ram[5] = "0b10111101100100011111001100011111";
        ram[6] = "0b10111101011011111001000111011001";
        ram[7] = "0b00111101110110010100000110000101";
        ram[8] = "0b10111101001011101111001100011000";
        ram[9] = "0b00111101011001101010111000000101";
        ram[10] = "0b00111101100110011000110110100101";
        ram[11] = "0b10111101101101100010110101011100";
        ram[12] = "0b00111101111011000010011110100110";
        ram[13] = "0b10111100011100110101110010000100";
        ram[14] = "0b00111101011111001000001100111110";
        ram[15] = "0b10111101110110110000000000110111";
        ram[16] = "0b10111101001011000011011111001100";
        ram[17] = "0b10111101101101100101010111111101";
        ram[18] = "0b10111101100001101010100011101111";
        ram[19] = "0b00111101101110111000101000011010";
        ram[20] = "0b10111100010101100111111111010100";
        ram[21] = "0b10111110000000001001011001111000";
        ram[22] = "0b10111101001100100001111110111101";
        ram[23] = "0b00111100101101011011110100011011";
        ram[24] = "0b00111110000101101100000000001110";
        ram[25] = "0b00111100110101101100100101110000";
        ram[26] = "0b00111101011000110011101110001001";
        ram[27] = "0b00111110010000010101101000001000";
        ram[28] = "0b10111100001000111010110101111001";
        ram[29] = "0b00111101001010110100111110100101";
        ram[30] = "0b00111101111010110111001101001011";
        ram[31] = "0b00111110100000001001000010110100";
        ram[32] = "0b10111100110010001000110000101011";
        ram[33] = "0b10111110000010001101100100110000";
        ram[34] = "0b10111101100010101101101111100001";
        ram[35] = "0b00111110001000111010001111101100";
        ram[36] = "0b10111011010101000011010100100001";
        ram[37] = "0b00111100110011000011101111100011";
        ram[38] = "0b10111101110001101010100010010001";
        ram[39] = "0b00111110001100101000000110111010";
        ram[40] = "0b00111000101011101011011100110011";
        ram[41] = "0b10111101101001100001110110111100";
        ram[42] = "0b00111101001001110100001001001001";
        ram[43] = "0b10111110011100001101000111111010";
        ram[44] = "0b00111110000011001100000010111110";
        ram[45] = "0b00111101100110000100111110101010";
        ram[46] = "0b10111100101000111001001001110111";
        ram[47] = "0b10111100101111101010011101110000";
        ram[48] = "0b10111101011100001000011000001111";
        ram[49] = "0b10111101101010110101101001110001";
        ram[50] = "0b10111101110000011101010010110111";
        ram[51] = "0b10111101110000111011110110111000";
        ram[52] = "0b10111110001110010000011110010110";
        ram[53] = "0b10111100100000111101110010011001";
        ram[54] = "0b10111011111001000000100100010100";
        ram[55] = "0b10111101101101111001001011011111";
        ram[56] = "0b00111110001010000100110010101101";
        ram[57] = "0b00111101110001110000110000111011";
        ram[58] = "0b10111110000011001001100000011100";
        ram[59] = "0b10111100110110100001010110001011";
        ram[60] = "0b10111101010000010111000010101110";
        ram[61] = "0b00111101101000011100110111001011";
        ram[62] = "0b10111100101101101001110010101010";
        ram[63] = "0b10111101100101001111111000011100";
        ram[64] = "0b00111110010100101001100110010101";
        ram[65] = "0b10111110000000010011011100101010";
        ram[66] = "0b10111010101011001100111111010111";
        ram[67] = "0b10111100100001111010101010111001";
        ram[68] = "0b10111101001000000111101010010100";
        ram[69] = "0b10111101100110100000101111100101";
        ram[70] = "0b10111110011010100011110011101010";
        ram[71] = "0b00111101111000101000110010111101";
        ram[72] = "0b10111101110000100010101110010111";
        ram[73] = "0b00111100100010001010010100100000";
        ram[74] = "0b00111110001001101100010010000010";
        ram[75] = "0b00111101001001111000101000111000";
        ram[76] = "0b10111110101000000001111010001010";
        ram[77] = "0b10111101100111001010100100110011";
        ram[78] = "0b10111100010011110101000101110111";
        ram[79] = "0b10111110010000010010100100000010";
        ram[80] = "0b00111100100011100001101110110111";
        ram[81] = "0b00111101100000101010101100001011";
        ram[82] = "0b00111101000001110000100111000101";
        ram[83] = "0b10111101111111100111001000010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_13_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_13) {
meminst = new inference_mult_1_120_120_84_s_W4_13_ram("inference_mult_1_120_120_84_s_W4_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_13() {
    delete meminst;
}


};//endmodule
#endif
