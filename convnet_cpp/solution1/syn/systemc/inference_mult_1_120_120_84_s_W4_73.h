// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_73_H__
#define __inference_mult_1_120_120_84_s_W4_73_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_73_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_73_ram) {
        ram[0] = "0b00111101111110011000001110010100";
        ram[1] = "0b10111101100111001011000000000100";
        ram[2] = "0b10111110000010000011011100101110";
        ram[3] = "0b00111101010100010000111101010010";
        ram[4] = "0b00111101100010001100010101010001";
        ram[5] = "0b10111100001010011110000010100100";
        ram[6] = "0b10111110000010000111111010111111";
        ram[7] = "0b10111101110101000110000100110001";
        ram[8] = "0b10111101001110110011010101000101";
        ram[9] = "0b00111011001110110101000000100011";
        ram[10] = "0b10111101111001011011110110010100";
        ram[11] = "0b10111101100100001001001110100100";
        ram[12] = "0b00111110000101000001001001001001";
        ram[13] = "0b10111101001101001011111111100000";
        ram[14] = "0b10111011000110100011010001001001";
        ram[15] = "0b10111100010101000001011011011001";
        ram[16] = "0b00111101111011101101111101100001";
        ram[17] = "0b00111101101110111111111011001111";
        ram[18] = "0b10111101001101100001010110000001";
        ram[19] = "0b10111110000000100110101001100110";
        ram[20] = "0b10111100100010001001111000110100";
        ram[21] = "0b10111101110001000000110111100001";
        ram[22] = "0b00111100100000011010111100101101";
        ram[23] = "0b10111101100000010110101111101001";
        ram[24] = "0b00111011100111110100001010100110";
        ram[25] = "0b00111101100100111001001100100101";
        ram[26] = "0b00111100001011011000010100001001";
        ram[27] = "0b00111101110000100111101111101001";
        ram[28] = "0b00111011000011011111101011010101";
        ram[29] = "0b00111101100100100000000101111101";
        ram[30] = "0b00111101101001100001111000001100";
        ram[31] = "0b00111101011001001010000000101000";
        ram[32] = "0b10111101110111000000101100010011";
        ram[33] = "0b10111101011111010101100110010010";
        ram[34] = "0b10111101101101100000100111011101";
        ram[35] = "0b10111101010001010111001101110010";
        ram[36] = "0b00111101100111001001101010101110";
        ram[37] = "0b10111101001101100001010101100110";
        ram[38] = "0b10111110000000001000111110101000";
        ram[39] = "0b00111100010010101110111101111101";
        ram[40] = "0b00111101100111111110110001100100";
        ram[41] = "0b10111101001011110000111100010111";
        ram[42] = "0b00111101101111001100001010111100";
        ram[43] = "0b10111101000010011110110101010100";
        ram[44] = "0b10111011110101011000101101100010";
        ram[45] = "0b10111101100000100111101000101110";
        ram[46] = "0b10111101010001110101010100101001";
        ram[47] = "0b10111100001110001000000001111010";
        ram[48] = "0b10111101101101111110110010111011";
        ram[49] = "0b00111110001111111111010110000100";
        ram[50] = "0b10111101000111001100111001010010";
        ram[51] = "0b00111110001111101011001100010100";
        ram[52] = "0b10111101000111100001100010000100";
        ram[53] = "0b00111101101100010010000011000111";
        ram[54] = "0b10111101100110010110011001010011";
        ram[55] = "0b00111110000011000110010110000100";
        ram[56] = "0b10111101100011111110010111111111";
        ram[57] = "0b00111101110101100001110111001001";
        ram[58] = "0b00111110000011010101000101110010";
        ram[59] = "0b00111011001101111000000100001011";
        ram[60] = "0b10111101101001111001101010000110";
        ram[61] = "0b00111101110001101001100101011100";
        ram[62] = "0b00111101000111101010110000001101";
        ram[63] = "0b10111101101000110110110001011001";
        ram[64] = "0b00111101100000111100110100000111";
        ram[65] = "0b00111101000011011011111101010110";
        ram[66] = "0b00111100010000110000110011000101";
        ram[67] = "0b10111100000111000100101010100100";
        ram[68] = "0b10111101111010101000110100100010";
        ram[69] = "0b00111110000101011000100110101101";
        ram[70] = "0b00111110000110010101101001101100";
        ram[71] = "0b00111110010110100010000000010100";
        ram[72] = "0b00111101011001010101110101010010";
        ram[73] = "0b00111110000010011101011000101000";
        ram[74] = "0b10111110001010100111010110001010";
        ram[75] = "0b10111101101001101010011001101010";
        ram[76] = "0b10111110001010001000001000101000";
        ram[77] = "0b00111101100001100100010100000001";
        ram[78] = "0b00111101101100000100001101010010";
        ram[79] = "0b00111101101110100110011011011100";
        ram[80] = "0b10111011001001001111110000100011";
        ram[81] = "0b10111100111110010110100001101100";
        ram[82] = "0b00111101000100110110101001000000";
        ram[83] = "0b00111101110000111000000001000101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_73) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_73_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_73) {
meminst = new inference_mult_1_120_120_84_s_W4_73_ram("inference_mult_1_120_120_84_s_W4_73_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_73() {
    delete meminst;
}


};//endmodule
#endif
