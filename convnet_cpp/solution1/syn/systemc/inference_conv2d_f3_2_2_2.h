// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_2_H__
#define __inference_conv2d_f3_2_2_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_2_ram) {
        ram[0] = "0b00111110000010111010010011010111";
        ram[1] = "0b00111110000011101110101000100001";
        ram[2] = "0b10111101100001110010101100111000";
        ram[3] = "0b10111100100000111111111100110011";
        ram[4] = "0b00111100111111110111010011000000";
        ram[5] = "0b10111101010101101011011010010000";
        ram[6] = "0b00111101111001101001100000110101";
        ram[7] = "0b00111101111011111101100011110001";
        ram[8] = "0b00111100100100111010110000011010";
        ram[9] = "0b00111101001001111000110111111110";
        ram[10] = "0b00111100001000111101010000011011";
        ram[11] = "0b10111101000010111101011001100010";
        ram[12] = "0b10111011100111101100100011000011";
        ram[13] = "0b10111100101000100111000110101111";
        ram[14] = "0b00111011111110110010110111001001";
        ram[15] = "0b10111101111000100001100101100101";
        ram[16] = "0b10111101100110000111001101011111";
        ram[17] = "0b00111110000000110011110100101001";
        ram[18] = "0b00111100111001111001011001000111";
        ram[19] = "0b00111110000000011100110000010000";
        ram[20] = "0b10111101100001011101111110001110";
        ram[21] = "0b00111101110100010000111101010010";
        ram[22] = "0b00111110001100100001110100010001";
        ram[23] = "0b10111110000001101100111011111111";
        ram[24] = "0b10111100010011100010010001010000";
        ram[25] = "0b10111101100100111100000000111100";
        ram[26] = "0b00111101101110000000110000001000";
        ram[27] = "0b10111100001000000000011000011010";
        ram[28] = "0b10111100010000010101100101100111";
        ram[29] = "0b00111100010111001100100001011000";
        ram[30] = "0b00111101110010100000100011110101";
        ram[31] = "0b00111101100110010000011111001100";
        ram[32] = "0b00111101001100101011100110101100";
        ram[33] = "0b10111101011101010101101011110110";
        ram[34] = "0b00111101110101011011111011100100";
        ram[35] = "0b00111101011111110101011111001111";
        ram[36] = "0b10111101010000010001111111110000";
        ram[37] = "0b10111100101101000110111100001000";
        ram[38] = "0b10111110000000111111111001011101";
        ram[39] = "0b00111110001110000110011100100111";
        ram[40] = "0b10111110000101010110111101110110";
        ram[41] = "0b10111100001110110010110111010011";
        ram[42] = "0b10111101101110000100010110100111";
        ram[43] = "0b10111101110000011000000101110101";
        ram[44] = "0b00111101010100001000111011000011";
        ram[45] = "0b10111100101110100011101010001110";
        ram[46] = "0b10111101110000110101100110000111";
        ram[47] = "0b00111101100111101110001011001010";
        ram[48] = "0b00111101100000001110010100111000";
        ram[49] = "0b00111101100000011111101010101100";
        ram[50] = "0b00111101101010001001111011001000";
        ram[51] = "0b00111101000011001111000110011011";
        ram[52] = "0b00111100011010010110100101010000";
        ram[53] = "0b10111100010111101110101110110011";
        ram[54] = "0b10111101011100100010111101111000";
        ram[55] = "0b00111101010001101100000110100000";
        ram[56] = "0b10111101100110001111101010010101";
        ram[57] = "0b00111101110100011100111000101001";
        ram[58] = "0b00111100111100101001000010101100";
        ram[59] = "0b10111101101011001000010110001101";
        ram[60] = "0b00111101100111100010001000101010";
        ram[61] = "0b00111101110001001010101010111111";
        ram[62] = "0b10111010000010010000011010011100";
        ram[63] = "0b00111101100001010010000110011011";
        ram[64] = "0b00111110001000111111001001001110";
        ram[65] = "0b00111110001100110011011011011111";
        ram[66] = "0b10111101100100110101010111011011";
        ram[67] = "0b00111101001001011001011101101001";
        ram[68] = "0b00111100011100010100111000100001";
        ram[69] = "0b00111000010100101101101010000001";
        ram[70] = "0b00111100010111101001001001011101";
        ram[71] = "0b00111011000100100110101001010000";
        ram[72] = "0b10111101010111110110010110001011";
        ram[73] = "0b10111101001111110100011101110011";
        ram[74] = "0b10111101111101100010000001101000";
        ram[75] = "0b10111101110001111001100110101111";
        ram[76] = "0b00111100010100101010000110001110";
        ram[77] = "0b00111101010110000111001110101111";
        ram[78] = "0b10111100100001000001011101010001";
        ram[79] = "0b10111110000011011100001100110111";
        ram[80] = "0b00111010110101101101110011000110";
        ram[81] = "0b10111101000111111010111100101000";
        ram[82] = "0b10111110010100011001110101100111";
        ram[83] = "0b00111101111101010000011001010111";
        ram[84] = "0b00111100100011001100101001111110";
        ram[85] = "0b00111011110011111000110101000110";
        ram[86] = "0b00111110001000101101110011110100";
        ram[87] = "0b00111110000111110010001000111010";
        ram[88] = "0b00111100101110111000010101111101";
        ram[89] = "0b10111100111010001110010011111100";
        ram[90] = "0b10111101001101111010011000101010";
        ram[91] = "0b10111100111000011011111110100011";
        ram[92] = "0b00111101100010100011110001111111";
        ram[93] = "0b10111110000001010011000000000110";
        ram[94] = "0b10111011001001000010100000010011";
        ram[95] = "0b00111100111110101110110110100111";
        ram[96] = "0b00111101001110100100101111000001";
        ram[97] = "0b00111101110000110111000000111010";
        ram[98] = "0b10111100010110110111010010011011";
        ram[99] = "0b00111101011100100100010101100010";
        ram[100] = "0b10111100100001010101000111100100";
        ram[101] = "0b00111101100111110011101101100100";
        ram[102] = "0b00111101110000001110111010000000";
        ram[103] = "0b10111101011110110100110001010111";
        ram[104] = "0b10111100110111110010001000111010";
        ram[105] = "0b10111101110101001101001101111100";
        ram[106] = "0b00111110000011111000000110100110";
        ram[107] = "0b10111101000100100011000000011001";
        ram[108] = "0b00111101100010110001000010010010";
        ram[109] = "0b10111110001000110101101001000010";
        ram[110] = "0b10111100100010000100000111101110";
        ram[111] = "0b00111101000011001001111010101010";
        ram[112] = "0b00111100101001000010010010100010";
        ram[113] = "0b00111101101101011001010110101110";
        ram[114] = "0b10111101100110001100111110110010";
        ram[115] = "0b00111101100001101101110111010101";
        ram[116] = "0b00111110001111100100100110110010";
        ram[117] = "0b10111101101100011110110100100101";
        ram[118] = "0b10111101100000101001010001110010";
        ram[119] = "0b00111110000000010001100110001011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_2) {
meminst = new inference_conv2d_f3_2_2_2_ram("inference_conv2d_f3_2_2_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_2() {
    delete meminst;
}


};//endmodule
#endif
