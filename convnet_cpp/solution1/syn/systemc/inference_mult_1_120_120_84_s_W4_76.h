// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_76_H__
#define __inference_mult_1_120_120_84_s_W4_76_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_76_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_76_ram) {
        ram[0] = "0b10111110000111011011110011101101";
        ram[1] = "0b10111100111111001101010001100111";
        ram[2] = "0b00111100010001111110001011101110";
        ram[3] = "0b00111101001111000001010011010100";
        ram[4] = "0b00111100100010010000001011011110";
        ram[5] = "0b10111101101111010100110001011100";
        ram[6] = "0b00111100111111001110111110101010";
        ram[7] = "0b00111011101110000110111011110010";
        ram[8] = "0b10111100100100000000000100110101";
        ram[9] = "0b10111101000000101111011000111010";
        ram[10] = "0b00111101110110011011101100101000";
        ram[11] = "0b00111110000011111010100010110101";
        ram[12] = "0b00111101111010101111100110101001";
        ram[13] = "0b00111101100000111101101111011101";
        ram[14] = "0b10111110010100011000010110001100";
        ram[15] = "0b00111101000010011011111000100101";
        ram[16] = "0b10111101000001011010010011110000";
        ram[17] = "0b10111101110000010010000110000011";
        ram[18] = "0b10111101000100001100010011000100";
        ram[19] = "0b00111101011000100110001110100010";
        ram[20] = "0b10111110011010011110110101111100";
        ram[21] = "0b00111101111111001000110110100000";
        ram[22] = "0b00111101111000111011010011110110";
        ram[23] = "0b00111100001001011110101000001010";
        ram[24] = "0b10111101011111010110111100010001";
        ram[25] = "0b10111110000000000011000011000010";
        ram[26] = "0b00111101101110100101101000111001";
        ram[27] = "0b10111100110111011000011011111010";
        ram[28] = "0b00111110000111100110011000000010";
        ram[29] = "0b10111101000100011101101101000100";
        ram[30] = "0b10111110001101110010011101010111";
        ram[31] = "0b10111110000101001010001111000110";
        ram[32] = "0b00111101101000001011100111000001";
        ram[33] = "0b10111101011100001100010010001110";
        ram[34] = "0b10111110000000000101100100100001";
        ram[35] = "0b10111101101000000110110000001110";
        ram[36] = "0b10111110000001010010111001110011";
        ram[37] = "0b10111100110010100000100101101110";
        ram[38] = "0b10111101001101011000010001000110";
        ram[39] = "0b10111100110010100101000101011101";
        ram[40] = "0b00111101000011000011001011011110";
        ram[41] = "0b00111100101110110011010010001001";
        ram[42] = "0b10111101001101010111111001100111";
        ram[43] = "0b00111110000000011000000010010001";
        ram[44] = "0b00111110000000110100011010011001";
        ram[45] = "0b10111110000001001011000010011111";
        ram[46] = "0b00111101010101001000001100001111";
        ram[47] = "0b10111100011111101100011100011011";
        ram[48] = "0b00111101110111011101000010010110";
        ram[49] = "0b00111100011100101111111011111011";
        ram[50] = "0b00111101111010101011100010100110";
        ram[51] = "0b10111101011000110111100101001100";
        ram[52] = "0b10111101111111110010000000100001";
        ram[53] = "0b00111100100100000101010101001101";
        ram[54] = "0b00111100000101101110001011110000";
        ram[55] = "0b10111110001001111010100000001101";
        ram[56] = "0b10111100110010000011010111000100";
        ram[57] = "0b00111011111011100111101000110001";
        ram[58] = "0b00111101101000110001101110000001";
        ram[59] = "0b10111110000100000011001101100001";
        ram[60] = "0b10111110000111100101011000000100";
        ram[61] = "0b00111110000110010101001001001100";
        ram[62] = "0b00111101100111000111000110111011";
        ram[63] = "0b00111101101011101000110110111111";
        ram[64] = "0b10111100010100010000011101011010";
        ram[65] = "0b10111101100011011110011110110101";
        ram[66] = "0b00111101111111110100101100011111";
        ram[67] = "0b10111110000001001101011100101000";
        ram[68] = "0b00111101000101000010011001111000";
        ram[69] = "0b00111110010101110101101001110101";
        ram[70] = "0b00111101100111001000010110100111";
        ram[71] = "0b10111100111011111000000000100000";
        ram[72] = "0b00111100110111111000000110100110";
        ram[73] = "0b00111101011010011011101011001010";
        ram[74] = "0b10111100100011000110000100000010";
        ram[75] = "0b10111100111000100000001010001001";
        ram[76] = "0b10111110000110001010101100001101";
        ram[77] = "0b10111101101001101000111110001110";
        ram[78] = "0b10111101001000111101100011101101";
        ram[79] = "0b10111011110000001111011110101100";
        ram[80] = "0b10111010110111010011011000100111";
        ram[81] = "0b10111101000101110110110101101111";
        ram[82] = "0b10111101110110101000100000100111";
        ram[83] = "0b00111101011011011101000110010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_76) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_76_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_76) {
meminst = new inference_mult_1_120_120_84_s_W4_76_ram("inference_mult_1_120_120_84_s_W4_76_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_76() {
    delete meminst;
}


};//endmodule
#endif
