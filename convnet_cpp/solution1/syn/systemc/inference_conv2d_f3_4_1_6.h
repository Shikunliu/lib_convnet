// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_6_H__
#define __inference_conv2d_f3_4_1_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_6_ram) {
        ram[0] = "0b00111101000101011110110001001011";
        ram[1] = "0b10111100011001110110010111010101";
        ram[2] = "0b00111101100001100100000111000001";
        ram[3] = "0b00111101000011111101100001010000";
        ram[4] = "0b00111000101010011010101100111000";
        ram[5] = "0b00111110000011001000100001100001";
        ram[6] = "0b00111101101111111111011111101101";
        ram[7] = "0b10111101011011101110101000101110";
        ram[8] = "0b10111110001011101001000000110110";
        ram[9] = "0b00111101101110010011110111011001";
        ram[10] = "0b10111101101100000101111101011110";
        ram[11] = "0b00111101000110100010111010110101";
        ram[12] = "0b00111101010000010001111010010011";
        ram[13] = "0b10111101010011110111100100110101";
        ram[14] = "0b10111100111010100001111110001110";
        ram[15] = "0b10111100111111101101000111001101";
        ram[16] = "0b00111101000100110100111110111001";
        ram[17] = "0b00111110010011110110100000111000";
        ram[18] = "0b00111101000110101010001100110100";
        ram[19] = "0b00111101100000001000111000110000";
        ram[20] = "0b10111100111111010110001010010111";
        ram[21] = "0b00111101110001101111100010101101";
        ram[22] = "0b00111101011001000100101001111101";
        ram[23] = "0b00111110100001010000101111111010";
        ram[24] = "0b00111100110011101010110000110101";
        ram[25] = "0b10111100101101011110000010001101";
        ram[26] = "0b00111110010100010011100101000011";
        ram[27] = "0b10111101100111011111011110110010";
        ram[28] = "0b00111110001101010100011101011010";
        ram[29] = "0b10111101110101101111010010111111";
        ram[30] = "0b00111101110011011100111111001100";
        ram[31] = "0b00111101001110001001100110111111";
        ram[32] = "0b00111011100110000110111100001101";
        ram[33] = "0b00111101110111011000011010101001";
        ram[34] = "0b00111101100101011101001000100010";
        ram[35] = "0b00111101001011010001100000110001";
        ram[36] = "0b00111011000100001110010100010101";
        ram[37] = "0b00111100011100101001010001110010";
        ram[38] = "0b10111101100011111010000001101100";
        ram[39] = "0b00111101100001110100011100011100";
        ram[40] = "0b00111010111010001111011010100100";
        ram[41] = "0b00111101101001101110000111011111";
        ram[42] = "0b10111101001011001101011010001101";
        ram[43] = "0b00111100001101101000100010111110";
        ram[44] = "0b10111110000110000100110110111010";
        ram[45] = "0b10111100110010110011001001100011";
        ram[46] = "0b00111110000111101000010100110100";
        ram[47] = "0b00111101011100001111101110011011";
        ram[48] = "0b10111101111011111011010101001010";
        ram[49] = "0b10111101000001011110110011011111";
        ram[50] = "0b00111101001110011001111101111001";
        ram[51] = "0b10111100101010111000110110111000";
        ram[52] = "0b00111101001011101001100011001111";
        ram[53] = "0b10111110010101000001011110000111";
        ram[54] = "0b10111110010001110011111101110101";
        ram[55] = "0b00111110010100110000100001111000";
        ram[56] = "0b10111101110100111111110110010011";
        ram[57] = "0b10111101001000101010001000100001";
        ram[58] = "0b00111101100101110001000100011100";
        ram[59] = "0b00111110000011100110111001100101";
        ram[60] = "0b10111101100110111011000110111101";
        ram[61] = "0b00111101110100110000010100010000";
        ram[62] = "0b10111110000011011010001011111001";
        ram[63] = "0b10111100100000100010001000011001";
        ram[64] = "0b00111101100010101100011011101001";
        ram[65] = "0b10111101100110010101101010010101";
        ram[66] = "0b10111101111001010111101110000101";
        ram[67] = "0b10111101011101101010101100100010";
        ram[68] = "0b10111100100011011010111000111110";
        ram[69] = "0b10111101111000110010011001011011";
        ram[70] = "0b10111101101001001011001010110111";
        ram[71] = "0b10111110001111011011111101001000";
        ram[72] = "0b10111101011100110111111110111111";
        ram[73] = "0b00111101101101001001101111011100";
        ram[74] = "0b00111101011111100010000110111111";
        ram[75] = "0b00111101010111001010001010011000";
        ram[76] = "0b10111011101011010101111011001000";
        ram[77] = "0b00111101111011101100111110100111";
        ram[78] = "0b00111101100101110011111111111011";
        ram[79] = "0b00111101101010110000000110101110";
        ram[80] = "0b00111101101101101001001111000000";
        ram[81] = "0b00111100100111110100101101010101";
        ram[82] = "0b00111101000010100010101000001011";
        ram[83] = "0b10111101100001000011101001010111";
        ram[84] = "0b00111100010101100011001010100111";
        ram[85] = "0b00111011101111001100011000101111";
        ram[86] = "0b00111110000110011101001000111001";
        ram[87] = "0b00111100001011100110100100110100";
        ram[88] = "0b00111101100101011101011011001100";
        ram[89] = "0b10111101110011100110010100111000";
        ram[90] = "0b10111100100111010110100001011011";
        ram[91] = "0b10111010110010110001000111100010";
        ram[92] = "0b00111101101100100101111000000110";
        ram[93] = "0b00111011001000110101010110110000";
        ram[94] = "0b10111110000101000101101010100011";
        ram[95] = "0b10111101110111111111110111100111";
        ram[96] = "0b10111100100001001011110011001000";
        ram[97] = "0b10111110001010001101100110110110";
        ram[98] = "0b00111100111101111111100000101001";
        ram[99] = "0b10111110000011100010101101001001";
        ram[100] = "0b10111100100011001000110101000010";
        ram[101] = "0b00111101001000101010000111010001";
        ram[102] = "0b10111110000011111011101100001110";
        ram[103] = "0b00111110010001100011000010101001";
        ram[104] = "0b00111110000000101000111001010000";
        ram[105] = "0b00111101111010111101101010010100";
        ram[106] = "0b10111101100000110010011101011010";
        ram[107] = "0b00111101011111001001111100111101";
        ram[108] = "0b00111101111010010000110111100001";
        ram[109] = "0b10111110001000011001110110101010";
        ram[110] = "0b10111101001000000100011011111101";
        ram[111] = "0b10111110010000011001000110011011";
        ram[112] = "0b00111101111010111000101101101001";
        ram[113] = "0b00111101101011110101110000101001";
        ram[114] = "0b10111101101010111000010000101101";
        ram[115] = "0b00111101100101010010110001011010";
        ram[116] = "0b10111100111110000100101001011111";
        ram[117] = "0b10111101101000101110011010001101";
        ram[118] = "0b10111100010000010010100110010110";
        ram[119] = "0b00111100110011101001100100100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_6) {
meminst = new inference_conv2d_f3_4_1_6_ram("inference_conv2d_f3_4_1_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_6() {
    delete meminst;
}


};//endmodule
#endif
