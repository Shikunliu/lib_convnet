// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_41_H__
#define __inference_mult_1_120_120_84_s_W4_41_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_41_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_41_ram) {
        ram[0] = "0b10111011111100001010111110010110";
        ram[1] = "0b10111101101010111111011101011101";
        ram[2] = "0b10111101011101100011101101110110";
        ram[3] = "0b00111101111110000010000100101001";
        ram[4] = "0b00111101100011001000010010000000";
        ram[5] = "0b10111100101011110110001001011001";
        ram[6] = "0b10111101011100011101101000000010";
        ram[7] = "0b00111101011000011111001100111010";
        ram[8] = "0b10111110000011110000101101101011";
        ram[9] = "0b10111110011000011010001100101011";
        ram[10] = "0b10111100011101111110001000100100";
        ram[11] = "0b00111100111110010100111111100011";
        ram[12] = "0b10111100110011011000011001100110";
        ram[13] = "0b00111110000000110010001110111100";
        ram[14] = "0b00111101111010011000111101100000";
        ram[15] = "0b00111101100011100111011000101000";
        ram[16] = "0b00111100111101101000011000000100";
        ram[17] = "0b10111101101001111101000011010111";
        ram[18] = "0b10111101101001011010111010001000";
        ram[19] = "0b10111110001110101110001110100100";
        ram[20] = "0b10111101110111111000010001000101";
        ram[21] = "0b00111101010010001111110111110000";
        ram[22] = "0b10111110001000001010111011011010";
        ram[23] = "0b00111101101101100111011001010111";
        ram[24] = "0b00111110010101011110110100000111";
        ram[25] = "0b10111101111110110001000001110111";
        ram[26] = "0b10111110011101011100100010010111";
        ram[27] = "0b10111101110111110010110010110110";
        ram[28] = "0b10111101110010101100011111011010";
        ram[29] = "0b00111101010100100001100100111101";
        ram[30] = "0b00111110011011010001011010111001";
        ram[31] = "0b10111101010110010110011001101110";
        ram[32] = "0b00111011100001000001010001001100";
        ram[33] = "0b10111100110110100001100110000111";
        ram[34] = "0b00111110000100111011001011011101";
        ram[35] = "0b00111101110100000001101100000000";
        ram[36] = "0b10111101011010011111000001011111";
        ram[37] = "0b00111100010010101001100010101011";
        ram[38] = "0b10111110000001101110000001001100";
        ram[39] = "0b00111110000100101001000110111000";
        ram[40] = "0b00111101001100110111010011010111";
        ram[41] = "0b00111101001001101110100111111111";
        ram[42] = "0b10111101110001111110001010101011";
        ram[43] = "0b10111101000000110100010011000011";
        ram[44] = "0b10111101111001110110100001011010";
        ram[45] = "0b10111110000100111000110010010111";
        ram[46] = "0b00111101000110110000100011010000";
        ram[47] = "0b00111101010100101010011011100111";
        ram[48] = "0b00111101011110001001100000101101";
        ram[49] = "0b10111100101001001001001000011011";
        ram[50] = "0b10111110000001110010000010000110";
        ram[51] = "0b10111110000111000111110001010010";
        ram[52] = "0b10111100110100101101111010010100";
        ram[53] = "0b00111101111000111111111011100011";
        ram[54] = "0b10111101010001111111100111001010";
        ram[55] = "0b10111110000100101100001010111101";
        ram[56] = "0b00111101101101110011010010001101";
        ram[57] = "0b10111101000011111100101001000011";
        ram[58] = "0b00111110001101010011100110111001";
        ram[59] = "0b00111101000101110100100000011011";
        ram[60] = "0b10111101010111011001001111011111";
        ram[61] = "0b10111101000111101010101011100110";
        ram[62] = "0b00111101011011000011001111010000";
        ram[63] = "0b00111101101001000011110000000101";
        ram[64] = "0b10111101111111001111010111110101";
        ram[65] = "0b00111100110101111001010001110001";
        ram[66] = "0b10111101100000110001111000111010";
        ram[67] = "0b10111011000100010001000100001010";
        ram[68] = "0b00111110010100100110110111001110";
        ram[69] = "0b00111101100011011111110000011010";
        ram[70] = "0b10111110010011101000000010111111";
        ram[71] = "0b00111101101000000100000110010111";
        ram[72] = "0b00111110000000100010110101010001";
        ram[73] = "0b10111101010110001001011001100100";
        ram[74] = "0b10111101001010101101110100100011";
        ram[75] = "0b10111100110100000000010010010000";
        ram[76] = "0b00111110011010111010010110100000";
        ram[77] = "0b10111101001011011101001100001101";
        ram[78] = "0b00111101010111100000010011001110";
        ram[79] = "0b10111110000101011111101000100010";
        ram[80] = "0b10111101011010100110111011010100";
        ram[81] = "0b00111101110111001101100110100101";
        ram[82] = "0b10111101111001111110000001101001";
        ram[83] = "0b10111100010001011100101101010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_41) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_41_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_41) {
meminst = new inference_mult_1_120_120_84_s_W4_41_ram("inference_mult_1_120_120_84_s_W4_41_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_41() {
    delete meminst;
}


};//endmodule
#endif
