// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_4_H__
#define __inference_conv2d_f3_3_4_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_4_ram) {
        ram[0] = "0b10111101110100100100011111001011";
        ram[1] = "0b00111100100000001101000110110111";
        ram[2] = "0b10111101111010000111111010111111";
        ram[3] = "0b10111101100010000110100010000100";
        ram[4] = "0b10111010100111110001100110110110";
        ram[5] = "0b10111110000001011011100011011100";
        ram[6] = "0b00111100000101100011100100100111";
        ram[7] = "0b10111101100001111101111011111111";
        ram[8] = "0b00111101010111000000001110000111";
        ram[9] = "0b10111101111001001111111000110111";
        ram[10] = "0b00111010100100101011001111001100";
        ram[11] = "0b10111101100101010100000100010000";
        ram[12] = "0b10111101111010001010100010110001";
        ram[13] = "0b10111110010100010110001000101000";
        ram[14] = "0b00111101100101111101100001111111";
        ram[15] = "0b00111101100101011011011101100101";
        ram[16] = "0b00111101110001111111001101111111";
        ram[17] = "0b10111101010010011101100001000001";
        ram[18] = "0b00111110001100101100001001111010";
        ram[19] = "0b10111101100111101111010011101101";
        ram[20] = "0b00111101111110001000000100011011";
        ram[21] = "0b00111101111011111010100000101111";
        ram[22] = "0b10111101100110000010110101101110";
        ram[23] = "0b00111110000011011110100000101101";
        ram[24] = "0b10111110000000111011001110100111";
        ram[25] = "0b00111101010001000001100011100100";
        ram[26] = "0b00111100011111100000110011100001";
        ram[27] = "0b00111110010000011110000000111111";
        ram[28] = "0b10111101100000110011111001111001";
        ram[29] = "0b10111100100011110101011111110111";
        ram[30] = "0b10111101110101101001111101001001";
        ram[31] = "0b00111100010100000000100001010110";
        ram[32] = "0b00111010100000100101101010010110";
        ram[33] = "0b00111101001111001010111111101001";
        ram[34] = "0b00111110000101111011001100010000";
        ram[35] = "0b10111101101011111010111001011110";
        ram[36] = "0b00111100111011011101111001100000";
        ram[37] = "0b00111100111100010001010101001100";
        ram[38] = "0b10111100011001110000000100101011";
        ram[39] = "0b00111101110000110011101001111101";
        ram[40] = "0b00111110000101000111111000000111";
        ram[41] = "0b00111101000110100101110110010100";
        ram[42] = "0b10111100111000101111001110110101";
        ram[43] = "0b00111101010101000101000111111100";
        ram[44] = "0b00111101100000100011011011011100";
        ram[45] = "0b00111101100110111001001110100101";
        ram[46] = "0b00111110001100011100010011111100";
        ram[47] = "0b10111101000011110011000010001010";
        ram[48] = "0b00111101100100010110010010011111";
        ram[49] = "0b10111101100010111111110011000011";
        ram[50] = "0b10111101100101000110010010011001";
        ram[51] = "0b00111110000010000010110000101100";
        ram[52] = "0b10111101100001110101101110101001";
        ram[53] = "0b10111101110100010111011110100111";
        ram[54] = "0b10111101001110111011010111010100";
        ram[55] = "0b10111110000100111010100000011110";
        ram[56] = "0b00111101100000101010110011000110";
        ram[57] = "0b10111101000011011100110000100001";
        ram[58] = "0b00111101000010111111110010001110";
        ram[59] = "0b00111011101110001100011010000110";
        ram[60] = "0b10111101110011101110011010111000";
        ram[61] = "0b00111110000100001011111100011010";
        ram[62] = "0b00111101101100010110111110101111";
        ram[63] = "0b00111100111100100010101111001100";
        ram[64] = "0b10111100100101110001010110010001";
        ram[65] = "0b10111101111011011100010001000100";
        ram[66] = "0b00111101010000100011100101100000";
        ram[67] = "0b00111101001010100111101100011001";
        ram[68] = "0b00111011111110111111100011001010";
        ram[69] = "0b10111110000000100010111000011011";
        ram[70] = "0b00111100000011011011001000111010";
        ram[71] = "0b00111101111110100111001000100010";
        ram[72] = "0b10111101010001000011010011001000";
        ram[73] = "0b00111110000110001001100000101101";
        ram[74] = "0b10111101111110111001111100010010";
        ram[75] = "0b00111101110011000001011011111010";
        ram[76] = "0b00111101100100010110101100111010";
        ram[77] = "0b00111101110000010111001101011010";
        ram[78] = "0b10111110001010110111100001000110";
        ram[79] = "0b00111101100101101101011011110111";
        ram[80] = "0b00111101000111111011001001001101";
        ram[81] = "0b10111011000010110000011011011010";
        ram[82] = "0b10111101110111111011110001011110";
        ram[83] = "0b10111110000000110000111100000110";
        ram[84] = "0b00111101100010000011111110011111";
        ram[85] = "0b10111101100110011011101110010011";
        ram[86] = "0b10111101111101000110000000100100";
        ram[87] = "0b00111110000100111101101010110110";
        ram[88] = "0b10111101111011000011110010011111";
        ram[89] = "0b00111101011010010001011111110010";
        ram[90] = "0b00111110001001010100000100010000";
        ram[91] = "0b10111101110100110001001000101011";
        ram[92] = "0b10111101010010110010111110101001";
        ram[93] = "0b00111101100011001100100110001101";
        ram[94] = "0b00111010001001000111100000001001";
        ram[95] = "0b10111110001000101001111010010000";
        ram[96] = "0b00111100111000100100000000110001";
        ram[97] = "0b10111101011000011100111100101000";
        ram[98] = "0b00111101101000111101010011110001";
        ram[99] = "0b10111011101011100111110011010110";
        ram[100] = "0b10111101001110110010110011000111";
        ram[101] = "0b10111110001110101011101100000010";
        ram[102] = "0b00111101110100111110000101000011";
        ram[103] = "0b00111101101101001010111100110100";
        ram[104] = "0b10111110001111010010011100111101";
        ram[105] = "0b10111101100011001100010001110111";
        ram[106] = "0b10111100110101010100000001101111";
        ram[107] = "0b10111101100100000000101001010100";
        ram[108] = "0b10111101000100001010100101001011";
        ram[109] = "0b10111101111010111111110010101000";
        ram[110] = "0b00111101111101001000111101010100";
        ram[111] = "0b10111101101001110010110110111100";
        ram[112] = "0b10111100001111011000111101000010";
        ram[113] = "0b10111110001011010110111001001000";
        ram[114] = "0b10111100100101111001111010111000";
        ram[115] = "0b00111110000000000100100000010111";
        ram[116] = "0b10111101001011110011100000010111";
        ram[117] = "0b00111110001111011111001000100100";
        ram[118] = "0b00111101101011001110110010000101";
        ram[119] = "0b00111101001100001011001010100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_4) {
meminst = new inference_conv2d_f3_3_4_4_ram("inference_conv2d_f3_3_4_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_4() {
    delete meminst;
}


};//endmodule
#endif
