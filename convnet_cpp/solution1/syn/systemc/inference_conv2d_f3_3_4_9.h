// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_9_H__
#define __inference_conv2d_f3_3_4_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_9_ram) {
        ram[0] = "0b00111101101101101010001000101011";
        ram[1] = "0b00111100100111100111011001111000";
        ram[2] = "0b10111011110000001100011111011100";
        ram[3] = "0b10111101000001011011101110110001";
        ram[4] = "0b10111110000111011110010100001000";
        ram[5] = "0b00111110001000000011001111101000";
        ram[6] = "0b00111100111011111011011110110011";
        ram[7] = "0b10111100001101111110111101011011";
        ram[8] = "0b10111100011110101011101010110001";
        ram[9] = "0b10111101110100110010110011101001";
        ram[10] = "0b10111110000010001101000100001111";
        ram[11] = "0b10111110001000011000001101110011";
        ram[12] = "0b00111110001011011111101111010111";
        ram[13] = "0b00111101011000000000000101111000";
        ram[14] = "0b00111101111100010001000101101011";
        ram[15] = "0b00111100101110010111110100101111";
        ram[16] = "0b10111101101110110000110100001111";
        ram[17] = "0b00111101100000001110110111111001";
        ram[18] = "0b10111101011001011000001111001101";
        ram[19] = "0b10111101100101101011010100100110";
        ram[20] = "0b00111101100010110011111100111011";
        ram[21] = "0b10111001000100100001110001010101";
        ram[22] = "0b00111110000010000001001100000001";
        ram[23] = "0b00111101010010111011000110010100";
        ram[24] = "0b10111100111110101011110011001010";
        ram[25] = "0b10111101110111100001011001010001";
        ram[26] = "0b10111101110110111110011101101101";
        ram[27] = "0b00111110001110101111101101111111";
        ram[28] = "0b10111101100010001001010011111010";
        ram[29] = "0b10111100110100010010000011101111";
        ram[30] = "0b00111110000000110101010101000111";
        ram[31] = "0b00111101011110110000110001111011";
        ram[32] = "0b10111101100101001001100000010101";
        ram[33] = "0b00111110000010000100010010001101";
        ram[34] = "0b00111101111000100010110101010001";
        ram[35] = "0b10111101001110100010110000010110";
        ram[36] = "0b00111100001011001010110111011110";
        ram[37] = "0b10111101001110011001011001110100";
        ram[38] = "0b00111110010010010001000011000011";
        ram[39] = "0b10111101010100010010000100100101";
        ram[40] = "0b10111101101101011001010001101100";
        ram[41] = "0b00111101100011010110000111011011";
        ram[42] = "0b10111101110011101010000001110111";
        ram[43] = "0b10111100101100011111011011110011";
        ram[44] = "0b00111110000010010010100100100100";
        ram[45] = "0b00111101010110111110101100110011";
        ram[46] = "0b00111110000001110111110110010101";
        ram[47] = "0b10111101000110001010000001000000";
        ram[48] = "0b00111100100100100000010001111010";
        ram[49] = "0b00111101010001000110001011010001";
        ram[50] = "0b10111101110010101000110010110110";
        ram[51] = "0b10111101100100001100100100000011";
        ram[52] = "0b00111101110110010011000101000100";
        ram[53] = "0b00111101111111011000001110000100";
        ram[54] = "0b00111100111100001011010110101010";
        ram[55] = "0b00111100001001010110110100001100";
        ram[56] = "0b10111100110011000010000100001011";
        ram[57] = "0b10111101000110011010011111000001";
        ram[58] = "0b00111100110110011111000000000001";
        ram[59] = "0b10111101000000000010111110011011";
        ram[60] = "0b10111110001010000000011001101100";
        ram[61] = "0b00111100101011111000110111111000";
        ram[62] = "0b10111101110110001010111010111000";
        ram[63] = "0b00111101000001100001000110101101";
        ram[64] = "0b00111101110101110010001001011011";
        ram[65] = "0b10111100110010010101101111111111";
        ram[66] = "0b00111101110100101110011010100111";
        ram[67] = "0b00111101010010001111111001000001";
        ram[68] = "0b10111100000000010001100000011000";
        ram[69] = "0b00111100000110001111111010010100";
        ram[70] = "0b00111110011110101110011100001100";
        ram[71] = "0b00111110011011011111011101100010";
        ram[72] = "0b00111110001001001100010011001110";
        ram[73] = "0b00111101100100100100101101000001";
        ram[74] = "0b00111101100110111011011101100110";
        ram[75] = "0b00111101111011000001001110111010";
        ram[76] = "0b10111110000101101001111010000000";
        ram[77] = "0b10111101111101101000000111101101";
        ram[78] = "0b00111110001011110000010010011011";
        ram[79] = "0b00111101001101010100001111100100";
        ram[80] = "0b00111101110110111101111100001001";
        ram[81] = "0b10111110001101101111100000100111";
        ram[82] = "0b10111101110100101101000010100010";
        ram[83] = "0b10111101101100010011001011000011";
        ram[84] = "0b00111101100000111111110100011010";
        ram[85] = "0b10111011100010011010010011101111";
        ram[86] = "0b10111100101010010010110111000001";
        ram[87] = "0b00111100100001010010010011001101";
        ram[88] = "0b00111110001010101001001111110011";
        ram[89] = "0b10111100101110100111100010100010";
        ram[90] = "0b10111011100001000101111101110110";
        ram[91] = "0b10111100000100010010011000000011";
        ram[92] = "0b00111101000111001000101110100010";
        ram[93] = "0b00111110001011001010101001110110";
        ram[94] = "0b10111100111001110101011111111110";
        ram[95] = "0b10111110000000101111111010000010";
        ram[96] = "0b00111101011010101111000010100100";
        ram[97] = "0b00111110010110101000001011101000";
        ram[98] = "0b00111110001100010000110000101100";
        ram[99] = "0b10111101011101011000000101010111";
        ram[100] = "0b00111110010001001001100101001010";
        ram[101] = "0b10111100111110111110110110000001";
        ram[102] = "0b00111110000011010101000111111000";
        ram[103] = "0b00111101101010010011111101101100";
        ram[104] = "0b10111110010100111000000010001000";
        ram[105] = "0b00111011101111010110100110011000";
        ram[106] = "0b00111101111011111000111100000100";
        ram[107] = "0b00111101010110010101000100001010";
        ram[108] = "0b00111101100001110100010110001001";
        ram[109] = "0b10111100111010101010011011010010";
        ram[110] = "0b10111101110001011010110110110001";
        ram[111] = "0b00111011100100000000000001111110";
        ram[112] = "0b00111101100111111110001100101010";
        ram[113] = "0b10111110001000001011000100110110";
        ram[114] = "0b00111100001100111011011011100111";
        ram[115] = "0b00111101010110010111010011100110";
        ram[116] = "0b10111101111001000011111111100110";
        ram[117] = "0b00111101111010001110101101000110";
        ram[118] = "0b10111101000101110101001000101100";
        ram[119] = "0b00111100011100011000101101011110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_9) {
meminst = new inference_conv2d_f3_3_4_9_ram("inference_conv2d_f3_3_4_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_9() {
    delete meminst;
}


};//endmodule
#endif
