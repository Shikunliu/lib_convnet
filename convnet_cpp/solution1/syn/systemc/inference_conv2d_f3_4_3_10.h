// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_10_H__
#define __inference_conv2d_f3_4_3_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_10_ram) {
        ram[0] = "0b00111101101110111011101111001110";
        ram[1] = "0b10111011100011010100010001110111";
        ram[2] = "0b00111101111001001111000000001111";
        ram[3] = "0b10111110011011101011011111001100";
        ram[4] = "0b10111101011111100110001001110001";
        ram[5] = "0b00111110001011111001011000011000";
        ram[6] = "0b10111100101110010100111011010110";
        ram[7] = "0b00111101110111100110101111000110";
        ram[8] = "0b00111101011010010100111001011101";
        ram[9] = "0b00111101001110101111010011001001";
        ram[10] = "0b10111101100000010000001010000111";
        ram[11] = "0b00111100001101100100011011100100";
        ram[12] = "0b10111101011111101000101110001100";
        ram[13] = "0b00111101101100110001010101011110";
        ram[14] = "0b10111100110011011000011100000111";
        ram[15] = "0b00111100101011001101000001000011";
        ram[16] = "0b00111101100000001111011100100110";
        ram[17] = "0b00111101110101010100111010110001";
        ram[18] = "0b10111110000101110010110000001110";
        ram[19] = "0b10111110000100111101101001110011";
        ram[20] = "0b10111110001000010100111101001000";
        ram[21] = "0b00111101111111000010001000100101";
        ram[22] = "0b10111101101111001010011001011111";
        ram[23] = "0b10111101101001001101000000010100";
        ram[24] = "0b00111101110001101111110001110100";
        ram[25] = "0b10111100110111101100110011011111";
        ram[26] = "0b10111101010001000100001001001111";
        ram[27] = "0b10111101111001101001100101000010";
        ram[28] = "0b10111101111000000000000110010011";
        ram[29] = "0b10111101000111110110100111011000";
        ram[30] = "0b10111101110000110101100100110110";
        ram[31] = "0b10111101101111110100101110001010";
        ram[32] = "0b10111101100110111100110011011000";
        ram[33] = "0b10111100111110010100010010001111";
        ram[34] = "0b10111100101001011001101001011001";
        ram[35] = "0b10111011110101110101011001111110";
        ram[36] = "0b10111100001000001110001101100101";
        ram[37] = "0b00111110010001010101010001110110";
        ram[38] = "0b00111101100101101110011100001111";
        ram[39] = "0b00111100001111011000111001101011";
        ram[40] = "0b10111101000110101000101001011010";
        ram[41] = "0b00111101110100111101010100110100";
        ram[42] = "0b10111101001011001011111101000110";
        ram[43] = "0b10111110000101011101101001101010";
        ram[44] = "0b10111110001101100111110101111000";
        ram[45] = "0b00111101100001001011010111001111";
        ram[46] = "0b10111101110110101000010100000001";
        ram[47] = "0b00111100100011001011011110011110";
        ram[48] = "0b00111110000110100000100011000000";
        ram[49] = "0b10111101011010101001110100010010";
        ram[50] = "0b10111101010100101000011110001100";
        ram[51] = "0b00111101001110111011110010001010";
        ram[52] = "0b10111100011010000100110000011010";
        ram[53] = "0b00111101100001111001001111111000";
        ram[54] = "0b10111110000100101011110011111001";
        ram[55] = "0b10111100100100010110010010101100";
        ram[56] = "0b00111100100001001000001110111110";
        ram[57] = "0b10111110001001010010111010110110";
        ram[58] = "0b10111101010101101100110100000001";
        ram[59] = "0b00111101101111111111000010001001";
        ram[60] = "0b10111101101100110000001000111011";
        ram[61] = "0b00111100011000110011110101010010";
        ram[62] = "0b10111110000111111000111100000100";
        ram[63] = "0b10111100000001010111001110101000";
        ram[64] = "0b00111100110111001110001110011011";
        ram[65] = "0b00111100110000010110100010000000";
        ram[66] = "0b00111011000100010100010000001011";
        ram[67] = "0b00111101111011010100000100110001";
        ram[68] = "0b10111110000000011110110111100001";
        ram[69] = "0b10111100110010111111110011000011";
        ram[70] = "0b10111110000011010000001000000100";
        ram[71] = "0b10111110001110011001000011110011";
        ram[72] = "0b00111101111010111100011100101110";
        ram[73] = "0b10111101010100001000111100101111";
        ram[74] = "0b00111101010111100001011010000110";
        ram[75] = "0b00111101100011000111001100110011";
        ram[76] = "0b10111100111001000010101100100011";
        ram[77] = "0b00111011101111001010011010001111";
        ram[78] = "0b10111110000011101000110001001000";
        ram[79] = "0b00111101111001111111011011110101";
        ram[80] = "0b10111100111111001110100110010101";
        ram[81] = "0b00111110000010110011010000011110";
        ram[82] = "0b10111110000110101101001010011010";
        ram[83] = "0b10111101101001111100101110001100";
        ram[84] = "0b00111101111100101111011101101110";
        ram[85] = "0b00111101101000001100010101011000";
        ram[86] = "0b00111101100111101100001111011011";
        ram[87] = "0b10111001010110011011001010110001";
        ram[88] = "0b00111100010010001010011110100100";
        ram[89] = "0b10111101100111100001110001001011";
        ram[90] = "0b10111101000110010101000110010000";
        ram[91] = "0b10111101111001100001110110000110";
        ram[92] = "0b00111101000110010001001100101100";
        ram[93] = "0b10111100010111000000111010001001";
        ram[94] = "0b00111100101100001110000000111101";
        ram[95] = "0b00111101110111011001110000101000";
        ram[96] = "0b10111110001011000100100100110100";
        ram[97] = "0b00111101110000110001000111000000";
        ram[98] = "0b00111101110101101100101101010011";
        ram[99] = "0b00111100111110000001100001110101";
        ram[100] = "0b10111101001100111101010011001001";
        ram[101] = "0b00111101110100010110000110100010";
        ram[102] = "0b00111100000111100111110010001101";
        ram[103] = "0b10111110001110110000001101011100";
        ram[104] = "0b00111101100110100001101000000000";
        ram[105] = "0b10111100111010111111000001001001";
        ram[106] = "0b00111101110101110001001100100111";
        ram[107] = "0b00111110000011110100010111100001";
        ram[108] = "0b00111101000101101000101000000000";
        ram[109] = "0b00111101100111110100000000000001";
        ram[110] = "0b10111100110011100011111010111101";
        ram[111] = "0b10111101000111101010100110001001";
        ram[112] = "0b00111101101001111111101101000001";
        ram[113] = "0b00111101100101001001111011011001";
        ram[114] = "0b10111110000011111100100100110110";
        ram[115] = "0b00111100100110110000010100001001";
        ram[116] = "0b00111110001000111011110100010110";
        ram[117] = "0b00111101101011100100111101000001";
        ram[118] = "0b00111100100000010111011100101110";
        ram[119] = "0b00111101110101011000000100000110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_10) {
meminst = new inference_conv2d_f3_4_3_10_ram("inference_conv2d_f3_4_3_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_10() {
    delete meminst;
}


};//endmodule
#endif
