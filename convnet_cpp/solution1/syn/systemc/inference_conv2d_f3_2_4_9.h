// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_9_H__
#define __inference_conv2d_f3_2_4_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_9_ram) {
        ram[0] = "0b10111101011101000111100111110000";
        ram[1] = "0b00111101111111110011000101101110";
        ram[2] = "0b10111101111010001110101000111010";
        ram[3] = "0b00111110010000000001100010100100";
        ram[4] = "0b10111101110100111111110110010011";
        ram[5] = "0b00111101011100000001011100111010";
        ram[6] = "0b10111101101100001111100100010111";
        ram[7] = "0b00111110001101100110010010010001";
        ram[8] = "0b00111110100001111010111110100111";
        ram[9] = "0b10111110010000011011101110001100";
        ram[10] = "0b10111110001100011100010001110110";
        ram[11] = "0b00111101011100101110010011000100";
        ram[12] = "0b10111100010101000011101011101011";
        ram[13] = "0b10111110001010101000011100011010";
        ram[14] = "0b00111100100000000100000110100100";
        ram[15] = "0b00111101101011111110011100100110";
        ram[16] = "0b00111101100101101000110110000011";
        ram[17] = "0b10111011100110111011011101010110";
        ram[18] = "0b10111101001000100110101001110011";
        ram[19] = "0b10111110010101110110100110101001";
        ram[20] = "0b00111010001010110110101111110110";
        ram[21] = "0b00111101110100000010101010111011";
        ram[22] = "0b10111101011100001001111011001111";
        ram[23] = "0b00111101100001010001111100100100";
        ram[24] = "0b00111101111001010110100010100101";
        ram[25] = "0b10111101100101110100101011110000";
        ram[26] = "0b00111110000100000101011011000101";
        ram[27] = "0b10111101101001100001000000110101";
        ram[28] = "0b00111101001111000111100100101101";
        ram[29] = "0b00111101100100111001111000001101";
        ram[30] = "0b00111110001100100101111101100011";
        ram[31] = "0b10111101100010100110001011100000";
        ram[32] = "0b00111110000001101001100111001000";
        ram[33] = "0b00111101101101101111010100101010";
        ram[34] = "0b00111101100011111111100110101000";
        ram[35] = "0b00111110000100001000100110100000";
        ram[36] = "0b00111101101010101100111100111111";
        ram[37] = "0b10111101111011010011010100100010";
        ram[38] = "0b10111101100100111110000101010001";
        ram[39] = "0b00111101011011100110011101010001";
        ram[40] = "0b00111110001011010000101010101010";
        ram[41] = "0b00111101100101001011111110101011";
        ram[42] = "0b00111101100010010001110011010010";
        ram[43] = "0b00111101101000001111110101001001";
        ram[44] = "0b10111110001001100010000011101111";
        ram[45] = "0b00111100110101000110100110101111";
        ram[46] = "0b00111101010111011111011011110110";
        ram[47] = "0b10111101100110110101000111001011";
        ram[48] = "0b00111100001000111100010100110111";
        ram[49] = "0b00111101111100111011010010110011";
        ram[50] = "0b00111110000000110001010111010111";
        ram[51] = "0b00111101010010000010110001101111";
        ram[52] = "0b10111101001101100010100101010010";
        ram[53] = "0b10111101011011001111010100101100";
        ram[54] = "0b10111110010101111000011110001011";
        ram[55] = "0b10111100110001000100011011101100";
        ram[56] = "0b00111101110000010101111011101000";
        ram[57] = "0b00111101100110000100101110111100";
        ram[58] = "0b00111101000111000001101101010100";
        ram[59] = "0b10111101100001000010011111001000";
        ram[60] = "0b10111011110101111111110101101101";
        ram[61] = "0b10111110011101101100001110111001";
        ram[62] = "0b10111110000000011101100100101011";
        ram[63] = "0b10111101011010111100100100010001";
        ram[64] = "0b10111101111101101110100110111100";
        ram[65] = "0b10111101101011011101010101011011";
        ram[66] = "0b00111101011001100001011010110101";
        ram[67] = "0b10111110000111001110011011000001";
        ram[68] = "0b00111101010000001000100101000010";
        ram[69] = "0b10111011110001100100101000010001";
        ram[70] = "0b10111101100011111101000100000110";
        ram[71] = "0b00111101000110101010100011111001";
        ram[72] = "0b00111101111100011000110110101100";
        ram[73] = "0b10111101100111111010010100100100";
        ram[74] = "0b00111100110101110110111110001000";
        ram[75] = "0b00111101101001001111001000000000";
        ram[76] = "0b00111100100001100111101010100011";
        ram[77] = "0b10111110000101000010101000100100";
        ram[78] = "0b10111101100001001000101000110000";
        ram[79] = "0b10111100110001001100110111111011";
        ram[80] = "0b10111011001110011101101100000011";
        ram[81] = "0b00111100100111111100101110101101";
        ram[82] = "0b00111101100000101010110010011110";
        ram[83] = "0b10111101110111001011111011101000";
        ram[84] = "0b10111100001000111101110111000000";
        ram[85] = "0b00111101001101001110000100011110";
        ram[86] = "0b10111101000100011010110000110000";
        ram[87] = "0b10111110001101011000010100111000";
        ram[88] = "0b10111110000100000100111110110001";
        ram[89] = "0b10111110001010001101010110000100";
        ram[90] = "0b00111101100000100010000110100000";
        ram[91] = "0b00111101101011010010111111110001";
        ram[92] = "0b00111101110111000101010100000000";
        ram[93] = "0b10111101000110100011100011100001";
        ram[94] = "0b00111110001000110000101111100001";
        ram[95] = "0b00111101111011010110010101011110";
        ram[96] = "0b00111100111110001110101100000011";
        ram[97] = "0b00111101110011010100000100110001";
        ram[98] = "0b00111011110010011001110111000011";
        ram[99] = "0b00111101100111100110101001110111";
        ram[100] = "0b00111101100011101010011100010010";
        ram[101] = "0b00111101110111000000101000000111";
        ram[102] = "0b00111100110110001001111110011111";
        ram[103] = "0b10111101010100001010110001010101";
        ram[104] = "0b00111101011010010010011110010001";
        ram[105] = "0b10111110011000101011101000010111";
        ram[106] = "0b10111101001001000010011010000110";
        ram[107] = "0b00111100101011001100101111011011";
        ram[108] = "0b00111100100101100111111000100110";
        ram[109] = "0b00111101100001100000101100011111";
        ram[110] = "0b00111101001010111101010010011010";
        ram[111] = "0b10111100000010000101110110111101";
        ram[112] = "0b00111110001011010010001001000010";
        ram[113] = "0b00111100111111000010110000000000";
        ram[114] = "0b10111100101011001111101101110110";
        ram[115] = "0b10111101001010000001110111011100";
        ram[116] = "0b00111101101000000000011111101011";
        ram[117] = "0b10111101101010110101001010010100";
        ram[118] = "0b00111101000101000010100011000111";
        ram[119] = "0b00111101011001001110101100100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_9) {
meminst = new inference_conv2d_f3_2_4_9_ram("inference_conv2d_f3_2_4_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_9() {
    delete meminst;
}


};//endmodule
#endif
