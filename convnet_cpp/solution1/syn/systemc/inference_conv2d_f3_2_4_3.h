// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_3_H__
#define __inference_conv2d_f3_2_4_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_3_ram) {
        ram[0] = "0b10111101110111101111000001101011";
        ram[1] = "0b10111110000110100010011010100010";
        ram[2] = "0b00111101110100000000110011011000";
        ram[3] = "0b10111101110011011110000100011010";
        ram[4] = "0b10111101100100010110000100001110";
        ram[5] = "0b10111101000101111010101011111101";
        ram[6] = "0b10111110000101100100110101111111";
        ram[7] = "0b00111101011101001011110100100110";
        ram[8] = "0b10111101000101000101000100001011";
        ram[9] = "0b10111101000111010000101011101110";
        ram[10] = "0b00111101001000111111110000101001";
        ram[11] = "0b10111101001000001101000010101011";
        ram[12] = "0b00111101111100000010011000000011";
        ram[13] = "0b00111101100100010011001101111111";
        ram[14] = "0b00111100011000100001100000100011";
        ram[15] = "0b00111011110000011010110101110100";
        ram[16] = "0b00111100101111001001000100010101";
        ram[17] = "0b10111101100101111001000010111000";
        ram[18] = "0b10111110000000111000011010010000";
        ram[19] = "0b10111101100010101100010101110001";
        ram[20] = "0b00111101110101000110110000110011";
        ram[21] = "0b00111100110110011011101000011011";
        ram[22] = "0b10111101111011010101110001110100";
        ram[23] = "0b10111101000001110001111111100101";
        ram[24] = "0b00111101111001010000001001101001";
        ram[25] = "0b00111101100100100001100000111110";
        ram[26] = "0b10111100100101100010101000001110";
        ram[27] = "0b10111101110000111011110100100100";
        ram[28] = "0b00111101101011111101111111001111";
        ram[29] = "0b00111101111101101111111000101110";
        ram[30] = "0b10111011110011110101110111110111";
        ram[31] = "0b00111100100001010010100100110101";
        ram[32] = "0b10111100000110010101000011010100";
        ram[33] = "0b00111101101000010001011111101011";
        ram[34] = "0b10111101100001001010000011110001";
        ram[35] = "0b00111100100001100001111011111110";
        ram[36] = "0b00111100000111000011001000000101";
        ram[37] = "0b10111101000100110000110010000010";
        ram[38] = "0b00111110001010001011110100100011";
        ram[39] = "0b00111011100101110110011000100011";
        ram[40] = "0b10111101100001111011010100110110";
        ram[41] = "0b10111101111100011111011000000001";
        ram[42] = "0b00111010110111111110101001100001";
        ram[43] = "0b00111101101011110111000000100011";
        ram[44] = "0b10111101111100001000001101010110";
        ram[45] = "0b10111100101111010101011000110111";
        ram[46] = "0b10111101110100111010011100010001";
        ram[47] = "0b10111101111111110010111011001111";
        ram[48] = "0b10111101101100001111100001101000";
        ram[49] = "0b00111101101100010111100111011011";
        ram[50] = "0b10111101111001100111000011100011";
        ram[51] = "0b10111100110011111101011000110111";
        ram[52] = "0b10111101011110000000010000111000";
        ram[53] = "0b00111101100111011111110110011111";
        ram[54] = "0b00111101101110111001110010001110";
        ram[55] = "0b10111011100100011011100001001111";
        ram[56] = "0b10111101100000110101110011101111";
        ram[57] = "0b10111101100011010100101000110110";
        ram[58] = "0b10111110000100100011101101111001";
        ram[59] = "0b00111101110001011101001100111011";
        ram[60] = "0b10111100100110100000010001011000";
        ram[61] = "0b00111101001011001011011011111101";
        ram[62] = "0b10111101111011101000000001111100";
        ram[63] = "0b10111110001110001001100001110000";
        ram[64] = "0b00111101101010111110110100001001";
        ram[65] = "0b10111101111010111100100111001101";
        ram[66] = "0b10111100000011001010100111000111";
        ram[67] = "0b00111100100011001110001100001000";
        ram[68] = "0b10111101000111000010101001101110";
        ram[69] = "0b00111100110101011110000110110100";
        ram[70] = "0b00111110000111110010011000101001";
        ram[71] = "0b10111101010111110100100111111000";
        ram[72] = "0b00111101101101110000001100011100";
        ram[73] = "0b10111100100000101101010001011011";
        ram[74] = "0b00111101110000011100001010101110";
        ram[75] = "0b10111101110111000100010000111001";
        ram[76] = "0b10111100101110110011001110110011";
        ram[77] = "0b00111110000110000010000001100000";
        ram[78] = "0b10111110001101011001000101000111";
        ram[79] = "0b00111101001001001101010001111011";
        ram[80] = "0b00111101100100100010001101101001";
        ram[81] = "0b00111100001010100101110001011111";
        ram[82] = "0b10111100101101011010100011000100";
        ram[83] = "0b00111101101000101010011001010011";
        ram[84] = "0b00111110000110011111111110010011";
        ram[85] = "0b00111101111111001000010100111100";
        ram[86] = "0b10111110000111111000001100111000";
        ram[87] = "0b00111101101111011110110011110011";
        ram[88] = "0b10111101111110111010101110101000";
        ram[89] = "0b10111101100011010110010110000110";
        ram[90] = "0b00111100110010101001111101100001";
        ram[91] = "0b10111101100000101100000110100100";
        ram[92] = "0b00111101001011011100000100011110";
        ram[93] = "0b00111100000101001100100110100110";
        ram[94] = "0b10111101100111001110010001010111";
        ram[95] = "0b10111100111001011101000011100000";
        ram[96] = "0b00111101100001010000101101101101";
        ram[97] = "0b00111101101010011111000001101100";
        ram[98] = "0b00111101100111011000100110110011";
        ram[99] = "0b00111101110111011100100111000101";
        ram[100] = "0b00111110010000110110011111100100";
        ram[101] = "0b10111110000110011011101001011110";
        ram[102] = "0b10111100111100000110011001100101";
        ram[103] = "0b00111001010010001001101100110001";
        ram[104] = "0b10111101100011111111101011000010";
        ram[105] = "0b10111011100000110111010100010101";
        ram[106] = "0b00111101011100010111111011001000";
        ram[107] = "0b10111100110101000110001011111001";
        ram[108] = "0b00111101011000011011110011001110";
        ram[109] = "0b10111100011110010001101000110011";
        ram[110] = "0b00111110000011010111010101011100";
        ram[111] = "0b10111110001011010111110100111001";
        ram[112] = "0b10111100010100100110011011010101";
        ram[113] = "0b00111100011000110010111101111010";
        ram[114] = "0b00111101010100100100001100101110";
        ram[115] = "0b10111110000001111110000110111001";
        ram[116] = "0b10111101010011011010010011101001";
        ram[117] = "0b10111110001110111001111110011001";
        ram[118] = "0b00111101101000000101001111010101";
        ram[119] = "0b00111101101000110110100011001000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_3) {
meminst = new inference_conv2d_f3_2_4_3_ram("inference_conv2d_f3_2_4_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_3() {
    delete meminst;
}


};//endmodule
#endif
