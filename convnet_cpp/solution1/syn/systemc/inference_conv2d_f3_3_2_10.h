// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_10_H__
#define __inference_conv2d_f3_3_2_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_10_ram) {
        ram[0] = "0b00111010101010001100001100000010";
        ram[1] = "0b00111101110010101110001100101011";
        ram[2] = "0b00111101011111001001100110010100";
        ram[3] = "0b10111110000101101111001011101001";
        ram[4] = "0b00111101101000001011000110101110";
        ram[5] = "0b10111101100001011110100111000111";
        ram[6] = "0b00111101110101100010011110111111";
        ram[7] = "0b00111100110110101101011100011100";
        ram[8] = "0b10111011101011101001011010010110";
        ram[9] = "0b00111100101110011001010110111000";
        ram[10] = "0b10111100001111011001001111011111";
        ram[11] = "0b10111101101011010001111000000011";
        ram[12] = "0b10111101111100101010010100011110";
        ram[13] = "0b10111101000100110110110111010001";
        ram[14] = "0b00111101001001101010110111001111";
        ram[15] = "0b00111110000111100000110011100001";
        ram[16] = "0b00111110000111011101001100110101";
        ram[17] = "0b10111110000011100000110111101101";
        ram[18] = "0b10111100100000011010111101100010";
        ram[19] = "0b10111101000110101011000111100010";
        ram[20] = "0b10111100101001001011011011001110";
        ram[21] = "0b10111100101000000110101111100110";
        ram[22] = "0b00111101111000110010001110111100";
        ram[23] = "0b00111110010000101101010001001110";
        ram[24] = "0b10111101000001010101100011101010";
        ram[25] = "0b10111101100001100101001111111111";
        ram[26] = "0b00111011111010111110110011100011";
        ram[27] = "0b00111100111100010000110000010010";
        ram[28] = "0b00111101000011111001100001011001";
        ram[29] = "0b10111110001001001111110000011110";
        ram[30] = "0b00111101010100100000000001111110";
        ram[31] = "0b10111101111100010011111100000111";
        ram[32] = "0b00111101010001101001011001010010";
        ram[33] = "0b10111101011101100000001110010010";
        ram[34] = "0b00111100111110001100111001001000";
        ram[35] = "0b10111101101011100101011010110011";
        ram[36] = "0b10111011111101000011001110101111";
        ram[37] = "0b00111101100110101110111100111010";
        ram[38] = "0b00111110000010000001010110100000";
        ram[39] = "0b00111101100001000101111111101110";
        ram[40] = "0b10111101111011011110110010100010";
        ram[41] = "0b00111110001100000011011011001010";
        ram[42] = "0b10111101101011110010010111110011";
        ram[43] = "0b10111101100000010111110000101001";
        ram[44] = "0b10111101101110010011011110101010";
        ram[45] = "0b00111101111011010110010111100100";
        ram[46] = "0b10111101101011111101101111010011";
        ram[47] = "0b00111101110101011110011111001001";
        ram[48] = "0b10111101110111111010010001000000";
        ram[49] = "0b10111101100000011001111001110011";
        ram[50] = "0b00111100110111110111101000011001";
        ram[51] = "0b00111101011010101011111101000001";
        ram[52] = "0b00111101100000011000111010101011";
        ram[53] = "0b00111101101100110111001000111000";
        ram[54] = "0b10111101111010000010110001101111";
        ram[55] = "0b00111100011001000101111111111100";
        ram[56] = "0b00111100101101011101100001011111";
        ram[57] = "0b00111101100101100100000001010110";
        ram[58] = "0b10111101101111000000110111001101";
        ram[59] = "0b00111101100111011110001011101111";
        ram[60] = "0b00111101100111101000111100110111";
        ram[61] = "0b10111101001001110000100100100100";
        ram[62] = "0b00111100011101000011011111100000";
        ram[63] = "0b00111101101101110100000101110011";
        ram[64] = "0b10111100101010100000001000110010";
        ram[65] = "0b10111100101010010001100011111110";
        ram[66] = "0b00111100001100101100101001011000";
        ram[67] = "0b10111101011001110000000000111010";
        ram[68] = "0b10111110000011101110100111011101";
        ram[69] = "0b00111110000110110100101100110000";
        ram[70] = "0b00111110000101101111100100110011";
        ram[71] = "0b00111101100011101000111010010110";
        ram[72] = "0b10111100110111001010000111000010";
        ram[73] = "0b10111100110001100110110100000010";
        ram[74] = "0b00111101001000011101101010010110";
        ram[75] = "0b00111101100111111110110011111000";
        ram[76] = "0b00111110000111010111001100000000";
        ram[77] = "0b10111100101011001011011101001110";
        ram[78] = "0b10111100111111101010101011001011";
        ram[79] = "0b00111110001001111011101100110000";
        ram[80] = "0b00111100111100101100000001000111";
        ram[81] = "0b10111110001001011110100001001111";
        ram[82] = "0b10111100111010001110110111001010";
        ram[83] = "0b10111101001111100010010110100000";
        ram[84] = "0b10111101101101101100011101010111";
        ram[85] = "0b00111101101011100011011000100100";
        ram[86] = "0b00111101111010011010111101011100";
        ram[87] = "0b00111100011011101100010101000101";
        ram[88] = "0b00111101100011001010011101000011";
        ram[89] = "0b00111101001110110100111001110000";
        ram[90] = "0b10111101110110011011111111011111";
        ram[91] = "0b10111100011111000001100111000001";
        ram[92] = "0b00111110001001100100001011000000";
        ram[93] = "0b10111101100000100111011110001111";
        ram[94] = "0b10111101111000001001011001111000";
        ram[95] = "0b10111101100100001110010101100000";
        ram[96] = "0b00111100111000001011110101111010";
        ram[97] = "0b10111011110010001011001111001110";
        ram[98] = "0b00111100110110011111000000000001";
        ram[99] = "0b10111101001110111010000101111100";
        ram[100] = "0b10111101110011101011010101110000";
        ram[101] = "0b00111100100010010111110101010111";
        ram[102] = "0b10111101101111000010100011001101";
        ram[103] = "0b00111101111011110001001101001001";
        ram[104] = "0b10111100110011011110000010010011";
        ram[105] = "0b00111110000111001010000100000110";
        ram[106] = "0b00111101111111000111100000100001";
        ram[107] = "0b10111011101010110100000000100000";
        ram[108] = "0b00111100100010100110111100100100";
        ram[109] = "0b00111101010010101100111110110111";
        ram[110] = "0b00111110000000010001010001001101";
        ram[111] = "0b10111100010110000011011011111001";
        ram[112] = "0b00111101101000111000100000100010";
        ram[113] = "0b00111101100111101000100110110110";
        ram[114] = "0b10111101110010001011001100111010";
        ram[115] = "0b00111101011101110101000010110100";
        ram[116] = "0b00111110000000100101000000101111";
        ram[117] = "0b00111101001010000100010111001111";
        ram[118] = "0b10111100111111100001111111000001";
        ram[119] = "0b00111100111001110101000111101001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_10) {
meminst = new inference_conv2d_f3_3_2_10_ram("inference_conv2d_f3_3_2_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_10() {
    delete meminst;
}


};//endmodule
#endif
