// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_7_H__
#define __inference_conv2d_f3_2_1_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_7_ram) {
        ram[0] = "0b10111101000111111000011111010101";
        ram[1] = "0b10111101111011011111101011001010";
        ram[2] = "0b00111101000101010100110010110011";
        ram[3] = "0b00111101001111111110011111000111";
        ram[4] = "0b00111101011001011001100000001010";
        ram[5] = "0b10111101101110101100010101010110";
        ram[6] = "0b10111101100101110110101000010100";
        ram[7] = "0b00111110001001111001010010100111";
        ram[8] = "0b00111101111011100001011100011010";
        ram[9] = "0b10111101110000000101101001010110";
        ram[10] = "0b00111101110100111010111111111011";
        ram[11] = "0b00111101000101001100111101100101";
        ram[12] = "0b00111101000010111011001000011011";
        ram[13] = "0b10111101100001011111111001010100";
        ram[14] = "0b00111100111111011011011110111100";
        ram[15] = "0b00111101001001100010010011111000";
        ram[16] = "0b10111101111011000101101110001110";
        ram[17] = "0b10111101110101010111000111010010";
        ram[18] = "0b10111101100011111011010011000100";
        ram[19] = "0b00111011100001011110011001001001";
        ram[20] = "0b00111101110110010111010001100000";
        ram[21] = "0b10111110000100111011100111110001";
        ram[22] = "0b00111110000110110110110010111110";
        ram[23] = "0b10111100111100101000111110011111";
        ram[24] = "0b10111101011100000001101000101001";
        ram[25] = "0b00111110000100001110000110110101";
        ram[26] = "0b10111100101111100100111001001111";
        ram[27] = "0b10111011111001101011100110011101";
        ram[28] = "0b00111101010111101010011100000101";
        ram[29] = "0b10111101010001001100100111111111";
        ram[30] = "0b10111110001001110001110010010111";
        ram[31] = "0b00111100101011110101110100011011";
        ram[32] = "0b00111101010101111011010000011100";
        ram[33] = "0b00111101101000101111111011010011";
        ram[34] = "0b00111101100000000010001010011010";
        ram[35] = "0b10111100111110101001001001101101";
        ram[36] = "0b00111101010101001101001000111010";
        ram[37] = "0b10111101000100001111000111011011";
        ram[38] = "0b00111100101000011010001000010001";
        ram[39] = "0b00111100001010111100010110000001";
        ram[40] = "0b10111101011101111111010001100011";
        ram[41] = "0b00111101110001000101010110001101";
        ram[42] = "0b10111101101011101100000110011010";
        ram[43] = "0b10111101110000011011000001100001";
        ram[44] = "0b00111101101100111000111001100000";
        ram[45] = "0b00111101111101011110010000011101";
        ram[46] = "0b00111110001000100111000010110000";
        ram[47] = "0b00111101000001111100111101010010";
        ram[48] = "0b00111110001101011100001000001001";
        ram[49] = "0b00111110010000100110001111011000";
        ram[50] = "0b00111100000000001010000011011010";
        ram[51] = "0b10111101111010110100111100011110";
        ram[52] = "0b10111110001011011011100000110101";
        ram[53] = "0b00111101100110101110101110001110";
        ram[54] = "0b00111110000000001010101100101110";
        ram[55] = "0b10111101011011000101010111001001";
        ram[56] = "0b00111101110000100011101110100010";
        ram[57] = "0b00111110000000001011101101101111";
        ram[58] = "0b00111100000001000110000110001111";
        ram[59] = "0b10111101101110111100001110101011";
        ram[60] = "0b10111101000111110010110110001101";
        ram[61] = "0b00111101101001010110100110001001";
        ram[62] = "0b00111011110000010101001110000111";
        ram[63] = "0b00111101011100100000100011000110";
        ram[64] = "0b10111101011101011000000001001010";
        ram[65] = "0b10111101001000111010001011101101";
        ram[66] = "0b00111101100111011010000101100110";
        ram[67] = "0b00111101100110101000111111011100";
        ram[68] = "0b00111101110101011101000000110001";
        ram[69] = "0b00111011111010000111001000000100";
        ram[70] = "0b10111110000100111000100001100110";
        ram[71] = "0b10111101101010110101011000110010";
        ram[72] = "0b00111101100111011000000011111111";
        ram[73] = "0b00111100111010101011011100101110";
        ram[74] = "0b00111100000000011010000111000001";
        ram[75] = "0b10111110000100011101111100110011";
        ram[76] = "0b10111110000111111010101011001110";
        ram[77] = "0b10111101011011011101111001100000";
        ram[78] = "0b00111110000101001110011100100101";
        ram[79] = "0b10110110101100011000010111111110";
        ram[80] = "0b10111100010001001100110111111011";
        ram[81] = "0b00111101001011110011110111011011";
        ram[82] = "0b10111100111010011001010111000110";
        ram[83] = "0b00111100000001100110101000100111";
        ram[84] = "0b00111101000001111011001011100111";
        ram[85] = "0b10111110001110011010110000110110";
        ram[86] = "0b00111101101110010101010101111111";
        ram[87] = "0b00111110000101000001001111011011";
        ram[88] = "0b10111101011100101111110010101101";
        ram[89] = "0b00111110010011001000011110011000";
        ram[90] = "0b10111101111001000111110010110111";
        ram[91] = "0b10111101111101001011011110110011";
        ram[92] = "0b10111110001101001111100101111111";
        ram[93] = "0b00111110001111100111100010011110";
        ram[94] = "0b10111101001010001001000011100011";
        ram[95] = "0b00111101010110000011100110110011";
        ram[96] = "0b10111001111001110101111101011011";
        ram[97] = "0b10111101100100110001000010011001";
        ram[98] = "0b10111101011111000111000111010110";
        ram[99] = "0b00111101111001110001111011110011";
        ram[100] = "0b00111101101100010100000111011100";
        ram[101] = "0b10111101100001100000000111100101";
        ram[102] = "0b10111101110001011000010001101111";
        ram[103] = "0b00111101110100000001001000010111";
        ram[104] = "0b10111100100111000010011111101001";
        ram[105] = "0b00111101011000110101011111011001";
        ram[106] = "0b00111101000111000111001001000001";
        ram[107] = "0b00111010011111010001101111110101";
        ram[108] = "0b00111101011001101000011101101110";
        ram[109] = "0b10111011110100000000110101001001";
        ram[110] = "0b00111101100101111011111110100101";
        ram[111] = "0b00111101100100110011001000110100";
        ram[112] = "0b00111100011010100100101101100011";
        ram[113] = "0b10111101100010101000100000100111";
        ram[114] = "0b00111101111001101100110110101111";
        ram[115] = "0b00111011110100001111100000101011";
        ram[116] = "0b10111110000000111010110101011100";
        ram[117] = "0b10111101110100010010011101110000";
        ram[118] = "0b10111110001000001100011100111011";
        ram[119] = "0b00111101001011011000010100100100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_7) {
meminst = new inference_conv2d_f3_2_1_7_ram("inference_conv2d_f3_2_1_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_7() {
    delete meminst;
}


};//endmodule
#endif
