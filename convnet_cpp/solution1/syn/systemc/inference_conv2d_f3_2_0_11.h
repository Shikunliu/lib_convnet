// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_11_H__
#define __inference_conv2d_f3_2_0_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_11_ram) {
        ram[0] = "0b00111101010000100101111111000001";
        ram[1] = "0b00111101100011000100010000111001";
        ram[2] = "0b00111110000110000101110101110100";
        ram[3] = "0b10111100000110100111110110000101";
        ram[4] = "0b00111100110111111111100000100011";
        ram[5] = "0b10111100001101000111001001100011";
        ram[6] = "0b00111101100100001100101111110011";
        ram[7] = "0b10111100110111001001101111100010";
        ram[8] = "0b10111101010101100011110111011111";
        ram[9] = "0b00111101100111011111010110011001";
        ram[10] = "0b00111011111110001000010001110110";
        ram[11] = "0b10111101110010000100110110010010";
        ram[12] = "0b00111110000110110000101110111111";
        ram[13] = "0b00111101011100010011111111111001";
        ram[14] = "0b00111101000101011001100010011110";
        ram[15] = "0b10111100010010011011111000100101";
        ram[16] = "0b00111101110001100000100111011101";
        ram[17] = "0b00111100100100010101000001010101";
        ram[18] = "0b10111100110100000111000101100111";
        ram[19] = "0b10111101100110010011110100000011";
        ram[20] = "0b00111101101010110110111101011101";
        ram[21] = "0b10111100100001000001101010101100";
        ram[22] = "0b10111110010110010000011110010110";
        ram[23] = "0b10111101001011000000100011010010";
        ram[24] = "0b00111101000100000101010011111101";
        ram[25] = "0b00111010110100001100001101111100";
        ram[26] = "0b00111100100011001010001001110000";
        ram[27] = "0b00111010110100100010010111010010";
        ram[28] = "0b10111100101000101001100110111110";
        ram[29] = "0b00111101111000100011000011111101";
        ram[30] = "0b00111101110101000010010111110010";
        ram[31] = "0b10111101111001100111010000001000";
        ram[32] = "0b10111101011101100001011001110010";
        ram[33] = "0b10111101001100100011100001100001";
        ram[34] = "0b00111101100001111011101100001000";
        ram[35] = "0b00111101101101111010010111001100";
        ram[36] = "0b00111011100110000110111000100000";
        ram[37] = "0b10111110000011010000010001100000";
        ram[38] = "0b10111011111001100000101001001011";
        ram[39] = "0b10111101100100111111111001001111";
        ram[40] = "0b00111101100111000011001101001010";
        ram[41] = "0b00111110010001000111111110011001";
        ram[42] = "0b00111101000100100000011110011111";
        ram[43] = "0b10111101010101011000111011011101";
        ram[44] = "0b00111110001001010101001100100110";
        ram[45] = "0b00111100011000010110000011011001";
        ram[46] = "0b00111100111000100011101010001000";
        ram[47] = "0b10111101100010000011111011111110";
        ram[48] = "0b00111101011111001010000010110101";
        ram[49] = "0b00111101110110111011110101111011";
        ram[50] = "0b10111101110101100101111111011001";
        ram[51] = "0b00111101110001010000000110101101";
        ram[52] = "0b00111010101011010000001011011000";
        ram[53] = "0b10111101101000100010000110101110";
        ram[54] = "0b00111110000000001111001000111001";
        ram[55] = "0b00111101101001011111101000110000";
        ram[56] = "0b00111100011010101001011001110111";
        ram[57] = "0b10111101111001000001001011001111";
        ram[58] = "0b10111100001100010011011110110000";
        ram[59] = "0b00111101011100010000001111111111";
        ram[60] = "0b00111101000110100110101100000000";
        ram[61] = "0b00111101010010001001111100100110";
        ram[62] = "0b10111101101111010011100100111001";
        ram[63] = "0b00111101000011101100010001010100";
        ram[64] = "0b00111100000010010000011011000101";
        ram[65] = "0b00111100001111101001010011111100";
        ram[66] = "0b10111110010101000011001011001010";
        ram[67] = "0b00111101011011000110110011110110";
        ram[68] = "0b00111101000000101010001010001101";
        ram[69] = "0b10111101100001111111010100000100";
        ram[70] = "0b00111101001101110100010011110110";
        ram[71] = "0b10111101101101010101100011000010";
        ram[72] = "0b00111100111110001011111000100010";
        ram[73] = "0b10111101111010010111111010011001";
        ram[74] = "0b10111101110011011010111000111110";
        ram[75] = "0b10111110000101100010111000001010";
        ram[76] = "0b10111101100011011010000111000100";
        ram[77] = "0b00111110000100110011001001101010";
        ram[78] = "0b00111101110111001001001111101010";
        ram[79] = "0b00111101111101110010111111111101";
        ram[80] = "0b00111100100101110101100110111001";
        ram[81] = "0b00111101101000110000000111111000";
        ram[82] = "0b10111101001010000001001001101110";
        ram[83] = "0b10111101010100000011101110011101";
        ram[84] = "0b00111101100110001110011001110011";
        ram[85] = "0b10111101100001010011000101010101";
        ram[86] = "0b10111101011101010110011111110111";
        ram[87] = "0b00111101110001101011101111011100";
        ram[88] = "0b10111110001101000101100000000100";
        ram[89] = "0b10111101111111101111010000010111";
        ram[90] = "0b00111110000101010010100011110010";
        ram[91] = "0b10111110010001011100000001110110";
        ram[92] = "0b10111011010100101100111011101111";
        ram[93] = "0b10111110000110001111010101111111";
        ram[94] = "0b00111101101010110101101100100000";
        ram[95] = "0b10111100100000000100110011110111";
        ram[96] = "0b00111110000111010111010111100010";
        ram[97] = "0b10111011110101111110011100000111";
        ram[98] = "0b10111101001101000010001011001101";
        ram[99] = "0b10111110001000101010110010111000";
        ram[100] = "0b00111110000101000100100011001111";
        ram[101] = "0b00111110000011001110100001010011";
        ram[102] = "0b00111101000101010101110010001001";
        ram[103] = "0b00111110000011000010100110111111";
        ram[104] = "0b10111101111010011110101110100111";
        ram[105] = "0b00111100011010000010110100010000";
        ram[106] = "0b00111101100000111000010000110100";
        ram[107] = "0b10111101110111101110110101000110";
        ram[108] = "0b00111101011010100101101010010111";
        ram[109] = "0b00111101111000010111000100011001";
        ram[110] = "0b10111100001001100111001001011011";
        ram[111] = "0b00111110000000011101011001001001";
        ram[112] = "0b10111101010111100011010010000100";
        ram[113] = "0b00111101011101000010010001011111";
        ram[114] = "0b10111101101001100000101000000101";
        ram[115] = "0b00111100101110100010010110010110";
        ram[116] = "0b10111100101110011100101010010010";
        ram[117] = "0b10111100110111010100101110100000";
        ram[118] = "0b00111101100111010001100000111111";
        ram[119] = "0b00111101110100001011110100000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_11) {
meminst = new inference_conv2d_f3_2_0_11_ram("inference_conv2d_f3_2_0_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_11() {
    delete meminst;
}


};//endmodule
#endif
