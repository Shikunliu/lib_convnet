// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_8_H__
#define __inference_conv2d_f3_4_1_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_8_ram) {
        ram[0] = "0b00111101001110101111100001011001";
        ram[1] = "0b10111101110111001111101110111001";
        ram[2] = "0b00111101000111110011000011101000";
        ram[3] = "0b10111101110110110001010110110101";
        ram[4] = "0b10111101010011101011110110011110";
        ram[5] = "0b10111100101111101111100011001111";
        ram[6] = "0b00111100001000100011110000001010";
        ram[7] = "0b00111101101011101000101111001111";
        ram[8] = "0b00111110000111111010100011111000";
        ram[9] = "0b10111101101100010101110000010011";
        ram[10] = "0b10111100000011000010000100001011";
        ram[11] = "0b00111101111111110000100100001111";
        ram[12] = "0b10111101110001100010101010111100";
        ram[13] = "0b10111101101010001100110001100101";
        ram[14] = "0b00111101010101100001100011011100";
        ram[15] = "0b00111110001000010001101110100100";
        ram[16] = "0b10111101110010100000111101101000";
        ram[17] = "0b10111101010101100011000100101111";
        ram[18] = "0b00111101001000000011101001101000";
        ram[19] = "0b00111101110001010010011000000010";
        ram[20] = "0b10111110000011111111011100010110";
        ram[21] = "0b00111101101110010110100100110101";
        ram[22] = "0b10111011100111111111111100111001";
        ram[23] = "0b00111101100011110100001010100001";
        ram[24] = "0b10111110000100000111011001111101";
        ram[25] = "0b00111101100111100100101011100111";
        ram[26] = "0b10111100110110001010011100101011";
        ram[27] = "0b00111100010101010100100010011100";
        ram[28] = "0b10111101010101101010111110111111";
        ram[29] = "0b10111011110001010011101101001001";
        ram[30] = "0b00111110000101000110011000101100";
        ram[31] = "0b00111100011011111101011001010010";
        ram[32] = "0b10111101000101001011111111100000";
        ram[33] = "0b00111101000101010000100000111010";
        ram[34] = "0b00111101001010001001010111101100";
        ram[35] = "0b00111101111111000100000010001110";
        ram[36] = "0b10111100100011101011001110001101";
        ram[37] = "0b10111101000111010011100101111100";
        ram[38] = "0b00111101010101010000001100110010";
        ram[39] = "0b00111101101101001010100011000001";
        ram[40] = "0b10111100100000011100111110101110";
        ram[41] = "0b10111110001100011111011000000001";
        ram[42] = "0b00111100111011011000011011101100";
        ram[43] = "0b10111110000000101100101111101010";
        ram[44] = "0b00111101111000101111110111111100";
        ram[45] = "0b10111100001010011010011001010111";
        ram[46] = "0b10111101101111111100111001100111";
        ram[47] = "0b00111100111000100110100110000010";
        ram[48] = "0b00111101000010000010100011111001";
        ram[49] = "0b00111101000100101111001111011110";
        ram[50] = "0b10111011100110011101011110101101";
        ram[51] = "0b10111101000010000000010001000110";
        ram[52] = "0b10111011110010000001001010101001";
        ram[53] = "0b10111101000100100011001110101001";
        ram[54] = "0b10111101011110011001001011111110";
        ram[55] = "0b00111101110000100111001111100011";
        ram[56] = "0b10111101010000011010100011100010";
        ram[57] = "0b10111010011111000001000011111111";
        ram[58] = "0b10111011110100010001001010000010";
        ram[59] = "0b10111101111001001010011100101111";
        ram[60] = "0b00111100101001011111010010111100";
        ram[61] = "0b00111101010000000010011001000110";
        ram[62] = "0b10111110001101001001011101110100";
        ram[63] = "0b00111101100011101000000110110000";
        ram[64] = "0b00111101110100100110101111111000";
        ram[65] = "0b10111100101011111000110110001100";
        ram[66] = "0b00111101110011100110011101010001";
        ram[67] = "0b00111100100100001010010000101000";
        ram[68] = "0b00111101111000001000010010100101";
        ram[69] = "0b10111100001001111110110111110000";
        ram[70] = "0b00111101111000000001000101001101";
        ram[71] = "0b10111110000010000100111011000110";
        ram[72] = "0b00111100111111110100000010001000";
        ram[73] = "0b10111100010111110110110110111001";
        ram[74] = "0b10111100111010100010110011111010";
        ram[75] = "0b00111101101010111000101100110100";
        ram[76] = "0b10111100111000101011101110000001";
        ram[77] = "0b00111101100001110010011111101010";
        ram[78] = "0b10111101100001111010000011111001";
        ram[79] = "0b00111101010010010111100001101010";
        ram[80] = "0b10111101110000101110000110000100";
        ram[81] = "0b10111101010101110001101000010011";
        ram[82] = "0b00111101001000001010110000010010";
        ram[83] = "0b10111101100001100001110111100100";
        ram[84] = "0b00111110001110110001000001110111";
        ram[85] = "0b00111011111111100110010101001011";
        ram[86] = "0b00111011110001110111011111111001";
        ram[87] = "0b00111101100101001011101011110011";
        ram[88] = "0b10111101010000100011010111101011";
        ram[89] = "0b00111110001111010010011001110100";
        ram[90] = "0b10110111101101101001010100001110";
        ram[91] = "0b10111101101001000000110001000001";
        ram[92] = "0b00111101010010101101010000111010";
        ram[93] = "0b00111100111010000111011001000001";
        ram[94] = "0b00111100100100000001110000001101";
        ram[95] = "0b00111100101111110101100110110010";
        ram[96] = "0b00110101110100110110110111011101";
        ram[97] = "0b00111101000000010001110110100010";
        ram[98] = "0b10111110000011100101011111011010";
        ram[99] = "0b10111100110111000010010111010000";
        ram[100] = "0b10111100000101010001100000010101";
        ram[101] = "0b00111011111110011010011011001011";
        ram[102] = "0b10111110001111001001111010101010";
        ram[103] = "0b10111110000010001001100010110011";
        ram[104] = "0b00111101110000110000011000011100";
        ram[105] = "0b00111101010111110110101011100100";
        ram[106] = "0b10111101111101011100100111100110";
        ram[107] = "0b00111110000101010110010001110011";
        ram[108] = "0b00111110000110001100101110001110";
        ram[109] = "0b00111100101000100100100100000000";
        ram[110] = "0b00111101010111000101010011001010";
        ram[111] = "0b10111101111100111011010010110011";
        ram[112] = "0b00111101111000101110110000101001";
        ram[113] = "0b10111101000001000011010000100111";
        ram[114] = "0b10111100001010001001111111000111";
        ram[115] = "0b10111110010001111101010100100100";
        ram[116] = "0b10111100010000010111001010010001";
        ram[117] = "0b10111110000010001101011110011101";
        ram[118] = "0b10111100100100000111011101000111";
        ram[119] = "0b00111101010111000001011010000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_8) {
meminst = new inference_conv2d_f3_4_1_8_ram("inference_conv2d_f3_4_1_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_8() {
    delete meminst;
}


};//endmodule
#endif
