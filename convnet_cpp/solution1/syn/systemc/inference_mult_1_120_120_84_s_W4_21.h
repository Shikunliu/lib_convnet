// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_21_H__
#define __inference_mult_1_120_120_84_s_W4_21_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_21_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_21_ram) {
        ram[0] = "0b10111101110011001010001111101000";
        ram[1] = "0b10111101010010111110001001110001";
        ram[2] = "0b00111101110111111100011011011010";
        ram[3] = "0b10111110001111100001000010001100";
        ram[4] = "0b00111100111010011101100101001101";
        ram[5] = "0b10111101101011110100000111010111";
        ram[6] = "0b10111100111100100010100110110011";
        ram[7] = "0b00111101011110101110100100001010";
        ram[8] = "0b10111101100011001001110010111001";
        ram[9] = "0b10111110000001101111111111000001";
        ram[10] = "0b10111101011100111110011011010010";
        ram[11] = "0b10111011001001110100000100100010";
        ram[12] = "0b10111110000110010001010000101011";
        ram[13] = "0b00111110010110110110011101111111";
        ram[14] = "0b10111101100111110111011100110111";
        ram[15] = "0b10111101110110111110110100110001";
        ram[16] = "0b10111101001110010000001011101011";
        ram[17] = "0b00111100100111111110010110101110";
        ram[18] = "0b10111101100101000110101111001000";
        ram[19] = "0b10111101001101100111101100000001";
        ram[20] = "0b00111101000111100110101101110110";
        ram[21] = "0b10111101110100110101101010000110";
        ram[22] = "0b00111110000011101111001010000100";
        ram[23] = "0b10111101010011001001101000100111";
        ram[24] = "0b10111010101010011111001101011001";
        ram[25] = "0b10111011110100011011001111010010";
        ram[26] = "0b10111110010000111111110110010011";
        ram[27] = "0b00111101000111010111010011010110";
        ram[28] = "0b00111100000000000111001011101101";
        ram[29] = "0b00111101000010010000101000011010";
        ram[30] = "0b00111101001101001111001001010000";
        ram[31] = "0b10111100010101010110101000101010";
        ram[32] = "0b00111110010001101110001001100101";
        ram[33] = "0b10111101010001001011111100010111";
        ram[34] = "0b00111101100100101100111001111100";
        ram[35] = "0b10111101101001111001011110110001";
        ram[36] = "0b00111101001000110101101111010101";
        ram[37] = "0b00111101100110001000100111101010";
        ram[38] = "0b00111101000000110111101000001000";
        ram[39] = "0b10111101000111100100101101000101";
        ram[40] = "0b00111101101110101101111011011110";
        ram[41] = "0b00111110000111110110110000100111";
        ram[42] = "0b10111101101010111000101011111110";
        ram[43] = "0b10111101000001010101011010110111";
        ram[44] = "0b10111101110011000010001100100100";
        ram[45] = "0b10111100111000011100101100101100";
        ram[46] = "0b10111101010001111010100010111011";
        ram[47] = "0b00111100101110100011001011001100";
        ram[48] = "0b00111101110001101010110111110111";
        ram[49] = "0b10111101101110110100011011111110";
        ram[50] = "0b00111110001100110111001111110011";
        ram[51] = "0b00111101101001111110100011110101";
        ram[52] = "0b10111101001001110001001001011110";
        ram[53] = "0b10111101101111010000000110100110";
        ram[54] = "0b10111101000101101011101111101001";
        ram[55] = "0b10111110001111101010111101101000";
        ram[56] = "0b00111101101001000111000010110101";
        ram[57] = "0b00111101001110101011111110000100";
        ram[58] = "0b00111110000111101101001010001001";
        ram[59] = "0b00111101000001000001000010000001";
        ram[60] = "0b00111101000111000000100111101100";
        ram[61] = "0b10111101110010001010001000111110";
        ram[62] = "0b00111110000001111011001111011001";
        ram[63] = "0b00111100100110100110111110000010";
        ram[64] = "0b10111100001001011100101100000000";
        ram[65] = "0b10111100101100111100110111111000";
        ram[66] = "0b10111110010001100110101111101000";
        ram[67] = "0b10111110000100010110010011000111";
        ram[68] = "0b00111110000011100010110100011111";
        ram[69] = "0b00111100110011111111100111011110";
        ram[70] = "0b10111101110011010111001110000110";
        ram[71] = "0b00111101001011000001011011111010";
        ram[72] = "0b10111110000111111110111001110000";
        ram[73] = "0b10111101100100001110010100101011";
        ram[74] = "0b00111101110000011101011000101110";
        ram[75] = "0b00111110000000011011110110100101";
        ram[76] = "0b00111110010010000100101000001110";
        ram[77] = "0b10111101000111010100000100111111";
        ram[78] = "0b10111100100100010000110001100010";
        ram[79] = "0b00111100110100000011110100101111";
        ram[80] = "0b10111101110100000100111101101110";
        ram[81] = "0b10111101100000111100101110001111";
        ram[82] = "0b10111101100011001111011011011001";
        ram[83] = "0b00111101110110100110100110111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_21) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_21_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_21) {
meminst = new inference_mult_1_120_120_84_s_W4_21_ram("inference_mult_1_120_120_84_s_W4_21_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_21() {
    delete meminst;
}


};//endmodule
#endif
