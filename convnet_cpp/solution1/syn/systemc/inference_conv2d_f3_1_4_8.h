// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_8_H__
#define __inference_conv2d_f3_1_4_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_8_ram) {
        ram[0] = "0b00111101000101100111100000010010";
        ram[1] = "0b10111101011111101100010110100011";
        ram[2] = "0b00111101001000101010100001101100";
        ram[3] = "0b10111101011011000100000100100001";
        ram[4] = "0b10111011010111110010110100100010";
        ram[5] = "0b10111101100110101010010000001011";
        ram[6] = "0b10111101100010011011001010000001";
        ram[7] = "0b10111101100100101001110010100000";
        ram[8] = "0b10111101110100011110100001100000";
        ram[9] = "0b00111110001011100011010110000011";
        ram[10] = "0b10111101010011011110001001110111";
        ram[11] = "0b10111100000001010111100000001111";
        ram[12] = "0b00111101111011001101011101001001";
        ram[13] = "0b00111101110111011001011111110110";
        ram[14] = "0b00111101111000100010000101000010";
        ram[15] = "0b00111100100001110101100010111010";
        ram[16] = "0b10111101110000110110001110110010";
        ram[17] = "0b00111110010100111100110100010100";
        ram[18] = "0b00111100101100101110001100010111";
        ram[19] = "0b00111101000100110101011101111011";
        ram[20] = "0b00111110010101011010100110101000";
        ram[21] = "0b10111100110101110000101001110011";
        ram[22] = "0b10111101110101111110110010111011";
        ram[23] = "0b00111100101100101101001111111101";
        ram[24] = "0b10111110010001100010100011001100";
        ram[25] = "0b00111101110000111110001101001111";
        ram[26] = "0b00111101001110010111110110110101";
        ram[27] = "0b10111101100001000011011101110101";
        ram[28] = "0b00111100100111100100101101111010";
        ram[29] = "0b00111110000110111001000100101110";
        ram[30] = "0b10111101000011000000110111110110";
        ram[31] = "0b10111101011101000111010000010000";
        ram[32] = "0b10111011100000100100011111101110";
        ram[33] = "0b10111100011111101110001110100000";
        ram[34] = "0b10111101110000110010010110000100";
        ram[35] = "0b00111110001010011111100110001011";
        ram[36] = "0b10111110001110111011100011000011";
        ram[37] = "0b00111110000110011100111110011010";
        ram[38] = "0b00111100001000110010001101111011";
        ram[39] = "0b00111100101010100101101010110010";
        ram[40] = "0b00111101100000100110110001001001";
        ram[41] = "0b10111110000001001101000110100110";
        ram[42] = "0b10111100011000001000110100001001";
        ram[43] = "0b10111101101000110010000010110001";
        ram[44] = "0b00111110000010111101001100111101";
        ram[45] = "0b10111101110111111110001110110000";
        ram[46] = "0b00111110001111011000001011111101";
        ram[47] = "0b10111101100110101110011110101101";
        ram[48] = "0b10111101101111000101001010110001";
        ram[49] = "0b00111101100011010011110111100100";
        ram[50] = "0b00111101000000011000110110011111";
        ram[51] = "0b10111101001000110101011000010001";
        ram[52] = "0b00111101011011111001010001011101";
        ram[53] = "0b00111101000100000100101001001011";
        ram[54] = "0b00111101100100110011000001011110";
        ram[55] = "0b10111110000001110001110111100111";
        ram[56] = "0b10111100100101011000011010110000";
        ram[57] = "0b10111100000111001011111000000111";
        ram[58] = "0b10111101111101000001101111111100";
        ram[59] = "0b10111001011111000111000101001101";
        ram[60] = "0b10111101011111100010101011111001";
        ram[61] = "0b10111101111001000101001101001100";
        ram[62] = "0b10111100110111000011011101101110";
        ram[63] = "0b00111101000010010111000010100111";
        ram[64] = "0b00111101110000010111100101101111";
        ram[65] = "0b00111100110011001100111011100110";
        ram[66] = "0b00111101011111111001100010110111";
        ram[67] = "0b00111101000011101101000011101001";
        ram[68] = "0b10111101100111101010001101011001";
        ram[69] = "0b10111101111101101100101101010011";
        ram[70] = "0b00111110010000111001111110111010";
        ram[71] = "0b10111101011110010010000111011010";
        ram[72] = "0b00111011111110110011011100011000";
        ram[73] = "0b10111101110100010000110110111111";
        ram[74] = "0b00111110000111110011000010100101";
        ram[75] = "0b10111100101010100001000110000001";
        ram[76] = "0b10111100011000011010101000111111";
        ram[77] = "0b00111110000001000010101010101010";
        ram[78] = "0b10111101111110011000100001001100";
        ram[79] = "0b10111101110110111001010000010000";
        ram[80] = "0b10111101000001001000000111000000";
        ram[81] = "0b00111101010000010110101110001011";
        ram[82] = "0b00111110000110111111110110110101";
        ram[83] = "0b10111100110110110010111011111011";
        ram[84] = "0b10111101000110001101110100010001";
        ram[85] = "0b00111100101011011011000101001001";
        ram[86] = "0b10111100001100001000010111011010";
        ram[87] = "0b00111101010010001000110111011001";
        ram[88] = "0b10111100100000000101000100101001";
        ram[89] = "0b10111101101110110110010110101010";
        ram[90] = "0b10111101010011011010011110001000";
        ram[91] = "0b10111100101010010000111111111001";
        ram[92] = "0b10111101000000101011000100000101";
        ram[93] = "0b10111100111001101011011111000101";
        ram[94] = "0b10111101001001100011110010010000";
        ram[95] = "0b10111101111100100110100111100000";
        ram[96] = "0b10111100000000101000011110111010";
        ram[97] = "0b10111101100000000100000001111101";
        ram[98] = "0b10111101110100111100000111001110";
        ram[99] = "0b00111101011110011110110100010001";
        ram[100] = "0b00111101101110100000011000100001";
        ram[101] = "0b00111101000010110011000101110010";
        ram[102] = "0b10111101100100101100010100001100";
        ram[103] = "0b00111011100001101010110101000011";
        ram[104] = "0b10111101110110110101010010100000";
        ram[105] = "0b00111101100111110111000011111001";
        ram[106] = "0b10111101111010010111110010000001";
        ram[107] = "0b00111100000110000100101010011010";
        ram[108] = "0b10111101110110011000100011010011";
        ram[109] = "0b00111100111110010010111111001100";
        ram[110] = "0b10111101010011101111100000111011";
        ram[111] = "0b10111101110010100101011010110110";
        ram[112] = "0b10111100101011011010001100000110";
        ram[113] = "0b00111101101111111110010101011110";
        ram[114] = "0b10111011001010111101111101000001";
        ram[115] = "0b10111100101110101110001010001010";
        ram[116] = "0b00111101101011110101101010111111";
        ram[117] = "0b10111101011101001010101111011001";
        ram[118] = "0b00111011111001011011101110000110";
        ram[119] = "0b00111100111101101000011110110001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_8) {
meminst = new inference_conv2d_f3_1_4_8_ram("inference_conv2d_f3_1_4_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_8() {
    delete meminst;
}


};//endmodule
#endif
