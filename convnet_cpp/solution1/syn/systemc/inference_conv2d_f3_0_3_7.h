// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_7_H__
#define __inference_conv2d_f3_0_3_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_7_ram) {
        ram[0] = "0b10111101110010001010110101000000";
        ram[1] = "0b10111101010011010111000101101101";
        ram[2] = "0b10111101001010111101111110011101";
        ram[3] = "0b10111101100100110010111001010011";
        ram[4] = "0b00111101011111000001101010110011";
        ram[5] = "0b10111101010011001001110111010011";
        ram[6] = "0b10111100111100000001011001111110";
        ram[7] = "0b00111011010100111101111011100101";
        ram[8] = "0b10111101111110110010001011010001";
        ram[9] = "0b10111101000010100010010110111110";
        ram[10] = "0b00111101010001010101100101110001";
        ram[11] = "0b00111101010011000110011111101101";
        ram[12] = "0b10111101101010001000011111000100";
        ram[13] = "0b10111011011111101001001111101111";
        ram[14] = "0b00111101111001110101111111110110";
        ram[15] = "0b10111101000000011111001110001011";
        ram[16] = "0b00111101101000111001101110001001";
        ram[17] = "0b00111101110110001011101101001101";
        ram[18] = "0b10111101101000011110111001100111";
        ram[19] = "0b00111110000100101110010111011110";
        ram[20] = "0b10111101000100011100101011001110";
        ram[21] = "0b10111100110001010100101011000011";
        ram[22] = "0b10111101101101001001100111010000";
        ram[23] = "0b10111101011011100101001010101001";
        ram[24] = "0b00111100101001011111010011110010";
        ram[25] = "0b10111101000101010110111111010100";
        ram[26] = "0b10111101100000011100111111110001";
        ram[27] = "0b10111101111001011110011011111111";
        ram[28] = "0b00111100101011001100110111110100";
        ram[29] = "0b10111110001011001111101100110011";
        ram[30] = "0b10111110000110111110000110101000";
        ram[31] = "0b00111101100010000000110101100101";
        ram[32] = "0b00111101101100101101011000111110";
        ram[33] = "0b00111101101011110100000101101100";
        ram[34] = "0b00111101101000011010101010101010";
        ram[35] = "0b10111101111100011010010010111110";
        ram[36] = "0b10111101110100010010101100011011";
        ram[37] = "0b10111100001000111101011000011110";
        ram[38] = "0b00111101011011010010001110000100";
        ram[39] = "0b00111110000011000111101001111101";
        ram[40] = "0b10111101001100011010010001101101";
        ram[41] = "0b10111101101010001101001010010101";
        ram[42] = "0b00111101100111111000000001111110";
        ram[43] = "0b10111011100001110001110001101001";
        ram[44] = "0b00111101110101010011010001111010";
        ram[45] = "0b00111010111000111001001100111000";
        ram[46] = "0b00111101101010010011010100110011";
        ram[47] = "0b00111101100100010110111111110010";
        ram[48] = "0b00111100110101101001101000001011";
        ram[49] = "0b00111100000001111101101001101010";
        ram[50] = "0b10111100110100010111100100111010";
        ram[51] = "0b10111100011101001100000100001000";
        ram[52] = "0b00111110001101111110101100101001";
        ram[53] = "0b00111110001011000001111110000110";
        ram[54] = "0b10111011110100101001110100011011";
        ram[55] = "0b00111101010101000010010100011011";
        ram[56] = "0b00111101011111011000001011100011";
        ram[57] = "0b00111101010101110101100100110011";
        ram[58] = "0b10111101100011100100110100110101";
        ram[59] = "0b10111100101000001101001011011110";
        ram[60] = "0b10111101111010101110111010100110";
        ram[61] = "0b00111100111001010000110000101001";
        ram[62] = "0b10111100011000001111101000010110";
        ram[63] = "0b10111101101111000101110011010000";
        ram[64] = "0b00111101000101001100000100001000";
        ram[65] = "0b10111110000011001001001110100111";
        ram[66] = "0b10111101100010000011000001000011";
        ram[67] = "0b10111101000111111010011100110000";
        ram[68] = "0b10111011110001001001000000010010";
        ram[69] = "0b00111101101001000000111101110100";
        ram[70] = "0b10111101101100100010101111100111";
        ram[71] = "0b00111101100110100110101101010001";
        ram[72] = "0b10111100000111101100100111001111";
        ram[73] = "0b10111101000101101101010111101011";
        ram[74] = "0b00111101010101111101010111111010";
        ram[75] = "0b10111110010100000101000111001010";
        ram[76] = "0b10111101100000111000000000010000";
        ram[77] = "0b00111101000100101100010100110100";
        ram[78] = "0b10111110000000100011010001100101";
        ram[79] = "0b00111101101111010110000000000101";
        ram[80] = "0b10111101100000111111010000100011";
        ram[81] = "0b00111100100000010110111110100001";
        ram[82] = "0b10111100100010100100011011100001";
        ram[83] = "0b00111011000101110101110001111110";
        ram[84] = "0b10111101010101101101000001011100";
        ram[85] = "0b00111100101101010100100111111001";
        ram[86] = "0b00111001111011010100011100110000";
        ram[87] = "0b00111110001111100101111100110001";
        ram[88] = "0b10111101100111101001010000100101";
        ram[89] = "0b10111101101000111100101110001111";
        ram[90] = "0b10111101010001010011111111110110";
        ram[91] = "0b10111101111010011111001011111110";
        ram[92] = "0b00111101111000001001010001100000";
        ram[93] = "0b10111110000011001001110101011010";
        ram[94] = "0b00111100110111010001111000011110";
        ram[95] = "0b10111101100100001000010100011110";
        ram[96] = "0b10111101100010010110100011110010";
        ram[97] = "0b00111101100111010101100001010000";
        ram[98] = "0b00111101000111101011100101011110";
        ram[99] = "0b10111011110011100111101010100010";
        ram[100] = "0b10111011000100100011000111000110";
        ram[101] = "0b00111101100000011001101110000011";
        ram[102] = "0b10111110001001010010001100101101";
        ram[103] = "0b10111101001001110010111010010011";
        ram[104] = "0b00111101110100100001000010111111";
        ram[105] = "0b00111101100010000111111101010011";
        ram[106] = "0b10111011111110100101110100111110";
        ram[107] = "0b10111101100001111100001011001010";
        ram[108] = "0b00111101001011101100001010001011";
        ram[109] = "0b10111101110001010011001101000110";
        ram[110] = "0b10111110010010010101101010101111";
        ram[111] = "0b10111101100110100011100011111100";
        ram[112] = "0b10111101100000101101010000001011";
        ram[113] = "0b10111101011010101011100101111101";
        ram[114] = "0b00111101100101001000001000000011";
        ram[115] = "0b10111101000001010010110100110001";
        ram[116] = "0b00111110010101101000110111111100";
        ram[117] = "0b00111101110111110000000100110010";
        ram[118] = "0b00111011100110100111111011110010";
        ram[119] = "0b10111110001001101111011010010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_7) {
meminst = new inference_conv2d_f3_0_3_7_ram("inference_conv2d_f3_0_3_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_7() {
    delete meminst;
}


};//endmodule
#endif
