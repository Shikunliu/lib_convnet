// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_2_f2_3_2_0_H__
#define __inference_conv2d_2_f2_3_2_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_2_f2_3_2_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 16;
  static const unsigned AddressWidth = 4;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_2_f2_3_2_0_ram) {
        ram[0] = "0b00111101010100001111000010011001";
        ram[1] = "0b00111100000101001010101101111110";
        ram[2] = "0b00111110001000001001011111001000";
        ram[3] = "0b00111101111101000001010100101011";
        ram[4] = "0b10111101110011110101100110001010";
        ram[5] = "0b10111110001001011110100010010010";
        ram[6] = "0b10111110001100100100011100000010";
        ram[7] = "0b10111110011110101010110001010100";
        ram[8] = "0b00111101110100010001111010000110";
        ram[9] = "0b00111101101001111101010111010010";
        ram[10] = "0b00111011110101000001001010100111";
        ram[11] = "0b10111110010100100000100011100001";
        ram[12] = "0b10111100010100100000000111000000";
        ram[13] = "0b00111110000011100100111010101101";
        ram[14] = "0b10111101001010110111110001010000";
        ram[15] = "0b00111101111101010110011011001111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_2_f2_3_2_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 16;
static const unsigned AddressWidth = 4;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_2_f2_3_2_0_ram* meminst;


SC_CTOR(inference_conv2d_2_f2_3_2_0) {
meminst = new inference_conv2d_2_f2_3_2_0_ram("inference_conv2d_2_f2_3_2_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_2_f2_3_2_0() {
    delete meminst;
}


};//endmodule
#endif
