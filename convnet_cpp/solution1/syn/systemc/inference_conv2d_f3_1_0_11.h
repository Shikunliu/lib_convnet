// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_11_H__
#define __inference_conv2d_f3_1_0_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_11_ram) {
        ram[0] = "0b10111100100000001101100011011000";
        ram[1] = "0b10111110000101010011111011110111";
        ram[2] = "0b10111101011000001111111101101111";
        ram[3] = "0b00111101100110000110100110101100";
        ram[4] = "0b00111100001000101100110010101001";
        ram[5] = "0b00111110000000011001101011001000";
        ram[6] = "0b10111100101010100010001101010101";
        ram[7] = "0b00111100100110100000101011011001";
        ram[8] = "0b10111101010000001110101000100110";
        ram[9] = "0b10111101001011010110011110010010";
        ram[10] = "0b10111101110000110100101011100110";
        ram[11] = "0b10111101110110101001001100101001";
        ram[12] = "0b10111110001010001001010100000111";
        ram[13] = "0b10111101111111011111100011110100";
        ram[14] = "0b00111101110011011000000110101110";
        ram[15] = "0b10111110001100101111101011010111";
        ram[16] = "0b00111100110011111101111011010000";
        ram[17] = "0b10111101100101111001100111110011";
        ram[18] = "0b10111011010011101101100011101100";
        ram[19] = "0b10111011101110001010111110001001";
        ram[20] = "0b00111100011011011010100001111010";
        ram[21] = "0b10111101010111100011011101110011";
        ram[22] = "0b00111110000001101011011000010111";
        ram[23] = "0b00111101101000111111010101001011";
        ram[24] = "0b00111101100111100111001001000110";
        ram[25] = "0b00111101100111001010011111010110";
        ram[26] = "0b00111101100101010001001110101000";
        ram[27] = "0b10111101101101101101101100110110";
        ram[28] = "0b10111110001010000110010010001000";
        ram[29] = "0b00111100101001100001100011001110";
        ram[30] = "0b00111110011101010100011110011101";
        ram[31] = "0b10111101100100100001001000000001";
        ram[32] = "0b10111101000110101111000110100011";
        ram[33] = "0b00111110001100010000011001101000";
        ram[34] = "0b00111101001000000111101110000110";
        ram[35] = "0b10111100111001111010111100000110";
        ram[36] = "0b00111101010111000011000101110100";
        ram[37] = "0b00111101110100100001001101011110";
        ram[38] = "0b10111101001001001100101100100110";
        ram[39] = "0b10111101101101101011000010010110";
        ram[40] = "0b00111101010100010001001111101111";
        ram[41] = "0b10111100001111101000011100100100";
        ram[42] = "0b10111101011011001100100101010111";
        ram[43] = "0b10111101110011110000011000101101";
        ram[44] = "0b10111101100000010111101111011001";
        ram[45] = "0b00111101011101110011101110111100";
        ram[46] = "0b10111101100011010101011110100010";
        ram[47] = "0b10111101100000101000101010010111";
        ram[48] = "0b00111110000101010111100100101001";
        ram[49] = "0b10111101000000101101110100101010";
        ram[50] = "0b10111100111001110010010011010010";
        ram[51] = "0b10111100001011010111001101101011";
        ram[52] = "0b00111101100001100111111110000011";
        ram[53] = "0b10111100101101111011101110001110";
        ram[54] = "0b10111110000011101111100001001000";
        ram[55] = "0b10111101000101010101000001000100";
        ram[56] = "0b10111100011010010110100001111001";
        ram[57] = "0b00111101110110000111010010000110";
        ram[58] = "0b10111101110110110110101010100101";
        ram[59] = "0b10111101000000001111100010000011";
        ram[60] = "0b00111100011101111101010100100100";
        ram[61] = "0b00111110001010000110010010001000";
        ram[62] = "0b10111101100110101010011000100100";
        ram[63] = "0b10111010100001011111011101010000";
        ram[64] = "0b00111100101001101011101010110101";
        ram[65] = "0b00111110000100111000001011100100";
        ram[66] = "0b10111110010101010100110100011111";
        ram[67] = "0b00111110011000110011011111101011";
        ram[68] = "0b00111101110000000000001100011000";
        ram[69] = "0b00111101110111001001100000011100";
        ram[70] = "0b10111110010001101011101101010110";
        ram[71] = "0b00111100111000001100110010010100";
        ram[72] = "0b10111110000001000011100010001111";
        ram[73] = "0b00111101110110011000011101000000";
        ram[74] = "0b10111100101011111000100111000110";
        ram[75] = "0b10111100001000111100110110010000";
        ram[76] = "0b10111110000001100100001100000011";
        ram[77] = "0b00111100100110111101101101011110";
        ram[78] = "0b00111101000101100110101110010111";
        ram[79] = "0b00111101101110110100110111101010";
        ram[80] = "0b00111110001011100001101111010010";
        ram[81] = "0b00111100111001111011010001000100";
        ram[82] = "0b00111100110010010101011110011000";
        ram[83] = "0b00111101101001110001100000100010";
        ram[84] = "0b10111110010000100101010010100100";
        ram[85] = "0b10111101101110011111111010100001";
        ram[86] = "0b10111110000001011111101111111000";
        ram[87] = "0b10111110010001011100110110010010";
        ram[88] = "0b00111100001110000101000111101100";
        ram[89] = "0b00111101111110010010011001000010";
        ram[90] = "0b00111110000011101111101101101110";
        ram[91] = "0b00111101010000010001111000101000";
        ram[92] = "0b10111100011100000010100011110010";
        ram[93] = "0b10111100110001100101100000111111";
        ram[94] = "0b10111100110101000001001111101001";
        ram[95] = "0b10111101110001111110010100100001";
        ram[96] = "0b10111110001001110010001110101011";
        ram[97] = "0b00111101011101110011110101101001";
        ram[98] = "0b10111101011101111011011101110111";
        ram[99] = "0b00111101110101001101001001110000";
        ram[100] = "0b10111100111100110101001111101010";
        ram[101] = "0b00111101100101110001011011000101";
        ram[102] = "0b00111101100110111010111110110001";
        ram[103] = "0b00111101101001011001000101111101";
        ram[104] = "0b10111101100011111000110000101111";
        ram[105] = "0b00111101100111100011011010011100";
        ram[106] = "0b10111011100101000001101100101010";
        ram[107] = "0b00111101101001111010011100101001";
        ram[108] = "0b00111110000111100010101100000110";
        ram[109] = "0b10111110000011100011100100101110";
        ram[110] = "0b00111101100111011111100011100111";
        ram[111] = "0b00111100010010010011000001100000";
        ram[112] = "0b00111101000110110100011001111000";
        ram[113] = "0b00111101111011110000101011100101";
        ram[114] = "0b00111101110011010110001111001100";
        ram[115] = "0b10111101100001010011110101100100";
        ram[116] = "0b10111001100111010000111001000011";
        ram[117] = "0b00111101111101111001001100010100";
        ram[118] = "0b00111110000000110111000010001011";
        ram[119] = "0b00111101001000100010001001001111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_11) {
meminst = new inference_conv2d_f3_1_0_11_ram("inference_conv2d_f3_1_0_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_11() {
    delete meminst;
}


};//endmodule
#endif
