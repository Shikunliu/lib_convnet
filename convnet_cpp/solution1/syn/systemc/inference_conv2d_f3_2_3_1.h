// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_1_H__
#define __inference_conv2d_f3_2_3_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_1_ram) {
        ram[0] = "0b00111100111011000101111101101111";
        ram[1] = "0b10111101001010100111100110100001";
        ram[2] = "0b10111101101010100010011101011110";
        ram[3] = "0b10111100111010111010111011011010";
        ram[4] = "0b00111100111111100101010010011010";
        ram[5] = "0b10111101110100111110111011100101";
        ram[6] = "0b10111101000101001011111010000011";
        ram[7] = "0b00111101010010011100011011110011";
        ram[8] = "0b00111101101010101000011011001010";
        ram[9] = "0b00111101111000110111000001001000";
        ram[10] = "0b00111100010011100001011110111011";
        ram[11] = "0b10111101010000001001001001100010";
        ram[12] = "0b10111110001000100011110011001001";
        ram[13] = "0b10111101000010010001011100000000";
        ram[14] = "0b10111100110110010010101010101001";
        ram[15] = "0b00111011101101110111010111111000";
        ram[16] = "0b10111101101110000000110000010110";
        ram[17] = "0b10111101011110111100000111111101";
        ram[18] = "0b00111100011111010011100111101000";
        ram[19] = "0b10111110000011011011111101001000";
        ram[20] = "0b10111101010110001101010011111110";
        ram[21] = "0b10111100101000011001000000001000";
        ram[22] = "0b10111101100011011100100110001111";
        ram[23] = "0b10111101100110100011011111101111";
        ram[24] = "0b00111100110110001011000111011101";
        ram[25] = "0b10111101000111011011010101101101";
        ram[26] = "0b10111101101000111010110110101100";
        ram[27] = "0b10111100100011110011101001100101";
        ram[28] = "0b00111101001001010110011010100111";
        ram[29] = "0b00111110000011011010011011100111";
        ram[30] = "0b00111101101100001101100110000111";
        ram[31] = "0b00111100110101001101011011110010";
        ram[32] = "0b00111110010000001000101010101101";
        ram[33] = "0b10111101100111011101110110100100";
        ram[34] = "0b00111110001110001010101010000110";
        ram[35] = "0b00111011110001111010101001001110";
        ram[36] = "0b00111101110100100000100101101000";
        ram[37] = "0b00111101111000000010110010010001";
        ram[38] = "0b00111101101110101110001101111011";
        ram[39] = "0b00111101101000010001110000110111";
        ram[40] = "0b00111100111101001100010000101101";
        ram[41] = "0b10111101110110100101000110100000";
        ram[42] = "0b00111101011011110000110001111000";
        ram[43] = "0b10111110000001011011111000011011";
        ram[44] = "0b00111101000000011100010111010011";
        ram[45] = "0b00111101110001100011111010101001";
        ram[46] = "0b00111101101101101001001101000111";
        ram[47] = "0b00111101000010111100011101001001";
        ram[48] = "0b00111110000000000001110101011100";
        ram[49] = "0b00111101001010010110100001000100";
        ram[50] = "0b00111100101010001010011010110011";
        ram[51] = "0b10111101101101000100011010000001";
        ram[52] = "0b10111100111101010100100111000100";
        ram[53] = "0b00111100000101101101010100001110";
        ram[54] = "0b00111100000001001110100001000111";
        ram[55] = "0b10111110000101101000110100110011";
        ram[56] = "0b10111101101010101110000101110000";
        ram[57] = "0b00111101100111000101100010111001";
        ram[58] = "0b00111100010100110100111110011110";
        ram[59] = "0b00111101111011110100011010101010";
        ram[60] = "0b10111101100110111001001011011011";
        ram[61] = "0b10111101101100010110111111111111";
        ram[62] = "0b10111101100101001101010001010011";
        ram[63] = "0b10111110000000001011000001101100";
        ram[64] = "0b10111101010111000111110111100101";
        ram[65] = "0b00111100100000011011001001010010";
        ram[66] = "0b00111101001101011100001000100100";
        ram[67] = "0b10111110001110100001110100110010";
        ram[68] = "0b10111110000111110110001010110111";
        ram[69] = "0b10111101110001000001000000001000";
        ram[70] = "0b10111101000000001000001100010010";
        ram[71] = "0b10111101000111000010110000011011";
        ram[72] = "0b10111110001011110011010011010111";
        ram[73] = "0b00111100111011101010010101100101";
        ram[74] = "0b10111101001001001010110000011100";
        ram[75] = "0b00111100100001011100001010111000";
        ram[76] = "0b00111110010010001110101001111101";
        ram[77] = "0b00111101100110001011110001110101";
        ram[78] = "0b10111011100011101011110001110001";
        ram[79] = "0b10111101010100110111101110001101";
        ram[80] = "0b10111100110010001111101011100110";
        ram[81] = "0b10111101111011100100110110100001";
        ram[82] = "0b10111110000001010001010111001111";
        ram[83] = "0b00111110010010110101100100010100";
        ram[84] = "0b00111110001000000110011101001001";
        ram[85] = "0b10111101101010000111001100001110";
        ram[86] = "0b10111101011001101111010001100001";
        ram[87] = "0b10111110000010010001111110110100";
        ram[88] = "0b10111011100100110001001011010111";
        ram[89] = "0b00111101100010100010101101110101";
        ram[90] = "0b10111101111010111010101011011110";
        ram[91] = "0b00111101111100000110011110001100";
        ram[92] = "0b10111010001100011000111110000101";
        ram[93] = "0b00111100111000001100001111111011";
        ram[94] = "0b10111101000100001101010010110100";
        ram[95] = "0b00111101100111010111010011111110";
        ram[96] = "0b00111110001100001101010111101001";
        ram[97] = "0b10111100111000110100100010100101";
        ram[98] = "0b00111101011101100101000001010100";
        ram[99] = "0b10111011101001100011001110000110";
        ram[100] = "0b10111100111001000111010101100000";
        ram[101] = "0b00111101111110100101111000110101";
        ram[102] = "0b00111110001000001111010110100001";
        ram[103] = "0b10111101101111110010010001100000";
        ram[104] = "0b10111010100010001101100011010111";
        ram[105] = "0b00111110000111111101011111100100";
        ram[106] = "0b10111110010101110000000111011010";
        ram[107] = "0b10111101100110001110010100110001";
        ram[108] = "0b10111110000110001011111000101111";
        ram[109] = "0b00111110000111101011110100001010";
        ram[110] = "0b00111110010001010111000000111111";
        ram[111] = "0b00111101111010000011110000101001";
        ram[112] = "0b00111101011110010111111101100011";
        ram[113] = "0b10111100000101001111101110011010";
        ram[114] = "0b10111100110001011000100001101011";
        ram[115] = "0b10111100000010011001110100000010";
        ram[116] = "0b00111101001111111110101100100010";
        ram[117] = "0b10111110000100011110010000101110";
        ram[118] = "0b10111101110001000111001110011000";
        ram[119] = "0b00111101011111111100110100100101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_1) {
meminst = new inference_conv2d_f3_2_3_1_ram("inference_conv2d_f3_2_3_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_1() {
    delete meminst;
}


};//endmodule
#endif
