// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_15_H__
#define __inference_conv2d_f3_1_3_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_15_ram) {
        ram[0] = "0b00111101101011110010010101000100";
        ram[1] = "0b00111110000100101101011110110110";
        ram[2] = "0b10111000011101111001100100000101";
        ram[3] = "0b00111101101111101011011001000110";
        ram[4] = "0b10111101000100110010100100000111";
        ram[5] = "0b00111010110010111111111001110001";
        ram[6] = "0b00111110000011110111101001001110";
        ram[7] = "0b00111110001111011000000110101110";
        ram[8] = "0b10111100000010010110010011000011";
        ram[9] = "0b10111101001000110100111001001110";
        ram[10] = "0b10111100011111000111111101000010";
        ram[11] = "0b00111101111010101110101001110100";
        ram[12] = "0b10111101011111100011100100000110";
        ram[13] = "0b10111101011110100110110000001101";
        ram[14] = "0b00111011101101011101001101001100";
        ram[15] = "0b00111101000100001111101110011011";
        ram[16] = "0b00111100110000001001101110011100";
        ram[17] = "0b10111101001111100111111101100010";
        ram[18] = "0b10111101100001110101001100011110";
        ram[19] = "0b00111101110000000000000011110010";
        ram[20] = "0b00111101100010011111001110000100";
        ram[21] = "0b00111101101000000000010011101110";
        ram[22] = "0b00111110000101101100101010001010";
        ram[23] = "0b10111101101110000100111000110011";
        ram[24] = "0b00111101101110101111011001101001";
        ram[25] = "0b00111101110001100100011001011110";
        ram[26] = "0b00111011110001111011010010100000";
        ram[27] = "0b10111101100001001100111000100011";
        ram[28] = "0b10111110001010011111001101000001";
        ram[29] = "0b00111100010001100101110011011100";
        ram[30] = "0b10111100101100111001010010000010";
        ram[31] = "0b10111101011000110110101010111001";
        ram[32] = "0b10111101111110000110111101001000";
        ram[33] = "0b00111101111001011110111101100011";
        ram[34] = "0b00111101110110011001110010111111";
        ram[35] = "0b10111100001000101100101100010001";
        ram[36] = "0b00111101110100111101010110111011";
        ram[37] = "0b10111110010101011011001000001100";
        ram[38] = "0b00111110001011110110111101001100";
        ram[39] = "0b00111110000110101111111110110000";
        ram[40] = "0b00111101101000101010101010000101";
        ram[41] = "0b00111101110111011000010110011101";
        ram[42] = "0b00111100110101000100111110101110";
        ram[43] = "0b10111101110010010010100100111111";
        ram[44] = "0b10111110000001110101101100111110";
        ram[45] = "0b10111100100110000000010111100110";
        ram[46] = "0b00111110000000010100010000000011";
        ram[47] = "0b10111101011011101010010110011010";
        ram[48] = "0b00111101101001010111100001000101";
        ram[49] = "0b00111011100000100010101000100111";
        ram[50] = "0b00111101111001011101111100100010";
        ram[51] = "0b10111101101001010000011010110101";
        ram[52] = "0b00111011100100001010101111110101";
        ram[53] = "0b00111101111110000101111010000001";
        ram[54] = "0b00111101000000000100001010010110";
        ram[55] = "0b00111101100100011011011110111000";
        ram[56] = "0b00111101100001011010101111110111";
        ram[57] = "0b00111110000100100111101110110011";
        ram[58] = "0b10111101100010010110010110100101";
        ram[59] = "0b10111100100110100011001010110001";
        ram[60] = "0b10111101100001001110101011011110";
        ram[61] = "0b00111100110110001000111100001101";
        ram[62] = "0b00111101101011000000111001100001";
        ram[63] = "0b10111101010001001111001110111010";
        ram[64] = "0b10111101100000111000010100011000";
        ram[65] = "0b00111110000000100000001011011010";
        ram[66] = "0b10111101101110001001101011110100";
        ram[67] = "0b00111100110101111110010010001110";
        ram[68] = "0b10111101011110101100111001101000";
        ram[69] = "0b00111001100011010010001000110100";
        ram[70] = "0b00111101100010000001000010110011";
        ram[71] = "0b00111110001100011010011110100000";
        ram[72] = "0b10111110000010111011111110010100";
        ram[73] = "0b10111100110111111010001101101001";
        ram[74] = "0b10111100111101001011011000100000";
        ram[75] = "0b00111110000010110111100100010000";
        ram[76] = "0b00111101101101011110011100101000";
        ram[77] = "0b00111101101100110111110100000101";
        ram[78] = "0b00111100000011110111011101010111";
        ram[79] = "0b10111101011100011010111001001000";
        ram[80] = "0b10111100000000101011010000111010";
        ram[81] = "0b10111101001110111110011001000101";
        ram[82] = "0b00111100101101000000100111110011";
        ram[83] = "0b10111011100111100101011101011001";
        ram[84] = "0b00111101110111011010011000011110";
        ram[85] = "0b00111101000100110000010000000100";
        ram[86] = "0b10111101101011000001100011010000";
        ram[87] = "0b00111110000011101100110110001110";
        ram[88] = "0b10111101111000111010100001100001";
        ram[89] = "0b00111011111000010101011001011100";
        ram[90] = "0b10111101110010101010001001000011";
        ram[91] = "0b00111101000110100101101000000100";
        ram[92] = "0b00111100110100100111011011000101";
        ram[93] = "0b10111101111000100001111100101010";
        ram[94] = "0b10111101111111001001100000011100";
        ram[95] = "0b10111101010101000001010110110001";
        ram[96] = "0b10111101101111101101110111001110";
        ram[97] = "0b10111100100101100100100000001011";
        ram[98] = "0b10111101101100111001011100010100";
        ram[99] = "0b10111100000110000010111000001010";
        ram[100] = "0b00111100101111100010011001110111";
        ram[101] = "0b10111101110011110011101010011011";
        ram[102] = "0b10111100111010011011001100100010";
        ram[103] = "0b00111101100110111011001111111110";
        ram[104] = "0b00111101101100000011100110010001";
        ram[105] = "0b10111101110100101111111000111111";
        ram[106] = "0b10111110001010011011000100110001";
        ram[107] = "0b10111101011000100111100000010101";
        ram[108] = "0b10111110000100110010010010000101";
        ram[109] = "0b00111101100010110111111000110011";
        ram[110] = "0b10111101000110010000111010101010";
        ram[111] = "0b10111101110001101110010001111110";
        ram[112] = "0b10111101110110011111001111000111";
        ram[113] = "0b10111101101111010011001001011011";
        ram[114] = "0b00111100110101001010000000110110";
        ram[115] = "0b00111100111100011000000011100001";
        ram[116] = "0b10111110001100110001010010000111";
        ram[117] = "0b10111110000111100101101111001000";
        ram[118] = "0b00111101000111110100100101110001";
        ram[119] = "0b00111110001000101000011100111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_15) {
meminst = new inference_conv2d_f3_1_3_15_ram("inference_conv2d_f3_1_3_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_15() {
    delete meminst;
}


};//endmodule
#endif
