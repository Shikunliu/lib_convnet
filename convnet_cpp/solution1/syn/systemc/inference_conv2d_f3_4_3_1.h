// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_1_H__
#define __inference_conv2d_f3_4_3_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_1_ram) {
        ram[0] = "0b10111101100011101111010100111110";
        ram[1] = "0b00111010101000101001100110011101";
        ram[2] = "0b00111100011011011100011110000100";
        ram[3] = "0b00111100000100011101101111000000";
        ram[4] = "0b10111101110010010101011110110010";
        ram[5] = "0b10111101010000111101000101000110";
        ram[6] = "0b00111101101101100010111100111111";
        ram[7] = "0b10111101010110011100010001100010";
        ram[8] = "0b10111101000110011110010110011111";
        ram[9] = "0b10111101110111100101110000001100";
        ram[10] = "0b10111100000011110011110011111111";
        ram[11] = "0b00111101011110010010000101101111";
        ram[12] = "0b10111010110010001011000000110011";
        ram[13] = "0b00111101100001111111110001011011";
        ram[14] = "0b10111011101011101011100100100110";
        ram[15] = "0b10111101100101000110100000001111";
        ram[16] = "0b10111101100110110010000100001001";
        ram[17] = "0b00111101101011011110110100011011";
        ram[18] = "0b00111100000001011111011001101111";
        ram[19] = "0b10111101111001010001000110011101";
        ram[20] = "0b00111101101111101010101101010001";
        ram[21] = "0b00111010011111000111110110110111";
        ram[22] = "0b10111100110110001101001110100001";
        ram[23] = "0b00111101001001001101001010110011";
        ram[24] = "0b10111100101110101100100101011111";
        ram[25] = "0b00111100010001110110010010101110";
        ram[26] = "0b00111110000111111010001001101010";
        ram[27] = "0b10111010111011110110000011001011";
        ram[28] = "0b00111101010000111000111101101100";
        ram[29] = "0b00111100100011000000001101111001";
        ram[30] = "0b00111110000101111100110111001101";
        ram[31] = "0b00111101100110100001111110001110";
        ram[32] = "0b10111101000111111011100111011010";
        ram[33] = "0b00111101100010110000001110011111";
        ram[34] = "0b00111101101110110011101110000011";
        ram[35] = "0b10111110010100111110111110101110";
        ram[36] = "0b00111100011111100000111101100101";
        ram[37] = "0b10111110010010000000110110000000";
        ram[38] = "0b00111110001111111110001110110000";
        ram[39] = "0b10111101001101101110111111010001";
        ram[40] = "0b00111110001111100111111010100110";
        ram[41] = "0b00111101000000110100000010101101";
        ram[42] = "0b00111100110100100010101011011011";
        ram[43] = "0b10111110000010000100111001000000";
        ram[44] = "0b00111101101000001001110010000000";
        ram[45] = "0b00111101001111000010010110000000";
        ram[46] = "0b10111101101001001101100111101111";
        ram[47] = "0b10111101001011010110101010110111";
        ram[48] = "0b00111100101110101000010110100010";
        ram[49] = "0b10111110001111110010011011110010";
        ram[50] = "0b10111101101001001011010111111000";
        ram[51] = "0b00111101101000011101111110010001";
        ram[52] = "0b10111101110000101111010111000001";
        ram[53] = "0b00111101111101010010001000100001";
        ram[54] = "0b10111100010101010000011011000011";
        ram[55] = "0b10111101111001110011110111100010";
        ram[56] = "0b00111100000110100000000001110010";
        ram[57] = "0b10111101111110101110110111011101";
        ram[58] = "0b10111110010010010010101111000011";
        ram[59] = "0b00111110000101100011010100011110";
        ram[60] = "0b10111101001010011011101000001110";
        ram[61] = "0b10111011111000010000011011010110";
        ram[62] = "0b00111110000001001111001011110001";
        ram[63] = "0b10111110000010001100111100111010";
        ram[64] = "0b00111110010001101010000100011111";
        ram[65] = "0b00111101110000011100000110000110";
        ram[66] = "0b00111101011001100001010111111001";
        ram[67] = "0b10111110001110001010000110011101";
        ram[68] = "0b10111101000000010011111100010101";
        ram[69] = "0b10111101011101011111011110111001";
        ram[70] = "0b00111110000101010100010000110101";
        ram[71] = "0b00111100000000011110111100011000";
        ram[72] = "0b00111110000101001100110010101011";
        ram[73] = "0b00111100100000100101001000100000";
        ram[74] = "0b10111101110010011000110011011100";
        ram[75] = "0b00111101100001111011010101011110";
        ram[76] = "0b10111100101011001010111101010110";
        ram[77] = "0b00111100110010100010010100011101";
        ram[78] = "0b00111101110100011011001001011111";
        ram[79] = "0b00111101111011101011001111011101";
        ram[80] = "0b10111110000010111101101101011110";
        ram[81] = "0b00111101001100000010001101100100";
        ram[82] = "0b00111100100001111110000011010101";
        ram[83] = "0b00111110000001111101101110110001";
        ram[84] = "0b10111100111001101100011010101001";
        ram[85] = "0b00111101100001111110101110000111";
        ram[86] = "0b00111110001100000001000010000100";
        ram[87] = "0b00111100110110111001101010010000";
        ram[88] = "0b00111101011101111101110101010001";
        ram[89] = "0b00111100101000101110011110001100";
        ram[90] = "0b00111100011010010011100111101011";
        ram[91] = "0b00111100001101101011111101000100";
        ram[92] = "0b10111101111010111110110101110100";
        ram[93] = "0b00111101001011111111011100111111";
        ram[94] = "0b10111110010010000101110100110001";
        ram[95] = "0b10111101100010001101011110101010";
        ram[96] = "0b10111110010000000001010011111001";
        ram[97] = "0b00111100111100010010010010011011";
        ram[98] = "0b00111100001110111001010000101011";
        ram[99] = "0b00111100110111101010111101001101";
        ram[100] = "0b10111101010000011001010011000000";
        ram[101] = "0b00111110001100000101000010111110";
        ram[102] = "0b00111101011100101010101101101001";
        ram[103] = "0b10111110010001100111101010010110";
        ram[104] = "0b10111100100001100010110011010101";
        ram[105] = "0b00111110000011100010101111010000";
        ram[106] = "0b10111101110010001111000011110000";
        ram[107] = "0b10111100110010000100100000000011";
        ram[108] = "0b10111110000000101101111100001101";
        ram[109] = "0b00111110000100010000111010001000";
        ram[110] = "0b00111101110001111011000011001110";
        ram[111] = "0b00111110000011110110111111010010";
        ram[112] = "0b00111101011100100101110011111010";
        ram[113] = "0b10111101110010001100011001111000";
        ram[114] = "0b10111101110101000010001001000110";
        ram[115] = "0b00111101101010001011001001100100";
        ram[116] = "0b10111101101101000111011111100100";
        ram[117] = "0b10111101000010111111000110100110";
        ram[118] = "0b00111100010101001100111101100101";
        ram[119] = "0b10111110001101010011011010010011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_1) {
meminst = new inference_conv2d_f3_4_3_1_ram("inference_conv2d_f3_4_3_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_1() {
    delete meminst;
}


};//endmodule
#endif
