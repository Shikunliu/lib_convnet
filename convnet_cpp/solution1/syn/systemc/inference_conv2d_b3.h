// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_b3_H__
#define __inference_conv2d_b3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_b3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_b3_ram) {
        ram[0] = "0b00111110000011001100000100000001";
        ram[1] = "0b00111101101100011101111001000001";
        ram[2] = "0b00111101110010100011011100001011";
        ram[3] = "0b00111101110111010010000111111111";
        ram[4] = "0b00111101111011110001100010000111";
        ram[5] = "0b00111101110010000010100011011110";
        ram[6] = "0b00111101110100011110110100011000";
        ram[7] = "0b00111101101100000010000000001001";
        ram[8] = "0b00111101101100000100001111100101";
        ram[9] = "0b00111101110101001011000111101110";
        ram[10] = "0b00111101101110111000010011011100";
        ram[11] = "0b00111110000000110000100000110101";
        ram[12] = "0b00111101111000100100010111110110";
        ram[13] = "0b00111101111100101101000100101000";
        ram[14] = "0b00111101110110011010011111000001";
        ram[15] = "0b00111101111010001100010110000111";
        ram[16] = "0b00111101110101010111010011110111";
        ram[17] = "0b00111101111110111000000000100100";
        ram[18] = "0b00111101101110001001010000100011";
        ram[19] = "0b00111101111001000010101001100111";
        ram[20] = "0b00111101101011111110101110110110";
        ram[21] = "0b00111101101010000101010110111111";
        ram[22] = "0b00111101101011011011001011110110";
        ram[23] = "0b00111110000001011100101100110110";
        ram[24] = "0b00111101101011010001111000000011";
        ram[25] = "0b00111101101101011110010011100111";
        ram[26] = "0b00111101111001001110100010111000";
        ram[27] = "0b00111101110111110011000111110100";
        ram[28] = "0b00111101110100011000001110110110";
        ram[29] = "0b00111101111000100101001100010001";
        ram[30] = "0b00111101111010001010111011111011";
        ram[31] = "0b00111101110011100111010011110011";
        ram[32] = "0b00111101110100001110110100111110";
        ram[33] = "0b00111101110010101001101110001101";
        ram[34] = "0b00111101110000100010001111100010";
        ram[35] = "0b00111101110111110001100111010110";
        ram[36] = "0b00111101110111010100010000010011";
        ram[37] = "0b00111101101011111000111101100010";
        ram[38] = "0b00111101111000101100001111001010";
        ram[39] = "0b00111101111101011010110110010111";
        ram[40] = "0b00111101110011110010100001000001";
        ram[41] = "0b00111101110010111010101010011011";
        ram[42] = "0b00111101110001100100111000111011";
        ram[43] = "0b00111101101010001100010001111010";
        ram[44] = "0b00111101110011010000101010101010";
        ram[45] = "0b00111101110100100111000110111101";
        ram[46] = "0b00111101111011001000000011000111";
        ram[47] = "0b00111101111001010111110010010001";
        ram[48] = "0b00111101111001001101110000100011";
        ram[49] = "0b00111101110011010110011001101011";
        ram[50] = "0b00111101101110011100111001011000";
        ram[51] = "0b00111101110001011000011101101100";
        ram[52] = "0b00111101101111111000010101010001";
        ram[53] = "0b00111101110000001000000100100010";
        ram[54] = "0b00111101111111010111100110001110";
        ram[55] = "0b00111101110101000011010100100110";
        ram[56] = "0b00111101111000110110100011110001";
        ram[57] = "0b00111101101101001100010001100011";
        ram[58] = "0b00111101110000010010001011101101";
        ram[59] = "0b00111101110101100111111001000001";
        ram[60] = "0b00111101101111000111110101111010";
        ram[61] = "0b00111101111000110110101110010000";
        ram[62] = "0b00111101110100101111000100100100";
        ram[63] = "0b00111101110010011101110011111001";
        ram[64] = "0b00111101111001000011010101101001";
        ram[65] = "0b00111101110011011011011110101110";
        ram[66] = "0b00111101110110000111100100111110";
        ram[67] = "0b00111101111111001000111110111000";
        ram[68] = "0b00111101100100010001001001110111";
        ram[69] = "0b00111101101101010101100000100001";
        ram[70] = "0b00111101111100010001100000111011";
        ram[71] = "0b00111101110011011110100101111101";
        ram[72] = "0b00111101101000001011100111110111";
        ram[73] = "0b00111101110001010100101111011100";
        ram[74] = "0b00111101110100101011001000111010";
        ram[75] = "0b00111101110010100110000001110110";
        ram[76] = "0b00111101110011101000010110111010";
        ram[77] = "0b00111101111101000010111111101000";
        ram[78] = "0b00111110000010001110010011111100";
        ram[79] = "0b00111101110011000111010000111111";
        ram[80] = "0b00111101111001010001011011011011";
        ram[81] = "0b00111101110010110011111100000110";
        ram[82] = "0b00111101110111100100011100010011";
        ram[83] = "0b00111101111000101110100110001010";
        ram[84] = "0b00111101101000101101001010010011";
        ram[85] = "0b00111101110011001100110011001101";
        ram[86] = "0b00111101110010000110010010110001";
        ram[87] = "0b00111101110101011011010111111010";
        ram[88] = "0b00111101110001010001001110110110";
        ram[89] = "0b00111101110100000111101101111000";
        ram[90] = "0b00111101110011001100110011001101";
        ram[91] = "0b00111101101111111110101100000111";
        ram[92] = "0b00111101101011111100111010001111";
        ram[93] = "0b00111101110001010100111011100111";
        ram[94] = "0b00111101110001001101110110000000";
        ram[95] = "0b00111101101000101100100001011010";
        ram[96] = "0b00111101110001100111011010100111";
        ram[97] = "0b00111101111000111101100010011101";
        ram[98] = "0b00111101110101001110111010111111";
        ram[99] = "0b00111101110001011111111011000000";
        ram[100] = "0b00111101111000000110100101100010";
        ram[101] = "0b00111101111100010001010100010110";
        ram[102] = "0b00111101110000000011101111111011";
        ram[103] = "0b00111101111011001010100110101100";
        ram[104] = "0b00111101110110101110101010111000";
        ram[105] = "0b00111110000001000110101100100111";
        ram[106] = "0b00111101101011011111110100001011";
        ram[107] = "0b00111101110001100101001011011000";
        ram[108] = "0b00111101111010001100111001110000";
        ram[109] = "0b00111101111001011110011011111111";
        ram[110] = "0b00111101110010111010010110100000";
        ram[111] = "0b00111101110111101110111001010010";
        ram[112] = "0b00111101110100001010011001110110";
        ram[113] = "0b00111101111101101010000011011100";
        ram[114] = "0b00111101110001101101110101101010";
        ram[115] = "0b00111101110010101111110011000001";
        ram[116] = "0b00111101110000101111001100010100";
        ram[117] = "0b00111101111011110100111110010100";
        ram[118] = "0b00111110000000101110001111000101";
        ram[119] = "0b00111101111001101001100000110101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_b3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_b3_ram* meminst;


SC_CTOR(inference_conv2d_b3) {
meminst = new inference_conv2d_b3_ram("inference_conv2d_b3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_b3() {
    delete meminst;
}


};//endmodule
#endif
