// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_82_H__
#define __inference_mult_1_120_120_84_s_W4_82_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_82_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_82_ram) {
        ram[0] = "0b00111101100000111011001111000001";
        ram[1] = "0b00111110000110100001110101110101";
        ram[2] = "0b10111101010001011001011101001110";
        ram[3] = "0b10111101000001101010000011001110";
        ram[4] = "0b00111100100000001000001100010010";
        ram[5] = "0b00111011000100001001101111101111";
        ram[6] = "0b10111110001000100100001100010011";
        ram[7] = "0b10111010101010011100101100010101";
        ram[8] = "0b00111101111100111000010011111101";
        ram[9] = "0b10111101110010100110001101001011";
        ram[10] = "0b10111010100000000011100011101101";
        ram[11] = "0b00111101000010110001100000010001";
        ram[12] = "0b00111101110100000101000100000001";
        ram[13] = "0b10111101101000100001110000111010";
        ram[14] = "0b10111110000111100100111010101101";
        ram[15] = "0b10111100011101000101000000110100";
        ram[16] = "0b00111110011101011010010110111001";
        ram[17] = "0b10111101111110011010100001001000";
        ram[18] = "0b00111101000110001010000001011010";
        ram[19] = "0b00111101001001010000001110101011";
        ram[20] = "0b10111101100001110010111101101001";
        ram[21] = "0b00111101100110110010101001010000";
        ram[22] = "0b10111110001100000110111101101001";
        ram[23] = "0b00111100001100001100110110010011";
        ram[24] = "0b10111101111001010010000101010111";
        ram[25] = "0b10111101000100110100101110000111";
        ram[26] = "0b10111110100011011000100111110000";
        ram[27] = "0b10111101001001100001011110001100";
        ram[28] = "0b10111101101010000000000101111111";
        ram[29] = "0b00111101010010111011010101110110";
        ram[30] = "0b00111101101110111110111110101000";
        ram[31] = "0b10111101110001000000001011010001";
        ram[32] = "0b10111101110100110110011010010101";
        ram[33] = "0b10111011111011001101011011011000";
        ram[34] = "0b10111101100011111000111110110011";
        ram[35] = "0b00111101111010111001110111000011";
        ram[36] = "0b00111101011000010100001010001011";
        ram[37] = "0b00111100100100111100000000111100";
        ram[38] = "0b00111101001110001010101111111110";
        ram[39] = "0b00111101100001101000101111001000";
        ram[40] = "0b00111110000011000011011000010001";
        ram[41] = "0b00111110010000001111111000000100";
        ram[42] = "0b10111101011111110001000010000001";
        ram[43] = "0b00111101100100010010111010111001";
        ram[44] = "0b10111110000011000101110010011010";
        ram[45] = "0b00111101011110011111101010110011";
        ram[46] = "0b10111101111000101110111001000010";
        ram[47] = "0b10111101111000000010010111000000";
        ram[48] = "0b10111110000101111000101011110100";
        ram[49] = "0b00111101011001001000110010100111";
        ram[50] = "0b00111110000101001001110110111111";
        ram[51] = "0b00111100000011001111011110010101";
        ram[52] = "0b00111101110101101011011111101101";
        ram[53] = "0b10111110100111101101001100001111";
        ram[54] = "0b00111100010011100010011101000000";
        ram[55] = "0b10111100110100100010101111100111";
        ram[56] = "0b10111110010110011100111011010001";
        ram[57] = "0b00111101010011001011010111010110";
        ram[58] = "0b00111110000110000010011100110001";
        ram[59] = "0b00111101100010010001101000110011";
        ram[60] = "0b00111101111100001011111010010100";
        ram[61] = "0b00111101000100010100001000010010";
        ram[62] = "0b10111101000100011111010010001010";
        ram[63] = "0b00111101100101011010111100001110";
        ram[64] = "0b10111101110110011001101100101100";
        ram[65] = "0b10111110001010011000110001111110";
        ram[66] = "0b00111101101010101011110001010001";
        ram[67] = "0b00111101000001111110111011100010";
        ram[68] = "0b10111100001000111111111101001110";
        ram[69] = "0b10111100111001011111000101100001";
        ram[70] = "0b00111110010001011011010000100100";
        ram[71] = "0b10111101101111001110001111011110";
        ram[72] = "0b00111101111111001101101110111110";
        ram[73] = "0b10111100100010101111100111111001";
        ram[74] = "0b00111110001010110011111010011010";
        ram[75] = "0b10111101111001011100101010110000";
        ram[76] = "0b00111101010001111011011011001000";
        ram[77] = "0b10111100100011001011011010010010";
        ram[78] = "0b10111100110000110101100000001111";
        ram[79] = "0b00111110000001101010011000011010";
        ram[80] = "0b00111101001001010110101001101101";
        ram[81] = "0b00111100101011010110100010000011";
        ram[82] = "0b10111100111001111011010110111100";
        ram[83] = "0b00111101111101010110001010011110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_82) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_82_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_82) {
meminst = new inference_mult_1_120_120_84_s_W4_82_ram("inference_mult_1_120_120_84_s_W4_82_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_82() {
    delete meminst;
}


};//endmodule
#endif
