// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_0_H__
#define __inference_conv2d_f3_4_3_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_0_ram) {
        ram[0] = "0b10111101101111111110010111111111";
        ram[1] = "0b10111101101000001110001100000100";
        ram[2] = "0b00111100100110000011001101101000";
        ram[3] = "0b00111100010101100111110001111001";
        ram[4] = "0b00111101010000111010000011101111";
        ram[5] = "0b00111101001100001111100100010111";
        ram[6] = "0b00111101000101010001111011000110";
        ram[7] = "0b00111110000101110100100110101110";
        ram[8] = "0b00111101001001010111110110111001";
        ram[9] = "0b10111101101111011110010100111110";
        ram[10] = "0b00111101100100110100010110011010";
        ram[11] = "0b00111110000001111000011110001011";
        ram[12] = "0b10111101100001011111101111101011";
        ram[13] = "0b10111101001010001001110101011101";
        ram[14] = "0b00111100111010101101100111111110";
        ram[15] = "0b00111110010000011100110101100000";
        ram[16] = "0b10111110000000100100001000000111";
        ram[17] = "0b10111101110010101001110001010110";
        ram[18] = "0b00111101110001011001000011011100";
        ram[19] = "0b00111101111000011011010000110101";
        ram[20] = "0b10111110000000011101011011010000";
        ram[21] = "0b10111101011101010100100010110111";
        ram[22] = "0b00111100111100000111000110000010";
        ram[23] = "0b00111101101010110011101010101100";
        ram[24] = "0b00111101101000010000000010010110";
        ram[25] = "0b10111101100101110101001111110100";
        ram[26] = "0b00111011110111111111101111101001";
        ram[27] = "0b10111101110101111100010001011101";
        ram[28] = "0b00111100110110111010101010000000";
        ram[29] = "0b10111101011111110100000101011110";
        ram[30] = "0b00111101010011110001111011010001";
        ram[31] = "0b10111110011000111100110110011010";
        ram[32] = "0b10111110000001010000100100111001";
        ram[33] = "0b10111101001110110000111001011110";
        ram[34] = "0b10111101100101000100110011110100";
        ram[35] = "0b10111010000001100111100001011101";
        ram[36] = "0b00111101100010000101011111100110";
        ram[37] = "0b00111101101011011100000110110010";
        ram[38] = "0b10111101010010110000011101100101";
        ram[39] = "0b10111110000101000100111101011101";
        ram[40] = "0b00111011111001111110011110110000";
        ram[41] = "0b10111110001000110111101011000100";
        ram[42] = "0b00111101011100011111001101100010";
        ram[43] = "0b00111101101000111110001111110000";
        ram[44] = "0b10111011110001101001100010000000";
        ram[45] = "0b00111100110001010100110000000101";
        ram[46] = "0b00111101011001010001001011011111";
        ram[47] = "0b00111101111111000110100111111001";
        ram[48] = "0b10111110000100010110010111010100";
        ram[49] = "0b10111100110100110001011101101010";
        ram[50] = "0b10111101011001111010011100101001";
        ram[51] = "0b10111101010001011001001011100111";
        ram[52] = "0b00111101101110000110101010000010";
        ram[53] = "0b10111100111100110001010011001011";
        ram[54] = "0b00111101110100011001110111101101";
        ram[55] = "0b00111101100011101110000010111110";
        ram[56] = "0b10111101100000001100000100001011";
        ram[57] = "0b00111011111011001000111110001011";
        ram[58] = "0b10111101101011000010000000001100";
        ram[59] = "0b00111110001011001011001110100010";
        ram[60] = "0b10111101011011111110000011001110";
        ram[61] = "0b10111101110100101000010010011101";
        ram[62] = "0b10111110000111100111010111111111";
        ram[63] = "0b00111101000111110011111110110001";
        ram[64] = "0b10111110001100110100010011000011";
        ram[65] = "0b00111110000011001101100101100010";
        ram[66] = "0b00111101101111101001001110101100";
        ram[67] = "0b10111101100111001000101011001011";
        ram[68] = "0b10111101100100110110110011111010";
        ram[69] = "0b10111110000101111100001101010000";
        ram[70] = "0b00111101001110011111110110100010";
        ram[71] = "0b00111100101010100101101110111110";
        ram[72] = "0b00111100101010111110011000111000";
        ram[73] = "0b10111101001001000001001010110100";
        ram[74] = "0b10111101001110111111111001001000";
        ram[75] = "0b10111101001100100111010111101111";
        ram[76] = "0b00111110001011100010101111010000";
        ram[77] = "0b10111011110111111001001110100100";
        ram[78] = "0b00111011000000110010100000010011";
        ram[79] = "0b10111101110010011111110100011100";
        ram[80] = "0b00111110010100110001001101111011";
        ram[81] = "0b10111100000110011101110100001011";
        ram[82] = "0b00111100101010000100101000110111";
        ram[83] = "0b00111110001001001100000001011001";
        ram[84] = "0b10111011101100000011101111011101";
        ram[85] = "0b00111101110001001110111000111001";
        ram[86] = "0b10111101001100010111100111011011";
        ram[87] = "0b10111101100100100011111110010000";
        ram[88] = "0b00111110000000101010111111011110";
        ram[89] = "0b00111101100111101010110101011101";
        ram[90] = "0b10111101010101010101110110110000";
        ram[91] = "0b10111100100010100000000111100010";
        ram[92] = "0b00111101101010110110100111011011";
        ram[93] = "0b10111100011001111110101110100010";
        ram[94] = "0b00111100001011111011101000000010";
        ram[95] = "0b00111101111001110111101010110011";
        ram[96] = "0b10111101011101001000000000011111";
        ram[97] = "0b00111101011101110111101110010111";
        ram[98] = "0b10111101101100010110010000110100";
        ram[99] = "0b00111100011111100001011011110010";
        ram[100] = "0b10111100001010111011011100111110";
        ram[101] = "0b10111100000001100100000101111000";
        ram[102] = "0b10111101111110111011100011000011";
        ram[103] = "0b00111101100011111100111100111110";
        ram[104] = "0b10111101111000100011010110110101";
        ram[105] = "0b10111101101100111010001110000001";
        ram[106] = "0b00111101010100100101111000000110";
        ram[107] = "0b10111110000001111011001010001001";
        ram[108] = "0b10111100100001011101100111111111";
        ram[109] = "0b10111101011011000001011100110000";
        ram[110] = "0b00111101111000101110111111010100";
        ram[111] = "0b00111110001001100011110001110101";
        ram[112] = "0b10111101111011111111010010111010";
        ram[113] = "0b00111110001011110100001000110101";
        ram[114] = "0b10111101010100100110001001101110";
        ram[115] = "0b00111110000111110100111111010111";
        ram[116] = "0b00111110000100010010101101011110";
        ram[117] = "0b00111110000111101100001100010001";
        ram[118] = "0b10111010000001011110011100000010";
        ram[119] = "0b00111101111000111101010011110001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_0) {
meminst = new inference_conv2d_f3_4_3_0_ram("inference_conv2d_f3_4_3_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_0() {
    delete meminst;
}


};//endmodule
#endif
