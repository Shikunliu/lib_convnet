// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_0_H__
#define __inference_conv2d_f3_4_1_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_0_ram) {
        ram[0] = "0b10111101001001001101111100010010";
        ram[1] = "0b10111011001100100101010000100110";
        ram[2] = "0b10111101100110101101000010110110";
        ram[3] = "0b00111100110110001110001100100110";
        ram[4] = "0b00111101010010011001100111111000";
        ram[5] = "0b10111101110000001001000111101001";
        ram[6] = "0b00111100101101101111111110100110";
        ram[7] = "0b10111110000001110111010110111000";
        ram[8] = "0b00111101110110101010111111111111";
        ram[9] = "0b10111110001111000100111101111111";
        ram[10] = "0b00111100101000000100110000000110";
        ram[11] = "0b10111110001001001011000010011111";
        ram[12] = "0b10111101111110110011110110001110";
        ram[13] = "0b00111101010011001110000100001010";
        ram[14] = "0b00111101001100101011000111101001";
        ram[15] = "0b10111011111111101010000010000100";
        ram[16] = "0b10111101010001111110011111110110";
        ram[17] = "0b10111100101001110001100110110101";
        ram[18] = "0b00111101111011111011110000011011";
        ram[19] = "0b00111100111111001111000001001011";
        ram[20] = "0b10111101100011100001111101010101";
        ram[21] = "0b00111110000011000010011001010111";
        ram[22] = "0b00111110000000101011100100001010";
        ram[23] = "0b00111110000100010101010010000110";
        ram[24] = "0b10111101001100010011010100101100";
        ram[25] = "0b00111101101111100000100110000110";
        ram[26] = "0b10111101111001000010111110100101";
        ram[27] = "0b10111101101011111001100000010110";
        ram[28] = "0b00111100100000000110111001001111";
        ram[29] = "0b00111110001000100010111011100100";
        ram[30] = "0b00111101100100000000101100111000";
        ram[31] = "0b00111101100110000110100110011110";
        ram[32] = "0b00111101001111111110011011110000";
        ram[33] = "0b00111110000111111010001010101101";
        ram[34] = "0b10111101101011010010101111110101";
        ram[35] = "0b10111100011110000010100000110000";
        ram[36] = "0b00111110000100111111100010011000";
        ram[37] = "0b00111101111000000110001010010001";
        ram[38] = "0b00111101101010101100100001000101";
        ram[39] = "0b10111101101101010001110000011001";
        ram[40] = "0b00111101100110101111110010011000";
        ram[41] = "0b00111110001011001011000100000011";
        ram[42] = "0b00111101010100110001011001111000";
        ram[43] = "0b00111011000111111000101000011110";
        ram[44] = "0b00111101100011111011101010001000";
        ram[45] = "0b00111101110101011110010000011101";
        ram[46] = "0b10111110010000111001011100010100";
        ram[47] = "0b10111101000110001001110101010000";
        ram[48] = "0b10111101001111011010101110101101";
        ram[49] = "0b00111101111010111100111100001011";
        ram[50] = "0b10111101111000100100111011011111";
        ram[51] = "0b00111101111100000011001000010010";
        ram[52] = "0b10111101010110111101111001001101";
        ram[53] = "0b00111110011100110101100111111111";
        ram[54] = "0b00111101101000011111010000000011";
        ram[55] = "0b10111101100111001001000101011001";
        ram[56] = "0b00111101100001110000101100100010";
        ram[57] = "0b10111100001000100100010010111001";
        ram[58] = "0b10111100101000110100010110110101";
        ram[59] = "0b00111101100000000011011101101011";
        ram[60] = "0b10111101101010101011110000011100";
        ram[61] = "0b00111011111011001001110110001101";
        ram[62] = "0b10111101011100111101111010001010";
        ram[63] = "0b10111101000010110111100101100000";
        ram[64] = "0b10111011110110100001110000101011";
        ram[65] = "0b10111110010110010010010010101111";
        ram[66] = "0b10111110000101110000011110011110";
        ram[67] = "0b00111101110010110111010000010101";
        ram[68] = "0b10111101111101101010010100001101";
        ram[69] = "0b00111101101110000010101001100100";
        ram[70] = "0b10111101010010100110000110011110";
        ram[71] = "0b00111110001111100001001101101110";
        ram[72] = "0b10111011101000011000000011000100";
        ram[73] = "0b00111110001101001000001001111011";
        ram[74] = "0b00111110000101010111110110011110";
        ram[75] = "0b00111011101100001001101111111111";
        ram[76] = "0b00111101010000010111011011011110";
        ram[77] = "0b10111100101010010001100011111110";
        ram[78] = "0b10111011111101011111111101100001";
        ram[79] = "0b00111100010111010000000000100001";
        ram[80] = "0b00111101001100011111101011010100";
        ram[81] = "0b00111110001001010001110111101111";
        ram[82] = "0b10111100101101101011000011001100";
        ram[83] = "0b10111101100010011100111111111000";
        ram[84] = "0b10111101111100000100000000111010";
        ram[85] = "0b10111101010011000001000101101011";
        ram[86] = "0b00111101110101111000100000010010";
        ram[87] = "0b00111101110111011001000100100101";
        ram[88] = "0b00111101101001011010010001101010";
        ram[89] = "0b00111110000010011111000001011111";
        ram[90] = "0b10111110000001010000011011011101";
        ram[91] = "0b00111101111101000011110100000100";
        ram[92] = "0b10111011100011111101001110110011";
        ram[93] = "0b10111101101101111101110111001010";
        ram[94] = "0b10111101011010000011100111110110";
        ram[95] = "0b10111110000110101001100110110111";
        ram[96] = "0b00111110010010001011101011000111";
        ram[97] = "0b00111110100100000010100101101011";
        ram[98] = "0b00111011101101100100000110110000";
        ram[99] = "0b10111011100110100111011110111011";
        ram[100] = "0b00111101001010001000011101110011";
        ram[101] = "0b00111101100001000111110010011100";
        ram[102] = "0b00111101100100100110000110100100";
        ram[103] = "0b00111010111100101000000101100111";
        ram[104] = "0b10111110001001111111101100100110";
        ram[105] = "0b10111101000000000100011110111001";
        ram[106] = "0b10111100000011011100001100010111";
        ram[107] = "0b00111101110110001010111000110010";
        ram[108] = "0b10111100110010100100111110101111";
        ram[109] = "0b00111101110011111111000100001111";
        ram[110] = "0b10111101010010011100011011011001";
        ram[111] = "0b00111101011001111000111111100010";
        ram[112] = "0b00111100101001000110001101010111";
        ram[113] = "0b00111101111011010011100011001110";
        ram[114] = "0b10111101010000100111010000011001";
        ram[115] = "0b00111101100011100111100110111000";
        ram[116] = "0b10111010111111011101011100110001";
        ram[117] = "0b10111101001001111110010111000010";
        ram[118] = "0b00111100101011110110101100101000";
        ram[119] = "0b10111101110110000001101101100101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_0) {
meminst = new inference_conv2d_f3_4_1_0_ram("inference_conv2d_f3_4_1_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_0() {
    delete meminst;
}


};//endmodule
#endif
