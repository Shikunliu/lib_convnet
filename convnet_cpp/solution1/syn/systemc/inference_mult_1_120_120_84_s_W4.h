// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_H__
#define __inference_mult_1_120_120_84_s_W4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_ram) {
        ram[0] = "0b10111101111111100010001011100110";
        ram[1] = "0b10111101110100000000100000100000";
        ram[2] = "0b00111101001111000111111100001100";
        ram[3] = "0b10111101000010000101100111110001";
        ram[4] = "0b00111100100110111101100100001111";
        ram[5] = "0b10111010110101111011011010001011";
        ram[6] = "0b00111101011000100100010001111110";
        ram[7] = "0b00111100110000001100111001011100";
        ram[8] = "0b00111101110000000101111001010010";
        ram[9] = "0b10111110011101001001000110110000";
        ram[10] = "0b00111101100001100001011101100100";
        ram[11] = "0b10111100011010110010010111101001";
        ram[12] = "0b00111101101110000001011110000100";
        ram[13] = "0b00111101011011010100100010001000";
        ram[14] = "0b10111100110100110000100101011101";
        ram[15] = "0b10111101111101011001010111111111";
        ram[16] = "0b00111101100101000000100100110111";
        ram[17] = "0b10111101011011100100010010000001";
        ram[18] = "0b00111100101101111101111010010100";
        ram[19] = "0b10111100100011111111101100100000";
        ram[20] = "0b00111110100001110110001010010101";
        ram[21] = "0b00111011110010110011101001111011";
        ram[22] = "0b00111101010011111101111001001010";
        ram[23] = "0b10111110000110110011001101010101";
        ram[24] = "0b10111101000001101110111001100110";
        ram[25] = "0b10111101110100001000100110100000";
        ram[26] = "0b10111101110000101010010000101101";
        ram[27] = "0b10111101100101000111001111001101";
        ram[28] = "0b00111100000000001101000001011111";
        ram[29] = "0b00111100101001100100111000010011";
        ram[30] = "0b00111101000111110010000101111110";
        ram[31] = "0b00111101111001001111000110100010";
        ram[32] = "0b00111101010100111011011101101101";
        ram[33] = "0b10111101000001010011010110101111";
        ram[34] = "0b10111101001100000001000100001010";
        ram[35] = "0b00111110000101110010111101110111";
        ram[36] = "0b00111110010110101010111010110000";
        ram[37] = "0b10111011101101101010100011110100";
        ram[38] = "0b00111101111001110110000001111100";
        ram[39] = "0b00111101010000110111100001000000";
        ram[40] = "0b00111101010111000010010011011111";
        ram[41] = "0b00111101110000001101011110010110";
        ram[42] = "0b00111101101101000100111000101001";
        ram[43] = "0b00111100010100111100001010001010";
        ram[44] = "0b10111110010011100000111111000011";
        ram[45] = "0b00111110000011011001010111011101";
        ram[46] = "0b00111101001100000101011001011010";
        ram[47] = "0b00111101100001011011011000010101";
        ram[48] = "0b00111001110110100101010000100111";
        ram[49] = "0b00111110010011000001110101101101";
        ram[50] = "0b00111110000011011100010111010110";
        ram[51] = "0b10111101100001111100100010001110";
        ram[52] = "0b00111100010110100011100110011101";
        ram[53] = "0b10111110000001100010101000011011";
        ram[54] = "0b10111101000001101011111101010010";
        ram[55] = "0b00111101101011111111000001010011";
        ram[56] = "0b10111100111000001010111010010111";
        ram[57] = "0b00111101010011001011010001011110";
        ram[58] = "0b00111110000010101001011000001011";
        ram[59] = "0b10111101101110001010100110110000";
        ram[60] = "0b00111101011010000001011101011011";
        ram[61] = "0b00111101001010001010101110000101";
        ram[62] = "0b10111101000110110000000100101000";
        ram[63] = "0b00111110000101100110001000110101";
        ram[64] = "0b10111100101000011011001110101111";
        ram[65] = "0b00111100111011100000000011111010";
        ram[66] = "0b10111100110110110011100010100000";
        ram[67] = "0b10111101011111001110000110011101";
        ram[68] = "0b00111101111100011111111111111000";
        ram[69] = "0b00111101101111000001100101100011";
        ram[70] = "0b00111101111110010101111101100111";
        ram[71] = "0b00111101110101101001110010101010";
        ram[72] = "0b00111110010010000001001010111110";
        ram[73] = "0b00111011110100110011001011011000";
        ram[74] = "0b00111011010110010001110001100110";
        ram[75] = "0b10111101100110101001110001111110";
        ram[76] = "0b10111101010101110101100011100010";
        ram[77] = "0b00111110000101000011110100000100";
        ram[78] = "0b00111110010000011001100010101111";
        ram[79] = "0b00111110000100011010111000101110";
        ram[80] = "0b00111101111111010000100101011011";
        ram[81] = "0b00111101000000000101010101011011";
        ram[82] = "0b00111101101000101000010100100011";
        ram[83] = "0b00111101111110101000011110100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4) {
meminst = new inference_mult_1_120_120_84_s_W4_ram("inference_mult_1_120_120_84_s_W4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4() {
    delete meminst;
}


};//endmodule
#endif
