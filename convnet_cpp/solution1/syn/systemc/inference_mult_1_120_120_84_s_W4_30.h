// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_30_H__
#define __inference_mult_1_120_120_84_s_W4_30_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_30_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_30_ram) {
        ram[0] = "0b00111011100100010110110010001111";
        ram[1] = "0b10111101000100110011010101001100";
        ram[2] = "0b00111101011101101110010000010010";
        ram[3] = "0b10111110000111111011101110010101";
        ram[4] = "0b10111101100010111101100110110000";
        ram[5] = "0b00111100100011000010101001111011";
        ram[6] = "0b00111110000110110111101011100101";
        ram[7] = "0b00111110011101100000111110100001";
        ram[8] = "0b00111101111010101000001000011111";
        ram[9] = "0b10111101100101010101111110111011";
        ram[10] = "0b10111100111000010111011011011110";
        ram[11] = "0b10111101010101010001000100111111";
        ram[12] = "0b00111110100110100101000011111000";
        ram[13] = "0b00111011100011110001011011011111";
        ram[14] = "0b00111100010011010000010100000001";
        ram[15] = "0b10111101001001110110111010111111";
        ram[16] = "0b00111110010011110001110111000101";
        ram[17] = "0b00111101000001000010001110110001";
        ram[18] = "0b00111101001011011100011110011111";
        ram[19] = "0b00111101110100010000001111001001";
        ram[20] = "0b10111100110100010101110111110110";
        ram[21] = "0b00111101100001011110011110111011";
        ram[22] = "0b10111101010111111000011111010101";
        ram[23] = "0b10111101111011100100100011101001";
        ram[24] = "0b10111101110000011010001011001101";
        ram[25] = "0b10111101101010100100110110111111";
        ram[26] = "0b10111110001100111001000101001111";
        ram[27] = "0b00111110001100100000100111101110";
        ram[28] = "0b10111110000000101000101001100001";
        ram[29] = "0b10111101001100000001001011010010";
        ram[30] = "0b00111110001000011101111011110000";
        ram[31] = "0b10111101111001011110100010010010";
        ram[32] = "0b00111101011101110001000001101101";
        ram[33] = "0b10111110001011111101101110010000";
        ram[34] = "0b00111110000111000101010100000000";
        ram[35] = "0b00111110001001110110100100100011";
        ram[36] = "0b00111011010110101001110101110000";
        ram[37] = "0b10111101110010010010001010010110";
        ram[38] = "0b10111101001011001111110111111010";
        ram[39] = "0b00111100111011011010111000100100";
        ram[40] = "0b10111100111000100100110010010001";
        ram[41] = "0b00111100101000000011111100111011";
        ram[42] = "0b00111001101001001011101000100011";
        ram[43] = "0b10111101111000010010100000111001";
        ram[44] = "0b00111101101011000011001000111101";
        ram[45] = "0b10111011110100111110001011000001";
        ram[46] = "0b10111101001101110110110101010101";
        ram[47] = "0b10111101011110010100000101001111";
        ram[48] = "0b10111101101100101001101101111001";
        ram[49] = "0b00111101110001001010011111010000";
        ram[50] = "0b10111101010101111000110000101001";
        ram[51] = "0b10111110010110000111011110101011";
        ram[52] = "0b10111110000011000110010011111110";
        ram[53] = "0b10111110000111100011010111000110";
        ram[54] = "0b00111101100000011011000010111111";
        ram[55] = "0b00111101110011011001101101011111";
        ram[56] = "0b10111100000101011111000011101110";
        ram[57] = "0b10111110010011011111011110100101";
        ram[58] = "0b10111110010001111001000000110010";
        ram[59] = "0b00111110000111011011110101110011";
        ram[60] = "0b10111110000100010100010011001100";
        ram[61] = "0b00111101010010111001110001100110";
        ram[62] = "0b00111100100010000101111101001010";
        ram[63] = "0b00111101111110101001001100101001";
        ram[64] = "0b10111101110010011000100011010011";
        ram[65] = "0b00111100101111000001111100110101";
        ram[66] = "0b10111101110010011010000110011111";
        ram[67] = "0b00111100100101100111101110100010";
        ram[68] = "0b00111110100011101011100001010010";
        ram[69] = "0b00111110011000011110010101111110";
        ram[70] = "0b10111101100110001011110101110100";
        ram[71] = "0b10111101100110011110101001001010";
        ram[72] = "0b00111110100001010000100101011011";
        ram[73] = "0b00111101100010011011110100011000";
        ram[74] = "0b10111100010001010101001011110000";
        ram[75] = "0b10111101000001101110011010001001";
        ram[76] = "0b10111100101110111010111011001101";
        ram[77] = "0b10111110000110110010011000111001";
        ram[78] = "0b00111110011101011011100111101001";
        ram[79] = "0b10111110001110010010001010010110";
        ram[80] = "0b10111101111010001100101111010001";
        ram[81] = "0b00111110100011010100101010000000";
        ram[82] = "0b00111110000100101010110001110101";
        ram[83] = "0b00111110001000111101000001111101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_30) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_30_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_30) {
meminst = new inference_mult_1_120_120_84_s_W4_30_ram("inference_mult_1_120_120_84_s_W4_30_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_30() {
    delete meminst;
}


};//endmodule
#endif
