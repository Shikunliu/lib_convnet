// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_0_H__
#define __inference_mult_1_120_120_84_s_W4_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_0_ram) {
        ram[0] = "0b10111110010101000001000100111100";
        ram[1] = "0b00111110001010011111101010011000";
        ram[2] = "0b00111101100001000011111110010101";
        ram[3] = "0b00111101110011110111101100011000";
        ram[4] = "0b00111101110111000001001001101010";
        ram[5] = "0b00111011001100001010110100000111";
        ram[6] = "0b10111100110110001101111011110100";
        ram[7] = "0b00111110000100100001001110100001";
        ram[8] = "0b10111101111000100011011101001000";
        ram[9] = "0b10111101110000110101000000100100";
        ram[10] = "0b10111101011011011101010010111010";
        ram[11] = "0b10111110100100000001000110110010";
        ram[12] = "0b10111011111000100010110100000110";
        ram[13] = "0b10111110000010010011111010100011";
        ram[14] = "0b00111101100101001110010110000101";
        ram[15] = "0b00111011010110111000111000110001";
        ram[16] = "0b10111101100001110110100010001111";
        ram[17] = "0b00111100111000010001111011001001";
        ram[18] = "0b10111101010111011110010110001110";
        ram[19] = "0b00111110011010011011111010010000";
        ram[20] = "0b00111101110101110011100001100001";
        ram[21] = "0b00111100110000110001001011011010";
        ram[22] = "0b10111110001010000000101101100111";
        ram[23] = "0b00111110000110011000000110111111";
        ram[24] = "0b00111101110011010010110010111111";
        ram[25] = "0b00111101010101001101000100010011";
        ram[26] = "0b00111110001100111000011011010011";
        ram[27] = "0b00111110011001000011101010101000";
        ram[28] = "0b10111101110011100110100111110000";
        ram[29] = "0b10111101100001000011100010011100";
        ram[30] = "0b00111101101100100100101011001000";
        ram[31] = "0b10111101010011110110011110010111";
        ram[32] = "0b10111110011010010101101100110110";
        ram[33] = "0b10111101101100010000011010111001";
        ram[34] = "0b10111101111000101001111000001010";
        ram[35] = "0b10111101100001010010001101001000";
        ram[36] = "0b00111101100010000110111100101101";
        ram[37] = "0b00111101111100001010011001110110";
        ram[38] = "0b00111001100001110011110101010100";
        ram[39] = "0b10111101100001001010011110001101";
        ram[40] = "0b00111110001010010011101001110001";
        ram[41] = "0b10111101100010111001100110101100";
        ram[42] = "0b00111101011111010101001110110011";
        ram[43] = "0b10111110001001110110111101101101";
        ram[44] = "0b00111101000100100000101000111110";
        ram[45] = "0b00111101100101101000111000110010";
        ram[46] = "0b10111100001001011011110010111110";
        ram[47] = "0b10111101101010100011111001110000";
        ram[48] = "0b00111101101100001110001000101110";
        ram[49] = "0b00111110001000000100000011000000";
        ram[50] = "0b00111101101011001101001111010011";
        ram[51] = "0b00111101100111100100000011001000";
        ram[52] = "0b10111101000001001001000011110100";
        ram[53] = "0b00111110011000100011010010101000";
        ram[54] = "0b00111101101110010111001010100101";
        ram[55] = "0b00111110001001010010011010010110";
        ram[56] = "0b00111100011010001011101001101001";
        ram[57] = "0b00111101101100001010100010101010";
        ram[58] = "0b00111101100001011110000100111011";
        ram[59] = "0b00111110011011011011010110010101";
        ram[60] = "0b10111101000101011001010001010001";
        ram[61] = "0b00111110000001011001001111100110";
        ram[62] = "0b10111100110001101011001010100010";
        ram[63] = "0b00111110001011011111000111100001";
        ram[64] = "0b00111101100111000010001111101101";
        ram[65] = "0b10111101001101111101101101101110";
        ram[66] = "0b00111101100000001011000000000001";
        ram[67] = "0b10111100101001101111000100111011";
        ram[68] = "0b00111110000001011010001001010001";
        ram[69] = "0b10111101101001101100100001010110";
        ram[70] = "0b10111101001010010010111101010100";
        ram[71] = "0b00111101011111110100001001101011";
        ram[72] = "0b10111101010000000110000010101110";
        ram[73] = "0b10111101000110101000101100010110";
        ram[74] = "0b00111101101110110000011000111110";
        ram[75] = "0b00111101010100101111000111111011";
        ram[76] = "0b10111110010011011111000001001110";
        ram[77] = "0b10111100100010000010011111101101";
        ram[78] = "0b00111101010000011010010010010101";
        ram[79] = "0b10111110000101101110111001110100";
        ram[80] = "0b10111110000001001001101110100110";
        ram[81] = "0b10111101100100010111101111011001";
        ram[82] = "0b10111101101101100110000011001010";
        ram[83] = "0b10111101101100001101101101101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_0_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_0) {
meminst = new inference_mult_1_120_120_84_s_W4_0_ram("inference_mult_1_120_120_84_s_W4_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_0() {
    delete meminst;
}


};//endmodule
#endif
