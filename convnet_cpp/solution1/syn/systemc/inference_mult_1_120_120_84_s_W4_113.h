// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_113_H__
#define __inference_mult_1_120_120_84_s_W4_113_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_113_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_113_ram) {
        ram[0] = "0b00111101110001100110111000001110";
        ram[1] = "0b00111110001011001001011010001001";
        ram[2] = "0b10111110001110000010110101111011";
        ram[3] = "0b10111110000011001000101010111101";
        ram[4] = "0b10111101010000100011010011011110";
        ram[5] = "0b00111110000100000000101000111001";
        ram[6] = "0b00111100110011110010001001111101";
        ram[7] = "0b00111101110110111001010100011100";
        ram[8] = "0b10111101011010100100010001011100";
        ram[9] = "0b10111101000101000100100111101001";
        ram[10] = "0b10111100101011000101001100001111";
        ram[11] = "0b10111101110011110101000010100000";
        ram[12] = "0b10111110000100110001001010110010";
        ram[13] = "0b00111101110101001010101000010001";
        ram[14] = "0b00111101100011011101000000011101";
        ram[15] = "0b10111101110101100110101111101000";
        ram[16] = "0b00111100010000101100111111110100";
        ram[17] = "0b00111100110100100000101000100011";
        ram[18] = "0b10111101101011111000111110001010";
        ram[19] = "0b00111101100100100101000110001100";
        ram[20] = "0b10111100101000010111101101000101";
        ram[21] = "0b00111101010000111010110001000010";
        ram[22] = "0b00111101011111111101111011000011";
        ram[23] = "0b00111110000000101000100010001011";
        ram[24] = "0b00111101111111000100000100010100";
        ram[25] = "0b00111101100111100110100011010111";
        ram[26] = "0b10111110000000010111100000101101";
        ram[27] = "0b10111101001100011000101101111000";
        ram[28] = "0b00111100010111010110010011001011";
        ram[29] = "0b00111100111100000011111110011001";
        ram[30] = "0b10111101010010100001011011110101";
        ram[31] = "0b10111101000010010100001111100001";
        ram[32] = "0b10111110000100110101110001011011";
        ram[33] = "0b00111100001011101011100110111100";
        ram[34] = "0b00111110000010000111001000101010";
        ram[35] = "0b00111101001001001000101001110100";
        ram[36] = "0b00111100101101100011111010000000";
        ram[37] = "0b00111101100101011010111110110000";
        ram[38] = "0b10111110000010001001101000000010";
        ram[39] = "0b10111101100110001000001001000010";
        ram[40] = "0b00111101100000111100011000000000";
        ram[41] = "0b00111110000100010111011111101010";
        ram[42] = "0b00111101101001001111010010101100";
        ram[43] = "0b10111100101011101111000100011010";
        ram[44] = "0b10111100111111100010010101101010";
        ram[45] = "0b00111100011101001110111100101011";
        ram[46] = "0b10111100101001111001101111110001";
        ram[47] = "0b00111101100000000101110001101111";
        ram[48] = "0b00111101100010011100101010011111";
        ram[49] = "0b00111101101110011001111010010101";
        ram[50] = "0b00111101100101101101100011101000";
        ram[51] = "0b10111101110011011111101111010111";
        ram[52] = "0b00111101011111111111001010101111";
        ram[53] = "0b00111110001110000111100000110001";
        ram[54] = "0b00111100101010100101101010110010";
        ram[55] = "0b00111101010011110111000011010001";
        ram[56] = "0b00111101110100111100010001101110";
        ram[57] = "0b10111110000110100010001011110111";
        ram[58] = "0b10111101100000011100001110000100";
        ram[59] = "0b10111100101001111000000110111010";
        ram[60] = "0b10111110001000101101000011100101";
        ram[61] = "0b10111101100111011100001111011000";
        ram[62] = "0b10111110000011111000000011011100";
        ram[63] = "0b10111101011011001000111001101001";
        ram[64] = "0b10111101111100110111011101011100";
        ram[65] = "0b10111110000101001010101011011010";
        ram[66] = "0b10111110000001101001011100101001";
        ram[67] = "0b10111110000101110100110000001010";
        ram[68] = "0b10111101111110000010010011010101";
        ram[69] = "0b00111101101111011110010111011111";
        ram[70] = "0b00111101110001010011100111111100";
        ram[71] = "0b10111101011111100001111100111010";
        ram[72] = "0b00111110000010110111111001001110";
        ram[73] = "0b10111101000111101110101010001100";
        ram[74] = "0b00111101111011001011110100010010";
        ram[75] = "0b00111101100001010111011101000110";
        ram[76] = "0b00111101111000111101100100100011";
        ram[77] = "0b10111101101001010011101001011010";
        ram[78] = "0b10111101101101101011000110001000";
        ram[79] = "0b10111101110100100000101001110100";
        ram[80] = "0b10111100110101110110110101101111";
        ram[81] = "0b10111101101101110100101010010010";
        ram[82] = "0b00111110001100010001000110101110";
        ram[83] = "0b00111101101001101000011100010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_113) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_113_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_113) {
meminst = new inference_mult_1_120_120_84_s_W4_113_ram("inference_mult_1_120_120_84_s_W4_113_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_113() {
    delete meminst;
}


};//endmodule
#endif
