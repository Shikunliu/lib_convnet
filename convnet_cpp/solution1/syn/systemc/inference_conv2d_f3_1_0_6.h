// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_6_H__
#define __inference_conv2d_f3_1_0_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_6_ram) {
        ram[0] = "0b00111100001111100011111111010111";
        ram[1] = "0b00111101011101010101011100010101";
        ram[2] = "0b10111101101011000000101011010000";
        ram[3] = "0b10111101000011101111110110101111";
        ram[4] = "0b10111110010110111100101111100110";
        ram[5] = "0b00111110010010110111010100100001";
        ram[6] = "0b00111110000111101111111101011100";
        ram[7] = "0b00111110011010010010101100111101";
        ram[8] = "0b10111100001100010000100001001011";
        ram[9] = "0b00111110000011000111101110001001";
        ram[10] = "0b00111101101110001101000000010000";
        ram[11] = "0b10111110000111111110101111010001";
        ram[12] = "0b10111100110011011111001100001000";
        ram[13] = "0b00111100110110110001010110011011";
        ram[14] = "0b00111101101001110101000111110110";
        ram[15] = "0b00111110001001100001010111101100";
        ram[16] = "0b10111101111100100000101001110100";
        ram[17] = "0b10111110000100101110111100001011";
        ram[18] = "0b10111011011001101011001111111111";
        ram[19] = "0b00111101100000110100101100000001";
        ram[20] = "0b00111101010011111000010000110111";
        ram[21] = "0b00111101111101100110110001101110";
        ram[22] = "0b00111101001011010010110001101110";
        ram[23] = "0b10111101001000000110101000011110";
        ram[24] = "0b10111010100101010011010010110000";
        ram[25] = "0b10111101100010110011110010000010";
        ram[26] = "0b00111100000111000001000000001100";
        ram[27] = "0b10111100010000010001110111011000";
        ram[28] = "0b10111110000111010010111101011110";
        ram[29] = "0b00111010101110111111001010110101";
        ram[30] = "0b00111101001110000110111000000110";
        ram[31] = "0b00111101110101000100111111100011";
        ram[32] = "0b00111101100011010110010001101101";
        ram[33] = "0b00111101101110101111001111001010";
        ram[34] = "0b00111101010100111001001000011001";
        ram[35] = "0b10111101110101001100111111010001";
        ram[36] = "0b10111011100100110100010011010110";
        ram[37] = "0b10111101001010011000101010001110";
        ram[38] = "0b00111101001110011101001101100000";
        ram[39] = "0b10111011000110101101110011100110";
        ram[40] = "0b10111110001001001101011000011011";
        ram[41] = "0b10111101101111001101110100001110";
        ram[42] = "0b00111100101010101101001000111100";
        ram[43] = "0b00111100111000110001001101100000";
        ram[44] = "0b00111011010010010000000000111010";
        ram[45] = "0b10111101110001111010101010111001";
        ram[46] = "0b00111101101010010101101101000011";
        ram[47] = "0b10111101001001001000000110001010";
        ram[48] = "0b10111101110010101011011110001100";
        ram[49] = "0b10111011010111111000100001100110";
        ram[50] = "0b10111100000000110110100100101100";
        ram[51] = "0b10111011101001110000010011010010";
        ram[52] = "0b00111100100001111010000011011110";
        ram[53] = "0b00111011111110010000000000000111";
        ram[54] = "0b10111110001110101000001101101111";
        ram[55] = "0b10111101110101000111100101001111";
        ram[56] = "0b10111101010001100100010100101001";
        ram[57] = "0b00111101100000110011001011100011";
        ram[58] = "0b00111101010101100000010101011011";
        ram[59] = "0b00111101100111001000011101100010";
        ram[60] = "0b00111101100000110100011011000010";
        ram[61] = "0b10111100111101111000100111011010";
        ram[62] = "0b00111101001001111101111111100011";
        ram[63] = "0b00111110010111000011001110110101";
        ram[64] = "0b10111110010000100011100011011010";
        ram[65] = "0b10111100001100100001111001100000";
        ram[66] = "0b10111101100010101011100110001010";
        ram[67] = "0b00111011100110000011110010111000";
        ram[68] = "0b10111101100111001110111110111000";
        ram[69] = "0b00111101011101001100011100000010";
        ram[70] = "0b10111101110001110011101011100101";
        ram[71] = "0b10111100000101110001100000110101";
        ram[72] = "0b10111101000101100101000001010100";
        ram[73] = "0b00111110001011111000010010001000";
        ram[74] = "0b00111110010111101000110101010100";
        ram[75] = "0b10111101000010110110110001000101";
        ram[76] = "0b00111100000010000100010010001000";
        ram[77] = "0b10111110000101111010011111001010";
        ram[78] = "0b10111101000010111001001010100110";
        ram[79] = "0b10111101100101010000111000110100";
        ram[80] = "0b10111101110000111100101011000110";
        ram[81] = "0b00111101100101111000010111111001";
        ram[82] = "0b00111101111000011110111001100111";
        ram[83] = "0b10111110010000001010111111100110";
        ram[84] = "0b10111101001111011011101100110010";
        ram[85] = "0b10111100100110001110010101110100";
        ram[86] = "0b00111101000000000010010010110011";
        ram[87] = "0b10111100100011110101111001000010";
        ram[88] = "0b00111011101101000011010110010010";
        ram[89] = "0b10111110001001001101010000000010";
        ram[90] = "0b00111101011010010110000101110011";
        ram[91] = "0b00111110001000001011111110100001";
        ram[92] = "0b10111010000111010011000111000011";
        ram[93] = "0b00111101011001011001011000100111";
        ram[94] = "0b00111101101000000110110011110010";
        ram[95] = "0b10111101011101011100011000111011";
        ram[96] = "0b00111101101101001101101110101010";
        ram[97] = "0b10111101001010110111001110110111";
        ram[98] = "0b00111101110011010100010011011101";
        ram[99] = "0b10111100011110011000010111111110";
        ram[100] = "0b00111100110101001010011111111000";
        ram[101] = "0b10111010011101100011010001110010";
        ram[102] = "0b10111100001011110101110110111100";
        ram[103] = "0b10111100010110110011101110010000";
        ram[104] = "0b00111110000101001000001100000010";
        ram[105] = "0b10111101010110111110101000100110";
        ram[106] = "0b00111101010000111101110001111110";
        ram[107] = "0b10111101000101011011110010110000";
        ram[108] = "0b00111100000001101011110010101000";
        ram[109] = "0b00111100001010000111110101100010";
        ram[110] = "0b00111011101010011110000010111010";
        ram[111] = "0b00111101110101010111101000110101";
        ram[112] = "0b00111101101011111100011000010001";
        ram[113] = "0b10111110010110101110111100101100";
        ram[114] = "0b10111101110101101010001101111011";
        ram[115] = "0b10111110000000101101100100000110";
        ram[116] = "0b00111101100110100011001111001011";
        ram[117] = "0b10111101000010010110011100000010";
        ram[118] = "0b10111101001001101000110010101100";
        ram[119] = "0b10111101011110100101000110100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_6) {
meminst = new inference_conv2d_f3_1_0_6_ram("inference_conv2d_f3_1_0_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_6() {
    delete meminst;
}


};//endmodule
#endif
