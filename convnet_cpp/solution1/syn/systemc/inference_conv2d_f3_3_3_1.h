// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_1_H__
#define __inference_conv2d_f3_3_3_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_1_ram) {
        ram[0] = "0b10111110000000001001011110000101";
        ram[1] = "0b00111101110110100110011010011001";
        ram[2] = "0b00111100110101110010100110110011";
        ram[3] = "0b00111110000011100100111001101010";
        ram[4] = "0b00111100001101111111000101110011";
        ram[5] = "0b00111100100001100000101101000111";
        ram[6] = "0b10111110001001010011011111100011";
        ram[7] = "0b00111101101111010001100010111000";
        ram[8] = "0b10111101001101011000110111101100";
        ram[9] = "0b10111001010011001100100001011111";
        ram[10] = "0b00111101011011010000100001011100";
        ram[11] = "0b00111110000110101101101110000011";
        ram[12] = "0b00111101000010001000001111001000";
        ram[13] = "0b00111100110111111011010101110010";
        ram[14] = "0b00111101101010010000101100001100";
        ram[15] = "0b00111101010100010000001011110010";
        ram[16] = "0b00111101010100111111110011110010";
        ram[17] = "0b10111101110101011001101111000011";
        ram[18] = "0b00111101100011001110011111011010";
        ram[19] = "0b10111101000000101001010111110111";
        ram[20] = "0b10111100011101101101100111100111";
        ram[21] = "0b10111101101110000000010110111110";
        ram[22] = "0b00111010010100010100101101100010";
        ram[23] = "0b00111101000111101010100001000111";
        ram[24] = "0b10111100101110111101001000001000";
        ram[25] = "0b00111100101101001011001000100100";
        ram[26] = "0b00111110001000101010101111101111";
        ram[27] = "0b00111101001010000101010001111101";
        ram[28] = "0b10111110001001000100110100000001";
        ram[29] = "0b00111101011110101111000110111110";
        ram[30] = "0b00111110000010000011000000011010";
        ram[31] = "0b10111101011111011111110111100010";
        ram[32] = "0b00111101100100010001000111010110";
        ram[33] = "0b00111101101011101001101100000011";
        ram[34] = "0b10111101101000111100111110100110";
        ram[35] = "0b10111100111101100011110010011101";
        ram[36] = "0b00111101100110001110010011111100";
        ram[37] = "0b10111101101101110110101011111001";
        ram[38] = "0b00111101110010111111000110011000";
        ram[39] = "0b10111101010010100101110000001111";
        ram[40] = "0b00111101100011101101000010110011";
        ram[41] = "0b00111101011001000110001100111100";
        ram[42] = "0b10111101100111110001000111111001";
        ram[43] = "0b00111110001111101010010111111000";
        ram[44] = "0b10111110000001011111110111001110";
        ram[45] = "0b00111100111001110001100100010100";
        ram[46] = "0b00111100101000010000100110011011";
        ram[47] = "0b00111110001011100101100001100000";
        ram[48] = "0b00111101010111000000001100110110";
        ram[49] = "0b10111101011001000111001101111101";
        ram[50] = "0b10111100010100101111000110101010";
        ram[51] = "0b10111100101111000111000010010100";
        ram[52] = "0b10111101101010110101110110001001";
        ram[53] = "0b10111100110001010101100011010000";
        ram[54] = "0b10111101110011011110101010001001";
        ram[55] = "0b10111101111101011011010001100111";
        ram[56] = "0b10111110000101000001001000000110";
        ram[57] = "0b10111101000000001110100011001001";
        ram[58] = "0b00111101111110110000000111001001";
        ram[59] = "0b00111101101000111110000011011000";
        ram[60] = "0b00111100110000011011001110010100";
        ram[61] = "0b10111100111000100111001010111100";
        ram[62] = "0b00111110000001110111001001010000";
        ram[63] = "0b10111110000011011111001100110000";
        ram[64] = "0b10111101101000010111001100001010";
        ram[65] = "0b10111101100010111000110110111000";
        ram[66] = "0b10111101110100001011010010011110";
        ram[67] = "0b00111101111111100000011100011100";
        ram[68] = "0b00111110000000101001110011111110";
        ram[69] = "0b00111100100011110011011011010101";
        ram[70] = "0b00111011011110011100010001111101";
        ram[71] = "0b10111110001001011110010100101010";
        ram[72] = "0b10111101101100111001110010010101";
        ram[73] = "0b00111100111111100111110011011110";
        ram[74] = "0b10111101010001110110010100011001";
        ram[75] = "0b10111100110101010111011100101011";
        ram[76] = "0b00111011110111101000010011000110";
        ram[77] = "0b00111101100100111001101110111110";
        ram[78] = "0b00111101011111001110100010001001";
        ram[79] = "0b10111101100101100011000010000001";
        ram[80] = "0b00111100001011100100110010101111";
        ram[81] = "0b10111101010111000100000101001001";
        ram[82] = "0b10111101000110111101001001110100";
        ram[83] = "0b00111101111101010001011100011110";
        ram[84] = "0b00111011000001011110001000000010";
        ram[85] = "0b00111100100011110001001001010111";
        ram[86] = "0b00111011100001011010000000111101";
        ram[87] = "0b00111101000010010111000000111100";
        ram[88] = "0b00111101101101010110101111110011";
        ram[89] = "0b10111101010000101110011000101111";
        ram[90] = "0b00111101100101101000111000110010";
        ram[91] = "0b00111101001011111000110000010100";
        ram[92] = "0b00111101100101011001111100011110";
        ram[93] = "0b10111100001010011100100110010011";
        ram[94] = "0b10111101001101011011001000011001";
        ram[95] = "0b00111001111010000010100000000011";
        ram[96] = "0b00111110000110011101101111101100";
        ram[97] = "0b10111101100001111100010000110100";
        ram[98] = "0b10111101101010001001101011001100";
        ram[99] = "0b00111101001001111111010001010110";
        ram[100] = "0b00111110000110101110001011011010";
        ram[101] = "0b00111101000110101110001010100101";
        ram[102] = "0b00111101110001010101010001001101";
        ram[103] = "0b10111101001000110101010010011001";
        ram[104] = "0b10111101110100010111010100001000";
        ram[105] = "0b00111100000111101101111101101001";
        ram[106] = "0b00111101100111101010110101001111";
        ram[107] = "0b00111100001101100011000110000000";
        ram[108] = "0b10111101011010101110100011000111";
        ram[109] = "0b10111101101010010110011111100110";
        ram[110] = "0b00111101100100000101000111010111";
        ram[111] = "0b00111011001110000000100111000111";
        ram[112] = "0b10111011111011100001000011101010";
        ram[113] = "0b00111101100011010001011100110010";
        ram[114] = "0b10111110010011000100111010110101";
        ram[115] = "0b10111101101011100111111110011000";
        ram[116] = "0b00111110000000001100010110101000";
        ram[117] = "0b00111110000111001001110110011101";
        ram[118] = "0b00111011101110110011000001011000";
        ram[119] = "0b00111100011100111100011000110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_1) {
meminst = new inference_conv2d_f3_3_3_1_ram("inference_conv2d_f3_3_3_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_1() {
    delete meminst;
}


};//endmodule
#endif
