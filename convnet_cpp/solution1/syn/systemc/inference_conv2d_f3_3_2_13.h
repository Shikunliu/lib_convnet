// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_13_H__
#define __inference_conv2d_f3_3_2_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_13_ram) {
        ram[0] = "0b00111110001011011101000101011111";
        ram[1] = "0b00111101000100101001011001110000";
        ram[2] = "0b10111101101100111110001110011111";
        ram[3] = "0b00111011101001011010000111111011";
        ram[4] = "0b00111101110000110000000011010001";
        ram[5] = "0b10111110001010010010010110111011";
        ram[6] = "0b00111101101101000111110101100110";
        ram[7] = "0b10111101010010101001001110100010";
        ram[8] = "0b10111101001011001110101100000000";
        ram[9] = "0b00111101101110100101000000011011";
        ram[10] = "0b10111101100101101000001100100010";
        ram[11] = "0b00111101101001010010111101100100";
        ram[12] = "0b00111110001010011111011010101001";
        ram[13] = "0b00111101111110011000111100011101";
        ram[14] = "0b10111100011111011011010100111000";
        ram[15] = "0b00111101111110001010000010010000";
        ram[16] = "0b00111101011111100110110010111000";
        ram[17] = "0b00111101110000110000100001101011";
        ram[18] = "0b10111101000101111000101111011000";
        ram[19] = "0b10111101110111100011001110101101";
        ram[20] = "0b00111110000010101101010101111100";
        ram[21] = "0b00111101100100001001111011000001";
        ram[22] = "0b00111101000111001000010010110110";
        ram[23] = "0b10111110000000100101001110010111";
        ram[24] = "0b10111110000101101110011100011101";
        ram[25] = "0b00111100110001000010011100001100";
        ram[26] = "0b00111101000011100011100101100100";
        ram[27] = "0b00111100111001011001011010010010";
        ram[28] = "0b10111101101001101011010100100110";
        ram[29] = "0b10111101111001010110011100010010";
        ram[30] = "0b10111110000000000110110110010100";
        ram[31] = "0b00111101100101000111010000000011";
        ram[32] = "0b00111011010110111111100100010000";
        ram[33] = "0b10111101001101010010111010110110";
        ram[34] = "0b10111110011001010010100100110101";
        ram[35] = "0b10111101101101111011001110110001";
        ram[36] = "0b10111101111110000110011101101010";
        ram[37] = "0b10111110000000001010000011110101";
        ram[38] = "0b10111110000111010011011001110010";
        ram[39] = "0b00111100110011000010110111010110";
        ram[40] = "0b10111101101000010011101000100111";
        ram[41] = "0b00111101000000011110001001011000";
        ram[42] = "0b00111101111001010010010110001001";
        ram[43] = "0b10111101100101110100000111000011";
        ram[44] = "0b10111110001110011101001111001100";
        ram[45] = "0b00111101000011101010010010101001";
        ram[46] = "0b10111010101100101101000011111000";
        ram[47] = "0b00111100001110111001011111110001";
        ram[48] = "0b00111011010010001001110010111100";
        ram[49] = "0b00111110000011001001110100010111";
        ram[50] = "0b10111101111101111010010101101110";
        ram[51] = "0b00111110000110000100111111010011";
        ram[52] = "0b00111101100111000101001100001111";
        ram[53] = "0b10111101100100000000001101000000";
        ram[54] = "0b00111101000001000110110001011011";
        ram[55] = "0b00111001111110001001110010110100";
        ram[56] = "0b00111101001110111111101011101101";
        ram[57] = "0b10111101101111010000010011110100";
        ram[58] = "0b10111110010001110000101111010000";
        ram[59] = "0b10111101110100111101000001111101";
        ram[60] = "0b00111101100101010101010110101010";
        ram[61] = "0b00111101101101010001000011000110";
        ram[62] = "0b10111100000101000110110100101010";
        ram[63] = "0b00111110010111101011100000001111";
        ram[64] = "0b00111110000000001001111010011001";
        ram[65] = "0b10111101000101011111111000011110";
        ram[66] = "0b00111101110100101101010101011010";
        ram[67] = "0b10111110001110111111100111000110";
        ram[68] = "0b10111010111110010000100101101100";
        ram[69] = "0b00111110000000101011011000101000";
        ram[70] = "0b00111101110000110011001001011100";
        ram[71] = "0b00111101010111001000001111000100";
        ram[72] = "0b00111100110101100110000111010111";
        ram[73] = "0b10111101111000101101000011100101";
        ram[74] = "0b00111100001100011100001011110001";
        ram[75] = "0b00111100101010000000011001000100";
        ram[76] = "0b00111100000111111101010011100111";
        ram[77] = "0b00111101101101101101110100100111";
        ram[78] = "0b00111100101001010001001111101011";
        ram[79] = "0b00111101010010010000111001100111";
        ram[80] = "0b10111101011110110001100101000110";
        ram[81] = "0b10111101111011011000001000110100";
        ram[82] = "0b00111101100000111111111111000111";
        ram[83] = "0b10111101111111011011001000101101";
        ram[84] = "0b10111100101001111001101000001101";
        ram[85] = "0b00111101000001010100101010101000";
        ram[86] = "0b10111101000101011110011101111000";
        ram[87] = "0b00111101110011110100011000100100";
        ram[88] = "0b10111110000010101100100111110011";
        ram[89] = "0b10111110000110101011011101010110";
        ram[90] = "0b10111010110000011101110100000101";
        ram[91] = "0b10111101100001111011110111110111";
        ram[92] = "0b00111101110101111010011110000111";
        ram[93] = "0b00111011001011011100110100101101";
        ram[94] = "0b10111100100110100010100001101011";
        ram[95] = "0b10111101001100110110101011111100";
        ram[96] = "0b00111101111100010011110101110101";
        ram[97] = "0b00111101110001001011111101001101";
        ram[98] = "0b00111100000011100101111100001001";
        ram[99] = "0b00111100110010000011001101110101";
        ram[100] = "0b10111101101000111000010011100010";
        ram[101] = "0b00111110000001000010111111101000";
        ram[102] = "0b00111110001011001001001010011011";
        ram[103] = "0b00111101111110100010110101110011";
        ram[104] = "0b10111110001010111110011010100011";
        ram[105] = "0b00111100100011100010110010110100";
        ram[106] = "0b10111100011001100110001111100010";
        ram[107] = "0b10111101011001110011000111010011";
        ram[108] = "0b00111101100001110010000100001100";
        ram[109] = "0b10111110001011001110101001101100";
        ram[110] = "0b10111110001101011000100011100011";
        ram[111] = "0b10111101110011000100100101011100";
        ram[112] = "0b10111100101010001111011111011011";
        ram[113] = "0b10111100101101100000001111001000";
        ram[114] = "0b00111101101101000110010010011001";
        ram[115] = "0b10111101110110011101110010110101";
        ram[116] = "0b00111110001100010100000101100011";
        ram[117] = "0b00111110001001001100110101110101";
        ram[118] = "0b00111101101101011100001101011001";
        ram[119] = "0b10111101000000110010000100111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_13) {
meminst = new inference_conv2d_f3_3_2_13_ram("inference_conv2d_f3_3_2_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_13() {
    delete meminst;
}


};//endmodule
#endif
