// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_14_H__
#define __inference_conv2d_f3_3_1_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_14_ram) {
        ram[0] = "0b10111101110011011000111111010110";
        ram[1] = "0b00111101100100110110000100111100";
        ram[2] = "0b10111011111011110000101100111011";
        ram[3] = "0b00111101011010111001100101011100";
        ram[4] = "0b10111101010110010010011011100011";
        ram[5] = "0b00111100110010100011011001001111";
        ram[6] = "0b10111100101110101101111010001110";
        ram[7] = "0b10111110001011000101101011000100";
        ram[8] = "0b00111100110000110001100111000110";
        ram[9] = "0b00111101010101000001010111001100";
        ram[10] = "0b00111011101100001011100001000100";
        ram[11] = "0b10111101000101001011010000111101";
        ram[12] = "0b00111101101110001110011110001101";
        ram[13] = "0b00111101011011010001001000110111";
        ram[14] = "0b00111100101111011110010010011101";
        ram[15] = "0b00111110000000101001011100111001";
        ram[16] = "0b10111011101110101100101000000000";
        ram[17] = "0b00111100110110011010000110010010";
        ram[18] = "0b10111110010010001101011001001101";
        ram[19] = "0b00111110000111111111010010111010";
        ram[20] = "0b00111101001110001000010011111100";
        ram[21] = "0b00111101100000100011101001011111";
        ram[22] = "0b10111100110000101011011010010100";
        ram[23] = "0b00111101100100010101111111110100";
        ram[24] = "0b00111101011111101100011101010001";
        ram[25] = "0b00111101100011001111010101111100";
        ram[26] = "0b10111110000110101010100001100101";
        ram[27] = "0b00111100010001001010100111101001";
        ram[28] = "0b00111101010111000001110100011100";
        ram[29] = "0b10111101011000011010000000101110";
        ram[30] = "0b00111110010110101100111000100101";
        ram[31] = "0b00111101010010010010100110101010";
        ram[32] = "0b10111101001100001011101011101001";
        ram[33] = "0b10111101110010111110000111011110";
        ram[34] = "0b00111100111101011000101001011011";
        ram[35] = "0b10111101100001100001111001111000";
        ram[36] = "0b00111110000101010010011101011111";
        ram[37] = "0b10111101000101010011100101001101";
        ram[38] = "0b10111101101111001111011111011000";
        ram[39] = "0b00111100000000100111011001011101";
        ram[40] = "0b00111101011110000101000110110110";
        ram[41] = "0b00111110000111110110011110110010";
        ram[42] = "0b00111101010101110110111011001100";
        ram[43] = "0b00111101010010010001010011001100";
        ram[44] = "0b00111110000010011101010000001111";
        ram[45] = "0b00111101101110010010111100101011";
        ram[46] = "0b00111110001001110100111001100110";
        ram[47] = "0b00111100000101110101010100111100";
        ram[48] = "0b00111101101111001100000110100010";
        ram[49] = "0b00111100101101111100101000000110";
        ram[50] = "0b10111011101011110011101011010110";
        ram[51] = "0b00111101111101101111111111000001";
        ram[52] = "0b10111011000001000000101111101001";
        ram[53] = "0b00111100111101111101000111111110";
        ram[54] = "0b10111101011011010001101101110001";
        ram[55] = "0b00111110000101000100001001000010";
        ram[56] = "0b10111101000010001011100111100011";
        ram[57] = "0b00111110011010001111100101101110";
        ram[58] = "0b00111100111010110000110110010101";
        ram[59] = "0b10111101001111101010000111100001";
        ram[60] = "0b00111110001101000001011101000100";
        ram[61] = "0b10111101010000100000110101110001";
        ram[62] = "0b00111101001111111010010110111000";
        ram[63] = "0b10111110011001010101011000001000";
        ram[64] = "0b00111100100001010111101010010011";
        ram[65] = "0b10111101010010011101101101100110";
        ram[66] = "0b10111101001000011001111100000111";
        ram[67] = "0b10111110010001111110011010110100";
        ram[68] = "0b00111101000010100111100001011111";
        ram[69] = "0b00111101100111010001100101100110";
        ram[70] = "0b00111101010100111111010110000000";
        ram[71] = "0b10111101010010001111010100000111";
        ram[72] = "0b00111101011111000000101011111001";
        ram[73] = "0b10111101110100010100101000001010";
        ram[74] = "0b10111101001110010000011111011001";
        ram[75] = "0b00111110001001001100101001001111";
        ram[76] = "0b10111101000100110011110101111010";
        ram[77] = "0b10111101000110010110111101011000";
        ram[78] = "0b00111101100111111100100110010100";
        ram[79] = "0b00111101010010001111100011001101";
        ram[80] = "0b00111101100110111110011101000100";
        ram[81] = "0b00111101110101110111000100000000";
        ram[82] = "0b00111110000111110000111001001110";
        ram[83] = "0b10111101111110100011000100011111";
        ram[84] = "0b10111101010011001011001100011100";
        ram[85] = "0b00111110001001101010000110100101";
        ram[86] = "0b00111101011010000111010010101110";
        ram[87] = "0b10111101011100110011111010000110";
        ram[88] = "0b00111101110011111001111010111111";
        ram[89] = "0b10111101011101110101110001011000";
        ram[90] = "0b10111101000000110100111010111010";
        ram[91] = "0b00111110001100010010110011110001";
        ram[92] = "0b00111110010010001101001100101000";
        ram[93] = "0b10111101100110111010101100000111";
        ram[94] = "0b00111101110001000001101001110111";
        ram[95] = "0b10111100010001011010110110001001";
        ram[96] = "0b00111101101000001111111100101100";
        ram[97] = "0b00111100110000000000110010010101";
        ram[98] = "0b00111101100000011001001001110010";
        ram[99] = "0b10111100111111001001100010100010";
        ram[100] = "0b00111100110101001010000010100001";
        ram[101] = "0b00111110000001011010101111000001";
        ram[102] = "0b10111110000110010101111100100100";
        ram[103] = "0b10111110001001001010010001001100";
        ram[104] = "0b00111110000000100111000011110100";
        ram[105] = "0b00111101100000011110000110000010";
        ram[106] = "0b00111101111101001010000010100001";
        ram[107] = "0b10111101100000001110010100010000";
        ram[108] = "0b00111110000011100011001101101010";
        ram[109] = "0b10111101011000110010010000001100";
        ram[110] = "0b00111110000010110101000011110100";
        ram[111] = "0b00111101100010101101101000110100";
        ram[112] = "0b00111110001000111010110111100010";
        ram[113] = "0b10111101110000101000100010110100";
        ram[114] = "0b00111100100000100110111001101111";
        ram[115] = "0b00111110000000000011010011110100";
        ram[116] = "0b10111101000011111011100110010111";
        ram[117] = "0b10111101110010101101110010010000";
        ram[118] = "0b10111101111001000000011111001100";
        ram[119] = "0b00111110000000101010101110101100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_14) {
meminst = new inference_conv2d_f3_3_1_14_ram("inference_conv2d_f3_3_1_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_14() {
    delete meminst;
}


};//endmodule
#endif
