// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_15_H__
#define __inference_conv2d_f3_4_4_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_15_ram) {
        ram[0] = "0b10111110001110110111101100101001";
        ram[1] = "0b10111110000000110010011011100001";
        ram[2] = "0b10111110001011101001011100000111";
        ram[3] = "0b10111110001011111111011000001010";
        ram[4] = "0b00111110000000000000000111010110";
        ram[5] = "0b10111100000001011001100100110010";
        ram[6] = "0b00111100111111100011000100101001";
        ram[7] = "0b00111101101100001101101100011010";
        ram[8] = "0b00111110000001101111101100001001";
        ram[9] = "0b00111100100100011100011011010010";
        ram[10] = "0b10111100111000110100001011111011";
        ram[11] = "0b10111110000100001111010010010101";
        ram[12] = "0b00111110000100000011011111010110";
        ram[13] = "0b00111110000100100111111101011111";
        ram[14] = "0b00111101100001100011111011111001";
        ram[15] = "0b10111101010100000100110100000101";
        ram[16] = "0b00111101001110010001101111111011";
        ram[17] = "0b10111101110001101001100110010010";
        ram[18] = "0b00111110000011111111100000100011";
        ram[19] = "0b00111101001011111000110010110110";
        ram[20] = "0b10111101101011001011101001011000";
        ram[21] = "0b00111011101100000111110011001011";
        ram[22] = "0b00111110000011000010011110100110";
        ram[23] = "0b00111001111010111011010110011011";
        ram[24] = "0b10111100111010000001110010110100";
        ram[25] = "0b00111101010100101010111111101011";
        ram[26] = "0b00111101101010111100000100001100";
        ram[27] = "0b10111110001001101111111101111110";
        ram[28] = "0b10111101101010100001001001100101";
        ram[29] = "0b10111100000110101100100000001101";
        ram[30] = "0b00111101011111100100001110111000";
        ram[31] = "0b10111110010100110101101011001001";
        ram[32] = "0b00111011001000011110001000010011";
        ram[33] = "0b10111101100000100100101100110100";
        ram[34] = "0b00111100101111101101000011000000";
        ram[35] = "0b10111101110110001001000101011100";
        ram[36] = "0b10111110000111101000000010111111";
        ram[37] = "0b00111100110001001111101101111101";
        ram[38] = "0b10111110100010111011000111110010";
        ram[39] = "0b00111101000110011110001011001010";
        ram[40] = "0b00111100101011000110101101100011";
        ram[41] = "0b00111101100111000111001011010101";
        ram[42] = "0b10111101101001111110100111001100";
        ram[43] = "0b00111101101001110110100010110111";
        ram[44] = "0b00111100010101001011010000100010";
        ram[45] = "0b00111101110000100010100101100011";
        ram[46] = "0b00111101101001000100010000110010";
        ram[47] = "0b10111101101001111101011000001000";
        ram[48] = "0b00111101010111110100110011100111";
        ram[49] = "0b00111110000000001111111101010100";
        ram[50] = "0b10111101010001100011110111101101";
        ram[51] = "0b10111101101111110100000001011111";
        ram[52] = "0b00111101100001010100100000010110";
        ram[53] = "0b10111101000010111111010110000111";
        ram[54] = "0b00111101101001000101001111011111";
        ram[55] = "0b00111100100000111101000101000110";
        ram[56] = "0b10111110000001000111100100001100";
        ram[57] = "0b10111101111000010101101110011010";
        ram[58] = "0b00111100100111010110010100000000";
        ram[59] = "0b10111100100111101111111100110100";
        ram[60] = "0b10111110000110100110101001000100";
        ram[61] = "0b00111101111000011010101011000101";
        ram[62] = "0b00111101100000010001100100010010";
        ram[63] = "0b00111101111001110000010111001001";
        ram[64] = "0b10111101111110101000101101001100";
        ram[65] = "0b00111110000111100011001100100111";
        ram[66] = "0b00111100001001010000100110100101";
        ram[67] = "0b10111101100100000010010111011011";
        ram[68] = "0b10111100011010011001111000101001";
        ram[69] = "0b00111101100110010100110110111100";
        ram[70] = "0b10111101101001111000100011001110";
        ram[71] = "0b00111110001011111000001010110010";
        ram[72] = "0b00111101010011000000010011010110";
        ram[73] = "0b00111110001101111101010100100100";
        ram[74] = "0b10111101001101010011110000100010";
        ram[75] = "0b00111110010001010000010101001011";
        ram[76] = "0b10111101010100111110000111001010";
        ram[77] = "0b10111101001000011110010011110111";
        ram[78] = "0b10111110011000111001111100110100";
        ram[79] = "0b00111101110111101111000001101011";
        ram[80] = "0b00111101111000001111001000111001";
        ram[81] = "0b10111101110111111111010001110111";
        ram[82] = "0b10111101010001011110100010101101";
        ram[83] = "0b00111101000111111110100111100000";
        ram[84] = "0b10111100100100001100000111101111";
        ram[85] = "0b10111011111111010100000010001000";
        ram[86] = "0b10111101111010000001110111000001";
        ram[87] = "0b10111100110011000100000111000010";
        ram[88] = "0b10111011101101110110111100000010";
        ram[89] = "0b10111101101010111100011010101000";
        ram[90] = "0b00111100111010010011000111110011";
        ram[91] = "0b10111101100010110010000111010010";
        ram[92] = "0b10111011101111000100010011101010";
        ram[93] = "0b00111110001000101100000101101110";
        ram[94] = "0b00111101101100111011001001110010";
        ram[95] = "0b10111101010001011000101100111111";
        ram[96] = "0b00111110010001000011100011010010";
        ram[97] = "0b10111101101101000100010010111001";
        ram[98] = "0b10111110000001100010010111101010";
        ram[99] = "0b10111011101001110100101000000110";
        ram[100] = "0b00111110000010101100110000001100";
        ram[101] = "0b10111100100011110000010010110101";
        ram[102] = "0b10111010100101011100101001010111";
        ram[103] = "0b00111101100101111001001100101111";
        ram[104] = "0b10111101000010111000100001011111";
        ram[105] = "0b00111100110110000100101101010000";
        ram[106] = "0b00111101110011000110101001010111";
        ram[107] = "0b10111011111000011100000101100110";
        ram[108] = "0b00111101011111100000111011000100";
        ram[109] = "0b00111110000000011111100100100111";
        ram[110] = "0b00111101100111101001000000001110";
        ram[111] = "0b10111101011001100000010110011110";
        ram[112] = "0b10111100111111000001010011101111";
        ram[113] = "0b00111110000111011000011101110010";
        ram[114] = "0b00111101111011100011100000100010";
        ram[115] = "0b10111101100010011010000110011111";
        ram[116] = "0b00111101100101110011101000011100";
        ram[117] = "0b10111101111010000101110010101011";
        ram[118] = "0b10111101100011100010000011000000";
        ram[119] = "0b10111101111001011101111010011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_15) {
meminst = new inference_conv2d_f3_4_4_15_ram("inference_conv2d_f3_4_4_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_15() {
    delete meminst;
}


};//endmodule
#endif
