// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_10_H__
#define __inference_conv2d_f3_2_2_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_10_ram) {
        ram[0] = "0b10111101110100101100010000001101";
        ram[1] = "0b10111101000001011111110111011011";
        ram[2] = "0b00111101110000011010100101000000";
        ram[3] = "0b00111101001101001100101110000100";
        ram[4] = "0b00111101101011010001000101111011";
        ram[5] = "0b00111110001101101010001001101110";
        ram[6] = "0b00111110000011011100100111000101";
        ram[7] = "0b00111110001110010000011011001101";
        ram[8] = "0b00111110000101011111001001000101";
        ram[9] = "0b00111101010101101111110111011110";
        ram[10] = "0b10111110001000110101100101111001";
        ram[11] = "0b00111100010100100100100100001110";
        ram[12] = "0b00111100101101001101000011000010";
        ram[13] = "0b10111101001110101100100010100011";
        ram[14] = "0b10111101110111100100000001000010";
        ram[15] = "0b00111100110001000101110010000110";
        ram[16] = "0b00111101001111010001100010101010";
        ram[17] = "0b10111110001001100001011111000010";
        ram[18] = "0b00111101001010110010001000001000";
        ram[19] = "0b10111101100101111010011101010001";
        ram[20] = "0b00111101010000100110110111101001";
        ram[21] = "0b10111110000011001000110110100000";
        ram[22] = "0b10111011110100001100011000010110";
        ram[23] = "0b00111101011110001101110001110000";
        ram[24] = "0b00111101001010111000011010110001";
        ram[25] = "0b00111101110000111011011111100110";
        ram[26] = "0b00111101100011101111010101001011";
        ram[27] = "0b00111101100011010101110011100000";
        ram[28] = "0b00111101100001110110011000001011";
        ram[29] = "0b10111011101110111010011101001011";
        ram[30] = "0b10111110010011010000000011110111";
        ram[31] = "0b00111100101010001101001000011100";
        ram[32] = "0b10111101110111011110001011101111";
        ram[33] = "0b10111101111010001010100010110001";
        ram[34] = "0b00111101100001100010000001110110";
        ram[35] = "0b10111101100011100000011100000001";
        ram[36] = "0b10111100101100011001010111011010";
        ram[37] = "0b10111101010010001110111011110010";
        ram[38] = "0b00111101000111011010101101011100";
        ram[39] = "0b10111101000111110111110000010111";
        ram[40] = "0b10111101100100010000011111111011";
        ram[41] = "0b00111100000011111111000010000011";
        ram[42] = "0b00111110000100100101100001001111";
        ram[43] = "0b00111101000011101010110010100001";
        ram[44] = "0b00111100001001011011010011000101";
        ram[45] = "0b10111101010101111010001010011001";
        ram[46] = "0b10111110000011011011010110010101";
        ram[47] = "0b00111100010000111010110101101001";
        ram[48] = "0b10111101000101111001111000110010";
        ram[49] = "0b10111101001001011000000110110101";
        ram[50] = "0b10111110001100101001011011110110";
        ram[51] = "0b10111110001010001000101101010100";
        ram[52] = "0b00111110000011110011111000000011";
        ram[53] = "0b00111101000101010010001011110111";
        ram[54] = "0b00111101100001110000000111001101";
        ram[55] = "0b00111101100100010110101010110100";
        ram[56] = "0b10111011100010010011001001000011";
        ram[57] = "0b10111110000010111111001110111111";
        ram[58] = "0b10111100110001010000000111111101";
        ram[59] = "0b00111101101011011010001110011010";
        ram[60] = "0b10111101001000000000011110101000";
        ram[61] = "0b10111101001101101110101101101001";
        ram[62] = "0b00111101001111010010100010011010";
        ram[63] = "0b00111101110001000001010000010001";
        ram[64] = "0b00111101010110010111011101010000";
        ram[65] = "0b10111110000100111010011101010100";
        ram[66] = "0b10111110010011111000111101000111";
        ram[67] = "0b10111101000111111001100000110001";
        ram[68] = "0b10111110000011001000010111000010";
        ram[69] = "0b10111100101010110110010000110010";
        ram[70] = "0b00111101001101111111100010110000";
        ram[71] = "0b10111101111101111100001011001010";
        ram[72] = "0b10111110000000010011011010100100";
        ram[73] = "0b00111101000111011000000101101011";
        ram[74] = "0b00111101111010010110100010010100";
        ram[75] = "0b00111100001111110101010000111110";
        ram[76] = "0b00111101110110001101010011111110";
        ram[77] = "0b00111101000110111100011001001010";
        ram[78] = "0b00111101001111001101011011010000";
        ram[79] = "0b00111110010000111000001001011110";
        ram[80] = "0b10111100111100101111100001111011";
        ram[81] = "0b00111101000010001011010111100111";
        ram[82] = "0b10111110000011001011111001100010";
        ram[83] = "0b10111011110000100000101111010100";
        ram[84] = "0b00111101100111000101100101110101";
        ram[85] = "0b10111101100111011110101001100001";
        ram[86] = "0b10111110000000010010111110010000";
        ram[87] = "0b10111101010000111010010000101111";
        ram[88] = "0b10111100111111010001011101001101";
        ram[89] = "0b00111110000001100110000000011100";
        ram[90] = "0b00111101110110001110001010100000";
        ram[91] = "0b00111100010011110001000110110110";
        ram[92] = "0b10111011100000110100110110101000";
        ram[93] = "0b10111101010101110101010010110000";
        ram[94] = "0b00111011110001001100100101001000";
        ram[95] = "0b10111101101010110011100010010011";
        ram[96] = "0b10111101101111100000000000111110";
        ram[97] = "0b10111011011111001000001101001001";
        ram[98] = "0b00111101111010100001011010100101";
        ram[99] = "0b10111101110100101011101000010111";
        ram[100] = "0b10111101101000100001001010000111";
        ram[101] = "0b00111100111010110011001010110100";
        ram[102] = "0b10111100110111000011001101110010";
        ram[103] = "0b10111011100011101011110001011011";
        ram[104] = "0b00111101011000110101100010010101";
        ram[105] = "0b00111101101011010010110011110100";
        ram[106] = "0b10111101010001000101101110010100";
        ram[107] = "0b00111101110011010000000111000001";
        ram[108] = "0b10111101001000010011111110000000";
        ram[109] = "0b00111100101110011101111101010101";
        ram[110] = "0b10111100110000101100011001001110";
        ram[111] = "0b00111100001010001110110011110100";
        ram[112] = "0b00111101101101000011000011110101";
        ram[113] = "0b00111101100011001010110001011001";
        ram[114] = "0b10111101000111100001001000000100";
        ram[115] = "0b00111101110000010100010011011001";
        ram[116] = "0b10111100111110110110110010111110";
        ram[117] = "0b00111110000100111100000100000101";
        ram[118] = "0b10111101101000011101001101100111";
        ram[119] = "0b00111110000101011111010100100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_10) {
meminst = new inference_conv2d_f3_2_2_10_ram("inference_conv2d_f3_2_2_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_10() {
    delete meminst;
}


};//endmodule
#endif
