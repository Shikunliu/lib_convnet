// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_3_H__
#define __inference_conv2d_f3_4_0_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_3_ram) {
        ram[0] = "0b10111101100101000000010011000010";
        ram[1] = "0b10111110000011001100110100010000";
        ram[2] = "0b10111101101100011111101010101100";
        ram[3] = "0b00111101111001010111000100001001";
        ram[4] = "0b10111110000100001011110000111000";
        ram[5] = "0b00111100110010101011011100010011";
        ram[6] = "0b10111101110010010000100001000100";
        ram[7] = "0b10111101001111100110010110010110";
        ram[8] = "0b10111101110001111100010111111101";
        ram[9] = "0b10111110000111010000011110000101";
        ram[10] = "0b00111101111100001010011001110110";
        ram[11] = "0b00111110000001101011110111110101";
        ram[12] = "0b10111101111111000110110010011000";
        ram[13] = "0b10111100111111100010000000101100";
        ram[14] = "0b10111101100111011100111001111101";
        ram[15] = "0b00111101110100001110001111001110";
        ram[16] = "0b00111101100000100110001010010110";
        ram[17] = "0b10111101000100000000000001111001";
        ram[18] = "0b00111101111101110101111010100110";
        ram[19] = "0b00111110001100001001001011001101";
        ram[20] = "0b10111101110010100100110011001101";
        ram[21] = "0b10111110001101011110010011100111";
        ram[22] = "0b00111101000100100010000111010110";
        ram[23] = "0b10111101000010010001000110001100";
        ram[24] = "0b00111101101111101011010101110000";
        ram[25] = "0b00111101110010010110101010100000";
        ram[26] = "0b00111100100101110101010100011100";
        ram[27] = "0b10111101001111011110100001001000";
        ram[28] = "0b10111101100101011100011101000111";
        ram[29] = "0b10111101000011111001110011110110";
        ram[30] = "0b10111100100111011111000111101110";
        ram[31] = "0b00111011010101110011001011010111";
        ram[32] = "0b10111100101000001100100111011010";
        ram[33] = "0b00111100101110000111110100011111";
        ram[34] = "0b00111010001011001000100100111110";
        ram[35] = "0b10111101111010011010010111101100";
        ram[36] = "0b10111100100110111100010111111001";
        ram[37] = "0b00111100111110000101111111000011";
        ram[38] = "0b00111110000110000111101110011010";
        ram[39] = "0b00111101001101110100100010100001";
        ram[40] = "0b10111100000001000011001011000000";
        ram[41] = "0b00111100001100011101101000000010";
        ram[42] = "0b00111101111011000010110001011110";
        ram[43] = "0b00111110000111010110001010111111";
        ram[44] = "0b10111101001110000100011100011111";
        ram[45] = "0b10111110000100001111001001111100";
        ram[46] = "0b00111100101010010100101011101000";
        ram[47] = "0b00111101011000000100101011111001";
        ram[48] = "0b00111101100101111000100011110110";
        ram[49] = "0b00111100100110111011101100010010";
        ram[50] = "0b00111101100001111000001010011110";
        ram[51] = "0b00111110010001101010101100010101";
        ram[52] = "0b00111100011100111110100111011101";
        ram[53] = "0b00111110001010101001100011101110";
        ram[54] = "0b10111101111001110100100101101011";
        ram[55] = "0b00111101111000001100010110101000";
        ram[56] = "0b00111100111000111011101100100110";
        ram[57] = "0b10111110010000111101010001101011";
        ram[58] = "0b10111101100011110100110111100110";
        ram[59] = "0b10111101101100011101101010100011";
        ram[60] = "0b00111101001100000001011110100101";
        ram[61] = "0b00111011101000101000110000110001";
        ram[62] = "0b00111101110101100000110110001000";
        ram[63] = "0b10111101101011100010010100011010";
        ram[64] = "0b10111101100111111000111011001110";
        ram[65] = "0b10111100010111011001011010110100";
        ram[66] = "0b10111101110111000011111001110101";
        ram[67] = "0b00111101100110101110110011011110";
        ram[68] = "0b10111101110010111101011000101101";
        ram[69] = "0b10111101110111000010010011000100";
        ram[70] = "0b00111101001011001100011000010111";
        ram[71] = "0b10111101101100110010000010010110";
        ram[72] = "0b00111101100011000010111101011011";
        ram[73] = "0b00111101011001110000111010010111";
        ram[74] = "0b10111101010111111111100011111001";
        ram[75] = "0b10111101111000001001010001100000";
        ram[76] = "0b10111101001001001110011001101001";
        ram[77] = "0b10111100101100010011010011000001";
        ram[78] = "0b00111101100010010011100000010101";
        ram[79] = "0b10111110001010010001000011000011";
        ram[80] = "0b00111101100111111001101101100100";
        ram[81] = "0b00111100111101110000010111110001";
        ram[82] = "0b10111110000000000110011100000110";
        ram[83] = "0b00111101111101101110110101100111";
        ram[84] = "0b00111101101011100010001111001010";
        ram[85] = "0b10111101011111100111000100011111";
        ram[86] = "0b10111100100111011011111101100011";
        ram[87] = "0b00111100111101111110000110000011";
        ram[88] = "0b10111101000001101100101010100101";
        ram[89] = "0b00111101111101001011010010001101";
        ram[90] = "0b00111110000001110110101001110010";
        ram[91] = "0b10111011111000001000110011110011";
        ram[92] = "0b10111101101010101111110110110010";
        ram[93] = "0b10111101110010011001000110000111";
        ram[94] = "0b00111101111100111010001011100000";
        ram[95] = "0b10111011011011100111110100100001";
        ram[96] = "0b00111010101100010000000000111110";
        ram[97] = "0b10111110000101110100110000001010";
        ram[98] = "0b10111101100001110000111000000100";
        ram[99] = "0b00111101011010110000101010001011";
        ram[100] = "0b10111101111010010100111101101010";
        ram[101] = "0b10111100000010111010011000111100";
        ram[102] = "0b10111100001111111010110100101010";
        ram[103] = "0b10111101110111110010110100111100";
        ram[104] = "0b00111101111010001000101101010100";
        ram[105] = "0b10111101011000100010110100000001";
        ram[106] = "0b00111101011100000100000000000100";
        ram[107] = "0b00111101100011011000010000010111";
        ram[108] = "0b00111101000010100011111110111111";
        ram[109] = "0b10111011110111011111111001111000";
        ram[110] = "0b10111101111001001111101000000101";
        ram[111] = "0b10111110000011100111001001010100";
        ram[112] = "0b00111101100111000001010111100000";
        ram[113] = "0b10111101111111100010111001101111";
        ram[114] = "0b10111101101011110000011000100000";
        ram[115] = "0b10111101000100000000001011111101";
        ram[116] = "0b10111100001101111001100111001010";
        ram[117] = "0b10111100101010110000010011000110";
        ram[118] = "0b10111101111011110100101011011100";
        ram[119] = "0b00111110000000100111101110110011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_3) {
meminst = new inference_conv2d_f3_4_0_3_ram("inference_conv2d_f3_4_0_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_3() {
    delete meminst;
}


};//endmodule
#endif
