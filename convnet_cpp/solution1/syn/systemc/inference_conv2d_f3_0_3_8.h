// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_8_H__
#define __inference_conv2d_f3_0_3_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_8_ram) {
        ram[0] = "0b10111100010001001001110011101000";
        ram[1] = "0b10111101101111110011001000001111";
        ram[2] = "0b10111110010101101101110010100000";
        ram[3] = "0b00111110000101101001010010001010";
        ram[4] = "0b00111101111010000101000000010110";
        ram[5] = "0b10111110010000001001100010010001";
        ram[6] = "0b00111110011001101000001111000011";
        ram[7] = "0b10111110010000001010011000110011";
        ram[8] = "0b10111100111001001011110001000010";
        ram[9] = "0b00111110000000001011111111100100";
        ram[10] = "0b00111100101011011001001001110101";
        ram[11] = "0b00111101111010111110101101011011";
        ram[12] = "0b00111110000010110100010000011100";
        ram[13] = "0b00111101110011000000010001111000";
        ram[14] = "0b10111100110110110011010101111011";
        ram[15] = "0b10111101110001000100111011010111";
        ram[16] = "0b00111101011000110010011100110010";
        ram[17] = "0b10111101100011100001101101110100";
        ram[18] = "0b00111101101011110010010000111000";
        ram[19] = "0b10111101101101101001110101001011";
        ram[20] = "0b00111110000110001111101010111110";
        ram[21] = "0b00111101100110100100101000000110";
        ram[22] = "0b10111100101010011110000100001111";
        ram[23] = "0b00111100100100111101111011011010";
        ram[24] = "0b10111101100100011010011001101011";
        ram[25] = "0b00111100111001011011010011000101";
        ram[26] = "0b10111110010010011100110011111011";
        ram[27] = "0b10111011100100110100000000001110";
        ram[28] = "0b00111110010001010000100101111101";
        ram[29] = "0b00111101000110101010110101100000";
        ram[30] = "0b10111110000011010001001100001110";
        ram[31] = "0b10111100110011001000101111001010";
        ram[32] = "0b00111100101100001101001101110010";
        ram[33] = "0b10111101101101111000110011110010";
        ram[34] = "0b10111110001101010100100111111001";
        ram[35] = "0b10111100111111110010100010011111";
        ram[36] = "0b00111101111110111011100011000011";
        ram[37] = "0b10111101100011011010011000010001";
        ram[38] = "0b10111101110101111011010000011100";
        ram[39] = "0b00111101100000001111011001000010";
        ram[40] = "0b00111011100110100111101111000010";
        ram[41] = "0b00111011011100101001001000000011";
        ram[42] = "0b10111101110111010001110000111011";
        ram[43] = "0b10111110100101100000100111111111";
        ram[44] = "0b10111101100000011001000011101100";
        ram[45] = "0b10111101001001000001001110001011";
        ram[46] = "0b10111101111010000101110100110001";
        ram[47] = "0b10111110010011110111101010010010";
        ram[48] = "0b00111101000001000101101010100011";
        ram[49] = "0b00111110010100011000101001000100";
        ram[50] = "0b10111101110100100000101011111010";
        ram[51] = "0b00111101111100001010000110111110";
        ram[52] = "0b10111100010111110011101010001110";
        ram[53] = "0b00111110011001011110101100110001";
        ram[54] = "0b00111100011110111010110111110110";
        ram[55] = "0b10111101110101101011000100011100";
        ram[56] = "0b00111110010001000011111000010000";
        ram[57] = "0b10111101100100100100101111110000";
        ram[58] = "0b10111110000001000111000100101110";
        ram[59] = "0b00111110001101100011011000101010";
        ram[60] = "0b10111101101111011000101000010001";
        ram[61] = "0b00111101110011010101111100010100";
        ram[62] = "0b10111100010000000010010110001010";
        ram[63] = "0b10111100001110010101101010010101";
        ram[64] = "0b10111100011100101101000011011000";
        ram[65] = "0b00111100111011001011101011011111";
        ram[66] = "0b10111100011100110110100110000100";
        ram[67] = "0b00111101010111100010110110011000";
        ram[68] = "0b10111101011011101000111101111010";
        ram[69] = "0b00111110001011001100001100011010";
        ram[70] = "0b00111110000001011110111001010111";
        ram[71] = "0b00111110001111011000011100101111";
        ram[72] = "0b10111110001101100000010101101000";
        ram[73] = "0b10111101011000001101000110110111";
        ram[74] = "0b10111101100110111011110000011110";
        ram[75] = "0b00111011001001101100001111111010";
        ram[76] = "0b10111110000111110110001110000000";
        ram[77] = "0b00111101001100110000010000111001";
        ram[78] = "0b10111101111010110101000100110111";
        ram[79] = "0b10111110000110111001001000111010";
        ram[80] = "0b10111101010010111101010101110001";
        ram[81] = "0b00111100110010001001000100110100";
        ram[82] = "0b10111101100110111001010000011101";
        ram[83] = "0b00111101011001111000101001101110";
        ram[84] = "0b00111011011001001011000101110000";
        ram[85] = "0b10111101100011010110100010111001";
        ram[86] = "0b10111110000001001000000011101001";
        ram[87] = "0b00111110000101110111110001000110";
        ram[88] = "0b10111100010100101001110000011010";
        ram[89] = "0b00111100001101010110110001011110";
        ram[90] = "0b00111101011001011000101000011000";
        ram[91] = "0b10111101101011011101010010011111";
        ram[92] = "0b10111110001110000000111001001001";
        ram[93] = "0b10111011100011101000111110010000";
        ram[94] = "0b10111101000011001010111001001001";
        ram[95] = "0b10111110000101010110010011111001";
        ram[96] = "0b00111101000100011101110001010001";
        ram[97] = "0b00111110000000010111010100001000";
        ram[98] = "0b00111110000100001111111100010001";
        ram[99] = "0b10111101010011100111010000011100";
        ram[100] = "0b00111100100011011011100011110000";
        ram[101] = "0b10111101010111011111101011011000";
        ram[102] = "0b10111101101011011100111011101000";
        ram[103] = "0b00111101101001101000101010101110";
        ram[104] = "0b10111110000101011110010100101010";
        ram[105] = "0b00111110010000110010111010111110";
        ram[106] = "0b10111110000101011110001011001110";
        ram[107] = "0b00111101000100101100100000111111";
        ram[108] = "0b00111101001011010101100001111000";
        ram[109] = "0b00111011100001110100110001111011";
        ram[110] = "0b10111110010000010111010100001000";
        ram[111] = "0b10111101100010101100011000000100";
        ram[112] = "0b00111101011010111111100111010100";
        ram[113] = "0b00111110000010000010110000101100";
        ram[114] = "0b10111110010000000010100000011100";
        ram[115] = "0b10111101011011111001100100010101";
        ram[116] = "0b10111011001011000101000000000000";
        ram[117] = "0b00111101101110111100101001111100";
        ram[118] = "0b00111101101100101110000100100110";
        ram[119] = "0b00111110000010100100001111111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_8) {
meminst = new inference_conv2d_f3_0_3_8_ram("inference_conv2d_f3_0_3_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_8() {
    delete meminst;
}


};//endmodule
#endif
