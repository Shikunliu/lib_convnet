// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_7_H__
#define __inference_conv2d_f3_1_3_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_7_ram) {
        ram[0] = "0b00111101011001010101101001000111";
        ram[1] = "0b00111101101010110011110011000101";
        ram[2] = "0b00111101011111111101110000001001";
        ram[3] = "0b10111101111011010111100000111110";
        ram[4] = "0b00111100101001011000000010001101";
        ram[5] = "0b00111101101100001000100000101000";
        ram[6] = "0b10111101101011000101101010110111";
        ram[7] = "0b00111101000011111010011111000011";
        ram[8] = "0b10111101100110001011011011001011";
        ram[9] = "0b00111100101100011011111011110101";
        ram[10] = "0b10111101011110010000101011111110";
        ram[11] = "0b00111100111111001101001010111001";
        ram[12] = "0b00111110000101101101100101111011";
        ram[13] = "0b00111101110011110101001100111111";
        ram[14] = "0b00111011000001010101100111000111";
        ram[15] = "0b10111100100011000110110010001010";
        ram[16] = "0b00111101100110011100011001100000";
        ram[17] = "0b10111110000001111110011000101110";
        ram[18] = "0b10111110000000011111000111010000";
        ram[19] = "0b10111110001011101010001001001101";
        ram[20] = "0b10111101101111011010100011001011";
        ram[21] = "0b00111101010001110011010110110100";
        ram[22] = "0b10111101010100101011110100111100";
        ram[23] = "0b10111101011110011001111011011000";
        ram[24] = "0b10111100100010100011100000110010";
        ram[25] = "0b00111101101011101000011100100100";
        ram[26] = "0b00111101000011100100000100100110";
        ram[27] = "0b00111101101111010111010000001100";
        ram[28] = "0b00111101100111111010010111111011";
        ram[29] = "0b00111101010011011111100000101011";
        ram[30] = "0b00111101000100111110100001100101";
        ram[31] = "0b00111101000110100111001111101010";
        ram[32] = "0b00111010111000000001110100001100";
        ram[33] = "0b00111101111101000000111001011010";
        ram[34] = "0b10111101010111110001111011111010";
        ram[35] = "0b10111101110010100100000001101110";
        ram[36] = "0b00111101010011010110101100001000";
        ram[37] = "0b00111100001111010011110101111000";
        ram[38] = "0b00111101110100010101100100111110";
        ram[39] = "0b10111101100001001110101000100010";
        ram[40] = "0b10111101101110110001010000110000";
        ram[41] = "0b10111101110011000000011000100110";
        ram[42] = "0b00111100101100011111000110110101";
        ram[43] = "0b10111101110011101101101110110110";
        ram[44] = "0b10111100011100000110111000100111";
        ram[45] = "0b00111101101111110110101001010001";
        ram[46] = "0b00111110000001011101100010010101";
        ram[47] = "0b10111101111100101001010011011101";
        ram[48] = "0b10111100001111111101011100011011";
        ram[49] = "0b10111100101110101100011110110010";
        ram[50] = "0b00111101110001101010100001011011";
        ram[51] = "0b10111101111011100110000100000111";
        ram[52] = "0b00111100100101110011111110000010";
        ram[53] = "0b00111100101100010000010100100110";
        ram[54] = "0b10111101000110001011011000001111";
        ram[55] = "0b10111011000011110111111110001111";
        ram[56] = "0b10111100111100011110011010010111";
        ram[57] = "0b10111101101011000000010010000110";
        ram[58] = "0b00111101001001000010001110010110";
        ram[59] = "0b00111101100001101111100101110110";
        ram[60] = "0b10111110001110000101111101001010";
        ram[61] = "0b10111101001110001010101001010001";
        ram[62] = "0b00111101011000111010100100011101";
        ram[63] = "0b10111101100110110110101011011010";
        ram[64] = "0b10111101101000000101010000100110";
        ram[65] = "0b10111101101001000101000111111100";
        ram[66] = "0b10111101101101000001010001100010";
        ram[67] = "0b10111101011110010101111111010011";
        ram[68] = "0b10111101111000110110111000101111";
        ram[69] = "0b00111101001111010111110000101101";
        ram[70] = "0b00111110000110001110010010111000";
        ram[71] = "0b00111101110111001010010010110001";
        ram[72] = "0b10111101110101100111101100011100";
        ram[73] = "0b10111101001101010111111010011101";
        ram[74] = "0b10111100001001110011101011010111";
        ram[75] = "0b10111101010010100001011001010100";
        ram[76] = "0b00111101100100100000110111101010";
        ram[77] = "0b00111011101111001010001001011101";
        ram[78] = "0b10111101001000110110001011110110";
        ram[79] = "0b00111100001010001101111100011100";
        ram[80] = "0b00111110001101101010110010101000";
        ram[81] = "0b10111101000111011110011101010111";
        ram[82] = "0b00111110000001000010010010100010";
        ram[83] = "0b10111110000011111110101111010001";
        ram[84] = "0b10111011011001010100010000010010";
        ram[85] = "0b10111101101011000010011100101101";
        ram[86] = "0b10111011110001010100110000100101";
        ram[87] = "0b00111101000101111010000000110000";
        ram[88] = "0b10111110000111111011000011010101";
        ram[89] = "0b00111101010001111110001100001000";
        ram[90] = "0b00111100010010011000011110011110";
        ram[91] = "0b10111101100111001001001001110010";
        ram[92] = "0b10111100101100101111000100100100";
        ram[93] = "0b00111101001000110000111010101000";
        ram[94] = "0b10111110001001101000101001010000";
        ram[95] = "0b10111011111010001011101111101100";
        ram[96] = "0b10111101101001101010000110110010";
        ram[97] = "0b00111101100101101011011100110001";
        ram[98] = "0b00111101110001111111100111111111";
        ram[99] = "0b10111101001000110011010101110100";
        ram[100] = "0b10111100001101111111010100111010";
        ram[101] = "0b00111110001011110010010011011001";
        ram[102] = "0b10111101000100100000101101100110";
        ram[103] = "0b10111101011100010001001000100110";
        ram[104] = "0b10111100101111001100001110100000";
        ram[105] = "0b00111110001011110011000001100010";
        ram[106] = "0b10111110000001100100100001000001";
        ram[107] = "0b10111101001000101101001101101010";
        ram[108] = "0b00111100110000101100011111111100";
        ram[109] = "0b00111110001001011101001101010110";
        ram[110] = "0b10111101100100110100000110011110";
        ram[111] = "0b00111110000000010010111011000111";
        ram[112] = "0b00111101100001101111001110100101";
        ram[113] = "0b00111101100101011111111100101011";
        ram[114] = "0b00111011100010101001100110001100";
        ram[115] = "0b00111101111000000110110100001101";
        ram[116] = "0b10111101011101100110011010001111";
        ram[117] = "0b10111110000101001011110111111101";
        ram[118] = "0b10111100100100011010011111111110";
        ram[119] = "0b00111100101110010011111101010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_7) {
meminst = new inference_conv2d_f3_1_3_7_ram("inference_conv2d_f3_1_3_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_7() {
    delete meminst;
}


};//endmodule
#endif
