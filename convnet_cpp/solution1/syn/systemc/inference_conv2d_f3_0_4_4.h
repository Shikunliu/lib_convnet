// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_4_H__
#define __inference_conv2d_f3_0_4_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_4_ram) {
        ram[0] = "0b10111110001011011111101100001101";
        ram[1] = "0b10111101010010000101110000001010";
        ram[2] = "0b00111110011001111011010111110010";
        ram[3] = "0b00111101001110100010000011011110";
        ram[4] = "0b00111100001001110010001101011010";
        ram[5] = "0b10111101100010011010110001011111";
        ram[6] = "0b00111101010000111001001111101110";
        ram[7] = "0b00111101100000100100111101011000";
        ram[8] = "0b00111110010010011101111011001110";
        ram[9] = "0b10111101010001111000101001010011";
        ram[10] = "0b10111101111010111011010011010101";
        ram[11] = "0b10111110100000110100110111110000";
        ram[12] = "0b00111101100110010000111001100111";
        ram[13] = "0b10111101101100010001110001111011";
        ram[14] = "0b00111011001111111110101010010001";
        ram[15] = "0b00111101100010001100101001011001";
        ram[16] = "0b00111100000000100111000001001000";
        ram[17] = "0b10111101101000110100000100011000";
        ram[18] = "0b00111110001111000101001110110001";
        ram[19] = "0b00111100010100101110010111101100";
        ram[20] = "0b10111101110111010101010111100111";
        ram[21] = "0b00111110000000111110010001101001";
        ram[22] = "0b00111101000110100010000001110010";
        ram[23] = "0b00111100101000100001011001110110";
        ram[24] = "0b00111100110100111100101111111010";
        ram[25] = "0b10111101111101000000100110100010";
        ram[26] = "0b00111101100000011110010011101010";
        ram[27] = "0b10111110000011011010110100110010";
        ram[28] = "0b10111110000100110011100010110100";
        ram[29] = "0b10111100010010111110110001101000";
        ram[30] = "0b10111011111011000101100010000011";
        ram[31] = "0b10111101100100000001110000011010";
        ram[32] = "0b00111100111110000110010110100010";
        ram[33] = "0b00111101100100100011111011101111";
        ram[34] = "0b10111101110011000010100010001010";
        ram[35] = "0b00111011000110010011000101101010";
        ram[36] = "0b00111101111100011011010001111000";
        ram[37] = "0b00111100010101000000011110111111";
        ram[38] = "0b10111101111110111001010110100011";
        ram[39] = "0b10111101001100111000111101011111";
        ram[40] = "0b00111100011111100001101100100011";
        ram[41] = "0b00111101111001111110001010000010";
        ram[42] = "0b10111101001100010100100110111010";
        ram[43] = "0b10111101101001000001110111011111";
        ram[44] = "0b10111101010000101010101111111100";
        ram[45] = "0b10111100101001111110011000101110";
        ram[46] = "0b00111100010001110111100011010000";
        ram[47] = "0b00111101010010010000111101110011";
        ram[48] = "0b00111101001011110001000100010101";
        ram[49] = "0b10111011111010010011001011011111";
        ram[50] = "0b00111110000111110111100110000101";
        ram[51] = "0b00111101100110000100001001100111";
        ram[52] = "0b10111100010001111011100111010011";
        ram[53] = "0b00111101110111001011010011110010";
        ram[54] = "0b10111011111010101101111001000101";
        ram[55] = "0b00111101001001011001100001011011";
        ram[56] = "0b00111011101101010110010011010001";
        ram[57] = "0b10111101101000101101100011010000";
        ram[58] = "0b10111101110011001111111010011011";
        ram[59] = "0b10111110000001011011110111010111";
        ram[60] = "0b00111110001011000000111111001011";
        ram[61] = "0b10111101100010101101111001110011";
        ram[62] = "0b00111100010110111110000110101000";
        ram[63] = "0b00111101100110101100110001000010";
        ram[64] = "0b10111110000101111110100000000100";
        ram[65] = "0b00111101110111010010000111111111";
        ram[66] = "0b00111101111000110100001010101011";
        ram[67] = "0b10111101100001011000100101110111";
        ram[68] = "0b00111100111101111110000010101100";
        ram[69] = "0b10111100010110001001010011101101";
        ram[70] = "0b00111101100010110000000010010100";
        ram[71] = "0b10111001001111000100110101011111";
        ram[72] = "0b00111100101111000001101111011010";
        ram[73] = "0b10111101100101001010011111010000";
        ram[74] = "0b00111101101001101100100001010110";
        ram[75] = "0b00111110010111010010001111010101";
        ram[76] = "0b00111101011000010011100100000000";
        ram[77] = "0b00111110000001111111011100111000";
        ram[78] = "0b10111101010010110111100011110101";
        ram[79] = "0b00111011100100001100101001101000";
        ram[80] = "0b10111101111101001010010011010011";
        ram[81] = "0b00111110000010010100100100011111";
        ram[82] = "0b10111101001101110011100011100111";
        ram[83] = "0b10111101110110101001100001100111";
        ram[84] = "0b00111110000001100001001110010000";
        ram[85] = "0b10111110000100001001010111110010";
        ram[86] = "0b10111100101101101010111001111101";
        ram[87] = "0b10111110001100011010000010001100";
        ram[88] = "0b10111110010010111000111001001100";
        ram[89] = "0b10111011111111000011000000010010";
        ram[90] = "0b00111101100000101000110001000100";
        ram[91] = "0b00111100100011101101110001110010";
        ram[92] = "0b10111101110110000010000000011101";
        ram[93] = "0b00111101100101110001101100101101";
        ram[94] = "0b00111101001010100101110111110010";
        ram[95] = "0b00111110000100111011110100010110";
        ram[96] = "0b00111101001000111101000011110101";
        ram[97] = "0b00111110000100011101001000011000";
        ram[98] = "0b00111101100110111000010100000100";
        ram[99] = "0b00111110001111110110100101000100";
        ram[100] = "0b00111100110000001100100000010001";
        ram[101] = "0b00111100111010111110000100101111";
        ram[102] = "0b10111101100011100010111111001100";
        ram[103] = "0b00111101100011110100011110011100";
        ram[104] = "0b10111011101001010011001001010100";
        ram[105] = "0b10111100000001111110111101011000";
        ram[106] = "0b00111101110000111111110111010110";
        ram[107] = "0b10111110010000110101000010001111";
        ram[108] = "0b00111110001001100011011001101101";
        ram[109] = "0b10111110000100001001111000010011";
        ram[110] = "0b00111001010010011111000101110011";
        ram[111] = "0b10111110010000000000001110101100";
        ram[112] = "0b00111110000011000000010111010101";
        ram[113] = "0b00111101100111110111111101111111";
        ram[114] = "0b10111101001111101000010111000111";
        ram[115] = "0b00111101100111011000000110000110";
        ram[116] = "0b10111100010000110010000110111110";
        ram[117] = "0b00111110000110110110111000001101";
        ram[118] = "0b00111101010111100001011011010111";
        ram[119] = "0b00111110001010110001011111001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_4) {
meminst = new inference_conv2d_f3_0_4_4_ram("inference_conv2d_f3_0_4_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_4() {
    delete meminst;
}


};//endmodule
#endif
