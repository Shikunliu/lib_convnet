// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_74_H__
#define __inference_mult_1_120_120_84_s_W4_74_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_74_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_74_ram) {
        ram[0] = "0b00111101111100110011010101001100";
        ram[1] = "0b10111101011011110001100010000111";
        ram[2] = "0b10111101101110010010100000100101";
        ram[3] = "0b00111101101010111110010110111111";
        ram[4] = "0b00111101111010101001010110000101";
        ram[5] = "0b10111010100101111110011110010011";
        ram[6] = "0b00111110010000010001110010110000";
        ram[7] = "0b10111110000111000000010010000110";
        ram[8] = "0b00111101110010001001000010100000";
        ram[9] = "0b10111110000100000000000111010110";
        ram[10] = "0b00111100101001010000101110111110";
        ram[11] = "0b10111101011110111011000100000001";
        ram[12] = "0b10111101111101011101000111000100";
        ram[13] = "0b10111100111001011111100111111010";
        ram[14] = "0b00111100100010101010000000000010";
        ram[15] = "0b10111101111100110011100011111000";
        ram[16] = "0b00111101100000011110001100111100";
        ram[17] = "0b00111101110110111011000101101100";
        ram[18] = "0b00111101111010110011000111000010";
        ram[19] = "0b10111100001100111100010001010011";
        ram[20] = "0b00111110000101001101011011100100";
        ram[21] = "0b10111100110101010100001100101000";
        ram[22] = "0b10111101100111101011001001011000";
        ram[23] = "0b00111101010110001111001111101101";
        ram[24] = "0b00111110000110001001010000111110";
        ram[25] = "0b00111101111001101000010101010101";
        ram[26] = "0b10111101101001001000001010010110";
        ram[27] = "0b10111101100001010000100110110010";
        ram[28] = "0b10111101011101110111001000100111";
        ram[29] = "0b10111101010011000100101000001011";
        ram[30] = "0b10111101100010000001100011000110";
        ram[31] = "0b10111001100000110001101001011010";
        ram[32] = "0b10111110001011100011011111011111";
        ram[33] = "0b10111101010100101010101010010010";
        ram[34] = "0b00111101000101111111001100000110";
        ram[35] = "0b00111101011011000111011010110110";
        ram[36] = "0b00111100111101000111101001011011";
        ram[37] = "0b10111101110001001110101110011010";
        ram[38] = "0b10111101011011010110110110100111";
        ram[39] = "0b00111110001000011110011011001101";
        ram[40] = "0b10111100101100101101110100110111";
        ram[41] = "0b00111110000111100101000100001001";
        ram[42] = "0b00111101011001001010110000011100";
        ram[43] = "0b00111101000100000111011100101100";
        ram[44] = "0b00111110001000000010110101011010";
        ram[45] = "0b10111101001111111001010000011010";
        ram[46] = "0b10111101011011110001110110101010";
        ram[47] = "0b00111101110100000101001000001101";
        ram[48] = "0b00111100110100010111111010101110";
        ram[49] = "0b00111101101011001000011000000101";
        ram[50] = "0b00111101100001100011101001001111";
        ram[51] = "0b00111101100100100001010110111010";
        ram[52] = "0b00111100111111001011110100100000";
        ram[53] = "0b00111101100001100100000111011011";
        ram[54] = "0b00111110001011110111000111101011";
        ram[55] = "0b00111101010111010010110101101101";
        ram[56] = "0b10111101110000000100000100011110";
        ram[57] = "0b10111110001101011010001111100100";
        ram[58] = "0b10111100110101010100111001111100";
        ram[59] = "0b00111101110000010000101101010110";
        ram[60] = "0b00111101000110011001001101001111";
        ram[61] = "0b00111100101010100110000101101000";
        ram[62] = "0b00111110001110000111011101101000";
        ram[63] = "0b10111101010100110111111110001001";
        ram[64] = "0b00111101000100000001001100100011";
        ram[65] = "0b10111100101101100000000100001110";
        ram[66] = "0b10111101111100111100011100001101";
        ram[67] = "0b10111101110001011000010110100011";
        ram[68] = "0b00111110000010101100010111000001";
        ram[69] = "0b00111101011001100101111011011010";
        ram[70] = "0b00111101110100101001011001110000";
        ram[71] = "0b00111110000011110111100001111001";
        ram[72] = "0b00111110000010001011001010100111";
        ram[73] = "0b00111100001011110101010101011000";
        ram[74] = "0b10111110011010000011101001010100";
        ram[75] = "0b10111101101101000000010101010110";
        ram[76] = "0b10111100101101100100100011000111";
        ram[77] = "0b00111101001010110010101000011011";
        ram[78] = "0b10111101010110001100111101010100";
        ram[79] = "0b00111101000111101111011000110000";
        ram[80] = "0b00111101010101000100000100110101";
        ram[81] = "0b00111101001111011101001011100100";
        ram[82] = "0b10111101000100110101010011110111";
        ram[83] = "0b00111101110100001000001001001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_74) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_74_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_74) {
meminst = new inference_mult_1_120_120_84_s_W4_74_ram("inference_mult_1_120_120_84_s_W4_74_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_74() {
    delete meminst;
}


};//endmodule
#endif
