// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_5_H__
#define __inference_conv2d_f3_3_2_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_5_ram) {
        ram[0] = "0b10111110000110110001110100001101";
        ram[1] = "0b00111101110100101100111100010000";
        ram[2] = "0b00111101101100011010010111011000";
        ram[3] = "0b00111110000000001111000111110101";
        ram[4] = "0b10111100111000010100000110011001";
        ram[5] = "0b10111101001011000000100111011111";
        ram[6] = "0b00111101100011011001110011110001";
        ram[7] = "0b00111101100011000111011110110101";
        ram[8] = "0b00111101010101010010100110101101";
        ram[9] = "0b00111100001001000111011011011000";
        ram[10] = "0b10111100000110001000001110111010";
        ram[11] = "0b00111100010110101011001100111111";
        ram[12] = "0b10111110000011000101000011001110";
        ram[13] = "0b10111101011000001110100101101010";
        ram[14] = "0b00111100111011010011001110101010";
        ram[15] = "0b00111100110101100100110110110101";
        ram[16] = "0b00111101001010111000111010101001";
        ram[17] = "0b00111100101101000111010001000110";
        ram[18] = "0b10111110000110111000000100110000";
        ram[19] = "0b00111101110111100101000010000011";
        ram[20] = "0b00111101001011010110001111100110";
        ram[21] = "0b10111100111001100010111101110100";
        ram[22] = "0b00111101101111011101011110001111";
        ram[23] = "0b10111101110000100101100101011100";
        ram[24] = "0b10111100100110100000101011011001";
        ram[25] = "0b00111100111000011111011011001011";
        ram[26] = "0b00111101001011000001101000011111";
        ram[27] = "0b10111100101111000100101010011111";
        ram[28] = "0b00111101011011101001101100111001";
        ram[29] = "0b00111101101110110011000111011101";
        ram[30] = "0b00111100111110000001111101100001";
        ram[31] = "0b10111101011001000011010010101110";
        ram[32] = "0b10111101001101010110101101101100";
        ram[33] = "0b00111101001100010000011001001101";
        ram[34] = "0b00111101101110111110101010011111";
        ram[35] = "0b10111101101101000111111100000110";
        ram[36] = "0b00111101110100010011100010111101";
        ram[37] = "0b10111100101101000010011001111000";
        ram[38] = "0b10111101100100100101101001000000";
        ram[39] = "0b00111100110000100000011100001100";
        ram[40] = "0b00111110010000111001000101001111";
        ram[41] = "0b00111101100100011111001111011011";
        ram[42] = "0b00111101001100110000110010111000";
        ram[43] = "0b10111101011000001111111000101101";
        ram[44] = "0b10111101111100000100001101011111";
        ram[45] = "0b10111100110010111001001011011011";
        ram[46] = "0b10111110000000111111001111100000";
        ram[47] = "0b00111110000101111110101000011100";
        ram[48] = "0b10111101001001010000110011100101";
        ram[49] = "0b10111101010111000110100010000001";
        ram[50] = "0b10111110000111101011011110001001";
        ram[51] = "0b00111011110000010011111101111011";
        ram[52] = "0b10111001010001101011010011001010";
        ram[53] = "0b10111101101001100011000111000011";
        ram[54] = "0b00111100101110110011111001100101";
        ram[55] = "0b00111101100011100001110000001000";
        ram[56] = "0b00111110001101000100010010011110";
        ram[57] = "0b10111101100001110100101101101001";
        ram[58] = "0b00111101111100111001000010000110";
        ram[59] = "0b00111101111011000110110001010101";
        ram[60] = "0b00111011111111101001110000111101";
        ram[61] = "0b00111010110011101001000101110011";
        ram[62] = "0b00111101100001000110101100011001";
        ram[63] = "0b00111101100111111110010001010001";
        ram[64] = "0b00111101110100001011101001100010";
        ram[65] = "0b00111101100001110100110110001111";
        ram[66] = "0b00111101111101001101101001001101";
        ram[67] = "0b10111100110011001110010101010110";
        ram[68] = "0b00111101011110100101011101100100";
        ram[69] = "0b10111101111001000011111011011001";
        ram[70] = "0b10111100100101111111010000010011";
        ram[71] = "0b10111110000011100101010000101110";
        ram[72] = "0b00111101101000101110000101001110";
        ram[73] = "0b00111110001101001001111010001000";
        ram[74] = "0b00111101110101011101101100110100";
        ram[75] = "0b10111110001100110111111100111001";
        ram[76] = "0b10111101100101010100011010111001";
        ram[77] = "0b10111100100101001101000110110100";
        ram[78] = "0b00111110001000110100000010010010";
        ram[79] = "0b00111101000010110101000111110011";
        ram[80] = "0b00111110000000010110000101011111";
        ram[81] = "0b00111110001110101110111010100110";
        ram[82] = "0b00111101101001001001011011100001";
        ram[83] = "0b00111110000101110111111000011100";
        ram[84] = "0b00111100011100011001001000010100";
        ram[85] = "0b10111100101101010101111010000111";
        ram[86] = "0b00111101101111000110111001010011";
        ram[87] = "0b10111101011000011110000110110111";
        ram[88] = "0b00111101110011001100101000111011";
        ram[89] = "0b10111101100001111100111110010101";
        ram[90] = "0b10111101011110101100001110011011";
        ram[91] = "0b10111101010110110001110110010011";
        ram[92] = "0b00111110000101111010001001001001";
        ram[93] = "0b10111101101110010011110111100111";
        ram[94] = "0b10111110001111110001001110001100";
        ram[95] = "0b00111100111101001111011100100011";
        ram[96] = "0b10111101001110110000011110101000";
        ram[97] = "0b10111101011101001001000001111011";
        ram[98] = "0b10111110001011010011110101000011";
        ram[99] = "0b10111110000110000111100100111110";
        ram[100] = "0b00111110000001000000001100010101";
        ram[101] = "0b10111100110001111101011011111001";
        ram[102] = "0b10111101000110100000001001011010";
        ram[103] = "0b10111110001110000010011101110100";
        ram[104] = "0b00111101110101000000111001011010";
        ram[105] = "0b10111101111010110101110000111010";
        ram[106] = "0b00111101100100101001111100111111";
        ram[107] = "0b10111101001000111100101101100111";
        ram[108] = "0b10111100100001000000110101000000";
        ram[109] = "0b00111101101111111100010010001100";
        ram[110] = "0b00111101011011110101110111110001";
        ram[111] = "0b10111101101010101100011001000111";
        ram[112] = "0b00111101001100011001100001111001";
        ram[113] = "0b00111100100011101010111111000110";
        ram[114] = "0b10111100101110111110110111101101";
        ram[115] = "0b10111101100010111000111000010110";
        ram[116] = "0b00111101011010001111111011111101";
        ram[117] = "0b10111101111000100101111110100110";
        ram[118] = "0b10111101101110110001101100000001";
        ram[119] = "0b10111100001000100110111111001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_5) {
meminst = new inference_conv2d_f3_3_2_5_ram("inference_conv2d_f3_3_2_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_5() {
    delete meminst;
}


};//endmodule
#endif
