// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_11_H__
#define __inference_conv2d_f3_1_2_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_11_ram) {
        ram[0] = "0b10111101110001011010001010111100";
        ram[1] = "0b10111101100000010011111101110011";
        ram[2] = "0b00111101011111010100101100110101";
        ram[3] = "0b10111101100011101011100101010001";
        ram[4] = "0b10111110010001110111000111001001";
        ram[5] = "0b10111110010000011010110101100100";
        ram[6] = "0b00111101000000000111101111010110";
        ram[7] = "0b10111100001000100100101001001101";
        ram[8] = "0b10111100000101100010101101110000";
        ram[9] = "0b10111101011010001101100000010110";
        ram[10] = "0b00111101101000101001001101001011";
        ram[11] = "0b00111110001011100000101011001000";
        ram[12] = "0b10111101000111001001110110101011";
        ram[13] = "0b00111101001010011000111100101011";
        ram[14] = "0b00111100100110001100110111110111";
        ram[15] = "0b00111101100110010111110100010100";
        ram[16] = "0b00111101010001011111010110010011";
        ram[17] = "0b00111100101001000110001111000010";
        ram[18] = "0b10111101110011100011110101100000";
        ram[19] = "0b00111101010001000010000100010010";
        ram[20] = "0b10111101110001100111000111010100";
        ram[21] = "0b00111100000001010011000101100010";
        ram[22] = "0b00111011101000001010010100111100";
        ram[23] = "0b00111100101011011001000000100110";
        ram[24] = "0b00111110001100010110000101011111";
        ram[25] = "0b10111101101000011100000111001001";
        ram[26] = "0b00111101001100110110010001000110";
        ram[27] = "0b10111101101011111110111001100010";
        ram[28] = "0b10111101100010011101011111110000";
        ram[29] = "0b00111101001110100111100111001001";
        ram[30] = "0b10111101001011011001101101111001";
        ram[31] = "0b00111101000001100000000000001111";
        ram[32] = "0b00111101101010000101000001100110";
        ram[33] = "0b10111101000111101111101000101100";
        ram[34] = "0b00111101010010001010010000101110";
        ram[35] = "0b00111110001111011011110001100110";
        ram[36] = "0b10111100100011001001010011001110";
        ram[37] = "0b00111101000100010000001101011110";
        ram[38] = "0b00111110001001101101001001100111";
        ram[39] = "0b10111110000001111011010101101100";
        ram[40] = "0b00111011010001111000100100010110";
        ram[41] = "0b00111110010001000011110111001101";
        ram[42] = "0b10111110001101000010111001010101";
        ram[43] = "0b10111101110000001010010110101101";
        ram[44] = "0b00111101010001110001111111111111";
        ram[45] = "0b10111101111011100011111011110011";
        ram[46] = "0b10111101010010001011110100001000";
        ram[47] = "0b10111101010011011010101011111110";
        ram[48] = "0b00111100111010100100011100110001";
        ram[49] = "0b10111100100111110110010111000001";
        ram[50] = "0b10111100111101100110001101101001";
        ram[51] = "0b00111010001001111011101000100001";
        ram[52] = "0b00111101001001100000111111001010";
        ram[53] = "0b10111101100110100111100010101111";
        ram[54] = "0b00111100010000000011111010110100";
        ram[55] = "0b10111101110010110010011100011101";
        ram[56] = "0b10111100010011011110111010100000";
        ram[57] = "0b10111101110111111000011011100100";
        ram[58] = "0b00111110000000010011011111110100";
        ram[59] = "0b00111011100011111001011001001011";
        ram[60] = "0b00111101001110101010110010111111";
        ram[61] = "0b00111101100010000100000001001110";
        ram[62] = "0b00111110001101100101010101011100";
        ram[63] = "0b10111110000010101111001001010010";
        ram[64] = "0b00111101011010011111110111100101";
        ram[65] = "0b10111101011111001111100100110101";
        ram[66] = "0b10111101111101100010101101101011";
        ram[67] = "0b00111101001000111000011010111000";
        ram[68] = "0b10111101110011001100101100010010";
        ram[69] = "0b10111100111100011010001001101111";
        ram[70] = "0b10111101000100111010001110110110";
        ram[71] = "0b00111101100001010000110000001110";
        ram[72] = "0b10111101111011100010001110101111";
        ram[73] = "0b10111110000101001101011010100001";
        ram[74] = "0b00111101001110111110001100111011";
        ram[75] = "0b10111110000101110111111110101110";
        ram[76] = "0b10111101001100101111100000101010";
        ram[77] = "0b10111110001011101001110100001111";
        ram[78] = "0b10111101100100111111110111001001";
        ram[79] = "0b10111110010100100110001101010010";
        ram[80] = "0b00111101110000111100110111000011";
        ram[81] = "0b10111100001011100100100110111111";
        ram[82] = "0b10111100111001110111000101011110";
        ram[83] = "0b00111101101100010100011100101000";
        ram[84] = "0b00111101001000100010000010100001";
        ram[85] = "0b00111100010111100110011010111110";
        ram[86] = "0b00111101001011111110011000001100";
        ram[87] = "0b00111110001001001110101011010001";
        ram[88] = "0b00111100110010011101010110100010";
        ram[89] = "0b00111100101111100110010110010110";
        ram[90] = "0b10111101010011010101001100011111";
        ram[91] = "0b10111100001000101000000101110101";
        ram[92] = "0b00111110001111001100010010101100";
        ram[93] = "0b00111101010000111011001111101010";
        ram[94] = "0b00111101110010110110011110101000";
        ram[95] = "0b10111101001001100100101001001100";
        ram[96] = "0b10111110000001110100000000111110";
        ram[97] = "0b00111110000111101001000010111100";
        ram[98] = "0b10111101001100011011010101101010";
        ram[99] = "0b10111101010101111111000011101101";
        ram[100] = "0b00111101101111110101010100100010";
        ram[101] = "0b10111100111011000111110110100010";
        ram[102] = "0b10111101010000111100010101010010";
        ram[103] = "0b00111101011101010001010100111011";
        ram[104] = "0b00111100011000101010111110001101";
        ram[105] = "0b00111100000000010111101000010011";
        ram[106] = "0b00111101100001100010011111011010";
        ram[107] = "0b10111101010100110111011111100010";
        ram[108] = "0b00111101110100011110011001000111";
        ram[109] = "0b00111011110001011100100000001011";
        ram[110] = "0b10111101101111110011001100011100";
        ram[111] = "0b10111101001011001100101011101010";
        ram[112] = "0b00111101000101010111100111001010";
        ram[113] = "0b10111110001000111101000000111001";
        ram[114] = "0b10111101011100110011001110011111";
        ram[115] = "0b10111010011010011000101001111011";
        ram[116] = "0b00111100111100000000100000000110";
        ram[117] = "0b00111101100010110011101010010001";
        ram[118] = "0b00111101100011101101100010101011";
        ram[119] = "0b00110101011011100100110100101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_11) {
meminst = new inference_conv2d_f3_1_2_11_ram("inference_conv2d_f3_1_2_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_11() {
    delete meminst;
}


};//endmodule
#endif
