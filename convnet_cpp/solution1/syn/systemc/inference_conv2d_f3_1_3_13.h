// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_13_H__
#define __inference_conv2d_f3_1_3_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_13_ram) {
        ram[0] = "0b00111101101011100100010101011000";
        ram[1] = "0b00111101101010101001101010101001";
        ram[2] = "0b10111101110101000010101110110110";
        ram[3] = "0b10111101011100101001011101100010";
        ram[4] = "0b10111110000001000110000110110111";
        ram[5] = "0b10111101111001101100101100010000";
        ram[6] = "0b10111101101001001110100111111010";
        ram[7] = "0b00111101000010110001010001100110";
        ram[8] = "0b00111101010010111001011010111100";
        ram[9] = "0b00111101101101001111011101110011";
        ram[10] = "0b10111101100001001111100111000010";
        ram[11] = "0b10111100101000100111111001000101";
        ram[12] = "0b00111110000100001100111001001111";
        ram[13] = "0b10111110000011111001110110110010";
        ram[14] = "0b10111101000001100110100011010000";
        ram[15] = "0b00111101100110110010010101001000";
        ram[16] = "0b00111101100101110100011000101011";
        ram[17] = "0b00111110000000100111000000101010";
        ram[18] = "0b10111100110101010110100001000111";
        ram[19] = "0b10111101110101010101001101101001";
        ram[20] = "0b10111110001101100110110011110100";
        ram[21] = "0b10111010111110101011101010011100";
        ram[22] = "0b00111101101011000011100010100011";
        ram[23] = "0b00111101101000100100000001100111";
        ram[24] = "0b00111101110011100011111101111001";
        ram[25] = "0b10111100101000010110111110000111";
        ram[26] = "0b10111101111101011101111001011001";
        ram[27] = "0b00111010101010100110011001110000";
        ram[28] = "0b10111101110111001100110110010110";
        ram[29] = "0b00111101111101101011111101000100";
        ram[30] = "0b10111101100110011000101000010101";
        ram[31] = "0b10111110000011100100111001101010";
        ram[32] = "0b10111110000001101001100101000010";
        ram[33] = "0b00111101101001111000101011110100";
        ram[34] = "0b00111101000111000011000001101000";
        ram[35] = "0b10111101000101001011110011010110";
        ram[36] = "0b00111101011101000011010001101010";
        ram[37] = "0b00111101000101111100000101010010";
        ram[38] = "0b00111110001001001100011111110011";
        ram[39] = "0b10111101100000010100111001111111";
        ram[40] = "0b00111101100100010100001101101111";
        ram[41] = "0b00111101111010101011001011100001";
        ram[42] = "0b10111101000100111110111101010001";
        ram[43] = "0b00111110001111011011001010110011";
        ram[44] = "0b00111101100011100111011110010010";
        ram[45] = "0b10111101111001100010100110010101";
        ram[46] = "0b00111101110110010001101111000101";
        ram[47] = "0b10111110000010111000011000101011";
        ram[48] = "0b00111100101001101101111011000111";
        ram[49] = "0b10111011011001110101100101101011";
        ram[50] = "0b00111101010100011000100000000011";
        ram[51] = "0b00111101101001010011001000011110";
        ram[52] = "0b00111110001111011010110101110101";
        ram[53] = "0b10111101001001001011011001100011";
        ram[54] = "0b10111101010010001001110100001101";
        ram[55] = "0b00111100111111010100000000110010";
        ram[56] = "0b00111101100110001110100011001111";
        ram[57] = "0b10111101110110010101100110100011";
        ram[58] = "0b10111010110001101010001001100110";
        ram[59] = "0b00111101110010101111101000100010";
        ram[60] = "0b10111100010010010001100000001100";
        ram[61] = "0b10111101110000111101000111110100";
        ram[62] = "0b00111101111000111001001001011100";
        ram[63] = "0b10111101001011100101111010011101";
        ram[64] = "0b00111110000001100100000011101010";
        ram[65] = "0b00111101010110101001111100111000";
        ram[66] = "0b10111100101101110111011011111010";
        ram[67] = "0b00111100100001000101011000000110";
        ram[68] = "0b10111101110110000110010011001011";
        ram[69] = "0b10111101100111011100100001110101";
        ram[70] = "0b00111101110110101100001111101011";
        ram[71] = "0b10111101101001010101001111010101";
        ram[72] = "0b00111101010111101011111010011101";
        ram[73] = "0b10111011111111110111101000001001";
        ram[74] = "0b10111101101100110000000110011010";
        ram[75] = "0b00111110001100010001001110000011";
        ram[76] = "0b00111101101111101110100111010000";
        ram[77] = "0b10111101100010010001100011111110";
        ram[78] = "0b10111101101100011001000110011011";
        ram[79] = "0b10111100110101001101101101011001";
        ram[80] = "0b10111101010111111001000100101010";
        ram[81] = "0b10111110001111111100111000110001";
        ram[82] = "0b00111101101100101001010100111011";
        ram[83] = "0b10111101100000110110000111001111";
        ram[84] = "0b00111110000110110010010000100000";
        ram[85] = "0b10111101100100000101001101101010";
        ram[86] = "0b00111110010100000011100110101100";
        ram[87] = "0b10111100010011100101111000110010";
        ram[88] = "0b10111101100100000000110110101111";
        ram[89] = "0b10111110000101010010010011000000";
        ram[90] = "0b00111101010111001001110101110101";
        ram[91] = "0b10111100110011001000100111100111";
        ram[92] = "0b10111100101100011101011011011101";
        ram[93] = "0b10111101100011010110000001110001";
        ram[94] = "0b00111110001010001101011000001010";
        ram[95] = "0b10111101100101001101010000010000";
        ram[96] = "0b00111010111011110110101111011110";
        ram[97] = "0b10111101001001000101010101100101";
        ram[98] = "0b10111110000100110001011001011101";
        ram[99] = "0b10111100001111101010000001001111";
        ram[100] = "0b00111101101000001001001110010110";
        ram[101] = "0b00111101111001010000110101101011";
        ram[102] = "0b00111100100110011110110001110000";
        ram[103] = "0b10111110001011110010011000101001";
        ram[104] = "0b10111101101100110111101100111101";
        ram[105] = "0b10111101101100111101110001111110";
        ram[106] = "0b00111100100010011010011110110100";
        ram[107] = "0b00111110010000000000111000101000";
        ram[108] = "0b00111101110101111111110110000010";
        ram[109] = "0b10111101101111101101101010001110";
        ram[110] = "0b00111101001001111000111000011001";
        ram[111] = "0b00111101101011001111110101001100";
        ram[112] = "0b00111110001010101010000100001110";
        ram[113] = "0b00111101111010001110100100101101";
        ram[114] = "0b10111101100100100011100011110101";
        ram[115] = "0b10111101001010010011011110110111";
        ram[116] = "0b10111110001001010001000011010100";
        ram[117] = "0b10111110000101011011101110111111";
        ram[118] = "0b00111100000101110000010101010101";
        ram[119] = "0b10111101001000000110011011111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_13) {
meminst = new inference_conv2d_f3_1_3_13_ram("inference_conv2d_f3_1_3_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_13() {
    delete meminst;
}


};//endmodule
#endif
