// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_14_H__
#define __inference_conv2d_f3_2_1_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_14_ram) {
        ram[0] = "0b00111101010111000101001110100011";
        ram[1] = "0b00111101011010000010110111001100";
        ram[2] = "0b10111011001101101000101001101011";
        ram[3] = "0b10111101001001010001001001110100";
        ram[4] = "0b00111110010010000000010000010000";
        ram[5] = "0b10111011110110101010101000000101";
        ram[6] = "0b00111100100100010000111001111011";
        ram[7] = "0b10111101101011010110001101010011";
        ram[8] = "0b10111101001101011111001100000001";
        ram[9] = "0b00111100001101010101111101011101";
        ram[10] = "0b00111101101011100001010100001111";
        ram[11] = "0b10111101000010100111110010010000";
        ram[12] = "0b00111101010101011100000011111101";
        ram[13] = "0b00111101001001111001111111010010";
        ram[14] = "0b10111011110000110000110011000101";
        ram[15] = "0b00111101111000010001110010110000";
        ram[16] = "0b00111110001100100110111011011011";
        ram[17] = "0b10111110000111001000111110111000";
        ram[18] = "0b10111101111101001010010011010011";
        ram[19] = "0b10111110000111101000100010011100";
        ram[20] = "0b10111101100001000111110001011001";
        ram[21] = "0b10111100000011101100000100000011";
        ram[22] = "0b00111101001110011000101001001010";
        ram[23] = "0b10111100001011101000011111010011";
        ram[24] = "0b00111100111101100111000101000001";
        ram[25] = "0b00111100011010101011000110111010";
        ram[26] = "0b00111100101011101110000110010101";
        ram[27] = "0b00111011111111001001101010011011";
        ram[28] = "0b10111100001110000001101010001110";
        ram[29] = "0b10111101111110101111101101111111";
        ram[30] = "0b00111101111011010011100111011010";
        ram[31] = "0b10111101101001100110000011100101";
        ram[32] = "0b10111101011100010000100101110010";
        ram[33] = "0b10111101101010101000100011111101";
        ram[34] = "0b10111110000011101011110100001010";
        ram[35] = "0b00111101101001011001011001111000";
        ram[36] = "0b10111101010111111110110000101111";
        ram[37] = "0b10111100011010100111111111010001";
        ram[38] = "0b00111100101101010011010000101010";
        ram[39] = "0b10111101100001001101100010111010";
        ram[40] = "0b10111101110010000111000110111111";
        ram[41] = "0b00111101100111000011010001111111";
        ram[42] = "0b10111110000100111011000010000001";
        ram[43] = "0b10111110000010000000010000010000";
        ram[44] = "0b00111101101001100010101110000110";
        ram[45] = "0b10111001101111011101101011001010";
        ram[46] = "0b10111101110100111101110110011000";
        ram[47] = "0b10111101100111011110100101110000";
        ram[48] = "0b10111100000110100001010011001001";
        ram[49] = "0b00111100100100010110000111110010";
        ram[50] = "0b00111100010001011010110100011110";
        ram[51] = "0b00111100011010100011101111011110";
        ram[52] = "0b00111101010110111001010001111011";
        ram[53] = "0b00111100111010000111110011000001";
        ram[54] = "0b10111011000101011001100100000100";
        ram[55] = "0b10111110000000011110001111101011";
        ram[56] = "0b10111101001011010110101100111101";
        ram[57] = "0b10111101111111110011100111010010";
        ram[58] = "0b10111101001100101001010100101110";
        ram[59] = "0b00111100010001001111001110111010";
        ram[60] = "0b00111101101011111100101111100011";
        ram[61] = "0b00111100101000110100100100010000";
        ram[62] = "0b10111110011000111100001100011110";
        ram[63] = "0b00111101100010011110101001001010";
        ram[64] = "0b10111101111110111010101100100010";
        ram[65] = "0b00111101111101111010011001111010";
        ram[66] = "0b00111101000001101111010010010110";
        ram[67] = "0b00111101100100101100000111110100";
        ram[68] = "0b10111101110110010111001011001101";
        ram[69] = "0b00111101011011010010101000111010";
        ram[70] = "0b10111101001101110100101100100110";
        ram[71] = "0b00111101110110111100001101000000";
        ram[72] = "0b10111110000100110001000010011001";
        ram[73] = "0b00111101011010100001110111111100";
        ram[74] = "0b10111101101110011111101001110000";
        ram[75] = "0b00111100111001100001111110000100";
        ram[76] = "0b10111011101010001011000111100101";
        ram[77] = "0b10111101101101110011010001100101";
        ram[78] = "0b00111100110101000111101000001011";
        ram[79] = "0b10111110010001011100010111111000";
        ram[80] = "0b00111110010010001011110101100110";
        ram[81] = "0b10111101011011111011101111001010";
        ram[82] = "0b10111100011110100101111000000000";
        ram[83] = "0b10111100001110000110110100101111";
        ram[84] = "0b10111101110101110011010000101111";
        ram[85] = "0b10111101100100110110000011010000";
        ram[86] = "0b00111101011100110010110101010100";
        ram[87] = "0b00111101100011100110100101111000";
        ram[88] = "0b00111110001011101100011010111101";
        ram[89] = "0b10111110000100111011111011101100";
        ram[90] = "0b10111101101100101011000010110100";
        ram[91] = "0b00111011101101100101000101110110";
        ram[92] = "0b00111101111001110101100110101011";
        ram[93] = "0b00111100011100110001010100110110";
        ram[94] = "0b10111110001111100011111011110011";
        ram[95] = "0b10111100000110111001011111100001";
        ram[96] = "0b10111101100000111100101101001100";
        ram[97] = "0b00111101101011000100011000011100";
        ram[98] = "0b00111101010000100011110010100001";
        ram[99] = "0b00111101101001111011000110011000";
        ram[100] = "0b00111100111110101111011100010111";
        ram[101] = "0b00111100111101110010101110110001";
        ram[102] = "0b00111011100101101111011101010011";
        ram[103] = "0b00111110001101010101100101110001";
        ram[104] = "0b10111101100011100001100010101101";
        ram[105] = "0b00111100111110110011100111001000";
        ram[106] = "0b00111100111101001100111101001010";
        ram[107] = "0b10111101110010101011110010010100";
        ram[108] = "0b00111110001111111101111001110010";
        ram[109] = "0b10111101001101110111000101101011";
        ram[110] = "0b10111011100110000010111011001011";
        ram[111] = "0b10111101011111100100110011010111";
        ram[112] = "0b10111100001011111101010110110001";
        ram[113] = "0b10111101010001000111011011110011";
        ram[114] = "0b10111110001101010100001001011111";
        ram[115] = "0b00111110000000010011000001011001";
        ram[116] = "0b10111101011111100101001010011100";
        ram[117] = "0b10111101101000010110010110111001";
        ram[118] = "0b10111110000101010110011100010010";
        ram[119] = "0b00111110001110111110010100010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_14) {
meminst = new inference_conv2d_f3_2_1_14_ram("inference_conv2d_f3_2_1_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_14() {
    delete meminst;
}


};//endmodule
#endif
