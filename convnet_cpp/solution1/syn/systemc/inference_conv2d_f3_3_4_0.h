// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_0_H__
#define __inference_conv2d_f3_3_4_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_0_ram) {
        ram[0] = "0b00111101110101110100101111000111";
        ram[1] = "0b10111100111010001100001101101110";
        ram[2] = "0b00111101100000000110011101001001";
        ram[3] = "0b00111101011110010111001011001101";
        ram[4] = "0b10111101101011111011000110101100";
        ram[5] = "0b10111101101000100010100111001110";
        ram[6] = "0b00111110001001101011101101010110";
        ram[7] = "0b10111101011111010011100101100001";
        ram[8] = "0b10111101010100010101111111011010";
        ram[9] = "0b00111101110101011001100010011110";
        ram[10] = "0b10111101101100001110100100001100";
        ram[11] = "0b00111100000011111110010001101111";
        ram[12] = "0b00111101110100101001101010100010";
        ram[13] = "0b00111101101101001001111001101101";
        ram[14] = "0b10111100010001001100011001101110";
        ram[15] = "0b10111110001001010101010110000010";
        ram[16] = "0b00111100101001001111011011111011";
        ram[17] = "0b00111110000000000101101011110111";
        ram[18] = "0b10111011101000011000000110110000";
        ram[19] = "0b10111100001111110011100011111011";
        ram[20] = "0b10111101110010110010000110101010";
        ram[21] = "0b10111101110000101001000101001101";
        ram[22] = "0b00111110000010101111100111101100";
        ram[23] = "0b00111100101001000001010001000111";
        ram[24] = "0b10111100111111110110110110011110";
        ram[25] = "0b00111100000100101001111111010101";
        ram[26] = "0b00111010000110101010000010100010";
        ram[27] = "0b00111101110101000110110000110011";
        ram[28] = "0b00111101101100001111011010100000";
        ram[29] = "0b00111100101110100001101001000011";
        ram[30] = "0b10111101110101001100000100100010";
        ram[31] = "0b10111110001011001001110101011010";
        ram[32] = "0b00111100111011110001110000011000";
        ram[33] = "0b00111110010111011000010110011101";
        ram[34] = "0b00111011001101010101110000011000";
        ram[35] = "0b10111101110111101000111011100111";
        ram[36] = "0b10111110000110110100100110011101";
        ram[37] = "0b10111101010001010111100000001111";
        ram[38] = "0b00111100101001010001110010111010";
        ram[39] = "0b10111101010101010110011000010011";
        ram[40] = "0b00111011101000000110001011110111";
        ram[41] = "0b00111011001110011110010000010010";
        ram[42] = "0b00111100011101001010011000110000";
        ram[43] = "0b00111011100001010100001100001011";
        ram[44] = "0b00111101000011000101000010100110";
        ram[45] = "0b10111101110111101010001011010011";
        ram[46] = "0b00111110000000111010001101100110";
        ram[47] = "0b00111100100101110100100111111110";
        ram[48] = "0b10111101101111111111010110000100";
        ram[49] = "0b00111101000000010100110111000011";
        ram[50] = "0b00111101101111111000011011001001";
        ram[51] = "0b00111101111110010001100000011010";
        ram[52] = "0b00111101101101011000011010010101";
        ram[53] = "0b10111101101011101110101101100011";
        ram[54] = "0b00111100111100101100001001100000";
        ram[55] = "0b10111110001010100110001000100100";
        ram[56] = "0b10111110011001000111010011011010";
        ram[57] = "0b10111110000111111110111010110011";
        ram[58] = "0b10111110001000101011011011110010";
        ram[59] = "0b00111101101001101001111101111111";
        ram[60] = "0b00111101101111101100101101110101";
        ram[61] = "0b00111101000111100110000000100010";
        ram[62] = "0b10111100110101001111111111010111";
        ram[63] = "0b00111101110100000110010101110011";
        ram[64] = "0b10111101101110100000011101110000";
        ram[65] = "0b10111110001111010001001010001000";
        ram[66] = "0b00111101111111010100100101010010";
        ram[67] = "0b10111110000000000100001111100101";
        ram[68] = "0b00111101001111111111100001110011";
        ram[69] = "0b00111101111001010011001110110001";
        ram[70] = "0b10111101011110000111001110101111";
        ram[71] = "0b10111100011000111000011001001101";
        ram[72] = "0b10111101011101010001001100100010";
        ram[73] = "0b00111101000100101011101111111010";
        ram[74] = "0b10111101101001101110010111011011";
        ram[75] = "0b10111101000000111110001001000010";
        ram[76] = "0b00111101111000100111010100100101";
        ram[77] = "0b00111110001000110010000101100000";
        ram[78] = "0b00111100100101111001110011010101";
        ram[79] = "0b00111101000110110010110110000011";
        ram[80] = "0b00111101010011011000000111111110";
        ram[81] = "0b00111101111010010101000001110110";
        ram[82] = "0b10111101101101100011010010110011";
        ram[83] = "0b00111101111100110100000101011011";
        ram[84] = "0b00111110000010010110010101101111";
        ram[85] = "0b00111101000101001110101000111101";
        ram[86] = "0b10111100111110000011100100101100";
        ram[87] = "0b00111101010010101010111111010111";
        ram[88] = "0b10111101101111010100111000001001";
        ram[89] = "0b10111110001010101000000001001001";
        ram[90] = "0b10111101010110100010100111100010";
        ram[91] = "0b10111011101100011100011001001100";
        ram[92] = "0b10111110001101010011101011000101";
        ram[93] = "0b10111011101100110000011011010011";
        ram[94] = "0b00111101010000111011000101100101";
        ram[95] = "0b10111101000001111101111110010011";
        ram[96] = "0b00111101110110101001011101011011";
        ram[97] = "0b00111110000010110101000101111010";
        ram[98] = "0b00111101110101001011001110000001";
        ram[99] = "0b10111100111011011000101111110101";
        ram[100] = "0b10111110000011011001000111101111";
        ram[101] = "0b10111101100001000101111001011100";
        ram[102] = "0b10111100110010010100011110100111";
        ram[103] = "0b10111100110010010111000001010111";
        ram[104] = "0b00111011101000101000100001000000";
        ram[105] = "0b00111100111010011100111000110000";
        ram[106] = "0b10111011110101110010011011011000";
        ram[107] = "0b00111101101010110010000001110101";
        ram[108] = "0b00111110000110100111011111100110";
        ram[109] = "0b10111101100100111110100001110010";
        ram[110] = "0b10111110000101000001110100001000";
        ram[111] = "0b00111101100110100000010110101000";
        ram[112] = "0b10111110010010100101100111000000";
        ram[113] = "0b10111101011011011111011000101101";
        ram[114] = "0b10111101001000101100101001100101";
        ram[115] = "0b00111101011101101010111001001000";
        ram[116] = "0b10111101111000110000010011001101";
        ram[117] = "0b00111101100000000100100011101110";
        ram[118] = "0b10111101010001010110010100101111";
        ram[119] = "0b10111101001110011001101101111101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_0) {
meminst = new inference_conv2d_f3_3_4_0_ram("inference_conv2d_f3_3_4_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_0() {
    delete meminst;
}


};//endmodule
#endif
