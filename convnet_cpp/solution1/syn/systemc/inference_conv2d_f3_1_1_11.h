// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_11_H__
#define __inference_conv2d_f3_1_1_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_11_ram) {
        ram[0] = "0b10111101100000110010100001100110";
        ram[1] = "0b00111100011101010000101101000101";
        ram[2] = "0b00111101111010011110100100001000";
        ram[3] = "0b00111100111110111011010010101100";
        ram[4] = "0b00111100010110111101110111100010";
        ram[5] = "0b00111101110001001010100111101001";
        ram[6] = "0b10111101010110000000101100001001";
        ram[7] = "0b10111100100011001011010110111011";
        ram[8] = "0b10111101001011110011111001100001";
        ram[9] = "0b10111101110110011011101110101110";
        ram[10] = "0b00111110010111011111101000000001";
        ram[11] = "0b10111110000001000011001011001010";
        ram[12] = "0b00111100110001011011101011110101";
        ram[13] = "0b10111101100011011101110100111000";
        ram[14] = "0b10111110001110001110000010000111";
        ram[15] = "0b10111101110100111000010001110111";
        ram[16] = "0b00111101010000110010101111001111";
        ram[17] = "0b10111101111010010000111001100111";
        ram[18] = "0b00111010001110110001110100111100";
        ram[19] = "0b10111100011110111110110110110111";
        ram[20] = "0b00111101100000001011001111100010";
        ram[21] = "0b00111101010011100000110011010011";
        ram[22] = "0b10111101000010010010111110100100";
        ram[23] = "0b00111101111000001000001110011001";
        ram[24] = "0b10111101111110100100001101111000";
        ram[25] = "0b10111110001001000110101110101101";
        ram[26] = "0b10111101001100101011110000110000";
        ram[27] = "0b00111101110100101011001011000000";
        ram[28] = "0b00111101100100111101100011111011";
        ram[29] = "0b00111110011010101100100011100111";
        ram[30] = "0b10111011110001101011001110000011";
        ram[31] = "0b00111101001111110001000111111001";
        ram[32] = "0b00111011000011011111111100110010";
        ram[33] = "0b00111101111000010110110111110100";
        ram[34] = "0b10111101001110011010110111010110";
        ram[35] = "0b00111100100101101010011100001011";
        ram[36] = "0b10111110000101111100001110010011";
        ram[37] = "0b10111010100000111111010111101110";
        ram[38] = "0b00111101001101001011101011110011";
        ram[39] = "0b00111101000100111011110110111000";
        ram[40] = "0b00111100111101010111100010111110";
        ram[41] = "0b00111101010100111010100110110000";
        ram[42] = "0b00111101000001110001000101101100";
        ram[43] = "0b00111101101111100000111110001101";
        ram[44] = "0b10111101001001010110000010101101";
        ram[45] = "0b00111101101011101010100100000011";
        ram[46] = "0b00111101101100100001011111101101";
        ram[47] = "0b10111101000100101100000000010001";
        ram[48] = "0b00111101100010010110011101101101";
        ram[49] = "0b00111100001010001001011000100001";
        ram[50] = "0b00111100110100100110000011000000";
        ram[51] = "0b10111110000100011110101101000010";
        ram[52] = "0b00111101000101000011001101000011";
        ram[53] = "0b00111110000111101010011101001000";
        ram[54] = "0b10111100010111100001000001010111";
        ram[55] = "0b10111100111110101001100111000100";
        ram[56] = "0b00111110000010001001110001011110";
        ram[57] = "0b10111100011111001101111101001111";
        ram[58] = "0b10111100101110000001001101101101";
        ram[59] = "0b10111101111001011011001100011000";
        ram[60] = "0b10111100111101101011110010001010";
        ram[61] = "0b10111110001010100110011001010110";
        ram[62] = "0b10111101000010010100101110111110";
        ram[63] = "0b10111101001100111111111101011100";
        ram[64] = "0b00111101100011100111111000010010";
        ram[65] = "0b10111101110110101111011111010011";
        ram[66] = "0b10111100110100101110101101011111";
        ram[67] = "0b10111101001001111101110010111110";
        ram[68] = "0b10111101110011001010110101100101";
        ram[69] = "0b00111101100011011001111101011011";
        ram[70] = "0b00111101011001101010111000111010";
        ram[71] = "0b00111101010101100110110010111110";
        ram[72] = "0b10111101100100001110101011100010";
        ram[73] = "0b00111101110110011000010010100001";
        ram[74] = "0b10111101011101111001101001101011";
        ram[75] = "0b10111101101000110000110000100100";
        ram[76] = "0b00111101110010010101001110101001";
        ram[77] = "0b10111101111011011111000111100001";
        ram[78] = "0b00111110000010000000011000101001";
        ram[79] = "0b10111101101111011101110001100010";
        ram[80] = "0b10111101001100010110110110110001";
        ram[81] = "0b00111101110101010101100110110100";
        ram[82] = "0b10111101110011010001011111000110";
        ram[83] = "0b00111000111111011110000110011000";
        ram[84] = "0b10111101011000110101110011111100";
        ram[85] = "0b00111101100101100100111001110001";
        ram[86] = "0b00111101000001011001101011011111";
        ram[87] = "0b10111100010110001101111001010011";
        ram[88] = "0b10111101100010000111011101001101";
        ram[89] = "0b00111110000101001011001100111110";
        ram[90] = "0b10111100000111101000000110001011";
        ram[91] = "0b00111110001001111100001110010011";
        ram[92] = "0b00111110010011101011001111011101";
        ram[93] = "0b10111101000010101010010101000000";
        ram[94] = "0b10111101101011011011011110100001";
        ram[95] = "0b00111101101000000001101001010010";
        ram[96] = "0b10111101111101110101110000000111";
        ram[97] = "0b00111110000111101010011100000101";
        ram[98] = "0b00111101111101101011000010010110";
        ram[99] = "0b00111101111010001101011001001101";
        ram[100] = "0b00111110000011000101110000010100";
        ram[101] = "0b10111101101001101010001011110101";
        ram[102] = "0b10111101111010011101111010001011";
        ram[103] = "0b10111101100100111101111110001001";
        ram[104] = "0b10111110010011111110111010110011";
        ram[105] = "0b10111101100011001001000011100000";
        ram[106] = "0b00111101100011010000101000110010";
        ram[107] = "0b00111001101101100011001011001111";
        ram[108] = "0b00111100000110101111111111110110";
        ram[109] = "0b10111101100100111000011010101011";
        ram[110] = "0b00111110010000111000001100100111";
        ram[111] = "0b00111101000001011101010100101100";
        ram[112] = "0b00111100011111011100111011001101";
        ram[113] = "0b00111101101001001000000000111010";
        ram[114] = "0b00111011101010011100111101110010";
        ram[115] = "0b00111101000001101100111100001100";
        ram[116] = "0b00111101011110111001000111110111";
        ram[117] = "0b10111100101010110110110101101100";
        ram[118] = "0b10111101001000111010010010110101";
        ram[119] = "0b00111101101001010110000010010010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_11) {
meminst = new inference_conv2d_f3_1_1_11_ram("inference_conv2d_f3_1_1_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_11() {
    delete meminst;
}


};//endmodule
#endif
