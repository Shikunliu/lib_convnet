// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_75_H__
#define __inference_mult_1_120_120_84_s_W4_75_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_75_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_75_ram) {
        ram[0] = "0b00111100111101101110001010110101";
        ram[1] = "0b00111101011110101011011110001100";
        ram[2] = "0b00111101011000010010110011010110";
        ram[3] = "0b10111101100001110110101000100010";
        ram[4] = "0b10111100100000011111110001011010";
        ram[5] = "0b00111011000011100101110100100101";
        ram[6] = "0b00111100111000110010011110000010";
        ram[7] = "0b00111100000011101011011111101001";
        ram[8] = "0b10111001100101111100110100000000";
        ram[9] = "0b10111101111000101010011001101110";
        ram[10] = "0b10111101101100101011100100100101";
        ram[11] = "0b10111101111011100110000100000111";
        ram[12] = "0b00111110001110100110110111110000";
        ram[13] = "0b10111101101000011011010001000011";
        ram[14] = "0b10111101100110101010000010111101";
        ram[15] = "0b10111100011000000000101000101100";
        ram[16] = "0b00111101110011101101001101010010";
        ram[17] = "0b10111110000011111101101001000000";
        ram[18] = "0b00111110000010100010110100110000";
        ram[19] = "0b10111101100101001100001000000111";
        ram[20] = "0b00111101001011000111100010110100";
        ram[21] = "0b10111101101001000010100111000110";
        ram[22] = "0b10111101000100001000001000101110";
        ram[23] = "0b10111110000000001011101001100010";
        ram[24] = "0b10111101101001111011001001000110";
        ram[25] = "0b10111100111111111000111100101100";
        ram[26] = "0b10111110010110111001111010001100";
        ram[27] = "0b00111101011110011111110100011100";
        ram[28] = "0b10111100000110000001101111000000";
        ram[29] = "0b00111101101011110101110111111111";
        ram[30] = "0b00111100011110100111000101001011";
        ram[31] = "0b10111100001110001010110101011011";
        ram[32] = "0b10111101100000100010111011111111";
        ram[33] = "0b00111101010001000010001001010100";
        ram[34] = "0b10111110001001101100010010000010";
        ram[35] = "0b00111101010001110001011010101010";
        ram[36] = "0b00111110010100111101111001100001";
        ram[37] = "0b10111100110101011101000010110111";
        ram[38] = "0b10111101111110011001101010100110";
        ram[39] = "0b00111110000000001111001010111111";
        ram[40] = "0b00111011100101000111001101010101";
        ram[41] = "0b00111100111010111010111000111001";
        ram[42] = "0b10111110001010000011010100010110";
        ram[43] = "0b10111101000110110101110001100010";
        ram[44] = "0b00111100000111111001010000000101";
        ram[45] = "0b00111101010000110101100010010101";
        ram[46] = "0b00111101001110000000110101110011";
        ram[47] = "0b10111110001011001111111001011000";
        ram[48] = "0b00111101101101000001110011000101";
        ram[49] = "0b00111110010000001011011010110111";
        ram[50] = "0b00111101101101010000111011100011";
        ram[51] = "0b00111101110101010101111111111110";
        ram[52] = "0b00111101011010001100101101100110";
        ram[53] = "0b10111101101110101101100100110101";
        ram[54] = "0b00111110000000011110101110000101";
        ram[55] = "0b00111101110011110101011111110111";
        ram[56] = "0b10111110001100110010001100110110";
        ram[57] = "0b00111101001000101111111001001101";
        ram[58] = "0b10111110000111111110101010000001";
        ram[59] = "0b00111101110011001010101001101000";
        ram[60] = "0b10111110000110101111000110001000";
        ram[61] = "0b00111101010011111001000000010001";
        ram[62] = "0b10111100111011010101111100010100";
        ram[63] = "0b00111101011001100011010010011000";
        ram[64] = "0b10111101101101100110011011101101";
        ram[65] = "0b00111101011001011111001011011001";
        ram[66] = "0b00111101101111110111010101111100";
        ram[67] = "0b00111100000000111001110110000100";
        ram[68] = "0b00111101000100101110001010010001";
        ram[69] = "0b10111101001111100000110000100101";
        ram[70] = "0b10111101001000100000100110101011";
        ram[71] = "0b00111101001100101010001010110101";
        ram[72] = "0b00111101101001110001010011010101";
        ram[73] = "0b10111110000011111100110101101000";
        ram[74] = "0b00111110001001100110011100110000";
        ram[75] = "0b10111100100100001010110100101100";
        ram[76] = "0b00111101110111010111010011010110";
        ram[77] = "0b00111100111100101111110011100010";
        ram[78] = "0b10111100101011111111011111100000";
        ram[79] = "0b00111011000000010011000111000100";
        ram[80] = "0b10111011101011010100001100101111";
        ram[81] = "0b10111101101100011101100111001101";
        ram[82] = "0b00111101101010101010100011011110";
        ram[83] = "0b00111100100000010000100000111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_75) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_75_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_75) {
meminst = new inference_mult_1_120_120_84_s_W4_75_ram("inference_mult_1_120_120_84_s_W4_75_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_75() {
    delete meminst;
}


};//endmodule
#endif
