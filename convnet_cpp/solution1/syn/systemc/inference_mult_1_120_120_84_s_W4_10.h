// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_10_H__
#define __inference_mult_1_120_120_84_s_W4_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_10_ram) {
        ram[0] = "0b10111101010011010001011100001010";
        ram[1] = "0b10111100011110010000100100000000";
        ram[2] = "0b00111101000100111000111101000100";
        ram[3] = "0b10111100101001101110010101111101";
        ram[4] = "0b00111101000111101101011010111011";
        ram[5] = "0b10111100101010101110101101100110";
        ram[6] = "0b00111100111101111101001100001011";
        ram[7] = "0b10111101100001001001110010100101";
        ram[8] = "0b00111110000101100111011001100100";
        ram[9] = "0b10111101001010000011101011001101";
        ram[10] = "0b00111101101110100001000011010011";
        ram[11] = "0b10111110000011000001000100011011";
        ram[12] = "0b10111100101101100110011011111010";
        ram[13] = "0b10111110001111110011010100011010";
        ram[14] = "0b10111101001000011010110001110011";
        ram[15] = "0b10111100000100100001000000111000";
        ram[16] = "0b10111101011100101010111100010100";
        ram[17] = "0b00111100111010100110010010001101";
        ram[18] = "0b00111101111001000001100100011010";
        ram[19] = "0b10111011000000011110111011011000";
        ram[20] = "0b10111101100011010001110011001110";
        ram[21] = "0b10111101010011100110100001000011";
        ram[22] = "0b00111101010100001110010110010110";
        ram[23] = "0b00111101100001111000010010001110";
        ram[24] = "0b10111110000110110010100011011000";
        ram[25] = "0b00111101000111011000100010100111";
        ram[26] = "0b00111100111100101000001111100001";
        ram[27] = "0b00111101101110101101001011001111";
        ram[28] = "0b10111101010111010110100110111000";
        ram[29] = "0b10111101100010011011010010011010";
        ram[30] = "0b10111110000000100000011011001000";
        ram[31] = "0b10111101100110100000011110110011";
        ram[32] = "0b10111011011000010000101010011100";
        ram[33] = "0b00111110001000001001110111010000";
        ram[34] = "0b00111100100110010101101001000100";
        ram[35] = "0b00111011110101011111010100010101";
        ram[36] = "0b00111101100101100001111001111000";
        ram[37] = "0b10111110000010011101000000100000";
        ram[38] = "0b10111101110111110101010000001001";
        ram[39] = "0b10111110000100001101010011011100";
        ram[40] = "0b00111101000010001000111011100101";
        ram[41] = "0b00111101101111101001001011110000";
        ram[42] = "0b10111011110100101110111010100101";
        ram[43] = "0b10111011111111000100010011001010";
        ram[44] = "0b00111101110100110110110101100101";
        ram[45] = "0b10111110010000001000000111000011";
        ram[46] = "0b10111110000011101100100100011001";
        ram[47] = "0b10111101000110100111100111111111";
        ram[48] = "0b00111101111010100001100111001010";
        ram[49] = "0b10111101010000110101101001000010";
        ram[50] = "0b00111101110100111010110011010110";
        ram[51] = "0b10111100101111111110110110001100";
        ram[52] = "0b10111110000010100011011101101001";
        ram[53] = "0b10111101100101110101100100001010";
        ram[54] = "0b10111110010001010111010011110111";
        ram[55] = "0b00111101111100001100010001011001";
        ram[56] = "0b10111101110011011110011101100100";
        ram[57] = "0b00111101011110101110000000111011";
        ram[58] = "0b10111100011010101101010101100001";
        ram[59] = "0b00111101100110100101100001010110";
        ram[60] = "0b10111100110001110101111001100011";
        ram[61] = "0b10111100101011001001011010010111";
        ram[62] = "0b00111011010001100011000011111100";
        ram[63] = "0b00111101100101100011011001010011";
        ram[64] = "0b00111100110011010101000010000000";
        ram[65] = "0b10111101100011110001111111010000";
        ram[66] = "0b10111101100001110010010100010101";
        ram[67] = "0b10111101101100000001001111111010";
        ram[68] = "0b10111110001000001001110100000110";
        ram[69] = "0b00111101110110100000000111101111";
        ram[70] = "0b10111100010101000010011011001001";
        ram[71] = "0b00111110001101000110111110011100";
        ram[72] = "0b10111101100010110101101000101110";
        ram[73] = "0b00111101100111110110110011100011";
        ram[74] = "0b10111101111000010111101100001111";
        ram[75] = "0b00111101100000011011010110100000";
        ram[76] = "0b00111101000000010101111010100101";
        ram[77] = "0b00111101101010111101011111011010";
        ram[78] = "0b00111101001011001100011011010011";
        ram[79] = "0b10111101111010000100010010001101";
        ram[80] = "0b00111011101011101001010000010010";
        ram[81] = "0b10111101011010010101101000110111";
        ram[82] = "0b00111101110010110110001010011111";
        ram[83] = "0b00111100011100000001111110111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_10_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_10) {
meminst = new inference_mult_1_120_120_84_s_W4_10_ram("inference_mult_1_120_120_84_s_W4_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_10() {
    delete meminst;
}


};//endmodule
#endif
