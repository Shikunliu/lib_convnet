// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_0_H__
#define __inference_conv2d_f3_0_4_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_0_ram) {
        ram[0] = "0b00111100101010010000000010101010";
        ram[1] = "0b10111100111101000100010100010111";
        ram[2] = "0b10111101001101100101111010010111";
        ram[3] = "0b00111101101011000110000100101010";
        ram[4] = "0b00111101011001110111101010110011";
        ram[5] = "0b10111110001011011001100000111001";
        ram[6] = "0b10111101101000001000111010101001";
        ram[7] = "0b00111101000001001011100011100111";
        ram[8] = "0b00111100110111000011000111111010";
        ram[9] = "0b10111110010101111101000011110010";
        ram[10] = "0b00111110000111010001010101101010";
        ram[11] = "0b10111011101011101111110110101111";
        ram[12] = "0b10111101111111000110011001001101";
        ram[13] = "0b10111100111100100000001001111100";
        ram[14] = "0b10111101010010000100110010111011";
        ram[15] = "0b10111110000001100011110010111000";
        ram[16] = "0b10111101101011011110001110101011";
        ram[17] = "0b10111110001010101110111000100000";
        ram[18] = "0b10111100111001100110110001111011";
        ram[19] = "0b00111110100000101001110001010110";
        ram[20] = "0b00111011110010100000011011110101";
        ram[21] = "0b10111011000000000111010100000101";
        ram[22] = "0b10111110000001110111000100000000";
        ram[23] = "0b00111010100011111110010001100100";
        ram[24] = "0b00111101010001100000101110011000";
        ram[25] = "0b00111100100100111110101101101111";
        ram[26] = "0b00111100001011111011110011110010";
        ram[27] = "0b10111100110111100011101111000000";
        ram[28] = "0b00111101100111100111100100010111";
        ram[29] = "0b10111101110110101100010101111110";
        ram[30] = "0b10111101101111000100011011100110";
        ram[31] = "0b10111100101000011100001110011111";
        ram[32] = "0b00111011100000011111011111010010";
        ram[33] = "0b00111101000000110100011110110011";
        ram[34] = "0b10111100111000000011000011000010";
        ram[35] = "0b10111101101111111110000101000111";
        ram[36] = "0b00111110001011110101110111111111";
        ram[37] = "0b10111101101011100101101100110101";
        ram[38] = "0b10111110001000111001001001011100";
        ram[39] = "0b00111101010110100000101101000100";
        ram[40] = "0b10111101011010000110110010011011";
        ram[41] = "0b00111100111110011001101010001011";
        ram[42] = "0b00111101010011111010011100111101";
        ram[43] = "0b00111011101101010101010111111000";
        ram[44] = "0b10111101000011011011001000000101";
        ram[45] = "0b00111011100111100000011001010000";
        ram[46] = "0b00111100001100111000011100010110";
        ram[47] = "0b00111100100001100011001011101010";
        ram[48] = "0b00111100110100010110001101101010";
        ram[49] = "0b10111101010001111001001010000001";
        ram[50] = "0b10111101101001011111101111011101";
        ram[51] = "0b10111101100010111011110011110101";
        ram[52] = "0b10111011011110011000000110001100";
        ram[53] = "0b00111101000000011010111111101001";
        ram[54] = "0b10111101101100100101111011010000";
        ram[55] = "0b00111100101100011011110101111101";
        ram[56] = "0b00111101101111000100010100111000";
        ram[57] = "0b10111101000111011111011010100110";
        ram[58] = "0b00111101010110101100110000011001";
        ram[59] = "0b10111101010000101011101110000001";
        ram[60] = "0b10111110000010110111010001011000";
        ram[61] = "0b10111101111101111110010001011000";
        ram[62] = "0b00111101101010111001101110111000";
        ram[63] = "0b00111110001110101110111010100110";
        ram[64] = "0b00111011111100011100001101010001";
        ram[65] = "0b00111101100100110000011110111101";
        ram[66] = "0b00111100010111111010110111100110";
        ram[67] = "0b00111101111111111101011000001111";
        ram[68] = "0b00111101100001110010011111001111";
        ram[69] = "0b10111101010101000111100010010011";
        ram[70] = "0b10111011110110010101010011000101";
        ram[71] = "0b00111110010000101111101111100011";
        ram[72] = "0b00111101001101010001110011001000";
        ram[73] = "0b10111101100010011110110111110101";
        ram[74] = "0b10111101001101000101110001111001";
        ram[75] = "0b10111101101110100100011011100001";
        ram[76] = "0b00111101101001111000100101111100";
        ram[77] = "0b10111101011111110001011001111011";
        ram[78] = "0b00111100110101000111101001110110";
        ram[79] = "0b00111101010001100111001000100101";
        ram[80] = "0b10111110001010010111101011101110";
        ram[81] = "0b10111101100110110011011101000011";
        ram[82] = "0b00111100110001011010011000110010";
        ram[83] = "0b00111101011111110100000111100101";
        ram[84] = "0b00111101010000011101011100100000";
        ram[85] = "0b10111110001001110011101110000110";
        ram[86] = "0b10111110001100111101001110100010";
        ram[87] = "0b10111100111010000111101001110011";
        ram[88] = "0b10111101111010110110001010000100";
        ram[89] = "0b00111101101110010111100010101101";
        ram[90] = "0b10111101111101000010110000111101";
        ram[91] = "0b00111100011100100011100010010111";
        ram[92] = "0b00111101110000011011000100010000";
        ram[93] = "0b10111110000010111011001101000010";
        ram[94] = "0b10111101101111111010100101111110";
        ram[95] = "0b00111101011111011110111101101010";
        ram[96] = "0b10111100011000001000011010111110";
        ram[97] = "0b00111101001010101000011000011011";
        ram[98] = "0b00111101100110100111010000000101";
        ram[99] = "0b10111101000111111001100010000001";
        ram[100] = "0b00111101001011001101010111101100";
        ram[101] = "0b00111100111101000101000111100001";
        ram[102] = "0b10111101001101111010111001110010";
        ram[103] = "0b00111101011010011011000111100000";
        ram[104] = "0b00111100011000100100000011010010";
        ram[105] = "0b00111101100011111110111100011110";
        ram[106] = "0b00111100111101011001001010001001";
        ram[107] = "0b10111101110100000000111101110111";
        ram[108] = "0b00111100100100001110101000110011";
        ram[109] = "0b00111101001011100010110101110000";
        ram[110] = "0b10111100011000000010101110111010";
        ram[111] = "0b10111101101000111111010010011100";
        ram[112] = "0b00111101110010001100010111110010";
        ram[113] = "0b00111101000001000001000100000111";
        ram[114] = "0b10111100111010001010010010011010";
        ram[115] = "0b00111101101011001011000101111100";
        ram[116] = "0b10111101100001101011000101000101";
        ram[117] = "0b00111101000001100001110100110110";
        ram[118] = "0b10111101000001010110110011110010";
        ram[119] = "0b10111101001101110100101011010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_0) {
meminst = new inference_conv2d_f3_0_4_0_ram("inference_conv2d_f3_0_4_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_0() {
    delete meminst;
}


};//endmodule
#endif
