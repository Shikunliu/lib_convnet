// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_14_H__
#define __inference_conv2d_f3_3_3_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_14_ram) {
        ram[0] = "0b10111100011011001011110110011000";
        ram[1] = "0b00111101110000101100111111100110";
        ram[2] = "0b00111100110010101011111000110101";
        ram[3] = "0b10111101010100101000111101101010";
        ram[4] = "0b00111110000110011000010100100111";
        ram[5] = "0b00111110001001100000011001110101";
        ram[6] = "0b00111101101011110101010100100010";
        ram[7] = "0b10111100100000000010000001001100";
        ram[8] = "0b10111101101010010110001100010011";
        ram[9] = "0b00111010110001110101111011111010";
        ram[10] = "0b10111101000101001001111100101001";
        ram[11] = "0b00111101011011001010010001010011";
        ram[12] = "0b00111101000011000000110111110110";
        ram[13] = "0b00111110000111111010100101111110";
        ram[14] = "0b00111110011000111100111011101010";
        ram[15] = "0b00111101010001111000001010101011";
        ram[16] = "0b10111101101110010010011110000100";
        ram[17] = "0b00111110000100101011010000001111";
        ram[18] = "0b00111101111000000011111001100100";
        ram[19] = "0b00111101001011111110110101001000";
        ram[20] = "0b10111101110000011110011100111001";
        ram[21] = "0b10111110001000001101011101111011";
        ram[22] = "0b10111101101001101000101101111000";
        ram[23] = "0b00111101001111001000010100000110";
        ram[24] = "0b00111101011000000000101011101000";
        ram[25] = "0b10111100001001011110011010101111";
        ram[26] = "0b10111101101010100011100001110110";
        ram[27] = "0b00111110000000101010011001101110";
        ram[28] = "0b00111101110111010011110111001001";
        ram[29] = "0b10111100111011011011100100001011";
        ram[30] = "0b10111101110111110101110011110010";
        ram[31] = "0b00111101111110110011001110011000";
        ram[32] = "0b10111101000101011100111010111001";
        ram[33] = "0b00111100010011101101000001001000";
        ram[34] = "0b00111101100100000111101001101100";
        ram[35] = "0b10111011111001101010100100101100";
        ram[36] = "0b00111101100111111110101110000000";
        ram[37] = "0b00111101100100001001000110001011";
        ram[38] = "0b00111100100101110111100010001101";
        ram[39] = "0b10111101011000010001111011100100";
        ram[40] = "0b10111110001101101111110000010110";
        ram[41] = "0b10111011111000000000101001000001";
        ram[42] = "0b10111100110111001010000111110111";
        ram[43] = "0b10111101100101000010111011011100";
        ram[44] = "0b00111100100000011100111001101100";
        ram[45] = "0b10111100010111101111000100100111";
        ram[46] = "0b00111100000100010001110101111111";
        ram[47] = "0b10111110010110000111010111010101";
        ram[48] = "0b00111110010000000101110000000011";
        ram[49] = "0b10111101101100011000010101010110";
        ram[50] = "0b00111101101101111001000010101011";
        ram[51] = "0b00111101101001101101011110011000";
        ram[52] = "0b00111100110110011101100111111100";
        ram[53] = "0b10111101011001101000110110011110";
        ram[54] = "0b10111101110001010011011110111011";
        ram[55] = "0b10111101010010100111110011111100";
        ram[56] = "0b00111011000011101100010010101001";
        ram[57] = "0b00111101111011111100101111010101";
        ram[58] = "0b10111101100010111101010010101000";
        ram[59] = "0b10111110000010101110011100001100";
        ram[60] = "0b00111101101010101011011111000010";
        ram[61] = "0b00111100101011011100011110000100";
        ram[62] = "0b00111101100011100110110111000100";
        ram[63] = "0b00111110000000101111110011110000";
        ram[64] = "0b10111101010110011001010011111100";
        ram[65] = "0b00111101101101001011110001111000";
        ram[66] = "0b10111101000101010100001011110011";
        ram[67] = "0b00111101110011101101101000100011";
        ram[68] = "0b00111110010001001000100011000110";
        ram[69] = "0b10111101000011001101101111100110";
        ram[70] = "0b00111100100001001101110010101001";
        ram[71] = "0b00111100110011001010110011101100";
        ram[72] = "0b00111100000000100110001001000101";
        ram[73] = "0b00111101101000011001100010101111";
        ram[74] = "0b10111101111110010100101101111011";
        ram[75] = "0b10111100110001001111111111100100";
        ram[76] = "0b10111110000000100111010000011001";
        ram[77] = "0b00111101100000011111110011000101";
        ram[78] = "0b10111101100110100111001110110100";
        ram[79] = "0b10111101011100111101101101001001";
        ram[80] = "0b00111101010011100101011101111100";
        ram[81] = "0b00111110000001100111101100011100";
        ram[82] = "0b00111100101100000001100001100001";
        ram[83] = "0b10111110000111111000010001000101";
        ram[84] = "0b10111101111010101011110101011110";
        ram[85] = "0b00111101100011010011001110101010";
        ram[86] = "0b10111101101111011001111001101001";
        ram[87] = "0b00111101110101111011011111001000";
        ram[88] = "0b10111100011010111111110100010100";
        ram[89] = "0b10111101011110000111000001010100";
        ram[90] = "0b00111110000110110110011000110000";
        ram[91] = "0b10111101001101010000111001001111";
        ram[92] = "0b10111011110110001010000100000001";
        ram[93] = "0b00111101110100111000000111011000";
        ram[94] = "0b10111101100110001111001000110010";
        ram[95] = "0b00111100101111000011111011100000";
        ram[96] = "0b10111101001000011001011011011001";
        ram[97] = "0b00111101111010010001100011100011";
        ram[98] = "0b00111101010101100100111010001011";
        ram[99] = "0b00111101110010000001001000101011";
        ram[100] = "0b10111101110010100110011000000101";
        ram[101] = "0b00111100010111111011110011111111";
        ram[102] = "0b10111101010100110100100000010001";
        ram[103] = "0b10111100111011110111110111010010";
        ram[104] = "0b10111101011111100010000000010001";
        ram[105] = "0b10111100100001110001010101101000";
        ram[106] = "0b00111110001101100110000010100010";
        ram[107] = "0b00111110000101011111101001100110";
        ram[108] = "0b00111011100101001100100011100101";
        ram[109] = "0b00111110000010000010001010111100";
        ram[110] = "0b10111101010010000001000010001011";
        ram[111] = "0b10111101111000000100010010101111";
        ram[112] = "0b10111100010010001101111111011000";
        ram[113] = "0b10111101100011010010111111001001";
        ram[114] = "0b00111101111001100111010100010100";
        ram[115] = "0b10111101001000111110101001010101";
        ram[116] = "0b00111100101011110110101001010001";
        ram[117] = "0b00111100111001000111111010011010";
        ram[118] = "0b00111101010010011110001000000001";
        ram[119] = "0b00111101110101010111110101011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_14) {
meminst = new inference_conv2d_f3_3_3_14_ram("inference_conv2d_f3_3_3_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_14() {
    delete meminst;
}


};//endmodule
#endif
