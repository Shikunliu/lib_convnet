// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_13_H__
#define __inference_conv2d_f3_2_3_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_13_ram) {
        ram[0] = "0b10111101001001000110011101010011";
        ram[1] = "0b10111100011010100001111111000100";
        ram[2] = "0b00111101000101101101001111010010";
        ram[3] = "0b00111110001110011101010111100101";
        ram[4] = "0b10111101010111001010110101100101";
        ram[5] = "0b00111101001000110010001110100001";
        ram[6] = "0b10111101111010110001111011100010";
        ram[7] = "0b00111110001101011000011100001110";
        ram[8] = "0b10111100111100011000101001010001";
        ram[9] = "0b10111101111101011101010101101111";
        ram[10] = "0b00111101011001101100001111010100";
        ram[11] = "0b10111100000000011010111110000011";
        ram[12] = "0b00111101100111011010101110010010";
        ram[13] = "0b00111110001011001000010101111111";
        ram[14] = "0b10111101011111101010011011101010";
        ram[15] = "0b00111110000111100011100111110111";
        ram[16] = "0b00111101000100000111101111100100";
        ram[17] = "0b00111101110001101111000111110111";
        ram[18] = "0b00111101000101010001111011100001";
        ram[19] = "0b10111101111101100010100111011000";
        ram[20] = "0b10111011100100101101011011110010";
        ram[21] = "0b10111101000111000101011110111010";
        ram[22] = "0b10111101100011111110101010011100";
        ram[23] = "0b10111110001010100111011110100011";
        ram[24] = "0b00111110001111010011101011100111";
        ram[25] = "0b00111100000100010000010000111111";
        ram[26] = "0b10111101010001101110010000100000";
        ram[27] = "0b00111011111101110000011110001001";
        ram[28] = "0b10111101110000001111000111011011";
        ram[29] = "0b10111101101111000111110100000001";
        ram[30] = "0b10111110001010110101001001000100";
        ram[31] = "0b10111101110111001011100100100100";
        ram[32] = "0b10111100101100110110010011100111";
        ram[33] = "0b00111101001011101100110110101001";
        ram[34] = "0b00111101001111101101001110010101";
        ram[35] = "0b10111110000100010110010100001010";
        ram[36] = "0b00111101101011100100000110011111";
        ram[37] = "0b00111100001111010101001101001000";
        ram[38] = "0b10111101101100110011101001010101";
        ram[39] = "0b10111011101111000010111011110000";
        ram[40] = "0b00111101110111010000110010000000";
        ram[41] = "0b10111101101111010101101101011011";
        ram[42] = "0b00111101000001101011110010011000";
        ram[43] = "0b00111101010100110011010001000000";
        ram[44] = "0b10111101001000100100011100000010";
        ram[45] = "0b10111100101010111100010110000001";
        ram[46] = "0b10111101101001000011010101011100";
        ram[47] = "0b00111110000010101001001100101001";
        ram[48] = "0b10111110000101110010010110000001";
        ram[49] = "0b10111101011000100010111110111011";
        ram[50] = "0b10111100001110001101110001010101";
        ram[51] = "0b10111110000111111110000111011010";
        ram[52] = "0b00111011111110001100000101000111";
        ram[53] = "0b10111101011010111010011100011000";
        ram[54] = "0b10111110000011000011011110100100";
        ram[55] = "0b00111100101100010001001000100110";
        ram[56] = "0b10111101111110000011000101101010";
        ram[57] = "0b10111100010110110110110100001110";
        ram[58] = "0b00111101100001110001100001011000";
        ram[59] = "0b10111101001010001010010001001001";
        ram[60] = "0b00111101100010110111100110100011";
        ram[61] = "0b00111100001010010010011011010101";
        ram[62] = "0b10111100000010111000001001001010";
        ram[63] = "0b10111101010101011111100111101101";
        ram[64] = "0b10111101001100110100101110111101";
        ram[65] = "0b10111101100100101001101001111010";
        ram[66] = "0b10111101000001010000111110000100";
        ram[67] = "0b10111100111100000010010011000001";
        ram[68] = "0b00111110010001100110010101011010";
        ram[69] = "0b00111101111111001001111001100111";
        ram[70] = "0b00111100000111101100011010110101";
        ram[71] = "0b00111110000101110101111011101010";
        ram[72] = "0b10111011110101111100000111001000";
        ram[73] = "0b10111101110101100100010100011100";
        ram[74] = "0b10111101001011010110100001101001";
        ram[75] = "0b00111110010011101110101110110011";
        ram[76] = "0b10111101110110101100111111111010";
        ram[77] = "0b10111101101000111110001110011111";
        ram[78] = "0b00111101111010110011111101100100";
        ram[79] = "0b10111101011000001001011110000101";
        ram[80] = "0b10111101011011011010001101110010";
        ram[81] = "0b00111101110101110011010111000010";
        ram[82] = "0b00111101111000111101101100111100";
        ram[83] = "0b10111101000101100110001101001111";
        ram[84] = "0b10111100111110100110010000010100";
        ram[85] = "0b00111101000001001010001101001101";
        ram[86] = "0b00111101111101101010010010000111";
        ram[87] = "0b10111101111001010010111001110011";
        ram[88] = "0b00111100101111101010101110100010";
        ram[89] = "0b00111101101110000001011101001110";
        ram[90] = "0b00111101010000100010111001011110";
        ram[91] = "0b10111110000100101000101101101110";
        ram[92] = "0b00111101011100100111001101101010";
        ram[93] = "0b00111101010111100010000110001001";
        ram[94] = "0b10111101101110011011111000001010";
        ram[95] = "0b00111101110010010001110011101101";
        ram[96] = "0b10111100101101001000110100000101";
        ram[97] = "0b00111101111011011001011110110011";
        ram[98] = "0b00111101100011000001110110110000";
        ram[99] = "0b00111101100000010100101110001111";
        ram[100] = "0b10111101001101110100100110010011";
        ram[101] = "0b00111101010011001101001001011100";
        ram[102] = "0b10111100111111011001101010010101";
        ram[103] = "0b10111110000011010010011011111010";
        ram[104] = "0b10111110000010100010010101010011";
        ram[105] = "0b10111101100101111111001011010000";
        ram[106] = "0b00111101101110011011011000111010";
        ram[107] = "0b00111101001001011111001011110100";
        ram[108] = "0b00111101100001110110010010000110";
        ram[109] = "0b00111100111000001110110000001001";
        ram[110] = "0b10111100010100110010001111111111";
        ram[111] = "0b00111100111111100111000101010101";
        ram[112] = "0b10111101110000101001010101111111";
        ram[113] = "0b10111100010110000010000001010011";
        ram[114] = "0b10111101100111010110010110010100";
        ram[115] = "0b10111100111111011000001001000010";
        ram[116] = "0b10111100110100110010100100000111";
        ram[117] = "0b00111100010001010000110001111010";
        ram[118] = "0b10111101000010010001110110011011";
        ram[119] = "0b10111100011010101101110011101110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_13) {
meminst = new inference_conv2d_f3_2_3_13_ram("inference_conv2d_f3_2_3_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_13() {
    delete meminst;
}


};//endmodule
#endif
