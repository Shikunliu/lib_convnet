// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_57_H__
#define __inference_mult_1_120_120_84_s_W4_57_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_57_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_57_ram) {
        ram[0] = "0b00111101111011100001100100110011";
        ram[1] = "0b00111100100011000111111100110101";
        ram[2] = "0b00111101110000110111101100101111";
        ram[3] = "0b00111110000000101001010010011010";
        ram[4] = "0b00111101110100100001101000101110";
        ram[5] = "0b10111110001000111000111011110011";
        ram[6] = "0b10111101110110111110010101010100";
        ram[7] = "0b00111101100000010000101101111110";
        ram[8] = "0b00111100100111101011100011110011";
        ram[9] = "0b10111110001101011001110010001101";
        ram[10] = "0b10111101101010101111011011000111";
        ram[11] = "0b00111101111101001100010001001000";
        ram[12] = "0b00111101110010111010011101001110";
        ram[13] = "0b00111101111100001010001011001011";
        ram[14] = "0b00111100101000001101100110010100";
        ram[15] = "0b10111110000010011100011011110011";
        ram[16] = "0b00111101001101111011010101111001";
        ram[17] = "0b00111101111000110010110010100101";
        ram[18] = "0b00111110000011011010101000001101";
        ram[19] = "0b10111101110010110011101101001101";
        ram[20] = "0b10111100100100101000111001111000";
        ram[21] = "0b10111110000110110001000101000001";
        ram[22] = "0b00111110001110000100000100100101";
        ram[23] = "0b00111101100111111010111001000011";
        ram[24] = "0b10111110000011111110111100111001";
        ram[25] = "0b10111101100110001010101101010000";
        ram[26] = "0b10111101110100000101000100000001";
        ram[27] = "0b10111101100000111101011110010000";
        ram[28] = "0b10111100011100101000110001111010";
        ram[29] = "0b10111010101100101001001000111001";
        ram[30] = "0b10111101110010011100011101011111";
        ram[31] = "0b10111101111011011010011011100111";
        ram[32] = "0b10111101110100101110101101011111";
        ram[33] = "0b10111101000111110110001110101000";
        ram[34] = "0b00111011000110000101011101001111";
        ram[35] = "0b00111101111011110111111111010000";
        ram[36] = "0b10111101010011101000010100011001";
        ram[37] = "0b00111110000111011010111000111110";
        ram[38] = "0b00111100000011100100100101101111";
        ram[39] = "0b10111101111010011110000010100100";
        ram[40] = "0b00111101101110011010010111101100";
        ram[41] = "0b00111101101001101010100011010100";
        ram[42] = "0b10111101011100101110001011100001";
        ram[43] = "0b10111101001100000011010010110001";
        ram[44] = "0b10111110010010110000010001101000";
        ram[45] = "0b10111110010000111010110110011111";
        ram[46] = "0b10111101011011010100001000100011";
        ram[47] = "0b00111101100110000000000011101011";
        ram[48] = "0b10111101110001000101110001011110";
        ram[49] = "0b00111101101010001010100101101100";
        ram[50] = "0b00111101100000110100000110101100";
        ram[51] = "0b00111110001010000100100111001011";
        ram[52] = "0b00111100001111110101101000011110";
        ram[53] = "0b10111100010110011000010001101011";
        ram[54] = "0b10111110000011100110010100111000";
        ram[55] = "0b00111110000011101011111100100011";
        ram[56] = "0b10111101011011011110110110010100";
        ram[57] = "0b10111101101000011100101001100011";
        ram[58] = "0b10111110001100001011011111000011";
        ram[59] = "0b00111100010101111010011100011011";
        ram[60] = "0b10111100100111000101100101100111";
        ram[61] = "0b00111110000010110101011111000101";
        ram[62] = "0b00111101110011111011101100001110";
        ram[63] = "0b00111101001110101101000100000111";
        ram[64] = "0b00111100100100010110011101100110";
        ram[65] = "0b00111110000100100111110110001001";
        ram[66] = "0b10111110001010110110010000010111";
        ram[67] = "0b00111101101000111111011101100011";
        ram[68] = "0b00111110000000110000010001000111";
        ram[69] = "0b10111101010000001010110000101101";
        ram[70] = "0b00111100100000110111001110111101";
        ram[71] = "0b10111101111100001100110000110110";
        ram[72] = "0b00111110001101100000000001101101";
        ram[73] = "0b10111101101101110101101110001111";
        ram[74] = "0b00111100001101101010101010110111";
        ram[75] = "0b00111101100000010010001111111010";
        ram[76] = "0b10111011000101001100100111111100";
        ram[77] = "0b00111101101011010110011101110111";
        ram[78] = "0b00111101000110111011000110111101";
        ram[79] = "0b00111101101100111100000101001000";
        ram[80] = "0b10111101111001110100100111110001";
        ram[81] = "0b00111101110110010100010000100100";
        ram[82] = "0b10111100111100111001110011100101";
        ram[83] = "0b00111110000010100000000011100010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_57) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_57_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_57) {
meminst = new inference_mult_1_120_120_84_s_W4_57_ram("inference_mult_1_120_120_84_s_W4_57_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_57() {
    delete meminst;
}


};//endmodule
#endif
