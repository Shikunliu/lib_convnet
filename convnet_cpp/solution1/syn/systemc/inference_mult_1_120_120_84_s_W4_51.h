// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_51_H__
#define __inference_mult_1_120_120_84_s_W4_51_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_51_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_51_ram) {
        ram[0] = "0b00111100000010110101011110101101";
        ram[1] = "0b00111101100100100111010001101001";
        ram[2] = "0b10111110000101011010110000000100";
        ram[3] = "0b10111101100100000000000110100000";
        ram[4] = "0b10111101011101011101111010101001";
        ram[5] = "0b10111101111101110110110111011011";
        ram[6] = "0b10111100000101111000001011001001";
        ram[7] = "0b00111011000011000000001000101100";
        ram[8] = "0b00111101100111101110110110010110";
        ram[9] = "0b00111011001111111010110111010101";
        ram[10] = "0b10111110000011010000100101011011";
        ram[11] = "0b00111110000001101101110101101010";
        ram[12] = "0b00111110000111011000001000110100";
        ram[13] = "0b10111100011011000010001011010011";
        ram[14] = "0b00111101110100101001001111010001";
        ram[15] = "0b10111101011001001000100101100111";
        ram[16] = "0b10111100101100101011000000100001";
        ram[17] = "0b10111101101111000110101000100001";
        ram[18] = "0b00111101111000110101000101011001";
        ram[19] = "0b00111101110011110010011110111011";
        ram[20] = "0b00111101000101101011000000010000";
        ram[21] = "0b10111011011011100010000101011011";
        ram[22] = "0b00111101101011110111010110010111";
        ram[23] = "0b10111110001011010001100100010101";
        ram[24] = "0b00111110000101101100001101110110";
        ram[25] = "0b00111101111111100010100100110000";
        ram[26] = "0b00111100110011000010011000010100";
        ram[27] = "0b00111101101010110011101010010001";
        ram[28] = "0b00111011110011001001101000100010";
        ram[29] = "0b10111101010011101111110010001000";
        ram[30] = "0b10111011100100101011000101110011";
        ram[31] = "0b00111110011010110001111100100101";
        ram[32] = "0b00111110000011111010010011000110";
        ram[33] = "0b00111011000011110010101000101010";
        ram[34] = "0b00111100100010101111011111100000";
        ram[35] = "0b10111101100110010000110101110101";
        ram[36] = "0b10111101101010110100010110111100";
        ram[37] = "0b10111101011110110001001110011101";
        ram[38] = "0b00111101100010110010001100000111";
        ram[39] = "0b10111011001111001010011001100100";
        ram[40] = "0b10111101100100010000011010011110";
        ram[41] = "0b10111110010000011010100110111001";
        ram[42] = "0b10111110010100001110011110111100";
        ram[43] = "0b10111101110000111110100111001111";
        ram[44] = "0b10111101000011100011101110011000";
        ram[45] = "0b00111101011100100001111011001100";
        ram[46] = "0b10111110010000100100010110110011";
        ram[47] = "0b10111100110110001111110111001000";
        ram[48] = "0b00111101111011111001000100011101";
        ram[49] = "0b00111101011110001100011000011010";
        ram[50] = "0b10111110001010110111000110111001";
        ram[51] = "0b00111110001111011101001010101111";
        ram[52] = "0b10111110000011110000010011011110";
        ram[53] = "0b10111101010100000000101111001100";
        ram[54] = "0b10111101100010000011100101110000";
        ram[55] = "0b00111101101011011000111010101111";
        ram[56] = "0b00111101100100101010101011100011";
        ram[57] = "0b10111101100000110101100010010101";
        ram[58] = "0b00111101100110001110100101001000";
        ram[59] = "0b10111101110101011110001010001011";
        ram[60] = "0b10111100011010111011011100001000";
        ram[61] = "0b10111110010101010110000100001011";
        ram[62] = "0b10111100010101101110111111010001";
        ram[63] = "0b10111110000111011000111110010011";
        ram[64] = "0b00111101110110010111110111010000";
        ram[65] = "0b10111101001011011101011001001101";
        ram[66] = "0b10111110011111101000000001111100";
        ram[67] = "0b00111101010110111110110100110001";
        ram[68] = "0b00111110000101000011010011100011";
        ram[69] = "0b10111110000000111001111011110001";
        ram[70] = "0b10111011110011100100100000100010";
        ram[71] = "0b10111101000100001110100011010110";
        ram[72] = "0b00111001100100101011101010010011";
        ram[73] = "0b10111101111100011101011110011001";
        ram[74] = "0b00111101100010111111111111000000";
        ram[75] = "0b00111100011001111001100000101010";
        ram[76] = "0b10111100111001001000100010101011";
        ram[77] = "0b00111101111001100101011000100110";
        ram[78] = "0b00111101001011001100101010011001";
        ram[79] = "0b10111011111111001011101100010010";
        ram[80] = "0b00111100110110100110101001111010";
        ram[81] = "0b00111101100001011000110100010101";
        ram[82] = "0b00111101000011110111110010101010";
        ram[83] = "0b00111101011110000101000001011001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_51) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_51_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_51) {
meminst = new inference_mult_1_120_120_84_s_W4_51_ram("inference_mult_1_120_120_84_s_W4_51_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_51() {
    delete meminst;
}


};//endmodule
#endif
