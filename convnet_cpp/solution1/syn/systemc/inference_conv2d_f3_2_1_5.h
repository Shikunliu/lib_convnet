// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_5_H__
#define __inference_conv2d_f3_2_1_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_5_ram) {
        ram[0] = "0b10111110001000101010011101111010";
        ram[1] = "0b10111100001111100111101000100100";
        ram[2] = "0b00111110010101010001101001000011";
        ram[3] = "0b00111101100110010010011100001011";
        ram[4] = "0b10111110001001100110011001100110";
        ram[5] = "0b00111110000011001101101110111110";
        ram[6] = "0b10111110001000100111000100110111";
        ram[7] = "0b00111101110001011111101110011010";
        ram[8] = "0b00111101101010010000101111100011";
        ram[9] = "0b00111110010001011111111101100001";
        ram[10] = "0b00111101111101100111000010100000";
        ram[11] = "0b00111101110001100001101000111001";
        ram[12] = "0b00111101011111011100111100000011";
        ram[13] = "0b00111100000100100001001100111101";
        ram[14] = "0b00111101111111111000101110011100";
        ram[15] = "0b10111010000101111000001011011000";
        ram[16] = "0b00111011110001011110010010111100";
        ram[17] = "0b10111101011111111110101101011000";
        ram[18] = "0b00111101101010111100001100001010";
        ram[19] = "0b10111101100011101101001001100001";
        ram[20] = "0b10111100000110011100111111100000";
        ram[21] = "0b00111101100001101000101101001111";
        ram[22] = "0b10111101001010011001000010001000";
        ram[23] = "0b10111101100101011010100000001000";
        ram[24] = "0b10111100001000000000000100110010";
        ram[25] = "0b00111110000000111010001101100110";
        ram[26] = "0b00111101101100101100010000110101";
        ram[27] = "0b00111101100101001111100100100001";
        ram[28] = "0b00111101100010000110011011010111";
        ram[29] = "0b10111101101101010011000100101101";
        ram[30] = "0b10111101000101111010011110111100";
        ram[31] = "0b10111100000110001010101010010001";
        ram[32] = "0b10111100100001011001101001110100";
        ram[33] = "0b00111110000011001110100101100000";
        ram[34] = "0b00111101000000011011010001101011";
        ram[35] = "0b10111100111010111110000000100011";
        ram[36] = "0b10111100001111000101101000100011";
        ram[37] = "0b10111100101100010010011001111110";
        ram[38] = "0b00111110001000100111011010111000";
        ram[39] = "0b10111011111100010011111100110010";
        ram[40] = "0b10111101100001101101111001110110";
        ram[41] = "0b10111100111100110111000110110010";
        ram[42] = "0b10111100111111101100001001111110";
        ram[43] = "0b00111110001101000000101001101100";
        ram[44] = "0b00111110001101011110111100100000";
        ram[45] = "0b10111101011101000011110011001110";
        ram[46] = "0b10111100111111011101000011100110";
        ram[47] = "0b10111101001110011000100001001100";
        ram[48] = "0b00111100110010001100011011100011";
        ram[49] = "0b10111101011010011010100101000111";
        ram[50] = "0b10111100001100101011001011011011";
        ram[51] = "0b10111011000111000010101111110000";
        ram[52] = "0b10111110001111100101100101101101";
        ram[53] = "0b10111101001001010110100000111010";
        ram[54] = "0b00111101100001011010101111110111";
        ram[55] = "0b10111101100101011110000110011001";
        ram[56] = "0b10111100100110101100011111001101";
        ram[57] = "0b10111101111100100101001001001000";
        ram[58] = "0b10111101110100110010111110001000";
        ram[59] = "0b10111101001101110001101101010101";
        ram[60] = "0b00111100110110001110010101110100";
        ram[61] = "0b10111100111000111110110101111011";
        ram[62] = "0b10111110000000010101111110001001";
        ram[63] = "0b00111101100011011011000111101010";
        ram[64] = "0b10111110000111011100001101111010";
        ram[65] = "0b10111101011000000000011111111000";
        ram[66] = "0b00111101110011110100000001011111";
        ram[67] = "0b00111101011010111111001100011110";
        ram[68] = "0b00111101111000101110111001000010";
        ram[69] = "0b00111101101001001010100001001001";
        ram[70] = "0b10111101100001111100111100000001";
        ram[71] = "0b10111101010001001011100100000010";
        ram[72] = "0b10111101000101110000100000001010";
        ram[73] = "0b10111110001111111110111011110110";
        ram[74] = "0b00111110001100100000000111001101";
        ram[75] = "0b10111110001001010101101011000000";
        ram[76] = "0b10111100111111110111110110001111";
        ram[77] = "0b00111011101010100011000011010110";
        ram[78] = "0b00111100000010011101001101001000";
        ram[79] = "0b10111101100011100100111110111001";
        ram[80] = "0b00111101100111110101100101010100";
        ram[81] = "0b00111101111101100110010100010111";
        ram[82] = "0b10111101100100110011001100001011";
        ram[83] = "0b10111110001111010100100010001000";
        ram[84] = "0b00111101101011011100100111101101";
        ram[85] = "0b00111100101010011100011101111010";
        ram[86] = "0b00111100100111100000010001100010";
        ram[87] = "0b10111110001100100101011000110110";
        ram[88] = "0b00111101011010010110111010001110";
        ram[89] = "0b00111100111101011011010110001111";
        ram[90] = "0b00111110001010100111001100101110";
        ram[91] = "0b00111110000111110011101110100111";
        ram[92] = "0b10111100101111010101001110110011";
        ram[93] = "0b00111010110001111100010101010001";
        ram[94] = "0b00111101101001011001101000100011";
        ram[95] = "0b10111101110010110000011101001010";
        ram[96] = "0b00111101011111000000101010001101";
        ram[97] = "0b00111100100010111000010100111010";
        ram[98] = "0b00111101001000010100000101001001";
        ram[99] = "0b00111101101010001110101001101111";
        ram[100] = "0b00111001001101001100011101011001";
        ram[101] = "0b10111110010101010101001000011010";
        ram[102] = "0b00111100101010111101011110001010";
        ram[103] = "0b00111101011111000111110000011101";
        ram[104] = "0b10111101000001101010000000010010";
        ram[105] = "0b10111101101100110110000000000111";
        ram[106] = "0b00111110000010110110001101001110";
        ram[107] = "0b00111101000001011010001001101100";
        ram[108] = "0b10111110000110110111100111011001";
        ram[109] = "0b10111101011110110001110000011011";
        ram[110] = "0b00111110001111110110000101100111";
        ram[111] = "0b10111101010110001001101100011100";
        ram[112] = "0b10111101011011110011101001100101";
        ram[113] = "0b10111100001101010110100101101110";
        ram[114] = "0b00111100111011100010111001000110";
        ram[115] = "0b00111101101011010011001111101101";
        ram[116] = "0b10111100111010000010101011000001";
        ram[117] = "0b10111101100101110000111010001010";
        ram[118] = "0b10111101011101010111010000000110";
        ram[119] = "0b10111101000011001101000101101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_5) {
meminst = new inference_conv2d_f3_2_1_5_ram("inference_conv2d_f3_2_1_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_5() {
    delete meminst;
}


};//endmodule
#endif
