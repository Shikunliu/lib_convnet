// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_10_H__
#define __inference_conv2d_f3_1_0_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_10_ram) {
        ram[0] = "0b00111101101010010011001011001010";
        ram[1] = "0b10111101100100010100101100111111";
        ram[2] = "0b10111100000100111000100100111111";
        ram[3] = "0b00111110000010011010001100001010";
        ram[4] = "0b00111101011100011000111000110010";
        ram[5] = "0b00111101111010011000000100111000";
        ram[6] = "0b00111011111011101101101001101001";
        ram[7] = "0b10111101110101000110110111000110";
        ram[8] = "0b10111101100000011100001011110001";
        ram[9] = "0b00111101111000111100001100011110";
        ram[10] = "0b10111101101000000010001100111011";
        ram[11] = "0b00111110000010110110100101010101";
        ram[12] = "0b00111110001001010001100101111010";
        ram[13] = "0b00111110001101000110011100111000";
        ram[14] = "0b10111110001000011110110001001110";
        ram[15] = "0b00111100011000111101001010100011";
        ram[16] = "0b10111100010101011110110101110010";
        ram[17] = "0b00111101001101011001011100100110";
        ram[18] = "0b00111101010000010100110011010001";
        ram[19] = "0b10111110000010011101111111011011";
        ram[20] = "0b10111100001100111101000110111111";
        ram[21] = "0b00111100101000100100011101010011";
        ram[22] = "0b10111101101111010111010010101101";
        ram[23] = "0b00111110001111111110111100111001";
        ram[24] = "0b00111101110100111100010101111010";
        ram[25] = "0b10111101101001010111001111011101";
        ram[26] = "0b00111101000000101101110000000011";
        ram[27] = "0b10111101111010000000011100110101";
        ram[28] = "0b00111100111011100111010111111111";
        ram[29] = "0b10111101100100000011010100011100";
        ram[30] = "0b10111101100000011001001110011001";
        ram[31] = "0b10111110000001111011000100111010";
        ram[32] = "0b10111100001111110100111001011111";
        ram[33] = "0b10111101110111001011101111000011";
        ram[34] = "0b00111100110110110001011000000110";
        ram[35] = "0b00111010010000001000000000011111";
        ram[36] = "0b10111101101011011110100000010011";
        ram[37] = "0b00111110010000010100101001001101";
        ram[38] = "0b10111101011010000111000011001101";
        ram[39] = "0b10111011100001011010001011000010";
        ram[40] = "0b00111110001001000100110000111000";
        ram[41] = "0b00111101101111001100010010011111";
        ram[42] = "0b00111101000101100111110011001001";
        ram[43] = "0b10111101100101000001000000100011";
        ram[44] = "0b00111101110001011101111000001000";
        ram[45] = "0b00111110010001011011000010111100";
        ram[46] = "0b10111011001100000001100001100001";
        ram[47] = "0b00111101011010101010111011001011";
        ram[48] = "0b10111101110111111010100001110010";
        ram[49] = "0b00111101100011100000010010110011";
        ram[50] = "0b10111110000001110010001010011111";
        ram[51] = "0b10111100000111100100001100101100";
        ram[52] = "0b00111101001111010011101011011001";
        ram[53] = "0b10111101111101011111010111110001";
        ram[54] = "0b10111101101011110110001011000100";
        ram[55] = "0b00111100101111000011000001101000";
        ram[56] = "0b00111011111100101010010100100100";
        ram[57] = "0b10111110000100000111101101111000";
        ram[58] = "0b10111101111011101001010111111011";
        ram[59] = "0b00111101001000010100001101100001";
        ram[60] = "0b10111101100101110110100010101010";
        ram[61] = "0b10111100010110101000111001010110";
        ram[62] = "0b00111101111111011001011011101010";
        ram[63] = "0b00111101101011111100101011010110";
        ram[64] = "0b10111101011100111010101001101100";
        ram[65] = "0b10111101001000001100010110001101";
        ram[66] = "0b00111101000001111110100011001101";
        ram[67] = "0b00111101100011001001111010000001";
        ram[68] = "0b00111110000111011101101110011000";
        ram[69] = "0b00111100010110111000111111011110";
        ram[70] = "0b10111101110010010000111111111001";
        ram[71] = "0b10111101100010111010011111010100";
        ram[72] = "0b00111101001000110101011110111110";
        ram[73] = "0b00111101000101010000010100010101";
        ram[74] = "0b00111110001100011011010010111011";
        ram[75] = "0b00111001001011001101011111010100";
        ram[76] = "0b10111110000111110001110111000101";
        ram[77] = "0b00111101110010001100101111011111";
        ram[78] = "0b10111010100111001000000101010110";
        ram[79] = "0b10111110000001101010101101011000";
        ram[80] = "0b10111110001011000010100001110000";
        ram[81] = "0b00111100001000100110000010001000";
        ram[82] = "0b10111110011100111110011101001011";
        ram[83] = "0b00111101100100011101111111010100";
        ram[84] = "0b10111100100001111111110011101111";
        ram[85] = "0b00111100100101111001001110011010";
        ram[86] = "0b00111101001100111101011101101000";
        ram[87] = "0b00111101011000111101000011011010";
        ram[88] = "0b10111101101111000010101001111011";
        ram[89] = "0b00111110001011010101011011110011";
        ram[90] = "0b10111010011111011001010100111001";
        ram[91] = "0b10111110010110001010110111101111";
        ram[92] = "0b10111101101101011000001001111110";
        ram[93] = "0b00111100101010010010111100111001";
        ram[94] = "0b00111101100000010100000011011101";
        ram[95] = "0b10111110010011101011010010100110";
        ram[96] = "0b00111100101101000000101000101000";
        ram[97] = "0b00111100100100111010000011000111";
        ram[98] = "0b00111110001000010011100000110111";
        ram[99] = "0b00111101101001010000100011000001";
        ram[100] = "0b10111011000110110110101110101100";
        ram[101] = "0b10111100010011100110000100100010";
        ram[102] = "0b00111101101010000101011101010010";
        ram[103] = "0b00111011110000011111110011111011";
        ram[104] = "0b00111101011001110111100100100000";
        ram[105] = "0b10111101110011000100100101000010";
        ram[106] = "0b00111110001000101000011000101111";
        ram[107] = "0b10111101011110010001111010110101";
        ram[108] = "0b00111101100010111100001001001110";
        ram[109] = "0b10111101110110111111101101011001";
        ram[110] = "0b10111100010001110111110101101101";
        ram[111] = "0b00111101100000011100110101101101";
        ram[112] = "0b00111101001001000110011110001001";
        ram[113] = "0b00111110000100101101111100001101";
        ram[114] = "0b00111101010110100100011000010111";
        ram[115] = "0b00111110001000001100110000110110";
        ram[116] = "0b00111100101100000100100010011101";
        ram[117] = "0b00111101010010001101010100100110";
        ram[118] = "0b10111011010111000111011100001111";
        ram[119] = "0b00111101110101101100011110101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_10) {
meminst = new inference_conv2d_f3_1_0_10_ram("inference_conv2d_f3_1_0_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_10() {
    delete meminst;
}


};//endmodule
#endif
