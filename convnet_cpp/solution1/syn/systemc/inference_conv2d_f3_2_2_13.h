// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_13_H__
#define __inference_conv2d_f3_2_2_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_13_ram) {
        ram[0] = "0b00111010100000001001001010000100";
        ram[1] = "0b00111110010100101000110110000110";
        ram[2] = "0b10111101010001101001000101001001";
        ram[3] = "0b10111101011110000011100001110001";
        ram[4] = "0b00111101100000001110010011001101";
        ram[5] = "0b10111101100101110111000101111001";
        ram[6] = "0b10111011010111111001011000101000";
        ram[7] = "0b00111101111000010110100111000010";
        ram[8] = "0b10111101010110100010100000110101";
        ram[9] = "0b00111101000000100010100000010011";
        ram[10] = "0b00111101000000001011111010111100";
        ram[11] = "0b00111101000101010100111110111110";
        ram[12] = "0b10111101000000101100010000000000";
        ram[13] = "0b10111101100101011110111011101010";
        ram[14] = "0b00111101011100011001010001100010";
        ram[15] = "0b10111101110110001001011010011010";
        ram[16] = "0b00111101101101111000110011001010";
        ram[17] = "0b10111101010001110001011011100000";
        ram[18] = "0b00111101010111111111000000101011";
        ram[19] = "0b00111011100110000111101010100000";
        ram[20] = "0b00111100000011010100001110001010";
        ram[21] = "0b10111101111001100101111100001111";
        ram[22] = "0b10111101101000000100001110111101";
        ram[23] = "0b00111101101000010000111100101001";
        ram[24] = "0b10111101001011001111001101100011";
        ram[25] = "0b00111101110011110110001011111010";
        ram[26] = "0b10111101011111010011110001010001";
        ram[27] = "0b00111101100101101110010011101001";
        ram[28] = "0b00111101100100111101000110100100";
        ram[29] = "0b10111010101101110111011101111011";
        ram[30] = "0b00111100000101011111001000001111";
        ram[31] = "0b10111101101001001010001000110100";
        ram[32] = "0b10111101000011011000111011111111";
        ram[33] = "0b10111101110101011110110100000111";
        ram[34] = "0b00111101000110000011001110111001";
        ram[35] = "0b10111101100101011011110001111010";
        ram[36] = "0b00111101111011001011000110001001";
        ram[37] = "0b10111110010000101111010101010110";
        ram[38] = "0b00111101000001010011111010011001";
        ram[39] = "0b00111011111110010000101000011000";
        ram[40] = "0b00111101010101010111001111101011";
        ram[41] = "0b00111101010110000100001011101101";
        ram[42] = "0b00111110000110010111110100000111";
        ram[43] = "0b00111100111011010110110000010100";
        ram[44] = "0b10111100000101100011000000100011";
        ram[45] = "0b10111100100101110111100001010111";
        ram[46] = "0b10111101001110001101111010100100";
        ram[47] = "0b10111110001101011000101011111100";
        ram[48] = "0b10111110010000111100100111101111";
        ram[49] = "0b00111101100100101111011011001101";
        ram[50] = "0b10111101111001110110010010101110";
        ram[51] = "0b10111100111001100101111001101110";
        ram[52] = "0b10111110001001011001101000110001";
        ram[53] = "0b10111110001111000101101011000100";
        ram[54] = "0b10111110001100110100001011101110";
        ram[55] = "0b00111011010010111011011101001110";
        ram[56] = "0b00111110000010011100111011010001";
        ram[57] = "0b00111100111111010101110011101101";
        ram[58] = "0b10111011110011011000111111000000";
        ram[59] = "0b00111101101100001000101011111101";
        ram[60] = "0b00111101110011010010111101011110";
        ram[61] = "0b10111101110000100001111011011001";
        ram[62] = "0b00111110000011110101111111010100";
        ram[63] = "0b00111110000101110011011010001011";
        ram[64] = "0b00111101101101000011001100110110";
        ram[65] = "0b00111110001011100101111000100100";
        ram[66] = "0b00111101100101010011100001110110";
        ram[67] = "0b10111110000011011101110001100010";
        ram[68] = "0b00111100110010100110000011100010";
        ram[69] = "0b10111100110111110111011100101001";
        ram[70] = "0b10111011111101000101000111110111";
        ram[71] = "0b00111011110010111011110001010111";
        ram[72] = "0b00111101110110101110000011000001";
        ram[73] = "0b10111100110101101111011010111101";
        ram[74] = "0b00111101101101011011001111100001";
        ram[75] = "0b10111101101010101101011011100110";
        ram[76] = "0b00111101101010011111011011010010";
        ram[77] = "0b00111110010010111101001100111101";
        ram[78] = "0b00111110001011110101111011001000";
        ram[79] = "0b00111110000010001100100000100110";
        ram[80] = "0b10111100101111010110111001010101";
        ram[81] = "0b10111010110101101101010100001110";
        ram[82] = "0b00111110000011001001111110110110";
        ram[83] = "0b10111100110011101011000001100111";
        ram[84] = "0b10111101000000001011001101101001";
        ram[85] = "0b10111110000100101000000111111110";
        ram[86] = "0b00111101001111101000000111001011";
        ram[87] = "0b00111101010101000010010010010101";
        ram[88] = "0b10111110000011110011110011110111";
        ram[89] = "0b10111101100110101101000010001110";
        ram[90] = "0b10111110000011010011001101001100";
        ram[91] = "0b00111101101010000101111111101011";
        ram[92] = "0b10111101110101010000110010100010";
        ram[93] = "0b00111011000010111110010111010010";
        ram[94] = "0b10111101100100111000110110010110";
        ram[95] = "0b00111101110100111111110100001101";
        ram[96] = "0b10111101011001110000000001110000";
        ram[97] = "0b00111101001111101001010011000110";
        ram[98] = "0b00111100101110101011101000010000";
        ram[99] = "0b00111101000011111111000111001011";
        ram[100] = "0b00111110000011100000000001001011";
        ram[101] = "0b00111100110100000011000011010000";
        ram[102] = "0b10111100101000110000110110110111";
        ram[103] = "0b10111100110010111000111110110110";
        ram[104] = "0b00111101110111110100110110111110";
        ram[105] = "0b00111101110001110000111100011110";
        ram[106] = "0b10111100100110100110111011100001";
        ram[107] = "0b00111110000011110110000001011011";
        ram[108] = "0b00111100111101110100000111101011";
        ram[109] = "0b00111100001011100100110010101111";
        ram[110] = "0b00111100110100010100000110100111";
        ram[111] = "0b00111101110111001100100111101011";
        ram[112] = "0b00111110000010100001101010010011";
        ram[113] = "0b00111101001001010000011010110101";
        ram[114] = "0b10111100100100000000010011000101";
        ram[115] = "0b10111110000110110000111011100101";
        ram[116] = "0b00111101000100011010011111111110";
        ram[117] = "0b10111110000000110010110101101111";
        ram[118] = "0b00111101111111001000100001100001";
        ram[119] = "0b10111101100000010100000100010011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_13) {
meminst = new inference_conv2d_f3_2_2_13_ram("inference_conv2d_f3_2_2_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_13() {
    delete meminst;
}


};//endmodule
#endif
