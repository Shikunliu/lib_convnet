// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_23_H__
#define __inference_mult_1_120_120_84_s_W4_23_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_23_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_23_ram) {
        ram[0] = "0b10111101001100100010110000011101";
        ram[1] = "0b00111101110000010100101001011011";
        ram[2] = "0b10111101100000101011011101000010";
        ram[3] = "0b10111011110100101111100011100001";
        ram[4] = "0b00111011111010101101000100000100";
        ram[5] = "0b00111100111001001001111110000111";
        ram[6] = "0b10111101001010100110111100100100";
        ram[7] = "0b10111101010101100000011100100011";
        ram[8] = "0b10111101001110111010010110101110";
        ram[9] = "0b00111110000001010100100010101010";
        ram[10] = "0b10111101010111101111011111000010";
        ram[11] = "0b10111101100101110100100110111011";
        ram[12] = "0b00111110001010000100000010011110";
        ram[13] = "0b10111100101000001011001101101001";
        ram[14] = "0b00111110000111101111001111010100";
        ram[15] = "0b10111101100101101110001110011010";
        ram[16] = "0b10111100111111110011111111100111";
        ram[17] = "0b10111100100000000101110101010011";
        ram[18] = "0b00111100101101010101000001000100";
        ram[19] = "0b00111110001001001011100010111111";
        ram[20] = "0b10111110000110101000110100100010";
        ram[21] = "0b10111110010100011010001100101011";
        ram[22] = "0b10111110001110101011000101001111";
        ram[23] = "0b10111011011001111110010110000010";
        ram[24] = "0b00111101000000100101101111111011";
        ram[25] = "0b10111110000101111010101010101100";
        ram[26] = "0b10111100001011110100100011000011";
        ram[27] = "0b10111101001111000111110000011101";
        ram[28] = "0b10111110100011011111010111001111";
        ram[29] = "0b00111100111110101101101000100110";
        ram[30] = "0b00111101001011011000101110100100";
        ram[31] = "0b10111101100111001100100111000010";
        ram[32] = "0b00111110000010010111110011000100";
        ram[33] = "0b10111101100111111111111100000001";
        ram[34] = "0b00111101101110011011001100010101";
        ram[35] = "0b10111100010111010100001100111101";
        ram[36] = "0b10111101011001000011010011111110";
        ram[37] = "0b00111101001011011100000100000011";
        ram[38] = "0b10111101111000110011011000010101";
        ram[39] = "0b10111110010100111111100010011000";
        ram[40] = "0b10111101000110010001001110011000";
        ram[41] = "0b10111011011111001110111011111110";
        ram[42] = "0b10111101000011101011110110111000";
        ram[43] = "0b10111101010110011011111011101110";
        ram[44] = "0b00111101010000101100110110001010";
        ram[45] = "0b00111101100011011001011110001011";
        ram[46] = "0b00111100101101000011100110001110";
        ram[47] = "0b00111101010011111001100111010001";
        ram[48] = "0b10111101000010101111100010011100";
        ram[49] = "0b10111101110100110101010011000001";
        ram[50] = "0b10111101100011110011111111011001";
        ram[51] = "0b00111101110111111010010011000110";
        ram[52] = "0b00111101100100011110000110101010";
        ram[53] = "0b10111100100100111010011100010001";
        ram[54] = "0b10111100100111110011110000111011";
        ram[55] = "0b00111101111001101011101101010110";
        ram[56] = "0b00111101001000011100000110111100";
        ram[57] = "0b10111110000111100101111000100100";
        ram[58] = "0b10111010111011110001000111110001";
        ram[59] = "0b00111101110010010101001000100100";
        ram[60] = "0b10111100110001001101010100011100";
        ram[61] = "0b00111101110110001001000101011100";
        ram[62] = "0b10111110000010010101011111001101";
        ram[63] = "0b00111110011001110011010011111000";
        ram[64] = "0b00111101101110110111001110011100";
        ram[65] = "0b10111101011111100000100000101001";
        ram[66] = "0b00111101011111100110101110101011";
        ram[67] = "0b00111100110010010110110101100111";
        ram[68] = "0b00111100010010001010000000010111";
        ram[69] = "0b10111100101001101011111011100110";
        ram[70] = "0b10111110010001000011100001001100";
        ram[71] = "0b10111101101011000111000100101000";
        ram[72] = "0b00111110000001001101010011001100";
        ram[73] = "0b10111100111110000101000101001010";
        ram[74] = "0b00111110001000011001010000111010";
        ram[75] = "0b00111101011011111011000001110111";
        ram[76] = "0b00111101100101010000110101111001";
        ram[77] = "0b10111101101000111000011011000110";
        ram[78] = "0b00111110000110111100110001101100";
        ram[79] = "0b10111101010010101000111100100000";
        ram[80] = "0b10111110001111000111001110101100";
        ram[81] = "0b10111100011110010111111000000110";
        ram[82] = "0b10111100110010101010111101010001";
        ram[83] = "0b00111011100010101111011010111111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_23) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_23_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_23) {
meminst = new inference_mult_1_120_120_84_s_W4_23_ram("inference_mult_1_120_120_84_s_W4_23_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_23() {
    delete meminst;
}


};//endmodule
#endif
