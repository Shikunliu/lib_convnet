// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_13_H__
#define __inference_conv2d_f3_2_1_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_13_ram) {
        ram[0] = "0b00111011100000101111010101101000";
        ram[1] = "0b00111100011111110010111100100000";
        ram[2] = "0b00111101101111111101000111000010";
        ram[3] = "0b10111101000001000110101011100100";
        ram[4] = "0b10111101010111000000111000011110";
        ram[5] = "0b00111101000110111110111111101011";
        ram[6] = "0b00111100111111011001010111111000";
        ram[7] = "0b10111101111101101010101111011110";
        ram[8] = "0b00111101101100010001010111010010";
        ram[9] = "0b10111100111100011111000101111111";
        ram[10] = "0b10111101010110010010110011011101";
        ram[11] = "0b10111100100010100100010001011100";
        ram[12] = "0b10111101111001101110110000011000";
        ram[13] = "0b10111001110001001101111111010101";
        ram[14] = "0b00111101011011110111011000101010";
        ram[15] = "0b10111001010110100111010110010011";
        ram[16] = "0b00111101000011100011101011000001";
        ram[17] = "0b00111101000100110010010110010010";
        ram[18] = "0b10111101000111001011010100101000";
        ram[19] = "0b00111110000000010010101011011000";
        ram[20] = "0b00111101101001000011010010100000";
        ram[21] = "0b00111100110010110110110100011100";
        ram[22] = "0b00111101010110101110110101010111";
        ram[23] = "0b00111101001010111100101000111001";
        ram[24] = "0b00111100111010100011010111001001";
        ram[25] = "0b10111100011011100011100100101110";
        ram[26] = "0b00111101101000010000110011000000";
        ram[27] = "0b00111100001100001110101111000110";
        ram[28] = "0b10111110000010000000000101110001";
        ram[29] = "0b00111110000000101010000110110110";
        ram[30] = "0b10111101111011101101001101010010";
        ram[31] = "0b00111101011001110101110100100001";
        ram[32] = "0b10111110000010111101011101101111";
        ram[33] = "0b00111011100111101001010110000010";
        ram[34] = "0b00111101110011111111110100011110";
        ram[35] = "0b00111011110011100001101111010111";
        ram[36] = "0b10111101000110111000110001001110";
        ram[37] = "0b00111101001011100110011110111101";
        ram[38] = "0b10111100111111000000011001110110";
        ram[39] = "0b10111100000110000011101111100001";
        ram[40] = "0b10111011011110100100110000110111";
        ram[41] = "0b00111100011101011111101001011000";
        ram[42] = "0b00111101101000111010110101011100";
        ram[43] = "0b00111101000011111001000100011101";
        ram[44] = "0b00111100101011000011100110101111";
        ram[45] = "0b10111110000001101110001001100101";
        ram[46] = "0b10111011000110101111110001000101";
        ram[47] = "0b10111011101101110011010110110111";
        ram[48] = "0b00111011111011100000001100111110";
        ram[49] = "0b00111011001111010111101111001100";
        ram[50] = "0b00111100101000100111101110001011";
        ram[51] = "0b10111100011010011011010001100100";
        ram[52] = "0b00111101010010000100000101001101";
        ram[53] = "0b10111110001110100101010000111111";
        ram[54] = "0b10111011101010011110100100110011";
        ram[55] = "0b00111101110101010010110110101010";
        ram[56] = "0b00111011110110110111111100010111";
        ram[57] = "0b00111110001100110110000001001010";
        ram[58] = "0b00111101001001100011100101010000";
        ram[59] = "0b00111100011011110101101111011000";
        ram[60] = "0b10111110001101000011110011000000";
        ram[61] = "0b10111100110111000010101111100101";
        ram[62] = "0b00111100100110101110001101111011";
        ram[63] = "0b00111101110001001001000000000010";
        ram[64] = "0b10111101101111111100010001001001";
        ram[65] = "0b00111101001011000011011100010000";
        ram[66] = "0b00111100100101100001111100100110";
        ram[67] = "0b10111101001101011000100011001001";
        ram[68] = "0b00111110000100011010011111100011";
        ram[69] = "0b10111101100100001010101000101111";
        ram[70] = "0b00111110001000111111110101010000";
        ram[71] = "0b00111101011000100110100010010000";
        ram[72] = "0b00111101111010101011010110000000";
        ram[73] = "0b10111101101010110101011001000000";
        ram[74] = "0b10111101110010111001100101101001";
        ram[75] = "0b00111011110111010100110110100011";
        ram[76] = "0b00111100110111010110010001011111";
        ram[77] = "0b00111101110010100000000111111100";
        ram[78] = "0b00111110001100000101101001110001";
        ram[79] = "0b10111101011010010100000100001100";
        ram[80] = "0b10111101000111000111100001110001";
        ram[81] = "0b00111110001000011110011111011010";
        ram[82] = "0b10111101011000101011011001011110";
        ram[83] = "0b00111101111011001000101000110111";
        ram[84] = "0b10111101110010111101000101011010";
        ram[85] = "0b00111101101111110110100000101011";
        ram[86] = "0b00111110010100101100110001110001";
        ram[87] = "0b00111010000001010101110100011001";
        ram[88] = "0b00111110000110000000011101111001";
        ram[89] = "0b00111100001001000111101010011110";
        ram[90] = "0b00111101011111010100000100001001";
        ram[91] = "0b00111101010000111110000101010001";
        ram[92] = "0b10111101000111101011101101011100";
        ram[93] = "0b00111110000100110000010100010000";
        ram[94] = "0b10111110000000110101110001011011";
        ram[95] = "0b00111101011110001010001010001110";
        ram[96] = "0b10111110001100110110010000111001";
        ram[97] = "0b10111101111110100011010011001010";
        ram[98] = "0b10111101000010011000101100010100";
        ram[99] = "0b10111101100010010101111001000000";
        ram[100] = "0b10111101010001101000000111011111";
        ram[101] = "0b00111100000011100000101110100111";
        ram[102] = "0b00111101111010011101011100110100";
        ram[103] = "0b10111101101001110011001011000100";
        ram[104] = "0b00111001011101001111111111110010";
        ram[105] = "0b10111110000011111001000001010100";
        ram[106] = "0b00111101010101110101011010101110";
        ram[107] = "0b10111101000110111001000111110111";
        ram[108] = "0b00111101001100110001000110100101";
        ram[109] = "0b00111110010100010110000010010101";
        ram[110] = "0b00111100110010111011000011011000";
        ram[111] = "0b00111110000010101000010110001000";
        ram[112] = "0b00111100100011001010001000111010";
        ram[113] = "0b10111100111111101010110001000011";
        ram[114] = "0b10111010000101001000111010000111";
        ram[115] = "0b00111101110101100111010001001011";
        ram[116] = "0b10111101111000110101100010110000";
        ram[117] = "0b10111100101000101011110100101111";
        ram[118] = "0b10111101101011010111011101110101";
        ram[119] = "0b10111101100011001001111011111010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_13) {
meminst = new inference_conv2d_f3_2_1_13_ram("inference_conv2d_f3_2_1_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_13() {
    delete meminst;
}


};//endmodule
#endif
