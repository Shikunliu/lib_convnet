// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_8_H__
#define __inference_conv2d_f3_0_1_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_8_ram) {
        ram[0] = "0b00111101011000111001010011000101";
        ram[1] = "0b00111100101101110010000110100000";
        ram[2] = "0b00111101010010100110100100010000";
        ram[3] = "0b10111101111010111000010010011001";
        ram[4] = "0b10111101100011000101100000001011";
        ram[5] = "0b10111110011011110000001000111111";
        ram[6] = "0b10111100100011110100000101010001";
        ram[7] = "0b10111110010011101100111000010100";
        ram[8] = "0b00111101011100111010100100101010";
        ram[9] = "0b10111110010111010010000001101101";
        ram[10] = "0b10111101000110110101000110010101";
        ram[11] = "0b00111110010001000001001100010010";
        ram[12] = "0b10111101001001000101101111001010";
        ram[13] = "0b10111101100110101000101111000101";
        ram[14] = "0b00111101111011011101001001101011";
        ram[15] = "0b00111101100101001110110101010101";
        ram[16] = "0b00111101100000010100111110100110";
        ram[17] = "0b00111101101000111111111111100010";
        ram[18] = "0b10111101110100101101101110100101";
        ram[19] = "0b10111101101001010011100100100101";
        ram[20] = "0b10111101100110001011111001100101";
        ram[21] = "0b10111101010101110000110011011101";
        ram[22] = "0b10111101101000010111100101101111";
        ram[23] = "0b00111101011101111001000110110111";
        ram[24] = "0b10111110000011011000000101101011";
        ram[25] = "0b10111110000000110110001100101100";
        ram[26] = "0b00111100000001101011111110011000";
        ram[27] = "0b10111011100101111001010111011110";
        ram[28] = "0b10111100111000011011101111011101";
        ram[29] = "0b00111101100110010001011011100101";
        ram[30] = "0b00111011111010001000011000010001";
        ram[31] = "0b00111101001110100101001100110011";
        ram[32] = "0b00111101101111011011000001010111";
        ram[33] = "0b10111101111010011001001110010010";
        ram[34] = "0b00111110000000010101000101100001";
        ram[35] = "0b10111101110100101101010001001110";
        ram[36] = "0b00111100101011000000100101110011";
        ram[37] = "0b00111101111000000110000011111110";
        ram[38] = "0b00111100100000101110100100011110";
        ram[39] = "0b00111110010011101110010110101100";
        ram[40] = "0b00111101100000011011011110011110";
        ram[41] = "0b00111100110101111000111100110011";
        ram[42] = "0b00111101000011010001000011011010";
        ram[43] = "0b10111110011000111001110110100001";
        ram[44] = "0b10111101111100011110111100110001";
        ram[45] = "0b00111101100000111101100111101100";
        ram[46] = "0b00111101110001000001011000001111";
        ram[47] = "0b00111110010000000001001110101001";
        ram[48] = "0b00111101110001110000010011010111";
        ram[49] = "0b00111101111010001001010101001010";
        ram[50] = "0b00111101100001110011101000101001";
        ram[51] = "0b10111110001001000101001010000011";
        ram[52] = "0b00111011101001011001010101111011";
        ram[53] = "0b10111101110110111101011100101100";
        ram[54] = "0b10111101110110100110110101101010";
        ram[55] = "0b00111101100110101101000011010001";
        ram[56] = "0b10111101001011111110010010010100";
        ram[57] = "0b00111101101001101110101000110101";
        ram[58] = "0b00111101001011011100010110100001";
        ram[59] = "0b00111100100000100001000110111110";
        ram[60] = "0b00111101100101100100011111010110";
        ram[61] = "0b10111101110100101001110000110100";
        ram[62] = "0b10111110000000000010101111000111";
        ram[63] = "0b00111100001111111111010101001110";
        ram[64] = "0b10111100000011111000001110001011";
        ram[65] = "0b00111101101011110000011100000100";
        ram[66] = "0b00111100110011000111011100000111";
        ram[67] = "0b10111100101000000001010111101010";
        ram[68] = "0b10111110100101100010010011011101";
        ram[69] = "0b10111110000101000000001100010101";
        ram[70] = "0b00111101101011010101001000100000";
        ram[71] = "0b10111110010001010110001110101010";
        ram[72] = "0b10111110000011010110101010011100";
        ram[73] = "0b10111101010111100101100111011000";
        ram[74] = "0b10111101100000010111000001111000";
        ram[75] = "0b00111100010101011000110111010001";
        ram[76] = "0b00111101100000010100110100111101";
        ram[77] = "0b10111101011111101100110111101100";
        ram[78] = "0b10111101100011100100111011100011";
        ram[79] = "0b10111101101001100010000000110011";
        ram[80] = "0b10111100111010000110000111101001";
        ram[81] = "0b00111100110101011110000010100111";
        ram[82] = "0b00111101010000111011101000011001";
        ram[83] = "0b00111110010101110000110010011001";
        ram[84] = "0b00111101101111101001001110000100";
        ram[85] = "0b10111011000000111000010001011001";
        ram[86] = "0b00111011001101011110000111001111";
        ram[87] = "0b10111110001001100101000100101011";
        ram[88] = "0b00111101110010111111110101001001";
        ram[89] = "0b10111100011000111101010111111110";
        ram[90] = "0b10111011000000111110110010001001";
        ram[91] = "0b10111101000001011101010111101000";
        ram[92] = "0b10111101101101001000001111001011";
        ram[93] = "0b10111101001101110001011011101110";
        ram[94] = "0b10111101001111101010110001000011";
        ram[95] = "0b10111110011100001011101100101100";
        ram[96] = "0b10111101100001111011110111110111";
        ram[97] = "0b10111101011010001100100001011011";
        ram[98] = "0b00111101100000111111110100000000";
        ram[99] = "0b10111011001000010010000110100011";
        ram[100] = "0b00111100110010011100100000110110";
        ram[101] = "0b00111101101101011011111101001111";
        ram[102] = "0b10111101101101100101100010101010";
        ram[103] = "0b10111101011001101010011111010101";
        ram[104] = "0b10111100110010110011101011000111";
        ram[105] = "0b00111110000011101001000101000011";
        ram[106] = "0b00111101000001100011000011010001";
        ram[107] = "0b10111110001110001010011111100111";
        ram[108] = "0b00111101000001100011100110111011";
        ram[109] = "0b00111101111011101011101010101110";
        ram[110] = "0b10111101101111000101111110110010";
        ram[111] = "0b00111100101000100101110100100010";
        ram[112] = "0b10111100000111000110100001000001";
        ram[113] = "0b00111101101100001111011111000111";
        ram[114] = "0b00111100100010000110110000010101";
        ram[115] = "0b10111101101101100101111001010011";
        ram[116] = "0b00111110000000000010110101011010";
        ram[117] = "0b00111101100001001001100111101011";
        ram[118] = "0b00111101110101101111100011110000";
        ram[119] = "0b10111100101101011101100010010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_8) {
meminst = new inference_conv2d_f3_0_1_8_ram("inference_conv2d_f3_0_1_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_8() {
    delete meminst;
}


};//endmodule
#endif
