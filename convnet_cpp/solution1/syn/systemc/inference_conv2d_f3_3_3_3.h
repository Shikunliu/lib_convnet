// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_3_H__
#define __inference_conv2d_f3_3_3_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_3_ram) {
        ram[0] = "0b10111101001111000101111101000111";
        ram[1] = "0b00111101000101001101001111001101";
        ram[2] = "0b10111110001001000100000110111100";
        ram[3] = "0b00111101101100011011010010000110";
        ram[4] = "0b00111101101010101011110101010000";
        ram[5] = "0b10111110001001111110010001011000";
        ram[6] = "0b10111101100101101101110110000101";
        ram[7] = "0b00111101000110110111110101101010";
        ram[8] = "0b10111101101111110100001010100001";
        ram[9] = "0b00111100001100001111110000100001";
        ram[10] = "0b00111011101001011111010110110011";
        ram[11] = "0b10111011010101000001101110100001";
        ram[12] = "0b10111101001000000001111011101111";
        ram[13] = "0b10111011110001101111000001010100";
        ram[14] = "0b00111101101100001011011011010010";
        ram[15] = "0b10111101101000101000101010010111";
        ram[16] = "0b00111110010000101100011101110101";
        ram[17] = "0b00111101001010011000010100011010";
        ram[18] = "0b10111101011111000010101101011111";
        ram[19] = "0b10111100100110110101000111001011";
        ram[20] = "0b00111101111010000001001010111110";
        ram[21] = "0b00111101000111101011111000110001";
        ram[22] = "0b00111100100101100000110011100111";
        ram[23] = "0b10111110000000101100110011110111";
        ram[24] = "0b10111101111100101110101001010011";
        ram[25] = "0b00111011110011111001011111000011";
        ram[26] = "0b00111100100001101110001110110100";
        ram[27] = "0b00111101100010111000111100111101";
        ram[28] = "0b00111011101111101110011101000110";
        ram[29] = "0b10111101011100100100111111011110";
        ram[30] = "0b00111101100011111110000011011011";
        ram[31] = "0b10111101110000101001111001011011";
        ram[32] = "0b00111101011000000010010001111110";
        ram[33] = "0b10111110001001011101001010001101";
        ram[34] = "0b10111101111001011001001010010110";
        ram[35] = "0b10111101111000110011101001000111";
        ram[36] = "0b00111100101011011000001111000111";
        ram[37] = "0b00111110000100101010110001110101";
        ram[38] = "0b10111101110001001111011110011100";
        ram[39] = "0b10111110000001100111100011000000";
        ram[40] = "0b10111101110101110000101011000100";
        ram[41] = "0b10111101101001010111100110010100";
        ram[42] = "0b10111100110001000000001100101111";
        ram[43] = "0b10111110001101000101101010100011";
        ram[44] = "0b10111101100001010110011111011100";
        ram[45] = "0b10111101000011010111101101111110";
        ram[46] = "0b10111101000001000101110101011101";
        ram[47] = "0b00111100111111000101101110011011";
        ram[48] = "0b00111101011101110111101001010101";
        ram[49] = "0b10111110000100101011001101000110";
        ram[50] = "0b00111101100100111011010110100101";
        ram[51] = "0b10111101010110010110110111100000";
        ram[52] = "0b00111110000100010110011011100000";
        ram[53] = "0b00111101101101110001100000111101";
        ram[54] = "0b10111100101110111000011111001011";
        ram[55] = "0b00111101100001010010110000100100";
        ram[56] = "0b00111101110101001001101111101001";
        ram[57] = "0b00111110010000011110000011000110";
        ram[58] = "0b00111001000011011101000000000100";
        ram[59] = "0b10111100111011001100110000010001";
        ram[60] = "0b00111100111110011011100000011101";
        ram[61] = "0b00111011101000101110101010010001";
        ram[62] = "0b00111101011110111010111110001001";
        ram[63] = "0b10111100110001001110111000010001";
        ram[64] = "0b10111101000010001011001100010010";
        ram[65] = "0b00111101011100100110110100111011";
        ram[66] = "0b10111100110110111000111010011100";
        ram[67] = "0b00111101101011100000111101001010";
        ram[68] = "0b00111100100110100101110101111001";
        ram[69] = "0b10111101010111110010001010001010";
        ram[70] = "0b00111110000111000001010110010000";
        ram[71] = "0b00111101001111100101100010110001";
        ram[72] = "0b00111101110110000110111011000001";
        ram[73] = "0b10111011010100011011000011100010";
        ram[74] = "0b00111100000110001011111110111111";
        ram[75] = "0b00111101001100110111100100001001";
        ram[76] = "0b10111100100101010000110100001101";
        ram[77] = "0b00111011101100111001001111101100";
        ram[78] = "0b00111101100110000011000000001101";
        ram[79] = "0b00111101001011110101100110100101";
        ram[80] = "0b10111101001000110101111111010001";
        ram[81] = "0b10111100101110100000110101000010";
        ram[82] = "0b10111101010000111110110010001001";
        ram[83] = "0b10111101110011111111110110100100";
        ram[84] = "0b10111101010101011011011000010101";
        ram[85] = "0b00111101101010110001001000010111";
        ram[86] = "0b00111101100101000101100101111100";
        ram[87] = "0b10111101101000100110101000001000";
        ram[88] = "0b10111101011110000011110110101111";
        ram[89] = "0b10111110010001011110100100011000";
        ram[90] = "0b10111101110011100001101111010010";
        ram[91] = "0b10111011011101001000101010000001";
        ram[92] = "0b00111100110111000100101111111100";
        ram[93] = "0b00111100001011110100010101101000";
        ram[94] = "0b10111100001110110011111010011010";
        ram[95] = "0b10111100111000001101001010101001";
        ram[96] = "0b10111101010001001010000011001001";
        ram[97] = "0b00111101111110011111101010011000";
        ram[98] = "0b00111101101100000111110110101100";
        ram[99] = "0b00111100101011111010011001001011";
        ram[100] = "0b10111101101101111111101001000010";
        ram[101] = "0b10111101010101100000011010000010";
        ram[102] = "0b10111101110000101011111110001011";
        ram[103] = "0b10111101001101100101011110101011";
        ram[104] = "0b10111101100010010000011100111000";
        ram[105] = "0b00111110000111100110111110110101";
        ram[106] = "0b10111101011000110000011100110110";
        ram[107] = "0b00111101111100110110100100110100";
        ram[108] = "0b10111100110010010010100011010011";
        ram[109] = "0b10111101011110110010011011001101";
        ram[110] = "0b10111101111111111111110001010100";
        ram[111] = "0b10111101010111100010110011011100";
        ram[112] = "0b00111110000101100000111001010010";
        ram[113] = "0b10111101011011100100001111100000";
        ram[114] = "0b10111100011111101010010111111000";
        ram[115] = "0b00111110001000011111010000101100";
        ram[116] = "0b00111100100110000100101010101111";
        ram[117] = "0b10111101111000000100111000011110";
        ram[118] = "0b10111100011010001000010110010000";
        ram[119] = "0b00111110000110000010010101011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_3) {
meminst = new inference_conv2d_f3_3_3_3_ram("inference_conv2d_f3_3_3_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_3() {
    delete meminst;
}


};//endmodule
#endif
