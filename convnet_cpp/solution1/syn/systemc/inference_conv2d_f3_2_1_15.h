// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_15_H__
#define __inference_conv2d_f3_2_1_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_15_ram) {
        ram[0] = "0b10111101000110010010111011000000";
        ram[1] = "0b10111101100011011110101001101111";
        ram[2] = "0b00111101100110000101010001111101";
        ram[3] = "0b10111101111101111011001110010110";
        ram[4] = "0b00111110010000001000111000010101";
        ram[5] = "0b10111101011000000101100001001010";
        ram[6] = "0b10111101000011110100110111100110";
        ram[7] = "0b00111110000110110010001000001000";
        ram[8] = "0b00111110000001010110010110000000";
        ram[9] = "0b00111101010110100100000000111000";
        ram[10] = "0b10111011100110000110100011101101";
        ram[11] = "0b10111101100010001111000111010100";
        ram[12] = "0b00111100101110011011101010100001";
        ram[13] = "0b10111101010101100011000100010100";
        ram[14] = "0b00111100011010011111100011000010";
        ram[15] = "0b00111011100101000010000111100000";
        ram[16] = "0b00111101110101000000100100011100";
        ram[17] = "0b10111101010001000110001010011011";
        ram[18] = "0b10111100100010111011111000001111";
        ram[19] = "0b10111101101010111111011110100000";
        ram[20] = "0b00111101100100110011010011111100";
        ram[21] = "0b00111101100111010010010100111111";
        ram[22] = "0b10111011001001001001101110000000";
        ram[23] = "0b10111101000000001111000101100010";
        ram[24] = "0b10111101101000000010101111111101";
        ram[25] = "0b00111101001100111000001110000101";
        ram[26] = "0b00111011010010111110011011001001";
        ram[27] = "0b00111101001111001001110011010100";
        ram[28] = "0b00111101000100000001100001000110";
        ram[29] = "0b00111011011000101010111011100001";
        ram[30] = "0b00111101100011011000110110100010";
        ram[31] = "0b10111101000001100011110110011100";
        ram[32] = "0b10111101000000111001111010100000";
        ram[33] = "0b00111110000010001110111011110010";
        ram[34] = "0b00111101001010011000011110111001";
        ram[35] = "0b10111101001101101111100101110110";
        ram[36] = "0b00111100101110000111011111100001";
        ram[37] = "0b00111101100100101111000110000010";
        ram[38] = "0b00111100110100101011111001111110";
        ram[39] = "0b00111101000100000110011001100101";
        ram[40] = "0b00111100110101001001100010101001";
        ram[41] = "0b00111100010000110010001101101011";
        ram[42] = "0b10111100100101000001110111000100";
        ram[43] = "0b10111100111010100011100011101110";
        ram[44] = "0b10111101011000001111111111011010";
        ram[45] = "0b00111100101011110110101001010001";
        ram[46] = "0b10111110000001101100000000001110";
        ram[47] = "0b00111001100111100101100001110000";
        ram[48] = "0b00111101001001000011100101001011";
        ram[49] = "0b00111100110110010101000101110101";
        ram[50] = "0b10111101010000101000000100110100";
        ram[51] = "0b10111101110100110100010100000111";
        ram[52] = "0b10111101001111111111111111100101";
        ram[53] = "0b00111101001101111100011001110110";
        ram[54] = "0b00111100110011100100110100000000";
        ram[55] = "0b10111101011110111000001101001001";
        ram[56] = "0b10111101101100101000000001010000";
        ram[57] = "0b10111101010010010101110111000111";
        ram[58] = "0b00111101100000000011010101111010";
        ram[59] = "0b00111011011011111101000010001000";
        ram[60] = "0b10111110000111111101100010101110";
        ram[61] = "0b00111101011111100101010101110000";
        ram[62] = "0b00111101110110011001001111010101";
        ram[63] = "0b10111101101100011010100101000000";
        ram[64] = "0b00111110001110010111001010001010";
        ram[65] = "0b10111100110001100110001001010000";
        ram[66] = "0b00111100101010010111110100000111";
        ram[67] = "0b10111011001101110011110011000011";
        ram[68] = "0b00111100101001101100100001010110";
        ram[69] = "0b10111101011100111101100110000001";
        ram[70] = "0b00111101100110011011100001010011";
        ram[71] = "0b00111100101100100001111110100010";
        ram[72] = "0b10111100100001100001110001111010";
        ram[73] = "0b10111101100110000001101000100011";
        ram[74] = "0b10111101011100110110101000001010";
        ram[75] = "0b00111101100100111111111101110110";
        ram[76] = "0b10111101001101110001110100000010";
        ram[77] = "0b10111100000001110000001111000000";
        ram[78] = "0b00111101111111000001010110010000";
        ram[79] = "0b10111101011111011111000011000111";
        ram[80] = "0b10111101001010000001001110010101";
        ram[81] = "0b00111011001110011111000111010100";
        ram[82] = "0b00111110000000100101000010110101";
        ram[83] = "0b00111100001010110101011100110001";
        ram[84] = "0b10111100110101000001110101011001";
        ram[85] = "0b00111101010101111100001001011111";
        ram[86] = "0b00111100100000101101101011011100";
        ram[87] = "0b10111101001111100100100111001101";
        ram[88] = "0b10111101001110100101001111010100";
        ram[89] = "0b00111101101111000001010110111000";
        ram[90] = "0b10111101110011100011001011100100";
        ram[91] = "0b00111101111111011000001110000100";
        ram[92] = "0b00111100011101101001110111101100";
        ram[93] = "0b10111101000011100001000111110111";
        ram[94] = "0b00111100111000000011110000010101";
        ram[95] = "0b00111101011110000111011010000100";
        ram[96] = "0b10111101111001110000000000000100";
        ram[97] = "0b10111101101100000000111001011110";
        ram[98] = "0b10111101010000001110101110111000";
        ram[99] = "0b00111110001110000100010111011101";
        ram[100] = "0b10111101100110001100001110111110";
        ram[101] = "0b10111101001000101111101100100111";
        ram[102] = "0b00111101111010111011001101000010";
        ram[103] = "0b10111100110001101010101110000000";
        ram[104] = "0b10111101011001010001011110010111";
        ram[105] = "0b10111101010110101010000000001111";
        ram[106] = "0b10111101111000001101101010100001";
        ram[107] = "0b00111101001000011001111111111000";
        ram[108] = "0b10111101101011010101011101010001";
        ram[109] = "0b10111101101011110011110111101001";
        ram[110] = "0b00111101111100110101010111001110";
        ram[111] = "0b10111110010100001011110111001011";
        ram[112] = "0b00111101101111010000100110010001";
        ram[113] = "0b00111110000001100101100110001110";
        ram[114] = "0b10111101101001010011001000111001";
        ram[115] = "0b10111101000001000000101001010001";
        ram[116] = "0b10111100011000000010001111000010";
        ram[117] = "0b00111100101001100100001101100001";
        ram[118] = "0b10111100111011000111111110000101";
        ram[119] = "0b00111101000000000000000000000000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_15) {
meminst = new inference_conv2d_f3_2_1_15_ram("inference_conv2d_f3_2_1_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_15() {
    delete meminst;
}


};//endmodule
#endif
