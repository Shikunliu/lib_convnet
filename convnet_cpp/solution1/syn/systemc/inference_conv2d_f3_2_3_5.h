// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_5_H__
#define __inference_conv2d_f3_2_3_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_5_ram) {
        ram[0] = "0b00111110000101100101111011001100";
        ram[1] = "0b00111101111001010100100010101010";
        ram[2] = "0b00111110010010010110010001100011";
        ram[3] = "0b10111101010101011010111010111110";
        ram[4] = "0b00111101011100101100010110111011";
        ram[5] = "0b00111101100011000011100110101111";
        ram[6] = "0b00111101100110010100110010111101";
        ram[7] = "0b00111101110100001101100011001011";
        ram[8] = "0b10111101111010111111001010110010";
        ram[9] = "0b10111100101000001100111111101111";
        ram[10] = "0b00111110001001100001010111101100";
        ram[11] = "0b00111100101100101101010111100000";
        ram[12] = "0b00111100000010001001101000101101";
        ram[13] = "0b00111100011110011010110100000000";
        ram[14] = "0b00111110000101011010011101001100";
        ram[15] = "0b00111101100011111111111110100010";
        ram[16] = "0b10111100100100010101101101110010";
        ram[17] = "0b00111101110011010010001101001111";
        ram[18] = "0b10111100110001100111101100001111";
        ram[19] = "0b10111101111110110101001110010011";
        ram[20] = "0b00111101001011110001011010001001";
        ram[21] = "0b00111101110111101101100111100000";
        ram[22] = "0b00111101101100010001001111010100";
        ram[23] = "0b10111101011000110101101100011001";
        ram[24] = "0b10111100101001100000100010101000";
        ram[25] = "0b00111011011100010011110100011010";
        ram[26] = "0b10111100001011101101001001111011";
        ram[27] = "0b10111101011110110011010000011110";
        ram[28] = "0b10111110001100110111001001100000";
        ram[29] = "0b10111101111001100100010111100101";
        ram[30] = "0b10111101011101001001010110000100";
        ram[31] = "0b00111101101010110011101011101111";
        ram[32] = "0b10111100110100110010001011110010";
        ram[33] = "0b10111010001110100011101101101001";
        ram[34] = "0b00111101010100001001100101000000";
        ram[35] = "0b00111101001000100010111010101110";
        ram[36] = "0b10111101011111001110000110111000";
        ram[37] = "0b10111101011001110110011011111101";
        ram[38] = "0b10111101110101101000100000110111";
        ram[39] = "0b00111101110100010111110111110010";
        ram[40] = "0b10111101010110000010000010001000";
        ram[41] = "0b00111101000000001110011110111100";
        ram[42] = "0b00111101001010001011111100000110";
        ram[43] = "0b10111101000000101001111110011101";
        ram[44] = "0b00111101101000000001010001011000";
        ram[45] = "0b10111110010001011111100000001010";
        ram[46] = "0b10111011101010000000010010000001";
        ram[47] = "0b00111100100000010110001000000000";
        ram[48] = "0b00111101011011001010100010000101";
        ram[49] = "0b10111110001100010001000001011110";
        ram[50] = "0b10111011110011110110101011100010";
        ram[51] = "0b00111101001011011101101110100110";
        ram[52] = "0b00111100111001101100110110010100";
        ram[53] = "0b00111110001111101010100001010100";
        ram[54] = "0b10111101001111110110001101110011";
        ram[55] = "0b00111100011001100000011110011100";
        ram[56] = "0b10111101110010100111101001000010";
        ram[57] = "0b10111101100010100110000000001011";
        ram[58] = "0b10111100111101111111110000100101";
        ram[59] = "0b10111101100101110010001000100110";
        ram[60] = "0b10111011111001101001100100010001";
        ram[61] = "0b10111110010010110011011111001010";
        ram[62] = "0b00111101001001011011100011000001";
        ram[63] = "0b10111101100000101111101010010100";
        ram[64] = "0b10111100011100100101000011101011";
        ram[65] = "0b00111100100100011111000010001110";
        ram[66] = "0b00111101100000000101111001011111";
        ram[67] = "0b00111100100111110001100011001010";
        ram[68] = "0b00111011000001011010001011101101";
        ram[69] = "0b10111101011001111100110001100010";
        ram[70] = "0b00111100110110010100101100101011";
        ram[71] = "0b00111101001000110101011100000010";
        ram[72] = "0b10111101100110110011101110011101";
        ram[73] = "0b10111101001011110000000000011000";
        ram[74] = "0b10111100101011000101000010001011";
        ram[75] = "0b10111101110010100011100010000011";
        ram[76] = "0b00111110000111101110010100100110";
        ram[77] = "0b00111100100001001111010011111101";
        ram[78] = "0b10111011010100011010111110110110";
        ram[79] = "0b10111101100111111000101000110001";
        ram[80] = "0b10111101001001001111110000111001";
        ram[81] = "0b00111101111010000011110000101001";
        ram[82] = "0b10111101100100000000011101111111";
        ram[83] = "0b10111101111111101100101000100101";
        ram[84] = "0b10111110001101100001010111101100";
        ram[85] = "0b10111101000001111110101110100010";
        ram[86] = "0b00111110000010001000001101110111";
        ram[87] = "0b00111101111010010001100101101001";
        ram[88] = "0b00111101011110011001110101111011";
        ram[89] = "0b10111101101111011010111100010101";
        ram[90] = "0b00111100101010001100010110111100";
        ram[91] = "0b10111101111100011100000000000001";
        ram[92] = "0b00111110000001100100011111111110";
        ram[93] = "0b00111100100111100001101101110100";
        ram[94] = "0b10111011110010001110110101101111";
        ram[95] = "0b00111100100111010000100010111010";
        ram[96] = "0b10111110000001101100111001111001";
        ram[97] = "0b10111100110101110000010010010100";
        ram[98] = "0b00111110010001111100000001101110";
        ram[99] = "0b00111100001101110000000100011110";
        ram[100] = "0b00111101110011011010011011100111";
        ram[101] = "0b10111101100110101011001011000111";
        ram[102] = "0b10111110000001000000011011000000";
        ram[103] = "0b00111101000011010101100101001111";
        ram[104] = "0b00111100110101010001000111100000";
        ram[105] = "0b10111011101010000011011000101010";
        ram[106] = "0b00111101001111001000011111000000";
        ram[107] = "0b00111110000011010011101000011101";
        ram[108] = "0b10111101101011000110010010100000";
        ram[109] = "0b00111101111101110111010010101100";
        ram[110] = "0b10111101100101101111101111010010";
        ram[111] = "0b10111101001111010110110100101110";
        ram[112] = "0b00111100101000011010101000001001";
        ram[113] = "0b00111110000011001001000011000101";
        ram[114] = "0b00111100100011101011001001001010";
        ram[115] = "0b10111101101000010110000010111110";
        ram[116] = "0b10111101110011100010010010111100";
        ram[117] = "0b10111101111001010110110001010001";
        ram[118] = "0b10111101110001011010010011111101";
        ram[119] = "0b10111011001111011100101111010011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_5) {
meminst = new inference_conv2d_f3_2_3_5_ram("inference_conv2d_f3_2_3_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_5() {
    delete meminst;
}


};//endmodule
#endif
