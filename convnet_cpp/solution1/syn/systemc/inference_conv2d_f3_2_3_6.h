// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_6_H__
#define __inference_conv2d_f3_2_3_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_6_ram) {
        ram[0] = "0b10111110000101010011000111011011";
        ram[1] = "0b10111101011011010100010000000110";
        ram[2] = "0b00111101111101110000010011111111";
        ram[3] = "0b00111101111010001100111101111101";
        ram[4] = "0b10111100111001110101111100011111";
        ram[5] = "0b00111101100100011011011100100101";
        ram[6] = "0b10111101101011011001010000010101";
        ram[7] = "0b00111100101100111101101001011000";
        ram[8] = "0b00111100101100111001110001111010";
        ram[9] = "0b10111101110100101000110110000110";
        ram[10] = "0b10111100000110111011000101001100";
        ram[11] = "0b10111101100100110110011101111001";
        ram[12] = "0b10111101001100000011001000101101";
        ram[13] = "0b10111110000101100001000000101000";
        ram[14] = "0b00111100100000010110101010011001";
        ram[15] = "0b10111100011000101010000101001010";
        ram[16] = "0b10111101100011001001010101101111";
        ram[17] = "0b00111110000000001000000010110110";
        ram[18] = "0b00111101011000111011101101000001";
        ram[19] = "0b00111101011001101001101011101111";
        ram[20] = "0b10111100011011110110011110010111";
        ram[21] = "0b10111101101000111000110010010111";
        ram[22] = "0b10111100100011001000100001101111";
        ram[23] = "0b10111101011000110110110100000111";
        ram[24] = "0b10111101101011001110100101010010";
        ram[25] = "0b00111100000101011010110110011100";
        ram[26] = "0b00111101101000011110001111010000";
        ram[27] = "0b10111100000001111100010001110000";
        ram[28] = "0b10111100101111001111010111110101";
        ram[29] = "0b10111110010000000010011100001111";
        ram[30] = "0b10111100100011000000001111100101";
        ram[31] = "0b10111101111111001111000100111101";
        ram[32] = "0b00111101100110110110101000010001";
        ram[33] = "0b00111110010000010011001010110101";
        ram[34] = "0b00111100111110110111100101010011";
        ram[35] = "0b00111110010010001001100110111111";
        ram[36] = "0b00111100001010111010100111010010";
        ram[37] = "0b10111101100110110010100101111001";
        ram[38] = "0b00111101101010001100111010011000";
        ram[39] = "0b10111101001001010100111101111011";
        ram[40] = "0b00111101111101100001010011100000";
        ram[41] = "0b00111100111101010101010100010111";
        ram[42] = "0b10111101000111011101000110100010";
        ram[43] = "0b00111101110010101011010110011011";
        ram[44] = "0b00111101000101101010101101110011";
        ram[45] = "0b00111101111101000000100010010110";
        ram[46] = "0b00111110001101110010010010110111";
        ram[47] = "0b00111101010010000101100111110001";
        ram[48] = "0b10111101110100111001011101010111";
        ram[49] = "0b10111101001101111101101000010001";
        ram[50] = "0b00111110000100111111011001111111";
        ram[51] = "0b00111110000100000010111010101001";
        ram[52] = "0b00111101111000110010101110011001";
        ram[53] = "0b10111101100101001110101010011011";
        ram[54] = "0b00111101100101101110100100000000";
        ram[55] = "0b10111011110100101001010100111001";
        ram[56] = "0b10111101011011010111011001000000";
        ram[57] = "0b10111100101100110001110111001111";
        ram[58] = "0b00111100111110101000001011101000";
        ram[59] = "0b10111101110001111000000100100110";
        ram[60] = "0b10111101101011111010000100001101";
        ram[61] = "0b00111101100010000100011111001101";
        ram[62] = "0b00111101101011000000001011110011";
        ram[63] = "0b00111101101010000110001110100100";
        ram[64] = "0b10111110000011011101011111101101";
        ram[65] = "0b10111100001011001010111001001001";
        ram[66] = "0b10111101101011110110101010100001";
        ram[67] = "0b10111101101010010001111001111111";
        ram[68] = "0b00111101101000000000111011001001";
        ram[69] = "0b00111101111010110111000110111001";
        ram[70] = "0b10111010111111101001001101101110";
        ram[71] = "0b00111100111011101110001101000010";
        ram[72] = "0b10111101110110110011011111001010";
        ram[73] = "0b10111101010101110101110110011010";
        ram[74] = "0b10111100010110001001110110111011";
        ram[75] = "0b00111100010111000000000010110010";
        ram[76] = "0b00111110001111101110000001101110";
        ram[77] = "0b10111101000010111000110110111000";
        ram[78] = "0b00111110000101011101101000100111";
        ram[79] = "0b10111100000011111110011000100111";
        ram[80] = "0b10111101001001000001001111110110";
        ram[81] = "0b00111011001111011001101111010111";
        ram[82] = "0b10111110000111100110101011111101";
        ram[83] = "0b00111110000010010011010001101010";
        ram[84] = "0b00111101001100110011101111001100";
        ram[85] = "0b00111101010010000101110111010010";
        ram[86] = "0b00111100111010001111010010110110";
        ram[87] = "0b00111101111001100001111000001100";
        ram[88] = "0b00111101100001010001101100011010";
        ram[89] = "0b10111101011000110011011110001101";
        ram[90] = "0b10111101110110101111111000011110";
        ram[91] = "0b00111101101111001011100111101101";
        ram[92] = "0b00111101101100100000010100000000";
        ram[93] = "0b10111101101011101000000101000101";
        ram[94] = "0b00111100001010101100001110001110";
        ram[95] = "0b00111100010101011011000000110110";
        ram[96] = "0b10111101010001100100101101011001";
        ram[97] = "0b10111101111100010100010001000110";
        ram[98] = "0b10111101100101001001000001101110";
        ram[99] = "0b10111011000001111101000001101110";
        ram[100] = "0b10111110000100001010011010111001";
        ram[101] = "0b10111100110100000010010010100110";
        ram[102] = "0b00111101001101100100001110111111";
        ram[103] = "0b10111110001111110100010010010001";
        ram[104] = "0b10111101101110101111111010111111";
        ram[105] = "0b10111101111100110010110001100010";
        ram[106] = "0b00111110001010011011011100111001";
        ram[107] = "0b10111110000000010001011101110010";
        ram[108] = "0b00111100010010110101110010001010";
        ram[109] = "0b10111101001110101000111100101101";
        ram[110] = "0b10111100111111011000100011000010";
        ram[111] = "0b00111010110111000000100000101001";
        ram[112] = "0b00111101001110001001011100111011";
        ram[113] = "0b00111101101001001100011001101110";
        ram[114] = "0b00111101111100111100111111110110";
        ram[115] = "0b00111101010010101011100111001101";
        ram[116] = "0b10111101110011011101100010110110";
        ram[117] = "0b00111101100011000110110100111001";
        ram[118] = "0b00111101001001001011001111111010";
        ram[119] = "0b00111101011101000011001001101100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_6) {
meminst = new inference_conv2d_f3_2_3_6_ram("inference_conv2d_f3_2_3_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_6() {
    delete meminst;
}


};//endmodule
#endif
