// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_13_H__
#define __inference_conv2d_f3_3_0_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_13_ram) {
        ram[0] = "0b00111101101100000100110111101001";
        ram[1] = "0b00111110010001001010011011101100";
        ram[2] = "0b10111101010011111101101111111011";
        ram[3] = "0b00111101101111011101110111110100";
        ram[4] = "0b00111110000011011010110000100110";
        ram[5] = "0b10111110000011111011010110001101";
        ram[6] = "0b00111101110011110000101101101011";
        ram[7] = "0b00111101010100111101101000111101";
        ram[8] = "0b10111101010101011010000100011100";
        ram[9] = "0b00111101101011100011111111001001";
        ram[10] = "0b10111100101100101011001001101111";
        ram[11] = "0b00111101111101011011010011101110";
        ram[12] = "0b00111100100100011011011001000001";
        ram[13] = "0b00111101100011100000101110111001";
        ram[14] = "0b00111101110000100111001101111000";
        ram[15] = "0b00111110000001000001001001001001";
        ram[16] = "0b10111101010110011010110111110001";
        ram[17] = "0b00111110001000010011010111011011";
        ram[18] = "0b10111101111001101100111000110110";
        ram[19] = "0b00111101000010100010101000100101";
        ram[20] = "0b00111101101111101000000000111001";
        ram[21] = "0b10111100101010011100100101011101";
        ram[22] = "0b10111101110001010000010000111110";
        ram[23] = "0b10111100000111110000101110001001";
        ram[24] = "0b10111101101010110001111011000111";
        ram[25] = "0b10111101001111110101111000011010";
        ram[26] = "0b10111110000000000110001001001110";
        ram[27] = "0b00111101101000111100000110100110";
        ram[28] = "0b10111101001001000100100011001111";
        ram[29] = "0b10111110000100011010101101001011";
        ram[30] = "0b10111101010110001110011111011110";
        ram[31] = "0b10111011100010111111111101111101";
        ram[32] = "0b10111101001000000101011111111010";
        ram[33] = "0b10111110000100010101001110111101";
        ram[34] = "0b00111100101101100000101011101001";
        ram[35] = "0b00111110001100111000111000101010";
        ram[36] = "0b00111101000101101001101011000111";
        ram[37] = "0b10111101011010100110010001110010";
        ram[38] = "0b10111101010111000001100010110101";
        ram[39] = "0b00111101111010100001011010100101";
        ram[40] = "0b10111101111000011101100101101111";
        ram[41] = "0b00111011100111101000111111111001";
        ram[42] = "0b10111101100110011100101110000011";
        ram[43] = "0b10111101110010010110011100110111";
        ram[44] = "0b00111100010011101011110111010011";
        ram[45] = "0b00111101001111011010010000000101";
        ram[46] = "0b00111101001101100010111100110001";
        ram[47] = "0b00111110000101010101001100100110";
        ram[48] = "0b10111110001100111111100011011011";
        ram[49] = "0b00111100101110010111101011100000";
        ram[50] = "0b00111110000011110010011111111110";
        ram[51] = "0b00111101001100010001101100010000";
        ram[52] = "0b10111100100011101101001010010110";
        ram[53] = "0b00111101000000000100000101010100";
        ram[54] = "0b10111100011101011100101101011110";
        ram[55] = "0b10111100000010111100110100011101";
        ram[56] = "0b00111100110111011100100110101010";
        ram[57] = "0b00111100111000111011011000011101";
        ram[58] = "0b00111101111011000001101110010111";
        ram[59] = "0b10111101110010111000001000010100";
        ram[60] = "0b00111101110110001011011000001111";
        ram[61] = "0b10111101000001100001000101110111";
        ram[62] = "0b10111110000011100110111001100101";
        ram[63] = "0b10111010100100011011000100011000";
        ram[64] = "0b10111100101010111011111100110110";
        ram[65] = "0b00111101111000111001101111001100";
        ram[66] = "0b00111101110001110000001101000100";
        ram[67] = "0b10111110000001001010111010000110";
        ram[68] = "0b10111101101110101100100100101010";
        ram[69] = "0b00111100011011010100100110101111";
        ram[70] = "0b10111010000001000110100100101000";
        ram[71] = "0b10111101001011011010111100110000";
        ram[72] = "0b00111101101111111101100001011101";
        ram[73] = "0b10111100110000010100111111110111";
        ram[74] = "0b00111110000110100011000100011111";
        ram[75] = "0b10111110001001111010011100000001";
        ram[76] = "0b10111101011100100000100010010001";
        ram[77] = "0b10111101100001001011011000100000";
        ram[78] = "0b00111101111010100001001101111111";
        ram[79] = "0b00111101011000001110001111110110";
        ram[80] = "0b10111100101001100111100101111100";
        ram[81] = "0b10111101001011000010100110111111";
        ram[82] = "0b10111100111000001111010011011000";
        ram[83] = "0b00111100001001010110111110010001";
        ram[84] = "0b00111101100111001111110100001001";
        ram[85] = "0b10111110000011110000011000101101";
        ram[86] = "0b10111101100001111011000000000101";
        ram[87] = "0b10111101111001100000000110111101";
        ram[88] = "0b10111101100100110000001101001000";
        ram[89] = "0b10111101100100000101101100011111";
        ram[90] = "0b00111100101100000111101101011101";
        ram[91] = "0b10111100000011011110000111001011";
        ram[92] = "0b00111101110011100100001100100100";
        ram[93] = "0b00111110000111001011001011011001";
        ram[94] = "0b10111101000001010100001100110110";
        ram[95] = "0b10111100110011010110101100100011";
        ram[96] = "0b10111101100110000100101111110001";
        ram[97] = "0b10111000110000010000100111110011";
        ram[98] = "0b00111101100000001001111100111010";
        ram[99] = "0b00111110000011101110111101011111";
        ram[100] = "0b00111101011110000010010111111100";
        ram[101] = "0b00111110000101111111101011100011";
        ram[102] = "0b10111110000011100111100011100010";
        ram[103] = "0b10111100111001011110111001110001";
        ram[104] = "0b00111101101110100011100100001001";
        ram[105] = "0b10111101100111011111001110001110";
        ram[106] = "0b10111100010011100010010111111110";
        ram[107] = "0b00111101110010111100010011100000";
        ram[108] = "0b10111101101110110100001110100011";
        ram[109] = "0b10111101000101000010010100000000";
        ram[110] = "0b10111101110011010011110011111111";
        ram[111] = "0b00111110000011010000000101111110";
        ram[112] = "0b00111110000011101011100000001111";
        ram[113] = "0b10111101100011001001001000101111";
        ram[114] = "0b10111110000011111100110101101000";
        ram[115] = "0b00111101111111110101010010001111";
        ram[116] = "0b10111101110101010010100101111000";
        ram[117] = "0b10111011100100100110001011011001";
        ram[118] = "0b10111101110101110101110000000111";
        ram[119] = "0b10111101011000001101110010011111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_13) {
meminst = new inference_conv2d_f3_3_0_13_ram("inference_conv2d_f3_3_0_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_13() {
    delete meminst;
}


};//endmodule
#endif
