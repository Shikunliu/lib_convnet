// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_8_H__
#define __inference_conv2d_f3_3_0_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_8_ram) {
        ram[0] = "0b10111110000101100100011111111110";
        ram[1] = "0b10111101111011001011101001110011";
        ram[2] = "0b10111110000001000011000101111011";
        ram[3] = "0b00111101000000111010011010011001";
        ram[4] = "0b10111101010010011100111111111000";
        ram[5] = "0b00111100111111000110000110110000";
        ram[6] = "0b00111101110001011000010001000110";
        ram[7] = "0b00111101000000111001100001110001";
        ram[8] = "0b10111101010101100001101111001011";
        ram[9] = "0b10111101000100000110010011010010";
        ram[10] = "0b10111101010010011110000000111001";
        ram[11] = "0b00111110000000000100110010001100";
        ram[12] = "0b00111110001000100011000000110100";
        ram[13] = "0b10111011010000111010100111100011";
        ram[14] = "0b00111101001100010001110001010010";
        ram[15] = "0b10111110000101011110101000100101";
        ram[16] = "0b10111101010101010010100001101011";
        ram[17] = "0b00111100111001110011101100001101";
        ram[18] = "0b10111101011100000101110111100110";
        ram[19] = "0b10111101011111111110000011011011";
        ram[20] = "0b10111110010010000111101111011101";
        ram[21] = "0b10111110010100011100010001110110";
        ram[22] = "0b00111011010010011111110111100101";
        ram[23] = "0b10111100010100000000101101000110";
        ram[24] = "0b00111010001101111110111001100110";
        ram[25] = "0b00111100101100000011000110001100";
        ram[26] = "0b00111110001000101001101110101110";
        ram[27] = "0b10111100111100010101100010011101";
        ram[28] = "0b00111100100100000011110011000100";
        ram[29] = "0b00111100111101011111110000000110";
        ram[30] = "0b10111101010110110010000101110100";
        ram[31] = "0b10111101111011010010001111010101";
        ram[32] = "0b00111100000011000010001001001101";
        ram[33] = "0b00111101110110010011110111011001";
        ram[34] = "0b10111101100101010011010101101100";
        ram[35] = "0b00111110010001100001000010101110";
        ram[36] = "0b10111101000001001000011110000100";
        ram[37] = "0b00111101010110000011010000111111";
        ram[38] = "0b10111100101011000010011111011100";
        ram[39] = "0b00111101000101000110100000011100";
        ram[40] = "0b10111100111011100010010011010110";
        ram[41] = "0b10111101100011101110010111101111";
        ram[42] = "0b00111101100110111110010111001100";
        ram[43] = "0b10111101010011110100011010101010";
        ram[44] = "0b00111101010010011011100110000111";
        ram[45] = "0b00111101100011110110110011100011";
        ram[46] = "0b10111110010010000001100001000000";
        ram[47] = "0b00111101000000110001010101111001";
        ram[48] = "0b00111110010000101101000011100101";
        ram[49] = "0b10111101100111100110111101010111";
        ram[50] = "0b00111100100011101011000101110100";
        ram[51] = "0b00111100101100001101100011100110";
        ram[52] = "0b10111101110000010100010010100100";
        ram[53] = "0b00111100111100110010000011110100";
        ram[54] = "0b10111110000101100110111001000100";
        ram[55] = "0b00111101111100100110111110100100";
        ram[56] = "0b10111110000011010000000111000001";
        ram[57] = "0b00111110001000011001010100000011";
        ram[58] = "0b10111101110000110000001000111011";
        ram[59] = "0b10111101101101011100000000100110";
        ram[60] = "0b10111100101010100101001111111100";
        ram[61] = "0b00111101001011101011100000101010";
        ram[62] = "0b10111101001000000000011111011101";
        ram[63] = "0b00111100011010111001010101111010";
        ram[64] = "0b10111101100111110000100101000101";
        ram[65] = "0b10111100010101010101110001010011";
        ram[66] = "0b00111100101000011101001011101110";
        ram[67] = "0b00111110000011001010001010011000";
        ram[68] = "0b10111101101101001001110010100101";
        ram[69] = "0b00111101101011101001011011000100";
        ram[70] = "0b00111101101101101001011111010111";
        ram[71] = "0b10111101001110001010001110110101";
        ram[72] = "0b00111101010101011010100110110101";
        ram[73] = "0b00111101111110101100111101110100";
        ram[74] = "0b00111101110100100000000100000100";
        ram[75] = "0b10111100110011000010011111110111";
        ram[76] = "0b10111110000100000110100000010010";
        ram[77] = "0b00111110011000111010111110111000";
        ram[78] = "0b10111011101000000011000110111001";
        ram[79] = "0b10111101010000010111110010100010";
        ram[80] = "0b10111101100001101100001010101101";
        ram[81] = "0b10111101111110111001111110011001";
        ram[82] = "0b00111101100001110010100110011000";
        ram[83] = "0b00111101010010011000110100101101";
        ram[84] = "0b00111100000101100100110110011111";
        ram[85] = "0b10111101101011010001100101001011";
        ram[86] = "0b00111101011101011111100101100111";
        ram[87] = "0b10111101011110111010001010100011";
        ram[88] = "0b10111100101100100011000111100001";
        ram[89] = "0b00111101011011101010010110011010";
        ram[90] = "0b10111101101100110010110000111010";
        ram[91] = "0b00111100100100000110100100111001";
        ram[92] = "0b10111101001100110001000001111110";
        ram[93] = "0b00111101001000010011001101010110";
        ram[94] = "0b00111110000011011010010000000101";
        ram[95] = "0b00111011101001110011101111000100";
        ram[96] = "0b10111110000000010000111101010010";
        ram[97] = "0b00111101111101010010000000001000";
        ram[98] = "0b00111101010010001110101101000110";
        ram[99] = "0b00111101101110111001111111110111";
        ram[100] = "0b00111101110001110101111001001001";
        ram[101] = "0b10111101101010110110100111110110";
        ram[102] = "0b00111100101111111011100100011110";
        ram[103] = "0b00111110000001111110000001101001";
        ram[104] = "0b10111101100000011101100001100010";
        ram[105] = "0b10111100010101010011111011110111";
        ram[106] = "0b00111011011001000101111101100110";
        ram[107] = "0b10111101010100100011101100000001";
        ram[108] = "0b00111101010011110110110011110000";
        ram[109] = "0b00111101101101100100001011000000";
        ram[110] = "0b00111101110110111000000100110000";
        ram[111] = "0b10111100001101010010101011110000";
        ram[112] = "0b10111011111101000110011100011011";
        ram[113] = "0b10111101101001111101101110110001";
        ram[114] = "0b10111101110010110100110101100011";
        ram[115] = "0b10111101101101011110101100010110";
        ram[116] = "0b10111010111011111101000111100000";
        ram[117] = "0b00111101111110100011110010100111";
        ram[118] = "0b00111101101111101110011000110010";
        ram[119] = "0b10111101100101110000111111001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_8) {
meminst = new inference_conv2d_f3_3_0_8_ram("inference_conv2d_f3_3_0_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_8() {
    delete meminst;
}


};//endmodule
#endif
