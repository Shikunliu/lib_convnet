// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_9_H__
#define __inference_conv2d_f3_4_1_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_9_ram) {
        ram[0] = "0b10111101111100110010001111111111";
        ram[1] = "0b00111101100011100001110000010101";
        ram[2] = "0b10111110000101010000101001000110";
        ram[3] = "0b00111100100000100101101000011000";
        ram[4] = "0b00111101101100101110010000111110";
        ram[5] = "0b00111101001010011001011011010010";
        ram[6] = "0b00111101010011001101100011011100";
        ram[7] = "0b10111100111010011111101010100101";
        ram[8] = "0b00111101110101110010011110011010";
        ram[9] = "0b10111101000011100010010100100111";
        ram[10] = "0b10111011110110110111001010000010";
        ram[11] = "0b00111110010111000001100000101111";
        ram[12] = "0b00111101110011011001010110011010";
        ram[13] = "0b00111101100101000110000011010011";
        ram[14] = "0b00111110001011101111000010101110";
        ram[15] = "0b00111100001110011101100110101011";
        ram[16] = "0b00111100111101100011100101111000";
        ram[17] = "0b00111101110010101111000001100001";
        ram[18] = "0b10111101010001110001100011111001";
        ram[19] = "0b10111101010110001010110011010101";
        ram[20] = "0b10111101001011010000111011000001";
        ram[21] = "0b10111101101111110110011001010101";
        ram[22] = "0b00111101100011110010100000110100";
        ram[23] = "0b10111100101011111111000010111110";
        ram[24] = "0b00111101110111110000110010111011";
        ram[25] = "0b00111101000010101011001011111100";
        ram[26] = "0b00111100000001111010001100100010";
        ram[27] = "0b10111100110110000000011110010011";
        ram[28] = "0b10111100001110001101101100010011";
        ram[29] = "0b00111100011000001111111100011110";
        ram[30] = "0b00111100100110000110000001001001";
        ram[31] = "0b00111101101001000011100000110001";
        ram[32] = "0b10111101011101000011100010011100";
        ram[33] = "0b10111101010010000111101100101110";
        ram[34] = "0b10111100111111110001001101110001";
        ram[35] = "0b10111101101011111011110011110010";
        ram[36] = "0b10111101110111101111101001100001";
        ram[37] = "0b00111101101111101101000011011011";
        ram[38] = "0b10111101100110101101100110000101";
        ram[39] = "0b10111101101100100000101111000100";
        ram[40] = "0b10111101000100000110011010011010";
        ram[41] = "0b10111101101110100011000011011011";
        ram[42] = "0b10111101100001001011111111000101";
        ram[43] = "0b10111110000011111001000111100110";
        ram[44] = "0b00111101011111000100100111001000";
        ram[45] = "0b10111101100010100011011011111110";
        ram[46] = "0b00111100010110010100100011011100";
        ram[47] = "0b10111100111001000000010100101101";
        ram[48] = "0b10111011100111001101001000011110";
        ram[49] = "0b00111101101101000100110101010010";
        ram[50] = "0b00111101110110000011100000111011";
        ram[51] = "0b10111101011101100011000011111010";
        ram[52] = "0b00111110001010011010011000101111";
        ram[53] = "0b10111101001100001011001010111011";
        ram[54] = "0b00111101100010010000111010110111";
        ram[55] = "0b00111101110011000010101000111000";
        ram[56] = "0b10111101101010110101101000100001";
        ram[57] = "0b00111101001100110011110001010011";
        ram[58] = "0b10111100100000001000001010100111";
        ram[59] = "0b00111110000010100101001111111100";
        ram[60] = "0b10111101110011011110100001110001";
        ram[61] = "0b10111101000111111001110110100101";
        ram[62] = "0b00111110001010101100010101111110";
        ram[63] = "0b00111100110101001100111010001110";
        ram[64] = "0b00111100001111101010111000100110";
        ram[65] = "0b10111011110011001011011001100111";
        ram[66] = "0b10111101010001001110010011110010";
        ram[67] = "0b10111101100101011101110001011011";
        ram[68] = "0b00111100001111010001100010001111";
        ram[69] = "0b00111101000111000001010100111111";
        ram[70] = "0b10111101011110010100100100101101";
        ram[71] = "0b10111101100011000010000000100111";
        ram[72] = "0b10111101101010000011111011010110";
        ram[73] = "0b00111110000001001111100010110110";
        ram[74] = "0b10111101101001111100100010101001";
        ram[75] = "0b10111100011011000001101110110010";
        ram[76] = "0b10111100110111011010111100111101";
        ram[77] = "0b00111101100010111100101011001100";
        ram[78] = "0b00111110001100100101011101000011";
        ram[79] = "0b00111101111011000011000100010110";
        ram[80] = "0b10111101100010110101001001011110";
        ram[81] = "0b10111101001110100111111011010010";
        ram[82] = "0b10111110001011110110101111100011";
        ram[83] = "0b10111100111011000001111101000011";
        ram[84] = "0b00111101011000010010111100001010";
        ram[85] = "0b10111110000100100010111100100111";
        ram[86] = "0b00111100000011011101000001100011";
        ram[87] = "0b00111101100011111011001010000011";
        ram[88] = "0b00111100101110111010111111011001";
        ram[89] = "0b10111101100001011111001000101010";
        ram[90] = "0b10111101110111100000100010101111";
        ram[91] = "0b10111101011100101000010101011001";
        ram[92] = "0b00111101001101010011100000001011";
        ram[93] = "0b00111011011101100101010110110010";
        ram[94] = "0b10111101000011111001100110011011";
        ram[95] = "0b10111110001000101011010000001111";
        ram[96] = "0b00111100000010111101111000000101";
        ram[97] = "0b10111011101001111010111110000111";
        ram[98] = "0b00111101110111011011000010011010";
        ram[99] = "0b00111110000101100000011010111000";
        ram[100] = "0b00111101101110100100100001110011";
        ram[101] = "0b10111101110001111101100101111110";
        ram[102] = "0b10111101001100111100010001101110";
        ram[103] = "0b00111110000001000101101111110010";
        ram[104] = "0b10111101110111000101111101111100";
        ram[105] = "0b10111100101110000100110000001100";
        ram[106] = "0b00111100111011100011010001011011";
        ram[107] = "0b10111110000000111011011111011000";
        ram[108] = "0b00111101010000100110001100011100";
        ram[109] = "0b10111100000101110000100011111011";
        ram[110] = "0b00111101000011101111001011100010";
        ram[111] = "0b00111101101111011101000010100011";
        ram[112] = "0b10111100001000111010010110010111";
        ram[113] = "0b10111101001101001111011111011111";
        ram[114] = "0b00111101101100000101110110110001";
        ram[115] = "0b00111101100111001101011100101110";
        ram[116] = "0b00111101111000111111111011100011";
        ram[117] = "0b00111110001001111001101100110101";
        ram[118] = "0b00111101101010001110000010101111";
        ram[119] = "0b10111100010001110101011011010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_9) {
meminst = new inference_conv2d_f3_4_1_9_ram("inference_conv2d_f3_4_1_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_9() {
    delete meminst;
}


};//endmodule
#endif
