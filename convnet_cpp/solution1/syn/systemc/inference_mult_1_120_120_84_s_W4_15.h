// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_15_H__
#define __inference_mult_1_120_120_84_s_W4_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_15_ram) {
        ram[0] = "0b00111101011011101001100010110101";
        ram[1] = "0b00111101101010100000000111101111";
        ram[2] = "0b10111011101100110010001111101111";
        ram[3] = "0b10111100100000110010101111001111";
        ram[4] = "0b00111010101110101101111111100101";
        ram[5] = "0b00111101100000111000110001101111";
        ram[6] = "0b10111101001111001011101000110000";
        ram[7] = "0b00111100011100101010001010110101";
        ram[8] = "0b00111110000000000111010110110100";
        ram[9] = "0b00111101100101001101110010000001";
        ram[10] = "0b00111100100011011000111110100000";
        ram[11] = "0b00111101100010011101110010000000";
        ram[12] = "0b10111100101100001111101100010101";
        ram[13] = "0b10111110000010001100110001010111";
        ram[14] = "0b00111110000101101011111111001011";
        ram[15] = "0b10111101111000000010100001011111";
        ram[16] = "0b00111101101100111111111111100010";
        ram[17] = "0b10111101110110011110001110000110";
        ram[18] = "0b10111101001001010010111111010000";
        ram[19] = "0b00111101000000000001000000100110";
        ram[20] = "0b10111101101011110000000100100101";
        ram[21] = "0b00111101100010101111111100111000";
        ram[22] = "0b00111101100001110000110111101001";
        ram[23] = "0b00111100111010110011011110000110";
        ram[24] = "0b00111110000101010000100001110000";
        ram[25] = "0b00111100011110100110110100011001";
        ram[26] = "0b10111101110101100111110000101000";
        ram[27] = "0b00111011001000000100011111011111";
        ram[28] = "0b00111100100110000010111111010111";
        ram[29] = "0b10111110000010000010111110010100";
        ram[30] = "0b10111101101000110111111000010001";
        ram[31] = "0b00111110000011011100110010100111";
        ram[32] = "0b00111101100011011011011110010011";
        ram[33] = "0b00111101100010011111110010111110";
        ram[34] = "0b10111110000000010110010011000111";
        ram[35] = "0b10111100000001011001111010000101";
        ram[36] = "0b00111110000011101111010110101001";
        ram[37] = "0b00111100101100000010000000100100";
        ram[38] = "0b10111011001010100111101110010100";
        ram[39] = "0b00111101101000011000100000010000";
        ram[40] = "0b10111110010001011001100001011011";
        ram[41] = "0b10111100110000110010110110110010";
        ram[42] = "0b00111101100110000011100000010011";
        ram[43] = "0b10111110000101110011110111100010";
        ram[44] = "0b00111110010111100010100110110111";
        ram[45] = "0b00111011010101011100101100100011";
        ram[46] = "0b10111110000110001000010110010000";
        ram[47] = "0b10111110000111111010000001010001";
        ram[48] = "0b00111101110101000001101101110110";
        ram[49] = "0b00111110001110011100000001100110";
        ram[50] = "0b10111100100011001001101001111000";
        ram[51] = "0b00111101011011001010111001111111";
        ram[52] = "0b00111100110111111111011101001100";
        ram[53] = "0b10111011000110100011010111110111";
        ram[54] = "0b00111100110001110011111111111011";
        ram[55] = "0b00111101100000001000101000011001";
        ram[56] = "0b10111101000010111111110010101000";
        ram[57] = "0b10111110001111101111100111011011";
        ram[58] = "0b10111101011001110011100000011101";
        ram[59] = "0b00111101101110000111110111000000";
        ram[60] = "0b00111100101010110101000010110001";
        ram[61] = "0b00111101010101101011110010001010";
        ram[62] = "0b10111100101001011000100111111101";
        ram[63] = "0b10111100000011000000011110001011";
        ram[64] = "0b10111101000101100001010011100000";
        ram[65] = "0b00111101100010100101101010100101";
        ram[66] = "0b00111101100011111011101010110000";
        ram[67] = "0b10111101110001010000011110001100";
        ram[68] = "0b10111101110011000110001000011011";
        ram[69] = "0b00111101011110110001111001101001";
        ram[70] = "0b10111100101110100001100111010111";
        ram[71] = "0b10111101011110100010111111000010";
        ram[72] = "0b10111110000001111011000101111101";
        ram[73] = "0b10111101101101001000111101100001";
        ram[74] = "0b00111110000010111110010100010001";
        ram[75] = "0b00111101111100001101101001011110";
        ram[76] = "0b10111101001110111100010110101001";
        ram[77] = "0b10111100001001110001001101101010";
        ram[78] = "0b00111110000111001111111101100101";
        ram[79] = "0b10111101110001110110101001100101";
        ram[80] = "0b00111101111100111100001111100111";
        ram[81] = "0b00111101110111100101100111110011";
        ram[82] = "0b10111110000100010010111001000001";
        ram[83] = "0b00111110000110100000101100011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_15_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_15) {
meminst = new inference_mult_1_120_120_84_s_W4_15_ram("inference_mult_1_120_120_84_s_W4_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_15() {
    delete meminst;
}


};//endmodule
#endif
