// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_78_H__
#define __inference_mult_1_120_120_84_s_W4_78_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_78_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_78_ram) {
        ram[0] = "0b00111110010110011000000011110101";
        ram[1] = "0b10111101000010010111010110010101";
        ram[2] = "0b10111101011111101010001111011111";
        ram[3] = "0b00111011010100101101001100100001";
        ram[4] = "0b00111110001111110001111110011011";
        ram[5] = "0b00111101111010100111001101110001";
        ram[6] = "0b10111101010001001000101010101001";
        ram[7] = "0b00111101001000000001100010001001";
        ram[8] = "0b00111101110010100110011100101100";
        ram[9] = "0b10111010001010000011011001011001";
        ram[10] = "0b00111100111100100100110100100100";
        ram[11] = "0b10111101100101111000110010101111";
        ram[12] = "0b00111101110011011100111111001100";
        ram[13] = "0b10111101011001010001010000000110";
        ram[14] = "0b00111101101000000011111111110111";
        ram[15] = "0b00111101101100000111111100111111";
        ram[16] = "0b00111110000110111000100110010100";
        ram[17] = "0b10111101100010010111010000101010";
        ram[18] = "0b00111101111011000011101110010010";
        ram[19] = "0b00111100011101000110100000011100";
        ram[20] = "0b10111101100011010010010010101100";
        ram[21] = "0b00111110000010110111100001000110";
        ram[22] = "0b10111110000110100110001111111010";
        ram[23] = "0b00111101101101110011000110111000";
        ram[24] = "0b10111101000011110100111010100010";
        ram[25] = "0b00111101101100001010110010001011";
        ram[26] = "0b10111101110100110001000110100101";
        ram[27] = "0b00111101100011110010011100110101";
        ram[28] = "0b10111101110010101010011101110011";
        ram[29] = "0b10111100110110010110000101100101";
        ram[30] = "0b00111110001000011110101111001000";
        ram[31] = "0b10111101101000011011010011001001";
        ram[32] = "0b00111101100001011010111000001111";
        ram[33] = "0b00111101110011101011001011010001";
        ram[34] = "0b00111101110111000101100100110010";
        ram[35] = "0b10111100001100001110010000111001";
        ram[36] = "0b10111101101000110101110011101111";
        ram[37] = "0b10111101100001000100001010100000";
        ram[38] = "0b10111110001101011010111101101100";
        ram[39] = "0b10111110001101001011111110010000";
        ram[40] = "0b10111101111000110100000110011110";
        ram[41] = "0b00111110001110101110000011000001";
        ram[42] = "0b00111101010001111010101000011000";
        ram[43] = "0b00111101100000000101000001010010";
        ram[44] = "0b00111101100101110110101100100001";
        ram[45] = "0b00111101000000101111110111000110";
        ram[46] = "0b00111110000010101001110011011100";
        ram[47] = "0b10111100101010000000101111101101";
        ram[48] = "0b10111101000111110010010100001111";
        ram[49] = "0b10111101000101100101000010100100";
        ram[50] = "0b00111101110101001101100101000000";
        ram[51] = "0b00111100110001011010111010010110";
        ram[52] = "0b00111100000101001101001111010111";
        ram[53] = "0b00111100111111000010111111000111";
        ram[54] = "0b10111100110001011111110001100100";
        ram[55] = "0b00111110000001111000011011000010";
        ram[56] = "0b10111101011011111011000001011100";
        ram[57] = "0b00111101011010111111100101001101";
        ram[58] = "0b10111110000101111010110000111111";
        ram[59] = "0b10111100101000000010001100100001";
        ram[60] = "0b10111001100111010000011011100001";
        ram[61] = "0b00111101110111110011100101001011";
        ram[62] = "0b10111110000000011010100110111001";
        ram[63] = "0b10111101010110011110010101001111";
        ram[64] = "0b10111110011000001010010101101010";
        ram[65] = "0b00111110000111000111110110100010";
        ram[66] = "0b00111101100111110001010011000001";
        ram[67] = "0b10111101101110000000100100011001";
        ram[68] = "0b00111101111111011101010101001110";
        ram[69] = "0b00111100100011101111101000111001";
        ram[70] = "0b10111101101110011010001011101111";
        ram[71] = "0b00111011001110000110010100001100";
        ram[72] = "0b10111100110101100010000100111111";
        ram[73] = "0b10111101100010010111010101010010";
        ram[74] = "0b00111101000011100110111100010100";
        ram[75] = "0b10111101010101001100100010101111";
        ram[76] = "0b00111101101110100100111111011000";
        ram[77] = "0b10111101100111100110110000010111";
        ram[78] = "0b00111101100001000100101001010101";
        ram[79] = "0b00111101001010110100101100000111";
        ram[80] = "0b10111101110001101011010111111101";
        ram[81] = "0b00111110000101011011011011000011";
        ram[82] = "0b10111110010000100010011110001101";
        ram[83] = "0b10111101111011000010011100100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_78) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_78_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_78) {
meminst = new inference_mult_1_120_120_84_s_W4_78_ram("inference_mult_1_120_120_84_s_W4_78_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_78() {
    delete meminst;
}


};//endmodule
#endif
