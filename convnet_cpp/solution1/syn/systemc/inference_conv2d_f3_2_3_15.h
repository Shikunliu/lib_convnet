// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_15_H__
#define __inference_conv2d_f3_2_3_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_15_ram) {
        ram[0] = "0b10111110000001001000110111000001";
        ram[1] = "0b00111101111010111111001000101100";
        ram[2] = "0b00111101001100010011111100100010";
        ram[3] = "0b00111110000010110100110110001100";
        ram[4] = "0b00111110000000010110010100001010";
        ram[5] = "0b00111101101100011101011000010100";
        ram[6] = "0b00111101100110110001010110011011";
        ram[7] = "0b00111101000011100100110100110101";
        ram[8] = "0b10111101011011000100110110110110";
        ram[9] = "0b00111101101000010101111101010011";
        ram[10] = "0b10111110001100100100101001101011";
        ram[11] = "0b00111101100101010001101000001110";
        ram[12] = "0b10111101001110110101010010000101";
        ram[13] = "0b10111101101011011001001100100011";
        ram[14] = "0b00111110010111101011010001100011";
        ram[15] = "0b10111101001001001001101111011100";
        ram[16] = "0b10111101111011001011110000000110";
        ram[17] = "0b00111101111010101011110101011110";
        ram[18] = "0b00111110001001000111111001001010";
        ram[19] = "0b00111101011000001110101011111100";
        ram[20] = "0b10111100110000110111000111011010";
        ram[21] = "0b00111101001011100101000011111100";
        ram[22] = "0b10111110000101010110111100110011";
        ram[23] = "0b10111101101001000110110000011000";
        ram[24] = "0b00111101101100011100010111000101";
        ram[25] = "0b00111100110010100011000011011011";
        ram[26] = "0b10111110000110001011110000010111";
        ram[27] = "0b10111101111001101111001111110101";
        ram[28] = "0b10111101111100000000101000111001";
        ram[29] = "0b10111110000011101110011011111011";
        ram[30] = "0b00111100100101010111110000110011";
        ram[31] = "0b10111101010011011001010110110101";
        ram[32] = "0b00111100110100001001111011101001";
        ram[33] = "0b00111100101001101000111001110101";
        ram[34] = "0b10111010111100111100100100111011";
        ram[35] = "0b00111100000000111101110011111010";
        ram[36] = "0b00111101011100001001010011011000";
        ram[37] = "0b10111101110111000100001100101101";
        ram[38] = "0b10111101111010101010101001111110";
        ram[39] = "0b10111101111110100011110110110100";
        ram[40] = "0b10111101111011000111011101010111";
        ram[41] = "0b10111010011111101011101010001110";
        ram[42] = "0b10111101011101111000010101110011";
        ram[43] = "0b10111101100011100111011111110000";
        ram[44] = "0b10111101110110110000001001001111";
        ram[45] = "0b10111101111100011100110100011100";
        ram[46] = "0b00111110000111011001000111101111";
        ram[47] = "0b10111100010001100101011111010011";
        ram[48] = "0b00111110001000001101110010111010";
        ram[49] = "0b00111101011101101100010100111110";
        ram[50] = "0b00111101100110100100101010110100";
        ram[51] = "0b00111101101000011110010111000001";
        ram[52] = "0b00111110000010001001010110001110";
        ram[53] = "0b00111101011001100111111011110000";
        ram[54] = "0b00111101110000010010011011000001";
        ram[55] = "0b00111100000100011001000001001011";
        ram[56] = "0b00111101000101000011100100001000";
        ram[57] = "0b00111101101011100010111011001101";
        ram[58] = "0b00111101101100100001101111101001";
        ram[59] = "0b00111101101101001111101000101101";
        ram[60] = "0b00111101011000101101001110011111";
        ram[61] = "0b00111101011000100110001101101101";
        ram[62] = "0b10111101100110000111010110101101";
        ram[63] = "0b10111101100001101100101110111111";
        ram[64] = "0b10111101000010110001001100001001";
        ram[65] = "0b00111101111000001100000001101010";
        ram[66] = "0b10111101011011010100011000011111";
        ram[67] = "0b10111110000100111010110101011100";
        ram[68] = "0b00111110000111101100001011001110";
        ram[69] = "0b00111101000010011010100010001011";
        ram[70] = "0b00111001010110010111011111100111";
        ram[71] = "0b00111110001011000111001001011100";
        ram[72] = "0b10111101101000001110101100110010";
        ram[73] = "0b10111101100010111001011110101110";
        ram[74] = "0b10111110010001000010010010100010";
        ram[75] = "0b10111101110000111101101100000110";
        ram[76] = "0b00111110001110111111111001111110";
        ram[77] = "0b00111011110010011111010010101011";
        ram[78] = "0b10111101011000101100101100111100";
        ram[79] = "0b10111110001011110000010001010111";
        ram[80] = "0b10111101100101101111100110000100";
        ram[81] = "0b10111110001000001110110110000001";
        ram[82] = "0b10111100010101100000110011100111";
        ram[83] = "0b10111101101100111111000111000111";
        ram[84] = "0b00111101100111111000000000100000";
        ram[85] = "0b00111100101100111110110100000010";
        ram[86] = "0b10111101001011000111000001010001";
        ram[87] = "0b00111100110100000100001001101101";
        ram[88] = "0b10111100011111001000101000101010";
        ram[89] = "0b10111101100110011101100001000001";
        ram[90] = "0b10111101011011100111000010100110";
        ram[91] = "0b10111101111011000010110011100100";
        ram[92] = "0b00111101111001110100100011100100";
        ram[93] = "0b10111101001111111011110101101010";
        ram[94] = "0b00111100101001100011000101011000";
        ram[95] = "0b00111101110101101110000011010010";
        ram[96] = "0b10111101111001101100110010100011";
        ram[97] = "0b00111101110100011101101101000100";
        ram[98] = "0b10111101101110011000100011100000";
        ram[99] = "0b10111110011001010010000110011011";
        ram[100] = "0b10111110000000011010011001010000";
        ram[101] = "0b10111101110010010101010111000010";
        ram[102] = "0b00111101101100001111000001110000";
        ram[103] = "0b00111100101010001100101110011011";
        ram[104] = "0b10111100010111001110011101100010";
        ram[105] = "0b00111101100001111111111110000000";
        ram[106] = "0b00111101111010111110111110001101";
        ram[107] = "0b10111101001010110011010000101100";
        ram[108] = "0b10111100101100001011010011010100";
        ram[109] = "0b10111101001000011111111001110010";
        ram[110] = "0b10111101101000110110111001110010";
        ram[111] = "0b10111101000110010000110111101110";
        ram[112] = "0b10111101110010110000100000010100";
        ram[113] = "0b00111101000000111001010011000101";
        ram[114] = "0b10111101101010110101111110110000";
        ram[115] = "0b00111100110101110110110011001110";
        ram[116] = "0b10111101101011010100011110100100";
        ram[117] = "0b10111100010000001000001100010010";
        ram[118] = "0b00111101000110011001000111010111";
        ram[119] = "0b10111110000001101010000111101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_15) {
meminst = new inference_conv2d_f3_2_3_15_ram("inference_conv2d_f3_2_3_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_15() {
    delete meminst;
}


};//endmodule
#endif
