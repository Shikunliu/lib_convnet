// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_4_H__
#define __inference_conv2d_f3_0_2_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_4_ram) {
        ram[0] = "0b00111101100010110011001011001111";
        ram[1] = "0b00111101111110101111001110100001";
        ram[2] = "0b00111011101010000010000000110000";
        ram[3] = "0b00111101000110111110010110100100";
        ram[4] = "0b00111110000010101011111001101010";
        ram[5] = "0b10111011110000011101101101010111";
        ram[6] = "0b00111110000001001111100011111001";
        ram[7] = "0b00111101010000010011001000010100";
        ram[8] = "0b10111110001100111100101010111000";
        ram[9] = "0b10111011111110000101101100110000";
        ram[10] = "0b00111101111110010111111101100011";
        ram[11] = "0b00111101110011101010011000111011";
        ram[12] = "0b10111101000111101010010101010111";
        ram[13] = "0b00111101001000101100000011011010";
        ram[14] = "0b00111101111110111010011111111100";
        ram[15] = "0b00111101111110001101011110011101";
        ram[16] = "0b10111101010101010101011111101011";
        ram[17] = "0b00111110000011001010101110000010";
        ram[18] = "0b00111100011000101011010101101100";
        ram[19] = "0b10111101101100101011111100111010";
        ram[20] = "0b00111101000100110110111101111110";
        ram[21] = "0b00111101100100001000111000100010";
        ram[22] = "0b00111101000010101010011010000010";
        ram[23] = "0b00111101100000000100001001101101";
        ram[24] = "0b10111110010000000111101010101111";
        ram[25] = "0b10111100111011000100001100011111";
        ram[26] = "0b10111101100111100001111001111110";
        ram[27] = "0b10111100111110110011100011110001";
        ram[28] = "0b10111110001100110100001010101011";
        ram[29] = "0b00111100011101000101011011101010";
        ram[30] = "0b10111100100100110100110111110000";
        ram[31] = "0b00111100101010101000011010111100";
        ram[32] = "0b10111100000111111001001110111001";
        ram[33] = "0b00111101100001111011101111010001";
        ram[34] = "0b00111110010101010010001010100111";
        ram[35] = "0b00111100111011110111010110100100";
        ram[36] = "0b00111101001000001100011100111011";
        ram[37] = "0b00111110001001001110110101110000";
        ram[38] = "0b00111101000010101111001001010010";
        ram[39] = "0b00111101011001101110111010110111";
        ram[40] = "0b10111100111101100011111010110110";
        ram[41] = "0b10111110011001101000001010110110";
        ram[42] = "0b10111101010010000101001001001001";
        ram[43] = "0b00111101100101000011101110001100";
        ram[44] = "0b10111110001100000101001010010011";
        ram[45] = "0b10111101111110110011111010011010";
        ram[46] = "0b10111101110100111110000000110111";
        ram[47] = "0b00111110000101010001000101011010";
        ram[48] = "0b10111101000010111100111001101010";
        ram[49] = "0b10111101101100010000111000011101";
        ram[50] = "0b10111101100010000001100010010000";
        ram[51] = "0b00111101111101010010111010110110";
        ram[52] = "0b10111100111110111110101011001000";
        ram[53] = "0b10111101010101010011011001011110";
        ram[54] = "0b00111101010101011001000111101000";
        ram[55] = "0b00111001111010011010101111000101";
        ram[56] = "0b10111101011010001111101010110000";
        ram[57] = "0b10111101110000000100011000011001";
        ram[58] = "0b00111101110010001100000000010011";
        ram[59] = "0b00111100000111111010001100001001";
        ram[60] = "0b10111101011001101101011001001000";
        ram[61] = "0b10111100100111101000100011101101";
        ram[62] = "0b00111101010111110001010010011000";
        ram[63] = "0b00111101101001010101100001110010";
        ram[64] = "0b10111101111100111011011011001100";
        ram[65] = "0b00111100110101001000111010011000";
        ram[66] = "0b10111100011101001111100011010000";
        ram[67] = "0b00111101011000010000011101100111";
        ram[68] = "0b10111101101001110000110000111011";
        ram[69] = "0b10111101010011010000110111101011";
        ram[70] = "0b10111101110100111011110110011101";
        ram[71] = "0b00111101011011101100100110101101";
        ram[72] = "0b10111101100001111110100111011001";
        ram[73] = "0b00111101100100111100010101101101";
        ram[74] = "0b10111100000100101111011010101000";
        ram[75] = "0b10111101110101001110111000111001";
        ram[76] = "0b00111101100101010001101001111001";
        ram[77] = "0b00111110001111001011010001101100";
        ram[78] = "0b10111100000111100001010001110011";
        ram[79] = "0b10111100110101011110100000110100";
        ram[80] = "0b10111101000111111011110110111011";
        ram[81] = "0b10111100011010011100110010111000";
        ram[82] = "0b10111010111000010001001101010110";
        ram[83] = "0b10111101110100001010000110111110";
        ram[84] = "0b10111101111001110101101010111000";
        ram[85] = "0b10111101110110000011101001010100";
        ram[86] = "0b10111101000000101100010010111100";
        ram[87] = "0b10111101101111101011011110010110";
        ram[88] = "0b00111101010000011101011010011010";
        ram[89] = "0b00111101110000001010111100101010";
        ram[90] = "0b10111101100011001010110011011111";
        ram[91] = "0b00111101101011101010111111101110";
        ram[92] = "0b10111100000111010111011101101010";
        ram[93] = "0b10111110000001001100110110111000";
        ram[94] = "0b10111101001101101001011001000100";
        ram[95] = "0b10111110010011000100000111011101";
        ram[96] = "0b10111101011001101100110100101001";
        ram[97] = "0b00111110000110101000000001001001";
        ram[98] = "0b10111101100001011101000101011000";
        ram[99] = "0b00111110000111111101100011110001";
        ram[100] = "0b10111110000110010110010011101001";
        ram[101] = "0b10111101000011101011011011001101";
        ram[102] = "0b10111101110110011001010001011011";
        ram[103] = "0b10111101101111000100111100111100";
        ram[104] = "0b10111101110110010010010010101111";
        ram[105] = "0b00111101001000001111100100111111";
        ram[106] = "0b00111101001101000010100000100110";
        ram[107] = "0b00111101101101111011000010110100";
        ram[108] = "0b10111110000110110100010011100101";
        ram[109] = "0b10111100111111011001010010000000";
        ram[110] = "0b00111101110110000010010001001111";
        ram[111] = "0b10111110000001010101110001010011";
        ram[112] = "0b10111101101100101001101110000110";
        ram[113] = "0b10111101000100001111001110001000";
        ram[114] = "0b10111101011111000110101101110001";
        ram[115] = "0b00111110000110111100111111010101";
        ram[116] = "0b00111101110000101011110011111001";
        ram[117] = "0b10111010000011110110101001100011";
        ram[118] = "0b00111101001000100010001010111010";
        ram[119] = "0b00111110001001100011000101110010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_4) {
meminst = new inference_conv2d_f3_0_2_4_ram("inference_conv2d_f3_0_2_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_4() {
    delete meminst;
}


};//endmodule
#endif
