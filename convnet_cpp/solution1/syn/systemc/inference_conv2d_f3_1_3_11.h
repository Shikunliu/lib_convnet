// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_11_H__
#define __inference_conv2d_f3_1_3_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_11_ram) {
        ram[0] = "0b10111110001011101110000100110111";
        ram[1] = "0b00111101110110001011110011100000";
        ram[2] = "0b00111110000111100011010110000011";
        ram[3] = "0b00111101110001011011011011011110";
        ram[4] = "0b00111011100011100111110001011010";
        ram[5] = "0b00111101100000011000001111101100";
        ram[6] = "0b00111101010001000011001100110110";
        ram[7] = "0b10111101110000000100110000000110";
        ram[8] = "0b10111101101110111100000011010110";
        ram[9] = "0b00111110000100101000011010110110";
        ram[10] = "0b00111101011001000111011010111101";
        ram[11] = "0b10111101101011000010100001100010";
        ram[12] = "0b10111110001000000111011100000011";
        ram[13] = "0b10111110010100111110111101101011";
        ram[14] = "0b10111101000110000110100001011100";
        ram[15] = "0b00111101101000111111001011000110";
        ram[16] = "0b10111110000001010000101001000110";
        ram[17] = "0b10111011001010001101000001101110";
        ram[18] = "0b10111011111010100011011111101101";
        ram[19] = "0b00111110011101100101101000010100";
        ram[20] = "0b00111110001011110111000100100010";
        ram[21] = "0b10111101100010001100010100001110";
        ram[22] = "0b00111101101111100101110011111101";
        ram[23] = "0b00111110000111100111111110110010";
        ram[24] = "0b00111101111101000010001101010011";
        ram[25] = "0b10111110001100110000111011000011";
        ram[26] = "0b00111110000100000101000000110111";
        ram[27] = "0b00111101110101010101001001011101";
        ram[28] = "0b00111101100110001100101110101001";
        ram[29] = "0b10111101001101010111100000011100";
        ram[30] = "0b10111110001010010101001000001001";
        ram[31] = "0b00111011111111000010101011001001";
        ram[32] = "0b10111110000100110100110110101101";
        ram[33] = "0b00111101101110010001000011111000";
        ram[34] = "0b00111101100101111111010111101000";
        ram[35] = "0b10111100101110101100110000011001";
        ram[36] = "0b10111101101101111001111100100011";
        ram[37] = "0b00111101010100101100101010101000";
        ram[38] = "0b00111101101010110111111101110101";
        ram[39] = "0b00111101100101000010101111010001";
        ram[40] = "0b00111101100111101110111011011001";
        ram[41] = "0b10111110001010110111010101100100";
        ram[42] = "0b10111100010111011101011110110111";
        ram[43] = "0b00111101100111000000000100101011";
        ram[44] = "0b10111101011000111010111101100111";
        ram[45] = "0b10111101101110011011101100001101";
        ram[46] = "0b00111101100100001000000001100110";
        ram[47] = "0b10111100000110101011100110001010";
        ram[48] = "0b10111101001000111100001011101000";
        ram[49] = "0b00111101001100010010111110111000";
        ram[50] = "0b00111110000100011000010110001100";
        ram[51] = "0b10111100111110110100100001000000";
        ram[52] = "0b00111100010001100111111110101100";
        ram[53] = "0b00111101111011110001100010000111";
        ram[54] = "0b00111101110000101111100111001010";
        ram[55] = "0b10111101011101011101010000010010";
        ram[56] = "0b10111101101100000101010110101011";
        ram[57] = "0b00111010001010110011101011101000";
        ram[58] = "0b10111101110101110011101001111001";
        ram[59] = "0b00111101000100111100110100100010";
        ram[60] = "0b00111100111011000000111000010000";
        ram[61] = "0b00111110000100110010110111110101";
        ram[62] = "0b10111101100001011111100010111000";
        ram[63] = "0b10111101100110110001000010101101";
        ram[64] = "0b10111101101001010000001000001011";
        ram[65] = "0b00111110000011100010011100011000";
        ram[66] = "0b00111101011110111011100101111111";
        ram[67] = "0b10111101100000111101110000010011";
        ram[68] = "0b10111101010101001000100010011110";
        ram[69] = "0b00111110000011110110001000110000";
        ram[70] = "0b00111110000110010111001101010100";
        ram[71] = "0b00111101000101100000010101110110";
        ram[72] = "0b10111100011111010011001001011011";
        ram[73] = "0b10111011101010111010111000101111";
        ram[74] = "0b10111011110001010110110100000111";
        ram[75] = "0b10111100001010110001111010010010";
        ram[76] = "0b00111110000111110110110010101101";
        ram[77] = "0b00111110010001001011010101010111";
        ram[78] = "0b00111011000111111101101001111011";
        ram[79] = "0b10111101111010010001011001000100";
        ram[80] = "0b10111100101001101011111110111101";
        ram[81] = "0b00111101110001101100111100001100";
        ram[82] = "0b00111110001011110100000100101001";
        ram[83] = "0b00111101110111011000101011011011";
        ram[84] = "0b10111110000111011111111111000101";
        ram[85] = "0b00111101001101101100000100001101";
        ram[86] = "0b10111110010110011101100100001010";
        ram[87] = "0b00111110001001111110010000010101";
        ram[88] = "0b10111101100101111110100010111111";
        ram[89] = "0b10111101010101011001110000010100";
        ram[90] = "0b00111100100101101110111010001111";
        ram[91] = "0b00111100100110110001111100001011";
        ram[92] = "0b00111100011001011001110000111100";
        ram[93] = "0b10111101100101000011110111110101";
        ram[94] = "0b10111110001111001101110111010111";
        ram[95] = "0b00111100111001101101101100110110";
        ram[96] = "0b10111110000011110000001100001000";
        ram[97] = "0b00111110000110010011011111010010";
        ram[98] = "0b00111101110111011110001001101001";
        ram[99] = "0b10111101101011011010010100000100";
        ram[100] = "0b00111010100101111110111111110110";
        ram[101] = "0b00111110000000000100011111010100";
        ram[102] = "0b10111100100100100000110001110010";
        ram[103] = "0b00111100100000100010000011010111";
        ram[104] = "0b00111101001100011011010010010011";
        ram[105] = "0b10111100111001101011111000010000";
        ram[106] = "0b10111101101111010101001001110001";
        ram[107] = "0b00111101100000110011110011110100";
        ram[108] = "0b10111101010000111101110110100101";
        ram[109] = "0b00111101001000111110100011000011";
        ram[110] = "0b00111100111111011100110001111111";
        ram[111] = "0b00111110000010010111101010101011";
        ram[112] = "0b10111101111011000101111100111001";
        ram[113] = "0b00111101101001011001011111101111";
        ram[114] = "0b00111101011010000111100001110101";
        ram[115] = "0b10111101100111100001000111000001";
        ram[116] = "0b00111011110101010011110101110100";
        ram[117] = "0b00111110001110111111011000011011";
        ram[118] = "0b00111101110110101110001101100001";
        ram[119] = "0b10111101110010010101000010011110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_11) {
meminst = new inference_conv2d_f3_1_3_11_ram("inference_conv2d_f3_1_3_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_11() {
    delete meminst;
}


};//endmodule
#endif
