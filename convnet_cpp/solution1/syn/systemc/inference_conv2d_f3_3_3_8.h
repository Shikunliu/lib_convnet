// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_8_H__
#define __inference_conv2d_f3_3_3_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_8_ram) {
        ram[0] = "0b00111100111111111000000111110110";
        ram[1] = "0b10111101101100101111010100111011";
        ram[2] = "0b00111101101110111010100010011101";
        ram[3] = "0b10111101111010000110100101000000";
        ram[4] = "0b10111110001000101000100011001110";
        ram[5] = "0b00111101100111111010011110110110";
        ram[6] = "0b00111110000010110000011000111110";
        ram[7] = "0b10111110010001101101110011100100";
        ram[8] = "0b00111101111000001111011101110111";
        ram[9] = "0b10111101001111010100110001000001";
        ram[10] = "0b00111101101100000001100110110001";
        ram[11] = "0b00111100111010111001111001111111";
        ram[12] = "0b10111101011101110100110111100000";
        ram[13] = "0b10111101001010001001010001110100";
        ram[14] = "0b10111101110000111011001101010110";
        ram[15] = "0b10111100001000000100101111000101";
        ram[16] = "0b00111101000010101101100110010011";
        ram[17] = "0b10111001000011101000111001010110";
        ram[18] = "0b00111101010100100101111111001111";
        ram[19] = "0b10111100101100010000100000010101";
        ram[20] = "0b10111101100000111011011000111000";
        ram[21] = "0b00111101000110101000111011110111";
        ram[22] = "0b00111101101101100101010010000110";
        ram[23] = "0b10111011011101100011110110110100";
        ram[24] = "0b10111101001100100010100011000010";
        ram[25] = "0b00111101010010110001001110001111";
        ram[26] = "0b10111100100111011111100111100110";
        ram[27] = "0b00111101100101011001011011111110";
        ram[28] = "0b10111100000010100001100011101000";
        ram[29] = "0b10111100110111010001111111001011";
        ram[30] = "0b00111101111010001011101110010000";
        ram[31] = "0b00111101110001000000100010111110";
        ram[32] = "0b00111110001000000100000111001100";
        ram[33] = "0b00111011101000011001010110010001";
        ram[34] = "0b00111101111011001001111100110000";
        ram[35] = "0b00111011110100111100101100011001";
        ram[36] = "0b10111110000110011111011100101111";
        ram[37] = "0b10111101011100110101101101000001";
        ram[38] = "0b00111110000001111111110001110110";
        ram[39] = "0b00111101101110001110110000111000";
        ram[40] = "0b00111101011010011001001111100011";
        ram[41] = "0b10111110000100110100011111101001";
        ram[42] = "0b00111100111011011000011000010101";
        ram[43] = "0b10111101001010000001000001110000";
        ram[44] = "0b10111110001010101001110011011100";
        ram[45] = "0b00111101100100000111000110111000";
        ram[46] = "0b00111101100010011100010001111101";
        ram[47] = "0b00111101011011111010100101110001";
        ram[48] = "0b10111110000110100111010111001101";
        ram[49] = "0b10111101011010010100000010100001";
        ram[50] = "0b00111101001111011111010111001111";
        ram[51] = "0b10111101101110001100011100011001";
        ram[52] = "0b10111110010010100100001101111000";
        ram[53] = "0b00111101100001000101100101100001";
        ram[54] = "0b00111100111001101000100001100000";
        ram[55] = "0b10111101011101010011010101101100";
        ram[56] = "0b10111101100000101001011111110101";
        ram[57] = "0b00111110000100011100100001100101";
        ram[58] = "0b00111100001100100111110110010110";
        ram[59] = "0b00111011001000111111101111001000";
        ram[60] = "0b10111100011001000111111111011100";
        ram[61] = "0b00111101100101110000011010000100";
        ram[62] = "0b00111100110011100001011011100100";
        ram[63] = "0b00111101000110000100101101010000";
        ram[64] = "0b10111101101101010000010010011100";
        ram[65] = "0b10111110001110000010110011110101";
        ram[66] = "0b00111100111011101111000100011010";
        ram[67] = "0b10111101010101100100101011000101";
        ram[68] = "0b00111011111011110101111011011110";
        ram[69] = "0b00111101100011101101011111100010";
        ram[70] = "0b00111101100000001000101011111101";
        ram[71] = "0b10111100001110100001011001111100";
        ram[72] = "0b00111101000000111001100101100010";
        ram[73] = "0b10111101101110101100001010011100";
        ram[74] = "0b00111101100001011110101000001010";
        ram[75] = "0b10111101110111101011011101000101";
        ram[76] = "0b00111101110010101111101010101000";
        ram[77] = "0b10111101110110101110111111110110";
        ram[78] = "0b10111100110011000010010100000111";
        ram[79] = "0b10111011010010111111101011000000";
        ram[80] = "0b10111101111011000100010001111100";
        ram[81] = "0b10111101001100111101101100010100";
        ram[82] = "0b00111100111010011110100011010010";
        ram[83] = "0b10111100010101101101001001110101";
        ram[84] = "0b10111100111100000101011010101010";
        ram[85] = "0b00111101010000111100001110111111";
        ram[86] = "0b00111101001010110110110001100000";
        ram[87] = "0b10111101110110110111111100010111";
        ram[88] = "0b00111101001100000011010011001100";
        ram[89] = "0b10111101101000100100100001010010";
        ram[90] = "0b10111101100100100011100100000011";
        ram[91] = "0b10111100110101010100000000000011";
        ram[92] = "0b10111010100101011110010010000011";
        ram[93] = "0b00111100101110011001001100110100";
        ram[94] = "0b00111011010100110101010011111100";
        ram[95] = "0b10111110010010111101010010001101";
        ram[96] = "0b10111100100100001110111011010000";
        ram[97] = "0b10111101011001000100110110100010";
        ram[98] = "0b10111100000011000010000111010111";
        ram[99] = "0b10111101111110011100010100011110";
        ram[100] = "0b10111101111110000000111111011100";
        ram[101] = "0b10111101110000111001110010100010";
        ram[102] = "0b00111101000000100010100011001111";
        ram[103] = "0b10111100001000001101110001000100";
        ram[104] = "0b00111101001011010001110001100011";
        ram[105] = "0b00111101100101011111111110100100";
        ram[106] = "0b00111101101000010001010100001001";
        ram[107] = "0b10111110000010001111000111010100";
        ram[108] = "0b10111100101100010110010101101000";
        ram[109] = "0b10111101100010111111011100100111";
        ram[110] = "0b00111101101100011100101001111101";
        ram[111] = "0b00111110001010100100100001110011";
        ram[112] = "0b00111011100000010110100000110101";
        ram[113] = "0b00111101010010000100001111101100";
        ram[114] = "0b00111101100001000110000010111000";
        ram[115] = "0b10111110000000111011110011010011";
        ram[116] = "0b00111101111101011001110011010000";
        ram[117] = "0b10111100001000111010011011101110";
        ram[118] = "0b10111101101010101001100110110111";
        ram[119] = "0b10111101100001000010000010001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_8) {
meminst = new inference_conv2d_f3_3_3_8_ram("inference_conv2d_f3_3_3_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_8() {
    delete meminst;
}


};//endmodule
#endif
