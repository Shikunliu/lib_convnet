// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_14_H__
#define __inference_conv2d_f3_1_0_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_14_ram) {
        ram[0] = "0b10111101010111010100101010010100";
        ram[1] = "0b00111101111001001000111010001010";
        ram[2] = "0b00111100101110010110001011000010";
        ram[3] = "0b10111101100001011111010100001101";
        ram[4] = "0b10111100000110101010001011000100";
        ram[5] = "0b00111101100111001100011100100011";
        ram[6] = "0b10111101100010100010010101111011";
        ram[7] = "0b10111010110101101000000111010111";
        ram[8] = "0b00111110000010101010100000100010";
        ram[9] = "0b00111110000110001011000001001011";
        ram[10] = "0b00111101110010110001001111000101";
        ram[11] = "0b00111110000001110111111101101011";
        ram[12] = "0b00111100101111110011000100111001";
        ram[13] = "0b10111100110100011010110111011101";
        ram[14] = "0b10111101010101100100110110011010";
        ram[15] = "0b10111011111010010010111000010111";
        ram[16] = "0b10111101110111110101011010101000";
        ram[17] = "0b00111110010010001111000101001110";
        ram[18] = "0b10111101101111110101000111110000";
        ram[19] = "0b00111100001110001101100101100101";
        ram[20] = "0b10111101001010110110110101101100";
        ram[21] = "0b10111101001011111000011110010010";
        ram[22] = "0b00111100110010001110001011001000";
        ram[23] = "0b10111101101010010101101000110111";
        ram[24] = "0b10111101000101111110001111101101";
        ram[25] = "0b00111100001011111011010101100101";
        ram[26] = "0b10111110000101011001100011100001";
        ram[27] = "0b10111110000101101101110001011101";
        ram[28] = "0b10111110011001011110011110000110";
        ram[29] = "0b00111101000010100101011100000110";
        ram[30] = "0b10111101101101110100100101010000";
        ram[31] = "0b00111101001100101100111000111001";
        ram[32] = "0b10111110001101111011100101011010";
        ram[33] = "0b10111110000001001100110010101011";
        ram[34] = "0b00111110001100010010010011010001";
        ram[35] = "0b00111011101100111010011000001010";
        ram[36] = "0b00111101010010100100001001000011";
        ram[37] = "0b00111110100011010110010111100100";
        ram[38] = "0b00111110010011011110001010101100";
        ram[39] = "0b10111110000100111011010011110110";
        ram[40] = "0b00111100111101111111111101001011";
        ram[41] = "0b10111100100111011111010101001001";
        ram[42] = "0b00111101101011110011100101001011";
        ram[43] = "0b10111101110001010110100001100010";
        ram[44] = "0b10111101111000100011010100101111";
        ram[45] = "0b10111100100000010001011111000011";
        ram[46] = "0b10111100111101000000101011111111";
        ram[47] = "0b10111110011000000111101110111011";
        ram[48] = "0b10111101000000010011001010011011";
        ram[49] = "0b10111110000011010101010010010111";
        ram[50] = "0b00111110000100101110011011101011";
        ram[51] = "0b10111100111010110110000010100001";
        ram[52] = "0b10111101111010010111110100000111";
        ram[53] = "0b00111101111100110001011011100011";
        ram[54] = "0b00111100111010001101110111011010";
        ram[55] = "0b10111110001100000010100001011111";
        ram[56] = "0b00111100011010100111110101001100";
        ram[57] = "0b10111101010011000100001110100101";
        ram[58] = "0b10111101011100011001111111010000";
        ram[59] = "0b10111101001111100011000010111101";
        ram[60] = "0b10111110000110101001101100000111";
        ram[61] = "0b00111101100111010011111111101111";
        ram[62] = "0b00111101101010010011011111000101";
        ram[63] = "0b00111110000110011100010101100001";
        ram[64] = "0b10111100010100100000000101010101";
        ram[65] = "0b10111101000110000000010000000011";
        ram[66] = "0b10111110000100100010101011110101";
        ram[67] = "0b00111100101111010100011000010001";
        ram[68] = "0b00111101111010011100100110010011";
        ram[69] = "0b00111110000010101011010001110100";
        ram[70] = "0b10111101110010011011001001001011";
        ram[71] = "0b00111100010000101100011111111100";
        ram[72] = "0b00111101101011001101101001000110";
        ram[73] = "0b10111101100010011001110100101010";
        ram[74] = "0b10111101100001010010110110101010";
        ram[75] = "0b00111101010011000010011111011100";
        ram[76] = "0b10111110000011111000000000010011";
        ram[77] = "0b10111110000111110000000010101100";
        ram[78] = "0b00111101101011110010101111010010";
        ram[79] = "0b00111100100001110011110010100000";
        ram[80] = "0b10111101110100111001000100001100";
        ram[81] = "0b00111110000011001110101110111100";
        ram[82] = "0b10111101011111100101110101101001";
        ram[83] = "0b10111110010000001101100000000010";
        ram[84] = "0b00111110000000111010001000010110";
        ram[85] = "0b00111101000101110110000100010000";
        ram[86] = "0b10111110010001100111110011110010";
        ram[87] = "0b00111110000101011100100101100000";
        ram[88] = "0b10111101000101000000101011111111";
        ram[89] = "0b00111101011101100111101011001011";
        ram[90] = "0b10111100110010100101111011111111";
        ram[91] = "0b10111110010001001111001010101110";
        ram[92] = "0b00111110011101000100110000111000";
        ram[93] = "0b00111011100010001010100010110001";
        ram[94] = "0b10111110000010011000111100011101";
        ram[95] = "0b10111101110001100111000101011100";
        ram[96] = "0b10111101100000110110000001100101";
        ram[97] = "0b00111101010011100010111010110010";
        ram[98] = "0b00111101111100000111111000010111";
        ram[99] = "0b00111110000010111001001101000111";
        ram[100] = "0b00111101101011100110100001011110";
        ram[101] = "0b10111101110101101001111011000011";
        ram[102] = "0b00111100111011000000100011010010";
        ram[103] = "0b00111110100010111101111110001111";
        ram[104] = "0b00111101011110011011100110010101";
        ram[105] = "0b00111100110111010010101001111110";
        ram[106] = "0b00111101010110010100111000011010";
        ram[107] = "0b10111101111100111000000001000101";
        ram[108] = "0b00111101011000001110100001000010";
        ram[109] = "0b00111101010111100101101110100000";
        ram[110] = "0b00111110000101100110001101000001";
        ram[111] = "0b00111101101000100011111001000001";
        ram[112] = "0b00111010111001101110001100100011";
        ram[113] = "0b00111101000100110101101000110101";
        ram[114] = "0b10111100110101001100011101101101";
        ram[115] = "0b10111101100011010011111011111101";
        ram[116] = "0b00111110000110010010111000011111";
        ram[117] = "0b00111100111101010000110101011110";
        ram[118] = "0b00111110000100010010110101110111";
        ram[119] = "0b10111101101011010111011000110011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_14) {
meminst = new inference_conv2d_f3_1_0_14_ram("inference_conv2d_f3_1_0_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_14() {
    delete meminst;
}


};//endmodule
#endif
