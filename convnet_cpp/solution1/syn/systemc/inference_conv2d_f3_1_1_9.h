// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_9_H__
#define __inference_conv2d_f3_1_1_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_9_ram) {
        ram[0] = "0b10111101110111000100000110011010";
        ram[1] = "0b10111101101111111000110111011101";
        ram[2] = "0b10111101010011100000100111100100";
        ram[3] = "0b00111101001100110000110101110100";
        ram[4] = "0b00111100111011001101010000111111";
        ram[5] = "0b10111110000100011011110000010010";
        ram[6] = "0b00111110000010110000011111010001";
        ram[7] = "0b10111100110000100100101100110100";
        ram[8] = "0b10111101101101010000001000001011";
        ram[9] = "0b00111110000100001010110101000111";
        ram[10] = "0b10111110000101101001000010011011";
        ram[11] = "0b10111110000001000001111000010101";
        ram[12] = "0b00111110000011100110111010101000";
        ram[13] = "0b00111100110001110000000110110010";
        ram[14] = "0b10111110000010010010011011001000";
        ram[15] = "0b00111101101000110010111010100100";
        ram[16] = "0b00111110010010011000010010100001";
        ram[17] = "0b00111110000000100110001001000101";
        ram[18] = "0b10111101010001111010100111111110";
        ram[19] = "0b00111101110110110111101111110010";
        ram[20] = "0b10111100101010111000111001011001";
        ram[21] = "0b10111101111010011100000000100011";
        ram[22] = "0b10111010101100110110011101001011";
        ram[23] = "0b00111110001111011110011001011000";
        ram[24] = "0b00111101111011101001111001011110";
        ram[25] = "0b00111101110111101000111001100001";
        ram[26] = "0b10111010011011000001001001011010";
        ram[27] = "0b00111110000010001000100101111111";
        ram[28] = "0b00111011110000111100100110000011";
        ram[29] = "0b00111101110111100011100111110111";
        ram[30] = "0b10111101000111110011001110100010";
        ram[31] = "0b10111110001000011100000010000111";
        ram[32] = "0b00111101110011110000111010010001";
        ram[33] = "0b00111100000111000111001101110011";
        ram[34] = "0b10111101111001010101100101110001";
        ram[35] = "0b10111101100011111001100110011011";
        ram[36] = "0b00111110000101001101001110111111";
        ram[37] = "0b00111100001000000000110111100111";
        ram[38] = "0b00111011101001011100101100101011";
        ram[39] = "0b00111101101101100010111111010010";
        ram[40] = "0b00111110000100100100110011000111";
        ram[41] = "0b00111011110100010111001001111001";
        ram[42] = "0b00111011101111011011001100111111";
        ram[43] = "0b10111101100011101101000011101001";
        ram[44] = "0b00111101111101110100001011011101";
        ram[45] = "0b10111110000011100100111101110110";
        ram[46] = "0b10111100110110001010011000011111";
        ram[47] = "0b00111101011011011111111101100111";
        ram[48] = "0b10111101111010110000010000100101";
        ram[49] = "0b10111101000010110000111011010111";
        ram[50] = "0b10111100111101101100101101101110";
        ram[51] = "0b00111110001101110000100111111010";
        ram[52] = "0b00111101110100000010111101110011";
        ram[53] = "0b10111011000011000001111010110010";
        ram[54] = "0b00111110000100101111100010111110";
        ram[55] = "0b10111101000100111010101110010100";
        ram[56] = "0b10111100000001011011110001111000";
        ram[57] = "0b00111101100011000001000010010101";
        ram[58] = "0b10111011110100101001001110001011";
        ram[59] = "0b00111101001111010101101001101001";
        ram[60] = "0b10111101101100011011100100010101";
        ram[61] = "0b00111011100000011101010110101110";
        ram[62] = "0b10111101100000011100110110110000";
        ram[63] = "0b00111110000100101111001100111101";
        ram[64] = "0b00111101011111011101011110110111";
        ram[65] = "0b00111101001001100000001011100100";
        ram[66] = "0b00111011011110111011001100010100";
        ram[67] = "0b10111101110001001010100000010011";
        ram[68] = "0b00111101111010010111000011111000";
        ram[69] = "0b00111100101000101011000100000101";
        ram[70] = "0b00111011101011011110011000101101";
        ram[71] = "0b00111100001010111001001001010101";
        ram[72] = "0b00111101101110011011110101101001";
        ram[73] = "0b00111100111100111000110011000000";
        ram[74] = "0b10111101011011110101111110011111";
        ram[75] = "0b00111101011110010010110011111000";
        ram[76] = "0b10111110001011110000011010110011";
        ram[77] = "0b10111101010000010011100001111010";
        ram[78] = "0b00111011110101101100010111011111";
        ram[79] = "0b10111101110101001010111111010101";
        ram[80] = "0b10111110001000000001101111001010";
        ram[81] = "0b00111101100100000001101101011110";
        ram[82] = "0b00111110011011110010101011100000";
        ram[83] = "0b00111100101100101010011100011100";
        ram[84] = "0b00111100001110000010011110001111";
        ram[85] = "0b00111101110001011010001000001110";
        ram[86] = "0b00111010101111000100100110011101";
        ram[87] = "0b10111100100100010111000100001100";
        ram[88] = "0b10111100111001111111000101001011";
        ram[89] = "0b10111101000011000100000100000110";
        ram[90] = "0b10111101100100111100000100010011";
        ram[91] = "0b00111100011010011000110111001110";
        ram[92] = "0b10111100101010111001011010111100";
        ram[93] = "0b10111101111101000100111111100011";
        ram[94] = "0b00111101100111000000001010100010";
        ram[95] = "0b00111101100000110101111000100100";
        ram[96] = "0b10111101000100101010001110100110";
        ram[97] = "0b00111100100111000000010000001101";
        ram[98] = "0b00111110000111010011110000110110";
        ram[99] = "0b00111101100000101111110100011000";
        ram[100] = "0b10111101001000101001111101100111";
        ram[101] = "0b00111101011011010111010000100111";
        ram[102] = "0b10111110001000011110010011110111";
        ram[103] = "0b10111101111100101001100000000011";
        ram[104] = "0b10111110000111011011100001111000";
        ram[105] = "0b00111101000100111110110100000010";
        ram[106] = "0b10111101010100011000100101100000";
        ram[107] = "0b00111101100000111110001110101101";
        ram[108] = "0b10111101110001001011111011111100";
        ram[109] = "0b00111100001100010110000001100000";
        ram[110] = "0b00111101000110111010101100000111";
        ram[111] = "0b00111101110010100010111010001101";
        ram[112] = "0b10111100100110000001100001011010";
        ram[113] = "0b10111101010111100101110100011000";
        ram[114] = "0b00111101001001111010001111001110";
        ram[115] = "0b00111100101101010010000010101001";
        ram[116] = "0b00111110010110001100000101010101";
        ram[117] = "0b00111011111010010000101101011100";
        ram[118] = "0b10111101001000100001111000000010";
        ram[119] = "0b10111101001110000100010010011010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_9) {
meminst = new inference_conv2d_f3_1_1_9_ram("inference_conv2d_f3_1_1_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_9() {
    delete meminst;
}


};//endmodule
#endif
