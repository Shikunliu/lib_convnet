// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_12_H__
#define __inference_conv2d_f3_1_0_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_12_ram) {
        ram[0] = "0b10111101100111000100000101111111";
        ram[1] = "0b00111101111110001000011111101100";
        ram[2] = "0b00111110000000000101000110000111";
        ram[3] = "0b10111101101001111111100100101000";
        ram[4] = "0b00111101010011110001111001100110";
        ram[5] = "0b00111100100000000110111000011010";
        ram[6] = "0b00111101110111011111011111101000";
        ram[7] = "0b10111101101110011100001000100001";
        ram[8] = "0b00111101011011100100001111000101";
        ram[9] = "0b10111101010010010111011011010111";
        ram[10] = "0b00111101101001110010011000111101";
        ram[11] = "0b10111101100111011111110110010010";
        ram[12] = "0b10111101000010111101111011100001";
        ram[13] = "0b10111101111010100111011100011101";
        ram[14] = "0b10111100010011010100001000111110";
        ram[15] = "0b10111110001001111100111101011111";
        ram[16] = "0b00111100100111101000111100000010";
        ram[17] = "0b10111110000110101100101010111100";
        ram[18] = "0b00111110010001011101011110001000";
        ram[19] = "0b10111101010100010000011101011010";
        ram[20] = "0b00111101000001001000101100101111";
        ram[21] = "0b00111101101101011101000111010001";
        ram[22] = "0b10111110001010010101000010111001";
        ram[23] = "0b10111101101101001100001100101110";
        ram[24] = "0b00111110010001010000000110011111";
        ram[25] = "0b10111100111001110100101000100111";
        ram[26] = "0b00111101100110100011010101011110";
        ram[27] = "0b00111101101001000000111010101011";
        ram[28] = "0b00111101110100100001010001101010";
        ram[29] = "0b00111101000101000010111001010101";
        ram[30] = "0b00111101101001101101100010111111";
        ram[31] = "0b00111110000100010100000101100011";
        ram[32] = "0b00111101100110110100010111010111";
        ram[33] = "0b00111100001001001101101100010110";
        ram[34] = "0b00111101101101111000110110101110";
        ram[35] = "0b10111101100100100010110010010110";
        ram[36] = "0b10111101010000001010000101111011";
        ram[37] = "0b10111110001100100001001101011110";
        ram[38] = "0b10111101101101111101110010110000";
        ram[39] = "0b00111101100110111000100100001101";
        ram[40] = "0b00111101100000110100010010001110";
        ram[41] = "0b10111101110001001100101010100000";
        ram[42] = "0b10111101001101001010000111100011";
        ram[43] = "0b00111110001011000001010101001101";
        ram[44] = "0b00111101010000011110101011110001";
        ram[45] = "0b10111100101010110111111110101011";
        ram[46] = "0b10111100100011001011010001111001";
        ram[47] = "0b10111101110001010111010110001011";
        ram[48] = "0b10111110000111100010011101011011";
        ram[49] = "0b10111101010000101111000100010110";
        ram[50] = "0b00111100111100110111000101111100";
        ram[51] = "0b10111101000100101101111000001110";
        ram[52] = "0b00111100010101110010001011111101";
        ram[53] = "0b00111101110111000000111000111001";
        ram[54] = "0b00111101101101101010011011111110";
        ram[55] = "0b10111100110100100000001100111000";
        ram[56] = "0b10111100010110110000111010101111";
        ram[57] = "0b10111100100101100110000101101011";
        ram[58] = "0b10111101100101101110111110110110";
        ram[59] = "0b10111101111010000100100010111111";
        ram[60] = "0b00111110000011101010001010010000";
        ram[61] = "0b10111110000110001101101001111111";
        ram[62] = "0b10111100111110110011110111000100";
        ram[63] = "0b00111101110000010000111100001111";
        ram[64] = "0b10111110000011100101110011010101";
        ram[65] = "0b00111101000011101001100110001011";
        ram[66] = "0b00111101110101100011011001101101";
        ram[67] = "0b00111100101100000111101111001001";
        ram[68] = "0b00111101111111101001111100100111";
        ram[69] = "0b10111101010010100010010011100111";
        ram[70] = "0b10111110001110100110001110110111";
        ram[71] = "0b10111101011010001100100010101100";
        ram[72] = "0b10111101010000100011100011110101";
        ram[73] = "0b00111101101000001010110010011000";
        ram[74] = "0b10111101111011110111100110000101";
        ram[75] = "0b00111101011000111010100100000010";
        ram[76] = "0b10111101110110100111110100100100";
        ram[77] = "0b10111101110100010001110001101101";
        ram[78] = "0b00111101110000101010000100110000";
        ram[79] = "0b00111101101110101110100010000100";
        ram[80] = "0b10111101100101001000000000000101";
        ram[81] = "0b00111011011110101111111011100100";
        ram[82] = "0b10111110010110011110101101100100";
        ram[83] = "0b00111101100101010110101010010110";
        ram[84] = "0b10111101101000000111011110010111";
        ram[85] = "0b10111110001010000000010010010110";
        ram[86] = "0b10111101101000110110101110000010";
        ram[87] = "0b00111101101010100000000000011001";
        ram[88] = "0b10111100110010011101101110110110";
        ram[89] = "0b00111110000001010001101100001101";
        ram[90] = "0b00111110001000110011000011010111";
        ram[91] = "0b00111101110011010111100011000100";
        ram[92] = "0b00111101100110011001010100010111";
        ram[93] = "0b10111101100110011110100010001111";
        ram[94] = "0b10111100101011111001011011000111";
        ram[95] = "0b10111101110110011101100110010000";
        ram[96] = "0b10111101110111001000010000110000";
        ram[97] = "0b10111010100100000110111010100011";
        ram[98] = "0b10111101111111101100110011000100";
        ram[99] = "0b00111101010000101100010110010010";
        ram[100] = "0b10111100111111101100111011011101";
        ram[101] = "0b10111011101011100001010111101000";
        ram[102] = "0b10111101100100100100001110110101";
        ram[103] = "0b10111101000110101100011011000000";
        ram[104] = "0b10111101010001001011001111000100";
        ram[105] = "0b00111011101011000100111001111101";
        ram[106] = "0b00111110000010100011101111011110";
        ram[107] = "0b00111101011000011011101001001010";
        ram[108] = "0b00111110001101100000001111010101";
        ram[109] = "0b10111101101011001111011110010101";
        ram[110] = "0b00111101010000110000111101100100";
        ram[111] = "0b10111011100101110010100110101000";
        ram[112] = "0b10111110000000110111100000100101";
        ram[113] = "0b10111011000001011100000011110101";
        ram[114] = "0b00111110000011100101101111001000";
        ram[115] = "0b00111110000011100111001100011101";
        ram[116] = "0b10111101110010001110011001100110";
        ram[117] = "0b10111101000110000001001111110011";
        ram[118] = "0b10111101101101011001000111011011";
        ram[119] = "0b00111101100100101111101000001101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_12) {
meminst = new inference_conv2d_f3_1_0_12_ram("inference_conv2d_f3_1_0_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_12() {
    delete meminst;
}


};//endmodule
#endif
