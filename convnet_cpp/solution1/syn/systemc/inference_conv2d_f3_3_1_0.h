// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_0_H__
#define __inference_conv2d_f3_3_1_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_0_ram) {
        ram[0] = "0b10111101001011100100010100000111";
        ram[1] = "0b00111101101110000100110001001111";
        ram[2] = "0b10111110001101010011101000111111";
        ram[3] = "0b00111101100001000011100010000001";
        ram[4] = "0b00111100110100011111111110100111";
        ram[5] = "0b00111110000000111100011101010000";
        ram[6] = "0b00111100101101000001000110110101";
        ram[7] = "0b10111110001110011011001011000100";
        ram[8] = "0b10111100111011000111110110100010";
        ram[9] = "0b00111101010010001010010101110000";
        ram[10] = "0b00111101101010011111100111011100";
        ram[11] = "0b10111100110010111001111100111011";
        ram[12] = "0b00111101101001001001111001010010";
        ram[13] = "0b10111100010101100010000100001001";
        ram[14] = "0b10111101110011111100011100011101";
        ram[15] = "0b00111101010100011101001110111000";
        ram[16] = "0b00111101100100101011111100010010";
        ram[17] = "0b00111101101011110000011011110111";
        ram[18] = "0b00111110000010011010011010110101";
        ram[19] = "0b00111110000011010110001010111111";
        ram[20] = "0b10111100001110111000001111001111";
        ram[21] = "0b10111101001010111101111000100101";
        ram[22] = "0b00111101110011001100101101010101";
        ram[23] = "0b10111110000011011011111011000010";
        ram[24] = "0b00111110000000110100010110001101";
        ram[25] = "0b00111011110000001101001011101110";
        ram[26] = "0b00111100000001100011000010010001";
        ram[27] = "0b00111110001100100000100001011011";
        ram[28] = "0b00111101110001001000011110111010";
        ram[29] = "0b00111110000101011000000000111101";
        ram[30] = "0b10111101101011010001001011001011";
        ram[31] = "0b00111100011101101000000111010010";
        ram[32] = "0b00111101000110110101110101010100";
        ram[33] = "0b00111110000001111101111001010001";
        ram[34] = "0b10111101111111111011111001110111";
        ram[35] = "0b00111101101011000010101010100011";
        ram[36] = "0b00111100101000011101000101000001";
        ram[37] = "0b10111110000001101111101010000011";
        ram[38] = "0b10111101010100001110000001011000";
        ram[39] = "0b10111101110101011111001011001011";
        ram[40] = "0b00111110000000010011111100000111";
        ram[41] = "0b00111100100010101111000110010110";
        ram[42] = "0b00111110001010100010001100111010";
        ram[43] = "0b10111101100010010000111011101101";
        ram[44] = "0b00111110001110010101010010101000";
        ram[45] = "0b00111101000111111100101111100011";
        ram[46] = "0b10111101110001111000001001101000";
        ram[47] = "0b00111101000000000010100110000110";
        ram[48] = "0b10111100000111001011101001010110";
        ram[49] = "0b00111101000000101011101110011100";
        ram[50] = "0b10111101011010011110101100100000";
        ram[51] = "0b10111100110000101101101010100110";
        ram[52] = "0b10111101100111101101001000111000";
        ram[53] = "0b00111101111001110000111100111001";
        ram[54] = "0b10111011001011111000100101000101";
        ram[55] = "0b00111011110110011101111011000100";
        ram[56] = "0b10111101001011101100100101000001";
        ram[57] = "0b10111110000001100100111000000101";
        ram[58] = "0b10111100110100010001111100001100";
        ram[59] = "0b10111101101110111100100110100101";
        ram[60] = "0b10111101000011010111001100000000";
        ram[61] = "0b00111101100101111101110100110111";
        ram[62] = "0b10111101110010011101011110111010";
        ram[63] = "0b00111110001011001110010011101011";
        ram[64] = "0b00111101001000110010010100011001";
        ram[65] = "0b10111101111010001111010010110110";
        ram[66] = "0b00111110011010001100001101101110";
        ram[67] = "0b00111110100001011011011111110001";
        ram[68] = "0b00111110000101011110101011101110";
        ram[69] = "0b00111101101110011011010110110100";
        ram[70] = "0b10111110000110001111100110110001";
        ram[71] = "0b10111101101110011110001001000100";
        ram[72] = "0b00111101111111111000101010001111";
        ram[73] = "0b00111100101101001100010000101101";
        ram[74] = "0b00111011101010000100000100111101";
        ram[75] = "0b00111101111111101011010010100110";
        ram[76] = "0b10111101100000010010100100000010";
        ram[77] = "0b00111101000110011010011100000110";
        ram[78] = "0b10111100110110001010101010111100";
        ram[79] = "0b10111101101010111010100111111010";
        ram[80] = "0b00111001101111011111111000010111";
        ram[81] = "0b00111100111111011101100111101011";
        ram[82] = "0b10111100100100011101100110110010";
        ram[83] = "0b00111110010101110101111011101010";
        ram[84] = "0b00111100101111000110001011110010";
        ram[85] = "0b10111101110000110000111001110011";
        ram[86] = "0b10111110001001111011101100110000";
        ram[87] = "0b00111110010010000111010110010010";
        ram[88] = "0b10111101100001000110010011000001";
        ram[89] = "0b00111101011101011101000110001110";
        ram[90] = "0b00111110000011100001111100111010";
        ram[91] = "0b00111100101010000010101001010110";
        ram[92] = "0b10111110011100111101110110011000";
        ram[93] = "0b00111100100011000000011000110011";
        ram[94] = "0b10111110000000010100011110101110";
        ram[95] = "0b00111101000001100100110100100001";
        ram[96] = "0b00111110001111001000000011000111";
        ram[97] = "0b00111101111001001100000001011001";
        ram[98] = "0b00111101110110101001001010100011";
        ram[99] = "0b10111101010001010001000101100111";
        ram[100] = "0b00111101010101001111000001010010";
        ram[101] = "0b10111100110000101011011000101000";
        ram[102] = "0b00111110001111011111001110110110";
        ram[103] = "0b00111101001011110101010111111001";
        ram[104] = "0b00111101110001111011001110110001";
        ram[105] = "0b10111101011010100100010110011110";
        ram[106] = "0b00111101100000000001100010110010";
        ram[107] = "0b00111100000100110100011100001111";
        ram[108] = "0b10111100111011010000111000100000";
        ram[109] = "0b10111100001010000111011001000001";
        ram[110] = "0b00111101101001001001000011001100";
        ram[111] = "0b10111101011001010010100001111001";
        ram[112] = "0b10111101111111011100101001001011";
        ram[113] = "0b10111011011111110100011110011110";
        ram[114] = "0b10111101110100111111100101100010";
        ram[115] = "0b10111110011010001110011100010100";
        ram[116] = "0b10111101001110100101010101100110";
        ram[117] = "0b10111101100110100011001111011000";
        ram[118] = "0b00111010001110011110001000010111";
        ram[119] = "0b00111101001111100111000100111010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_0) {
meminst = new inference_conv2d_f3_3_1_0_ram("inference_conv2d_f3_3_1_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_0() {
    delete meminst;
}


};//endmodule
#endif
