// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_12_H__
#define __inference_conv2d_f3_3_1_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_12_ram) {
        ram[0] = "0b00111100011101110111110100001111";
        ram[1] = "0b00111110000101011100110001000010";
        ram[2] = "0b00111101001100111110100101010110";
        ram[3] = "0b10111100111111000100100000011010";
        ram[4] = "0b10111100111111111111111101011111";
        ram[5] = "0b00111101001010110101100000111110";
        ram[6] = "0b10111101000111011011111111101010";
        ram[7] = "0b10111100010001010011011011010110";
        ram[8] = "0b00111011110111110010011000010110";
        ram[9] = "0b10111101100000000110000110000100";
        ram[10] = "0b00111011010111100111101001110100";
        ram[11] = "0b00111101100000111010010111011101";
        ram[12] = "0b10111100011101101110010001100011";
        ram[13] = "0b00111011101100110100010100100111";
        ram[14] = "0b10111101011101010111100111001010";
        ram[15] = "0b10111101010100010100011100011010";
        ram[16] = "0b10111110001100101010011101111010";
        ram[17] = "0b10111110001000110001011110101101";
        ram[18] = "0b00111101010111001000011001001001";
        ram[19] = "0b00111110000001011011001101011011";
        ram[20] = "0b00111101111101011010111010100011";
        ram[21] = "0b00111101110000101110001101001100";
        ram[22] = "0b00111110001001010011110100100001";
        ram[23] = "0b10111101111111111110101110001110";
        ram[24] = "0b10111110000000001101111101011001";
        ram[25] = "0b00111101001011010110000010100110";
        ram[26] = "0b00111101110011001001011010110010";
        ram[27] = "0b10111010110101010101101110010010";
        ram[28] = "0b10111101111000111100100101101001";
        ram[29] = "0b10111101000011000111000111100011";
        ram[30] = "0b10111100100010100010010001000110";
        ram[31] = "0b10111100001110010110000001110100";
        ram[32] = "0b00111100101110010010110010100111";
        ram[33] = "0b00111101011011101100011001010010";
        ram[34] = "0b00111101000011001001111101100110";
        ram[35] = "0b10111101001100101111110011000111";
        ram[36] = "0b00111001001110110111010010111110";
        ram[37] = "0b00111101100101001000101010011100";
        ram[38] = "0b00111110001110101001110101100010";
        ram[39] = "0b10111110000101101110001010101000";
        ram[40] = "0b00111101100000001000000100111101";
        ram[41] = "0b00111010100100000111100001011110";
        ram[42] = "0b10111101001100111000010100011000";
        ram[43] = "0b00111100110000011011001001010010";
        ram[44] = "0b10111011110000010100000110010100";
        ram[45] = "0b00111101101111000111110100000001";
        ram[46] = "0b00111100101011101010110101011101";
        ram[47] = "0b00111101111101011101100100011011";
        ram[48] = "0b10111101110101101000101001010000";
        ram[49] = "0b00111110001111000111110011011001";
        ram[50] = "0b10111110000001111110011010110100";
        ram[51] = "0b00111100100000010111110110101111";
        ram[52] = "0b10111101100001110100001000010100";
        ram[53] = "0b00111101110011000100110101011000";
        ram[54] = "0b00111110010001100010101000011011";
        ram[55] = "0b10111100010111100110100001101011";
        ram[56] = "0b00111101100101110100001010001100";
        ram[57] = "0b10111100001101111111101110000100";
        ram[58] = "0b10111100011100001101000110001111";
        ram[59] = "0b10111101111000110100011101100011";
        ram[60] = "0b00111101011110110011111010110101";
        ram[61] = "0b10111101100011111011110000110110";
        ram[62] = "0b10111101010111100001010011110100";
        ram[63] = "0b10111110010001010111001011011110";
        ram[64] = "0b00111110000100011110011110010110";
        ram[65] = "0b10111100101100000000111100100111";
        ram[66] = "0b00111100000010111000111010001001";
        ram[67] = "0b00111100110101101110010101010101";
        ram[68] = "0b00111100101010011101110011011110";
        ram[69] = "0b00111101101001110110001000011100";
        ram[70] = "0b10111101101001010101010110011101";
        ram[71] = "0b10111101110110110001000110000100";
        ram[72] = "0b00111101000110100000000010101101";
        ram[73] = "0b00111100101000101010100011010111";
        ram[74] = "0b10111110001000011000101001000100";
        ram[75] = "0b00111101010011001011110111101001";
        ram[76] = "0b10111110000000100001101011111000";
        ram[77] = "0b10111101101110011010111110101100";
        ram[78] = "0b00111110000011010010111010010100";
        ram[79] = "0b10111101110101110010000011001001";
        ram[80] = "0b10111101100010110001010000010101";
        ram[81] = "0b10111100011011101011000111111010";
        ram[82] = "0b10111101001000110110011111001001";
        ram[83] = "0b00111101111100100011001101011001";
        ram[84] = "0b10111101111010010011010100110011";
        ram[85] = "0b10111101111011010100101000011011";
        ram[86] = "0b10111101100100011001110000001010";
        ram[87] = "0b00111110001101100101110000101101";
        ram[88] = "0b10111101011000000101001011110001";
        ram[89] = "0b00111110010101010100110101100010";
        ram[90] = "0b10111101000111110001011010110001";
        ram[91] = "0b10111110001111101010000011111101";
        ram[92] = "0b00111110000001101111100100110011";
        ram[93] = "0b10111100000111011000100001111100";
        ram[94] = "0b10111101100111110001011011100111";
        ram[95] = "0b00111101111000000101000010111110";
        ram[96] = "0b00111100111111100001111111000001";
        ram[97] = "0b10111011001111111101111000100111";
        ram[98] = "0b10111011010110000011110101101110";
        ram[99] = "0b10111100100011101101011101101001";
        ram[100] = "0b10111100001001110001110101111011";
        ram[101] = "0b00111101101011010010000000000001";
        ram[102] = "0b00111101001100011101111001001111";
        ram[103] = "0b10111101111011111101011111100100";
        ram[104] = "0b00111101000011111000101010011101";
        ram[105] = "0b10111101110101010100011111100000";
        ram[106] = "0b10111100010000001001110101111111";
        ram[107] = "0b10111110000010001000100011111000";
        ram[108] = "0b10111100000110000011101111000001";
        ram[109] = "0b10111101111100001001101111111010";
        ram[110] = "0b00111101101000001111011000110101";
        ram[111] = "0b10111101110100010110010101001101";
        ram[112] = "0b00111101010101100010100001000110";
        ram[113] = "0b00111101110011000001110011011001";
        ram[114] = "0b00111100110101001100100110000110";
        ram[115] = "0b10111100100111100000011001000110";
        ram[116] = "0b10111100010111011110110110000111";
        ram[117] = "0b10111110001111101001000110000110";
        ram[118] = "0b10111101110100000110100100011111";
        ram[119] = "0b10111101100110000111001010010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_12) {
meminst = new inference_conv2d_f3_3_1_12_ram("inference_conv2d_f3_3_1_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_12() {
    delete meminst;
}


};//endmodule
#endif
