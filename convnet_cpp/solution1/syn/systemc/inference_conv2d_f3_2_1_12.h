// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_12_H__
#define __inference_conv2d_f3_2_1_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_12_ram) {
        ram[0] = "0b10111101111000110000000100100001";
        ram[1] = "0b10111100001100011101111010011111";
        ram[2] = "0b10111101000010010111110101110010";
        ram[3] = "0b10111011111000000111010100001011";
        ram[4] = "0b00111110001100100011001110011100";
        ram[5] = "0b00111110001011010110111110010111";
        ram[6] = "0b00111110001100110010000111100110";
        ram[7] = "0b00111011101101011100101110111111";
        ram[8] = "0b00111100001100011010010110010100";
        ram[9] = "0b10111101011010101101110000110010";
        ram[10] = "0b00111101000001001100010011011011";
        ram[11] = "0b10111110000010011000110101000111";
        ram[12] = "0b10111110000001111000001100010111";
        ram[13] = "0b10111101110010111110001001111111";
        ram[14] = "0b10111101110100000000110001010010";
        ram[15] = "0b10111101111111111110110100100000";
        ram[16] = "0b10111101011011100010110101110000";
        ram[17] = "0b00111101000010101001101000100010";
        ram[18] = "0b00111101101100110100101101000100";
        ram[19] = "0b10111101001110010000111111101100";
        ram[20] = "0b10111101010010110001111110011110";
        ram[21] = "0b10111110000100101001001000111110";
        ram[22] = "0b00111101110010110000001110000100";
        ram[23] = "0b10111101101011000001111100101000";
        ram[24] = "0b00111011001011000101001010101111";
        ram[25] = "0b00111101001110111011011000111111";
        ram[26] = "0b10111101110111001010101011111100";
        ram[27] = "0b00111101010000000011011101000011";
        ram[28] = "0b10111101101010011111110000101011";
        ram[29] = "0b10111101000011000110010010101101";
        ram[30] = "0b10111100010110001001110000001110";
        ram[31] = "0b00111110010110011110010001010000";
        ram[32] = "0b00111101100010101100110010111010";
        ram[33] = "0b00111100101110101010110110110001";
        ram[34] = "0b00111011101110110110001111011001";
        ram[35] = "0b00111100011000110110111110100111";
        ram[36] = "0b00111101000100110100011100011111";
        ram[37] = "0b10111101010101001010000011110001";
        ram[38] = "0b10111100000001010101011110101110";
        ram[39] = "0b00111101110000111000100010101001";
        ram[40] = "0b10111101100001000010001110111110";
        ram[41] = "0b00111101011010001010101001011110";
        ram[42] = "0b00111101101001101000101100001100";
        ram[43] = "0b00111101111110111110001100111011";
        ram[44] = "0b00111101100111111010011000100011";
        ram[45] = "0b00111100010101100101011010111001";
        ram[46] = "0b00111100110000111101000000000100";
        ram[47] = "0b00111011100010011101100000000110";
        ram[48] = "0b00111010101101010101000010000100";
        ram[49] = "0b10111101101001101011010111111101";
        ram[50] = "0b10111101100100000010101111101111";
        ram[51] = "0b10111101010010010000111011101101";
        ram[52] = "0b10111110001111100100001110101010";
        ram[53] = "0b10111101000011001101100011011100";
        ram[54] = "0b00111101001001010010000011101100";
        ram[55] = "0b00111101100001010011101001001100";
        ram[56] = "0b00111100011101001101001111100111";
        ram[57] = "0b00111110000110010110101000100111";
        ram[58] = "0b00111101110010111010001111110011";
        ram[59] = "0b10111110000010101010010101000000";
        ram[60] = "0b10111101111010010011101101111110";
        ram[61] = "0b00111110000001001100010110010111";
        ram[62] = "0b10111101101110110111000100100101";
        ram[63] = "0b00111110000011101110010100100110";
        ram[64] = "0b00111101100010110011010000111001";
        ram[65] = "0b10111101011101110110110100111010";
        ram[66] = "0b00111110000011100100111100110011";
        ram[67] = "0b10111101010001101100110110010100";
        ram[68] = "0b00111100010001011110100111101111";
        ram[69] = "0b00111110000101011100110010000101";
        ram[70] = "0b00111101110110110100000000101101";
        ram[71] = "0b10111100110100100000110100010011";
        ram[72] = "0b00111101011011111011111010111010";
        ram[73] = "0b00111110010000100101000111000010";
        ram[74] = "0b00111101010001011010101001001001";
        ram[75] = "0b00111100101011011010011110100011";
        ram[76] = "0b00111110000111011010100111001010";
        ram[77] = "0b10111101110000010001010001110101";
        ram[78] = "0b10111110000101110000001000011101";
        ram[79] = "0b00111101011111010111100101011000";
        ram[80] = "0b00111110000000100010001010010010";
        ram[81] = "0b00111101100100100111000100001110";
        ram[82] = "0b00111101111011111110110101100011";
        ram[83] = "0b00111101111100011100111100110101";
        ram[84] = "0b00111101111110001111011110011000";
        ram[85] = "0b10111100111000100101001111101000";
        ram[86] = "0b10111101001010101010000010100011";
        ram[87] = "0b10111101111111101101110110001011";
        ram[88] = "0b10111101100000100111111001000101";
        ram[89] = "0b10111101001101000001000000100011";
        ram[90] = "0b10111101010111101011100101111001";
        ram[91] = "0b00111101011010111101110001011101";
        ram[92] = "0b00111101110101111001001100010100";
        ram[93] = "0b10111100110011001001110010010001";
        ram[94] = "0b00111101110110101111100111101100";
        ram[95] = "0b00111110001010101101110101011001";
        ram[96] = "0b00111101101011110101011001100101";
        ram[97] = "0b00111101110011111001000100011101";
        ram[98] = "0b10111100101001010111100011001011";
        ram[99] = "0b10111101101111101111000011110001";
        ram[100] = "0b00111100000001100111111101000000";
        ram[101] = "0b00111100110100010101110001111111";
        ram[102] = "0b10111101111000011010111011110111";
        ram[103] = "0b00111101010110011110000010110010";
        ram[104] = "0b10111100001001011010100010011100";
        ram[105] = "0b10111010000000011001101001101100";
        ram[106] = "0b00111101111000011000110101101001";
        ram[107] = "0b00111101000001111001011100111001";
        ram[108] = "0b00111101100001111101101100011110";
        ram[109] = "0b00111100111010000100110100100110";
        ram[110] = "0b10111101001111011001010000010101";
        ram[111] = "0b00111101110011010001101111111000";
        ram[112] = "0b00111101100001101011111011011001";
        ram[113] = "0b10111101000000100001001000101001";
        ram[114] = "0b10111100011100110001000010011001";
        ram[115] = "0b10111101001111010011111111100010";
        ram[116] = "0b10111101001110101100001000111110";
        ram[117] = "0b10111110010011001010101001110110";
        ram[118] = "0b10111101110001010000111010100000";
        ram[119] = "0b10111100010100111001111101001111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_12) {
meminst = new inference_conv2d_f3_2_1_12_ram("inference_conv2d_f3_2_1_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_12() {
    delete meminst;
}


};//endmodule
#endif
