// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_9_H__
#define __inference_conv2d_f3_1_3_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_9_ram) {
        ram[0] = "0b00111101101100000101011011010010";
        ram[1] = "0b00111011100011001011101101111010";
        ram[2] = "0b10111101000100110001110011000011";
        ram[3] = "0b00111101000011010000001101010011";
        ram[4] = "0b10111110001101110000010010111100";
        ram[5] = "0b00111101010010111011111011100110";
        ram[6] = "0b00111110001000001111011000100111";
        ram[7] = "0b00111110001000101000010111101100";
        ram[8] = "0b10111011111111111101101111101110";
        ram[9] = "0b10111101111010010101001110011100";
        ram[10] = "0b10111101100001101111010101010010";
        ram[11] = "0b10111101110000101010000000110001";
        ram[12] = "0b00111101101101011101100111100100";
        ram[13] = "0b10111100111100001110000000111101";
        ram[14] = "0b00111100111100101001110001101010";
        ram[15] = "0b10111100010111011101010110011110";
        ram[16] = "0b00111101101000110100110100100111";
        ram[17] = "0b10111101110100001010001101010001";
        ram[18] = "0b10111001100011111101110011001111";
        ram[19] = "0b10111101110101101001011111110010";
        ram[20] = "0b10111011100110111110001101100000";
        ram[21] = "0b00111100111110110010110111010011";
        ram[22] = "0b00111101001100010110100000000111";
        ram[23] = "0b10111101010101001011100111001011";
        ram[24] = "0b00111110000100010101101101010111";
        ram[25] = "0b00111100011011110001111111011110";
        ram[26] = "0b00111101010110100111110101110101";
        ram[27] = "0b00111110001001000100100001001001";
        ram[28] = "0b00111100010001110011010101001001";
        ram[29] = "0b00111011011011111111110001111101";
        ram[30] = "0b00111101100010011010010011000100";
        ram[31] = "0b00111110001010001111100000011111";
        ram[32] = "0b00111100101110001000000111110010";
        ram[33] = "0b00111110000000110100100001101111";
        ram[34] = "0b00111110010010111010011110111001";
        ram[35] = "0b10111110001011110100101011011100";
        ram[36] = "0b00111110001001100001010100100011";
        ram[37] = "0b10111100011001011100100111110100";
        ram[38] = "0b00111110000011110111001111000001";
        ram[39] = "0b00111100000100011001111101001111";
        ram[40] = "0b00111101010001011101010101111101";
        ram[41] = "0b00111100100110110100101001110100";
        ram[42] = "0b10111101100111101001001011100011";
        ram[43] = "0b00111101011001010011001110110001";
        ram[44] = "0b10111101011010000111010111110000";
        ram[45] = "0b10111100000010111010000001100111";
        ram[46] = "0b10111101010011010101010001100010";
        ram[47] = "0b10111110000000010000010001001111";
        ram[48] = "0b10111101101010101100101111111110";
        ram[49] = "0b10111100101110011010110100000000";
        ram[50] = "0b00111011010110000011101011101010";
        ram[51] = "0b00111100110001101000101001011110";
        ram[52] = "0b10111101100101100110010111010011";
        ram[53] = "0b00111101000101100110111110010011";
        ram[54] = "0b10111100110100101111111010101011";
        ram[55] = "0b00111101010110001100011100100111";
        ram[56] = "0b10111101101101101101110100011001";
        ram[57] = "0b00111110000110010100010011101101";
        ram[58] = "0b00111110000010110110100100010010";
        ram[59] = "0b00111101010111010101100110101101";
        ram[60] = "0b10111101001010110010010010100111";
        ram[61] = "0b10111011101101101100001110001100";
        ram[62] = "0b00111110001010111100001101000000";
        ram[63] = "0b00111010110110111111010100001001";
        ram[64] = "0b00111110010000101110010001001011";
        ram[65] = "0b10111101010010100111110001110110";
        ram[66] = "0b00111101011100110011111101000010";
        ram[67] = "0b10111101100101010110010111010000";
        ram[68] = "0b00111101111110001101011010010001";
        ram[69] = "0b10111101001000110001011111100010";
        ram[70] = "0b10111101110010000111110101010101";
        ram[71] = "0b00111101000111100011010010111001";
        ram[72] = "0b00111101110100000001011111011011";
        ram[73] = "0b00111101000001110101100010000100";
        ram[74] = "0b00111110010101110100110001001101";
        ram[75] = "0b00111011100111011011111101101110";
        ram[76] = "0b10111100011001001010100101100010";
        ram[77] = "0b10111011111010100000100001000111";
        ram[78] = "0b00111110000110101000001001100010";
        ram[79] = "0b00111101101010000111101010110110";
        ram[80] = "0b10111101011010111100100110110010";
        ram[81] = "0b00111101001100000101010111010011";
        ram[82] = "0b10111011000001111001010001011110";
        ram[83] = "0b00111101100100001010001001101101";
        ram[84] = "0b00111101100101101101010100000110";
        ram[85] = "0b10111100000000110000101110001110";
        ram[86] = "0b00111011101110111101001010010100";
        ram[87] = "0b00111100111000100101011111100100";
        ram[88] = "0b10111110000101101001001100111010";
        ram[89] = "0b10111110001000010110001000101000";
        ram[90] = "0b10111101010001110100111001011000";
        ram[91] = "0b00111110001011110010110111000011";
        ram[92] = "0b10111101100000010101000000101100";
        ram[93] = "0b00111100111000101111101001101011";
        ram[94] = "0b10111101100011111101101001011011";
        ram[95] = "0b00111100110011001011011111010100";
        ram[96] = "0b10111110001011101111000011110001";
        ram[97] = "0b10111101101101110100101000001100";
        ram[98] = "0b10111011000011001011111001101010";
        ram[99] = "0b00111110011010011010010010011100";
        ram[100] = "0b10111110000000111111100010011000";
        ram[101] = "0b00111110000011111111011001001101";
        ram[102] = "0b10111101100100111010110111010101";
        ram[103] = "0b10111011110101111101010100101001";
        ram[104] = "0b10111101001110101011001111000110";
        ram[105] = "0b10111101110111011010101111100010";
        ram[106] = "0b10111010111011010111110110011100";
        ram[107] = "0b10111101110100011111100010100001";
        ram[108] = "0b00111101101000100111100000100010";
        ram[109] = "0b00111101111000100011001000001001";
        ram[110] = "0b10111101000111110001111100101111";
        ram[111] = "0b00111101000000011011101111011101";
        ram[112] = "0b00111110010110100001111100001000";
        ram[113] = "0b10111100100101000001101001101001";
        ram[114] = "0b10111101101000000110011111001111";
        ram[115] = "0b10111110001000101110011000100001";
        ram[116] = "0b10111110010011111000010111010111";
        ram[117] = "0b00111101101000100011011001010110";
        ram[118] = "0b10111011000110001011101001110111";
        ram[119] = "0b00111100110010101000001000000100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_9) {
meminst = new inference_conv2d_f3_1_3_9_ram("inference_conv2d_f3_1_3_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_9() {
    delete meminst;
}


};//endmodule
#endif
