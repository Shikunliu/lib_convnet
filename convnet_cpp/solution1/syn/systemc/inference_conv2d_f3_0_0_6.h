// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_6_H__
#define __inference_conv2d_f3_0_0_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_6_ram) {
        ram[0] = "0b10111101100001110001101100101101";
        ram[1] = "0b00111110000001111000010110110110";
        ram[2] = "0b00111101110000111100001000101100";
        ram[3] = "0b10111101110010111101111001110101";
        ram[4] = "0b10111110000111111000100001110110";
        ram[5] = "0b10111110001001101011010110010001";
        ram[6] = "0b10111101011101000110010000111011";
        ram[7] = "0b00111100010101101101010101100100";
        ram[8] = "0b00111110000001111010010110110001";
        ram[9] = "0b10111100111101100011101011110000";
        ram[10] = "0b00111101010100111010001110011011";
        ram[11] = "0b00111100001110001111110000110101";
        ram[12] = "0b10111101000001011101100000110111";
        ram[13] = "0b10111100111001001110010111001000";
        ram[14] = "0b10111100110010111011101001111110";
        ram[15] = "0b00111110001101010100001011100101";
        ram[16] = "0b10111110001011011010000100100011";
        ram[17] = "0b00111101110010110100001011100111";
        ram[18] = "0b10111101101010101101001111000001";
        ram[19] = "0b00111101100111111101001000000101";
        ram[20] = "0b00111100111000111010110000001100";
        ram[21] = "0b00111010101000111100101101001100";
        ram[22] = "0b00111101100101100000100010011011";
        ram[23] = "0b10111101110001001101101011100001";
        ram[24] = "0b00111101110100010011111010000001";
        ram[25] = "0b10111011000000111001011110100101";
        ram[26] = "0b10111011100100110000001110111110";
        ram[27] = "0b00111101001111011000011111010000";
        ram[28] = "0b10111110000001010001111100111111";
        ram[29] = "0b10111101000111100000101010010010";
        ram[30] = "0b10111101100000101111010110011001";
        ram[31] = "0b00111101110111111001011110101011";
        ram[32] = "0b00111100101011000010000101011100";
        ram[33] = "0b00111110000001001110000111100111";
        ram[34] = "0b10111101110010110011110011101101";
        ram[35] = "0b10111101101000010011011101010010";
        ram[36] = "0b10111101100000100111100111111000";
        ram[37] = "0b10111101011010101100000010000011";
        ram[38] = "0b00111101101000011001001011000010";
        ram[39] = "0b10111101100110100100101101010101";
        ram[40] = "0b10111100000011100111001111100001";
        ram[41] = "0b00111101010111110010001101000110";
        ram[42] = "0b10111101101100011000001100111101";
        ram[43] = "0b10111101100000011001101000110100";
        ram[44] = "0b10111110000100000111111010011110";
        ram[45] = "0b10111101100000111110110101100000";
        ram[46] = "0b10111101011010111010110011110111";
        ram[47] = "0b00111110000010100010000001011000";
        ram[48] = "0b10111101000001111010000000111101";
        ram[49] = "0b00111101011011011011000101001001";
        ram[50] = "0b00111101001001111001001010000001";
        ram[51] = "0b10111101000010100101001111100001";
        ram[52] = "0b00111101101101101010011000110101";
        ram[53] = "0b00111011111000001010011101110101";
        ram[54] = "0b00111110001011111110000011001110";
        ram[55] = "0b10111101010000001011001110011111";
        ram[56] = "0b00111101010001010010001110100110";
        ram[57] = "0b00111101101010010111101110011100";
        ram[58] = "0b10111110000100100001011101001100";
        ram[59] = "0b00111101100000000101010000001011";
        ram[60] = "0b10111101010110110101010010000101";
        ram[61] = "0b00111101101001010111011000000100";
        ram[62] = "0b10111101010010101001001001100000";
        ram[63] = "0b00111100110100011101010111101011";
        ram[64] = "0b10111100111001011000111011010000";
        ram[65] = "0b00111100001110011000001110101111";
        ram[66] = "0b00111101100000001001101100111110";
        ram[67] = "0b10111010101011111001101110001111";
        ram[68] = "0b00111110001010011011101001011110";
        ram[69] = "0b00111101000000111100011000001110";
        ram[70] = "0b10111101011010111110111111111000";
        ram[71] = "0b00111011101101000010111111110011";
        ram[72] = "0b00111101110000001100000001101010";
        ram[73] = "0b00111101100100001100011111011100";
        ram[74] = "0b10111100100101101111000111101010";
        ram[75] = "0b00111100101101100110010100010111";
        ram[76] = "0b10111101001100000111101011010111";
        ram[77] = "0b10111101100000110011110001100000";
        ram[78] = "0b00111101111110010111011110000101";
        ram[79] = "0b10111101110100110110111101111110";
        ram[80] = "0b00111101000000101001101110000110";
        ram[81] = "0b10111100100110011101011010100001";
        ram[82] = "0b00111101010001101010100001000000";
        ram[83] = "0b10111101000111100100110000000001";
        ram[84] = "0b00111101101001001001001010000110";
        ram[85] = "0b00111100001000010111010000001110";
        ram[86] = "0b00111101100001010010011111110011";
        ram[87] = "0b00111101101001100000010010000100";
        ram[88] = "0b00111101011001111001011100011110";
        ram[89] = "0b00111101111001011010000111001011";
        ram[90] = "0b10111101100100101001101001010001";
        ram[91] = "0b10111101110101110110100100100011";
        ram[92] = "0b10111011101001101011000110011011";
        ram[93] = "0b00111101001100111110110110100011";
        ram[94] = "0b00111101010000111100001101101110";
        ram[95] = "0b00111101101100011110010100100000";
        ram[96] = "0b10111110001111100001111100111010";
        ram[97] = "0b10111101000001110000101111000011";
        ram[98] = "0b00111110000101010001010001111111";
        ram[99] = "0b10111101110110010110111110101000";
        ram[100] = "0b00111101110100101100011010101100";
        ram[101] = "0b00111100011110110001011010001100";
        ram[102] = "0b10111101100111000001010011111100";
        ram[103] = "0b10111101011001111110000010111010";
        ram[104] = "0b00111100100100011101111110010001";
        ram[105] = "0b00111011110010110001111110001110";
        ram[106] = "0b00111110000101010010100101111000";
        ram[107] = "0b10111101111110100111111000110001";
        ram[108] = "0b00111101000011001111100101011101";
        ram[109] = "0b00111101001101010000100011011011";
        ram[110] = "0b00111101111010010011010110111001";
        ram[111] = "0b00111110000101000100001111010100";
        ram[112] = "0b10111101100110010011111000000010";
        ram[113] = "0b00111110000011111001001000101001";
        ram[114] = "0b10111110001101111000010110110110";
        ram[115] = "0b10111100100110101100010111101010";
        ram[116] = "0b10111101101110110001101110110000";
        ram[117] = "0b10111101101110100010110111101100";
        ram[118] = "0b00111110001011011010001101111111";
        ram[119] = "0b10111101010100110101101111001000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_6) {
meminst = new inference_conv2d_f3_0_0_6_ram("inference_conv2d_f3_0_0_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_6() {
    delete meminst;
}


};//endmodule
#endif
