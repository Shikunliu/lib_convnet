// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_13_H__
#define __inference_conv2d_f3_1_0_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_13_ram) {
        ram[0] = "0b00111110000000110101101101001111";
        ram[1] = "0b00111101110011110000101111110010";
        ram[2] = "0b00111101101110001110110011110100";
        ram[3] = "0b00111100110011100110011010010101";
        ram[4] = "0b10111101011010000110000010100111";
        ram[5] = "0b00111101101110010111111010001100";
        ram[6] = "0b10111110001010100100001011110010";
        ram[7] = "0b10111101010110101101110111010010";
        ram[8] = "0b10111101100001000100001101000001";
        ram[9] = "0b00111010010001000011010001011110";
        ram[10] = "0b00111101101000100100110010010001";
        ram[11] = "0b10111101001000011101110110100000";
        ram[12] = "0b00111110000001001111111111001001";
        ram[13] = "0b00111101100101111001010011001111";
        ram[14] = "0b10111101101110100101010011100000";
        ram[15] = "0b00111101000011001100100011010001";
        ram[16] = "0b00111101000110100001100000101010";
        ram[17] = "0b00111100101110101010100000000111";
        ram[18] = "0b10111100011011110010100110000100";
        ram[19] = "0b10111110000110000011000001011110";
        ram[20] = "0b00111100100000110101001100111100";
        ram[21] = "0b00111101000100001101101101001111";
        ram[22] = "0b10111101100100010111010010001111";
        ram[23] = "0b10111101000100010000011111111011";
        ram[24] = "0b00111110001010000101101010010010";
        ram[25] = "0b00111110001000101011111011001111";
        ram[26] = "0b00111101110000111100010101000100";
        ram[27] = "0b00111101100000001110010111110100";
        ram[28] = "0b10111101001101001010011111000010";
        ram[29] = "0b00111101110011011101010110010001";
        ram[30] = "0b00111110000000011001100000101001";
        ram[31] = "0b10111101110011010110000000100000";
        ram[32] = "0b00111101001011011010011111011001";
        ram[33] = "0b00111101101001001010101010001010";
        ram[34] = "0b10111101010110010001101001001110";
        ram[35] = "0b00111101011100111011001010110101";
        ram[36] = "0b10111101010010111000100010101111";
        ram[37] = "0b00111101010011011000011100100010";
        ram[38] = "0b10111110000110100111101001000010";
        ram[39] = "0b00111101101000111011001000101111";
        ram[40] = "0b00111101001010110101011011100001";
        ram[41] = "0b00111101001101111000000010100000";
        ram[42] = "0b00111101111011011000110100110111";
        ram[43] = "0b10111101101100000110110011100101";
        ram[44] = "0b10111100101100100010111001010000";
        ram[45] = "0b10111101001111001101001000110011";
        ram[46] = "0b10111101001101000001100000011011";
        ram[47] = "0b10111101100110101010010111111100";
        ram[48] = "0b10111110000100001110100111010101";
        ram[49] = "0b10111100010001010100010010101110";
        ram[50] = "0b10111110001010100100001001101100";
        ram[51] = "0b10111101111011100010100011101101";
        ram[52] = "0b00111100100010001110010001110101";
        ram[53] = "0b00111101111011000100101101001101";
        ram[54] = "0b10111101000100110001100111010011";
        ram[55] = "0b00111110001000100101011100000000";
        ram[56] = "0b10111110001000010111101000000011";
        ram[57] = "0b10111101100001101101100001010100";
        ram[58] = "0b00111100011011011010111011000101";
        ram[59] = "0b00111100010101111111101011111110";
        ram[60] = "0b00111101110010000000001110010111";
        ram[61] = "0b10111101101110000110101101011001";
        ram[62] = "0b10111101100010110001001001000000";
        ram[63] = "0b00111101101100111001000010111100";
        ram[64] = "0b00111110010000111101111101101110";
        ram[65] = "0b10111101011110101000110101001010";
        ram[66] = "0b00111100111101000000100001000101";
        ram[67] = "0b00111100110111100100010011000100";
        ram[68] = "0b10111101110010010111101111111010";
        ram[69] = "0b00111100110000101111111001001101";
        ram[70] = "0b10111101101111010100100100110111";
        ram[71] = "0b10111101001011111001100100110000";
        ram[72] = "0b10111101011101010000110111001001";
        ram[73] = "0b00111110000011111110001110110000";
        ram[74] = "0b00111110010000010100111101001000";
        ram[75] = "0b10111101110000010010111000011000";
        ram[76] = "0b00111101001101001001010000100111";
        ram[77] = "0b10111101000001110000010000000000";
        ram[78] = "0b10111100001001000001100000001101";
        ram[79] = "0b10111100101000000111101110100001";
        ram[80] = "0b00111110000110001111101001111011";
        ram[81] = "0b00111101100100100101010101100000";
        ram[82] = "0b10111101101010110010011000000100";
        ram[83] = "0b10111101101110001010000000010111";
        ram[84] = "0b00111101001000111011101001101010";
        ram[85] = "0b00111101111000010001001010111010";
        ram[86] = "0b00111101000010100010001010110100";
        ram[87] = "0b10111100001100111101001100000001";
        ram[88] = "0b00111101000111100001001011011011";
        ram[89] = "0b00111101111000000000101001111100";
        ram[90] = "0b10111101101110100011110111011100";
        ram[91] = "0b10111101000011111101111101110001";
        ram[92] = "0b10111101101100100010010010101011";
        ram[93] = "0b00111110000000100111000001101101";
        ram[94] = "0b00111101100111100011010010011110";
        ram[95] = "0b00111110001010100000000111101111";
        ram[96] = "0b10111101001101000000101001000011";
        ram[97] = "0b00111100011101111111010100000100";
        ram[98] = "0b10111110000000001001000010110100";
        ram[99] = "0b00111110001000101000111010010011";
        ram[100] = "0b00111101100000100011000001011100";
        ram[101] = "0b10111100111010110100010000011100";
        ram[102] = "0b10111110001000100110001111011000";
        ram[103] = "0b00111101001101110000001101101101";
        ram[104] = "0b00111110000001010100011011010100";
        ram[105] = "0b10111101101111000000010011110001";
        ram[106] = "0b10111110000010001001100101111100";
        ram[107] = "0b10111101010101001100110001000000";
        ram[108] = "0b00111101111001000111110010110111";
        ram[109] = "0b00111100110000111101010100001100";
        ram[110] = "0b00111110001011000000111100000010";
        ram[111] = "0b10111101110011111111010000110100";
        ram[112] = "0b10111101101100110011100010011010";
        ram[113] = "0b00111100101101111111101001111000";
        ram[114] = "0b00111110001111111000000010011001";
        ram[115] = "0b00111101110101001000111011001110";
        ram[116] = "0b10111101100000101000001010011111";
        ram[117] = "0b10111101011110010010001011001100";
        ram[118] = "0b00111101101001110100011101011111";
        ram[119] = "0b10111100101110111100111100011001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_13) {
meminst = new inference_conv2d_f3_1_0_13_ram("inference_conv2d_f3_1_0_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_13() {
    delete meminst;
}


};//endmodule
#endif
