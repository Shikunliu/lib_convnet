// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_2_H__
#define __inference_mult_1_120_120_84_s_W4_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_2_ram) {
        ram[0] = "0b00111101011101001001100110011010";
        ram[1] = "0b00111110000000011010110011011110";
        ram[2] = "0b00111101001101111110100111100111";
        ram[3] = "0b10111101011110110110110101011111";
        ram[4] = "0b00111100101010010001111101001001";
        ram[5] = "0b10111101100101110110000000000011";
        ram[6] = "0b10111101110011010111101111101010";
        ram[7] = "0b10111110000100110011110101101100";
        ram[8] = "0b10111110000010101101110000001010";
        ram[9] = "0b10111110010100001101111011010011";
        ram[10] = "0b00111110000101001100111011000100";
        ram[11] = "0b00111101011100101010101011111101";
        ram[12] = "0b10111100010100110001001011001101";
        ram[13] = "0b00111101101111110110011000010010";
        ram[14] = "0b10111110000110010001111001100100";
        ram[15] = "0b10111101001110001110010111100000";
        ram[16] = "0b00111101110110000100111101001100";
        ram[17] = "0b00111101001011001111000000001000";
        ram[18] = "0b00111101010110000111011001101001";
        ram[19] = "0b00111100100010011110010010000101";
        ram[20] = "0b10111110000100110001000010011001";
        ram[21] = "0b10111100101101111100110001010101";
        ram[22] = "0b00111101111110111111010010001000";
        ram[23] = "0b00111101000111101101000010001011";
        ram[24] = "0b10111110001110001001110100101000";
        ram[25] = "0b10111101111101010101111111111110";
        ram[26] = "0b10111101100110100100010111100010";
        ram[27] = "0b00111011011111010111100111101001";
        ram[28] = "0b10111101011001111011001100000010";
        ram[29] = "0b00111011101111000010110101011000";
        ram[30] = "0b10111100000101111101011010010110";
        ram[31] = "0b10111110001000011101110110100000";
        ram[32] = "0b10111010010000000100111111101111";
        ram[33] = "0b10111100110001111001011011001101";
        ram[34] = "0b00111101101010111010100100111110";
        ram[35] = "0b10111101111001101100111111001000";
        ram[36] = "0b10111101101011111000111000100000";
        ram[37] = "0b10111100111111000100100111001000";
        ram[38] = "0b10111101111111011011010111011001";
        ram[39] = "0b10111110001101001110100111000100";
        ram[40] = "0b10111101011100111011001011010000";
        ram[41] = "0b00111100101001000000111001101000";
        ram[42] = "0b00111101100101011111001110111101";
        ram[43] = "0b00111101000011010010110001010011";
        ram[44] = "0b00111101000011000011100101000100";
        ram[45] = "0b10111101110000100000011011100011";
        ram[46] = "0b00111101101111101101101010110111";
        ram[47] = "0b10111101100010001001001110011101";
        ram[48] = "0b10111100111010101001110011110111";
        ram[49] = "0b10111101110000100111010111100001";
        ram[50] = "0b00111101100010111110101011100010";
        ram[51] = "0b00111101100110110000000010111101";
        ram[52] = "0b10111101110111010100010000010011";
        ram[53] = "0b00111101111000110111011110011111";
        ram[54] = "0b10111101000101111110011010100111";
        ram[55] = "0b10111101000100110011010111010010";
        ram[56] = "0b00111100011101000110001111101011";
        ram[57] = "0b10111100111000100110100100010110";
        ram[58] = "0b00111100101000100001100100101111";
        ram[59] = "0b00111101010011001110010000101111";
        ram[60] = "0b00111100100111000111011010001110";
        ram[61] = "0b00111101100100011110101100001100";
        ram[62] = "0b00111110001100010001011011101100";
        ram[63] = "0b00111101101101111010100100011001";
        ram[64] = "0b00111101001011110010001010011000";
        ram[65] = "0b00111101011110011111110001000101";
        ram[66] = "0b00111101101000001101110010111010";
        ram[67] = "0b10111110000000111001010111000100";
        ram[68] = "0b10111101011111110010110100100010";
        ram[69] = "0b00111110000101110001010010111010";
        ram[70] = "0b10111101101000010000110111001100";
        ram[71] = "0b10111011101110110010110111101001";
        ram[72] = "0b00111100111110011110011100010111";
        ram[73] = "0b00111110000100101000101011100111";
        ram[74] = "0b10111101110111100001011111100011";
        ram[75] = "0b10111101110100110000110111111010";
        ram[76] = "0b00111101100101000100000111100100";
        ram[77] = "0b00111110000000000100100101100110";
        ram[78] = "0b10111101001000010000001001000100";
        ram[79] = "0b00111000111111100010101000010010";
        ram[80] = "0b10111101100110101100110101000001";
        ram[81] = "0b00111110000011010000010110101111";
        ram[82] = "0b00111101110111000001001011110001";
        ram[83] = "0b10111101110000110000110000010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_2_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_2) {
meminst = new inference_mult_1_120_120_84_s_W4_2_ram("inference_mult_1_120_120_84_s_W4_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_2() {
    delete meminst;
}


};//endmodule
#endif
