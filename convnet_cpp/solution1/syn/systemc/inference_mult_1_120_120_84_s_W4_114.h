// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_114_H__
#define __inference_mult_1_120_120_84_s_W4_114_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_114_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_114_ram) {
        ram[0] = "0b00111110010100110011111110000101";
        ram[1] = "0b10111110001011001001011110010110";
        ram[2] = "0b10111100001101111001010110011001";
        ram[3] = "0b10111110010101110011110011010101";
        ram[4] = "0b10111101111111010111000000011110";
        ram[5] = "0b10111100010011110100010101001101";
        ram[6] = "0b10111110000011000110011000001010";
        ram[7] = "0b00111101010101000011011011010100";
        ram[8] = "0b00111011011011000100100100111111";
        ram[9] = "0b10111101010101011111000001000111";
        ram[10] = "0b10111101010110001110001000110100";
        ram[11] = "0b00111101111111001110010110110100";
        ram[12] = "0b00111110010011110000101100101000";
        ram[13] = "0b10111101001011111001011110111000";
        ram[14] = "0b10111101111110010000001110100111";
        ram[15] = "0b10111101111100111011101011111110";
        ram[16] = "0b00111101001011010011100011101000";
        ram[17] = "0b00111100111100011111110011010010";
        ram[18] = "0b00111101111111101101101101110011";
        ram[19] = "0b10111110011011010010000101111001";
        ram[20] = "0b10111101110000110011001001011100";
        ram[21] = "0b10111101101110001111110101011101";
        ram[22] = "0b00111101000000011010110111010000";
        ram[23] = "0b10111110001100101011001101000110";
        ram[24] = "0b00111110000110111001111010001100";
        ram[25] = "0b00111101100011101111000011110001";
        ram[26] = "0b10111110001001001011110100110100";
        ram[27] = "0b00111110011010101000110001011000";
        ram[28] = "0b10111101010111000000101101100100";
        ram[29] = "0b10111101100110111001010100101010";
        ram[30] = "0b00111100001101111111101111110000";
        ram[31] = "0b10111101110101110011011101010100";
        ram[32] = "0b00111110001011110110111111010010";
        ram[33] = "0b10111100100011010111111100001111";
        ram[34] = "0b00111100010111110010110111111000";
        ram[35] = "0b10111101100000000110110100000000";
        ram[36] = "0b10111101011111000101100111010011";
        ram[37] = "0b00111110000110001101000111011001";
        ram[38] = "0b00111101000100001001000100101101";
        ram[39] = "0b10111100110101111001111000010111";
        ram[40] = "0b00111101001101011000100100110100";
        ram[41] = "0b00111001101001000011000111101000";
        ram[42] = "0b00111101110001011000000011010000";
        ram[43] = "0b10111100111111100101101101010000";
        ram[44] = "0b10111101110100000011110110011011";
        ram[45] = "0b10111110000100110010111110001000";
        ram[46] = "0b00111101100001111001010011011101";
        ram[47] = "0b00111101100101110011010001001010";
        ram[48] = "0b10111011010010000111010101001111";
        ram[49] = "0b10111101010111000011111011100000";
        ram[50] = "0b10111101000110011010000101000001";
        ram[51] = "0b00111101001000000100011100011000";
        ram[52] = "0b10111110001000110100011001010110";
        ram[53] = "0b00111101101001101101100001000110";
        ram[54] = "0b10111010011000001000110110100111";
        ram[55] = "0b10111101101011000011010111101001";
        ram[56] = "0b00111101101001101000100101101100";
        ram[57] = "0b00111101001001110010000010000110";
        ram[58] = "0b00111100100100110101011011110101";
        ram[59] = "0b00111101101101011111001100000001";
        ram[60] = "0b00111101100011011001010001100101";
        ram[61] = "0b10111110001000001000001010001100";
        ram[62] = "0b00111110001010011010111111100010";
        ram[63] = "0b00111110010010010100001010010001";
        ram[64] = "0b10111101111000100111101001100011";
        ram[65] = "0b10111100110011000001110101111010";
        ram[66] = "0b10111110001100110100111111000110";
        ram[67] = "0b10111101110101000110111001001100";
        ram[68] = "0b00111101101000001000110111101101";
        ram[69] = "0b10111101011000111001110000011100";
        ram[70] = "0b10111110011011100100101000111000";
        ram[71] = "0b10111101111000100010000111001001";
        ram[72] = "0b00111110001010111100001010111001";
        ram[73] = "0b00111101100110000001010011010111";
        ram[74] = "0b10111100110001000010001110110001";
        ram[75] = "0b00111100011000100110000110001010";
        ram[76] = "0b00111101110001010100000001101111";
        ram[77] = "0b10111101110111111010010101001100";
        ram[78] = "0b00111110000110100101101001000111";
        ram[79] = "0b00111101000000011010011001011110";
        ram[80] = "0b00111110000001110100000010000001";
        ram[81] = "0b00111011110010011000110001111011";
        ram[82] = "0b10111101000111010100010100100000";
        ram[83] = "0b10111100110011111101111110100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_114) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_114_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_114) {
meminst = new inference_mult_1_120_120_84_s_W4_114_ram("inference_mult_1_120_120_84_s_W4_114_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_114() {
    delete meminst;
}


};//endmodule
#endif
