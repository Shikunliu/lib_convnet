// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_2_H__
#define __inference_conv2d_f3_1_4_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_2_ram) {
        ram[0] = "0b00111110000010011010100100010001";
        ram[1] = "0b00111011110110110000101000100111";
        ram[2] = "0b00111101111101111011011000110101";
        ram[3] = "0b00111110001101111000000110000100";
        ram[4] = "0b00111101101000010101010110010011";
        ram[5] = "0b10111101100001000101100010001010";
        ram[6] = "0b00111101100100011100000001101100";
        ram[7] = "0b10111110000100011100011101011000";
        ram[8] = "0b00111110000110111100100011000001";
        ram[9] = "0b10111100011100010100101011000110";
        ram[10] = "0b00111100000010001111101000001111";
        ram[11] = "0b10111101100000001110011001111010";
        ram[12] = "0b00111101100101000011010001101010";
        ram[13] = "0b10111101101110010001110111011110";
        ram[14] = "0b10111101011111111111101110110011";
        ram[15] = "0b10111101111011011010100001111010";
        ram[16] = "0b10111110000011111101100110111010";
        ram[17] = "0b10111011110101110101101101011100";
        ram[18] = "0b00111110000100010011100100000000";
        ram[19] = "0b00111110000100110101000001001100";
        ram[20] = "0b10111101001011000110111000111000";
        ram[21] = "0b00111101011111111110111010011000";
        ram[22] = "0b00111101100100100011001010010000";
        ram[23] = "0b10111101110101011111101110110101";
        ram[24] = "0b00111101101101010100100011011111";
        ram[25] = "0b10111101101100111101010001011110";
        ram[26] = "0b10111101101011101111110100011011";
        ram[27] = "0b10111101011010001111110010010011";
        ram[28] = "0b00111101000100010101001101111010";
        ram[29] = "0b00111101100110000000010111100110";
        ram[30] = "0b00111110000011010010110000111000";
        ram[31] = "0b10111101000101110101011001111001";
        ram[32] = "0b00111101001011000000011011010100";
        ram[33] = "0b10111101011000011100001001000010";
        ram[34] = "0b00111011110010001110001000110010";
        ram[35] = "0b00111110000111111101101100001010";
        ram[36] = "0b00111100000010111000011001010001";
        ram[37] = "0b00111101101000010010111111100001";
        ram[38] = "0b10111101110010110000100111101010";
        ram[39] = "0b10111110001111011011011001011111";
        ram[40] = "0b10111101100101110100101001110111";
        ram[41] = "0b00111101110010110110111100100111";
        ram[42] = "0b00111011101110101001101000011010";
        ram[43] = "0b10111101001001111001011101010011";
        ram[44] = "0b00111100101000101101010101001101";
        ram[45] = "0b00111101110101110100101101000000";
        ram[46] = "0b00111101110000000111011001110000";
        ram[47] = "0b00111100111111001111101101101001";
        ram[48] = "0b00111101111001010100011000001011";
        ram[49] = "0b10111101000100101000011101010111";
        ram[50] = "0b00111101100110110011111111110111";
        ram[51] = "0b00111101000101110111111111111111";
        ram[52] = "0b00111101011100010101011011010101";
        ram[53] = "0b00111101110101010010110110101010";
        ram[54] = "0b00111110000001101111111000101110";
        ram[55] = "0b00111101100000011011100001110100";
        ram[56] = "0b00111101100101010100010001011101";
        ram[57] = "0b10111100111111011011011011100101";
        ram[58] = "0b10111101101100110101001000111101";
        ram[59] = "0b00111100011101001100101111101111";
        ram[60] = "0b10111110001011011100011010100000";
        ram[61] = "0b10111101101010001111110101000010";
        ram[62] = "0b10111101100011011100000101000111";
        ram[63] = "0b10111100110010001110001100110011";
        ram[64] = "0b00111101010001001010001000100110";
        ram[65] = "0b10111100111001001010000101101010";
        ram[66] = "0b00111100111011111100000010000010";
        ram[67] = "0b10111101110011110110010000000110";
        ram[68] = "0b10111101110100001010100100010101";
        ram[69] = "0b00111101010111111011001101110100";
        ram[70] = "0b00111101101111001000100111110100";
        ram[71] = "0b00111101101001001101110001100110";
        ram[72] = "0b00111011010010011111101010110101";
        ram[73] = "0b10111100101010010011000000010000";
        ram[74] = "0b10111100110010110000100001110010";
        ram[75] = "0b00111110000011100110010100111000";
        ram[76] = "0b00111100101100000001111011100001";
        ram[77] = "0b00111101100011011111010111110111";
        ram[78] = "0b10111100000010001101111011101100";
        ram[79] = "0b00111101001010010000000001110101";
        ram[80] = "0b00111101110001001110001011001011";
        ram[81] = "0b00111110010001100010101101101011";
        ram[82] = "0b10111101001001110110110100101100";
        ram[83] = "0b00111101111110000001111100010000";
        ram[84] = "0b10111101001110001110001111000111";
        ram[85] = "0b00111101101001101010000101010100";
        ram[86] = "0b00111110000011101011110001000001";
        ram[87] = "0b10111011011100001001010101111111";
        ram[88] = "0b00111110001110010000001001011000";
        ram[89] = "0b10111101111100100101000111000010";
        ram[90] = "0b10111100101110101110010100001110";
        ram[91] = "0b00111101110010011111101110010111";
        ram[92] = "0b00111101100100010101000111100111";
        ram[93] = "0b00111110000011101100011111001001";
        ram[94] = "0b10111101100000000101100111011101";
        ram[95] = "0b10111101100000001111000100010001";
        ram[96] = "0b00111101010000011111101001000001";
        ram[97] = "0b00111101001101100101101000101111";
        ram[98] = "0b00111011110111100111011100101111";
        ram[99] = "0b10111101011101010011101111010001";
        ram[100] = "0b00111100101010011001111110100001";
        ram[101] = "0b00111110000111100011011001001100";
        ram[102] = "0b10111100110101100101110000101101";
        ram[103] = "0b10111110000100111110110001000110";
        ram[104] = "0b10111110000010011110001110000110";
        ram[105] = "0b00111101011100000000000010010100";
        ram[106] = "0b00111101110111000111001101101001";
        ram[107] = "0b10111100101001101010110001110010";
        ram[108] = "0b10111100101100111000011101001100";
        ram[109] = "0b10111101100101101010000111011011";
        ram[110] = "0b10111101111100100111011110000001";
        ram[111] = "0b00111101100111011111111110101010";
        ram[112] = "0b10111110001010101111101011111000";
        ram[113] = "0b00111110000101011011011110001101";
        ram[114] = "0b00111101000110010101111010101100";
        ram[115] = "0b00111101000100111100100000110100";
        ram[116] = "0b10111110010011011111011000010010";
        ram[117] = "0b00111101111001010000100111000000";
        ram[118] = "0b00111101100100100110111011011011";
        ram[119] = "0b00111011100000011001001110111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_2) {
meminst = new inference_conv2d_f3_1_4_2_ram("inference_conv2d_f3_1_4_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_2() {
    delete meminst;
}


};//endmodule
#endif
