// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_9_H__
#define __inference_conv2d_f3_2_0_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_9_ram) {
        ram[0] = "0b10111101100001010100100111000100";
        ram[1] = "0b00111100110100000101001011111111";
        ram[2] = "0b00111100100111010111100100100010";
        ram[3] = "0b10111110000101101111000101010110";
        ram[4] = "0b10111101000110100110010100111100";
        ram[5] = "0b10111100011110101011101111110011";
        ram[6] = "0b00111010001001101111111111010110";
        ram[7] = "0b10111110010010001001111010111010";
        ram[8] = "0b10111110010010110111111111100001";
        ram[9] = "0b10111101100000001111011011100011";
        ram[10] = "0b10111101101010111001100001101010";
        ram[11] = "0b10111101110100000001100011100111";
        ram[12] = "0b00111110001011101000010011110001";
        ram[13] = "0b10111011111101111111001101010111";
        ram[14] = "0b10111101111101011000010110111110";
        ram[15] = "0b10111101111010011111001001111000";
        ram[16] = "0b10111100111100011001010100111001";
        ram[17] = "0b00111110001011010010100100010011";
        ram[18] = "0b00111110010001000011110000111010";
        ram[19] = "0b00111100011001101000100011001011";
        ram[20] = "0b10111110000010100001111100001000";
        ram[21] = "0b00111011001100011100011101100011";
        ram[22] = "0b00111101100000110001111001111110";
        ram[23] = "0b10111100101001101101010111000010";
        ram[24] = "0b10111101011101000111000001001010";
        ram[25] = "0b10111101101100100110100111111010";
        ram[26] = "0b10111110001101011011111101101010";
        ram[27] = "0b00111100101010001010111110110111";
        ram[28] = "0b10111101100010001000011000001001";
        ram[29] = "0b10111101100111111000010001000101";
        ram[30] = "0b10111100110101000101100001111101";
        ram[31] = "0b00111101111100111000110111100111";
        ram[32] = "0b10111110001101010100101000111100";
        ram[33] = "0b10111100110100000000011010101001";
        ram[34] = "0b00111011111100110111111011111110";
        ram[35] = "0b10111101111001010101000010000111";
        ram[36] = "0b00111100011100111011010101101111";
        ram[37] = "0b00111110001001100100101110101001";
        ram[38] = "0b00111101001100111111010110110110";
        ram[39] = "0b10111011111001101010100110000010";
        ram[40] = "0b00111110001001100000001001000011";
        ram[41] = "0b00111101100001000101001011000110";
        ram[42] = "0b00111100100011100101110111000111";
        ram[43] = "0b10111110011010100110011011011100";
        ram[44] = "0b10111101100100001110011011100101";
        ram[45] = "0b00111101111100101110100101000111";
        ram[46] = "0b00111101100111010001101111000010";
        ram[47] = "0b10111110000000001111100011000110";
        ram[48] = "0b10111100000011001111111001010110";
        ram[49] = "0b10111101100101011101100010000111";
        ram[50] = "0b10111100110110000111000011011010";
        ram[51] = "0b00111101001111010101110001100111";
        ram[52] = "0b00111101000010000101100010010100";
        ram[53] = "0b10111101111110101010011010001111";
        ram[54] = "0b00111110000001101110000110011100";
        ram[55] = "0b00111101100000010010111111111011";
        ram[56] = "0b10111101000111100100000001000010";
        ram[57] = "0b00111100111011000111100001100100";
        ram[58] = "0b10111101111100011111111011101011";
        ram[59] = "0b10111101101001110010001000100110";
        ram[60] = "0b10111101010010110000100101111110";
        ram[61] = "0b00111110010010101100010111000001";
        ram[62] = "0b00111101100011110001001100000110";
        ram[63] = "0b00111110000101010100100010101010";
        ram[64] = "0b10111101011111111111000111110011";
        ram[65] = "0b00111101101111101101100001110101";
        ram[66] = "0b00111101110110000010100100000111";
        ram[67] = "0b10111011111011110011001001101000";
        ram[68] = "0b10111110000001010001100100110111";
        ram[69] = "0b10111100011011000011000110000010";
        ram[70] = "0b00111110000011010100111010010000";
        ram[71] = "0b10111110000110001001001010101011";
        ram[72] = "0b10111011010110111011100111010000";
        ram[73] = "0b00111100111011100001011101101010";
        ram[74] = "0b00111101010111001001100011110011";
        ram[75] = "0b10111100100000110010110001110000";
        ram[76] = "0b10111110000001101110111001110100";
        ram[77] = "0b10111110001011100111000001111110";
        ram[78] = "0b10111101110000110100011010011001";
        ram[79] = "0b10111101001011011110001001011100";
        ram[80] = "0b00111101010001100100000011000010";
        ram[81] = "0b10111110001010000001111111011010";
        ram[82] = "0b00111101110000000000100011000001";
        ram[83] = "0b00111101001111000001000101000011";
        ram[84] = "0b10111101000000111110100000100010";
        ram[85] = "0b10111011101100000001001010101101";
        ram[86] = "0b10111110001000101111011101101110";
        ram[87] = "0b10111101100010111001001100011110";
        ram[88] = "0b10111101010000001100100011101000";
        ram[89] = "0b00111101100001001000101011101100";
        ram[90] = "0b10111011000011110011100011101110";
        ram[91] = "0b00111101100001000000001100100010";
        ram[92] = "0b10111110000001111010001010001100";
        ram[93] = "0b10111101010000110010011111010011";
        ram[94] = "0b00111101110110010011100110101000";
        ram[95] = "0b00111011110111101001001010011101";
        ram[96] = "0b10111100001100111001101001100001";
        ram[97] = "0b10111011100111010000101010111101";
        ram[98] = "0b10111110001110010000001111101010";
        ram[99] = "0b00111011111011011011110110001000";
        ram[100] = "0b00111101110101101111001100101100";
        ram[101] = "0b10111101100100101010110001101000";
        ram[102] = "0b00111100110010111110010101111100";
        ram[103] = "0b00111101101010000111000000011110";
        ram[104] = "0b00111101100010100001011010111111";
        ram[105] = "0b10111101000110110110110011011000";
        ram[106] = "0b10111100010111101011001111101010";
        ram[107] = "0b10111101100010101100101001011110";
        ram[108] = "0b00111110000111001000111010101100";
        ram[109] = "0b00111101000000101011100011000111";
        ram[110] = "0b00111101000111010111000100101010";
        ram[111] = "0b10111110000001001010011000100010";
        ram[112] = "0b10111101101110000101010011110110";
        ram[113] = "0b10111100110101101010000110011000";
        ram[114] = "0b10111100000101001110001100110001";
        ram[115] = "0b10111101011001100001110100011011";
        ram[116] = "0b00111110001111101111101011101000";
        ram[117] = "0b00111101110101010110000110010001";
        ram[118] = "0b00111110000011110011101100100001";
        ram[119] = "0b00111110010100011011001110101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_9) {
meminst = new inference_conv2d_f3_2_0_9_ram("inference_conv2d_f3_2_0_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_9() {
    delete meminst;
}


};//endmodule
#endif
