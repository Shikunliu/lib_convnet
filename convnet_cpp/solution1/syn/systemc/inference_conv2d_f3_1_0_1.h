// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_1_H__
#define __inference_conv2d_f3_1_0_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_1_ram) {
        ram[0] = "0b10111100110100000010100101000011";
        ram[1] = "0b10111011111001100010011111010010";
        ram[2] = "0b10111101001100110100101000101010";
        ram[3] = "0b10111100001101110000000111110101";
        ram[4] = "0b10111101000110110001100001101111";
        ram[5] = "0b10111001100000010110100110000000";
        ram[6] = "0b00111110001111110110110010101101";
        ram[7] = "0b00111101100011101010011110011000";
        ram[8] = "0b10111101001010110001010110101000";
        ram[9] = "0b00111101010101011100101001010010";
        ram[10] = "0b00111101010111010000010110010101";
        ram[11] = "0b10111100100000010101101010101001";
        ram[12] = "0b10111100111010110001011101110000";
        ram[13] = "0b00111110000011100001011000001110";
        ram[14] = "0b00111101100111010001111000101011";
        ram[15] = "0b00111101111010101011000101001111";
        ram[16] = "0b00111100101110111100111001111000";
        ram[17] = "0b10111100101010111111100100011000";
        ram[18] = "0b10111110000011001011100010011101";
        ram[19] = "0b00111101001010110111110001101011";
        ram[20] = "0b00111101011100100110101000110000";
        ram[21] = "0b00111101100000110010010101001110";
        ram[22] = "0b00111101010010100001010111001110";
        ram[23] = "0b00111101001011110110111010011101";
        ram[24] = "0b00111101011011100110001100000101";
        ram[25] = "0b10111110000001100100010101011111";
        ram[26] = "0b00111101100010010111010111100101";
        ram[27] = "0b10111101101001101111010010010110";
        ram[28] = "0b00111100100011001000110000110101";
        ram[29] = "0b10111101101011011100101110000000";
        ram[30] = "0b10111110010011101001010011101110";
        ram[31] = "0b10111100101111111100000110110111";
        ram[32] = "0b00111110001111001110010100101110";
        ram[33] = "0b10111110000010000001110100111011";
        ram[34] = "0b00111100010111001111001100100000";
        ram[35] = "0b00111110000111010011111010010010";
        ram[36] = "0b10111101100000000111100110110000";
        ram[37] = "0b00111011110010110010001111000000";
        ram[38] = "0b00111110001010001100101011000101";
        ram[39] = "0b00111101001011010011011000101111";
        ram[40] = "0b00111100111101011101100100110110";
        ram[41] = "0b10111011110000111010000000010011";
        ram[42] = "0b00111101100010001001100001001000";
        ram[43] = "0b10111101111011010100001111010000";
        ram[44] = "0b00111101010101000010010010010101";
        ram[45] = "0b10111101101010000111000101101110";
        ram[46] = "0b10111110000110110101111000001111";
        ram[47] = "0b10111110000010101100010101111110";
        ram[48] = "0b00111110001101100100000000100001";
        ram[49] = "0b00111100010011000101011010000101";
        ram[50] = "0b10111101000000010110100100111100";
        ram[51] = "0b00111101100001000001110001100111";
        ram[52] = "0b00111101100001010010111000100010";
        ram[53] = "0b10111101001111011001100000101100";
        ram[54] = "0b10111110000101010001100000101011";
        ram[55] = "0b00111100100001011110010110001000";
        ram[56] = "0b00111101110110101001010111001000";
        ram[57] = "0b10111101000110101010111111111111";
        ram[58] = "0b00111110000111011100001011110100";
        ram[59] = "0b00111011111110010100010100111011";
        ram[60] = "0b10111101011101011001010101000011";
        ram[61] = "0b00111101101100110101110001000000";
        ram[62] = "0b00111100011001011000001010100110";
        ram[63] = "0b10111101111010011110101100100000";
        ram[64] = "0b10111101100110010110111110001101";
        ram[65] = "0b00111100100111111010000111110001";
        ram[66] = "0b00111101110001101111100101000001";
        ram[67] = "0b10111101010101010100100110101001";
        ram[68] = "0b00111100110000111001101001010100";
        ram[69] = "0b00111101001001010010100101101010";
        ram[70] = "0b00111110000010101001000001000111";
        ram[71] = "0b10111101000001101110110001101000";
        ram[72] = "0b00111101100011010001101110001100";
        ram[73] = "0b00111100001000000010010011011001";
        ram[74] = "0b10111100101010001111101001100000";
        ram[75] = "0b00111110001000100010000101000010";
        ram[76] = "0b00111101110011100110110010001111";
        ram[77] = "0b00111110000001110100101010111010";
        ram[78] = "0b10111101011101000011011111000101";
        ram[79] = "0b10111101100110010110010101000111";
        ram[80] = "0b10111101101000110000011110100010";
        ram[81] = "0b00111110000010010001110010001111";
        ram[82] = "0b00111101000001100111110100001101";
        ram[83] = "0b10111110000011010011111111100010";
        ram[84] = "0b10111101100111101100001001010101";
        ram[85] = "0b00111101111001010101011101011000";
        ram[86] = "0b00111110000010000111111111001100";
        ram[87] = "0b10111100110111110000101111111111";
        ram[88] = "0b00111101110110010011111001100000";
        ram[89] = "0b00111101001000111001110011011000";
        ram[90] = "0b10111101100011101100011001111010";
        ram[91] = "0b00111101010000101100101101010111";
        ram[92] = "0b10111101011101111000110111110001";
        ram[93] = "0b00111101000111100001011111001000";
        ram[94] = "0b00111101110010011000110001110001";
        ram[95] = "0b10111101001000100111000011110100";
        ram[96] = "0b10111110001100101101010000001011";
        ram[97] = "0b10111101000011111001100101100110";
        ram[98] = "0b00111100010011010001011111100001";
        ram[99] = "0b10111101001110101110100111000110";
        ram[100] = "0b10111110000011000111001011100010";
        ram[101] = "0b10111100100010000100010111101010";
        ram[102] = "0b00111100100010110001011001001001";
        ram[103] = "0b10111101111111011010000111101100";
        ram[104] = "0b10111110000110100001110011101111";
        ram[105] = "0b00111110000110100001010111011011";
        ram[106] = "0b00111101101010111000111100110000";
        ram[107] = "0b00111011110000110110110010111100";
        ram[108] = "0b10111101000111101001111011110010";
        ram[109] = "0b10111101100010010101011000101101";
        ram[110] = "0b10111101111101110010000101001111";
        ram[111] = "0b00111101000110110100010111010111";
        ram[112] = "0b00111110000100101010110110000010";
        ram[113] = "0b00111101101110011101111101111101";
        ram[114] = "0b10111101001000111100011001011110";
        ram[115] = "0b10111101011001010111000111000100";
        ram[116] = "0b00111101001111101111010110101001";
        ram[117] = "0b00111101001010100111001111110111";
        ram[118] = "0b00111110000101000110101000011010";
        ram[119] = "0b10111100110100001010010110011111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_1) {
meminst = new inference_conv2d_f3_1_0_1_ram("inference_conv2d_f3_1_0_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_1() {
    delete meminst;
}


};//endmodule
#endif
