// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_15_H__
#define __inference_conv2d_f3_4_0_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_15_ram) {
        ram[0] = "0b00111011110101000111010101100011";
        ram[1] = "0b10111101101011111111110011011011";
        ram[2] = "0b10111101111100111000111001101101";
        ram[3] = "0b00111100110001011111011001001111";
        ram[4] = "0b10111110000000100000101111000100";
        ram[5] = "0b10111101011011111101011000011100";
        ram[6] = "0b10111101010001000100111101010000";
        ram[7] = "0b00111011011110101001100000001100";
        ram[8] = "0b00111101110000101100011101000000";
        ram[9] = "0b10111101110100011110010111000001";
        ram[10] = "0b00111101111101001111010010000100";
        ram[11] = "0b00111101101001001010010100100011";
        ram[12] = "0b10111101100111001001101110111010";
        ram[13] = "0b00111101110010101101010111001100";
        ram[14] = "0b00111011111011000110110100010001";
        ram[15] = "0b00111101001111000011101101001111";
        ram[16] = "0b10111110000100001011000000101001";
        ram[17] = "0b00111011111001100100001100000000";
        ram[18] = "0b10111101111011111011011001010110";
        ram[19] = "0b10111100101000010101111001010100";
        ram[20] = "0b00111101111111101101011000110100";
        ram[21] = "0b00111100011000110100111111000110";
        ram[22] = "0b00111101011011110001110110101010";
        ram[23] = "0b10111100100110001010100011011001";
        ram[24] = "0b00111101101010010110010111110101";
        ram[25] = "0b00111011011111010010111110010110";
        ram[26] = "0b00111101011100101000000011110001";
        ram[27] = "0b00111100111001000011101010101000";
        ram[28] = "0b10111110010101000101001011000110";
        ram[29] = "0b00111100000111000011011111101111";
        ram[30] = "0b00111100100101010011100011100010";
        ram[31] = "0b00111101100000111100000100010011";
        ram[32] = "0b00111101110000011010010100001110";
        ram[33] = "0b10111100010010100100010100110011";
        ram[34] = "0b00111100100101011111100111010010";
        ram[35] = "0b00111101000011100101000111101101";
        ram[36] = "0b00111101101011001011101111000011";
        ram[37] = "0b00111110000101111010101111111100";
        ram[38] = "0b10111101100111011001110001011110";
        ram[39] = "0b00111101000000010111101101100000";
        ram[40] = "0b10111101000110111010110111110110";
        ram[41] = "0b00111110000001100110110110111101";
        ram[42] = "0b00111100011111000010100000000100";
        ram[43] = "0b00111110001000011111011111010111";
        ram[44] = "0b10111100100100001100100100010000";
        ram[45] = "0b10111101101001110011010110001100";
        ram[46] = "0b10111101001111100111111000000101";
        ram[47] = "0b00111101001101000011000000111001";
        ram[48] = "0b00111101100110001010110111010100";
        ram[49] = "0b00111100111001110011011011011011";
        ram[50] = "0b10111110000100100000110111011100";
        ram[51] = "0b00111100101100011011100111101100";
        ram[52] = "0b10111101001011001011101100010100";
        ram[53] = "0b00111101010110110011110110101001";
        ram[54] = "0b00111110000101010101101110001010";
        ram[55] = "0b10111101001111010011101110110000";
        ram[56] = "0b10111100100011101110000000111000";
        ram[57] = "0b10111101101010010000011110110001";
        ram[58] = "0b10111101011111010001110010100110";
        ram[59] = "0b10111101100100111001110110111100";
        ram[60] = "0b10111110001101100010001011000100";
        ram[61] = "0b00111110000000100110111001010100";
        ram[62] = "0b10111110100000010010101000001111";
        ram[63] = "0b10111101100011111001101111001111";
        ram[64] = "0b00111101010000111010100011100111";
        ram[65] = "0b10111101111100110000000011011110";
        ram[66] = "0b10111101101010111110011111100101";
        ram[67] = "0b00111110000110000011110010110000";
        ram[68] = "0b10111101011110101000001100011110";
        ram[69] = "0b10111110000111110111111111010000";
        ram[70] = "0b10111101000110001100010010100010";
        ram[71] = "0b00111110000011001001100001011111";
        ram[72] = "0b10111100101001111011010011100101";
        ram[73] = "0b00111110000011100011000110010100";
        ram[74] = "0b10111100110101110010110000110111";
        ram[75] = "0b10111101111111101101100101011010";
        ram[76] = "0b10111101000010011001100101010110";
        ram[77] = "0b10111011110110011010101000101011";
        ram[78] = "0b00111110000011111111101011000010";
        ram[79] = "0b00111100011101110011100110001000";
        ram[80] = "0b00111110000011110100110110111110";
        ram[81] = "0b10111110001101010100001101101100";
        ram[82] = "0b00111101010010110101111101000100";
        ram[83] = "0b00111100101101001100111010101001";
        ram[84] = "0b00111100100011110001011001010011";
        ram[85] = "0b00111101001010110011010110100011";
        ram[86] = "0b00111110001010010001101100111111";
        ram[87] = "0b10111100110011110101101010110001";
        ram[88] = "0b10111110001000011000011010011000";
        ram[89] = "0b00111110001110101001010001111001";
        ram[90] = "0b10111101011110011101011001101011";
        ram[91] = "0b10111101001111001101000011010110";
        ram[92] = "0b10111101011001110011111000011000";
        ram[93] = "0b10111101001000010000111110110000";
        ram[94] = "0b00111100100011001111100011010111";
        ram[95] = "0b10111110000011110001101010100000";
        ram[96] = "0b00111101110001000000010100010011";
        ram[97] = "0b00111101111010010111100001001111";
        ram[98] = "0b10111101100111010101010011110101";
        ram[99] = "0b10111101100100101101000000011100";
        ram[100] = "0b00111100101111001011001110110000";
        ram[101] = "0b00111101111010010110010111110101";
        ram[102] = "0b00111110010000010011101000001100";
        ram[103] = "0b00111110000011101101100001001101";
        ram[104] = "0b10111110000010000001000111110101";
        ram[105] = "0b00111100100111110010000001010111";
        ram[106] = "0b10111110000010000100111101001100";
        ram[107] = "0b00111101101010100110011100111010";
        ram[108] = "0b10111100101101000010001101010011";
        ram[109] = "0b10111100001000010001100110101011";
        ram[110] = "0b00111101010011010011011110100110";
        ram[111] = "0b00111100100101110001011111011111";
        ram[112] = "0b00111011110001101110100000011100";
        ram[113] = "0b00111101110111000000011101101000";
        ram[114] = "0b00111100001100101010010101101111";
        ram[115] = "0b10111101100100010010110001000010";
        ram[116] = "0b00111101000101011001110001111111";
        ram[117] = "0b00111101001011110000101001000100";
        ram[118] = "0b00111101110110000000011001101100";
        ram[119] = "0b00111100100001110011111110001111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_15) {
meminst = new inference_conv2d_f3_4_0_15_ram("inference_conv2d_f3_4_0_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_15() {
    delete meminst;
}


};//endmodule
#endif
