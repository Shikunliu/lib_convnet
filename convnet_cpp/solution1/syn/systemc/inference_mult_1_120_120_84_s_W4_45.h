// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_45_H__
#define __inference_mult_1_120_120_84_s_W4_45_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_45_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_45_ram) {
        ram[0] = "0b00111101010001111001111001110101";
        ram[1] = "0b00111101111110111110110000100101";
        ram[2] = "0b10111110000000010010100110001001";
        ram[3] = "0b10111101111011101110001110010011";
        ram[4] = "0b00111101101000001011001011010110";
        ram[5] = "0b10111101011100001010100011100000";
        ram[6] = "0b10111101000111110001101110011111";
        ram[7] = "0b10111101101011011011010000111001";
        ram[8] = "0b10111101100011001010101111010011";
        ram[9] = "0b00111101101100000011000111001111";
        ram[10] = "0b10111101111000010000011000100101";
        ram[11] = "0b10111101111100011010011101011101";
        ram[12] = "0b10111101001000000010001100100001";
        ram[13] = "0b10111101100101010001100100000001";
        ram[14] = "0b00111101001011111001010011100011";
        ram[15] = "0b10111101101111111001001010100010";
        ram[16] = "0b10111100100100110111101000110000";
        ram[17] = "0b10111100001111000011010110100110";
        ram[18] = "0b10111100000001001100001001110010";
        ram[19] = "0b10111101011010100110110110010010";
        ram[20] = "0b10111100101111011111001001110100";
        ram[21] = "0b00111101100111101010000000001100";
        ram[22] = "0b00111100100000100101101000011000";
        ram[23] = "0b00111011100100111011111000111000";
        ram[24] = "0b10111101111001111010111010011011";
        ram[25] = "0b00111101010100000101110111100110";
        ram[26] = "0b10111110000010011100010111100111";
        ram[27] = "0b10111001011000001100110101010111";
        ram[28] = "0b10111101001110010111100011001000";
        ram[29] = "0b00111101001011101111101110110001";
        ram[30] = "0b00111101111011010100100010001000";
        ram[31] = "0b10111101111010100100010101001110";
        ram[32] = "0b00111100100110001111111100001010";
        ram[33] = "0b10111101100111110101000010010011";
        ram[34] = "0b00111101110011111111000100001111";
        ram[35] = "0b00111101100001000000011110100100";
        ram[36] = "0b10111110000010001100110110100111";
        ram[37] = "0b10111110001011011110010101001011";
        ram[38] = "0b00111101011011010111010011001000";
        ram[39] = "0b00111100101011011000100100111011";
        ram[40] = "0b00111100111101001111000110101111";
        ram[41] = "0b10111101100001101000110100011000";
        ram[42] = "0b00111101011010100011000000111010";
        ram[43] = "0b00111011111001010011000001000110";
        ram[44] = "0b00111100110110101111001010010101";
        ram[45] = "0b10111100100011010011010101110011";
        ram[46] = "0b00111101001110100010001000111011";
        ram[47] = "0b00111101000100111111101111100110";
        ram[48] = "0b10111100111010010110100101010000";
        ram[49] = "0b00111010110010111110001010010111";
        ram[50] = "0b00111100010010100111001111000010";
        ram[51] = "0b00111100101011101010010010001110";
        ram[52] = "0b00111110010010100111100111111111";
        ram[53] = "0b10111101010001000001001001100100";
        ram[54] = "0b10111101101111110110010011101010";
        ram[55] = "0b00111101000011010010100001110010";
        ram[56] = "0b10111101100010011010110001101100";
        ram[57] = "0b10111101100110100100101011110111";
        ram[58] = "0b00111101100100101011001100000011";
        ram[59] = "0b00111110001111010111011100110010";
        ram[60] = "0b00111100011100111000111011011000";
        ram[61] = "0b00111101101101000010100101101000";
        ram[62] = "0b10111110001111101111011101111111";
        ram[63] = "0b10111101111000101100101110100111";
        ram[64] = "0b00111110001001010100110010011000";
        ram[65] = "0b10111110010100111101101111000010";
        ram[66] = "0b10111100010111111100001001110011";
        ram[67] = "0b10111110001100011101011001001001";
        ram[68] = "0b00111100010110010001110100111101";
        ram[69] = "0b00111101110010011000101100111100";
        ram[70] = "0b00111101110011000110000001000110";
        ram[71] = "0b10111101010100101000101001111100";
        ram[72] = "0b00111100100101100001110111100100";
        ram[73] = "0b00111100010101010010011100001110";
        ram[74] = "0b10111101011100011110101010101110";
        ram[75] = "0b00111101110011111110101101001010";
        ram[76] = "0b10111110001101101100000000001110";
        ram[77] = "0b10111110001101000011100001001100";
        ram[78] = "0b00111100101011001100110000010001";
        ram[79] = "0b00111101100100100011111000110011";
        ram[80] = "0b10111101111111000010011001010111";
        ram[81] = "0b00111101101101110010011001011000";
        ram[82] = "0b00111011101011101001111001001110";
        ram[83] = "0b10111101011101011011010100100011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_45) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_45_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_45) {
meminst = new inference_mult_1_120_120_84_s_W4_45_ram("inference_mult_1_120_120_84_s_W4_45_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_45() {
    delete meminst;
}


};//endmodule
#endif
