// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_6_H__
#define __inference_conv2d_f3_4_2_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_6_ram) {
        ram[0] = "0b10111100110011110011100010111000";
        ram[1] = "0b10111101111110101011011111011100";
        ram[2] = "0b10111101101101110011001001011001";
        ram[3] = "0b00111101101010111101011011000000";
        ram[4] = "0b10111101000111000100110010011101";
        ram[5] = "0b00111101110101100010100101010010";
        ram[6] = "0b00111100110111011011111101100011";
        ram[7] = "0b10111101001001101101111010010001";
        ram[8] = "0b00111110001101000000111000010111";
        ram[9] = "0b10111101000101111110111011101111";
        ram[10] = "0b10111101001000100010011111011110";
        ram[11] = "0b00111101100001011101110000011000";
        ram[12] = "0b00111110000000000001000100001010";
        ram[13] = "0b00111100111010000001100100100100";
        ram[14] = "0b00111101011000110100101000000010";
        ram[15] = "0b00111100100100001101111011100000";
        ram[16] = "0b00111110001101011110011111001001";
        ram[17] = "0b10111101111101001101110101110010";
        ram[18] = "0b00111011101101110010001111011001";
        ram[19] = "0b00111110000010011110110000101101";
        ram[20] = "0b00111011110111010110100100111101";
        ram[21] = "0b00111101110111010010000011110011";
        ram[22] = "0b00111101011111111101101100010111";
        ram[23] = "0b10111101011100100001101100111011";
        ram[24] = "0b00111101100111111000101101001011";
        ram[25] = "0b10111110001000010111101001000110";
        ram[26] = "0b10111101100001010111100001000101";
        ram[27] = "0b10111101101001101110101000110101";
        ram[28] = "0b10111101000011011111100011100111";
        ram[29] = "0b10111101110111100011101001111110";
        ram[30] = "0b10111011111100100001110000010010";
        ram[31] = "0b00111100011101111010100001000011";
        ram[32] = "0b00111110010001000110000110110111";
        ram[33] = "0b10111101011010110010011110110001";
        ram[34] = "0b00111101010010100110010111101010";
        ram[35] = "0b00111101101001100100001001101111";
        ram[36] = "0b00111110001111010110110111000010";
        ram[37] = "0b00111101101001001111110010110010";
        ram[38] = "0b00111010101111000100010101000000";
        ram[39] = "0b00111101100111010111011000011000";
        ram[40] = "0b10111101101100000010101010010010";
        ram[41] = "0b10111101000001000101111011010101";
        ram[42] = "0b10111101111011100100011111011100";
        ram[43] = "0b00111110001110111001010111100110";
        ram[44] = "0b10111101111001000011111001010011";
        ram[45] = "0b10111100100011111101001110110011";
        ram[46] = "0b10111100110101001101101001001101";
        ram[47] = "0b10111110010100110100110000011011";
        ram[48] = "0b00111101101010010010111011011011";
        ram[49] = "0b10111101110110111110001100111011";
        ram[50] = "0b00111011101011000110111100110100";
        ram[51] = "0b00111110000101010100001001011111";
        ram[52] = "0b00111101111111000001110011100111";
        ram[53] = "0b00111101001000101010010010001011";
        ram[54] = "0b00111101101101001111000100001110";
        ram[55] = "0b00111101100111000001110110110000";
        ram[56] = "0b00111101010011100111111110100101";
        ram[57] = "0b10111100110110011001001010101110";
        ram[58] = "0b00111101110100101111110010101101";
        ram[59] = "0b10111101010011101001110001100000";
        ram[60] = "0b00111101111101001101110011101100";
        ram[61] = "0b10111100010110100110100000101011";
        ram[62] = "0b10111101011100101110100101000111";
        ram[63] = "0b10111011001110011100000000000000";
        ram[64] = "0b10111110000101011000001101100010";
        ram[65] = "0b10111100010110100001001111011101";
        ram[66] = "0b10111011011111101100001101101010";
        ram[67] = "0b10111101110001011111110011000010";
        ram[68] = "0b10111101011110100010000111101010";
        ram[69] = "0b10111101110110010010101011111010";
        ram[70] = "0b10111110000010110000100110100110";
        ram[71] = "0b10111101111101100001110111001001";
        ram[72] = "0b00111100000111000000101100111001";
        ram[73] = "0b10111101011011111100011000010001";
        ram[74] = "0b10111110000000000001100101101110";
        ram[75] = "0b10111101101100100001001000011100";
        ram[76] = "0b10111110001111111001011101101000";
        ram[77] = "0b00111101101011010100001010001110";
        ram[78] = "0b10111100000100010010001110010100";
        ram[79] = "0b10111101010001110100011110000111";
        ram[80] = "0b10111101111110101110101111000100";
        ram[81] = "0b10111100010100001011001111100010";
        ram[82] = "0b10111011011101100000100110000111";
        ram[83] = "0b10111101101011110001010100000100";
        ram[84] = "0b00111100101010001111011000101110";
        ram[85] = "0b10111101011000001101001111101011";
        ram[86] = "0b10111110000000001011001100001011";
        ram[87] = "0b00111101101010111100100011001110";
        ram[88] = "0b10111101010011100011100100101110";
        ram[89] = "0b10111110001110010010000100000100";
        ram[90] = "0b00111101111001001000101101100101";
        ram[91] = "0b10111101010111011010101101110111";
        ram[92] = "0b00111110010000010100011001011111";
        ram[93] = "0b00111101100010010000100111001010";
        ram[94] = "0b10111101101001010001100111110011";
        ram[95] = "0b00111100100001000101111110101011";
        ram[96] = "0b00111101000101000010111101111101";
        ram[97] = "0b10111101111010100111000001001100";
        ram[98] = "0b00111101001000000100010110100000";
        ram[99] = "0b10111011101110001101101010010010";
        ram[100] = "0b10111110000110011111001111000111";
        ram[101] = "0b00111101110000000100001011100110";
        ram[102] = "0b10111101000100001101011001100010";
        ram[103] = "0b00111100010101111100111101011111";
        ram[104] = "0b00111101101011000110110100101011";
        ram[105] = "0b00111101001111111011100101010011";
        ram[106] = "0b00111101011100010001101010100101";
        ram[107] = "0b00111100001000001110110101101011";
        ram[108] = "0b00111100110000100110010010010100";
        ram[109] = "0b10111101010110101100001011011111";
        ram[110] = "0b10111101100111011001001111011111";
        ram[111] = "0b00111101101011010010100111001111";
        ram[112] = "0b10111101100000100011111110000011";
        ram[113] = "0b10111110001001001000011010101101";
        ram[114] = "0b10111100110010110010111100111110";
        ram[115] = "0b10111110000011110101001110000010";
        ram[116] = "0b10111100111110111000101001001111";
        ram[117] = "0b10111101001010100110011010001011";
        ram[118] = "0b10111101001101110110100000110001";
        ram[119] = "0b10111100101101001011001111010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_6) {
meminst = new inference_conv2d_f3_4_2_6_ram("inference_conv2d_f3_4_2_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_6() {
    delete meminst;
}


};//endmodule
#endif
