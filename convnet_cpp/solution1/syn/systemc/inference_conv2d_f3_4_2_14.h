// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_14_H__
#define __inference_conv2d_f3_4_2_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_14_ram) {
        ram[0] = "0b10111100111010100011011000110100";
        ram[1] = "0b00111101011110101000110011011111";
        ram[2] = "0b10111100000100011001000011000001";
        ram[3] = "0b00111100111101111110011111001110";
        ram[4] = "0b00111100011010101100101001111001";
        ram[5] = "0b00111101101111000011110011010101";
        ram[6] = "0b10111101011000101010101110101100";
        ram[7] = "0b00111101000110011011001011111010";
        ram[8] = "0b10111100100011010101010110001001";
        ram[9] = "0b10111101101101110001010100001010";
        ram[10] = "0b00111011011100100111011110000001";
        ram[11] = "0b10111100010101111100010000001100";
        ram[12] = "0b10111101111101100010000001101000";
        ram[13] = "0b00111101011110000000110101110011";
        ram[14] = "0b00111101011001000110111111010001";
        ram[15] = "0b10111101111111111100110000011000";
        ram[16] = "0b10111101110100010011010010001011";
        ram[17] = "0b00111101100011011010101010101110";
        ram[18] = "0b00111100010001101111011100110101";
        ram[19] = "0b10111110000001110011000100001010";
        ram[20] = "0b00111101011110010000110111010011";
        ram[21] = "0b00111101110011110100001110000101";
        ram[22] = "0b10111100101011101010011001110001";
        ram[23] = "0b00111110001000111101100010011101";
        ram[24] = "0b00111100101111111001101111000010";
        ram[25] = "0b10111101100010011010110011100101";
        ram[26] = "0b10111110001100001001111101100010";
        ram[27] = "0b10111101110010000100111110010000";
        ram[28] = "0b10111010000010110101101010011010";
        ram[29] = "0b00111101100010100111000001001100";
        ram[30] = "0b00111101101111101001110101000100";
        ram[31] = "0b00111101101111000000111110100011";
        ram[32] = "0b00111101101000101110100110001010";
        ram[33] = "0b10111110001010111110100110000101";
        ram[34] = "0b00111101101001001000000011110110";
        ram[35] = "0b10111101001011111111100010110110";
        ram[36] = "0b00111101000011001000010011111001";
        ram[37] = "0b00111101011010011100101011101111";
        ram[38] = "0b00111101111011111001110010100110";
        ram[39] = "0b10111101100001010111110010010001";
        ram[40] = "0b10111101110001101011011101100111";
        ram[41] = "0b10111101111000001001111011011100";
        ram[42] = "0b10111101110110101011011011010000";
        ram[43] = "0b10111110000010100101110111110010";
        ram[44] = "0b00111100100000111100011001011110";
        ram[45] = "0b00111101000001010001010110011001";
        ram[46] = "0b10111101001100001001001111001100";
        ram[47] = "0b10111100100101001011101000000001";
        ram[48] = "0b00111100100110111011100001011000";
        ram[49] = "0b00111110000001100100000000100001";
        ram[50] = "0b00111101111000010100100111000111";
        ram[51] = "0b10111100101100001000101111101111";
        ram[52] = "0b00111101101000100011011001100011";
        ram[53] = "0b10111110000001001011111100001010";
        ram[54] = "0b00111101100101100000001010111100";
        ram[55] = "0b00111100111101110000011000100111";
        ram[56] = "0b00111011010101111111000001000001";
        ram[57] = "0b10111101110111110100010101011010";
        ram[58] = "0b00111101000101000011100100100010";
        ram[59] = "0b10111110010001000011101001100100";
        ram[60] = "0b00111100100011111100001111111000";
        ram[61] = "0b10111011110101011010001011110101";
        ram[62] = "0b10111110000101001001100010000001";
        ram[63] = "0b10111110000001001111110000011110";
        ram[64] = "0b00111101110101011100101011110011";
        ram[65] = "0b00111101111111011010101101011100";
        ram[66] = "0b10111100110010000101001001001001";
        ram[67] = "0b10111110001011100111001010010111";
        ram[68] = "0b00111100001010100000001101110100";
        ram[69] = "0b10111100101000001101011100010000";
        ram[70] = "0b10111110001000001011111001010001";
        ram[71] = "0b10111100100001011100101001000100";
        ram[72] = "0b10111101010001001100011010001001";
        ram[73] = "0b10111110010010010001010100111000";
        ram[74] = "0b00111100101100110010000010111111";
        ram[75] = "0b00111101110110011001001101001111";
        ram[76] = "0b10111101011110011110100101100110";
        ram[77] = "0b10111100010110100011001001111011";
        ram[78] = "0b00111101110110100111011011011001";
        ram[79] = "0b10111101101011100000011100011100";
        ram[80] = "0b10111100110111001111001001001001";
        ram[81] = "0b10111101010111011100100010111000";
        ram[82] = "0b10111101000010101110111011110111";
        ram[83] = "0b10111101000100101001110010111011";
        ram[84] = "0b00111100111101010101111011110010";
        ram[85] = "0b10111110010010110000011111010001";
        ram[86] = "0b10111110000101110001110000010001";
        ram[87] = "0b10111101111010001110100010100111";
        ram[88] = "0b00111011110100100110100010000011";
        ram[89] = "0b10111101110110111000110100111111";
        ram[90] = "0b00111100010001011001100101100111";
        ram[91] = "0b00111101001011101111001111010100";
        ram[92] = "0b00111101001010101010000111100101";
        ram[93] = "0b00111101001001001111110001010100";
        ram[94] = "0b00111100101000010010011011110111";
        ram[95] = "0b00111101010000100000000010001011";
        ram[96] = "0b00111110000001000101101011100110";
        ram[97] = "0b00111101001000010010010001011000";
        ram[98] = "0b00111101011101000010001110111110";
        ram[99] = "0b10111110000001111110110110000101";
        ram[100] = "0b00111110000100100110100100010110";
        ram[101] = "0b10111101001000010000101001010111";
        ram[102] = "0b00111101100101001000011001011101";
        ram[103] = "0b00111100101110111110010010110011";
        ram[104] = "0b00111110001000110001101111011111";
        ram[105] = "0b00111101101001111010010010010111";
        ram[106] = "0b00111110010110101011100000100000";
        ram[107] = "0b10111101000111001011101101010111";
        ram[108] = "0b00111110000111110010101110101010";
        ram[109] = "0b10111001101110001101001111101001";
        ram[110] = "0b10111101100101101101011100111010";
        ram[111] = "0b00111011111111100010111111011100";
        ram[112] = "0b10111100011000100010001000110100";
        ram[113] = "0b00111101011111111101101101001101";
        ram[114] = "0b00111101110101111111010000010011";
        ram[115] = "0b10111011101011111010110101010111";
        ram[116] = "0b10111110001000100011010111111000";
        ram[117] = "0b00111110001011111011010110001101";
        ram[118] = "0b10111100111001110100101111010100";
        ram[119] = "0b10111101010010110110100000101110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_14) {
meminst = new inference_conv2d_f3_4_2_14_ram("inference_conv2d_f3_4_2_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_14() {
    delete meminst;
}


};//endmodule
#endif
