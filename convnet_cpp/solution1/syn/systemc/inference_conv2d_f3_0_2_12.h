// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_12_H__
#define __inference_conv2d_f3_0_2_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_12_ram) {
        ram[0] = "0b10111011101111110101110011001101";
        ram[1] = "0b10111010101100101011110000101010";
        ram[2] = "0b10111101111011011000111111010110";
        ram[3] = "0b10111101110111101101010100101000";
        ram[4] = "0b10111101011001001001101001001001";
        ram[5] = "0b10111100000011101100101010101001";
        ram[6] = "0b00111110011000100110111001010100";
        ram[7] = "0b00111101100101011100010001100101";
        ram[8] = "0b10111101011001011101000000001001";
        ram[9] = "0b00111101101011011100010101101011";
        ram[10] = "0b10111101010110010111100011111101";
        ram[11] = "0b00111101000000101000111111111101";
        ram[12] = "0b00111100110100100111101011000001";
        ram[13] = "0b10111100100000001100111011111101";
        ram[14] = "0b00111101011000011101110101101011";
        ram[15] = "0b00111011111010101110001001001100";
        ram[16] = "0b00111101101010101001110111011011";
        ram[17] = "0b00111101100111111000111010100110";
        ram[18] = "0b00111101010110100110100101101110";
        ram[19] = "0b00111110000010001000101000000101";
        ram[20] = "0b00111101101110111000101000001100";
        ram[21] = "0b00111001000101001011111100101110";
        ram[22] = "0b00111101011111011000001110111001";
        ram[23] = "0b00111100111011011101100001001011";
        ram[24] = "0b00111011110101010010010010100000";
        ram[25] = "0b00111101000000010110001000011011";
        ram[26] = "0b10111101010001001001011011101110";
        ram[27] = "0b00111110000011011101001100110101";
        ram[28] = "0b10111101010001000011010000100111";
        ram[29] = "0b10111101011010111011011000110001";
        ram[30] = "0b00111101010110110001001001110101";
        ram[31] = "0b10111101101101011000101000001011";
        ram[32] = "0b10111110000100110110111010110101";
        ram[33] = "0b10111101101111100100000000110101";
        ram[34] = "0b00111010011010101001000100000011";
        ram[35] = "0b00111110001111100100000100001011";
        ram[36] = "0b10111100100001001110010100001100";
        ram[37] = "0b00111101100111000010011111101001";
        ram[38] = "0b00111110000011110110000111101101";
        ram[39] = "0b10111100111001001011000110010000";
        ram[40] = "0b00111100100111000100101111000110";
        ram[41] = "0b10111101110010110100101010110111";
        ram[42] = "0b10111101101100100111010000001011";
        ram[43] = "0b00111101101011110111011000011101";
        ram[44] = "0b00111110000000011011111011110101";
        ram[45] = "0b10111101100000010010011111001110";
        ram[46] = "0b10111101101000000011000001100100";
        ram[47] = "0b00111101000010111001011010100010";
        ram[48] = "0b10111101000100010010010000110000";
        ram[49] = "0b00111101100001110101100010101100";
        ram[50] = "0b00111100011010100010100111010101";
        ram[51] = "0b10111100000011001101001000010110";
        ram[52] = "0b10111101010000100101111101110001";
        ram[53] = "0b00111100100010000000000001001010";
        ram[54] = "0b00111101101011111011101000111000";
        ram[55] = "0b10111101110111010010101001100011";
        ram[56] = "0b10111101111100001000000100111101";
        ram[57] = "0b00111100101000000100011000100110";
        ram[58] = "0b10111101001011001000101111111111";
        ram[59] = "0b10111100100111100010010100011010";
        ram[60] = "0b00111011110110011000111110010011";
        ram[61] = "0b10111101010000100010001101000000";
        ram[62] = "0b10111110010111100011101100000100";
        ram[63] = "0b00111110010000100001110001000111";
        ram[64] = "0b00111101111011001001111100110000";
        ram[65] = "0b10111100001110001011111111010000";
        ram[66] = "0b10111001110101011100110110111001";
        ram[67] = "0b10111011100000100010101001111101";
        ram[68] = "0b00111100101011010110101011010010";
        ram[69] = "0b00111010000101000000100000101101";
        ram[70] = "0b00111101100111101010101100011100";
        ram[71] = "0b10111101111010111101011101101111";
        ram[72] = "0b00111110000101001001001010111100";
        ram[73] = "0b00111110000101011010110101010100";
        ram[74] = "0b00111100011100100011000111100001";
        ram[75] = "0b10111110001010010110000001110100";
        ram[76] = "0b00111101011011000101111001001000";
        ram[77] = "0b00111101101011101001100001100100";
        ram[78] = "0b10111101101101001101110111101011";
        ram[79] = "0b10111101000000000111100011100111";
        ram[80] = "0b10111101110101000010111111101000";
        ram[81] = "0b10111110000000010101111100000011";
        ram[82] = "0b00111101111111000111100010100111";
        ram[83] = "0b00111101011111111110110001111111";
        ram[84] = "0b00111011110100100111110101111011";
        ram[85] = "0b10111110000001110111110110010101";
        ram[86] = "0b10111110001101010111011010001010";
        ram[87] = "0b00111100100000101001111111101101";
        ram[88] = "0b10111011111111010110110010010010";
        ram[89] = "0b00111101111110111001111000000110";
        ram[90] = "0b10111110000010011100011000101010";
        ram[91] = "0b10111101100110100100000110110000";
        ram[92] = "0b00111101011011111101111101010110";
        ram[93] = "0b00111101000001010001111000010111";
        ram[94] = "0b00111101001011000110010010101101";
        ram[95] = "0b00111011110101010111100101101111";
        ram[96] = "0b10111101010001101111010100110111";
        ram[97] = "0b00111101101111000111100111001110";
        ram[98] = "0b10111101111111101111000001101011";
        ram[99] = "0b10111101000111001100110111100111";
        ram[100] = "0b10111101101111101011010001010110";
        ram[101] = "0b10111101010011010010110100101010";
        ram[102] = "0b00111100111101000010100100110010";
        ram[103] = "0b00111100010101001010000011010111";
        ram[104] = "0b10111001100101110111101101100101";
        ram[105] = "0b10111100100011101000001100011011";
        ram[106] = "0b00111101100100101111010011000010";
        ram[107] = "0b10111101001100101000010110101001";
        ram[108] = "0b00111100111101101010111110111111";
        ram[109] = "0b00111101101000111100000001110001";
        ram[110] = "0b00111011001011110010001011101110";
        ram[111] = "0b10111100100010010001101101100111";
        ram[112] = "0b10111100000111110101000001101000";
        ram[113] = "0b00111100111001111100001101011110";
        ram[114] = "0b00111101110110010001001001010101";
        ram[115] = "0b10111101111110110101101011101010";
        ram[116] = "0b00111101100110110000111011110010";
        ram[117] = "0b00111110001011101100101101110101";
        ram[118] = "0b00111101011000000011001011110110";
        ram[119] = "0b00111100011100101111100100011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_12) {
meminst = new inference_conv2d_f3_0_2_12_ram("inference_conv2d_f3_0_2_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_12() {
    delete meminst;
}


};//endmodule
#endif
