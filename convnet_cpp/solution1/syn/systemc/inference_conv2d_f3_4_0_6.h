// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_6_H__
#define __inference_conv2d_f3_4_0_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_6_ram) {
        ram[0] = "0b00111101100000100110100000010111";
        ram[1] = "0b10111101110101000111001100000100";
        ram[2] = "0b00111101101000001100100100011110";
        ram[3] = "0b00111101110010101001010001101011";
        ram[4] = "0b10111101000101100111011110100110";
        ram[5] = "0b00111100101110100011100110111000";
        ram[6] = "0b00111101011010011011011000010010";
        ram[7] = "0b10111101000011010011101010010110";
        ram[8] = "0b00111110000010000011100011000001";
        ram[9] = "0b10111101100000110111111001101111";
        ram[10] = "0b10111110000101011001010101111001";
        ram[11] = "0b00111101100001001100011010010110";
        ram[12] = "0b10111100101010000001101010011100";
        ram[13] = "0b10111101110110100100010010000101";
        ram[14] = "0b00111101101100001100010101100101";
        ram[15] = "0b00111101101111110110100000011101";
        ram[16] = "0b00111110000100110011110011100110";
        ram[17] = "0b00111101011011001101001010010001";
        ram[18] = "0b00111101000011011110111011010110";
        ram[19] = "0b00111100111010010010011111100010";
        ram[20] = "0b10111101001000000101010000110011";
        ram[21] = "0b00111101000100100010100100101101";
        ram[22] = "0b00111101100101011001101001110100";
        ram[23] = "0b00111101100101011000100001010000";
        ram[24] = "0b10111101101000101001101101000011";
        ram[25] = "0b10111101010011001001101011001000";
        ram[26] = "0b10111101011001100100000110011000";
        ram[27] = "0b10111101001001000111111010110101";
        ram[28] = "0b10111101100100100001001000000001";
        ram[29] = "0b00111101111001001100010110010111";
        ram[30] = "0b10111110010110001101101000111100";
        ram[31] = "0b10111011100011001110010110010111";
        ram[32] = "0b10111101011001011001000110001010";
        ram[33] = "0b10111100111010110000001111101111";
        ram[34] = "0b10111101100000111111000100110100";
        ram[35] = "0b00111101100000111110100110001100";
        ram[36] = "0b00111100110010000001100001101000";
        ram[37] = "0b10111100101011110111010001100010";
        ram[38] = "0b10111011001100111101100000110100";
        ram[39] = "0b00111011101000011111110111000001";
        ram[40] = "0b00111100000010101101111101010111";
        ram[41] = "0b00111100101111100000100001000100";
        ram[42] = "0b00111101110101000000110111010100";
        ram[43] = "0b10111101010000011001010100010001";
        ram[44] = "0b10111011101000101000000110001010";
        ram[45] = "0b00111101100010110101000010110001";
        ram[46] = "0b10111101000000011100110101111010";
        ram[47] = "0b10111101110011101101111001010101";
        ram[48] = "0b10111110000010000011011001100101";
        ram[49] = "0b00111101000000001101110101110110";
        ram[50] = "0b10111110001011110011001010111110";
        ram[51] = "0b00111100111011000101000100101100";
        ram[52] = "0b10111110000101101110001101110001";
        ram[53] = "0b00111100101011111001100110000000";
        ram[54] = "0b00111110001001011000100011100011";
        ram[55] = "0b10111101011101001110111001010100";
        ram[56] = "0b00111101000000100100010001001000";
        ram[57] = "0b10111100001011000100100001011101";
        ram[58] = "0b00111101010001101000110010010001";
        ram[59] = "0b00111101110011100100111010101101";
        ram[60] = "0b00111100010111010111100011101100";
        ram[61] = "0b10111101100010100000111111101111";
        ram[62] = "0b10111101100101100100010000011101";
        ram[63] = "0b10111101011100110010000010100100";
        ram[64] = "0b10111101101000111000100111010000";
        ram[65] = "0b10111101010011010011110110111011";
        ram[66] = "0b10111100010010101000100010111010";
        ram[67] = "0b00111101111110011110010100011001";
        ram[68] = "0b10111101011111010100010110100110";
        ram[69] = "0b00111101000001111111111101110011";
        ram[70] = "0b10111110001000010001111100001100";
        ram[71] = "0b00111101100010111110011110000111";
        ram[72] = "0b10111101101110010110010110010111";
        ram[73] = "0b10111110001100111110101011110111";
        ram[74] = "0b00111101010100000101001001000011";
        ram[75] = "0b00111110000000010001110101111010";
        ram[76] = "0b10111101101101100001101001101110";
        ram[77] = "0b10111110001011101110111110100010";
        ram[78] = "0b00111101110110011011001000111110";
        ram[79] = "0b00111101100110110101010010101101";
        ram[80] = "0b10111101001000011010000111011100";
        ram[81] = "0b00111100101000100100001101010111";
        ram[82] = "0b10111101100110111110101000100110";
        ram[83] = "0b00111110001001001001100010000001";
        ram[84] = "0b00111101000000000001111101110101";
        ram[85] = "0b00111011100000001010111001010001";
        ram[86] = "0b10111101111110010111111011011100";
        ram[87] = "0b00111101110110101011011111011100";
        ram[88] = "0b00111100110011111111101110001011";
        ram[89] = "0b10111101100010101010000100101001";
        ram[90] = "0b00111101001000111111111110111010";
        ram[91] = "0b10111100100010100110100100010000";
        ram[92] = "0b10111010111100000111000110011000";
        ram[93] = "0b10111101100001101100111010101110";
        ram[94] = "0b10111101100010110111110111100011";
        ram[95] = "0b00111101000000001111100011010100";
        ram[96] = "0b10111101011010111001101100001001";
        ram[97] = "0b10111101001011101010010111101011";
        ram[98] = "0b00111101110110110001100111100111";
        ram[99] = "0b10111101111011101101001101010010";
        ram[100] = "0b00111110001011010001011000110011";
        ram[101] = "0b10111101111011001000000111010100";
        ram[102] = "0b00111101110100000101001010010011";
        ram[103] = "0b00111011101111011010011010111111";
        ram[104] = "0b10111101101101110110111001100001";
        ram[105] = "0b10111101110110111010011111111100";
        ram[106] = "0b10111100000100111011010011001000";
        ram[107] = "0b00111101000100111001100011001111";
        ram[108] = "0b10111101110010000011001010000100";
        ram[109] = "0b00111110000010011000110011000001";
        ram[110] = "0b00111100101010110011011101010001";
        ram[111] = "0b00111101100101110000100110110111";
        ram[112] = "0b10111100111010110101100101001010";
        ram[113] = "0b00111001111111101110111001001100";
        ram[114] = "0b10111100100100100111010000001011";
        ram[115] = "0b00111101100000111111000011100011";
        ram[116] = "0b10111110000101111010010001100001";
        ram[117] = "0b00111101101001011110010111011000";
        ram[118] = "0b10111110000101110111111100101000";
        ram[119] = "0b00111101100000110111110110011001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_6) {
meminst = new inference_conv2d_f3_4_0_6_ram("inference_conv2d_f3_4_0_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_6() {
    delete meminst;
}


};//endmodule
#endif
