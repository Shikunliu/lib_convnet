// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_0_H__
#define __inference_conv2d_f3_1_0_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_0_ram) {
        ram[0] = "0b10111100101110000001101000100011";
        ram[1] = "0b10111110001010001010100100110111";
        ram[2] = "0b00111101000110011101101100111110";
        ram[3] = "0b10111101011011100010011111111100";
        ram[4] = "0b10111110000110000010100000111101";
        ram[5] = "0b10111101100101100001010010101010";
        ram[6] = "0b10111101100110111110110110000001";
        ram[7] = "0b00111100001100111001010011101101";
        ram[8] = "0b10111101100101101010101100110000";
        ram[9] = "0b00111110001111000100011101011110";
        ram[10] = "0b10111101110100110000101101011011";
        ram[11] = "0b10111101101000111101100101001011";
        ram[12] = "0b00111101001101010110001101011001";
        ram[13] = "0b00111100111000000000011011010001";
        ram[14] = "0b10111110000011010011000110111010";
        ram[15] = "0b00111101110110111001100101001110";
        ram[16] = "0b10111110010100010000101100100000";
        ram[17] = "0b10111101100101000010101110101001";
        ram[18] = "0b00111100110111101101100001101000";
        ram[19] = "0b00111100101101111100101101001000";
        ram[20] = "0b00111101100011101110001111111110";
        ram[21] = "0b00111110000000001111011100110100";
        ram[22] = "0b10111101110010101111001001101101";
        ram[23] = "0b00111101101100110010001101010000";
        ram[24] = "0b00111100010011010000111111101001";
        ram[25] = "0b10111100011010010011000001000101";
        ram[26] = "0b10111101110111100001010010111110";
        ram[27] = "0b10111101011000100101010010001001";
        ram[28] = "0b00111101010011000111101100111001";
        ram[29] = "0b00111101110001110000000011001110";
        ram[30] = "0b00111110010001100001110110000110";
        ram[31] = "0b00111110000100100001111001100000";
        ram[32] = "0b00111101101110100011111101111100";
        ram[33] = "0b10111110000011011101000101011111";
        ram[34] = "0b00111101011010001010000010111000";
        ram[35] = "0b00111101011111101011001011000011";
        ram[36] = "0b00111110010001011000010101111011";
        ram[37] = "0b00111110001100111111100001010101";
        ram[38] = "0b10111101101000111101010101000010";
        ram[39] = "0b00111101101101011001001010110001";
        ram[40] = "0b00111110000001001001000010100011";
        ram[41] = "0b10111110000110011000010000011011";
        ram[42] = "0b10111100101011011101111111010111";
        ram[43] = "0b10111101000010101101110100001001";
        ram[44] = "0b00111101000111011100101111000011";
        ram[45] = "0b10111101111011101011110001000001";
        ram[46] = "0b00111101010100111011001001001010";
        ram[47] = "0b10111110000010000010001010111100";
        ram[48] = "0b10111110000000110011111101000010";
        ram[49] = "0b00111101100011101011101011110001";
        ram[50] = "0b10111101100000100100101001011101";
        ram[51] = "0b00111101100100000100000000111010";
        ram[52] = "0b00111101001010010111010101000100";
        ram[53] = "0b10111110000011000000100011111010";
        ram[54] = "0b00111101000011101010111000011001";
        ram[55] = "0b10111101000001111100000010001001";
        ram[56] = "0b00111101000011001010111010110101";
        ram[57] = "0b10111100101111011111010100101110";
        ram[58] = "0b00111101001110101101000000010101";
        ram[59] = "0b00111101100000101011001111110101";
        ram[60] = "0b10111110000110000001001101000101";
        ram[61] = "0b10111101100000100110000010110011";
        ram[62] = "0b00111101110100101000000101110111";
        ram[63] = "0b00111110001010001000001101110111";
        ram[64] = "0b10111101001100100111011110110111";
        ram[65] = "0b10111110001011110100011000100100";
        ram[66] = "0b00111110001001111001001000001000";
        ram[67] = "0b10111110000000100100101011110001";
        ram[68] = "0b00111101011000011111010101010011";
        ram[69] = "0b00111101010011011000111011001001";
        ram[70] = "0b10111100111100101000100001111110";
        ram[71] = "0b10111110001000100011001001001101";
        ram[72] = "0b00111101011000110011111100110101";
        ram[73] = "0b10111101111000110100001100110001";
        ram[74] = "0b10111100101011101011010100011111";
        ram[75] = "0b00111101110100010110010101001101";
        ram[76] = "0b10111110000100000010011011001100";
        ram[77] = "0b10111101100010010011011000111111";
        ram[78] = "0b00111110000011100110000000111101";
        ram[79] = "0b00111100001100011010000101100011";
        ram[80] = "0b10111100111110100001001100100001";
        ram[81] = "0b00111011101101000100110011111001";
        ram[82] = "0b10111100011101011011010111111010";
        ram[83] = "0b00111101100011101110100001110011";
        ram[84] = "0b10111100101011110001001110110100";
        ram[85] = "0b00111100011000110001011111111101";
        ram[86] = "0b10111100100001000101010000100011";
        ram[87] = "0b00111101111010111000000111111001";
        ram[88] = "0b00111101001111101101100110001111";
        ram[89] = "0b10111110001110001000010111010011";
        ram[90] = "0b00111100111111010001001001000101";
        ram[91] = "0b00111100110000010110001100001100";
        ram[92] = "0b10111101101000111101001011100110";
        ram[93] = "0b00111100111000011001011000011101";
        ram[94] = "0b00111101001001110001011000001001";
        ram[95] = "0b00111100010010111101011111011010";
        ram[96] = "0b00111101100011010100111101100110";
        ram[97] = "0b10111100110110100010101110010000";
        ram[98] = "0b00111101110000011101101001010011";
        ram[99] = "0b10111100101011101000110111101000";
        ram[100] = "0b00111101011111111001000000000011";
        ram[101] = "0b10111101101011010100101111100011";
        ram[102] = "0b00111011011010111010011110101110";
        ram[103] = "0b10111101110110000110101010010000";
        ram[104] = "0b00111011011011000011101111111110";
        ram[105] = "0b00111110001000010111010101001011";
        ram[106] = "0b00111011100001010011000110011000";
        ram[107] = "0b10111100111101001110001101101100";
        ram[108] = "0b10111100100010111011101110001011";
        ram[109] = "0b00111100000010110001000111000001";
        ram[110] = "0b10111101011110101000110111010000";
        ram[111] = "0b10111101111100001010000100111000";
        ram[112] = "0b00111101000010101110011001111000";
        ram[113] = "0b00111100110111100100101101000101";
        ram[114] = "0b10111010100110000110010000001111";
        ram[115] = "0b00111101100011100110111111101010";
        ram[116] = "0b00111110001000100011011001111110";
        ram[117] = "0b00111101100100100011010010110110";
        ram[118] = "0b00111101010001000001001010110100";
        ram[119] = "0b00111101101111011011110011101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_0) {
meminst = new inference_conv2d_f3_1_0_0_ram("inference_conv2d_f3_1_0_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_0() {
    delete meminst;
}


};//endmodule
#endif
