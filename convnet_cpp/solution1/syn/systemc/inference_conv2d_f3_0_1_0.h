// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_0_H__
#define __inference_conv2d_f3_0_1_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_0_ram) {
        ram[0] = "0b00111101110110000001110001110001";
        ram[1] = "0b00111100110011111010110111110011";
        ram[2] = "0b10111101001011010011001101011010";
        ram[3] = "0b10111010000000001101111111111110";
        ram[4] = "0b00111101111111110000010111101010";
        ram[5] = "0b10111100111100011011110010100110";
        ram[6] = "0b10111110000001110111010000100101";
        ram[7] = "0b00111100100010111001100101011100";
        ram[8] = "0b10111110010001100011100000000000";
        ram[9] = "0b00111101100100010101000101000110";
        ram[10] = "0b00111101100011101101011001101010";
        ram[11] = "0b00111110010010011010000010101110";
        ram[12] = "0b10111110000010110111110111001000";
        ram[13] = "0b10111010011100101110110111011010";
        ram[14] = "0b00111101000000101111110101110110";
        ram[15] = "0b00111101100011111011010100111101";
        ram[16] = "0b10111011111000010010011110111000";
        ram[17] = "0b10111101011110110111001110101001";
        ram[18] = "0b10111101000100110101110100100101";
        ram[19] = "0b00111110000101101110001000100010";
        ram[20] = "0b10111101000100001110100001010000";
        ram[21] = "0b00111101001110101000000111000001";
        ram[22] = "0b10111100101111100010101111101010";
        ram[23] = "0b00111101011011110000001010000010";
        ram[24] = "0b10111101111001010110101000111000";
        ram[25] = "0b10111101110011011000011101110010";
        ram[26] = "0b10111101010001110000101111011110";
        ram[27] = "0b10111100110101010110111101101000";
        ram[28] = "0b10111100100001011111001010111110";
        ram[29] = "0b10111101001010111001011110010011";
        ram[30] = "0b00111101100010101111010010100000";
        ram[31] = "0b00111101101101100101000110001001";
        ram[32] = "0b00111101100000111001110100000000";
        ram[33] = "0b00111110000100010010111110010000";
        ram[34] = "0b10111011101000011000101010101010";
        ram[35] = "0b10111101101001000010101100111110";
        ram[36] = "0b10111101100100001011111100110101";
        ram[37] = "0b00111101100011110100100001110010";
        ram[38] = "0b00111101010111111100011111100111";
        ram[39] = "0b00111101001010011000100110000001";
        ram[40] = "0b10111101001101010000101010100100";
        ram[41] = "0b00111101101011101100011110010100";
        ram[42] = "0b00111101101111110000101100000000";
        ram[43] = "0b10111101110000101111111100100011";
        ram[44] = "0b10111101110111010101000100101111";
        ram[45] = "0b10111101101000000111110100011000";
        ram[46] = "0b00111100101000011000001111011110";
        ram[47] = "0b00111100001010000011000111100011";
        ram[48] = "0b10111101101001000001001111110110";
        ram[49] = "0b00111101101000101111111001011010";
        ram[50] = "0b10111110001011111011100000101100";
        ram[51] = "0b00111101101011111110001111001011";
        ram[52] = "0b00111101001111001011011111111100";
        ram[53] = "0b00111110000001111110000100110011";
        ram[54] = "0b00111101010111001010011100011011";
        ram[55] = "0b00111110000110111111111001111110";
        ram[56] = "0b00111110001110011110111100001111";
        ram[57] = "0b10111101001111010110110111101010";
        ram[58] = "0b10111101110010110101100010101001";
        ram[59] = "0b00111100011011111010000100001101";
        ram[60] = "0b00111101011101110000100110110111";
        ram[61] = "0b00111110000000000100100101100110";
        ram[62] = "0b00111101000101101001010100111000";
        ram[63] = "0b10111101111110010100000110000101";
        ram[64] = "0b00111101111001010011110100100001";
        ram[65] = "0b00111101000000011111101110000011";
        ram[66] = "0b00111101000000101110101111011000";
        ram[67] = "0b00111101010110001001011111000001";
        ram[68] = "0b10111101110111101111010010011101";
        ram[69] = "0b10111101001110010111000111011100";
        ram[70] = "0b10111110001110100110010111001111";
        ram[71] = "0b10111101100111000011111011000101";
        ram[72] = "0b00111101100010001100110101010110";
        ram[73] = "0b00111010101100111111110001000110";
        ram[74] = "0b10111101010000101100000011110101";
        ram[75] = "0b10111110000111100001000011001111";
        ram[76] = "0b10111110001010010110000111000011";
        ram[77] = "0b00111101101100101000100001110000";
        ram[78] = "0b10111101111010000000001100000100";
        ram[79] = "0b00111100000101011000111010011101";
        ram[80] = "0b10111101101111111111101001001001";
        ram[81] = "0b10111100111000001010111101101101";
        ram[82] = "0b10111101100010101000000011010000";
        ram[83] = "0b00111110001111110101101111100110";
        ram[84] = "0b00111101110100000011010010110001";
        ram[85] = "0b10111110000100101100000101101110";
        ram[86] = "0b10111110001000001001100001001110";
        ram[87] = "0b10111101100101101110101000100111";
        ram[88] = "0b10111101001001000100011111011110";
        ram[89] = "0b10111011100101010001100110011000";
        ram[90] = "0b10111101111110100101000100011010";
        ram[91] = "0b00111101001011100111010101011110";
        ram[92] = "0b00111110000000010001001010111010";
        ram[93] = "0b10111100110111110001011100011100";
        ram[94] = "0b10111101011101101110111110000000";
        ram[95] = "0b00111101111001100101000111110100";
        ram[96] = "0b00111101111010110001101010110001";
        ram[97] = "0b00111100001100001101101101101010";
        ram[98] = "0b10111100100011000000011110101011";
        ram[99] = "0b00111101000001100111000011111110";
        ram[100] = "0b00111100101001111111100011011000";
        ram[101] = "0b00111101101111001010001011110110";
        ram[102] = "0b10111110001110100100001110111011";
        ram[103] = "0b00111110001011101110001110010011";
        ram[104] = "0b10111100000010010101101101011110";
        ram[105] = "0b00111110000110110111010011011110";
        ram[106] = "0b00111101100000101000110010100010";
        ram[107] = "0b10111011101000100011011111111001";
        ram[108] = "0b00111101000000110110100011010110";
        ram[109] = "0b00111101110001111010000000010101";
        ram[110] = "0b10111101000101100011111000110000";
        ram[111] = "0b10111101001000010110110001100001";
        ram[112] = "0b10111101101111101011010101110000";
        ram[113] = "0b10111100110110110011111011101011";
        ram[114] = "0b00111101100011000111011011101100";
        ram[115] = "0b00111110000110110010110001000001";
        ram[116] = "0b10111101001110101010010100110010";
        ram[117] = "0b10111101100010011011110100001011";
        ram[118] = "0b00111101111100100110100101011001";
        ram[119] = "0b00111101000111011000011000100011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_0) {
meminst = new inference_conv2d_f3_0_1_0_ram("inference_conv2d_f3_0_1_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_0() {
    delete meminst;
}


};//endmodule
#endif
