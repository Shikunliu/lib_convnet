// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_5_H__
#define __inference_conv2d_f3_3_3_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_5_ram) {
        ram[0] = "0b00111101100100100001101011000010";
        ram[1] = "0b00111110000111001010100000011010";
        ram[2] = "0b00111110000001010001101110010011";
        ram[3] = "0b10111100110101011010001001011110";
        ram[4] = "0b10111100001111011000011011011111";
        ram[5] = "0b00111100010010111110000100010101";
        ram[6] = "0b10111001110011011101010010101100";
        ram[7] = "0b10111100010101001011000100110010";
        ram[8] = "0b10111101000000010110101001001000";
        ram[9] = "0b00111101100011101100100100001011";
        ram[10] = "0b00111101010000101001100000010000";
        ram[11] = "0b10111100011100100001000110010101";
        ram[12] = "0b10111100110101101111011011110010";
        ram[13] = "0b00111101100100010000111011100110";
        ram[14] = "0b10111101010110000100011010110011";
        ram[15] = "0b10111101000001101111011111110001";
        ram[16] = "0b00111110000110010100110111010111";
        ram[17] = "0b00111101110110010111011110000101";
        ram[18] = "0b10111011101000111001001010010111";
        ram[19] = "0b10111101010001011110101101100111";
        ram[20] = "0b00111101101100111011101111100010";
        ram[21] = "0b10111100111000110100011110011000";
        ram[22] = "0b10111110001110101010111110111100";
        ram[23] = "0b00111100110101011010001111010110";
        ram[24] = "0b00111101000011110001001000100001";
        ram[25] = "0b00111101100111001100111001011111";
        ram[26] = "0b00111110001000000010010100111001";
        ram[27] = "0b00111110001101111110000101110110";
        ram[28] = "0b00111101100011100000010001001000";
        ram[29] = "0b00111110001000000110000001111000";
        ram[30] = "0b00111100001010111010100101100111";
        ram[31] = "0b00111101101010110001110010111100";
        ram[32] = "0b10111101011011011010010101110000";
        ram[33] = "0b10111101101000010100111000000110";
        ram[34] = "0b00111110001001111101000001101100";
        ram[35] = "0b10111100101111001110011000000101";
        ram[36] = "0b10111101101011010100111011000101";
        ram[37] = "0b00111100111001010001001101001010";
        ram[38] = "0b00111100101010100010010001100001";
        ram[39] = "0b10111101011001010010000011010001";
        ram[40] = "0b10111110001100111110110100001111";
        ram[41] = "0b00111100011000110101101110000101";
        ram[42] = "0b00111101011011011011011000110111";
        ram[43] = "0b10111100110010011011000010111001";
        ram[44] = "0b10111101110000101010001000100001";
        ram[45] = "0b00111011100111000000001001010101";
        ram[46] = "0b10111110001111001001100000011100";
        ram[47] = "0b10111101011000110011101010110011";
        ram[48] = "0b10111100001011100100100000010010";
        ram[49] = "0b00111101010100011000111101110100";
        ram[50] = "0b00111101110011101110110100000011";
        ram[51] = "0b10111101101000011100100100000110";
        ram[52] = "0b00111110000111100110001100100000";
        ram[53] = "0b10111101010000110000110100110000";
        ram[54] = "0b10111101111011011010011101101110";
        ram[55] = "0b10111100101001010001010001010111";
        ram[56] = "0b00111101001111010001000010010111";
        ram[57] = "0b00111100110010101100011010011000";
        ram[58] = "0b10111101101101101001101110011101";
        ram[59] = "0b10111011101010100100011001111011";
        ram[60] = "0b10111101110110100011001000101011";
        ram[61] = "0b00111101100011000011011111001100";
        ram[62] = "0b10111101000000010110100111000010";
        ram[63] = "0b00111110001001101011001011110010";
        ram[64] = "0b00111101100011111001111101111011";
        ram[65] = "0b10111011110100010101100101111001";
        ram[66] = "0b00111101000100100000111001010101";
        ram[67] = "0b00111101110101001100110000100101";
        ram[68] = "0b10111100011010011001010101011010";
        ram[69] = "0b00111100001000010111100010110110";
        ram[70] = "0b10111101001000011011110001001000";
        ram[71] = "0b10111101111001111001100000001111";
        ram[72] = "0b00111101110011011101011000010111";
        ram[73] = "0b00111101000101111000000100100110";
        ram[74] = "0b00111101001001011001001001111100";
        ram[75] = "0b10111101010000000011100001001111";
        ram[76] = "0b00111101000000101000100011011100";
        ram[77] = "0b00111101001000101001111011111100";
        ram[78] = "0b00111100111111001100011100110001";
        ram[79] = "0b00111101000010001100010001111010";
        ram[80] = "0b00111101111000011000101001000100";
        ram[81] = "0b00111101101111001111111000110000";
        ram[82] = "0b00111101111111111011011110100110";
        ram[83] = "0b10111011111001111100001010000111";
        ram[84] = "0b10111101101000110010100100100010";
        ram[85] = "0b10111101110110011010101011100111";
        ram[86] = "0b00111101110100100001110101010100";
        ram[87] = "0b10111101001010000011100011001110";
        ram[88] = "0b10111101011100000100011000011001";
        ram[89] = "0b00111100101100111010100101111011";
        ram[90] = "0b10111101000000000111011010011000";
        ram[91] = "0b00111100000111001111011111111110";
        ram[92] = "0b00111100101011110101001110101011";
        ram[93] = "0b00111110000101001100101110011111";
        ram[94] = "0b00111101000110001101101100101110";
        ram[95] = "0b10111101101010010110111100010101";
        ram[96] = "0b10111101101000001100111101101001";
        ram[97] = "0b10111101000110010100010000100100";
        ram[98] = "0b00111100101001111110000101011011";
        ram[99] = "0b10111110000001011000110101011000";
        ram[100] = "0b10111110001011111100100011110011";
        ram[101] = "0b10111101110111000011000011010011";
        ram[102] = "0b00111011101100110011111001011011";
        ram[103] = "0b00111110000010110010110100001010";
        ram[104] = "0b00111101101111010001100110011100";
        ram[105] = "0b00111110000111011111000010010001";
        ram[106] = "0b10111110000111101111001111010100";
        ram[107] = "0b00111011100001110010011110111101";
        ram[108] = "0b00111110001110110010110111010011";
        ram[109] = "0b00111101100110011001000110000111";
        ram[110] = "0b10111101100111011110000001010000";
        ram[111] = "0b10111101011100011000111000110010";
        ram[112] = "0b10111100100101110110111110111110";
        ram[113] = "0b10111101111011011100110110110011";
        ram[114] = "0b10111101110001001101011001011110";
        ram[115] = "0b10111100111001100001111110111010";
        ram[116] = "0b10111100111001101001111100111100";
        ram[117] = "0b10111100110110000110111011000001";
        ram[118] = "0b00111101011111110000111010000011";
        ram[119] = "0b10111101001000001000111100000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_5) {
meminst = new inference_conv2d_f3_3_3_5_ram("inference_conv2d_f3_3_3_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_5() {
    delete meminst;
}


};//endmodule
#endif
