// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_9_H__
#define __inference_conv2d_f3_0_2_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_9_ram) {
        ram[0] = "0b10111110010101110011110000001100";
        ram[1] = "0b00111011111111100010010011011111";
        ram[2] = "0b10111101110000001010101001100101";
        ram[3] = "0b10111100111001001101001110111111";
        ram[4] = "0b10111110100000101110110111011101";
        ram[5] = "0b00111101011111001100101111001110";
        ram[6] = "0b00111101010101100110001010010011";
        ram[7] = "0b10111101010001100011011110100010";
        ram[8] = "0b10111100100110011100001011101010";
        ram[9] = "0b00111101101111101000010101110111";
        ram[10] = "0b10111101101000101110100011011011";
        ram[11] = "0b10111101101010010001001000010010";
        ram[12] = "0b00111110001101000001000011111001";
        ram[13] = "0b00111101110011001000110100110100";
        ram[14] = "0b00111101000100010101111100011110";
        ram[15] = "0b00111011101100111010101101101001";
        ram[16] = "0b00111100111111010101110111111010";
        ram[17] = "0b10111101101001000110001010101000";
        ram[18] = "0b00111110010110011110111010001001";
        ram[19] = "0b00111100110000101111010110110011";
        ram[20] = "0b00111110011110010110011101000101";
        ram[21] = "0b00111011101000110010110111000010";
        ram[22] = "0b10111101110110111010011011110000";
        ram[23] = "0b10111110011110010110100000001110";
        ram[24] = "0b10111101110100111011110100010110";
        ram[25] = "0b10111100010011101000110100101100";
        ram[26] = "0b10111101001110000010111101101100";
        ram[27] = "0b10111101001001000011011101001101";
        ram[28] = "0b00111110100001001111111111101011";
        ram[29] = "0b00111101011111001100101100010010";
        ram[30] = "0b10111110011011001100010100110011";
        ram[31] = "0b10111101110000001110100101110111";
        ram[32] = "0b00111110010000100101011111001001";
        ram[33] = "0b00111110010100101010000101110011";
        ram[34] = "0b10111110001001111101100011001111";
        ram[35] = "0b10111101010100110000100100001100";
        ram[36] = "0b00111101001001010111101100011001";
        ram[37] = "0b00111100100010010111001010100101";
        ram[38] = "0b00111011100000101111010110111110";
        ram[39] = "0b10111101010000001100100110001001";
        ram[40] = "0b10111101100010111000001111101010";
        ram[41] = "0b00111100101100001000111110110101";
        ram[42] = "0b10111110001000111111101011110100";
        ram[43] = "0b00111110001000101001000000100101";
        ram[44] = "0b00111101000000101011000001001001";
        ram[45] = "0b10111101101100100000110100000110";
        ram[46] = "0b00111010011111101101001011111100";
        ram[47] = "0b10111101110010011101011110101101";
        ram[48] = "0b00111101010000110000001101110000";
        ram[49] = "0b10111101000101010100010000011010";
        ram[50] = "0b00111110001000100000011001000010";
        ram[51] = "0b10111100010110100011111111100111";
        ram[52] = "0b00111100101010110100011001101010";
        ram[53] = "0b10111101010010011110001000011100";
        ram[54] = "0b10111101100010111111000000000110";
        ram[55] = "0b10111100110100111110010110010000";
        ram[56] = "0b10111101011001101111001100011110";
        ram[57] = "0b00111101110011000110001101111000";
        ram[58] = "0b00111101011110011000000111001100";
        ram[59] = "0b00111101111001001111001100110100";
        ram[60] = "0b10111110000111010101011110111100";
        ram[61] = "0b10111110010000011110101011111111";
        ram[62] = "0b00111011110110101000001011101110";
        ram[63] = "0b00111110010011100111110011010000";
        ram[64] = "0b10111101000010110011100110111010";
        ram[65] = "0b10111110000001111110101010100011";
        ram[66] = "0b10111100111001101111001000010010";
        ram[67] = "0b00111101011111010101001000100000";
        ram[68] = "0b00111110100101101111100101110110";
        ram[69] = "0b00111101101111011100101010001110";
        ram[70] = "0b00111101010111110110011110111111";
        ram[71] = "0b00111101001101101010010101000011";
        ram[72] = "0b00111101001000100001001110100001";
        ram[73] = "0b00111101100010001110010101110100";
        ram[74] = "0b00111101110011010010111001010001";
        ram[75] = "0b10111101101111110010001101010100";
        ram[76] = "0b00111101001110110000011111011110";
        ram[77] = "0b10111101001010001010000110001111";
        ram[78] = "0b10111110000010011000010101101010";
        ram[79] = "0b10111101101110110010100011001011";
        ram[80] = "0b10111110000001100011110001110101";
        ram[81] = "0b00111101000100100010000100011010";
        ram[82] = "0b00111101010001001010111100001100";
        ram[83] = "0b10111110000000100101110101001010";
        ram[84] = "0b00111100101001110110000101101110";
        ram[85] = "0b10111101100100001100010011101100";
        ram[86] = "0b00111101010110001000001101001111";
        ram[87] = "0b00111101101001111000101001111011";
        ram[88] = "0b10111101101100111010110110011111";
        ram[89] = "0b10111101111100010011110011101111";
        ram[90] = "0b10111101111110110111001100001000";
        ram[91] = "0b00111101111110100101000000001101";
        ram[92] = "0b10111101111100101111101000001101";
        ram[93] = "0b00111100110101110011001000010110";
        ram[94] = "0b00111100110111111010111111001001";
        ram[95] = "0b10111100100111011011101000100101";
        ram[96] = "0b00111101001111110111001100101101";
        ram[97] = "0b00111101110100000110001011010100";
        ram[98] = "0b00111110000110010001001001010101";
        ram[99] = "0b00111110000010000001111000000100";
        ram[100] = "0b00111101100111010110001110100011";
        ram[101] = "0b10111101111100101110101011011001";
        ram[102] = "0b10111100100011111010011111011110";
        ram[103] = "0b10111011111100110110111110100100";
        ram[104] = "0b10111100010001001011001100100011";
        ram[105] = "0b10111100101000110110000110011001";
        ram[106] = "0b00111110001100100110111101100001";
        ram[107] = "0b00111101001101100010110010101101";
        ram[108] = "0b00111011111100110001010011100000";
        ram[109] = "0b00111101111011000000011110101011";
        ram[110] = "0b00111010111111101110000110011101";
        ram[111] = "0b10111110011011001011101000110000";
        ram[112] = "0b10111101100010011110101010110101";
        ram[113] = "0b00111101010011110111000011010001";
        ram[114] = "0b00111110001111111010101011001110";
        ram[115] = "0b00111011001000010101011001010001";
        ram[116] = "0b00111110000001001010010000001001";
        ram[117] = "0b00111101001100010000110111011010";
        ram[118] = "0b00111101001010110011111011000011";
        ram[119] = "0b10111011111010100111010000101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_9) {
meminst = new inference_conv2d_f3_0_2_9_ram("inference_conv2d_f3_0_2_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_9() {
    delete meminst;
}


};//endmodule
#endif
