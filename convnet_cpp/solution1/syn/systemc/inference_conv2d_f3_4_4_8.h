// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_8_H__
#define __inference_conv2d_f3_4_4_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_8_ram) {
        ram[0] = "0b10111110010011001101000000110101";
        ram[1] = "0b10111110000011110110001100111101";
        ram[2] = "0b10111011000101100000010010001111";
        ram[3] = "0b10111101010010100001111101011001";
        ram[4] = "0b10111110001011011011111101001000";
        ram[5] = "0b10111101011110000110110101111111";
        ram[6] = "0b00111101101011001111001101001000";
        ram[7] = "0b00111011101011001010001100110111";
        ram[8] = "0b10111101010000111001111010111011";
        ram[9] = "0b00111100101001000001110000111111";
        ram[10] = "0b00111101111011100110001100100000";
        ram[11] = "0b10111110000111011001101100011011";
        ram[12] = "0b00111101010001011010010010100000";
        ram[13] = "0b10111101101111001011101100000111";
        ram[14] = "0b10111101001010010100001010111010";
        ram[15] = "0b00111101011101111011110011010000";
        ram[16] = "0b10111110001001000101011111000001";
        ram[17] = "0b10111110000010101100010011111000";
        ram[18] = "0b00111101101010001111010000111101";
        ram[19] = "0b00111011111101110100001000010110";
        ram[20] = "0b10111101101101001000100101001100";
        ram[21] = "0b00111100110100000001010111000010";
        ram[22] = "0b00111101100010111000001001001010";
        ram[23] = "0b00111101110000011111001100111010";
        ram[24] = "0b10111101010100000110101000101011";
        ram[25] = "0b10111101110011011001111110010000";
        ram[26] = "0b00111101011111001110110000110100";
        ram[27] = "0b10111101101000101000001010101100";
        ram[28] = "0b00111110000110000011010000001001";
        ram[29] = "0b10111101100100000001110111100010";
        ram[30] = "0b00111110000010100011100011111100";
        ram[31] = "0b00111101100000101101110001000110";
        ram[32] = "0b00111101000111100100101010100100";
        ram[33] = "0b10111100110010110110001011010101";
        ram[34] = "0b00111110000101011111001001000101";
        ram[35] = "0b10111101110111001101010111111010";
        ram[36] = "0b00111100111111101101101010011100";
        ram[37] = "0b00111110000100011000110001011101";
        ram[38] = "0b00111101000110111110111101100101";
        ram[39] = "0b00111100000001101111110110100000";
        ram[40] = "0b00111011100000010100010011100100";
        ram[41] = "0b00111100111000000011011000000000";
        ram[42] = "0b10111101111111100110010011110101";
        ram[43] = "0b00111011111000001001111001010000";
        ram[44] = "0b10111011001001001010110001110010";
        ram[45] = "0b00111101101010111111100001000001";
        ram[46] = "0b10111101111110100000011010100111";
        ram[47] = "0b10111110000001101111110101100101";
        ram[48] = "0b00111101010110100101101000000100";
        ram[49] = "0b00111110000111110010111011001111";
        ram[50] = "0b10111110001001101100101101010011";
        ram[51] = "0b10111110000001010000110011100101";
        ram[52] = "0b00111101100110111101010100111011";
        ram[53] = "0b10111101100101101011011001001101";
        ram[54] = "0b00111101001000110101001101010111";
        ram[55] = "0b10111101111110000111011000011001";
        ram[56] = "0b00111100010111111101000100100001";
        ram[57] = "0b00111101110010100001011111011001";
        ram[58] = "0b00111101100010101000111000000110";
        ram[59] = "0b10111110001010001010010100000101";
        ram[60] = "0b00111101001001110010001011101111";
        ram[61] = "0b00111100110110100111011100001111";
        ram[62] = "0b00111110000011001011111001100010";
        ram[63] = "0b10111101000110100010101000011000";
        ram[64] = "0b10111101100010101001100001100111";
        ram[65] = "0b10111100110101000111010111011001";
        ram[66] = "0b00111101000011000111100100100000";
        ram[67] = "0b00111101011011000100100011100100";
        ram[68] = "0b00111101001010110001001010111000";
        ram[69] = "0b10111101101011111011110110000101";
        ram[70] = "0b00111100111111110111110000010111";
        ram[71] = "0b00111101010010111110010101000110";
        ram[72] = "0b10111101110001101111000101111110";
        ram[73] = "0b00111101111001000000111100100100";
        ram[74] = "0b00111101100111111100100111100101";
        ram[75] = "0b10111101100010010010000011001110";
        ram[76] = "0b10111101011011011010101001000010";
        ram[77] = "0b00111101100000111100000110110100";
        ram[78] = "0b10111101111001111101011110000000";
        ram[79] = "0b00111101110111100000111110000000";
        ram[80] = "0b10111101010011100110100110100000";
        ram[81] = "0b00111101100111110101111011010101";
        ram[82] = "0b10111101011100001111101000111110";
        ram[83] = "0b10111110001011111001001110111100";
        ram[84] = "0b10111100111110011000110011101010";
        ram[85] = "0b10111101110111001011000101000110";
        ram[86] = "0b00111110001100000110100110100101";
        ram[87] = "0b00111101111011000100010100000010";
        ram[88] = "0b00111100010011000101000101111101";
        ram[89] = "0b00111100101101101100011001100110";
        ram[90] = "0b00111110001001000010111001010101";
        ram[91] = "0b10111101001000010000000000101011";
        ram[92] = "0b10111101110111110000110101000001";
        ram[93] = "0b10111101110001010110110110111011";
        ram[94] = "0b10111011111001101110110010011110";
        ram[95] = "0b00111101111001011110111011011101";
        ram[96] = "0b00111100010101001011000100110010";
        ram[97] = "0b00111011000101011101011101101101";
        ram[98] = "0b00111101011010111010110010100111";
        ram[99] = "0b00111100100010101010101010110100";
        ram[100] = "0b00111100010111110011110101111101";
        ram[101] = "0b10111100101010111101111001000000";
        ram[102] = "0b10111110000000001101100111010111";
        ram[103] = "0b00111101110001101110101101000001";
        ram[104] = "0b10111100110010111011000101000100";
        ram[105] = "0b00111101101000000001010101100100";
        ram[106] = "0b10111101001010011111101000111010";
        ram[107] = "0b00111011110001011010100000000000";
        ram[108] = "0b10111100000000011100000101010110";
        ram[109] = "0b00111101101101000110101001111000";
        ram[110] = "0b10111101101101010011110001011000";
        ram[111] = "0b00111101110101010010101100001010";
        ram[112] = "0b00111110010000100001111101101101";
        ram[113] = "0b10111100110110011001110010001001";
        ram[114] = "0b10111101110101110001001110101101";
        ram[115] = "0b10111101100010110110101011011010";
        ram[116] = "0b10111110000000100111101011101010";
        ram[117] = "0b10111110000111000111100000100001";
        ram[118] = "0b00111100110110001100100101011010";
        ram[119] = "0b10111101111000001000010100101011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_8) {
meminst = new inference_conv2d_f3_4_4_8_ram("inference_conv2d_f3_4_4_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_8() {
    delete meminst;
}


};//endmodule
#endif
