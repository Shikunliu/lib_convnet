// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_2_H__
#define __inference_conv2d_f3_3_1_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_2_ram) {
        ram[0] = "0b00111100111000001100110100110101";
        ram[1] = "0b10111100111101001110100011100000";
        ram[2] = "0b10111101111011011000100001111111";
        ram[3] = "0b10111101111000000101000010111110";
        ram[4] = "0b00111101001011111100100010010101";
        ram[5] = "0b00111100100010111000100000101001";
        ram[6] = "0b00111100110010010011110001010100";
        ram[7] = "0b10111110000001101010001101111011";
        ram[8] = "0b00111110000010000100011110110010";
        ram[9] = "0b10111101110100011110011111011010";
        ram[10] = "0b10111110010011010010101011101001";
        ram[11] = "0b00111101011000111001001001110111";
        ram[12] = "0b00111110000011000001011100100010";
        ram[13] = "0b00111100010110111010010110101110";
        ram[14] = "0b10111101010110110000100100000101";
        ram[15] = "0b10111110001010010110000011111010";
        ram[16] = "0b10111100101011010011100001000111";
        ram[17] = "0b10111101001111101110101100101101";
        ram[18] = "0b10111100000100100000000101010101";
        ram[19] = "0b10111101000111001001100111001001";
        ram[20] = "0b00111101010100100000011111010101";
        ram[21] = "0b10111101011111010100011110001001";
        ram[22] = "0b10111101000001001101001001111101";
        ram[23] = "0b00111011011101111100101001010001";
        ram[24] = "0b00111101011110010110101110010001";
        ram[25] = "0b10111100110010101111111111011001";
        ram[26] = "0b10111100100001000010111001100011";
        ram[27] = "0b00111110000011100000100111111111";
        ram[28] = "0b00111101110011110011000100101011";
        ram[29] = "0b10111100110000100100101000100111";
        ram[30] = "0b10111110001010011011111101011001";
        ram[31] = "0b00111101011100010011100111111111";
        ram[32] = "0b00111101010001111101010001011010";
        ram[33] = "0b10111101001110110101111110111101";
        ram[34] = "0b00111110000111011110000010010011";
        ram[35] = "0b00111100111111010011000011100011";
        ram[36] = "0b10111101110000010000011100111111";
        ram[37] = "0b00111110000101010111110110011110";
        ram[38] = "0b10111101001100001111100010010001";
        ram[39] = "0b00111101011000011100010100110010";
        ram[40] = "0b10111101110110110100001011001100";
        ram[41] = "0b00111101000010110010010011011100";
        ram[42] = "0b10111110000101101100001101110110";
        ram[43] = "0b10111101110101001000110010110101";
        ram[44] = "0b10111101011001001000110000111100";
        ram[45] = "0b10111110001010000011110001101101";
        ram[46] = "0b00111011010001000101111011101010";
        ram[47] = "0b10111101100010100110001000010110";
        ram[48] = "0b00111101010100010110000110100010";
        ram[49] = "0b10111110000111011110000000001101";
        ram[50] = "0b10111110000111110001101110101100";
        ram[51] = "0b10111110000110010000010101111101";
        ram[52] = "0b10111101001110011010011000101111";
        ram[53] = "0b10111101101101000000101101111000";
        ram[54] = "0b00111101100110010100011001001010";
        ram[55] = "0b10111101011001010101000110101110";
        ram[56] = "0b10111011011101110110111111100100";
        ram[57] = "0b10111101100101111011110000101111";
        ram[58] = "0b00111101111000001010011000110011";
        ram[59] = "0b00111011100101001000011011110110";
        ram[60] = "0b10111100001110010000110000100110";
        ram[61] = "0b00111101110110111111111100000100";
        ram[62] = "0b10111100111011011101000000011101";
        ram[63] = "0b00111101110001100101011111111011";
        ram[64] = "0b00111110010000001000011111001010";
        ram[65] = "0b00111101010010100001010010001100";
        ram[66] = "0b10111110000111010001001101010001";
        ram[67] = "0b00111101111101001001110101111100";
        ram[68] = "0b10111110011000100000000100000100";
        ram[69] = "0b10111100111110010001010001010011";
        ram[70] = "0b10111101011101111011010111111111";
        ram[71] = "0b10111101010010110101011010101011";
        ram[72] = "0b10111110000010110101010110101100";
        ram[73] = "0b10111101010110000010100010110110";
        ram[74] = "0b00111101110000010101111011101000";
        ram[75] = "0b10111101111010010110011100000010";
        ram[76] = "0b10111101100011100111110101001001";
        ram[77] = "0b10111110000000110111001111110011";
        ram[78] = "0b00111100101001101110110011010100";
        ram[79] = "0b00111101101001101000011110010110";
        ram[80] = "0b10111011110111011100110001111001";
        ram[81] = "0b00111100000101000000010100110000";
        ram[82] = "0b00111011010101000010100101100010";
        ram[83] = "0b10111110000011110100100011000011";
        ram[84] = "0b10111101011100001100100111100111";
        ram[85] = "0b10111100111101001100010110100101";
        ram[86] = "0b10111101111011011010101000001101";
        ram[87] = "0b10111101100101100111110111001001";
        ram[88] = "0b10111101010100010100000001100100";
        ram[89] = "0b10111100101000110001000110110011";
        ram[90] = "0b00111101100010110111011011001111";
        ram[91] = "0b10111101010000100000011111100010";
        ram[92] = "0b00111101101011001001100111111111";
        ram[93] = "0b10111101101011100010100110001110";
        ram[94] = "0b00111110000101111011111100011111";
        ram[95] = "0b00111011110100010100100010110010";
        ram[96] = "0b00111101011101010111101111001000";
        ram[97] = "0b00111101101010100110011101101111";
        ram[98] = "0b10111110000001010000101111011000";
        ram[99] = "0b00111101110110000010000110101111";
        ram[100] = "0b00111101111001011000110011010010";
        ram[101] = "0b00111110001110011110000100101010";
        ram[102] = "0b00111011111001000011101001111101";
        ram[103] = "0b00111110000101010001001001100110";
        ram[104] = "0b10111101110000101100100100100011";
        ram[105] = "0b00111101100011000111110110000111";
        ram[106] = "0b10111010111111100011110011011100";
        ram[107] = "0b10111110000111001011011110010001";
        ram[108] = "0b10111101001100111000110010001010";
        ram[109] = "0b00111100110100011111000111010000";
        ram[110] = "0b00111110010000010011010101010100";
        ram[111] = "0b00111110000101111110111011010100";
        ram[112] = "0b00111101100111010011100111001101";
        ram[113] = "0b00111101101000010011110001011011";
        ram[114] = "0b00111100101001110010100100000100";
        ram[115] = "0b10111101101010110001110111010110";
        ram[116] = "0b00111110000101010110010111000011";
        ram[117] = "0b10111101100000101001111110011101";
        ram[118] = "0b10111110001111001010101010111001";
        ram[119] = "0b00111101000101000111101011111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_2) {
meminst = new inference_conv2d_f3_3_1_2_ram("inference_conv2d_f3_3_1_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_2() {
    delete meminst;
}


};//endmodule
#endif
