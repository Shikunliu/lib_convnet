// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_11_H__
#define __inference_conv2d_f3_3_2_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_11_ram) {
        ram[0] = "0b00111110001001111101101111110101";
        ram[1] = "0b00111110010111000110010010111011";
        ram[2] = "0b00111110000100111101010011110001";
        ram[3] = "0b00111101001011100101110101110110";
        ram[4] = "0b00111011101111100010010110010101";
        ram[5] = "0b00111110010010011111111000000000";
        ram[6] = "0b10111101001011010110101110101001";
        ram[7] = "0b10111101000101100110111101011110";
        ram[8] = "0b00111011001110101010111011101000";
        ram[9] = "0b10111101100101101001111000000111";
        ram[10] = "0b10111101000101010001010111000001";
        ram[11] = "0b10111100010101110010110000110111";
        ram[12] = "0b00111101110000010001011000110000";
        ram[13] = "0b10111101010100011010010001101101";
        ram[14] = "0b10111110001101101110100001101100";
        ram[15] = "0b10111010100111001110010101010100";
        ram[16] = "0b00111100101000100101100111111101";
        ram[17] = "0b10111101110011010011101101101101";
        ram[18] = "0b00111101001011101001101100000011";
        ram[19] = "0b00111100110111001100001101001111";
        ram[20] = "0b10111101101001010011110010000000";
        ram[21] = "0b10111010101100101100100101000000";
        ram[22] = "0b10111110000000110000111101001001";
        ram[23] = "0b00111100101111100010001010110000";
        ram[24] = "0b10111110000101010110000100001011";
        ram[25] = "0b10111101110101110001100101110010";
        ram[26] = "0b00111100100111101111110110000111";
        ram[27] = "0b00111101101001101010110001010111";
        ram[28] = "0b00111101101011001110001010001111";
        ram[29] = "0b10111101000000111110101101000111";
        ram[30] = "0b00111100100100101011110100000111";
        ram[31] = "0b00111101110010000001010000000000";
        ram[32] = "0b10111101101000011011111111001011";
        ram[33] = "0b00111110000100101011011110111011";
        ram[34] = "0b10111101101001110111011010011100";
        ram[35] = "0b10111100110000100010000010100001";
        ram[36] = "0b00111101110101011000101110000010";
        ram[37] = "0b10111101000010011011011011101000";
        ram[38] = "0b00111100010101001000010110010011";
        ram[39] = "0b10111101000111010000001010100101";
        ram[40] = "0b10111101100111000001000001011111";
        ram[41] = "0b00111100101000101000111110101101";
        ram[42] = "0b10111101101100000101001111111110";
        ram[43] = "0b00111110000011111000011011100100";
        ram[44] = "0b10111110010010100101000011010111";
        ram[45] = "0b10111101101010000110000101111110";
        ram[46] = "0b10111101001110010010011011111110";
        ram[47] = "0b10111100101100111001100010110100";
        ram[48] = "0b10111101110011011011001011110110";
        ram[49] = "0b10111101001111010011010011011111";
        ram[50] = "0b00111101101111110110101011110010";
        ram[51] = "0b10111110010101110101010110111101";
        ram[52] = "0b00111101110110011010000101110111";
        ram[53] = "0b10111101100100100011001111000100";
        ram[54] = "0b10111100110101111001011100101011";
        ram[55] = "0b00111110000011011011110100110000";
        ram[56] = "0b10111100111100001010101100101110";
        ram[57] = "0b00111100011111100001100010011111";
        ram[58] = "0b10111100100010001000001111001000";
        ram[59] = "0b00111101001101001011110001101010";
        ram[60] = "0b10111110000110110101110101000110";
        ram[61] = "0b00111101011001001010010110000001";
        ram[62] = "0b00111110000010011011110111000111";
        ram[63] = "0b10111101000010001011100011110001";
        ram[64] = "0b10111101101110001001001111101110";
        ram[65] = "0b10111100100000011101101111011000";
        ram[66] = "0b00111100100101101111111111110111";
        ram[67] = "0b00111101100001010011001110111110";
        ram[68] = "0b10111101101111010000010000000010";
        ram[69] = "0b00111101010011011101100011101100";
        ram[70] = "0b00111100111000100001100101100101";
        ram[71] = "0b00111101110100010000110000101100";
        ram[72] = "0b10111101001000111000011100111110";
        ram[73] = "0b00111101100110100100010110101100";
        ram[74] = "0b10111101011100001111010111010111";
        ram[75] = "0b00111101100110110110000101011101";
        ram[76] = "0b00111101010011111100011111011001";
        ram[77] = "0b10111101010010001101010010111011";
        ram[78] = "0b00111110000001011000001100011111";
        ram[79] = "0b00111101110100010010100110001001";
        ram[80] = "0b10111101001100001110101100001010";
        ram[81] = "0b10111101000001100000011100110000";
        ram[82] = "0b10111100011010001110111000000000";
        ram[83] = "0b00111101111110111011010010010001";
        ram[84] = "0b10111101000100101100101111001111";
        ram[85] = "0b10111101010001011010111101101100";
        ram[86] = "0b10111001011100101111100010000110";
        ram[87] = "0b00111101001111010110110001010111";
        ram[88] = "0b10111101101001011100010011011110";
        ram[89] = "0b10111100100110110000100011010000";
        ram[90] = "0b10111101110001001110100100100011";
        ram[91] = "0b00111101101001000001011010111110";
        ram[92] = "0b10111101101110010110001110001100";
        ram[93] = "0b10111101100101011010001001101100";
        ram[94] = "0b00111100100111101101000001110000";
        ram[95] = "0b00111100111001110111010010000011";
        ram[96] = "0b00111100100101000101110111110000";
        ram[97] = "0b10111101110011110011001010111110";
        ram[98] = "0b00111011111011001010110101111101";
        ram[99] = "0b10111110000100011010110110100111";
        ram[100] = "0b10111101000110111011110000000011";
        ram[101] = "0b00111100100101011110101111000101";
        ram[102] = "0b10111101001110011110101100010011";
        ram[103] = "0b10111101100000001100001111010010";
        ram[104] = "0b10111101101111011010011010010111";
        ram[105] = "0b10111101110011010011000011110000";
        ram[106] = "0b00111011101100000101100111001111";
        ram[107] = "0b10111101111100110011000000001110";
        ram[108] = "0b10111101001000011101011111000001";
        ram[109] = "0b00111101010111010101001010100111";
        ram[110] = "0b10111100101101000001000000111101";
        ram[111] = "0b00111101000010010001100110111010";
        ram[112] = "0b10111110000011000111110101011111";
        ram[113] = "0b10111110000110101000010111001011";
        ram[114] = "0b10111101000010000100010111001111";
        ram[115] = "0b00111100111001011111100110001111";
        ram[116] = "0b10111110000011100001001011101000";
        ram[117] = "0b00111100000111110101101111110001";
        ram[118] = "0b00111100101100010101011110010001";
        ram[119] = "0b10111100000100110101010011010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_11) {
meminst = new inference_conv2d_f3_3_2_11_ram("inference_conv2d_f3_3_2_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_11() {
    delete meminst;
}


};//endmodule
#endif
