// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_111_H__
#define __inference_mult_1_120_120_84_s_W4_111_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_111_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_111_ram) {
        ram[0] = "0b10111011100000100000101101110011";
        ram[1] = "0b10111101110110101000101101001100";
        ram[2] = "0b00111101001001011101001110011001";
        ram[3] = "0b00111101001001010000111001111000";
        ram[4] = "0b00111110000110110001111111101111";
        ram[5] = "0b00111101100000101011010011001011";
        ram[6] = "0b10111101111111111100000110011100";
        ram[7] = "0b10111110010001000101001100001001";
        ram[8] = "0b00111101001000000010111001011001";
        ram[9] = "0b10111110011101011100101111111111";
        ram[10] = "0b10111101100010000100000011010100";
        ram[11] = "0b10111101110010101000011111100100";
        ram[12] = "0b00111101110011111011001110110111";
        ram[13] = "0b10111101010101000010110111001111";
        ram[14] = "0b10111101110110000110001100111001";
        ram[15] = "0b00111100101000000011011111100100";
        ram[16] = "0b00111110000111110110111011000110";
        ram[17] = "0b00111110000001111110010110101000";
        ram[18] = "0b00111110000101011111011111000110";
        ram[19] = "0b00111101011111011011110001110100";
        ram[20] = "0b00111100000100000111110001000100";
        ram[21] = "0b10111101110010110000000100101000";
        ram[22] = "0b00111011000111111111111001100011";
        ram[23] = "0b10111101001110101000100101001110";
        ram[24] = "0b10111101101001010011110000100010";
        ram[25] = "0b00111101101111010010010101101000";
        ram[26] = "0b10111100110011101000011110111000";
        ram[27] = "0b10111101110100111010101000110111";
        ram[28] = "0b10111100101110101111011101001101";
        ram[29] = "0b10111110001101001001101011011101";
        ram[30] = "0b00111110010000000011110000001000";
        ram[31] = "0b10111101111101111110101110101111";
        ram[32] = "0b10111110001010111011010101011011";
        ram[33] = "0b00111101001010101111101111110111";
        ram[34] = "0b10111101110000111100010110110000";
        ram[35] = "0b10111101101101010110111111111100";
        ram[36] = "0b10111110001101110111101001110000";
        ram[37] = "0b10111101011010111011010111000110";
        ram[38] = "0b10111100000011011100110010110010";
        ram[39] = "0b10111101000110110111011111011011";
        ram[40] = "0b10111101101101100101111001111100";
        ram[41] = "0b00111101000110100010100010100000";
        ram[42] = "0b10111110100001001100011110001111";
        ram[43] = "0b00111101110111101001010010101011";
        ram[44] = "0b10111100100001111110101011100110";
        ram[45] = "0b00111110000001101011000001010011";
        ram[46] = "0b10111110000110111000100010000111";
        ram[47] = "0b10111101101110000001110000010011";
        ram[48] = "0b10111101101010000111100110101001";
        ram[49] = "0b00111101101101100110011000001000";
        ram[50] = "0b00111101100101010011000001010110";
        ram[51] = "0b10111011101010000001001110011010";
        ram[52] = "0b10111110001010010000101001111000";
        ram[53] = "0b10111101101100000001110000011010";
        ram[54] = "0b10111011100011111110110100110011";
        ram[55] = "0b00111110010001110010011101010111";
        ram[56] = "0b10111101100010101110011010101110";
        ram[57] = "0b00111101101000110100101110010100";
        ram[58] = "0b00111101110000100100100110101111";
        ram[59] = "0b00111101110110011001100100010011";
        ram[60] = "0b00111110000011011111000101011010";
        ram[61] = "0b00111110010010011000001111011000";
        ram[62] = "0b10111101110110110110110010111110";
        ram[63] = "0b00111110001011010000110101001010";
        ram[64] = "0b00111100001101110101111111101001";
        ram[65] = "0b00111100000110101000000011010101";
        ram[66] = "0b10111110010100110100100010110010";
        ram[67] = "0b10111101111101111101010010011101";
        ram[68] = "0b00111110010010000100111110010000";
        ram[69] = "0b00111101110010101001001100110111";
        ram[70] = "0b10111101110011001111101101110110";
        ram[71] = "0b00111100101101000000011010011000";
        ram[72] = "0b00111101010011010110000000111011";
        ram[73] = "0b00111101100001111110100001111100";
        ram[74] = "0b10111101011100111001100100011111";
        ram[75] = "0b00111101101111101010100110001001";
        ram[76] = "0b10111101001011010011111001110111";
        ram[77] = "0b00111101001110010000001010011011";
        ram[78] = "0b00111101110010000000000111101010";
        ram[79] = "0b10111110000110000100110001101010";
        ram[80] = "0b00111110001101011011111111110000";
        ram[81] = "0b00111110011000111001101100000010";
        ram[82] = "0b10111101100001011111110001100100";
        ram[83] = "0b00111101111001000110111110011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_111) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_111_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_111) {
meminst = new inference_mult_1_120_120_84_s_W4_111_ram("inference_mult_1_120_120_84_s_W4_111_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_111() {
    delete meminst;
}


};//endmodule
#endif
