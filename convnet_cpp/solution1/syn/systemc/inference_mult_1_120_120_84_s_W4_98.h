// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_98_H__
#define __inference_mult_1_120_120_84_s_W4_98_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_98_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_98_ram) {
        ram[0] = "0b10111101010100100001101011101010";
        ram[1] = "0b00111110001111000010110111110001";
        ram[2] = "0b10111101100001110101010011011001";
        ram[3] = "0b00111101110000000110001000110011";
        ram[4] = "0b10111100111111111010111011010111";
        ram[5] = "0b10111010110000001100110100111010";
        ram[6] = "0b10111101001010001111110011100100";
        ram[7] = "0b00111101110000010011000011111010";
        ram[8] = "0b00111101111110000000011101111001";
        ram[9] = "0b10111110000010101111001111100100";
        ram[10] = "0b00111101011110010100101001010100";
        ram[11] = "0b10111101110011000011110111100001";
        ram[12] = "0b00111101001101101001001110100101";
        ram[13] = "0b00111110000111110010101100100100";
        ram[14] = "0b00111101001011110111000110001101";
        ram[15] = "0b00111100110110001100101001100111";
        ram[16] = "0b10111011110101111000011101111011";
        ram[17] = "0b10111110010000011010100011101111";
        ram[18] = "0b00111110001000000111111010011110";
        ram[19] = "0b10111101001001000110110010010001";
        ram[20] = "0b00111110001111110110101001010001";
        ram[21] = "0b00111100101000001010110100011111";
        ram[22] = "0b10111101101010000001010110111011";
        ram[23] = "0b10111110001001010110100010100101";
        ram[24] = "0b00111100000100011111010011100000";
        ram[25] = "0b00111100110100110111101100000111";
        ram[26] = "0b10111110000000001101011100111000";
        ram[27] = "0b10111110001111011000100111001110";
        ram[28] = "0b00111101100001001001110100010000";
        ram[29] = "0b10111110000111011000100101001000";
        ram[30] = "0b10111100101000101111101011010111";
        ram[31] = "0b00111110000101001110011110101011";
        ram[32] = "0b10111100110001111010111010000000";
        ram[33] = "0b00111100111011000111000010100001";
        ram[34] = "0b10111110001010000111011111101110";
        ram[35] = "0b00111101010010000011001100100101";
        ram[36] = "0b00111110001110101111110100010001";
        ram[37] = "0b00111100111110101001100111111010";
        ram[38] = "0b10111101101011100010110100011111";
        ram[39] = "0b00111101101100010111010111111010";
        ram[40] = "0b10111100001101111001010001010110";
        ram[41] = "0b00111101100000101001100010010110";
        ram[42] = "0b10111110000110010011110000000100";
        ram[43] = "0b00111100100011100000110111100000";
        ram[44] = "0b10111110001100101000100001001000";
        ram[45] = "0b10111100100011101101110010100111";
        ram[46] = "0b10111101110111111011001001101000";
        ram[47] = "0b00111101110110110011111000010100";
        ram[48] = "0b10111101001000100010101101101110";
        ram[49] = "0b10111101100101111100111010001001";
        ram[50] = "0b00111110000101000101000011110000";
        ram[51] = "0b00111101101001010110000110111001";
        ram[52] = "0b10111101110010000011000000001101";
        ram[53] = "0b10111101100101111101110011110100";
        ram[54] = "0b10111101000011111111000111001011";
        ram[55] = "0b10111101000101010010010111001100";
        ram[56] = "0b10111110011000011010000100010010";
        ram[57] = "0b10111101011001000100011010000001";
        ram[58] = "0b00111110000010100000010100010100";
        ram[59] = "0b10111101110001110000111010001010";
        ram[60] = "0b00111100100111010111011101110101";
        ram[61] = "0b10111101011110110100000100111010";
        ram[62] = "0b00111101101000110010000111011001";
        ram[63] = "0b10111100101010110101011110011101";
        ram[64] = "0b00111101100000100000000000010010";
        ram[65] = "0b00111101010010011011101011111111";
        ram[66] = "0b00111011010110110001001000001010";
        ram[67] = "0b10111110010000010000010010010010";
        ram[68] = "0b10111101100111100000000011000100";
        ram[69] = "0b10111110000011111000010001000101";
        ram[70] = "0b00111101100010011000101011011110";
        ram[71] = "0b00111100101111111111110100010000";
        ram[72] = "0b00111011110101001001010000010110";
        ram[73] = "0b00111010001100010011011000100001";
        ram[74] = "0b10111100000101000001001011100111";
        ram[75] = "0b10111101100010001011100101101010";
        ram[76] = "0b10111110001000101101000001011111";
        ram[77] = "0b10111101010011001000110010000110";
        ram[78] = "0b00111110011110111100011100101110";
        ram[79] = "0b10111101110011011110001110111001";
        ram[80] = "0b10111110001000101101010101011010";
        ram[81] = "0b00111101100010110100000100111010";
        ram[82] = "0b10111100100011111001000001100001";
        ram[83] = "0b10111101111111000110010111000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_98) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_98_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_98) {
meminst = new inference_mult_1_120_120_84_s_W4_98_ram("inference_mult_1_120_120_84_s_W4_98_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_98() {
    delete meminst;
}


};//endmodule
#endif
