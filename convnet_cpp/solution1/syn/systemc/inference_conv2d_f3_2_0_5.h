// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_5_H__
#define __inference_conv2d_f3_2_0_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_5_ram) {
        ram[0] = "0b10111100000110101110111011011001";
        ram[1] = "0b00111110001001011101100000001110";
        ram[2] = "0b00111101101100011000110111111101";
        ram[3] = "0b00111101111001100101100111010001";
        ram[4] = "0b10111110001110000100001011111010";
        ram[5] = "0b00111101111101010010111111000010";
        ram[6] = "0b10111101100011111000010100110110";
        ram[7] = "0b10111100010001111111010000100000";
        ram[8] = "0b00111100010111011010000011000101";
        ram[9] = "0b10111100000010100101001101100000";
        ram[10] = "0b10111101101010011100001000000110";
        ram[11] = "0b10111101011000101000111111001000";
        ram[12] = "0b10111101001000100010110001100000";
        ram[13] = "0b10111101011011011101100011101100";
        ram[14] = "0b10111110011010000000110011111010";
        ram[15] = "0b10111101011100001101101011111111";
        ram[16] = "0b00111101101001011000100101101010";
        ram[17] = "0b00111101000011110011010101000010";
        ram[18] = "0b10111101100011111001010100110100";
        ram[19] = "0b10111110001110000101111010000001";
        ram[20] = "0b10111001110110010110011000110000";
        ram[21] = "0b00111101100000101011000100100000";
        ram[22] = "0b00111110010000101010000110110110";
        ram[23] = "0b10111110000110001000001000101000";
        ram[24] = "0b00111100110001001101001010011000";
        ram[25] = "0b00111101110000000101101100010010";
        ram[26] = "0b10111101001101101001101111010011";
        ram[27] = "0b10111101100000010101111011110101";
        ram[28] = "0b00111100000001111010000111100000";
        ram[29] = "0b00111100111100101010110000100101";
        ram[30] = "0b00111011011010111111101000111010";
        ram[31] = "0b00111101101000011101110011100100";
        ram[32] = "0b00111100111111010101001111101001";
        ram[33] = "0b10111101100010111001001000010010";
        ram[34] = "0b10111110000111000000001001101101";
        ram[35] = "0b00111101100110011001110101100000";
        ram[36] = "0b10111101000001111011010110000110";
        ram[37] = "0b00111100100000000011111001001001";
        ram[38] = "0b00111101010110100001011101010011";
        ram[39] = "0b10111110010001101000101010010011";
        ram[40] = "0b10111101101110011011110101000000";
        ram[41] = "0b10111110000001110111011000111110";
        ram[42] = "0b10111101001010100000101011100110";
        ram[43] = "0b00111100110110100000100011110101";
        ram[44] = "0b10111110000100100100100010010101";
        ram[45] = "0b00111100101011100100001100111111";
        ram[46] = "0b10111101001100111111101101100000";
        ram[47] = "0b00111110001110111000000001100111";
        ram[48] = "0b00111101001111101100000111000010";
        ram[49] = "0b10111101000010101111010010100000";
        ram[50] = "0b10111100101110111010010100100111";
        ram[51] = "0b00111101101010101000100001001111";
        ram[52] = "0b10111101001100001000111100010100";
        ram[53] = "0b00111101101101001111111100101000";
        ram[54] = "0b10111101011111110100010111000110";
        ram[55] = "0b00111100101010000110110011010001";
        ram[56] = "0b00111101101011010100000111101101";
        ram[57] = "0b00111101010011111111010110010001";
        ram[58] = "0b10111101101100101010101000110100";
        ram[59] = "0b00111101101011001100011111000100";
        ram[60] = "0b10111101011011010000101101001100";
        ram[61] = "0b10111101100101101111010010010110";
        ram[62] = "0b00111100110000100010011101010111";
        ram[63] = "0b00111101110111101010101000101010";
        ram[64] = "0b00111101000111011001110010010011";
        ram[65] = "0b10111100111001101101000101011011";
        ram[66] = "0b10111100101010101010001100001100";
        ram[67] = "0b10111100001011110010010110000111";
        ram[68] = "0b00111101001101010100010110010010";
        ram[69] = "0b10111101001011001100011011010011";
        ram[70] = "0b10111101101011110110000001011011";
        ram[71] = "0b00111110001001001000101101100101";
        ram[72] = "0b00111110000100000010100100101000";
        ram[73] = "0b00111101100011101000101010011010";
        ram[74] = "0b00111110001001001011110010101110";
        ram[75] = "0b10111110000011000110010010111011";
        ram[76] = "0b10111101110110000111110001100011";
        ram[77] = "0b10111101111011011100111101000110";
        ram[78] = "0b00111101000100010100110111010000";
        ram[79] = "0b00111101000101010111111010000010";
        ram[80] = "0b10111100101101011110011101111000";
        ram[81] = "0b10111101000000110100011111001110";
        ram[82] = "0b10111101100100001000000111010000";
        ram[83] = "0b10111101101010100110011110011000";
        ram[84] = "0b00111101010001011110011111010110";
        ram[85] = "0b00111101111101011100000110000011";
        ram[86] = "0b00111101110001011010100010101001";
        ram[87] = "0b10111101010011101010110110101101";
        ram[88] = "0b00111101000011111100100101101100";
        ram[89] = "0b00111101110101100111000100100110";
        ram[90] = "0b10111101101011101010111110011110";
        ram[91] = "0b00111101011001110110111110010110";
        ram[92] = "0b10111101000101100100100000100110";
        ram[93] = "0b00111101100110010110000010110111";
        ram[94] = "0b00111101000101001000100011101110";
        ram[95] = "0b10111101010000011000111000001010";
        ram[96] = "0b10111101011011011101111110111101";
        ram[97] = "0b00111101011010000011110110100001";
        ram[98] = "0b10111100100011101100011000000001";
        ram[99] = "0b10111100111010100001000110110111";
        ram[100] = "0b10111110000010001000111110000110";
        ram[101] = "0b10111101111000100011100001010100";
        ram[102] = "0b10111110000111010011111010010010";
        ram[103] = "0b10111101011101110110100111000100";
        ram[104] = "0b00111101001011001101100011000001";
        ram[105] = "0b00111101111010111111110010101000";
        ram[106] = "0b10111101011110100010001101100010";
        ram[107] = "0b10111100111011110010000101010110";
        ram[108] = "0b10111101001011111100010110100110";
        ram[109] = "0b00111101111000001110111100010011";
        ram[110] = "0b10111101110100011101011010001100";
        ram[111] = "0b00111101010110011101111011101001";
        ram[112] = "0b10111101100001001100000110000000";
        ram[113] = "0b10111101101110001101111000101011";
        ram[114] = "0b10111100010111011111000001110110";
        ram[115] = "0b00111100111000011000110111101111";
        ram[116] = "0b10111110000100000011110011010001";
        ram[117] = "0b10111110000011011100101011010001";
        ram[118] = "0b10111101010100011101110010111100";
        ram[119] = "0b10111101111111110100010011010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_5) {
meminst = new inference_conv2d_f3_2_0_5_ram("inference_conv2d_f3_2_0_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_5() {
    delete meminst;
}


};//endmodule
#endif
