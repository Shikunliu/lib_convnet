// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_56_H__
#define __inference_mult_1_120_120_84_s_W4_56_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_56_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_56_ram) {
        ram[0] = "0b10111110000011010110001010111111";
        ram[1] = "0b10111101100011101001110011110100";
        ram[2] = "0b10111101101001100000101101100010";
        ram[3] = "0b00111110001111100011010100111111";
        ram[4] = "0b00111101101100011000100011100111";
        ram[5] = "0b10111100010111000100100101000010";
        ram[6] = "0b10111100110110001000100111001111";
        ram[7] = "0b10111100111001110100100100011010";
        ram[8] = "0b10111100011011000001101110110010";
        ram[9] = "0b10111101100001001000010011110010";
        ram[10] = "0b00111100000001010111111110111100";
        ram[11] = "0b00111101110110110001000001110111";
        ram[12] = "0b10111100100101010111001010001110";
        ram[13] = "0b10111110010011010001100101011001";
        ram[14] = "0b10111101111100000001000100001010";
        ram[15] = "0b00111010110111110010100011000101";
        ram[16] = "0b10111101111101000000110111010100";
        ram[17] = "0b10111100100111111101101110011101";
        ram[18] = "0b00111101100110011101110110110100";
        ram[19] = "0b10111100011111010111101001111111";
        ram[20] = "0b10111101110101001111000011011000";
        ram[21] = "0b00111011100011011100010010100100";
        ram[22] = "0b00111100101100011111101110010000";
        ram[23] = "0b00111100001101001111001010111011";
        ram[24] = "0b00111101001101011101000010110111";
        ram[25] = "0b00111110010010000111110110110011";
        ram[26] = "0b10111101100101101011001111010110";
        ram[27] = "0b10111100101000010100010001010011";
        ram[28] = "0b10111110001101110000101111010000";
        ram[29] = "0b00111101111000111000010101000000";
        ram[30] = "0b00111100101101111010101011111101";
        ram[31] = "0b00111100101100100011110011111111";
        ram[32] = "0b00111101010001000110101011111110";
        ram[33] = "0b00111101101010101001110001110001";
        ram[34] = "0b10111101010011001111110101011001";
        ram[35] = "0b00111100111010111010100010010000";
        ram[36] = "0b10111101010011111100100100011011";
        ram[37] = "0b00111110000011010011111101011011";
        ram[38] = "0b10111101000011100100110111010110";
        ram[39] = "0b00111011111100011001001111010111";
        ram[40] = "0b00111110000100110101111010110111";
        ram[41] = "0b00111101111011100101000111010010";
        ram[42] = "0b00111100000001110111111001101111";
        ram[43] = "0b00111101000110001000001001111000";
        ram[44] = "0b00111101010011001110111000001010";
        ram[45] = "0b10111110010001000110010100011111";
        ram[46] = "0b00111011101110101000100101111110";
        ram[47] = "0b10111101011000010000110000011111";
        ram[48] = "0b00111101000011011110010000111111";
        ram[49] = "0b10111100110001011010011000110010";
        ram[50] = "0b00111101100101101001011100101001";
        ram[51] = "0b10111101100111000111000100011010";
        ram[52] = "0b00111101000000101101111011110010";
        ram[53] = "0b00111101110110101110000011000001";
        ram[54] = "0b00111101010010100010111000000111";
        ram[55] = "0b00111100111011101000010011100011";
        ram[56] = "0b10111101101110000100101001010001";
        ram[57] = "0b00111101100110101001110100111010";
        ram[58] = "0b00111101110100101011010011011001";
        ram[59] = "0b00111101001011101110101010110100";
        ram[60] = "0b10111010111010000000000010110000";
        ram[61] = "0b10111100100011010100011000000100";
        ram[62] = "0b00111100101100000101000001100000";
        ram[63] = "0b00111011111111000111101001100100";
        ram[64] = "0b10111110001001011111010101101010";
        ram[65] = "0b00111100001101111101111101101010";
        ram[66] = "0b00111101100100111111101010100100";
        ram[67] = "0b10111100010001101111010100011100";
        ram[68] = "0b10111100001001101011110010011000";
        ram[69] = "0b00111101101100011111010101100000";
        ram[70] = "0b10111101000011100011101101111101";
        ram[71] = "0b10111101001101100100110101001001";
        ram[72] = "0b10111101110000111010100010100100";
        ram[73] = "0b10111110001010100001010100010010";
        ram[74] = "0b10111100111010000111110001010110";
        ram[75] = "0b10111101110010000001111100000011";
        ram[76] = "0b10111100001001001000100001110110";
        ram[77] = "0b10111101001011110111111000111101";
        ram[78] = "0b10111101111110110110111101011101";
        ram[79] = "0b00111101001000001011110010100100";
        ram[80] = "0b00111110001101001011111011000110";
        ram[81] = "0b00111110001010100100101000000110";
        ram[82] = "0b10111011110101011101011100001101";
        ram[83] = "0b10111101001001100111110011010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_56) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_56_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_56) {
meminst = new inference_mult_1_120_120_84_s_W4_56_ram("inference_mult_1_120_120_84_s_W4_56_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_56() {
    delete meminst;
}


};//endmodule
#endif
