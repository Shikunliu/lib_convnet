// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_6_H__
#define __inference_conv2d_f3_1_1_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_6_ram) {
        ram[0] = "0b10111110000101010000111011111110";
        ram[1] = "0b00111100011001010000010110101001";
        ram[2] = "0b10111100111000011101110101101011";
        ram[3] = "0b10111011011010011011001111100011";
        ram[4] = "0b10111110000111001010101001110110";
        ram[5] = "0b10111011111101011011010110111010";
        ram[6] = "0b00111101000011110111001111011100";
        ram[7] = "0b00111100110001000111110001100111";
        ram[8] = "0b10111100110010010001010101010010";
        ram[9] = "0b00111101010011000001111111001001";
        ram[10] = "0b00111101100000101110111010111010";
        ram[11] = "0b00111110000100010110001101111000";
        ram[12] = "0b10111101101001000011111111001011";
        ram[13] = "0b00111101110001111010001111101001";
        ram[14] = "0b00111101110110010011100000010101";
        ram[15] = "0b00111101100100001001101110001110";
        ram[16] = "0b10111101100101110100010100011110";
        ram[17] = "0b10111101110010000001100101100111";
        ram[18] = "0b00111101100101111000011101010110";
        ram[19] = "0b10111011001101011101111100100000";
        ram[20] = "0b10111011001001100000101011000001";
        ram[21] = "0b00111101100010101000110111011110";
        ram[22] = "0b00111101111011011110101110010110";
        ram[23] = "0b10111101111000010100101011010011";
        ram[24] = "0b00111101010011010100000011111011";
        ram[25] = "0b00111101000001010001010111101001";
        ram[26] = "0b10111100101101011010110111001100";
        ram[27] = "0b00111101110001101001101110111000";
        ram[28] = "0b10111110000011010011000011110000";
        ram[29] = "0b10111110000111101100001100010001";
        ram[30] = "0b00111101100100000100000100101011";
        ram[31] = "0b00111101100101000000111010000010";
        ram[32] = "0b10111101101100110100000001101001";
        ram[33] = "0b00111101101011110100000100110110";
        ram[34] = "0b10111101010111101000011011101111";
        ram[35] = "0b00111011011010100101010111001010";
        ram[36] = "0b10111101110011110110010100010011";
        ram[37] = "0b10111101011001001110010101111000";
        ram[38] = "0b00111101000110100101110111001010";
        ram[39] = "0b10111101100100100100100100110110";
        ram[40] = "0b00111101100011010000100101011011";
        ram[41] = "0b00111101001100000111011110110010";
        ram[42] = "0b10111100001011111001111010111111";
        ram[43] = "0b00111110010000001001001111011001";
        ram[44] = "0b10111101010110010001111011101011";
        ram[45] = "0b10111101000110001100110111000010";
        ram[46] = "0b10111011011011100100110100100101";
        ram[47] = "0b10111110000001110110001100011011";
        ram[48] = "0b00111110001101101101110111110000";
        ram[49] = "0b10111101101100000110000010000101";
        ram[50] = "0b00111100100100000111101001101100";
        ram[51] = "0b10111101000010101110011010010011";
        ram[52] = "0b10111101011110010000010110001011";
        ram[53] = "0b00111101100001101100000011001010";
        ram[54] = "0b10111101100001111010110111101100";
        ram[55] = "0b00111101101111011001001001110101";
        ram[56] = "0b00111101101111000010000010100000";
        ram[57] = "0b00111100100111100100001100010111";
        ram[58] = "0b10111110010010011100000001100110";
        ram[59] = "0b10111101101001011110100101000001";
        ram[60] = "0b00111101000110100111111010011100";
        ram[61] = "0b10111101101100111110100000101111";
        ram[62] = "0b10111110011011101011111011100000";
        ram[63] = "0b10111110010001101011011011100001";
        ram[64] = "0b00111110001101100001010011100000";
        ram[65] = "0b00111100110001010101001011110000";
        ram[66] = "0b10111101110110100101110110101111";
        ram[67] = "0b10111100011010000100100100101010";
        ram[68] = "0b00111110000110110101001001000100";
        ram[69] = "0b00111110001101001001110011110101";
        ram[70] = "0b10111110001000010001011100101111";
        ram[71] = "0b00111101100100010001011101001010";
        ram[72] = "0b00111110000000101100110111000000";
        ram[73] = "0b00111100100100010001111000110101";
        ram[74] = "0b00111110010100111010110011010110";
        ram[75] = "0b10111100100011110001110010011110";
        ram[76] = "0b00111100001001011001011010010010";
        ram[77] = "0b10111101111010010101100011011010";
        ram[78] = "0b10111101101010101101101110111001";
        ram[79] = "0b10111110000000010100001010110011";
        ram[80] = "0b00111100010101000100011100010101";
        ram[81] = "0b10111101100111100000101001000010";
        ram[82] = "0b00111101100110000001111010011000";
        ram[83] = "0b00111101100001010011001001100001";
        ram[84] = "0b00111110000101010001001100110000";
        ram[85] = "0b10111101111010110001100000010001";
        ram[86] = "0b10111101101111100110101001101001";
        ram[87] = "0b00111101100110100100101010001100";
        ram[88] = "0b00111101111010111101010011010000";
        ram[89] = "0b00111101110110001000011111101100";
        ram[90] = "0b10111101100000011100110101111010";
        ram[91] = "0b10111101110010101100001000110001";
        ram[92] = "0b10111110001110011100001000111011";
        ram[93] = "0b10111110001111000001101010001011";
        ram[94] = "0b10111101111101110111001100011001";
        ram[95] = "0b10111101011011111011110000110110";
        ram[96] = "0b10111100100101010111111111111010";
        ram[97] = "0b10111110000001001010010111011111";
        ram[98] = "0b00111101010110100010011010100010";
        ram[99] = "0b10111101000100001111111100101100";
        ram[100] = "0b00111101100010100101000110111011";
        ram[101] = "0b10111110000011100010110001010110";
        ram[102] = "0b00110111100100010000001001000011";
        ram[103] = "0b00111100101110110001100111100111";
        ram[104] = "0b10111100010101011010101011000010";
        ram[105] = "0b00111101001100011010001001010100";
        ram[106] = "0b00111101101010011101110010011011";
        ram[107] = "0b10111101000010100111110100010111";
        ram[108] = "0b00111101110011000100101010010001";
        ram[109] = "0b10111100110010100011100000110010";
        ram[110] = "0b00111110011001000000100101011111";
        ram[111] = "0b00111100111001110010101001111100";
        ram[112] = "0b00111110000100111000000111011000";
        ram[113] = "0b10111101010110000100111100110010";
        ram[114] = "0b00111101100010001001011010110101";
        ram[115] = "0b00111101101011011010011000011110";
        ram[116] = "0b10111101110001110011111100010111";
        ram[117] = "0b00111101101001001001001011110010";
        ram[118] = "0b10111101010100001000001010110100";
        ram[119] = "0b10111101101100010111110010100010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_6) {
meminst = new inference_conv2d_f3_1_1_6_ram("inference_conv2d_f3_1_1_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_6() {
    delete meminst;
}


};//endmodule
#endif
