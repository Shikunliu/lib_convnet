// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_1_H__
#define __inference_conv2d_f3_4_4_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_1_ram) {
        ram[0] = "0b00111110000100000111100001010011";
        ram[1] = "0b10111101011001011001101011011111";
        ram[2] = "0b00111110000001101110010011000001";
        ram[3] = "0b00111110001111000001110010100100";
        ram[4] = "0b00111101111011101110001110010011";
        ram[5] = "0b10111101011000100010010000010111";
        ram[6] = "0b00111110001011110100100100000110";
        ram[7] = "0b10111101100001001101001101010100";
        ram[8] = "0b10111010010111100000000011100011";
        ram[9] = "0b10111011110111110000111010011001";
        ram[10] = "0b00111100110001101011100111000011";
        ram[11] = "0b10111011101100010001011100001111";
        ram[12] = "0b10111101101011110100000000011100";
        ram[13] = "0b00111101000110010100111001010000";
        ram[14] = "0b10111101000101101001110011000101";
        ram[15] = "0b10111101110010100011011011110000";
        ram[16] = "0b00111101001101101001010000010001";
        ram[17] = "0b00111101100100110111000100111001";
        ram[18] = "0b10111101100111100111110111001111";
        ram[19] = "0b00111110001110111010001111001010";
        ram[20] = "0b10111101101100101000011100100001";
        ram[21] = "0b00111100010110111101101010000111";
        ram[22] = "0b10111110001011111111011101011001";
        ram[23] = "0b10111101001011000101000110011000";
        ram[24] = "0b00111101111100000001100111110100";
        ram[25] = "0b00111101001000111011000010101010";
        ram[26] = "0b00111101111111000111100110110011";
        ram[27] = "0b10111110000100000111111011100001";
        ram[28] = "0b10111101101011010100001101010111";
        ram[29] = "0b10111101001111100111100001011011";
        ram[30] = "0b00111100001101011001001000011110";
        ram[31] = "0b10111100010001000110101111010101";
        ram[32] = "0b10111110000100110111110110100110";
        ram[33] = "0b00111101101011111111110110100100";
        ram[34] = "0b00111110000110101111100111101100";
        ram[35] = "0b00111101010011011010101100011001";
        ram[36] = "0b10111100101011100000000011111010";
        ram[37] = "0b10111100110011111101100001010000";
        ram[38] = "0b10111110001000000001001110101001";
        ram[39] = "0b00111100100100011111110000010110";
        ram[40] = "0b00111101001010101001100111010010";
        ram[41] = "0b10111101101010011000010111001000";
        ram[42] = "0b10111100001110110011101001101001";
        ram[43] = "0b00111110000000111000001110101110";
        ram[44] = "0b10111101000000110110111110100111";
        ram[45] = "0b00111101110011001101100011011100";
        ram[46] = "0b10111110000001001111110111110100";
        ram[47] = "0b10111110001110100000010001001011";
        ram[48] = "0b00111101110101000000101000101000";
        ram[49] = "0b10111100010110001011001010110100";
        ram[50] = "0b00111100100010000101110011000110";
        ram[51] = "0b00111101000100000001010011010000";
        ram[52] = "0b10111101101110110001100000011111";
        ram[53] = "0b10111101110001001010101010110010";
        ram[54] = "0b00111010101011101111101011010101";
        ram[55] = "0b00111101010100100011011010011001";
        ram[56] = "0b00111101100111100000010001100010";
        ram[57] = "0b00111101101010100111010011101001";
        ram[58] = "0b10111101111000010000111110010101";
        ram[59] = "0b00111101100000000010111111111001";
        ram[60] = "0b00111101101000100000111110100101";
        ram[61] = "0b10111101011000000011011111001001";
        ram[62] = "0b10111011101000101100010100010001";
        ram[63] = "0b00111100110000101101100011000011";
        ram[64] = "0b10111100101010101100111100010110";
        ram[65] = "0b00111101110100001001000011110111";
        ram[66] = "0b10111101010001010000110110100001";
        ram[67] = "0b10111101110001111111111110101001";
        ram[68] = "0b10111100100001110100101001000001";
        ram[69] = "0b00111101110010000101001010110101";
        ram[70] = "0b00111101010101110101111000111011";
        ram[71] = "0b10111110010000100000001101100000";
        ram[72] = "0b10111110000000001001001111011001";
        ram[73] = "0b10111101101100101100000101101110";
        ram[74] = "0b00111101011000001011100101111110";
        ram[75] = "0b00111110001101010100010011111110";
        ram[76] = "0b00111100110110011100010011001101";
        ram[77] = "0b00111110000001100111010100010100";
        ram[78] = "0b00111101001001111101111010111100";
        ram[79] = "0b10111101001000110100001001110101";
        ram[80] = "0b00111101110001011011100001110001";
        ram[81] = "0b00111101010001101110010111101000";
        ram[82] = "0b10111101111110011010000111111101";
        ram[83] = "0b00111100100000010111101101100000";
        ram[84] = "0b10111100000110011011100101011010";
        ram[85] = "0b00111101100011001011101011000100";
        ram[86] = "0b00111110000100001011011000110001";
        ram[87] = "0b00111101011000110000110011111011";
        ram[88] = "0b00111110001000110010110100101100";
        ram[89] = "0b00111101101011101001001110111010";
        ram[90] = "0b00111101110101011010010000100111";
        ram[91] = "0b10111101101001010011000100010010";
        ram[92] = "0b00111101110111111100100011110011";
        ram[93] = "0b10111101010100001001001010001010";
        ram[94] = "0b00111110000010110101011000110010";
        ram[95] = "0b00111101101111110001101001011101";
        ram[96] = "0b10111101100101110110111010100100";
        ram[97] = "0b00111011111111110011101100011111";
        ram[98] = "0b10111101000000001111111110111111";
        ram[99] = "0b10111101001101010001111100010110";
        ram[100] = "0b10111110001011000110100011101100";
        ram[101] = "0b10111011111110010011001011011100";
        ram[102] = "0b10111100110100011000111001101000";
        ram[103] = "0b10111101011001111011001001111100";
        ram[104] = "0b00111110000010100111000101011000";
        ram[105] = "0b10111011101010100011010001011100";
        ram[106] = "0b10111100011011111001000111110100";
        ram[107] = "0b00111101101001000011111010001001";
        ram[108] = "0b00111101111101001110111000111001";
        ram[109] = "0b10111100010001001100111001100110";
        ram[110] = "0b10111101101100001111110001001010";
        ram[111] = "0b00111110001111101111001001000001";
        ram[112] = "0b10111100110000111010101011100101";
        ram[113] = "0b10111101011100010110110011110101";
        ram[114] = "0b10111011111011010101100110001010";
        ram[115] = "0b00111110000110000100101011011000";
        ram[116] = "0b00111100111000000001011110011000";
        ram[117] = "0b00111110001010011100010110100100";
        ram[118] = "0b10111101001011011111100100011101";
        ram[119] = "0b10111101010000010000001010010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_1) {
meminst = new inference_conv2d_f3_4_4_1_ram("inference_conv2d_f3_4_4_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_1() {
    delete meminst;
}


};//endmodule
#endif
