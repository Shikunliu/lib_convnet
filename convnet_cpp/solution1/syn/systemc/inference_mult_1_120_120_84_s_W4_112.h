// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_112_H__
#define __inference_mult_1_120_120_84_s_W4_112_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_112_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_112_ram) {
        ram[0] = "0b10111101101000001010000101100000";
        ram[1] = "0b10111100011111111010010010010000";
        ram[2] = "0b00111101100010001010011001000111";
        ram[3] = "0b10111110001001111001110011000111";
        ram[4] = "0b00111100100000101110001110101010";
        ram[5] = "0b10111101101000010110110010001010";
        ram[6] = "0b10111110010100010011101101011100";
        ram[7] = "0b00111110000110101001110111101001";
        ram[8] = "0b00111100100000111010111100010111";
        ram[9] = "0b00111101110011110111101000001011";
        ram[10] = "0b10111100111101111111111100010101";
        ram[11] = "0b10111110000110010011101101111110";
        ram[12] = "0b10111101001010111111010101010001";
        ram[13] = "0b10111101000110001010000010010000";
        ram[14] = "0b00111100100101001010100011001111";
        ram[15] = "0b00111101010011100100100001111101";
        ram[16] = "0b10111100101011010101010110100100";
        ram[17] = "0b10111101001101101000000101001100";
        ram[18] = "0b00111110000100111011100111110001";
        ram[19] = "0b10111011010110001110110101101100";
        ram[20] = "0b10111101001011111111010000110100";
        ram[21] = "0b10111110000100001010001011001011";
        ram[22] = "0b10111101000101001111011011101101";
        ram[23] = "0b00111101000101010101000010010100";
        ram[24] = "0b10111110000100100011010000100010";
        ram[25] = "0b00111101001110100100110010011000";
        ram[26] = "0b10111101111101111010110111010001";
        ram[27] = "0b10111101110010000000111111011100";
        ram[28] = "0b10111100100010101110100010010001";
        ram[29] = "0b00111100111000011111111001011000";
        ram[30] = "0b00111100010001111001110101001110";
        ram[31] = "0b10111101100110000000110000111110";
        ram[32] = "0b10111110000000110000100001111000";
        ram[33] = "0b10111101001101110000010010101111";
        ram[34] = "0b10111101000101010000110111001001";
        ram[35] = "0b00111100001111011111100010001001";
        ram[36] = "0b10111101001101110111001100011001";
        ram[37] = "0b10111110000101001011111001000000";
        ram[38] = "0b10111110010100110010100001110100";
        ram[39] = "0b00111011011010110011100101110100";
        ram[40] = "0b10111101101101011100100000111001";
        ram[41] = "0b00111101100010100111100010010100";
        ram[42] = "0b00111101011101111101010110001111";
        ram[43] = "0b00111101101010000010110000011110";
        ram[44] = "0b00111100111111101011100111100101";
        ram[45] = "0b00111101111010110101110101000110";
        ram[46] = "0b00111101110100001111111110010111";
        ram[47] = "0b10111101001010010001110010101010";
        ram[48] = "0b00111101100011101110011100010110";
        ram[49] = "0b10111101000010101111000101111011";
        ram[50] = "0b10111101000110111101011000011111";
        ram[51] = "0b10111110001011111000101110011100";
        ram[52] = "0b00111100010110110010110011100010";
        ram[53] = "0b00111100110110101100110101000001";
        ram[54] = "0b00111101110011111011101100001110";
        ram[55] = "0b00111110001000000100010011110010";
        ram[56] = "0b00111101000010010111111001111111";
        ram[57] = "0b10111101110111001110110100001011";
        ram[58] = "0b00111101100011100011011110001110";
        ram[59] = "0b10111101001010101010101010011001";
        ram[60] = "0b10111101100010000101111010001110";
        ram[61] = "0b10111110000001000011110110001010";
        ram[62] = "0b10111110000100010100110100101111";
        ram[63] = "0b00111101110001101101011100010010";
        ram[64] = "0b10111100100001100000101100010010";
        ram[65] = "0b10111110001111111010001010101101";
        ram[66] = "0b10111100110111110001111011011111";
        ram[67] = "0b00111110001000001000110100001001";
        ram[68] = "0b10111100111011111011111100001010";
        ram[69] = "0b10111101010010000010101100010010";
        ram[70] = "0b10111110001010010000010111000000";
        ram[71] = "0b00111110000001101111001010100110";
        ram[72] = "0b00111101100010100111010001100011";
        ram[73] = "0b10111110000110010011110101010011";
        ram[74] = "0b00111101011111110101000011001000";
        ram[75] = "0b00111100111100100010111100100111";
        ram[76] = "0b00111101111101100110100101001001";
        ram[77] = "0b10111101110001010001110010111010";
        ram[78] = "0b00111101011001010110100000000100";
        ram[79] = "0b00111101100011001110001001100111";
        ram[80] = "0b10111101011010010100000101000010";
        ram[81] = "0b00111101010000110011010100001001";
        ram[82] = "0b00111101101111011010010001010110";
        ram[83] = "0b10111011110100101111111110000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_112) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_112_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_112) {
meminst = new inference_mult_1_120_120_84_s_W4_112_ram("inference_mult_1_120_120_84_s_W4_112_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_112() {
    delete meminst;
}


};//endmodule
#endif
