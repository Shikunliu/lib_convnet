// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_9_H__
#define __inference_conv2d_f3_0_3_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_9_ram) {
        ram[0] = "0b00111100100001110100000110101000";
        ram[1] = "0b00111101001010100100001111110001";
        ram[2] = "0b00111101011110011000101110100111";
        ram[3] = "0b00111100101100101101001000011010";
        ram[4] = "0b00111101101011011111111111010011";
        ram[5] = "0b10111101100110101101110010111000";
        ram[6] = "0b10111101011000101000100000000101";
        ram[7] = "0b00111101000000111101010010111100";
        ram[8] = "0b10111110001011000001110000011101";
        ram[9] = "0b00111110011011101010011011000010";
        ram[10] = "0b10111101001111100001001101000110";
        ram[11] = "0b00111101000100100010001100110011";
        ram[12] = "0b10111101101101110110111111100110";
        ram[13] = "0b10111101100101110100110100110001";
        ram[14] = "0b00111101100110001010111000110010";
        ram[15] = "0b10111101001101001101101100100100";
        ram[16] = "0b00111110000111111001110111110101";
        ram[17] = "0b00111100110001001000000011001110";
        ram[18] = "0b00111110010001001010001110000011";
        ram[19] = "0b00111101110101111111010010011001";
        ram[20] = "0b00111100101011101011001101110010";
        ram[21] = "0b00111101100000001001010000110111";
        ram[22] = "0b00111110000110000010011010101011";
        ram[23] = "0b10111110000010100011111111001101";
        ram[24] = "0b10111100100000100110101000111110";
        ram[25] = "0b10111010000100111101011010110111";
        ram[26] = "0b10111101011110001001010010000001";
        ram[27] = "0b00111110001011101011010110110011";
        ram[28] = "0b10111101111111100100011000000110";
        ram[29] = "0b10111100100100010110111011110011";
        ram[30] = "0b10111101100010001111100110001001";
        ram[31] = "0b10111101010010100100110011011011";
        ram[32] = "0b00111100100001000011101111001111";
        ram[33] = "0b00111100111001010000010010011100";
        ram[34] = "0b00111101101010010000010011011100";
        ram[35] = "0b00111101100100000110000111110000";
        ram[36] = "0b10111100110111101010001101011001";
        ram[37] = "0b00111110010010111000100010000111";
        ram[38] = "0b10111101010010110001111111010100";
        ram[39] = "0b10111101101010000010000100110111";
        ram[40] = "0b10111110011101010010100001101011";
        ram[41] = "0b10111101100000111111101010111110";
        ram[42] = "0b10111100110101001011000010010001";
        ram[43] = "0b10111101111011000110000011001100";
        ram[44] = "0b00111101001010111111101001011010";
        ram[45] = "0b00111011010001001110010011110111";
        ram[46] = "0b10111101000101101110100111010111";
        ram[47] = "0b10111100101110000000001011011011";
        ram[48] = "0b10111110001001000101010111101011";
        ram[49] = "0b00111101100001001110110111001110";
        ram[50] = "0b00111110000011101010100111100111";
        ram[51] = "0b10111101011110001100011110010010";
        ram[52] = "0b00111110000000000110100101100010";
        ram[53] = "0b10111100010011001110011110100101";
        ram[54] = "0b00111110011100000100011101001110";
        ram[55] = "0b10111101001001010111101111110000";
        ram[56] = "0b00111101100100010101010000011011";
        ram[57] = "0b00111101101010110011010000111001";
        ram[58] = "0b10111100011110101000010010010110";
        ram[59] = "0b00111101000110110001001001011010";
        ram[60] = "0b10111101101011011101111010100011";
        ram[61] = "0b00111101100000000011011110100001";
        ram[62] = "0b10111011110010011010011010101000";
        ram[63] = "0b10111101101010000100001010101010";
        ram[64] = "0b00111100111000100101111101110001";
        ram[65] = "0b10111101001101010100000001010100";
        ram[66] = "0b00111101000001111110110111010101";
        ram[67] = "0b00111001100001100001111101010000";
        ram[68] = "0b00111101111100101101001111001000";
        ram[69] = "0b10111101001111110110111000001010";
        ram[70] = "0b10111100101100111011111110110110";
        ram[71] = "0b10111101000011100000101111000111";
        ram[72] = "0b00111101010101111001000110011100";
        ram[73] = "0b00111110000110010000010001110001";
        ram[74] = "0b10111101000101010000101010100100";
        ram[75] = "0b00111101001000011001111011101100";
        ram[76] = "0b00111101010100101010101111101111";
        ram[77] = "0b10111101100010111100010000010110";
        ram[78] = "0b00111010111011111111010001101111";
        ram[79] = "0b00111101100101011111000110010111";
        ram[80] = "0b10111110000010111110000000010101";
        ram[81] = "0b10111110000111010100101100100111";
        ram[82] = "0b00111101101111010010110110001000";
        ram[83] = "0b00111100100111000101001000010000";
        ram[84] = "0b00111101101100011101010101110011";
        ram[85] = "0b00111011111100010011000111110001";
        ram[86] = "0b00111100000100110101101011111100";
        ram[87] = "0b10111101100111011000000111111110";
        ram[88] = "0b00111110000111001011011001000001";
        ram[89] = "0b10111110010001100100000011101010";
        ram[90] = "0b10111101110011010010010011100001";
        ram[91] = "0b10111110010011010111010111100010";
        ram[92] = "0b10111101110000100110111011001101";
        ram[93] = "0b10111101001011111101001101100010";
        ram[94] = "0b00111110001000000111010010100111";
        ram[95] = "0b00111101111110100100010110010001";
        ram[96] = "0b00111101110100101011101010011101";
        ram[97] = "0b00111101000000000100100000111111";
        ram[98] = "0b10111101000010001010001111011110";
        ram[99] = "0b10111101011000110111001100110111";
        ram[100] = "0b10111100111110110101111111110011";
        ram[101] = "0b10111101111100110101110010011110";
        ram[102] = "0b00111101000110011100111110011010";
        ram[103] = "0b00111101011010000101111111101011";
        ram[104] = "0b00111110001001001100000111101100";
        ram[105] = "0b00111110000110111110011111110011";
        ram[106] = "0b00111110001100000010100100101000";
        ram[107] = "0b10111101101010100110101101010001";
        ram[108] = "0b10111101101000100011110100011001";
        ram[109] = "0b10111011111011010000000011011111";
        ram[110] = "0b10111101110011000101011100110100";
        ram[111] = "0b00111100101011001000011000111011";
        ram[112] = "0b00111011100101011000100011111110";
        ram[113] = "0b10111101010111000001010101011010";
        ram[114] = "0b10111101101111001101100101101111";
        ram[115] = "0b00111101100110001110000000101001";
        ram[116] = "0b00111101110001011011100011001111";
        ram[117] = "0b10111101100010011000111100000010";
        ram[118] = "0b00111110001000010111110101101011";
        ram[119] = "0b00111101000010011000100100110001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_9) {
meminst = new inference_conv2d_f3_0_3_9_ram("inference_conv2d_f3_0_3_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_9() {
    delete meminst;
}


};//endmodule
#endif
