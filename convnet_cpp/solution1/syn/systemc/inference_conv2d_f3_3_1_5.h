// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_5_H__
#define __inference_conv2d_f3_3_1_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_5_ram) {
        ram[0] = "0b10111101111100000110000010111011";
        ram[1] = "0b00111100100001010001000010101011";
        ram[2] = "0b00111101111011111101011111100100";
        ram[3] = "0b10111101100000111100110010110110";
        ram[4] = "0b10111110001100011110010001110001";
        ram[5] = "0b00111101101010010100011100100001";
        ram[6] = "0b00111101001010101110000010011001";
        ram[7] = "0b10111101101100000000101010110010";
        ram[8] = "0b00111101000011010000100100110011";
        ram[9] = "0b00111101101010000100110011010110";
        ram[10] = "0b10111101001110000000111010110101";
        ram[11] = "0b10111101101001001000011011001000";
        ram[12] = "0b00111101001100010001111010000110";
        ram[13] = "0b00111101111000001111111011001110";
        ram[14] = "0b00111110001011100001001101101110";
        ram[15] = "0b00111101101100011101010110001101";
        ram[16] = "0b10111110001111001111110101001100";
        ram[17] = "0b10111100100011110111100110000101";
        ram[18] = "0b10111110001001001000010101011110";
        ram[19] = "0b10111101011101101100111001011110";
        ram[20] = "0b00111101110111011110101101010011";
        ram[21] = "0b00111101101110010101100110111110";
        ram[22] = "0b00111011000000011001110001001101";
        ram[23] = "0b00111100100111010100111000100100";
        ram[24] = "0b10111110000000001011111010010100";
        ram[25] = "0b00111101100110000111011011100010";
        ram[26] = "0b00111100100111101110111000000010";
        ram[27] = "0b10111110000011001011110000000110";
        ram[28] = "0b10111101111000101101010100010111";
        ram[29] = "0b10111101000010100111000010110111";
        ram[30] = "0b00111101001011111000110010000000";
        ram[31] = "0b00111101011010111010100000001010";
        ram[32] = "0b10111101011001011001111011011011";
        ram[33] = "0b10111101111111001011010101111000";
        ram[34] = "0b10111100100110111011000011001011";
        ram[35] = "0b00111101001101001101101101011001";
        ram[36] = "0b10111100111110010011011010000010";
        ram[37] = "0b00111110000001010101110010010110";
        ram[38] = "0b00111010101010101000000001000111";
        ram[39] = "0b10111101100000010110111111111111";
        ram[40] = "0b00111101101100101011101111000100";
        ram[41] = "0b10111101001100011110101011100100";
        ram[42] = "0b00111110000110100000101101011111";
        ram[43] = "0b00111101010010001011101100100101";
        ram[44] = "0b00111101100000010010100101101110";
        ram[45] = "0b10111101001001000110010011101010";
        ram[46] = "0b00111100010010100101111110100000";
        ram[47] = "0b00111011101111001010010001001011";
        ram[48] = "0b00111101010000011011110101101111";
        ram[49] = "0b10111101110011011111001101110011";
        ram[50] = "0b10111110010110000000010111100110";
        ram[51] = "0b10111101101000101101001001101011";
        ram[52] = "0b00111101111011000000110101101111";
        ram[53] = "0b00111101000100001111101111101100";
        ram[54] = "0b00111100101111110010111100100000";
        ram[55] = "0b00111110000100010011011100101010";
        ram[56] = "0b00111101110011100111101100111110";
        ram[57] = "0b10111101101110010010010100000000";
        ram[58] = "0b00111101000100011100111100000000";
        ram[59] = "0b10111101101011110000000011100010";
        ram[60] = "0b00111101010101011101001100000110";
        ram[61] = "0b00111101011001010000001000011000";
        ram[62] = "0b10111100100111000111011111010000";
        ram[63] = "0b00111110000000011000011011011011";
        ram[64] = "0b00111101111000011100110101100000";
        ram[65] = "0b10111011101110000000110000100000";
        ram[66] = "0b10111100011110000010110100111000";
        ram[67] = "0b00111100110100110110111001110010";
        ram[68] = "0b00111110000000011000000010010001";
        ram[69] = "0b00111010100110001101110110000111";
        ram[70] = "0b10111101101010100110101100000000";
        ram[71] = "0b00111101010100011000001001110100";
        ram[72] = "0b10111101101010000010110101111011";
        ram[73] = "0b00111101000100101111010101110000";
        ram[74] = "0b10111110000001101011110000011111";
        ram[75] = "0b10111101100000010011111101110011";
        ram[76] = "0b00111101010001011010000111001011";
        ram[77] = "0b10111101001001010001101000110110";
        ram[78] = "0b00111110001101001000000100101100";
        ram[79] = "0b00111101010010110001111101001110";
        ram[80] = "0b10111110010000111001010001110101";
        ram[81] = "0b00111110001011011111000011010100";
        ram[82] = "0b10111110001100100000101110000000";
        ram[83] = "0b10111100111101100001111001101010";
        ram[84] = "0b10111101100000001110000111011101";
        ram[85] = "0b10111101001110001000010011000111";
        ram[86] = "0b10111101101110001011010011101000";
        ram[87] = "0b00111101101011010111001011011000";
        ram[88] = "0b00111101110100010111011100100001";
        ram[89] = "0b00111110001100100011111011100010";
        ram[90] = "0b10111110001110000101111111010000";
        ram[91] = "0b10111101011011111111010111000111";
        ram[92] = "0b00111100111000101110101000010000";
        ram[93] = "0b00111110000011000101001110110001";
        ram[94] = "0b10111110010011011111011100011111";
        ram[95] = "0b00111101101100011010111110100101";
        ram[96] = "0b10111101001000010010001011100000";
        ram[97] = "0b00111011101110010011000100111010";
        ram[98] = "0b10111100100111001010110011011111";
        ram[99] = "0b10111010111100011001000100100111";
        ram[100] = "0b00111110000101000011111011011001";
        ram[101] = "0b00111101000111100101100100110111";
        ram[102] = "0b10111101001101000011000100101010";
        ram[103] = "0b10111101011000000000111110000101";
        ram[104] = "0b10111101100010110100000000111011";
        ram[105] = "0b00111101101011100110001011011100";
        ram[106] = "0b10111011101011000111011000010101";
        ram[107] = "0b10111100011011101000100001110100";
        ram[108] = "0b00111100010111011011100100011001";
        ram[109] = "0b10111101101011101001100110011001";
        ram[110] = "0b10111101100010001001111011001000";
        ram[111] = "0b10111110000001011001110110011001";
        ram[112] = "0b00111110001100011011011100010111";
        ram[113] = "0b00111101011011111101010000011110";
        ram[114] = "0b10111101110001000011110110100101";
        ram[115] = "0b10111101010001111101000000001110";
        ram[116] = "0b00111100000100000111001101010101";
        ram[117] = "0b10111101010010101110011100011001";
        ram[118] = "0b00111100100001011101001001110010";
        ram[119] = "0b00111100110111011100011011110000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_5) {
meminst = new inference_conv2d_f3_3_1_5_ram("inference_conv2d_f3_3_1_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_5() {
    delete meminst;
}


};//endmodule
#endif
