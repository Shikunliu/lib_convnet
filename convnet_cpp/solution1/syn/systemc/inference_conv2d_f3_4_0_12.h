// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_12_H__
#define __inference_conv2d_f3_4_0_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_12_ram) {
        ram[0] = "0b00111110000010110000001000001100";
        ram[1] = "0b00111101110110010001011010000111";
        ram[2] = "0b00111100111110001110000010111100";
        ram[3] = "0b00111110000110111011111011001011";
        ram[4] = "0b00111101110100001100101110110000";
        ram[5] = "0b00111101000001110010011100111100";
        ram[6] = "0b10111011101000010101111001001010";
        ram[7] = "0b00111110000110100011110101110001";
        ram[8] = "0b00111011110001110011001100011010";
        ram[9] = "0b00111011100111011001011010101001";
        ram[10] = "0b10111101001011100110100011111111";
        ram[11] = "0b00111101101000100001001101010000";
        ram[12] = "0b00111101010000100010000010111100";
        ram[13] = "0b10111101010000101011010111110011";
        ram[14] = "0b00111110001100001101101101101010";
        ram[15] = "0b10111101010111001101000100100111";
        ram[16] = "0b10111110000000000011110111011110";
        ram[17] = "0b10111101101000111100110111000011";
        ram[18] = "0b10111100110110111100111000100111";
        ram[19] = "0b00111101110101011000111100101110";
        ram[20] = "0b00111101010101001100010101101111";
        ram[21] = "0b10111100111010101111000011011010";
        ram[22] = "0b10111110000100011111011111010111";
        ram[23] = "0b10111101110110111101110111111101";
        ram[24] = "0b10111101100101011010111101010010";
        ram[25] = "0b10111100010110010111001110100100";
        ram[26] = "0b00111110000001101101011010011001";
        ram[27] = "0b10111101110001100110001011010110";
        ram[28] = "0b00111101100010001011010000010001";
        ram[29] = "0b00111101110100010111110101101011";
        ram[30] = "0b00111101101100100000001000101011";
        ram[31] = "0b00111101011001010101011111011110";
        ram[32] = "0b10111101101110100011101001011001";
        ram[33] = "0b10111101010011101110010110101100";
        ram[34] = "0b00111101000010111111100011111101";
        ram[35] = "0b10111110001010010010010111111111";
        ram[36] = "0b10111101100111011011100001000010";
        ram[37] = "0b00111110000011011110000001010000";
        ram[38] = "0b10111101010101000011110001111101";
        ram[39] = "0b10111101101010011111000101010000";
        ram[40] = "0b00111011111110101010011000001110";
        ram[41] = "0b10111100000010001100101000111110";
        ram[42] = "0b10111101010010101010100110100111";
        ram[43] = "0b00111101100100101110010100010101";
        ram[44] = "0b00111110000000000000111110111011";
        ram[45] = "0b10111100101000010100011010100010";
        ram[46] = "0b10111101101100100111110110100100";
        ram[47] = "0b00111100101000010001000110010011";
        ram[48] = "0b00111100100100101011001101100001";
        ram[49] = "0b00111101110111100010111011110101";
        ram[50] = "0b00111101100110010000001011011110";
        ram[51] = "0b10111100101000000001101111001010";
        ram[52] = "0b10111100111011110001110001001101";
        ram[53] = "0b00111100010011000001101011110110";
        ram[54] = "0b00111110000110011001000110111100";
        ram[55] = "0b10111100110111000101110011111000";
        ram[56] = "0b10111101110000100000101010011100";
        ram[57] = "0b00111100101111000001111100000000";
        ram[58] = "0b00111101010010101111101111000010";
        ram[59] = "0b10111101000011111100111101001011";
        ram[60] = "0b10111110001011000110011110011101";
        ram[61] = "0b00111101010010111001011001010001";
        ram[62] = "0b10111101011010100110001110110111";
        ram[63] = "0b10111101000110010100100111001110";
        ram[64] = "0b00111011101010011001000001110010";
        ram[65] = "0b10111101100101011110010001111011";
        ram[66] = "0b10111110000101110100100101101011";
        ram[67] = "0b10111101101101100001111000001100";
        ram[68] = "0b10111101100001011011111111010101";
        ram[69] = "0b00111010100001010110100101100001";
        ram[70] = "0b00111100111101111110001011000101";
        ram[71] = "0b10111101110011111001101110011001";
        ram[72] = "0b10111110010100010010110101110111";
        ram[73] = "0b00111110000000011011101100000110";
        ram[74] = "0b10111101110111010111100010000001";
        ram[75] = "0b00111100111000011011011100001010";
        ram[76] = "0b10111101010000011010101111010010";
        ram[77] = "0b00111100111001111011101100110000";
        ram[78] = "0b00111101110011001110000111000110";
        ram[79] = "0b10111101001011010011010010000001";
        ram[80] = "0b00111101001011111100111110011100";
        ram[81] = "0b10111101110011101010111000011001";
        ram[82] = "0b00111100001110100001110110011110";
        ram[83] = "0b00111101100010001011000000010101";
        ram[84] = "0b00111011101111100111010110011100";
        ram[85] = "0b10111100111000001001011110000101";
        ram[86] = "0b10111101110100000101110110010110";
        ram[87] = "0b00111110000110100011011101101001";
        ram[88] = "0b00111101111100101011111001001001";
        ram[89] = "0b10111101011100111001000100001100";
        ram[90] = "0b10111101110101100111100001111101";
        ram[91] = "0b00111110001001111110110001111000";
        ram[92] = "0b00111110000011110011101000010101";
        ram[93] = "0b00111101000101111001010101111110";
        ram[94] = "0b00111101101100101011011000001101";
        ram[95] = "0b00111110000111000110010110000100";
        ram[96] = "0b00111010101000000011001110010010";
        ram[97] = "0b10111110000011011001101000001111";
        ram[98] = "0b10111101100110010011010111010100";
        ram[99] = "0b00111101110000001100010111111001";
        ram[100] = "0b10111100000010110101000000010101";
        ram[101] = "0b10111110000010001101110100011110";
        ram[102] = "0b10111101010010110111101000011100";
        ram[103] = "0b00111101110000001111001101111011";
        ram[104] = "0b10111101101111111110101110001110";
        ram[105] = "0b00111101000100000001111110011101";
        ram[106] = "0b10111101010000100111101101010101";
        ram[107] = "0b10111011001010010001100000010010";
        ram[108] = "0b00111110001110010100111011100100";
        ram[109] = "0b10111101011010010010101111011110";
        ram[110] = "0b00111101110010111010000001100010";
        ram[111] = "0b00111101111110010001001101100010";
        ram[112] = "0b00111110001111000110100000100011";
        ram[113] = "0b10111011111111100000010000111101";
        ram[114] = "0b10111101001000011110010110110011";
        ram[115] = "0b00111110000110011100001011000010";
        ram[116] = "0b00111101001000111111001001101000";
        ram[117] = "0b00111100100000111011011010100100";
        ram[118] = "0b10111101100100000010100101111001";
        ram[119] = "0b00111100110111010001110000111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_12) {
meminst = new inference_conv2d_f3_4_0_12_ram("inference_conv2d_f3_4_0_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_12() {
    delete meminst;
}


};//endmodule
#endif
