// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_10_H__
#define __inference_conv2d_f3_1_2_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_10_ram) {
        ram[0] = "0b10111110000100101111100010111110";
        ram[1] = "0b00111101100010111111100101001101";
        ram[2] = "0b10111100101010011110101001111111";
        ram[3] = "0b00111101010011100100101110001000";
        ram[4] = "0b00111101111011011000011111111001";
        ram[5] = "0b00111101101010010001111111001111";
        ram[6] = "0b00111100100011101100000011000011";
        ram[7] = "0b00111100101000101100111010010111";
        ram[8] = "0b00111110000000101000110111001010";
        ram[9] = "0b10111100100001111111101101000001";
        ram[10] = "0b10111101110011010000111111101001";
        ram[11] = "0b10111100100111111100010011110111";
        ram[12] = "0b10111011000101011001001100100101";
        ram[13] = "0b00111101001011101001110000010000";
        ram[14] = "0b00111101011001000000010110011001";
        ram[15] = "0b00111100110010111111111101111101";
        ram[16] = "0b10111101011111010100001111000011";
        ram[17] = "0b00111110001110110110111111100011";
        ram[18] = "0b00111100111011110001000001011001";
        ram[19] = "0b00111101100100011000101100001101";
        ram[20] = "0b00111101101101011011010110101010";
        ram[21] = "0b00111101111100010110111101000100";
        ram[22] = "0b10111101100110101000000111001111";
        ram[23] = "0b10111101001001011000101110101011";
        ram[24] = "0b10111101101111001100111110000111";
        ram[25] = "0b10111101001010110000000100000000";
        ram[26] = "0b10111101100001101111000010011010";
        ram[27] = "0b00111101110111011110111110000101";
        ram[28] = "0b00111101111000000110100001010101";
        ram[29] = "0b10111101111001001010110011110011";
        ram[30] = "0b00111011110010001000110101100010";
        ram[31] = "0b00111100101010110101000110001000";
        ram[32] = "0b00111100011000110000100011100100";
        ram[33] = "0b10111101011100101100110110011000";
        ram[34] = "0b10111110001100011101100111110101";
        ram[35] = "0b10111110001100001001001010001010";
        ram[36] = "0b10111100100000000001000001011100";
        ram[37] = "0b10111101110101000111001100000100";
        ram[38] = "0b10111101110110110010000100111110";
        ram[39] = "0b00111100100000101110011000101111";
        ram[40] = "0b10111101010110011110001111010111";
        ram[41] = "0b10111101001000111010101001111010";
        ram[42] = "0b00111101011011110001110001101000";
        ram[43] = "0b00111110000100000100100011100000";
        ram[44] = "0b10111110001000100100010111110110";
        ram[45] = "0b10111101111010100001110111111100";
        ram[46] = "0b10111101101110111010010100011010";
        ram[47] = "0b00111100100111010011001100010111";
        ram[48] = "0b00111110001001110001111000101010";
        ram[49] = "0b10111101011100111011011010010110";
        ram[50] = "0b10111101101010101011100100111001";
        ram[51] = "0b00111101010111101100000010011011";
        ram[52] = "0b10111011110001111010101000111001";
        ram[53] = "0b00111101111010110101001111010110";
        ram[54] = "0b00111110001101100000000001101101";
        ram[55] = "0b10111100000110110111011001111110";
        ram[56] = "0b00111101100110001011011110101111";
        ram[57] = "0b10111110000001111100100110011011";
        ram[58] = "0b10111101100101010100011101101000";
        ram[59] = "0b10111101110101110100100110101110";
        ram[60] = "0b00111110000001110011011011001110";
        ram[61] = "0b00111100101111010000101111111010";
        ram[62] = "0b10111100110110010001001100101100";
        ram[63] = "0b00111101100010110001011101010110";
        ram[64] = "0b00111101110101110111011011000101";
        ram[65] = "0b00111100111001000110000110101001";
        ram[66] = "0b10111101110011010101110110000001";
        ram[67] = "0b10111101100100100010001011010101";
        ram[68] = "0b00111100000101101100111010000011";
        ram[69] = "0b00111101010000010111011100010011";
        ram[70] = "0b10111110000000000101100101100100";
        ram[71] = "0b10111100000100011100000010010010";
        ram[72] = "0b10111010110111001111011001100110";
        ram[73] = "0b10111101100011000111011110011010";
        ram[74] = "0b10111101110010001001001110000010";
        ram[75] = "0b00111101001001000011111001010011";
        ram[76] = "0b00111110000100010101100100111110";
        ram[77] = "0b10111101010001110100010010110011";
        ram[78] = "0b10111110000000001110111101010110";
        ram[79] = "0b10111100011111011010011011110101";
        ram[80] = "0b00111101101001100101110100011111";
        ram[81] = "0b10111101100101110011100000101011";
        ram[82] = "0b10111101101000011010100100110011";
        ram[83] = "0b00111100110101010110100111110101";
        ram[84] = "0b10111110000101100101010000001101";
        ram[85] = "0b10111110010000100011111011100010";
        ram[86] = "0b00111101000111010111000001101110";
        ram[87] = "0b10111101101101001100010010011000";
        ram[88] = "0b00111100011001011011101110110001";
        ram[89] = "0b10111110000000011011101000111101";
        ram[90] = "0b10111011010011010011100110000100";
        ram[91] = "0b10111101010000111101110100011111";
        ram[92] = "0b10111110010010010100100101100010";
        ram[93] = "0b00111101101011100011001101000001";
        ram[94] = "0b10111110000110010000101110000101";
        ram[95] = "0b00111110000001001000101111101011";
        ram[96] = "0b10111110000011001011000101000110";
        ram[97] = "0b10111101110111000111100000100001";
        ram[98] = "0b10111101101000001011110001000110";
        ram[99] = "0b10111101100111001011101010101001";
        ram[100] = "0b10111101000001011001011000100111";
        ram[101] = "0b00111101100101000100010100001001";
        ram[102] = "0b10111101101000110010100101110011";
        ram[103] = "0b00111101110001001011111000100101";
        ram[104] = "0b00111101101001001001011010011101";
        ram[105] = "0b00111101101000011111100000001101";
        ram[106] = "0b00111101001011011100101011000100";
        ram[107] = "0b00111101111101101100101011001101";
        ram[108] = "0b00111101101100110100100101101110";
        ram[109] = "0b00111101001101011100110000110101";
        ram[110] = "0b10111110000010011100111111011101";
        ram[111] = "0b00111101100111101001000010000111";
        ram[112] = "0b00111100110000010001101101010011";
        ram[113] = "0b00111110000011000011110110101011";
        ram[114] = "0b10111101000110000001001110111101";
        ram[115] = "0b00111011110101011100010010011000";
        ram[116] = "0b00111101111111100111111010100110";
        ram[117] = "0b00111100111000111110111111001001";
        ram[118] = "0b10111101001100000010111000110001";
        ram[119] = "0b10111101001001011111110101010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_10) {
meminst = new inference_conv2d_f3_1_2_10_ram("inference_conv2d_f3_1_2_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_10() {
    delete meminst;
}


};//endmodule
#endif
