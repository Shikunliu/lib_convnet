// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_13_H__
#define __inference_conv2d_f3_0_0_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_13_ram) {
        ram[0] = "0b10111101111100101100011110111001";
        ram[1] = "0b00111100110100010110101110011000";
        ram[2] = "0b00111101110100000110110111010111";
        ram[3] = "0b10111101100100000011010110110000";
        ram[4] = "0b00111101101101111010001101100010";
        ram[5] = "0b10111110000111100010110111101000";
        ram[6] = "0b10111100111100111011001001111111";
        ram[7] = "0b00111100101110000111010001010000";
        ram[8] = "0b10111101111010011110110010110011";
        ram[9] = "0b00111101111111111011100100111001";
        ram[10] = "0b10111011001011000001001010011000";
        ram[11] = "0b10111011100001000100011110111000";
        ram[12] = "0b10111101110001001111111110101111";
        ram[13] = "0b10111110011001011101111101100101";
        ram[14] = "0b10111100111110101001101110101000";
        ram[15] = "0b10111100010101100010000100001001";
        ram[16] = "0b00111100001110100011100110111000";
        ram[17] = "0b10111101100001111100101001100100";
        ram[18] = "0b00111101101111110000001000001001";
        ram[19] = "0b00111101110001100100010110010100";
        ram[20] = "0b10111101110010010100000011111111";
        ram[21] = "0b10111101111011000001001000100111";
        ram[22] = "0b00111101001000101000110101111001";
        ram[23] = "0b10111101110100101111001000110000";
        ram[24] = "0b00111101110111101110111101011111";
        ram[25] = "0b00111100111101001111000101111001";
        ram[26] = "0b00111101010101001110101011111001";
        ram[27] = "0b00111101100101010110010011101100";
        ram[28] = "0b00111101110001010100111101100000";
        ram[29] = "0b10111100011011001110010111011100";
        ram[30] = "0b00111101000011000111100110100110";
        ram[31] = "0b00111101100111011111011000000101";
        ram[32] = "0b00111100111111011100000011000000";
        ram[33] = "0b00111101001111101110011000001010";
        ram[34] = "0b00111100111110110000111100110101";
        ram[35] = "0b00111100111000011101000101110110";
        ram[36] = "0b10111110000010100000111001000001";
        ram[37] = "0b10111101101011010001010100001100";
        ram[38] = "0b00111101100001101100100111011100";
        ram[39] = "0b10111101101111001101011111011101";
        ram[40] = "0b00111100000100101110101000010011";
        ram[41] = "0b00111101000000010100011010111100";
        ram[42] = "0b10111101111000011011011011010100";
        ram[43] = "0b00111101011000011101100010011000";
        ram[44] = "0b10111101101000010101100011100000";
        ram[45] = "0b10111101100111100110110101110100";
        ram[46] = "0b00111100100011100011100110110100";
        ram[47] = "0b00111101101011011111110101001110";
        ram[48] = "0b10111101111001110000011001001111";
        ram[49] = "0b10111100100000001100010000010101";
        ram[50] = "0b00111100110001011100011010110100";
        ram[51] = "0b10111110001000000101100001011000";
        ram[52] = "0b10111110001101010100101011000011";
        ram[53] = "0b00111011100001001010010111101101";
        ram[54] = "0b00111011111101100000100100110001";
        ram[55] = "0b00111110010000101011111001001001";
        ram[56] = "0b10111101100011000111001110011110";
        ram[57] = "0b00111101010001010011100011010100";
        ram[58] = "0b00111101100101011110111001001001";
        ram[59] = "0b00111101111000111001010110000001";
        ram[60] = "0b10111110000100001100111111100001";
        ram[61] = "0b00111101100110101111001011100101";
        ram[62] = "0b00111101010110111110001100100000";
        ram[63] = "0b10111101100010011001001001101011";
        ram[64] = "0b10111101100101010101111100001101";
        ram[65] = "0b00111100110101111100110101111100";
        ram[66] = "0b10111101011111101010010010000000";
        ram[67] = "0b10111101101000101100001100110110";
        ram[68] = "0b00111101101001010101010111010011";
        ram[69] = "0b00111101100000110010101011010000";
        ram[70] = "0b10111110010111111001010010000101";
        ram[71] = "0b00111101001001110011011111001101";
        ram[72] = "0b10111101101111010000101111101101";
        ram[73] = "0b00111101011111011111000001011011";
        ram[74] = "0b00111101011010011000001100000001";
        ram[75] = "0b10111110000000110111011101011100";
        ram[76] = "0b10111101011110100100111101101100";
        ram[77] = "0b10111110000100111000000101010010";
        ram[78] = "0b10111101101101011000100001111000";
        ram[79] = "0b00111101101100011111110110000001";
        ram[80] = "0b00111101111100100100000011111011";
        ram[81] = "0b10111110000110100111000110011011";
        ram[82] = "0b00111100111011000010001110101010";
        ram[83] = "0b10111101000101001100111110110110";
        ram[84] = "0b10111101001010000001110011101010";
        ram[85] = "0b00111101111011011100110100101101";
        ram[86] = "0b00111101110001111001100111110011";
        ram[87] = "0b00111100100101111001010000111100";
        ram[88] = "0b10111100111110000101111011101100";
        ram[89] = "0b10111101100100101000111010100000";
        ram[90] = "0b00111101001101010000011010001101";
        ram[91] = "0b00111101010001110000101011010001";
        ram[92] = "0b00111100010101111101101111110101";
        ram[93] = "0b10111100111100100101110100010101";
        ram[94] = "0b10111101100110000011111100001100";
        ram[95] = "0b00111110011011111111001010100001";
        ram[96] = "0b00111110000100111010001100100011";
        ram[97] = "0b00111101111010101010011111011111";
        ram[98] = "0b00111101011100011001110011100000";
        ram[99] = "0b10111100111011100101101001010001";
        ram[100] = "0b00111100111001010111100110100010";
        ram[101] = "0b00111101101011001011010010100001";
        ram[102] = "0b10111101100111101000110111001101";
        ram[103] = "0b10111101111100110111110110100110";
        ram[104] = "0b10111101000000001101111101011001";
        ram[105] = "0b10111101110111101111011000110000";
        ram[106] = "0b10111101110010011111111001000011";
        ram[107] = "0b00111110000011010110110000101111";
        ram[108] = "0b10111101100001010111010111011011";
        ram[109] = "0b10111101111110100000101101011111";
        ram[110] = "0b10111101100010001011110100110000";
        ram[111] = "0b00111110000100100101100011010110";
        ram[112] = "0b00111110001110011100100000000000";
        ram[113] = "0b10111101101101011100001100100011";
        ram[114] = "0b00111101011011010000100010010010";
        ram[115] = "0b10111110000011111011000000001100";
        ram[116] = "0b00111101001111001010000100111011";
        ram[117] = "0b10111100111100110001011111110000";
        ram[118] = "0b10111101111101010110110100011010";
        ram[119] = "0b10111101111111001010111000100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_13) {
meminst = new inference_conv2d_f3_0_0_13_ram("inference_conv2d_f3_0_0_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_13() {
    delete meminst;
}


};//endmodule
#endif
