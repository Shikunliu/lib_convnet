// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_8_H__
#define __inference_conv2d_f3_4_0_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_8_ram) {
        ram[0] = "0b00111110000100001111100010000011";
        ram[1] = "0b10111101010111011001100011001101";
        ram[2] = "0b10111101010111111111111110010101";
        ram[3] = "0b10111101100111111111001111010110";
        ram[4] = "0b00111101101101000000100110010101";
        ram[5] = "0b10111110010000110101101011001001";
        ram[6] = "0b00111101111011100101111011101110";
        ram[7] = "0b00111101111100100010000001111001";
        ram[8] = "0b10111110000010101001100011101110";
        ram[9] = "0b10111101101111100000001101010110";
        ram[10] = "0b10111011111011111001100100010101";
        ram[11] = "0b00111101100101100101101100100001";
        ram[12] = "0b10111011001110001100010000101100";
        ram[13] = "0b10111110000100000111100000010000";
        ram[14] = "0b00111110000000010100001000101101";
        ram[15] = "0b10111101110101011000011001000100";
        ram[16] = "0b10111101000111011011010110001000";
        ram[17] = "0b10111101100011011011001101010100";
        ram[18] = "0b10111101000100110010001000011100";
        ram[19] = "0b00111110000011110101011111110111";
        ram[20] = "0b10111101001000111001100111101000";
        ram[21] = "0b10111101001011101011010000010011";
        ram[22] = "0b10111110001011100011010000110011";
        ram[23] = "0b10111100101110110100000001001000";
        ram[24] = "0b10111100001000000001100110010000";
        ram[25] = "0b10111110001100010000010101011100";
        ram[26] = "0b10111101100101001000111011011011";
        ram[27] = "0b00111101010011100100110100000000";
        ram[28] = "0b10111101000001010111010001111110";
        ram[29] = "0b10111010000110101010101010000000";
        ram[30] = "0b10111110001101101101001011101101";
        ram[31] = "0b00111101100000110010001011001010";
        ram[32] = "0b00111101100001001101000100100000";
        ram[33] = "0b00111101000001011111001100101001";
        ram[34] = "0b00111110010010110110101101101110";
        ram[35] = "0b10111101110011010111110101111100";
        ram[36] = "0b00111101100010001000001101101010";
        ram[37] = "0b00111101011000001000101100001011";
        ram[38] = "0b10111110000000011010011111100011";
        ram[39] = "0b10111101111110100110001101110011";
        ram[40] = "0b00111101110101101101001000100100";
        ram[41] = "0b10111101000100000000001111101111";
        ram[42] = "0b00111101110100111111011101001001";
        ram[43] = "0b10111100111110110100011101101001";
        ram[44] = "0b00111101100110000110101011010011";
        ram[45] = "0b00111101110000101001001100100011";
        ram[46] = "0b00111101110111110000110000110101";
        ram[47] = "0b00111110010010010110111110101000";
        ram[48] = "0b00111100010110110010101011001001";
        ram[49] = "0b00111110000010010100100110100101";
        ram[50] = "0b00111100101110100110101011001010";
        ram[51] = "0b00111101010000000010100110100001";
        ram[52] = "0b10111110001110001010000000001010";
        ram[53] = "0b10111100110001110111111010101111";
        ram[54] = "0b10111110001000000010111110110110";
        ram[55] = "0b00111101100011111000000001100011";
        ram[56] = "0b00111110001001110000101011000100";
        ram[57] = "0b00111110000001011011110000000010";
        ram[58] = "0b00111110000010100111001010101000";
        ram[59] = "0b10111110000100101010001100000101";
        ram[60] = "0b10111101011111111001010111100010";
        ram[61] = "0b10111101000100010010010001100101";
        ram[62] = "0b00111100100100101010110110000010";
        ram[63] = "0b10111101010010101000010100001111";
        ram[64] = "0b00111101101010011101010110111100";
        ram[65] = "0b10111101101011010011010110110110";
        ram[66] = "0b10111100101011101010010011000100";
        ram[67] = "0b00111110001001100010010011011101";
        ram[68] = "0b00111011010100010011100101101110";
        ram[69] = "0b10111110001011100000100010101111";
        ram[70] = "0b00111101000010101101110100001001";
        ram[71] = "0b10111100101001000000100001010011";
        ram[72] = "0b00111100001000100001010010101000";
        ram[73] = "0b00111100111000101110100101101111";
        ram[74] = "0b10111101100111010010011100100011";
        ram[75] = "0b00111011010010100010111110111010";
        ram[76] = "0b10111101100001001111010011100010";
        ram[77] = "0b00111101000001101101010010011011";
        ram[78] = "0b00111110001100011011100100110000";
        ram[79] = "0b00111100100111111000100001011100";
        ram[80] = "0b00111100101010111110101101110110";
        ram[81] = "0b10111101011000000110000010010011";
        ram[82] = "0b00111101010101001100001001001010";
        ram[83] = "0b00111100100111010010010101110101";
        ram[84] = "0b10111101101010000001010101011101";
        ram[85] = "0b00111101111111110001101101101001";
        ram[86] = "0b10111101000110101111100101001011";
        ram[87] = "0b00111101100010010010000110111111";
        ram[88] = "0b10111101000011010000000011001111";
        ram[89] = "0b10111101010011101000101101001001";
        ram[90] = "0b10111011111011001110100011001100";
        ram[91] = "0b10111101101000000010011110110000";
        ram[92] = "0b00111101000001010000100011101001";
        ram[93] = "0b00111101110001101001110001100111";
        ram[94] = "0b10111101111111001101110011001010";
        ram[95] = "0b10111000011010011111101001000010";
        ram[96] = "0b00111101111110010010100111101101";
        ram[97] = "0b10111110001001000001111010011011";
        ram[98] = "0b00111101000111010010110100011101";
        ram[99] = "0b00111101000111000101101000001001";
        ram[100] = "0b10111101011111100110001011110111";
        ram[101] = "0b00111101111110100000010100010100";
        ram[102] = "0b10111101101111010110110000100010";
        ram[103] = "0b00111110000001101010010010000111";
        ram[104] = "0b10111101001101001011010101100100";
        ram[105] = "0b00111101001010000000111010001101";
        ram[106] = "0b10111100110010010010000000000101";
        ram[107] = "0b00111100100110000011110111100100";
        ram[108] = "0b00111101010101001110010001000011";
        ram[109] = "0b00111101000111111000010000101010";
        ram[110] = "0b10111101011011110100000010110000";
        ram[111] = "0b10111101001010100010010011001100";
        ram[112] = "0b10111101101101011101010000111010";
        ram[113] = "0b10111100010100011101001110011101";
        ram[114] = "0b00111100010011001011110000000110";
        ram[115] = "0b10111110000110000100101011011000";
        ram[116] = "0b00111101110001010110011100111011";
        ram[117] = "0b00111110000101000100001011001000";
        ram[118] = "0b00111110010001110100101111000111";
        ram[119] = "0b10111100010000011111111000111101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_8) {
meminst = new inference_conv2d_f3_4_0_8_ram("inference_conv2d_f3_4_0_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_8() {
    delete meminst;
}


};//endmodule
#endif
