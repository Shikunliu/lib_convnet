// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_10_H__
#define __inference_conv2d_f3_0_2_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_10_ram) {
        ram[0] = "0b10111011000000111101100101101001";
        ram[1] = "0b00111100100110010001001100101100";
        ram[2] = "0b00111110000100111001111000101000";
        ram[3] = "0b00111101001100111110111001011111";
        ram[4] = "0b00111101100101000101000010101101";
        ram[5] = "0b10111100101101111111111111101100";
        ram[6] = "0b00111101000010111101000000110011";
        ram[7] = "0b00111101011000001110110001011001";
        ram[8] = "0b00111101101110110100010110111100";
        ram[9] = "0b10111101111111010000010110101111";
        ram[10] = "0b00111101010011000011001110011010";
        ram[11] = "0b00111101010010100100011000111111";
        ram[12] = "0b00111100011111010110100101001101";
        ram[13] = "0b00111100110111101000001101111001";
        ram[14] = "0b10111101110110111011101101100010";
        ram[15] = "0b10111100011001101100111001101011";
        ram[16] = "0b10111101101101011010111001111011";
        ram[17] = "0b10111101010010010011011110011100";
        ram[18] = "0b10111101100000010000001110111011";
        ram[19] = "0b10111101000110100011111101100001";
        ram[20] = "0b10111011111000000110100001001011";
        ram[21] = "0b10111101100010110100111111101000";
        ram[22] = "0b10111101000100111000110100010000";
        ram[23] = "0b00111101011011010000001001100010";
        ram[24] = "0b10111110000011000111000111010110";
        ram[25] = "0b00111110001001010000101100001111";
        ram[26] = "0b00111101011101110110001011110011";
        ram[27] = "0b00111100101000010001110011100110";
        ram[28] = "0b10111110000101001001011011101110";
        ram[29] = "0b00111101011010101001111010100101";
        ram[30] = "0b10111101100101100101000010001010";
        ram[31] = "0b10111101110110110010100010010101";
        ram[32] = "0b10111101001001100111001000100101";
        ram[33] = "0b10111101100001110001001001000011";
        ram[34] = "0b10111101100111111010111000000000";
        ram[35] = "0b00111100101100010110111000000001";
        ram[36] = "0b00111101000010000101100110100001";
        ram[37] = "0b00111101110001110000101111010000";
        ram[38] = "0b10111110000110000100111011000110";
        ram[39] = "0b10111101010110011001000001000101";
        ram[40] = "0b10111100010011100100100001100010";
        ram[41] = "0b10111101000000000110001111010011";
        ram[42] = "0b00111101111110010000100111110010";
        ram[43] = "0b10111110001110001011110011100000";
        ram[44] = "0b10111101011011111101010101111011";
        ram[45] = "0b10111101001101010010010000000100";
        ram[46] = "0b10111101111000111011100000011011";
        ram[47] = "0b00111101100001110010110110000110";
        ram[48] = "0b10111101100111001101011100010011";
        ram[49] = "0b10111101100110000100010001010111";
        ram[50] = "0b00111100110000011001001111101001";
        ram[51] = "0b00111100000000111010000010011110";
        ram[52] = "0b10111100100000100100101011001000";
        ram[53] = "0b00111011110111010001110000100101";
        ram[54] = "0b00111101110100010100101100010110";
        ram[55] = "0b10111110000110000010111111010111";
        ram[56] = "0b10111100101111110001011011001100";
        ram[57] = "0b10111010111110010111111111011110";
        ram[58] = "0b00111101001000010010000110011110";
        ram[59] = "0b10111110001100011111110010001111";
        ram[60] = "0b10111101010001101100110011110011";
        ram[61] = "0b00111101101000100100110010111001";
        ram[62] = "0b10111110010000110001011111110000";
        ram[63] = "0b10111101100101101000111000111111";
        ram[64] = "0b10111110000101110101111000100000";
        ram[65] = "0b10111101111000000011110101010111";
        ram[66] = "0b00111100100101110101111100101101";
        ram[67] = "0b00111101110110001111110101011101";
        ram[68] = "0b10111101111000011111000110001101";
        ram[69] = "0b00111101110010111011100001100101";
        ram[70] = "0b10111010001000100110010010111100";
        ram[71] = "0b10111101101101001010001010101100";
        ram[72] = "0b10111101100001111001000000110010";
        ram[73] = "0b00111110000101011111111000010001";
        ram[74] = "0b00111101111110100000010000001000";
        ram[75] = "0b10111101101110001010010000101110";
        ram[76] = "0b00111110000101000111111110011001";
        ram[77] = "0b00111101010010010010011011010101";
        ram[78] = "0b10111110010010110101100110011011";
        ram[79] = "0b00111100011011100010010010100001";
        ram[80] = "0b00111110000011010000111100011111";
        ram[81] = "0b00111101100011011010010111110110";
        ram[82] = "0b00111101110000011011001011110011";
        ram[83] = "0b10111100100110111111110111111000";
        ram[84] = "0b10111101100001010111100100000001";
        ram[85] = "0b10111011010101100010110000011100";
        ram[86] = "0b00111110001011001100110111011001";
        ram[87] = "0b00111101000111111000011011111111";
        ram[88] = "0b10111101010101111100010110000100";
        ram[89] = "0b00111101110001011100111111100000";
        ram[90] = "0b10111101000010110100101010011100";
        ram[91] = "0b10111110000011100100101110001000";
        ram[92] = "0b10111101000001100000110101000101";
        ram[93] = "0b10111100110001100110011010000001";
        ram[94] = "0b10111100011010011011111000001010";
        ram[95] = "0b10111101101101101011111101111010";
        ram[96] = "0b00111101011110101100000101100111";
        ram[97] = "0b10111101101111000011100101010001";
        ram[98] = "0b10111101001000101100110100000100";
        ram[99] = "0b10111101001110011110001001000100";
        ram[100] = "0b00111100111000111000111111110010";
        ram[101] = "0b10111011001100111100100000011001";
        ram[102] = "0b10111101100100111101111011001101";
        ram[103] = "0b10111110000011101101011101000001";
        ram[104] = "0b00111101101100111110101100101100";
        ram[105] = "0b10111100110011011000000111111110";
        ram[106] = "0b00111101110011101001111011100100";
        ram[107] = "0b10111101100110011010001110111000";
        ram[108] = "0b00111101100000111010000001001110";
        ram[109] = "0b00111100100111101000101000101111";
        ram[110] = "0b10111101101010111001101010000011";
        ram[111] = "0b00111110000001010010000010001110";
        ram[112] = "0b10111110000001010100010101000001";
        ram[113] = "0b10111101101001001010001110000011";
        ram[114] = "0b00111101001101111011001000111001";
        ram[115] = "0b10111100011111110111011011011001";
        ram[116] = "0b00111011001111110010110011010001";
        ram[117] = "0b10111101101010000011101010010111";
        ram[118] = "0b00111101000111011001010111111000";
        ram[119] = "0b00111010101000001010001110100100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_10) {
meminst = new inference_conv2d_f3_0_2_10_ram("inference_conv2d_f3_0_2_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_10() {
    delete meminst;
}


};//endmodule
#endif
