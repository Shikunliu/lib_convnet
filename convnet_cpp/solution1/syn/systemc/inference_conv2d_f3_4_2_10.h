// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_10_H__
#define __inference_conv2d_f3_4_2_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_10_ram) {
        ram[0] = "0b10111101101110001001010010011100";
        ram[1] = "0b10111110000110001010011010011000";
        ram[2] = "0b00111101011111111100001101111111";
        ram[3] = "0b10111100010111100111001110111110";
        ram[4] = "0b10111100110000000000010010011101";
        ram[5] = "0b10111101100011111011101110111101";
        ram[6] = "0b00111100101101011101110000100101";
        ram[7] = "0b00111110000110111110000111101011";
        ram[8] = "0b10111101100010110000110111100110";
        ram[9] = "0b10111101111100010111000111100011";
        ram[10] = "0b00111101000100000110110001000100";
        ram[11] = "0b00111110001110101100100011100111";
        ram[12] = "0b00111101101010010100111100110100";
        ram[13] = "0b10111101101101001111110111011001";
        ram[14] = "0b10111100110011011010110001011011";
        ram[15] = "0b00111100100010001110011101100101";
        ram[16] = "0b00111101111110101011110110100001";
        ram[17] = "0b10111101011110000100111100110010";
        ram[18] = "0b10111101010101011100110111100010";
        ram[19] = "0b00111100010101100001101110010110";
        ram[20] = "0b10111101100000100101000100100001";
        ram[21] = "0b00111101100000000110101010111111";
        ram[22] = "0b00111100111000100011101101011110";
        ram[23] = "0b10111101110101011011101000101100";
        ram[24] = "0b10111001001111101101111000111011";
        ram[25] = "0b10111101101111010110000001111110";
        ram[26] = "0b00111101000100000100011101110110";
        ram[27] = "0b10111101111101110010110001010010";
        ram[28] = "0b10111100101100011101110110010011";
        ram[29] = "0b00111100111101100010100001000110";
        ram[30] = "0b00111101111001111001010111110110";
        ram[31] = "0b10111101011111101100101001000000";
        ram[32] = "0b10111011010100100011110100100100";
        ram[33] = "0b10111101111011111100111011111011";
        ram[34] = "0b00111101001111011010100100001110";
        ram[35] = "0b00111101010111010111100110101000";
        ram[36] = "0b10111101010001111001100101101100";
        ram[37] = "0b10111011101011001101111011110001";
        ram[38] = "0b00111110001010010110100010010100";
        ram[39] = "0b00111101101001001100100000101001";
        ram[40] = "0b10111101001000101000101101000101";
        ram[41] = "0b00111110001010101110111000100000";
        ram[42] = "0b10111101110110101111000001111100";
        ram[43] = "0b00111100000001100110101100001001";
        ram[44] = "0b10111100011001000000011010100101";
        ram[45] = "0b10111110000011101010110010000110";
        ram[46] = "0b00111101011011111111001010111100";
        ram[47] = "0b10111100111111000010111001001111";
        ram[48] = "0b10111010100001001110100000110010";
        ram[49] = "0b10111100100010100000010000110000";
        ram[50] = "0b10111110000010010000100111110010";
        ram[51] = "0b10111100110110011011111011101110";
        ram[52] = "0b10111101000100110001101100110000";
        ram[53] = "0b10111110000010110101010111101111";
        ram[54] = "0b10111100010001001111101011011100";
        ram[55] = "0b00111110000101010110100011101000";
        ram[56] = "0b00111101011100010001100010001100";
        ram[57] = "0b10111101101110010111111110011000";
        ram[58] = "0b00111101101111000010001110000010";
        ram[59] = "0b10111101100001000011000001100001";
        ram[60] = "0b00111101010100101111100010010110";
        ram[61] = "0b00111101011100101000110110111100";
        ram[62] = "0b00111101010111001000001010111000";
        ram[63] = "0b10111011111110101001100100100011";
        ram[64] = "0b10111100010000000000010110101010";
        ram[65] = "0b00111110001110000001001001111011";
        ram[66] = "0b00111100101110110110100001010110";
        ram[67] = "0b00111101110110010111001011001101";
        ram[68] = "0b10111110001000111111111000011001";
        ram[69] = "0b10111001011001110110010010111010";
        ram[70] = "0b10111110010000110100011111101001";
        ram[71] = "0b10111110000100100000011001000010";
        ram[72] = "0b10111110000010010110110010000011";
        ram[73] = "0b10111101010110000100111100110010";
        ram[74] = "0b00111101101101000010110010110101";
        ram[75] = "0b10111101111111010000111110100110";
        ram[76] = "0b10111101001001000111001000000101";
        ram[77] = "0b10111101100110011110011110111000";
        ram[78] = "0b10111101111110001000010101001101";
        ram[79] = "0b10111101110011000011111000110010";
        ram[80] = "0b10111101110000000100101111111000";
        ram[81] = "0b10111101010001101001101101011010";
        ram[82] = "0b00111101000011000001101111101000";
        ram[83] = "0b00111101101100101011011001000011";
        ram[84] = "0b00111101110101101100101101010011";
        ram[85] = "0b10111101000100110000011010001000";
        ram[86] = "0b00111100100111010110101011011111";
        ram[87] = "0b10111101100111110000000100001010";
        ram[88] = "0b10111101100111100001111000000110";
        ram[89] = "0b10111100000101001011101100111000";
        ram[90] = "0b10111101010010101100011001111101";
        ram[91] = "0b00111100101110001101100110011011";
        ram[92] = "0b00111100100111111100011101000110";
        ram[93] = "0b00111100110001100111100101100001";
        ram[94] = "0b00111100101110111001111001110001";
        ram[95] = "0b00111101101101010010101010000100";
        ram[96] = "0b00111101101000111011110010000011";
        ram[97] = "0b00111110001011101010011111001110";
        ram[98] = "0b10111100110100111001111000001101";
        ram[99] = "0b00111110010111100001110010011011";
        ram[100] = "0b10111101001101001111000111100101";
        ram[101] = "0b00111110000001101111100010101101";
        ram[102] = "0b00111101000100110110110101001011";
        ram[103] = "0b00111101110011000110000100001111";
        ram[104] = "0b00111110001101000101010101100101";
        ram[105] = "0b10111101111110000110100001110111";
        ram[106] = "0b10111101001010111010000111011010";
        ram[107] = "0b10111101000010100000010011101100";
        ram[108] = "0b00111100110010101101011110010101";
        ram[109] = "0b10111100100000111110010101101000";
        ram[110] = "0b00111110001100011011110101100010";
        ram[111] = "0b00111101010001001011011001100011";
        ram[112] = "0b10111101000101100010110100011000";
        ram[113] = "0b00111101110110111100110100110110";
        ram[114] = "0b10111100111010010001000010011011";
        ram[115] = "0b00111110000101010111111010101010";
        ram[116] = "0b00111101101011001111011011001100";
        ram[117] = "0b10111101111100001001111110100101";
        ram[118] = "0b00111101010010000010100001110011";
        ram[119] = "0b10111101010101010000011101100100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_10) {
meminst = new inference_conv2d_f3_4_2_10_ram("inference_conv2d_f3_4_2_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_10() {
    delete meminst;
}


};//endmodule
#endif
