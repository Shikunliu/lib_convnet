// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_9_H__
#define __inference_conv2d_f3_3_3_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_9_ram) {
        ram[0] = "0b10111110000011111001000100011101";
        ram[1] = "0b10111101010000110101111110000001";
        ram[2] = "0b10111101110010000010001011110010";
        ram[3] = "0b10111101100001100101110110110010";
        ram[4] = "0b10111110000110011111100001111111";
        ram[5] = "0b10111110000000000011000011000010";
        ram[6] = "0b00111011001100000100100010001000";
        ram[7] = "0b00111101111001100110111101010000";
        ram[8] = "0b00111101100000010000000000111000";
        ram[9] = "0b10111100110011111001100000100011";
        ram[10] = "0b10111110000111000000100011111010";
        ram[11] = "0b00111001101111000101001101000111";
        ram[12] = "0b10111110001110100100111111001010";
        ram[13] = "0b10111110000101111111101101101010";
        ram[14] = "0b10111101011010101010110011001100";
        ram[15] = "0b00111101101001101001111111011101";
        ram[16] = "0b10111101100100010111010001100111";
        ram[17] = "0b10111011100010100111011000111011";
        ram[18] = "0b10111101110001000111001111011011";
        ram[19] = "0b00111110000001100001010011100000";
        ram[20] = "0b00111101101100000010010111000000";
        ram[21] = "0b00111110011001110010100000100000";
        ram[22] = "0b10111110000111111001001110111100";
        ram[23] = "0b10111101100011101100011011001010";
        ram[24] = "0b00111101010101111110011101100010";
        ram[25] = "0b00111101011111101110000110100010";
        ram[26] = "0b10111110000000001110101000011000";
        ram[27] = "0b00111101100010011001011011101101";
        ram[28] = "0b00111101101110111001010010110001";
        ram[29] = "0b00111101001010010010101001001011";
        ram[30] = "0b00111100010001000011011111010011";
        ram[31] = "0b00111101000010001000101011101001";
        ram[32] = "0b10111101110111000100011011011000";
        ram[33] = "0b10111101110111110101001110000010";
        ram[34] = "0b00111110011001101100000010010100";
        ram[35] = "0b00111101110100000000000111010110";
        ram[36] = "0b00111110010101010001000000001010";
        ram[37] = "0b00111100010110000010011000110010";
        ram[38] = "0b10111110001110100001101000001101";
        ram[39] = "0b10111011000101000010101111110001";
        ram[40] = "0b00111100010000010001110010010101";
        ram[41] = "0b00111110001111101001100100100000";
        ram[42] = "0b10111101110110101110000101001000";
        ram[43] = "0b10111101001001111000001100110001";
        ram[44] = "0b10111101010111010110001000010001";
        ram[45] = "0b00111101111011011001010000001000";
        ram[46] = "0b00111100100111010000100100100101";
        ram[47] = "0b10111110000000001101010010011001";
        ram[48] = "0b00111110001010100010000001011000";
        ram[49] = "0b00111101011000001100111011000111";
        ram[50] = "0b00111101001001100011011001111011";
        ram[51] = "0b10111100101110110100001011001100";
        ram[52] = "0b10111101100000001100111100001011";
        ram[53] = "0b10111101001000010101100110000001";
        ram[54] = "0b00111101011001001110001000011101";
        ram[55] = "0b00111011001010100001011000111111";
        ram[56] = "0b10111110010101101001100110000101";
        ram[57] = "0b00111101111101100101100010000010";
        ram[58] = "0b10111100111000101011000100000101";
        ram[59] = "0b00111101101000101101110110001000";
        ram[60] = "0b10111110001010111110001001110001";
        ram[61] = "0b00111101100001001011101110100001";
        ram[62] = "0b00111101101100111100000111001110";
        ram[63] = "0b10111100111101101001001100111010";
        ram[64] = "0b10111110010111010000110000111101";
        ram[65] = "0b10111101100000111001111011111110";
        ram[66] = "0b10111101100110100000011000100001";
        ram[67] = "0b00111101100011110110001000110000";
        ram[68] = "0b10111101101001000100101010110011";
        ram[69] = "0b00111101100000111011001010011010";
        ram[70] = "0b00111110001100100001100010011100";
        ram[71] = "0b00111110000011101000000000111001";
        ram[72] = "0b00111101111100000001111100110010";
        ram[73] = "0b00111101100010111100101000010000";
        ram[74] = "0b10111101101010000011111010000101";
        ram[75] = "0b00111101100010011011100111011000";
        ram[76] = "0b10111100101101010100001110101111";
        ram[77] = "0b10111101101010001000000100001110";
        ram[78] = "0b10111110010110010001111011101011";
        ram[79] = "0b00111101001011101100000000000111";
        ram[80] = "0b10111110001110111011101001010110";
        ram[81] = "0b10111100000010100111100001011111";
        ram[82] = "0b10111100101010100001001010001110";
        ram[83] = "0b10111110001101011000111010101000";
        ram[84] = "0b00111110001000000011011011001010";
        ram[85] = "0b00111110001011011010111010000010";
        ram[86] = "0b10111110001100010100111000111100";
        ram[87] = "0b10111101011101101011010001110111";
        ram[88] = "0b00111100000011111010000011011101";
        ram[89] = "0b10111110001011011010110001101001";
        ram[90] = "0b00111011000000001101011110000001";
        ram[91] = "0b00111010001000100010100010101100";
        ram[92] = "0b00111110000110100101000010010100";
        ram[93] = "0b10111101110000100101001111011010";
        ram[94] = "0b00111101011111011110011111111000";
        ram[95] = "0b00111100011101101100100100100000";
        ram[96] = "0b00111100000000010100101001111000";
        ram[97] = "0b00111101010011111001000001100001";
        ram[98] = "0b00111100100101101100101001111101";
        ram[99] = "0b10111101101100010011101101011100";
        ram[100] = "0b10111101101100010010110010010011";
        ram[101] = "0b10111101111011100100101001111011";
        ram[102] = "0b00111101111100111101011001000001";
        ram[103] = "0b10111110000111110000001111010001";
        ram[104] = "0b00111101110000001001011111111110";
        ram[105] = "0b10111011100011010100000100000110";
        ram[106] = "0b00111101110001111001110110101011";
        ram[107] = "0b10111110000010011011000110111000";
        ram[108] = "0b10111101100110111011111101011110";
        ram[109] = "0b00111011101100011000110111010111";
        ram[110] = "0b10111101110001101110101110111010";
        ram[111] = "0b10111101111000000010010000101101";
        ram[112] = "0b00111110011110001101000101010010";
        ram[113] = "0b10111011010000011011111011111101";
        ram[114] = "0b10111101100010111011111001010010";
        ram[115] = "0b00111101110011111010110101101101";
        ram[116] = "0b10111110000010010011100010011011";
        ram[117] = "0b00111101101010001001101001111011";
        ram[118] = "0b00111101000001110100100010010100";
        ram[119] = "0b10111100000101010000101100001010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_9) {
meminst = new inference_conv2d_f3_3_3_9_ram("inference_conv2d_f3_3_3_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_9() {
    delete meminst;
}


};//endmodule
#endif
