// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_3_H__
#define __inference_conv2d_f3_1_2_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_3_ram) {
        ram[0] = "0b10111101010111110111101010111010";
        ram[1] = "0b00111100101110001011000111000011";
        ram[2] = "0b00111101010001110010110010110000";
        ram[3] = "0b00111110000101011111100111011111";
        ram[4] = "0b10111100010001000100000111100100";
        ram[5] = "0b00111101011000101100011000011000";
        ram[6] = "0b00111101001111011101010011100010";
        ram[7] = "0b10111101011001111010100101110111";
        ram[8] = "0b00111101100011000010110100001101";
        ram[9] = "0b00111110001110110110010010011101";
        ram[10] = "0b00111110000011111100100010110000";
        ram[11] = "0b10111110001000001111100111010011";
        ram[12] = "0b00111101111101000100111101011101";
        ram[13] = "0b00111100100010000111110101111101";
        ram[14] = "0b00111110001101011111001111011000";
        ram[15] = "0b10111100001000010011111101110110";
        ram[16] = "0b10111101110100001001010010100011";
        ram[17] = "0b10111101110101001111101111011011";
        ram[18] = "0b00111101010111010101010111001100";
        ram[19] = "0b00111110000001111100011000110010";
        ram[20] = "0b10111101001110011001101011011100";
        ram[21] = "0b10111010101001010001110011011011";
        ram[22] = "0b10111101000110101000010110100010";
        ram[23] = "0b10111101100011110001101110111010";
        ram[24] = "0b10111101100110000010001100100111";
        ram[25] = "0b00111100010011010010100111101010";
        ram[26] = "0b00111101001000011011011101000000";
        ram[27] = "0b00111101101101100010111101110100";
        ram[28] = "0b10111100100101011100100110010110";
        ram[29] = "0b10111101101011011110010111010010";
        ram[30] = "0b10111101000100000100011001101001";
        ram[31] = "0b10111101011010111110110100111110";
        ram[32] = "0b00111101110010010101001100100011";
        ram[33] = "0b00111101000101010000100011011011";
        ram[34] = "0b00111101000011111111110001100010";
        ram[35] = "0b10111101011110011100000101110010";
        ram[36] = "0b00111100101001011010100000110000";
        ram[37] = "0b00111101101110001110001111100010";
        ram[38] = "0b00111101100110000000001001100011";
        ram[39] = "0b00111010100010010011000100010111";
        ram[40] = "0b10111100111110001110101101101110";
        ram[41] = "0b10111110001101010100011000001011";
        ram[42] = "0b10111101011011011101110111110100";
        ram[43] = "0b00111110000000100111011110000001";
        ram[44] = "0b00111100100111010001101100101110";
        ram[45] = "0b10111110010111100110111111111000";
        ram[46] = "0b10111100001101100101011101000000";
        ram[47] = "0b00111101010111100001111000101110";
        ram[48] = "0b10111011000011100001101100001011";
        ram[49] = "0b10111101010001100000110011011010";
        ram[50] = "0b00111110010100101011110011111001";
        ram[51] = "0b00111101001010001111101101101100";
        ram[52] = "0b00111101101111000010010110000000";
        ram[53] = "0b00111101100100011111101101001101";
        ram[54] = "0b00111101101011111110001011001100";
        ram[55] = "0b00111101000001011010000110110000";
        ram[56] = "0b00111101110010100010011001101100";
        ram[57] = "0b00111101000100101100000110100100";
        ram[58] = "0b10111101101111100010000100011110";
        ram[59] = "0b00111100101101110100011010001000";
        ram[60] = "0b00111110001111011011001001110000";
        ram[61] = "0b00111110010100011000011011011011";
        ram[62] = "0b00111011110101100111000100010000";
        ram[63] = "0b10111110000000111110100110100111";
        ram[64] = "0b00111101000010011110110011001110";
        ram[65] = "0b10111101011001010110110101111000";
        ram[66] = "0b10111100101001101001110111000100";
        ram[67] = "0b00111101100010110000000000110111";
        ram[68] = "0b10111101110100000010000000111110";
        ram[69] = "0b00111011101111101011001000101101";
        ram[70] = "0b10111101110110010111110101001010";
        ram[71] = "0b00111110000100100010100100100000";
        ram[72] = "0b00111100011000001111010000110111";
        ram[73] = "0b10111101011101011110001111001101";
        ram[74] = "0b00111101110000110101010110011000";
        ram[75] = "0b00111101111110111010101010011011";
        ram[76] = "0b00111101001000110101111001110100";
        ram[77] = "0b10111100010100011000011000000101";
        ram[78] = "0b00111101010001000000001001110011";
        ram[79] = "0b10111110001000110101011111100110";
        ram[80] = "0b10111100001100011000101110010011";
        ram[81] = "0b10111101010001100100101100111110";
        ram[82] = "0b00111110000010011111110011110100";
        ram[83] = "0b00111101011001101100101100010000";
        ram[84] = "0b10111101101101001110000000011111";
        ram[85] = "0b10111101011000101101101110110010";
        ram[86] = "0b00111101000000001111001101000101";
        ram[87] = "0b00111101011000011011011011010100";
        ram[88] = "0b10111101110010001001110010100010";
        ram[89] = "0b10111110000001010001010001111111";
        ram[90] = "0b00111101000001011101011010100100";
        ram[91] = "0b00111101100001110000101110000000";
        ram[92] = "0b00111110001001100011000001100110";
        ram[93] = "0b00111110000000101001101011100101";
        ram[94] = "0b10111101001000101100110100011111";
        ram[95] = "0b00111101011011110011110110001011";
        ram[96] = "0b00111100110111111111011101001100";
        ram[97] = "0b10111101010100101110001110011101";
        ram[98] = "0b10111101111100000000101101000110";
        ram[99] = "0b10111101100000000000011010001110";
        ram[100] = "0b10111101011011111011101010100011";
        ram[101] = "0b10111101001001010101000011011000";
        ram[102] = "0b10111110001101101100110100101001";
        ram[103] = "0b10111101010010110001110000101000";
        ram[104] = "0b00111101000111110001110010010000";
        ram[105] = "0b00111101011111111011011000101110";
        ram[106] = "0b00111110001111111110001011100111";
        ram[107] = "0b10111101011100100000010101010001";
        ram[108] = "0b10111101000100101101111111010111";
        ram[109] = "0b00111101100100110100101101000100";
        ram[110] = "0b10111100100101110100000001011001";
        ram[111] = "0b00111101110000000110001000110011";
        ram[112] = "0b10111011111010000100010010100010";
        ram[113] = "0b00111100111110010111010101101101";
        ram[114] = "0b10111101101010010101110100011001";
        ram[115] = "0b10111100010011001110100011100111";
        ram[116] = "0b00111101101010110110010010011101";
        ram[117] = "0b00111110000001011010000001111011";
        ram[118] = "0b10111100011000101011101000001001";
        ram[119] = "0b00111011111110110110111000001010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_3) {
meminst = new inference_conv2d_f3_1_2_3_ram("inference_conv2d_f3_1_2_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_3() {
    delete meminst;
}


};//endmodule
#endif
