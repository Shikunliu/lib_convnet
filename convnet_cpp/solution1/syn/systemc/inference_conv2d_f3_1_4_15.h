// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_15_H__
#define __inference_conv2d_f3_1_4_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_15_ram) {
        ram[0] = "0b10111110000100101011101010011101";
        ram[1] = "0b00111100010110100111111110101000";
        ram[2] = "0b00111100110110100000100110010111";
        ram[3] = "0b00111101001111011000000011111111";
        ram[4] = "0b10111100011100101111011111011010";
        ram[5] = "0b10111101110001111110010110101000";
        ram[6] = "0b10111110001001000000100000010000";
        ram[7] = "0b10111101101100011011110100101100";
        ram[8] = "0b00111101111000110100111010111010";
        ram[9] = "0b00111101010010000010001110000101";
        ram[10] = "0b10111101010100100101100110111010";
        ram[11] = "0b10111110001001101011001101111000";
        ram[12] = "0b10111101111010010111100001001111";
        ram[13] = "0b10111101111111011001011001100100";
        ram[14] = "0b00111101011000100101010101100000";
        ram[15] = "0b00111101111000000110110000000001";
        ram[16] = "0b00111110000101100010010100100000";
        ram[17] = "0b00111101000111011000011010001110";
        ram[18] = "0b00111100011011011101001101000010";
        ram[19] = "0b00111101111000111111101010110001";
        ram[20] = "0b10111101110001000111001010011001";
        ram[21] = "0b10111100100010000100000010101100";
        ram[22] = "0b00111101101011000011110110010001";
        ram[23] = "0b00111100110101100101011010111001";
        ram[24] = "0b00111101111100000101000001111010";
        ram[25] = "0b00111110000101110111011111010001";
        ram[26] = "0b00111101111000110111010001111001";
        ram[27] = "0b10111101101111100101110111000111";
        ram[28] = "0b00111101100001101101011101100010";
        ram[29] = "0b10111101111111010010000101111001";
        ram[30] = "0b10111101110000110001000000100000";
        ram[31] = "0b00111110001000111000011000001010";
        ram[32] = "0b00111101101011111000001010110010";
        ram[33] = "0b00111101111010011000001101010001";
        ram[34] = "0b00111101110101010100000000000011";
        ram[35] = "0b10111101100000100101011010111101";
        ram[36] = "0b10111101000111100101011110001001";
        ram[37] = "0b10111101011111000011101011111111";
        ram[38] = "0b00111101100011100100010001001100";
        ram[39] = "0b10111101101111101111111000011010";
        ram[40] = "0b00111110000010000111100001110101";
        ram[41] = "0b00111110000000010111010101001011";
        ram[42] = "0b10111110000010111011010011010101";
        ram[43] = "0b00111100101111001011101001100110";
        ram[44] = "0b00111101101111010001101001100101";
        ram[45] = "0b00111100101100010101010011010111";
        ram[46] = "0b00111110001101000010111111101000";
        ram[47] = "0b00111101010001111110100011001101";
        ram[48] = "0b10111101101100000000001000110100";
        ram[49] = "0b10111101110010011010100111000000";
        ram[50] = "0b00111101001101011010100110011011";
        ram[51] = "0b10111101000011011010010100000100";
        ram[52] = "0b00111100011000010111101011011010";
        ram[53] = "0b00111101110011101100101111111011";
        ram[54] = "0b00111101000001110000100010111000";
        ram[55] = "0b00111101010111000110100111000011";
        ram[56] = "0b10111100001000000100010100101111";
        ram[57] = "0b10111101110001011110100011111110";
        ram[58] = "0b10111100111101011000100011100011";
        ram[59] = "0b00111101001101100011101111111100";
        ram[60] = "0b00111101111110011010100001001000";
        ram[61] = "0b10111100111101011010101000111100";
        ram[62] = "0b10111110001010000111111001111100";
        ram[63] = "0b00111101110110100001011111110100";
        ram[64] = "0b10111101011011000010010000110000";
        ram[65] = "0b00111101010111101110000001111011";
        ram[66] = "0b10111101100100000100001001000101";
        ram[67] = "0b00111101001100110001100001110110";
        ram[68] = "0b00111101101010100001010000111011";
        ram[69] = "0b00111101101011001101101101010011";
        ram[70] = "0b10111100111111111010110010111110";
        ram[71] = "0b10111101100001001010111011111111";
        ram[72] = "0b00111101111100011110111000100100";
        ram[73] = "0b10111101110111011100111110001001";
        ram[74] = "0b10111101100110000001101010000001";
        ram[75] = "0b10111101010011001100100110100111";
        ram[76] = "0b00111101001000101010001000000110";
        ram[77] = "0b10111101010111000111000100110101";
        ram[78] = "0b10111101101111111001001000000001";
        ram[79] = "0b10111110001000001100111101011011";
        ram[80] = "0b00111101100110000101001101001000";
        ram[81] = "0b10111101001110110001110111111110";
        ram[82] = "0b00111110001100010001000101101011";
        ram[83] = "0b10111101001011011010011000010001";
        ram[84] = "0b10111110000100000101001010010011";
        ram[85] = "0b00111100100111010010011001001100";
        ram[86] = "0b10111101110101110111111110101110";
        ram[87] = "0b00111101111000001001100100011000";
        ram[88] = "0b10111101100100000100111101010011";
        ram[89] = "0b00111101110000100011010110001101";
        ram[90] = "0b10111110001010011100110111000100";
        ram[91] = "0b00111101011010011101100010010001";
        ram[92] = "0b00111101000111110100100010000000";
        ram[93] = "0b10111110000110000001010001010001";
        ram[94] = "0b10111110000101110111011111010001";
        ram[95] = "0b00111101001111010010001000011010";
        ram[96] = "0b00111101100110011010110110000110";
        ram[97] = "0b10111100100000101001010001100101";
        ram[98] = "0b00111101110111100100110011010111";
        ram[99] = "0b00111101100000011001011001000101";
        ram[100] = "0b10111101010001110111100011101011";
        ram[101] = "0b00111101010000000000111001000011";
        ram[102] = "0b10111100011001100101100101100110";
        ram[103] = "0b00111100110011010010000101010001";
        ram[104] = "0b10111101110101001100010111011010";
        ram[105] = "0b00111101110010110010010011011100";
        ram[106] = "0b10111101110110101100111111111010";
        ram[107] = "0b10111100111000000111101010010100";
        ram[108] = "0b00111101110000111001110111111111";
        ram[109] = "0b10111101101010110010000011000101";
        ram[110] = "0b00111100101100010100101010010000";
        ram[111] = "0b00111100101000000001000110111001";
        ram[112] = "0b10111110000100000100101011111001";
        ram[113] = "0b00111100010010001011001111001110";
        ram[114] = "0b10111101000101101111111001111111";
        ram[115] = "0b00111101101111110100010001101001";
        ram[116] = "0b10111101000110010101100000101011";
        ram[117] = "0b00111101010010001000111111010111";
        ram[118] = "0b10111100111111111000110110110101";
        ram[119] = "0b10111100111001011101101011110000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_15) {
meminst = new inference_conv2d_f3_1_4_15_ram("inference_conv2d_f3_1_4_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_15() {
    delete meminst;
}


};//endmodule
#endif
