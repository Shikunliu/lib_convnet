// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_67_H__
#define __inference_mult_1_120_120_84_s_W4_67_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_67_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_67_ram) {
        ram[0] = "0b10111110000111110110100110001000";
        ram[1] = "0b10111101110011000010011011101010";
        ram[2] = "0b10111100101110000000101100111111";
        ram[3] = "0b00111100001100000001110010010011";
        ram[4] = "0b00111100000110000100101101100110";
        ram[5] = "0b00111101000000001000100001010001";
        ram[6] = "0b10111011110110001101010111110000";
        ram[7] = "0b00111100011000000000111110100000";
        ram[8] = "0b00111100100000101001111100010111";
        ram[9] = "0b00111100011001000000101101000010";
        ram[10] = "0b00111101011011100001011001011110";
        ram[11] = "0b00111110001110001111011110011000";
        ram[12] = "0b10111110010101111011010001011111";
        ram[13] = "0b00111101100000110000110101100110";
        ram[14] = "0b10111100100101110111011110000000";
        ram[15] = "0b10111101101111001110000110000010";
        ram[16] = "0b00111100100000000001100010001001";
        ram[17] = "0b10111101100100110011101100000011";
        ram[18] = "0b10111100110001101110110101011010";
        ram[19] = "0b10111110001110111001010110100011";
        ram[20] = "0b00111110001001110010010011111011";
        ram[21] = "0b10111101110100110111001110110000";
        ram[22] = "0b10111101001011000001001011001000";
        ram[23] = "0b10111101111010011100100010000110";
        ram[24] = "0b10111101101001101101010111000010";
        ram[25] = "0b10111100000101011110010010101110";
        ram[26] = "0b10111101011100111100001110110010";
        ram[27] = "0b00111101101111110111100110010011";
        ram[28] = "0b00111101101001011101100110000110";
        ram[29] = "0b10111110000010000110111111001110";
        ram[30] = "0b00111101010110011001001110100000";
        ram[31] = "0b00111110001100010011010100010001";
        ram[32] = "0b10111101000100000011001010011000";
        ram[33] = "0b10111110011111100110110101011001";
        ram[34] = "0b00111101100010000000000110100111";
        ram[35] = "0b10111100100010000001100111100000";
        ram[36] = "0b10111100110010100110110101110111";
        ram[37] = "0b00111110000001011001100010011110";
        ram[38] = "0b10111110000001110001100100101111";
        ram[39] = "0b00111101000110000110001100111001";
        ram[40] = "0b00111110000111000111110001010010";
        ram[41] = "0b00111101110001111100111000101011";
        ram[42] = "0b10111101000110111101011010001011";
        ram[43] = "0b10111011101100010011001001101000";
        ram[44] = "0b00111110000011001101011011000011";
        ram[45] = "0b00111101100111010010101110010111";
        ram[46] = "0b00111110000011010010010001011011";
        ram[47] = "0b00111110000110000110111001111110";
        ram[48] = "0b10111110000101000110100100001110";
        ram[49] = "0b10111101101100010001010100001001";
        ram[50] = "0b00111110001000111010100111110100";
        ram[51] = "0b00111100111111101011000001110101";
        ram[52] = "0b00111100011100110011110101111010";
        ram[53] = "0b00111101011111010111001000110110";
        ram[54] = "0b10111101010001101101111110111000";
        ram[55] = "0b10111101111110011000011111000110";
        ram[56] = "0b10111101110111011000111100001100";
        ram[57] = "0b00111010010101100001101001101101";
        ram[58] = "0b00111110000011101000001111100100";
        ram[59] = "0b00111100001101000101011111110110";
        ram[60] = "0b00111110000011011001101000001111";
        ram[61] = "0b10111101100011111010010000011000";
        ram[62] = "0b00111011101111100010000110111001";
        ram[63] = "0b10111100111111010111011111000101";
        ram[64] = "0b00111101101010010011100101010111";
        ram[65] = "0b00111100001010001100100101001101";
        ram[66] = "0b10111101100001000000001111111001";
        ram[67] = "0b00111100111110000011001110000011";
        ram[68] = "0b00111110000000101010110100111111";
        ram[69] = "0b10111101110010100010011100000000";
        ram[70] = "0b10111101001000011100010011000110";
        ram[71] = "0b00111101111111001100010100110011";
        ram[72] = "0b00111101010111101011010000100000";
        ram[73] = "0b10111101101111001000000000110100";
        ram[74] = "0b10111010100101011001100101011010";
        ram[75] = "0b00111101001010000111001010010101";
        ram[76] = "0b00111101101010100011110011011101";
        ram[77] = "0b00111011101110100011001010010110";
        ram[78] = "0b10111011001001110000100011101110";
        ram[79] = "0b00111101001110010000010100111010";
        ram[80] = "0b00111011001111011011011110000110";
        ram[81] = "0b10111101111010011011000011101110";
        ram[82] = "0b00111110000100011111111001100101";
        ram[83] = "0b10111110000111111011101110010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_67) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_67_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_67) {
meminst = new inference_mult_1_120_120_84_s_W4_67_ram("inference_mult_1_120_120_84_s_W4_67_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_67() {
    delete meminst;
}


};//endmodule
#endif
