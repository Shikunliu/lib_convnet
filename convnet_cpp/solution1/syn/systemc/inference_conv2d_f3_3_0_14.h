// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_14_H__
#define __inference_conv2d_f3_3_0_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_14_ram) {
        ram[0] = "0b10111101100000111100010100001111";
        ram[1] = "0b10111101000010110111001101001011";
        ram[2] = "0b00111110010101101001111110001100";
        ram[3] = "0b00111101100101010001011101101111";
        ram[4] = "0b00111101111101010101101000111010";
        ram[5] = "0b00111101101000000000100100101101";
        ram[6] = "0b10111101100110100001011010100101";
        ram[7] = "0b00111101100000010100000111101010";
        ram[8] = "0b00111011101111001101111000101101";
        ram[9] = "0b10111100111011111100100101010001";
        ram[10] = "0b00111110001011111100001100101111";
        ram[11] = "0b00111100010101101111101010111001";
        ram[12] = "0b10111100110000111010011111110101";
        ram[13] = "0b10111101100011000010010010000001";
        ram[14] = "0b10111101011101110000111000011111";
        ram[15] = "0b00111101010111101100111111101010";
        ram[16] = "0b10111100010100110111110011101010";
        ram[17] = "0b00111101001110101100111100111111";
        ram[18] = "0b00111101011001000011110010100110";
        ram[19] = "0b10111101111011101111111101011100";
        ram[20] = "0b00111110000100101010000001100110";
        ram[21] = "0b10111100110011110001000111101100";
        ram[22] = "0b10111101111011000111100111110110";
        ram[23] = "0b10111101010001100101010011100100";
        ram[24] = "0b10111100000001011000010001111001";
        ram[25] = "0b00111100101110010010101011111010";
        ram[26] = "0b00111100111011011000011111000011";
        ram[27] = "0b10111101110011101001111001011110";
        ram[28] = "0b10111010010100110101101010000110";
        ram[29] = "0b00111110000110000110110101110010";
        ram[30] = "0b00111010111010000101011110011000";
        ram[31] = "0b00111011101111001000010100101100";
        ram[32] = "0b00111011101111001000010101101100";
        ram[33] = "0b10111110000100010100100111000111";
        ram[34] = "0b00111100101011110111101100011000";
        ram[35] = "0b10111101100011001100001000011011";
        ram[36] = "0b10111011110111001010110111000000";
        ram[37] = "0b10111100000001101011000001111110";
        ram[38] = "0b10111101001010010011110001010100";
        ram[39] = "0b00111100011100111111001111101110";
        ram[40] = "0b10111101100111110111011110010101";
        ram[41] = "0b00111100001011110111001010110100";
        ram[42] = "0b10111011110011000010101101111101";
        ram[43] = "0b00111101011011011011101001001101";
        ram[44] = "0b00111101110010001111010000001000";
        ram[45] = "0b10111101100011000000001100011011";
        ram[46] = "0b10111100110111101101100110101010";
        ram[47] = "0b00111101001011000011010000000110";
        ram[48] = "0b10111101011000010000110011110110";
        ram[49] = "0b10111100100100010111111001111000";
        ram[50] = "0b00111100111110001100000010100110";
        ram[51] = "0b10111101110001101100101000011111";
        ram[52] = "0b10111101100011011001111100001010";
        ram[53] = "0b10111100111101000001101001001110";
        ram[54] = "0b00111101101001110101011111010110";
        ram[55] = "0b10111101011101101111001101100010";
        ram[56] = "0b00111101111110111101111100001001";
        ram[57] = "0b00111101001111100011101011101001";
        ram[58] = "0b10111101010101111100010101101001";
        ram[59] = "0b00111100011110110010000000110010";
        ram[60] = "0b10111101110010111100111011010110";
        ram[61] = "0b10111101001000110110010010100100";
        ram[62] = "0b00111011101110111001110000001101";
        ram[63] = "0b10111101111110101110101100111110";
        ram[64] = "0b00111010101110100110100011000111";
        ram[65] = "0b10111110001000011000000110011101";
        ram[66] = "0b00111110000011100111111100101100";
        ram[67] = "0b10111100001000100001110101100001";
        ram[68] = "0b10111101110010101000001101010100";
        ram[69] = "0b10111101101100011000101111010110";
        ram[70] = "0b00111101111001100000111011011000";
        ram[71] = "0b00111101111100000001011011001110";
        ram[72] = "0b00111101100110110010001010110110";
        ram[73] = "0b00111110001001011011000110000101";
        ram[74] = "0b00111110011000111100110001001011";
        ram[75] = "0b00111101100110011100100111010110";
        ram[76] = "0b10111100110101010000011001010111";
        ram[77] = "0b10111101001011011011011101011110";
        ram[78] = "0b00111110001001111000100000010010";
        ram[79] = "0b10111101100001110010100101100010";
        ram[80] = "0b00111101101100011110111001100111";
        ram[81] = "0b00111101111001000101100000000100";
        ram[82] = "0b10111110001110111011110001101111";
        ram[83] = "0b10111101111100111000110111100111";
        ram[84] = "0b10111101110110011110010100011001";
        ram[85] = "0b00111110000011001011010110111011";
        ram[86] = "0b10111110000100110110001011101001";
        ram[87] = "0b00111100110101011001111101101111";
        ram[88] = "0b00111101010110010111100001110111";
        ram[89] = "0b00111010111000010111010111111100";
        ram[90] = "0b10111100101111010100111001110101";
        ram[91] = "0b10111101011101101101100111001100";
        ram[92] = "0b10111110000011011100001001101110";
        ram[93] = "0b00111101000010010111001000111010";
        ram[94] = "0b10111100101101001011110101000001";
        ram[95] = "0b10111101110001110010000101011100";
        ram[96] = "0b00111100101100101111010110001011";
        ram[97] = "0b00111101010000111100110110011010";
        ram[98] = "0b00111100100011011010011010110010";
        ram[99] = "0b10111101011010000110011101000010";
        ram[100] = "0b00111110000001010001001000100011";
        ram[101] = "0b00111100100001001111011110000001";
        ram[102] = "0b00111110000100110011010111010010";
        ram[103] = "0b00111100011001001101111010100111";
        ram[104] = "0b10111001111000000100110000010111";
        ram[105] = "0b10111011100011110000111111111110";
        ram[106] = "0b00111100001010100010110011111010";
        ram[107] = "0b00111101111110001111101111001010";
        ram[108] = "0b10111101100100110111010010101111";
        ram[109] = "0b10111101111101000111110011111010";
        ram[110] = "0b10111101110111101011010000100000";
        ram[111] = "0b00111101000010110110010101011001";
        ram[112] = "0b00111101111001110100100111110001";
        ram[113] = "0b10111101101101100010001000100011";
        ram[114] = "0b10111100000110110010100101100111";
        ram[115] = "0b00111110000001100000110000111001";
        ram[116] = "0b10111101110000111111101111001011";
        ram[117] = "0b00111101000000001100100101101110";
        ram[118] = "0b00111101011011110010000111110111";
        ram[119] = "0b10111101011010010011000100110111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_14) {
meminst = new inference_conv2d_f3_3_0_14_ram("inference_conv2d_f3_3_0_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_14() {
    delete meminst;
}


};//endmodule
#endif
