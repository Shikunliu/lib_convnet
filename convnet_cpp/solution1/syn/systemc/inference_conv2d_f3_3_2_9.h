// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_9_H__
#define __inference_conv2d_f3_3_2_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_9_ram) {
        ram[0] = "0b10111101100001000010111011011100";
        ram[1] = "0b00111101101000010110100001100101";
        ram[2] = "0b00111011110111000111001110001001";
        ram[3] = "0b10111100000101101111010001100011";
        ram[4] = "0b10111101010100001010010100011001";
        ram[5] = "0b00111101010110101111000100111000";
        ram[6] = "0b10111110000000111111110010000111";
        ram[7] = "0b00111101101110110110101001100010";
        ram[8] = "0b10111101110100100111011110000001";
        ram[9] = "0b00111100011100110100110101101010";
        ram[10] = "0b10111110000010110011001101010101";
        ram[11] = "0b10111101101001110010011010011011";
        ram[12] = "0b10111101111000001100011000101110";
        ram[13] = "0b10111110000011011111001000100100";
        ram[14] = "0b10111011011000100000000010010001";
        ram[15] = "0b10111100110010110010111010011101";
        ram[16] = "0b00111110010001011010010010101101";
        ram[17] = "0b10111100100111001000101100011011";
        ram[18] = "0b10111011101010011100101110010110";
        ram[19] = "0b00111101011000001000001100010010";
        ram[20] = "0b00111101011101111000110010010100";
        ram[21] = "0b00111101100110011101010000110111";
        ram[22] = "0b10111101100100011001001010110101";
        ram[23] = "0b00111100010001010101101000010010";
        ram[24] = "0b10111101000000000001101100101000";
        ram[25] = "0b00111010110001000001010101101110";
        ram[26] = "0b10111110000101011010001111100100";
        ram[27] = "0b10111101010111010100111110110111";
        ram[28] = "0b00111100111000010010001100110001";
        ram[29] = "0b00111110000101110100001001010111";
        ram[30] = "0b00111101010111001000010100000110";
        ram[31] = "0b10111100010010100010001110100101";
        ram[32] = "0b10111101101111100010101101110010";
        ram[33] = "0b00111101100010000100100000000011";
        ram[34] = "0b10111101101000101000100001110000";
        ram[35] = "0b10111100011010101011101111001011";
        ram[36] = "0b00111101010000000101010010000100";
        ram[37] = "0b00111101011000101110111001000010";
        ram[38] = "0b10111100100110000111110111011011";
        ram[39] = "0b00111100000101100011001111110100";
        ram[40] = "0b00111110001011101010111100100101";
        ram[41] = "0b00111110011110011101101110101001";
        ram[42] = "0b10111101111000001010111000010000";
        ram[43] = "0b10111110010010100100111001111011";
        ram[44] = "0b00111101011100110011011000001000";
        ram[45] = "0b00111100101111110110001011101100";
        ram[46] = "0b10111110000000101101010001001110";
        ram[47] = "0b00111101100111001010100101101001";
        ram[48] = "0b10111100010011111010010111000101";
        ram[49] = "0b00111100111011111101101110010000";
        ram[50] = "0b10111101101111110111101110010001";
        ram[51] = "0b00111110000111100100000101001110";
        ram[52] = "0b00111100101101010101011111010001";
        ram[53] = "0b00111110001100001011011111000011";
        ram[54] = "0b10111101110011101111101000011110";
        ram[55] = "0b10111101101011110101111000011010";
        ram[56] = "0b00111101011001101111100110000100";
        ram[57] = "0b00111101110001100110001011100011";
        ram[58] = "0b00111100001001110001110000111001";
        ram[59] = "0b10111110000100110001000010011001";
        ram[60] = "0b00111100010100100111110010100101";
        ram[61] = "0b10111101000000100101111000101111";
        ram[62] = "0b00111101000001110111101100111001";
        ram[63] = "0b00111101000010011100100011110001";
        ram[64] = "0b00111101101100010010000000001011";
        ram[65] = "0b00111101101110001001000010000101";
        ram[66] = "0b00111101101001000110100111110010";
        ram[67] = "0b00111101110100000010000000111110";
        ram[68] = "0b10111110001100010111001101110101";
        ram[69] = "0b00111101010011111011100111001100";
        ram[70] = "0b10111101101110101110011011010110";
        ram[71] = "0b10111100011110010010010010101111";
        ram[72] = "0b10111101100011111100011110001001";
        ram[73] = "0b10111110001110110011101110111000";
        ram[74] = "0b00111100110110100001110010101100";
        ram[75] = "0b00111110010110010110111111101011";
        ram[76] = "0b00111100010111000011110010101100";
        ram[77] = "0b00111100110111000011110100011000";
        ram[78] = "0b00111110001100111111001100010111";
        ram[79] = "0b10111100110110100000111110101011";
        ram[80] = "0b10111101000110001011000000010101";
        ram[81] = "0b00111110000001000100111110100000";
        ram[82] = "0b10111101101010001010000011010011";
        ram[83] = "0b10111101011011100111000010100110";
        ram[84] = "0b00111101001100001000110000100100";
        ram[85] = "0b10111100011110100100000100001111";
        ram[86] = "0b00111101101011000001011010001111";
        ram[87] = "0b10111101100101101001011111100101";
        ram[88] = "0b10111101101011001011110100010010";
        ram[89] = "0b00111101101011110000011011011100";
        ram[90] = "0b00111100100010011100011000011101";
        ram[91] = "0b10111101100000001010000001111100";
        ram[92] = "0b00110110011001001010000001100001";
        ram[93] = "0b10111110001000001000111000010101";
        ram[94] = "0b10111101010110101101011011100110";
        ram[95] = "0b10111101010000101100110001111110";
        ram[96] = "0b00111011011111010000010001001101";
        ram[97] = "0b10111110000000010011110110111000";
        ram[98] = "0b10111101110101000110101110101101";
        ram[99] = "0b10111101100001101010100010000011";
        ram[100] = "0b00111110000010010101111110101011";
        ram[101] = "0b10111100100001110001100000100010";
        ram[102] = "0b00111101010110110011100111001000";
        ram[103] = "0b00111110000100010011010110011000";
        ram[104] = "0b00111101100000110111101100101111";
        ram[105] = "0b00111101101000101000101000010001";
        ram[106] = "0b10111101000010001000001001010000";
        ram[107] = "0b00111100100011001110000101011010";
        ram[108] = "0b00111101011111110000111001101000";
        ram[109] = "0b10111101010001000011000111011001";
        ram[110] = "0b00111101101011001111100110000110";
        ram[111] = "0b10111101110101010011010100000001";
        ram[112] = "0b00111101100110010100110101000011";
        ram[113] = "0b10111100111111100110011110101111";
        ram[114] = "0b10111101111111010101011101111001";
        ram[115] = "0b00111101100010011101100010111001";
        ram[116] = "0b10111010011110101000110001110000";
        ram[117] = "0b00111100010111100111110011111000";
        ram[118] = "0b10111101001101101011100000001000";
        ram[119] = "0b00111101111111110110101110100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_9) {
meminst = new inference_conv2d_f3_3_2_9_ram("inference_conv2d_f3_3_2_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_9() {
    delete meminst;
}


};//endmodule
#endif
