// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_2_H__
#define __inference_conv2d_f3_0_3_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_2_ram) {
        ram[0] = "0b10111101001000011101000001001111";
        ram[1] = "0b10111101111111110010100010000101";
        ram[2] = "0b00111101110101111001000001110101";
        ram[3] = "0b00111101110101110010000101001111";
        ram[4] = "0b10111101011110001000010110000011";
        ram[5] = "0b00111101010001001111110010001001";
        ram[6] = "0b10111101001011011100010001011110";
        ram[7] = "0b10111110000101110000101011000100";
        ram[8] = "0b00111101010100000000110111100101";
        ram[9] = "0b10111101000110101011111110111010";
        ram[10] = "0b10111101101001101001100010101110";
        ram[11] = "0b00111110000011100000110111101101";
        ram[12] = "0b00111100101100101111010001001001";
        ram[13] = "0b10111101100011110111100000001101";
        ram[14] = "0b10111101000011000101110000101111";
        ram[15] = "0b00111101100101001000100100010111";
        ram[16] = "0b00111101100001110011101010100010";
        ram[17] = "0b10111101000010010101000011000111";
        ram[18] = "0b00111110001011101011011100000010";
        ram[19] = "0b00111100101110011010010111011110";
        ram[20] = "0b00111101010100100111001100110101";
        ram[21] = "0b00111101010100111010000011111100";
        ram[22] = "0b10111100100000100110011101001110";
        ram[23] = "0b10111101111110110010000000110010";
        ram[24] = "0b10111101111110101001000100010000";
        ram[25] = "0b10111110010101011101000010110111";
        ram[26] = "0b00111101110111101100011100000000";
        ram[27] = "0b00111101000111100101101100110101";
        ram[28] = "0b10111011101011010011000000111010";
        ram[29] = "0b10111101011011010100110011110000";
        ram[30] = "0b00111101110110000000010111100110";
        ram[31] = "0b10111011101010000111111100111011";
        ram[32] = "0b00111110000100100100111011011111";
        ram[33] = "0b10111100111100100100100010111101";
        ram[34] = "0b00111101101111110100111010111101";
        ram[35] = "0b10111101000100101111100011001011";
        ram[36] = "0b00111101010100010000101001100100";
        ram[37] = "0b00111101101001001101011111111110";
        ram[38] = "0b10111110001011001001001010011011";
        ram[39] = "0b00111100101001010110110001101011";
        ram[40] = "0b10111110001001100010011010110011";
        ram[41] = "0b10111101111101100001101010100100";
        ram[42] = "0b00111011001101111011100100010100";
        ram[43] = "0b00111110010001101000011001100010";
        ram[44] = "0b10111100111000001111000001110000";
        ram[45] = "0b00111101100110101111000100011101";
        ram[46] = "0b00111100001100101000011100111100";
        ram[47] = "0b00111101000001111001101011111111";
        ram[48] = "0b00111110001001001010111100001100";
        ram[49] = "0b00111100000010100100000110000010";
        ram[50] = "0b10111110001000110100010011000011";
        ram[51] = "0b10111101011001011110101000001010";
        ram[52] = "0b10111010110100100001111001110000";
        ram[53] = "0b10111101001110010110000001011001";
        ram[54] = "0b00111100101111111011100001000111";
        ram[55] = "0b00111101100011010101010110111110";
        ram[56] = "0b10111101101011110010100100110011";
        ram[57] = "0b10111011111011001110110000111100";
        ram[58] = "0b00111101101111101101011000100111";
        ram[59] = "0b00111101010110100011000000010010";
        ram[60] = "0b10111100101100011001100000101001";
        ram[61] = "0b00111101110010100110001000111111";
        ram[62] = "0b10111100100000111000110001111100";
        ram[63] = "0b10111100010010011100001110011000";
        ram[64] = "0b00111011011000110111000010101000";
        ram[65] = "0b00111101100001010100001101000011";
        ram[66] = "0b00111101111000101001101101101011";
        ram[67] = "0b00111110000101000111011010110000";
        ram[68] = "0b00111100111011111111001101111000";
        ram[69] = "0b00111100111101001011011110011000";
        ram[70] = "0b00111101101010110101000001101110";
        ram[71] = "0b00111101000011000000011101110101";
        ram[72] = "0b10111101000000111100100011001000";
        ram[73] = "0b10111100011010110100001001101110";
        ram[74] = "0b10111011100100001101110100011101";
        ram[75] = "0b00111110000100110001011000011010";
        ram[76] = "0b10111101100000101110000011001000";
        ram[77] = "0b00111101010000111110010111010011";
        ram[78] = "0b00111101001111000111001110000100";
        ram[79] = "0b00111110010111011011101100010111";
        ram[80] = "0b00111110001110100000110111111110";
        ram[81] = "0b00111100101001001110110010110100";
        ram[82] = "0b00111011110101100111111110101001";
        ram[83] = "0b00111101110100000101101011110111";
        ram[84] = "0b00111101110010011011000010010000";
        ram[85] = "0b10111101101101001111000111010111";
        ram[86] = "0b00111101011010110010011110110001";
        ram[87] = "0b00111101100001100001101000111001";
        ram[88] = "0b10111100100000110100111110101011";
        ram[89] = "0b10111101100110010000111110101001";
        ram[90] = "0b10111101001110101110001100101011";
        ram[91] = "0b10111110001111000110101110001011";
        ram[92] = "0b00111110000000001001111110100101";
        ram[93] = "0b00111101001111000111000011001010";
        ram[94] = "0b00111101100101100011000110101000";
        ram[95] = "0b00111110011001011011011111010000";
        ram[96] = "0b00111101101111100010000010110010";
        ram[97] = "0b10111101101001001010000011110001";
        ram[98] = "0b10111100110010001001110000011011";
        ram[99] = "0b10111101101000100001111001100000";
        ram[100] = "0b10111101101011110001001010011010";
        ram[101] = "0b10111100100101001000100111000101";
        ram[102] = "0b10111101000101100010111101100111";
        ram[103] = "0b10111101110111011010001011111001";
        ram[104] = "0b10111011000010001001111111001100";
        ram[105] = "0b10111110001011010001110000111011";
        ram[106] = "0b00111101110000000010110001001101";
        ram[107] = "0b10111101111111101101101011101100";
        ram[108] = "0b00111101101010101010110101000101";
        ram[109] = "0b10111100100100001101011111110100";
        ram[110] = "0b00111110001011101010101000101010";
        ram[111] = "0b10111100101000010111111010100000";
        ram[112] = "0b00111011101000001101100000111101";
        ram[113] = "0b10111101111111111000001010110010";
        ram[114] = "0b10111011111101110111000111111100";
        ram[115] = "0b00111101101100111111111111010100";
        ram[116] = "0b00111101011110011010010011101101";
        ram[117] = "0b10111100111110111011111110010100";
        ram[118] = "0b10111110000000011011101100000110";
        ram[119] = "0b10111110000011101100011100000000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_2) {
meminst = new inference_conv2d_f3_0_3_2_ram("inference_conv2d_f3_0_3_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_2() {
    delete meminst;
}


};//endmodule
#endif
