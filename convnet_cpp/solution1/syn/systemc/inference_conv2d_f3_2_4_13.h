// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_13_H__
#define __inference_conv2d_f3_2_4_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_13_ram) {
        ram[0] = "0b00111100100100010101100111000101";
        ram[1] = "0b00111101011010111000110011111100";
        ram[2] = "0b10111110000011110011110011110111";
        ram[3] = "0b10111100011000100000000111101000";
        ram[4] = "0b00111101010001110101001100101011";
        ram[5] = "0b10111101100000111001110000000001";
        ram[6] = "0b10111101110110110100110000111100";
        ram[7] = "0b10111110000001100001111011010110";
        ram[8] = "0b00111101101010000111010001111000";
        ram[9] = "0b00111101001100010101010000011011";
        ram[10] = "0b10111110001110100001111111010001";
        ram[11] = "0b00111101001100100100001110110101";
        ram[12] = "0b00111011001100100010101010110101";
        ram[13] = "0b10111101100110110010000000100100";
        ram[14] = "0b00111110010010010111100111100001";
        ram[15] = "0b00111110010011011011110000100011";
        ram[16] = "0b10111101101110100001100111001010";
        ram[17] = "0b00111101000111100111100001110110";
        ram[18] = "0b10111100001010110010111111000100";
        ram[19] = "0b00111101110001100100010111100101";
        ram[20] = "0b10111101100011010001010111001000";
        ram[21] = "0b10111110000010001101011010010001";
        ram[22] = "0b00111011110011100001010100100001";
        ram[23] = "0b00111101111111000100111000101111";
        ram[24] = "0b00111101001001110001011001011010";
        ram[25] = "0b10111110001011111011101111011000";
        ram[26] = "0b00111101010000001110101011111100";
        ram[27] = "0b00111100100010011100001100101101";
        ram[28] = "0b10111101011111110010111100100000";
        ram[29] = "0b10111101011001010111000111000100";
        ram[30] = "0b10111101110101100110011010101010";
        ram[31] = "0b10111101000011110000111010101100";
        ram[32] = "0b00111101010100100010101010100101";
        ram[33] = "0b00111101110101101010110101110001";
        ram[34] = "0b10111100011100011001101000001100";
        ram[35] = "0b10111110001000100100000100111110";
        ram[36] = "0b10111110001010100001011001100001";
        ram[37] = "0b00111110010110111001100011001000";
        ram[38] = "0b00111101110000010100100011100011";
        ram[39] = "0b10111110000100101111110001101001";
        ram[40] = "0b10111110000101000100000111111111";
        ram[41] = "0b10111110010011101000101010110101";
        ram[42] = "0b00111101011100000000011010101001";
        ram[43] = "0b00111110000010011100000000100011";
        ram[44] = "0b10111101100010001110110010010110";
        ram[45] = "0b10111101010110101111101001010111";
        ram[46] = "0b00111101101110001110100001110001";
        ram[47] = "0b00111101110011110110110101110110";
        ram[48] = "0b10111100011011101101100011111100";
        ram[49] = "0b10111101100110001001011001001010";
        ram[50] = "0b00111101101100101010101110000100";
        ram[51] = "0b10111100111111100100011011111000";
        ram[52] = "0b10111110001101000011100011010010";
        ram[53] = "0b10111101000010100101110101101100";
        ram[54] = "0b00111100000101100100000001101001";
        ram[55] = "0b10111101010111011010011000000011";
        ram[56] = "0b00111101100110100111011010010110";
        ram[57] = "0b00111101010001111110100001000111";
        ram[58] = "0b00111101001110101100001001110100";
        ram[59] = "0b10111110000100010001000111110001";
        ram[60] = "0b10111000101000110010101011101011";
        ram[61] = "0b10111100110101000100101101000110";
        ram[62] = "0b10111011110110100001100001001111";
        ram[63] = "0b00111101000111001101001111100001";
        ram[64] = "0b10111101011100000011100011100011";
        ram[65] = "0b00111101100010001111001111011111";
        ram[66] = "0b10111110010001100001011000101111";
        ram[67] = "0b10111100100101101111000101001001";
        ram[68] = "0b00111101011100011101101101000100";
        ram[69] = "0b00111110001010111001101000010111";
        ram[70] = "0b00111101100101100111010000010101";
        ram[71] = "0b10111100100111000000111111001011";
        ram[72] = "0b10111101100011110000101011011000";
        ram[73] = "0b00111101101001111111110011010100";
        ram[74] = "0b10111101101011100110110111000100";
        ram[75] = "0b00111101011111100100100000111010";
        ram[76] = "0b10111101101101000010110111001111";
        ram[77] = "0b00111101110000010000000101101101";
        ram[78] = "0b10111101100010101111011010010001";
        ram[79] = "0b00111101100010101101010010001010";
        ram[80] = "0b10111101100001010110111111100001";
        ram[81] = "0b10111101111111101101010100101000";
        ram[82] = "0b10111101100101001001011011010011";
        ram[83] = "0b00111011010001100100001111110010";
        ram[84] = "0b10111101000100100100010000100000";
        ram[85] = "0b00111011000101110101001111101111";
        ram[86] = "0b00111101110110000011001011111101";
        ram[87] = "0b00111100111001010101101101101111";
        ram[88] = "0b00111101110111111101111001110010";
        ram[89] = "0b10111101010011101011001100111100";
        ram[90] = "0b00111101100100100001011011000110";
        ram[91] = "0b00111100100100101000011010110110";
        ram[92] = "0b00111101000100011011101010101000";
        ram[93] = "0b00111101010100011101000110011111";
        ram[94] = "0b00111101100111011111100010001001";
        ram[95] = "0b00111110000111000100011100011011";
        ram[96] = "0b00111100000111000101000101011010";
        ram[97] = "0b10111101101001010000100001001000";
        ram[98] = "0b10111101111001001100111110001101";
        ram[99] = "0b10111101110100000000001011100010";
        ram[100] = "0b10111101100000110111000110100101";
        ram[101] = "0b00111101110111001101111111110000";
        ram[102] = "0b10111101100011100100100110110010";
        ram[103] = "0b10111101000111011100111110100100";
        ram[104] = "0b00111100010000100001110011011011";
        ram[105] = "0b00111101010000110110000000100010";
        ram[106] = "0b10111101111101111111011110111110";
        ram[107] = "0b10111101101111000111000011001010";
        ram[108] = "0b00111110001000000010111111111001";
        ram[109] = "0b00111100000101011111010011011111";
        ram[110] = "0b00111110000000101011000011101010";
        ram[111] = "0b00111001100010011100110111001010";
        ram[112] = "0b10111110001001111011110111001111";
        ram[113] = "0b10111101001010010101001111101100";
        ram[114] = "0b10111100101110010111011100011010";
        ram[115] = "0b00111110001000001100101111110011";
        ram[116] = "0b10111100010110001010100101111010";
        ram[117] = "0b10111101100000000001110100110100";
        ram[118] = "0b10111100111111110110110010010010";
        ram[119] = "0b00111101010010111001111101010110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_13) {
meminst = new inference_conv2d_f3_2_4_13_ram("inference_conv2d_f3_2_4_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_13() {
    delete meminst;
}


};//endmodule
#endif
