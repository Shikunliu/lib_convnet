// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_9_H__
#define __inference_conv2d_f3_0_4_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_9_ram) {
        ram[0] = "0b00111110000011010101011000101010";
        ram[1] = "0b10111101000000001111010110101110";
        ram[2] = "0b10111110001101100001111100011001";
        ram[3] = "0b00111100010101001010110000101010";
        ram[4] = "0b10111110001000110011101001000111";
        ram[5] = "0b00111110000110111110000111101011";
        ram[6] = "0b00111100110011011101000110110000";
        ram[7] = "0b00111110000010000101010000000100";
        ram[8] = "0b10111101101001100011010001000111";
        ram[9] = "0b10111100101111010001000010010111";
        ram[10] = "0b00111110010011000100011111100101";
        ram[11] = "0b10111100111011110111101100011000";
        ram[12] = "0b00111110000000111000110000010001";
        ram[13] = "0b00111101001100110010101000010100";
        ram[14] = "0b10111101101110100011001011011001";
        ram[15] = "0b10111100000001101111000111101100";
        ram[16] = "0b10111101010000000000011111111000";
        ram[17] = "0b00111101110101110011101001111001";
        ram[18] = "0b00111011000001101110110001101110";
        ram[19] = "0b00111101000011100001100001011100";
        ram[20] = "0b10111101111110010011000111001010";
        ram[21] = "0b10111101110001001110110011110111";
        ram[22] = "0b10111101110111000000111010111111";
        ram[23] = "0b10111101100110110101010111111101";
        ram[24] = "0b00111100001011110010111110011000";
        ram[25] = "0b00111101000000111001101000000011";
        ram[26] = "0b10111101101111101001000001010001";
        ram[27] = "0b10111101001010111111011101001111";
        ram[28] = "0b10111010100110110001111001010100";
        ram[29] = "0b00111100101100100111011000001001";
        ram[30] = "0b00111100010010101110001110111111";
        ram[31] = "0b00111101110100101011000010100111";
        ram[32] = "0b00111101011110110001101011110100";
        ram[33] = "0b10111110100000101101111111010111";
        ram[34] = "0b00111110011000000001110111100010";
        ram[35] = "0b10111110001110111011110000101100";
        ram[36] = "0b10111101011110111101010100101110";
        ram[37] = "0b00111101011010110000011111010001";
        ram[38] = "0b00111110001011000111011011010001";
        ram[39] = "0b00111101111000000111010001100100";
        ram[40] = "0b10111011110111110011110100010010";
        ram[41] = "0b10111001001001011001101101011011";
        ram[42] = "0b10111110001100100101101110111000";
        ram[43] = "0b00111110000110010101101010101111";
        ram[44] = "0b10111110001101100000111011011000";
        ram[45] = "0b00111011100010000010101100110010";
        ram[46] = "0b00111101100010100011111010110011";
        ram[47] = "0b00111101101111000100001100101101";
        ram[48] = "0b10111110001101001010000000011011";
        ram[49] = "0b10111110000100100011100101100000";
        ram[50] = "0b00111101101001111110101010111101";
        ram[51] = "0b10111110000011110111001001110001";
        ram[52] = "0b10111101000100111110101001111110";
        ram[53] = "0b00111100101001110101011010000110";
        ram[54] = "0b00111101000000001100111111010100";
        ram[55] = "0b00111100110010100011010001101100";
        ram[56] = "0b10111101111011000111011011010001";
        ram[57] = "0b10111101110010110111101111110010";
        ram[58] = "0b10111101101100100010110001100000";
        ram[59] = "0b10111100101110011001011101100110";
        ram[60] = "0b00111010000101101011000011101101";
        ram[61] = "0b10111101110000000101010010000100";
        ram[62] = "0b00111100001110011110010000100111";
        ram[63] = "0b10111110011110011111010011010011";
        ram[64] = "0b00111010101010100110101000100001";
        ram[65] = "0b00111101111001100010011011110110";
        ram[66] = "0b00111101111010000100011110110010";
        ram[67] = "0b10111101101001100111111001001111";
        ram[68] = "0b10111110000011001001011100001111";
        ram[69] = "0b10111110001110100111010011000001";
        ram[70] = "0b10111010100101111110011111101001";
        ram[71] = "0b00111101010011010101001001111110";
        ram[72] = "0b10111101100011011110111010101110";
        ram[73] = "0b00111011000100010111100101100101";
        ram[74] = "0b00111101100101011100010100010100";
        ram[75] = "0b10111001100011101011100100100111";
        ram[76] = "0b10111101000111100100101000011101";
        ram[77] = "0b00111100000001100000010000110001";
        ram[78] = "0b10111101010110101010000101010001";
        ram[79] = "0b00111101100110100011111011110110";
        ram[80] = "0b10111101111011001111100011010111";
        ram[81] = "0b00111101100111110000000101101000";
        ram[82] = "0b00111110010100101101101111101000";
        ram[83] = "0b10111110001000011011010110000101";
        ram[84] = "0b00111100101101001111100001100101";
        ram[85] = "0b00111101111000110101011100011101";
        ram[86] = "0b00111110011000001000111101100101";
        ram[87] = "0b10111101110011111100001101110010";
        ram[88] = "0b00111101100011100101101001111001";
        ram[89] = "0b00111101111001000101010101100101";
        ram[90] = "0b00111101010110101101110000001010";
        ram[91] = "0b10111101001110101010111010000111";
        ram[92] = "0b10111110010011001000100111110100";
        ram[93] = "0b00111101100000010001100111011011";
        ram[94] = "0b00111100111101011011010000010111";
        ram[95] = "0b10111110001011110110010000000110";
        ram[96] = "0b10111101110101111010001011001111";
        ram[97] = "0b00111101101011010001010101110111";
        ram[98] = "0b00111110000101101001000110100111";
        ram[99] = "0b10111101100010000111111111100110";
        ram[100] = "0b10111100011100000000110110101111";
        ram[101] = "0b10111101011110010111101110110111";
        ram[102] = "0b10111110001110100001110011101111";
        ram[103] = "0b00111101011100101010101100110011";
        ram[104] = "0b10111101110100001010110111001101";
        ram[105] = "0b10111101110111110000111101011010";
        ram[106] = "0b10111101101000010110101000101110";
        ram[107] = "0b10111101111011011010100100000000";
        ram[108] = "0b00111110000101111010101110111001";
        ram[109] = "0b00111110000110111010110111000001";
        ram[110] = "0b00111101101011011001010111101011";
        ram[111] = "0b10111101010000101111010100010010";
        ram[112] = "0b00111110001010011111011110110110";
        ram[113] = "0b10111100001111011010101111001000";
        ram[114] = "0b10111110000000111110001100011001";
        ram[115] = "0b10111110000010101110110010001101";
        ram[116] = "0b10111100100100111110001101110111";
        ram[117] = "0b10111110000000101110110011110010";
        ram[118] = "0b10111110000010000011010100010110";
        ram[119] = "0b00111110010111100101001010011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_9) {
meminst = new inference_conv2d_f3_0_4_9_ram("inference_conv2d_f3_0_4_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_9() {
    delete meminst;
}


};//endmodule
#endif
