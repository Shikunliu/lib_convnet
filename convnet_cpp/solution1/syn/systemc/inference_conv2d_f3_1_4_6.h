// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_6_H__
#define __inference_conv2d_f3_1_4_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_6_ram) {
        ram[0] = "0b10111100111110000110110010001110";
        ram[1] = "0b10111101100111010000111000010011";
        ram[2] = "0b00111101101010010000001110001100";
        ram[3] = "0b10111101010110010101110010101110";
        ram[4] = "0b00111100010100111001010001100111";
        ram[5] = "0b00111101100110000110111111001110";
        ram[6] = "0b10111100100100011001101100110011";
        ram[7] = "0b00111101010110011011100110010101";
        ram[8] = "0b10111100000100110000110000010111";
        ram[9] = "0b10111110011000001001011001111000";
        ram[10] = "0b00111100011000100110010101010000";
        ram[11] = "0b00111101010000010010110100100111";
        ram[12] = "0b10111100001100101010100100110101";
        ram[13] = "0b00111101001111110100000111111111";
        ram[14] = "0b10111101101111111111000010111110";
        ram[15] = "0b10111101101000100111100100010100";
        ram[16] = "0b00111100101100101010010111011010";
        ram[17] = "0b00111110010000010011010100010001";
        ram[18] = "0b10111110010001100101101000010100";
        ram[19] = "0b10111101110001101011110101101111";
        ram[20] = "0b10111101000100011100110011100111";
        ram[21] = "0b00111101001101000000111100010110";
        ram[22] = "0b10111101110011010000111111101001";
        ram[23] = "0b00111101011110101110011011010110";
        ram[24] = "0b00111101101101011010011110011101";
        ram[25] = "0b10111001100010101010100110100011";
        ram[26] = "0b10111101010000110101000100100011";
        ram[27] = "0b00111100010011111011011000100001";
        ram[28] = "0b00111101110000001111011111111101";
        ram[29] = "0b00111101100101100010100101000101";
        ram[30] = "0b10111110000100011101111101110110";
        ram[31] = "0b00111110000110100110100101111011";
        ram[32] = "0b00111100011000111101110100011111";
        ram[33] = "0b10111100110000010000101010001100";
        ram[34] = "0b10111101000101010000100111101000";
        ram[35] = "0b10111101001011000110101000111100";
        ram[36] = "0b10111100110101110001001010100001";
        ram[37] = "0b10111101000010011110010000011010";
        ram[38] = "0b10111101000101111001010110011001";
        ram[39] = "0b10111100011110111110110011100000";
        ram[40] = "0b00111101101000010110111101010001";
        ram[41] = "0b00111100010000101001000101110101";
        ram[42] = "0b10111101010110101001010110010011";
        ram[43] = "0b00111101010011000100011010110000";
        ram[44] = "0b10111100001010001111101011001011";
        ram[45] = "0b00111101110011100101101101000010";
        ram[46] = "0b10111100100111111000111000000101";
        ram[47] = "0b10111101010011010001100010011101";
        ram[48] = "0b10111101011110010110000001110100";
        ram[49] = "0b10111101110111101100101100110010";
        ram[50] = "0b10111110001001011111101011101100";
        ram[51] = "0b00111110010010010010100100100100";
        ram[52] = "0b00111100110110111110111001110011";
        ram[53] = "0b10111101100111100100110100000000";
        ram[54] = "0b10111110010101111001010000100001";
        ram[55] = "0b00111110000010000100100100000010";
        ram[56] = "0b00111100001101011111001100000001";
        ram[57] = "0b10111101101101111000010101011000";
        ram[58] = "0b10111101100000111011001101110001";
        ram[59] = "0b10111100110110111111101011010011";
        ram[60] = "0b10111101101010111110110110000001";
        ram[61] = "0b10111110011010000000001000111010";
        ram[62] = "0b00111110000110101001110010011001";
        ram[63] = "0b10111101100111011100001011110100";
        ram[64] = "0b00111100110000110000101111101110";
        ram[65] = "0b10111101010000100101101111111011";
        ram[66] = "0b00111101111011000010110111110001";
        ram[67] = "0b10111101001000000011011000000000";
        ram[68] = "0b10111101000010110011101110111000";
        ram[69] = "0b00111101110101110010110101011110";
        ram[70] = "0b10111101010101110101111111101001";
        ram[71] = "0b00111101101100001000101000100110";
        ram[72] = "0b00111100111010011101100111101110";
        ram[73] = "0b00111110000110000111100010111000";
        ram[74] = "0b00111101101000111100100111010100";
        ram[75] = "0b00111101101010011011111101110100";
        ram[76] = "0b00111101001101101000011000011111";
        ram[77] = "0b10111110000011110110100111001011";
        ram[78] = "0b00111101100000110110010000010000";
        ram[79] = "0b10111100111101110101000111011100";
        ram[80] = "0b00111100101001011011001001000001";
        ram[81] = "0b00111101101010010101111110111000";
        ram[82] = "0b00111101100000000110000010000101";
        ram[83] = "0b00111100111001101101000001001110";
        ram[84] = "0b00111110000111111011001111111010";
        ram[85] = "0b10111101101000010000111010100011";
        ram[86] = "0b00111011111000111101001101100100";
        ram[87] = "0b00111101010011010011110110000110";
        ram[88] = "0b00111100101100111100010101011111";
        ram[89] = "0b10111110000000010001011011101100";
        ram[90] = "0b10111101100001101100110100000001";
        ram[91] = "0b10111110000001100010111010010000";
        ram[92] = "0b10111100111000010011011000010000";
        ram[93] = "0b00111100001000100101010110100000";
        ram[94] = "0b00111100101111001011111110100100";
        ram[95] = "0b00111110010101101100011111101011";
        ram[96] = "0b00111101110101001111100100111100";
        ram[97] = "0b00111101000100000101100101001001";
        ram[98] = "0b00111101111001111001110011000111";
        ram[99] = "0b10111011100100001110011010011000";
        ram[100] = "0b10111100111011011101001101111000";
        ram[101] = "0b10111100110111100010001111010111";
        ram[102] = "0b10111100110010000011000100100111";
        ram[103] = "0b10111100011010011010100111101000";
        ram[104] = "0b00111101100010110000000011011000";
        ram[105] = "0b10111101000011001010001101111100";
        ram[106] = "0b00111101010011110101011111011100";
        ram[107] = "0b00111100011111101110000010110001";
        ram[108] = "0b00111100111100010111100001001000";
        ram[109] = "0b10111011011011000111011110111000";
        ram[110] = "0b00111101101011000101110100100000";
        ram[111] = "0b00111101101000010101001100110111";
        ram[112] = "0b00111101111010100001101101011100";
        ram[113] = "0b00111101110001001101111111101001";
        ram[114] = "0b00111100110101001110001001111011";
        ram[115] = "0b00111100111110101011110100110110";
        ram[116] = "0b10111110001011001000100101101110";
        ram[117] = "0b00111101111100000010111111111001";
        ram[118] = "0b00111100101011010100000011100001";
        ram[119] = "0b10111110001110000100101110100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_6) {
meminst = new inference_conv2d_f3_1_4_6_ram("inference_conv2d_f3_1_4_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_6() {
    delete meminst;
}


};//endmodule
#endif
