// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_4_H__
#define __inference_conv2d_f3_4_1_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_4_ram) {
        ram[0] = "0b10111100101110110100110101001001";
        ram[1] = "0b00111100100011101100110111111001";
        ram[2] = "0b10111101110100011001010110001001";
        ram[3] = "0b00111101000011100110011011100110";
        ram[4] = "0b00111101110010001010011011110110";
        ram[5] = "0b00111110001001100011000011101100";
        ram[6] = "0b10111101101010000100000010101100";
        ram[7] = "0b10111011111001101010001101100011";
        ram[8] = "0b10111101111100010011101111100010";
        ram[9] = "0b00111100110011101000101110110100";
        ram[10] = "0b10111101100100101101101111011011";
        ram[11] = "0b00111101111001100100011001101011";
        ram[12] = "0b10111101111111100111011001000010";
        ram[13] = "0b10111101100101010000110011001010";
        ram[14] = "0b00111101011000000111010111011100";
        ram[15] = "0b00111101111011101010111000011001";
        ram[16] = "0b00111101110000101101001101000001";
        ram[17] = "0b00111100011100010010111010101100";
        ram[18] = "0b10111110000110011101110011111001";
        ram[19] = "0b10111110000001010001001110110110";
        ram[20] = "0b10111011100101100100100010010111";
        ram[21] = "0b00111101110000010110001000000000";
        ram[22] = "0b00111110000100000001100101101110";
        ram[23] = "0b10111101101010001110110010100011";
        ram[24] = "0b10111110000010011101111110011000";
        ram[25] = "0b00111101010011111111000011011001";
        ram[26] = "0b00111101110100011011010001111000";
        ram[27] = "0b00111110000000111000110001010100";
        ram[28] = "0b10111101110010110000010001000000";
        ram[29] = "0b10111110000010110110101100101011";
        ram[30] = "0b00111101100111101111111110111010";
        ram[31] = "0b00111101110000011101110010101111";
        ram[32] = "0b10111100111111101011110101110101";
        ram[33] = "0b10111110000001000011010111110000";
        ram[34] = "0b00111101110000001010001011100101";
        ram[35] = "0b10111011011111111001001011001000";
        ram[36] = "0b00111100001100101100110110110011";
        ram[37] = "0b00111101100111010100010000100001";
        ram[38] = "0b00111110001001011001001111100110";
        ram[39] = "0b00111101101100010001110000101010";
        ram[40] = "0b10111101100010010010111011011011";
        ram[41] = "0b10111101001110010001010100001111";
        ram[42] = "0b00111101010011111100110010010001";
        ram[43] = "0b10111101101011101100010001111100";
        ram[44] = "0b10111100110000110111000100000011";
        ram[45] = "0b10111100000111101010100001000001";
        ram[46] = "0b00111100101100011001100010010100";
        ram[47] = "0b00111101101001100110011111000011";
        ram[48] = "0b00111101010110000001110100010010";
        ram[49] = "0b10111101100101011101101101011100";
        ram[50] = "0b10111101011110000100001111000100";
        ram[51] = "0b00111101110001101100001000100111";
        ram[52] = "0b10111101100010101110101001100111";
        ram[53] = "0b10111110010010101101001101100011";
        ram[54] = "0b10111110000011011110101000000011";
        ram[55] = "0b10111101111001101100000100011010";
        ram[56] = "0b00111101000111101000100101011000";
        ram[57] = "0b00111101100111010100011001101111";
        ram[58] = "0b00111101001110010001010000011110";
        ram[59] = "0b10111101011011100100000010100000";
        ram[60] = "0b10111101111111000111000001000011";
        ram[61] = "0b10111101100100101001111110001111";
        ram[62] = "0b10111100100101001111001000000000";
        ram[63] = "0b00111101110100010101011000011001";
        ram[64] = "0b10111110000000001001100101011011";
        ram[65] = "0b00111101100110010110000101011000";
        ram[66] = "0b10111110000101111111010101100010";
        ram[67] = "0b10111100110010011101101110110110";
        ram[68] = "0b00111101110110010101111101100111";
        ram[69] = "0b00111110000100110000100001111000";
        ram[70] = "0b10111101111100100000011111010101";
        ram[71] = "0b10111101110010011010111100001011";
        ram[72] = "0b00111101111011010001011101000000";
        ram[73] = "0b00111101000011100001100001011100";
        ram[74] = "0b00111110001010111010100000111111";
        ram[75] = "0b10111110000011000101001000011110";
        ram[76] = "0b10111101001110001111010000001000";
        ram[77] = "0b10111101010110100110001101011001";
        ram[78] = "0b00111101100100100101110000110001";
        ram[79] = "0b10111110000100001010100010001111";
        ram[80] = "0b00111110000011010110011111111101";
        ram[81] = "0b10111110000010011111101011011011";
        ram[82] = "0b00111101110100111011010100111001";
        ram[83] = "0b10111101101010000010110101111011";
        ram[84] = "0b10111101100000100001110101111100";
        ram[85] = "0b00111100001111010101100010111100";
        ram[86] = "0b00111101100010100001011000111001";
        ram[87] = "0b00111101010000111010000011010100";
        ram[88] = "0b00111100011100100100011001101110";
        ram[89] = "0b10111101101000000100011111010100";
        ram[90] = "0b10111100001101011101010100111010";
        ram[91] = "0b10111101101001101110000010110111";
        ram[92] = "0b10111100111110111100100101101111";
        ram[93] = "0b00111110000001010100000100010000";
        ram[94] = "0b00111100000101001001000101011101";
        ram[95] = "0b00111101001111101011001010001110";
        ram[96] = "0b00111110000111001100111001011111";
        ram[97] = "0b10111100000110110111001011000010";
        ram[98] = "0b10111110000101010010110011100000";
        ram[99] = "0b10111101000000001010000000000011";
        ram[100] = "0b00111101101010000000101110011101";
        ram[101] = "0b10111101100100000111001001110100";
        ram[102] = "0b00111101100111111111110101010011";
        ram[103] = "0b10111101000001000010011101011100";
        ram[104] = "0b10111101101110010101011011110111";
        ram[105] = "0b00111011100101110110011000100011";
        ram[106] = "0b00111101110010010111001100011110";
        ram[107] = "0b10111101010101101111110111000011";
        ram[108] = "0b00111101100101011011100111110110";
        ram[109] = "0b10111101100111100110100011010111";
        ram[110] = "0b10111101100010111001101101110100";
        ram[111] = "0b00111110000100100110000010110011";
        ram[112] = "0b00111101111111001111100100011010";
        ram[113] = "0b00111101101000011010110011101100";
        ram[114] = "0b00111100111010100001101010000110";
        ram[115] = "0b10111101011010000100100001010011";
        ram[116] = "0b10111101000101010111100101011111";
        ram[117] = "0b10111101111101111011110100000110";
        ram[118] = "0b10111110001011111110100100110010";
        ram[119] = "0b00111110001001001111011111101100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_4) {
meminst = new inference_conv2d_f3_4_1_4_ram("inference_conv2d_f3_4_1_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_4() {
    delete meminst;
}


};//endmodule
#endif
