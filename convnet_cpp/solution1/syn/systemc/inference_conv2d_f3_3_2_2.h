// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_2_H__
#define __inference_conv2d_f3_3_2_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_2_ram) {
        ram[0] = "0b00111101110010100101100011011100";
        ram[1] = "0b00111101100001100001010000110001";
        ram[2] = "0b00111101101010111011011111011111";
        ram[3] = "0b00111100100010001010010101010110";
        ram[4] = "0b00111110000001010010101011000111";
        ram[5] = "0b10111101011111010101100001010000";
        ram[6] = "0b10111100011101101111100111000111";
        ram[7] = "0b10111110000010000111001110111101";
        ram[8] = "0b00111110001111101001001001001111";
        ram[9] = "0b10111101000101110111001011001000";
        ram[10] = "0b00111100111000000100010001000011";
        ram[11] = "0b10111101110001011001101111010001";
        ram[12] = "0b10111101100101101000001010000000";
        ram[13] = "0b00111100111001101001111011010000";
        ram[14] = "0b10111100001011100000101001101010";
        ram[15] = "0b00111100001011000110100110000000";
        ram[16] = "0b10111101001100100011101100011011";
        ram[17] = "0b00111101011011011101011001001101";
        ram[18] = "0b10111101101011101101000101100010";
        ram[19] = "0b10111101100011101011101001101011";
        ram[20] = "0b10111101100000100011111000001011";
        ram[21] = "0b00111110001100010000100101001010";
        ram[22] = "0b10111100111010101110100100011000";
        ram[23] = "0b00111100110100101101010100100101";
        ram[24] = "0b00111101101001010110010110001101";
        ram[25] = "0b10111101101010011111001010111011";
        ram[26] = "0b00111110000100001100011111000001";
        ram[27] = "0b10111101110001010100110010110011";
        ram[28] = "0b00111100101010100100010001110111";
        ram[29] = "0b10111101011011111101000001011000";
        ram[30] = "0b10111100010111100100101101111010";
        ram[31] = "0b10111110000110011000111000010001";
        ram[32] = "0b10111101001110010111001100000011";
        ram[33] = "0b10111100101011111101110110101001";
        ram[34] = "0b10111100100101110001001000110110";
        ram[35] = "0b10111110001111100111100000011000";
        ram[36] = "0b00111101100111001010100110011111";
        ram[37] = "0b10111101110110110001101011110100";
        ram[38] = "0b00111101011110100111111100000111";
        ram[39] = "0b00111101100101011000100110010010";
        ram[40] = "0b10111101100111000100100101000010";
        ram[41] = "0b10111101100110101110101010011101";
        ram[42] = "0b00111101100011100001011001010001";
        ram[43] = "0b10111101001010111011100000010101";
        ram[44] = "0b00111101100111111101001101000111";
        ram[45] = "0b00111110000101010011101111010001";
        ram[46] = "0b10111101000010001011001010001100";
        ram[47] = "0b10111011101000011000010111110111";
        ram[48] = "0b00111110000010011110000100101010";
        ram[49] = "0b00111011010011110000111101110010";
        ram[50] = "0b00111101110110100101100011110111";
        ram[51] = "0b00111110001110110011000100111100";
        ram[52] = "0b00111101100100001110101001000000";
        ram[53] = "0b00111101100011001000111100001010";
        ram[54] = "0b00111100111011001101111010111011";
        ram[55] = "0b00111101100011100010011011010101";
        ram[56] = "0b10111101101110100111101111100010";
        ram[57] = "0b00111101100001011110101111100000";
        ram[58] = "0b10111101011000100111010101110110";
        ram[59] = "0b00111101000101101101001101100110";
        ram[60] = "0b00111101010101110000001111110011";
        ram[61] = "0b00111101111101010010100101111000";
        ram[62] = "0b10111110001001010111111001100111";
        ram[63] = "0b10111101101010011000101110011010";
        ram[64] = "0b10111101100011110000001111000100";
        ram[65] = "0b10111101010011010101111111001111";
        ram[66] = "0b00111110010001100001100000000101";
        ram[67] = "0b00111100010001110111011100100010";
        ram[68] = "0b00111100000011110011011001010100";
        ram[69] = "0b10111101111010010011110000000100";
        ram[70] = "0b00111110000110110000110001000110";
        ram[71] = "0b10111100101001001110011011010101";
        ram[72] = "0b00111101100110110011100110010010";
        ram[73] = "0b00111110001101101000011100101011";
        ram[74] = "0b00111101101110101101101111111100";
        ram[75] = "0b10111101101001011101000100111101";
        ram[76] = "0b00111101011011111100000111000100";
        ram[77] = "0b10111101000101111011000110110011";
        ram[78] = "0b10111110000100000000000101010000";
        ram[79] = "0b10111101010011100001000000101110";
        ram[80] = "0b00111110001101101101000001001110";
        ram[81] = "0b10111101111111101111101111110100";
        ram[82] = "0b10111101111010101110001110100100";
        ram[83] = "0b10111011011111001110100101001010";
        ram[84] = "0b10111101101001100100011101001111";
        ram[85] = "0b00111100001110100000010110110101";
        ram[86] = "0b10111110000101110000000101010100";
        ram[87] = "0b00111101101111010010000100011011";
        ram[88] = "0b00111110001110100110001011101101";
        ram[89] = "0b10111101100011110010001111110101";
        ram[90] = "0b10111101001110000100001100111101";
        ram[91] = "0b00111101101011001101001000001011";
        ram[92] = "0b00111110011001111110110010111011";
        ram[93] = "0b10111101000111001010100010010010";
        ram[94] = "0b00111100010100100100111011101101";
        ram[95] = "0b10111100100100110011010010010000";
        ram[96] = "0b00111101101110011101100101000000";
        ram[97] = "0b00111101111100110110110001011001";
        ram[98] = "0b10111101110011010001010110101101";
        ram[99] = "0b00111101011110111111111100111010";
        ram[100] = "0b00111110000011010111110010110011";
        ram[101] = "0b00111101000110001100000011110111";
        ram[102] = "0b10111101100110100011010011110010";
        ram[103] = "0b00111101100111111111111101010010";
        ram[104] = "0b10111100101000111011101111000111";
        ram[105] = "0b10111101001111101010101000101010";
        ram[106] = "0b10111100011011111000000001010110";
        ram[107] = "0b00111100101101000010110111001111";
        ram[108] = "0b00111101111100001110100010000110";
        ram[109] = "0b00111101011010101011101101111011";
        ram[110] = "0b10111101111110011010100111011010";
        ram[111] = "0b00111101110010101110011111110000";
        ram[112] = "0b00111101100101111000001110011101";
        ram[113] = "0b10111100100111100001011111100011";
        ram[114] = "0b10111101111011111000010110010100";
        ram[115] = "0b00111011111001000111101111101011";
        ram[116] = "0b10111101101000000101111110101111";
        ram[117] = "0b10111110001100100011111101101000";
        ram[118] = "0b00111101010110000100011000101101";
        ram[119] = "0b00111101100000000100100010111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_2) {
meminst = new inference_conv2d_f3_3_2_2_ram("inference_conv2d_f3_3_2_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_2() {
    delete meminst;
}


};//endmodule
#endif
