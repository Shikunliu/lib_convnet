// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_14_H__
#define __inference_conv2d_f3_1_4_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_14_ram) {
        ram[0] = "0b00111101110100100001001001010001";
        ram[1] = "0b00111011101011001000111110000000";
        ram[2] = "0b00111011000111010001000101001000";
        ram[3] = "0b00111101000000001101110101000000";
        ram[4] = "0b00111110010010100010100110000100";
        ram[5] = "0b10111100100100110000100010111100";
        ram[6] = "0b10111110001000000001111010101100";
        ram[7] = "0b00111101101111100110101101011011";
        ram[8] = "0b00111101011111111010011111010001";
        ram[9] = "0b00111101110101111010111101100100";
        ram[10] = "0b00111101010101000001100101011101";
        ram[11] = "0b10111101111110011100101101101000";
        ram[12] = "0b10111101101011100101100101010010";
        ram[13] = "0b10111101110000111001010100110000";
        ram[14] = "0b10111101111110101111111110110000";
        ram[15] = "0b10111110100110110111110100100000";
        ram[16] = "0b00111110010110110000001110011111";
        ram[17] = "0b10111110001011000101010101000011";
        ram[18] = "0b00111100111100001110111010110101";
        ram[19] = "0b00111010100110110001100101001100";
        ram[20] = "0b00111101101100011011000001101111";
        ram[21] = "0b10111101101111110011100011111011";
        ram[22] = "0b00111110000000010110110011101000";
        ram[23] = "0b00111101001111000000001010010101";
        ram[24] = "0b10111100011110011001111010111101";
        ram[25] = "0b10111110000111011001110111111110";
        ram[26] = "0b00111101101101101110010011011100";
        ram[27] = "0b10111110000010100011101000001000";
        ram[28] = "0b00111110010100001111110001110010";
        ram[29] = "0b10111100100001100011101000001100";
        ram[30] = "0b10111011010111000001010000111101";
        ram[31] = "0b10111101011111001000010010011011";
        ram[32] = "0b10111101001011011111111010101011";
        ram[33] = "0b00111110011000111000001011100100";
        ram[34] = "0b00111101101010111101010001010111";
        ram[35] = "0b00111101101010111111110000010101";
        ram[36] = "0b10111100010111001011000011011011";
        ram[37] = "0b10111101101011000101011000001100";
        ram[38] = "0b10111101110101110100000000111110";
        ram[39] = "0b10111100100101100011011001101101";
        ram[40] = "0b10111101001100101010010011001110";
        ram[41] = "0b00111101111101111010010011101000";
        ram[42] = "0b10111110001001011010101010110100";
        ram[43] = "0b00111101111101000010000010110100";
        ram[44] = "0b00111101101001111011010101000011";
        ram[45] = "0b00111100100001010011101100001000";
        ram[46] = "0b10111110001001011001010110111100";
        ram[47] = "0b00111100110100000100110101010101";
        ram[48] = "0b00111110011010100111010000111010";
        ram[49] = "0b00111110000001001111011101100110";
        ram[50] = "0b00111110001101000011000000101011";
        ram[51] = "0b00111100000001011001000111100101";
        ram[52] = "0b10111101000110000101001010100111";
        ram[53] = "0b00111101000000010110001001101011";
        ram[54] = "0b10111100101101101010100111100000";
        ram[55] = "0b00111101111001011010101010110100";
        ram[56] = "0b00111101110100001100011101111110";
        ram[57] = "0b10111100110010000100110110101100";
        ram[58] = "0b10111101001000011110011000111010";
        ram[59] = "0b10111100110011110111000100100010";
        ram[60] = "0b10111101000110110100111100010001";
        ram[61] = "0b00111110000111001110110111010101";
        ram[62] = "0b10111011100110101000101101000111";
        ram[63] = "0b10111100000100001111010000011001";
        ram[64] = "0b10111110000001110110010110111010";
        ram[65] = "0b00111101001111100111010001000100";
        ram[66] = "0b10111101111110101001011011010101";
        ram[67] = "0b00111101100000101101011101110011";
        ram[68] = "0b10111100111101111010001100111010";
        ram[69] = "0b00111101110110110110111011010110";
        ram[70] = "0b00111100111010101111001010000111";
        ram[71] = "0b00111101111111000010000110011111";
        ram[72] = "0b10111101110100100111000100110111";
        ram[73] = "0b10111101011010001011100100100111";
        ram[74] = "0b00111110001011000011110011100010";
        ram[75] = "0b00111100111100011000111010000011";
        ram[76] = "0b00111101100101110000001000011101";
        ram[77] = "0b10111101010001101110011101111011";
        ram[78] = "0b10111101100101110001011000100100";
        ram[79] = "0b00111101111011101010100011011010";
        ram[80] = "0b00111100010011100101001001110011";
        ram[81] = "0b00111101101010000101010101101111";
        ram[82] = "0b00111101001010100111110010101011";
        ram[83] = "0b10111100011111111001001101011110";
        ram[84] = "0b00111100001011000000100100001000";
        ram[85] = "0b10111101101100111100010001100000";
        ram[86] = "0b00111101001001010001010101100011";
        ram[87] = "0b10111101101100100001100010110111";
        ram[88] = "0b00111101110111000011000101011001";
        ram[89] = "0b00111101111110001111000101001110";
        ram[90] = "0b00111110000110110000010000100101";
        ram[91] = "0b10111101000110010000000101011001";
        ram[92] = "0b00111101101100110000011001100000";
        ram[93] = "0b00111100110101000001000110011010";
        ram[94] = "0b10111101000010100111111100010101";
        ram[95] = "0b00111101010000110101000110101001";
        ram[96] = "0b00111100011000000000100011101010";
        ram[97] = "0b10111101000001011101001100101110";
        ram[98] = "0b00111101100101011110110100000111";
        ram[99] = "0b10111101000010011111111001010001";
        ram[100] = "0b10111100110101000001100000011011";
        ram[101] = "0b10111110000110010100001001001110";
        ram[102] = "0b10111101000100010011001011011110";
        ram[103] = "0b00111101100110001110110000010000";
        ram[104] = "0b10111101010111101001111010000110";
        ram[105] = "0b10111101001010101000010110110000";
        ram[106] = "0b10111101001110111000101110101100";
        ram[107] = "0b10111101010100000000100000111011";
        ram[108] = "0b10111011110111110000111011101111";
        ram[109] = "0b00111110000101110011011011001110";
        ram[110] = "0b10111110000110001110110010010110";
        ram[111] = "0b10111101101000100110000001111101";
        ram[112] = "0b10111101110101001010000100100111";
        ram[113] = "0b10111110011011000100011000001111";
        ram[114] = "0b10111100000111110101101010100100";
        ram[115] = "0b00111100001011110000101100011011";
        ram[116] = "0b10111110010111100010100000100100";
        ram[117] = "0b00111101101001101000000000111111";
        ram[118] = "0b10111101111111101111011100111100";
        ram[119] = "0b10111101011000011111010100011101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_14) {
meminst = new inference_conv2d_f3_1_4_14_ram("inference_conv2d_f3_1_4_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_14() {
    delete meminst;
}


};//endmodule
#endif
