// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_1_H__
#define __inference_conv2d_f3_1_1_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_1_ram) {
        ram[0] = "0b10111110000110011001001011001001";
        ram[1] = "0b00111101111001000101000010101101";
        ram[2] = "0b10111100000011011010111100110101";
        ram[3] = "0b00111101110010111110001101010110";
        ram[4] = "0b00111101001101110101011111110001";
        ram[5] = "0b00111100111110010110001110011001";
        ram[6] = "0b10111110000001111101100000000110";
        ram[7] = "0b00111101110011101011100100011011";
        ram[8] = "0b10111101001000000001011100101100";
        ram[9] = "0b00111101101101110010010001100111";
        ram[10] = "0b00111101111101101011110100101011";
        ram[11] = "0b00111011010111111110110100111011";
        ram[12] = "0b10111100101101101010000010100110";
        ram[13] = "0b00111101001111100110110011010011";
        ram[14] = "0b10111110001011010100101011100100";
        ram[15] = "0b10111010101011010111000010010001";
        ram[16] = "0b10111101100010111010001010111110";
        ram[17] = "0b10111101101101100011110000111111";
        ram[18] = "0b00111101111000010111111010111011";
        ram[19] = "0b10111100100001010111000011101110";
        ram[20] = "0b10111110000001000100100011001111";
        ram[21] = "0b10111101110000101011111111000000";
        ram[22] = "0b10111101100000101101001000001101";
        ram[23] = "0b10111101000001000111011010100010";
        ram[24] = "0b10111101111010101110110110011010";
        ram[25] = "0b10111101000110110110011110110101";
        ram[26] = "0b00111101101001100000100011011110";
        ram[27] = "0b00111101000111101101111011101000";
        ram[28] = "0b00111011110110001010001000011000";
        ram[29] = "0b10111110001100000010011101010010";
        ram[30] = "0b00111110010101100010100010001001";
        ram[31] = "0b00111101000110100000000101001110";
        ram[32] = "0b00111101010111100111010000101010";
        ram[33] = "0b00111101010000101101001011100011";
        ram[34] = "0b00111100111010010001111011011101";
        ram[35] = "0b10111110000110011110000100101010";
        ram[36] = "0b00111110001111110001100111010110";
        ram[37] = "0b10111100000010110001010010000110";
        ram[38] = "0b10111101111011001111111010011011";
        ram[39] = "0b00111101011111010011110101111000";
        ram[40] = "0b10111101101011011100010011010111";
        ram[41] = "0b00111011010010000101101111111010";
        ram[42] = "0b00111101111001100111011100101101";
        ram[43] = "0b10111101101101100101010001011101";
        ram[44] = "0b00111110000100101011011111111110";
        ram[45] = "0b10111101000110100110111111010011";
        ram[46] = "0b00111101110100010010010011010001";
        ram[47] = "0b10111110000101001111110111110100";
        ram[48] = "0b00111101100111001110111011101110";
        ram[49] = "0b00111011110100010011010000111011";
        ram[50] = "0b00111100010101011001010000011100";
        ram[51] = "0b00111011110000100000001000000011";
        ram[52] = "0b00111101110111011110100010110100";
        ram[53] = "0b10111101010111100000010101101111";
        ram[54] = "0b00111110001101111011100010010001";
        ram[55] = "0b10111101001010100100010011111101";
        ram[56] = "0b10111101111001110110000100000010";
        ram[57] = "0b10111101001101100010110011100011";
        ram[58] = "0b00111011101101000010110011011000";
        ram[59] = "0b10111101010100100100111100111101";
        ram[60] = "0b00111101111010000000101011100001";
        ram[61] = "0b00111100011000101000111101000001";
        ram[62] = "0b00111101101100010001011100000111";
        ram[63] = "0b00111110001001111100111100011100";
        ram[64] = "0b10111101000111001110001010101010";
        ram[65] = "0b00111101011111000111000011111111";
        ram[66] = "0b10111101011010011010111101000001";
        ram[67] = "0b00111101100110001011100000011011";
        ram[68] = "0b00111101111011011001010100010100";
        ram[69] = "0b00111100111000100001001001000100";
        ram[70] = "0b10111101100011111111100010110110";
        ram[71] = "0b00111110000100011011100000100100";
        ram[72] = "0b00111101111000101010111011010001";
        ram[73] = "0b00111100010011001101101101111011";
        ram[74] = "0b10111101101010111001100010101101";
        ram[75] = "0b10111101000010101111100010000010";
        ram[76] = "0b00111101011001001011001111111010";
        ram[77] = "0b00111100000110000010011000011100";
        ram[78] = "0b10111110000000111111011111001111";
        ram[79] = "0b00111110001111011100100100111111";
        ram[80] = "0b00111101111101010110100111110101";
        ram[81] = "0b10111110001100000010000100001000";
        ram[82] = "0b10111101100011111001111010110001";
        ram[83] = "0b00111100100010001111110101101010";
        ram[84] = "0b10111101001101101101010100010100";
        ram[85] = "0b10111101111100110111100101110100";
        ram[86] = "0b00111101101100000111110000100111";
        ram[87] = "0b00111101010000110101111100110000";
        ram[88] = "0b00111101101100101111101011110010";
        ram[89] = "0b10111100101001111110011100111010";
        ram[90] = "0b00111101010001111010010100010000";
        ram[91] = "0b10111101101000010011111001011001";
        ram[92] = "0b10111100111110100000110000110110";
        ram[93] = "0b10111101101000000010111101100101";
        ram[94] = "0b10111101001001000101111010000100";
        ram[95] = "0b00111101101111100001010110111101";
        ram[96] = "0b10111100101110001010101111100011";
        ram[97] = "0b10111101010110101001010101000010";
        ram[98] = "0b00111100010011101000001100011011";
        ram[99] = "0b00111100111001101111100101101001";
        ram[100] = "0b10111101101001101110000001001100";
        ram[101] = "0b00111110001000100011011011000001";
        ram[102] = "0b10111110001101001000000101101111";
        ram[103] = "0b10111011101101011011111100101010";
        ram[104] = "0b00111101100000100111111001100000";
        ram[105] = "0b00111101111110101110101000110001";
        ram[106] = "0b00111101111011010010011001110100";
        ram[107] = "0b10111101100001000000111101001100";
        ram[108] = "0b10111101011111000001010101110101";
        ram[109] = "0b00111101100111001111001100101110";
        ram[110] = "0b00111101111000000010010000101101";
        ram[111] = "0b00111101010101001011100111001011";
        ram[112] = "0b10111110000010101111011110010000";
        ram[113] = "0b10111101101000011110110011010101";
        ram[114] = "0b10111100011110111110000110001101";
        ram[115] = "0b10111101101101101111101010011110";
        ram[116] = "0b00111101100110110001111110010001";
        ram[117] = "0b00111101001001111101111000110110";
        ram[118] = "0b10111101111011000100110111101100";
        ram[119] = "0b00111101000110100011101011011111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_1) {
meminst = new inference_conv2d_f3_1_1_1_ram("inference_conv2d_f3_1_1_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_1() {
    delete meminst;
}


};//endmodule
#endif
