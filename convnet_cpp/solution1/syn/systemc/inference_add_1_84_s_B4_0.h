// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_add_1_84_s_B4_0_H__
#define __inference_add_1_84_s_B4_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_add_1_84_s_B4_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_add_1_84_s_B4_0_ram) {
        ram[0] = "0b00111101110101010000100101111101";
        ram[1] = "0b00111101111100011000110100100110";
        ram[2] = "0b00111101111011111010111001111001";
        ram[3] = "0b00111101110111111011111011111101";
        ram[4] = "0b00111101110011110001011101111010";
        ram[5] = "0b00111101101101010001011000011111";
        ram[6] = "0b00111101101110110001010000001000";
        ram[7] = "0b00111101111010111001011101111000";
        ram[8] = "0b00111101110101000111110001110100";
        ram[9] = "0b00111101111011011110001110111001";
        ram[10] = "0b00111101110010001101100101110011";
        ram[11] = "0b00111101110000010001101000010001";
        ram[12] = "0b00111101110010110110001111101111";
        ram[13] = "0b00111101110100110000010100010000";
        ram[14] = "0b00111101111111001111111111101011";
        ram[15] = "0b00111101110010001011000101110010";
        ram[16] = "0b00111101110011110100100101001001";
        ram[17] = "0b00111101110000111000111111001010";
        ram[18] = "0b00111101110001111010000010001110";
        ram[19] = "0b00111101111010101010001000011010";
        ram[20] = "0b00111101101100010001101111100111";
        ram[21] = "0b00111101110000010001011111111000";
        ram[22] = "0b00111101101100101000001001011100";
        ram[23] = "0b00111101111001001110100010111000";
        ram[24] = "0b00111101110111001011100000010111";
        ram[25] = "0b00111101110011111010011010011100";
        ram[26] = "0b00111101110010011011100000111000";
        ram[27] = "0b00111101111100001001100011010100";
        ram[28] = "0b00111101101010111001000110100111";
        ram[29] = "0b00111101101110111001000011011101";
        ram[30] = "0b00111101111011100001110111101011";
        ram[31] = "0b00111101110010110100111111001101";
        ram[32] = "0b00111101111101010011011010010011";
        ram[33] = "0b00111101110110111100001101000000";
        ram[34] = "0b00111101101110100010111111001111";
        ram[35] = "0b00111101110001001111101111001101";
        ram[36] = "0b00111101111010101111100010011100";
        ram[37] = "0b00111101110001000001110110000001";
        ram[38] = "0b00111101101100100110011001101010";
        ram[39] = "0b00111101111000100100111011011111";
        ram[40] = "0b00111101111010111110110001101000";
        ram[41] = "0b00111101110100000100101100111100";
        ram[42] = "0b00111101111000011011110110100101";
        ram[43] = "0b00111101111011100100010111000011";
        ram[44] = "0b00111101111100111100001011011011";
        ram[45] = "0b00111101111001100001100111011011";
        ram[46] = "0b00111101111110011011010011011101";
        ram[47] = "0b00111101110100000010110111100000";
        ram[48] = "0b00111101111000100001010000100111";
        ram[49] = "0b00111101100101110111110110001000";
        ram[50] = "0b00111101110101001010011011101100";
        ram[51] = "0b00111101110010101100010110100110";
        ram[52] = "0b00111101111100001000000010110110";
        ram[53] = "0b00111101110100010000010101011100";
        ram[54] = "0b00111101110011001100110011001101";
        ram[55] = "0b00111110000000010100011001011111";
        ram[56] = "0b00111101101100010011010010011001";
        ram[57] = "0b00111101110100100100111110101001";
        ram[58] = "0b00111101110100001010101010101000";
        ram[59] = "0b00111101110010111010110111001110";
        ram[60] = "0b00111101101010111010111110010110";
        ram[61] = "0b00111101110001010100100000111110";
        ram[62] = "0b00111101110100111100110111011101";
        ram[63] = "0b00111101110110000100101110100001";
        ram[64] = "0b00111101110011100110001110100110";
        ram[65] = "0b00111101110000010100001001001000";
        ram[66] = "0b00111101111111101000000101000101";
        ram[67] = "0b00111101110011001100110011001101";
        ram[68] = "0b00111101110111101100101010101100";
        ram[69] = "0b00111101110111101000010111111101";
        ram[70] = "0b00111101101111100001101010101011";
        ram[71] = "0b00111101110010010000100001010010";
        ram[72] = "0b00111101110001000011111101100000";
        ram[73] = "0b00111101110000010111110100011011";
        ram[74] = "0b00111101111000001010101111110111";
        ram[75] = "0b00111101110000111100100111111100";
        ram[76] = "0b00111101110101111000011110001011";
        ram[77] = "0b00111101110001101010111101111100";
        ram[78] = "0b00111101110001101100110010001000";
        ram[79] = "0b00111101111101011011100100011111";
        ram[80] = "0b00111101101111010100100111001010";
        ram[81] = "0b00111101110000111111111010111011";
        ram[82] = "0b00111101110000000010101111000111";
        ram[83] = "0b00111101110011000100011000011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_add_1_84_s_B4_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_add_1_84_s_B4_0_ram* meminst;


SC_CTOR(inference_add_1_84_s_B4_0) {
meminst = new inference_add_1_84_s_B4_0_ram("inference_add_1_84_s_B4_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_add_1_84_s_B4_0() {
    delete meminst;
}


};//endmodule
#endif
