// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_4_H__
#define __inference_conv2d_f3_2_1_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_4_ram) {
        ram[0] = "0b10111110000101101000011100101011";
        ram[1] = "0b10111101110101011010001100011010";
        ram[2] = "0b00111011100001111011110111111010";
        ram[3] = "0b00111101101001111010111001011000";
        ram[4] = "0b00111100010101011110110111011110";
        ram[5] = "0b00111101110100101101100100000110";
        ram[6] = "0b00111101000110100110010000010100";
        ram[7] = "0b10111110000010110101101101110000";
        ram[8] = "0b10111101101110000100001000010110";
        ram[9] = "0b10111101001010111011101010110100";
        ram[10] = "0b00111101100011000110010110010001";
        ram[11] = "0b00111100000110100001001000111010";
        ram[12] = "0b10111101111011101010101101111010";
        ram[13] = "0b10111110000111110010010101011111";
        ram[14] = "0b00111110000011000000100111000100";
        ram[15] = "0b10111101010100100010110001010010";
        ram[16] = "0b10111100111000011011110101010101";
        ram[17] = "0b00111101101100000100100011010011";
        ram[18] = "0b10111101101101100110011010001111";
        ram[19] = "0b00111100110001111010010111100111";
        ram[20] = "0b00111110001101100111110110111011";
        ram[21] = "0b00111101010110111110010000010010";
        ram[22] = "0b00111101100101011111010101000010";
        ram[23] = "0b10111101010100110110001100011111";
        ram[24] = "0b10111010100110100001011111101111";
        ram[25] = "0b00111110000011100010001001100000";
        ram[26] = "0b00111101101000110100101010100011";
        ram[27] = "0b10111101001011011101000000111000";
        ram[28] = "0b10111110001101110011001010011100";
        ram[29] = "0b00111100100100000010000000111110";
        ram[30] = "0b00111101000110111111111111110110";
        ram[31] = "0b00111101110100011001011000010000";
        ram[32] = "0b00111010101000111011110011011110";
        ram[33] = "0b10111101101101101111000100000110";
        ram[34] = "0b10111101010101100010100111011000";
        ram[35] = "0b10111100101100111101011000100110";
        ram[36] = "0b00111110000010110001101110111101";
        ram[37] = "0b10111100110100111110101000101101";
        ram[38] = "0b00111101001010010101111001001110";
        ram[39] = "0b00111101100011110011110100011111";
        ram[40] = "0b00111101110111000000110010100110";
        ram[41] = "0b10111101111011011001010000001000";
        ram[42] = "0b10111101100001110011111010010000";
        ram[43] = "0b00111101010000101110010110101000";
        ram[44] = "0b10111101111100011001100100110101";
        ram[45] = "0b00111101000011100011100010001101";
        ram[46] = "0b00111101110111011101111010111110";
        ram[47] = "0b10111101110001011100000100001010";
        ram[48] = "0b00111101110111101010100010010111";
        ram[49] = "0b10111101010001111000001001000000";
        ram[50] = "0b10111101011000001001100011111101";
        ram[51] = "0b10111101011000101000000111010101";
        ram[52] = "0b00111101001101110000011101001110";
        ram[53] = "0b00111011111101011100000100111000";
        ram[54] = "0b10111101101011000010100011000000";
        ram[55] = "0b10111110000011001100001101011101";
        ram[56] = "0b10111100110101010101101101111100";
        ram[57] = "0b10111101011111110111110101011001";
        ram[58] = "0b10111100110001011000101110010000";
        ram[59] = "0b00111100101011101010111100001010";
        ram[60] = "0b00111100101111000000100010001111";
        ram[61] = "0b10111100110111111011011011101010";
        ram[62] = "0b10111101001111100110101100001010";
        ram[63] = "0b10111100100111001101001110101011";
        ram[64] = "0b00111000100000110000000011101110";
        ram[65] = "0b10111101111011101000001100011011";
        ram[66] = "0b00111101010010101011100010100110";
        ram[67] = "0b10111100000000101010110000000010";
        ram[68] = "0b10111011000001000101000010110010";
        ram[69] = "0b00111101001101111011010101000011";
        ram[70] = "0b00111100101110011100000111000011";
        ram[71] = "0b10111101010110111101101010100010";
        ram[72] = "0b10111101101001111111110110101011";
        ram[73] = "0b10111100111111010010100111000010";
        ram[74] = "0b00111101101001010000111000011010";
        ram[75] = "0b00111110001110111101010011010000";
        ram[76] = "0b10111011101000110101001000010101";
        ram[77] = "0b10111101111101001001100111010000";
        ram[78] = "0b10111110011010110000011110001110";
        ram[79] = "0b00111101100111011100111111110101";
        ram[80] = "0b10111101110001011110010001100000";
        ram[81] = "0b10111100011110011011001110110110";
        ram[82] = "0b00111011100100110001000101101010";
        ram[83] = "0b10111100111110110011000100101110";
        ram[84] = "0b10111100011110010111101111101101";
        ram[85] = "0b10111110000000111110100100100001";
        ram[86] = "0b10111101011101010001000100111111";
        ram[87] = "0b00111101011101101010111101010100";
        ram[88] = "0b10111011100010110100100001011110";
        ram[89] = "0b00111100010110011101001101000110";
        ram[90] = "0b00111100100100101010110001110101";
        ram[91] = "0b10111100110000000011110000110000";
        ram[92] = "0b00111110001000110000110001100111";
        ram[93] = "0b10111110000000101111100000111000";
        ram[94] = "0b10111101001110000101001101100011";
        ram[95] = "0b00111101011100111011111001110011";
        ram[96] = "0b00111101101110000110101111111010";
        ram[97] = "0b10111101010010010110011011100111";
        ram[98] = "0b00111110001011010111010010010010";
        ram[99] = "0b00111101011111011100110000101110";
        ram[100] = "0b10111101010010100010000000010100";
        ram[101] = "0b00111100100010001100101001110100";
        ram[102] = "0b10111100111111110100101110100101";
        ram[103] = "0b00111100111011100000010110010111";
        ram[104] = "0b10111100100000101010110100100100";
        ram[105] = "0b00111101101011111111110011110110";
        ram[106] = "0b00111101110010111111000000101110";
        ram[107] = "0b10111100101100000100010111100011";
        ram[108] = "0b10111011100011101001011000110000";
        ram[109] = "0b00111101101001100010111000010111";
        ram[110] = "0b00111110000000101000101110110001";
        ram[111] = "0b00111110000101010111010001110001";
        ram[112] = "0b10111101101011111110010101010000";
        ram[113] = "0b00111100011011010110111000101101";
        ram[114] = "0b10111110001111010001011011111101";
        ram[115] = "0b00111101000010111111010100110110";
        ram[116] = "0b10111100100010010001000111000010";
        ram[117] = "0b10111110000010010010011101001110";
        ram[118] = "0b10111101111000111110110100001111";
        ram[119] = "0b10111101000101001100000111111001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_4) {
meminst = new inference_conv2d_f3_2_1_4_ram("inference_conv2d_f3_2_1_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_4() {
    delete meminst;
}


};//endmodule
#endif
