// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_86_H__
#define __inference_mult_1_120_120_84_s_W4_86_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_86_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_86_ram) {
        ram[0] = "0b10111100101010011110010111100010";
        ram[1] = "0b10111101100101010010100010010100";
        ram[2] = "0b10111101101010011000101101001001";
        ram[3] = "0b00111110000101101001010000000011";
        ram[4] = "0b00111100101110000101011010111110";
        ram[5] = "0b00111100001101010010001000100001";
        ram[6] = "0b10111110000101101001110001100111";
        ram[7] = "0b10111101010111001001000110000001";
        ram[8] = "0b10111101100101010100111000000011";
        ram[9] = "0b00111011011010100110101110011001";
        ram[10] = "0b10111100100011110100000110000111";
        ram[11] = "0b10111101100101110010110001000100";
        ram[12] = "0b00111100101100111011111110110110";
        ram[13] = "0b00111100100101101011010010101101";
        ram[14] = "0b00111101111110100001111101001011";
        ram[15] = "0b00111110000100010010000100100101";
        ram[16] = "0b00111101010000110010110011110110";
        ram[17] = "0b10111100110000111010001100100011";
        ram[18] = "0b10111110001111001100111101101100";
        ram[19] = "0b10111101000100011101111111000111";
        ram[20] = "0b10111101101110011010111101110110";
        ram[21] = "0b10111110010011011110000101011101";
        ram[22] = "0b10111101101000110110010001010011";
        ram[23] = "0b10111101100011111100000011010011";
        ram[24] = "0b00111101101001101011011101011010";
        ram[25] = "0b00111101001100000010111110101000";
        ram[26] = "0b00111101010110101010111100101000";
        ram[27] = "0b00111100100110111101010101111110";
        ram[28] = "0b10111101001000011100110101000101";
        ram[29] = "0b10111101010111100100011000100001";
        ram[30] = "0b00111101101100110011111010000110";
        ram[31] = "0b10111110000000001010011010111001";
        ram[32] = "0b10111101111011001111100001010001";
        ram[33] = "0b10111100100001110100001101010110";
        ram[34] = "0b10111110000110111011000111110010";
        ram[35] = "0b10111101100111000001111000110110";
        ram[36] = "0b10111110001110001011010101000110";
        ram[37] = "0b10111100011101111100110100101100";
        ram[38] = "0b00111110010000100001111011100110";
        ram[39] = "0b10111101111101001110011001011100";
        ram[40] = "0b00111010101000100101000001110111";
        ram[41] = "0b00111110010000110111111110111111";
        ram[42] = "0b00111101111010010001010100111000";
        ram[43] = "0b00111011000011001100011001110111";
        ram[44] = "0b10111101011101111001001000100011";
        ram[45] = "0b00111101110010111011111001010010";
        ram[46] = "0b10111101101111011110111010010011";
        ram[47] = "0b10111101011011100010011101000000";
        ram[48] = "0b00111100100110110000111001000100";
        ram[49] = "0b00111100010000100110111100010000";
        ram[50] = "0b00111100101111001010110001011001";
        ram[51] = "0b10111110000001100001101110110000";
        ram[52] = "0b10111101011100010011000101001011";
        ram[53] = "0b10111101101000010010000000110011";
        ram[54] = "0b00111100011010100000010000010101";
        ram[55] = "0b00111100111001101110100101000011";
        ram[56] = "0b10111100101000101000101000111001";
        ram[57] = "0b00111100110011111001000011001100";
        ram[58] = "0b10111101111110101101011101010010";
        ram[59] = "0b10111100010110110100011101001110";
        ram[60] = "0b10111101101010000000011001000100";
        ram[61] = "0b00111101111010001011011011011000";
        ram[62] = "0b00111100001100000011000010110101";
        ram[63] = "0b00111101111010110101110011000000";
        ram[64] = "0b00111101011101000100111001010001";
        ram[65] = "0b10111101101000100010100100100000";
        ram[66] = "0b10111101011000111011000001011001";
        ram[67] = "0b00111101000000001001010001100000";
        ram[68] = "0b10111100100100100010111100001100";
        ram[69] = "0b10111100101010000110000000000110";
        ram[70] = "0b00111110000101110000011110011110";
        ram[71] = "0b00111101111111111001101111011100";
        ram[72] = "0b10111110000010001101101111001111";
        ram[73] = "0b00111101000111011010010101000111";
        ram[74] = "0b00111101100111100011110001100001";
        ram[75] = "0b10111110010010111101011110110010";
        ram[76] = "0b00111101010000000011011101000011";
        ram[77] = "0b00111101101010101011000111010101";
        ram[78] = "0b10111101100111010101101011010100";
        ram[79] = "0b10111101110011000001100011010000";
        ram[80] = "0b10111101010010110110011110001101";
        ram[81] = "0b00111101011001100011011100000001";
        ram[82] = "0b10111101011001001011101110100001";
        ram[83] = "0b00111101000000101111000101001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_86) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_86_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_86) {
meminst = new inference_mult_1_120_120_84_s_W4_86_ram("inference_mult_1_120_120_84_s_W4_86_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_86() {
    delete meminst;
}


};//endmodule
#endif
