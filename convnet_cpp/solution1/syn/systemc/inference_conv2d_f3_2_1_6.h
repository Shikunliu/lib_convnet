// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_6_H__
#define __inference_conv2d_f3_2_1_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_6_ram) {
        ram[0] = "0b00111101111101011110111110100110";
        ram[1] = "0b10111100110110000011011100101110";
        ram[2] = "0b00111101110111111100011111100111";
        ram[3] = "0b10111011101000100000001110001011";
        ram[4] = "0b10111100100001011000100111100010";
        ram[5] = "0b00111101001100110001001100111000";
        ram[6] = "0b10111101000101110110110011101001";
        ram[7] = "0b10111110000100001111011000100111";
        ram[8] = "0b00111110000110100000110010101110";
        ram[9] = "0b10111011101100001011111010111010";
        ram[10] = "0b00111101101000101100101101100100";
        ram[11] = "0b00111101110110100101001010101100";
        ram[12] = "0b00111101010101110101101111101101";
        ram[13] = "0b10111101111011101010011111001110";
        ram[14] = "0b10111101101111100011010001001110";
        ram[15] = "0b10111110000111001101100111101000";
        ram[16] = "0b00111110000011110011100010000010";
        ram[17] = "0b10111101111100100110111110100100";
        ram[18] = "0b00111101101111011001010001100101";
        ram[19] = "0b00111100110100101100100101100110";
        ram[20] = "0b10111100110101111011001110110001";
        ram[21] = "0b10111011111101101111000111100100";
        ram[22] = "0b00111110010000101110011100101110";
        ram[23] = "0b10111101001001011101000100010101";
        ram[24] = "0b00111110000111011110101011001101";
        ram[25] = "0b00111100100100110010100010011100";
        ram[26] = "0b00111101101110101111000101101110";
        ram[27] = "0b00111101110011000000110110011000";
        ram[28] = "0b10111011110011010100101001100001";
        ram[29] = "0b00111110001111111111101001111111";
        ram[30] = "0b00111110011011111000110111111000";
        ram[31] = "0b00111011111001111101101101011100";
        ram[32] = "0b00111101000110111101100011011001";
        ram[33] = "0b00111110000110100100001001101100";
        ram[34] = "0b00111100111101110110111100111000";
        ram[35] = "0b00111100100001111010101001001110";
        ram[36] = "0b00111101110101110010101010111111";
        ram[37] = "0b10111101010010100110000100010111";
        ram[38] = "0b00111110000001100011001111001110";
        ram[39] = "0b00111101101011111000110000100010";
        ram[40] = "0b00111101101001001111101010001011";
        ram[41] = "0b10111110001001000100111110100000";
        ram[42] = "0b00111101101100000100110101001000";
        ram[43] = "0b00111101111000001010101001100101";
        ram[44] = "0b00111011111100110000011101001001";
        ram[45] = "0b10111101010000001100111011111101";
        ram[46] = "0b10111101010111010010100011010000";
        ram[47] = "0b00111101000001100111100011011011";
        ram[48] = "0b10111101100110111011000010110000";
        ram[49] = "0b10111101111100000010110101011010";
        ram[50] = "0b10111101010101001000001100001111";
        ram[51] = "0b00111101101101000100111000101001";
        ram[52] = "0b00111101001101101010001001010011";
        ram[53] = "0b10111101100101010011101010011101";
        ram[54] = "0b10111101110011010001001110010100";
        ram[55] = "0b00111110001100011110011010001010";
        ram[56] = "0b10111110000011010110001010111111";
        ram[57] = "0b10111101001101010101011001110100";
        ram[58] = "0b10111100110111001010110000001000";
        ram[59] = "0b00111101110100110100101101010001";
        ram[60] = "0b00111101011010011100010000000100";
        ram[61] = "0b10111100111100010011101100001011";
        ram[62] = "0b10111101001110100000101101000100";
        ram[63] = "0b00111011111101010101110000100011";
        ram[64] = "0b10111101001011101101010111110001";
        ram[65] = "0b00111101110000001111011010101101";
        ram[66] = "0b00111101011000110001111011101001";
        ram[67] = "0b10111001101011100101101100001100";
        ram[68] = "0b00111110001100101110111001000010";
        ram[69] = "0b10111101101110011100100000110110";
        ram[70] = "0b10111100010100000001101001011111";
        ram[71] = "0b00111101011000010111000100110100";
        ram[72] = "0b10111101100000111011000111010001";
        ram[73] = "0b10111101101111001100001000000000";
        ram[74] = "0b10111101100010110110101111100111";
        ram[75] = "0b10111110010001110101010110111101";
        ram[76] = "0b10111101101001101101000111000110";
        ram[77] = "0b00111101000010110110111101001111";
        ram[78] = "0b10111101101010100111100110000110";
        ram[79] = "0b10111101101110111001000011000010";
        ram[80] = "0b00111101101000100111111010110000";
        ram[81] = "0b00111101000101101000010010001100";
        ram[82] = "0b00111100111001011110101110000010";
        ram[83] = "0b00111110010111001100111100101001";
        ram[84] = "0b10111100111001001000000110001010";
        ram[85] = "0b00111101000101111111111100110000";
        ram[86] = "0b10111101110110001001010100000111";
        ram[87] = "0b10111100111111000101011010010011";
        ram[88] = "0b10111110001100010010100001111100";
        ram[89] = "0b00111101110001110110110111001101";
        ram[90] = "0b10111101110010100010001111001101";
        ram[91] = "0b00111110001010000110111110001011";
        ram[92] = "0b00111101100010101111000011110101";
        ram[93] = "0b10111101110001010100110011101001";
        ram[94] = "0b10111101110101000010000000101110";
        ram[95] = "0b00111110001010111010010110100000";
        ram[96] = "0b00111011101111000000110100001100";
        ram[97] = "0b10111110001000100111000110111101";
        ram[98] = "0b10111101010101010100011010000011";
        ram[99] = "0b00111101101101010000100101010100";
        ram[100] = "0b00111100111111100011100110001100";
        ram[101] = "0b00111011001110110011001101110010";
        ram[102] = "0b10111011111100011101100110100010";
        ram[103] = "0b10111101111101010100101110001100";
        ram[104] = "0b00111110010001011010010001101010";
        ram[105] = "0b00111100111111101001010010010000";
        ram[106] = "0b00111100010010111101011010011000";
        ram[107] = "0b00111110001111111110101110001110";
        ram[108] = "0b10111110001011100111100010011110";
        ram[109] = "0b00111101010011111000111111011011";
        ram[110] = "0b10111011101000000000101010110111";
        ram[111] = "0b00111101010101000001100110010010";
        ram[112] = "0b10111011111010010100011111011000";
        ram[113] = "0b10111110010010100100000011011001";
        ram[114] = "0b10111101001010100010000000010100";
        ram[115] = "0b10111101101001000101010101001010";
        ram[116] = "0b10111110100000001001111010011001";
        ram[117] = "0b00111101111011011101011100100011";
        ram[118] = "0b10111110000010101110001100011101";
        ram[119] = "0b10111101011000001110001010110100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_6) {
meminst = new inference_conv2d_f3_2_1_6_ram("inference_conv2d_f3_2_1_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_6() {
    delete meminst;
}


};//endmodule
#endif
