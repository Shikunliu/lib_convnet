// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_3_H__
#define __inference_conv2d_f3_0_4_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_3_ram) {
        ram[0] = "0b00111101110011010000000000101110";
        ram[1] = "0b10111100010100111010100010001001";
        ram[2] = "0b10111101010000000110001111010011";
        ram[3] = "0b10111101100010111110110111111010";
        ram[4] = "0b10111101111000011111001110100101";
        ram[5] = "0b10111101010011001001100111010111";
        ram[6] = "0b10111101101100110000100000000000";
        ram[7] = "0b00111100110010101010110011001100";
        ram[8] = "0b10111101110001100111101011100110";
        ram[9] = "0b10111110010001011101111101100101";
        ram[10] = "0b00111110010101110111100001010111";
        ram[11] = "0b00111101100100111110100011010000";
        ram[12] = "0b00111101010111111001010001101011";
        ram[13] = "0b00111100001111110101010110000000";
        ram[14] = "0b10111101100100011001111001011000";
        ram[15] = "0b00111101110010111000111101100101";
        ram[16] = "0b00111101100011101000000011001100";
        ram[17] = "0b10111101000110010010010100000000";
        ram[18] = "0b10111101000011000100110001110100";
        ram[19] = "0b10111100110001011000101111000110";
        ram[20] = "0b10111101111001000001010101101110";
        ram[21] = "0b10111101010100001110000110011010";
        ram[22] = "0b10111101100000001011111110000110";
        ram[23] = "0b00111101100110101001011111000110";
        ram[24] = "0b00111101111100001000001011001111";
        ram[25] = "0b00111110010100010110100011111001";
        ram[26] = "0b00111110001100100011010010101000";
        ram[27] = "0b10111101100101011010001010100010";
        ram[28] = "0b10111101010011101001100011001111";
        ram[29] = "0b10111100110001110001010011111101";
        ram[30] = "0b00111100110011001111001111001111";
        ram[31] = "0b10111101110110101100001001011001";
        ram[32] = "0b10111110001010101101101000110100";
        ram[33] = "0b10111110000110111001111010001100";
        ram[34] = "0b00111101110001111111101100100110";
        ram[35] = "0b00111100101110010001011000110111";
        ram[36] = "0b10111101010011000110100000111110";
        ram[37] = "0b00111101000001001101001010110011";
        ram[38] = "0b00111101111111111100110100100101";
        ram[39] = "0b00111110000110100101011011011110";
        ram[40] = "0b10111101101010000011000111001000";
        ram[41] = "0b10111110011110110110001111010100";
        ram[42] = "0b00111101101001011010110101010100";
        ram[43] = "0b00111110010000101000111100011001";
        ram[44] = "0b10111101110001000111000110100111";
        ram[45] = "0b00111101111011110011001010111110";
        ram[46] = "0b00111110000101010011011000001101";
        ram[47] = "0b00111101000011011110011111101010";
        ram[48] = "0b10111100100110111001001101101111";
        ram[49] = "0b10111101000011011111111101100111";
        ram[50] = "0b00111101110001101100101010110010";
        ram[51] = "0b00111101100001110000010110100000";
        ram[52] = "0b10111110000111000100010101000110";
        ram[53] = "0b00111101100101100011101010000100";
        ram[54] = "0b10111100001000010110110110001110";
        ram[55] = "0b00111101010100011110010101110000";
        ram[56] = "0b00111101100001100101100110101001";
        ram[57] = "0b10111101000010101101000110011011";
        ram[58] = "0b00111101101101011011000110010011";
        ram[59] = "0b10111101111111001110100101100000";
        ram[60] = "0b00111101010011110000110011001000";
        ram[61] = "0b10111110100001011010000011100000";
        ram[62] = "0b00111101100110001010000010111000";
        ram[63] = "0b10111101100001010001100100000001";
        ram[64] = "0b10111110000001110111001001010000";
        ram[65] = "0b00111101111110011010000011110001";
        ram[66] = "0b10111100111101101010101000010110";
        ram[67] = "0b10111101001100011110100111110010";
        ram[68] = "0b10111110000101100111111100001011";
        ram[69] = "0b10111101111011000010101001000101";
        ram[70] = "0b00111011100011110001100010110111";
        ram[71] = "0b10111101000111110100001101110111";
        ram[72] = "0b10111101100111001000101101111001";
        ram[73] = "0b00111101100010100011111101101111";
        ram[74] = "0b00111011000100010100010111100011";
        ram[75] = "0b00111101101110001001010000100011";
        ram[76] = "0b10111101100010110101100000110000";
        ram[77] = "0b10111011111001000000111100110100";
        ram[78] = "0b00111100110110110010000010111000";
        ram[79] = "0b10111101100110010010110010100111";
        ram[80] = "0b10111110001001110110011100001010";
        ram[81] = "0b00111011010100100111010110101110";
        ram[82] = "0b00111100101111100111101001011001";
        ram[83] = "0b00111101101101000001110000010111";
        ram[84] = "0b00111101111010111110000101100101";
        ram[85] = "0b00111101111000110010010011001000";
        ram[86] = "0b00111110010100110001100111000110";
        ram[87] = "0b10111100101001011010101001001001";
        ram[88] = "0b10111101101101000100011110110110";
        ram[89] = "0b10111011101100010111101011110111";
        ram[90] = "0b00111100110001010111011001100010";
        ram[91] = "0b00111101100001101000100111011000";
        ram[92] = "0b00111101101010011000010100011010";
        ram[93] = "0b00111110010000000011001101100001";
        ram[94] = "0b10111101000101100101101010000000";
        ram[95] = "0b10111110000010011011010111101001";
        ram[96] = "0b00111101101011111101110011010010";
        ram[97] = "0b10111110001011110101101001010011";
        ram[98] = "0b00111100010101001100100010101111";
        ram[99] = "0b00111101000010000001010010111100";
        ram[100] = "0b00111110001111001010101010111001";
        ram[101] = "0b00111101111111111101011110100001";
        ram[102] = "0b00111101011111000001000010100010";
        ram[103] = "0b10111101000001010111100000001111";
        ram[104] = "0b00111110001001000111100110010010";
        ram[105] = "0b10111110000000110111111010110011";
        ram[106] = "0b00111101100101111001100100101001";
        ram[107] = "0b00111101111101010110110000001101";
        ram[108] = "0b00111110010011010111111010001001";
        ram[109] = "0b10111101111010111111110010101000";
        ram[110] = "0b00111110000100110111111001101111";
        ram[111] = "0b10111100101110010001101101110101";
        ram[112] = "0b00111110000011001101001110011110";
        ram[113] = "0b10111110000100000010101011111110";
        ram[114] = "0b00111100100101011010001011001010";
        ram[115] = "0b10111101000011110111101110000011";
        ram[116] = "0b00111011100010111100111000010100";
        ram[117] = "0b10111110001100000101101000101101";
        ram[118] = "0b00111101011001011001010001000100";
        ram[119] = "0b00111101110100110110101101001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_3) {
meminst = new inference_conv2d_f3_0_4_3_ram("inference_conv2d_f3_0_4_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_3() {
    delete meminst;
}


};//endmodule
#endif
