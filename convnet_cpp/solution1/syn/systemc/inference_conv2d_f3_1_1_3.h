// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_3_H__
#define __inference_conv2d_f3_1_1_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_3_ram) {
        ram[0] = "0b10111101010110010000001111000010";
        ram[1] = "0b00111110001101010010001010100111";
        ram[2] = "0b00111101000100001010000001111100";
        ram[3] = "0b00111101100010011001101011000001";
        ram[4] = "0b10111011011000010101011101001000";
        ram[5] = "0b10111101100100111111110010010100";
        ram[6] = "0b10111100111100000110010011101101";
        ram[7] = "0b10111110001011011100001001101110";
        ram[8] = "0b00111100110110000110110000111101";
        ram[9] = "0b10111101110000000100101011011110";
        ram[10] = "0b10111101010100100100011001101110";
        ram[11] = "0b10111100110010010110000111011110";
        ram[12] = "0b00111110000000000000111101110111";
        ram[13] = "0b10111110000101100100011100110100";
        ram[14] = "0b00111110001001000001110111010010";
        ram[15] = "0b00111101110011100000011101011111";
        ram[16] = "0b10111100100001100011100011001001";
        ram[17] = "0b10111100100010101010100011010000";
        ram[18] = "0b10111101010001011110000111000001";
        ram[19] = "0b10111110000010101011001011100001";
        ram[20] = "0b10111101011100001110110100100011";
        ram[21] = "0b10111101001011000101110000101111";
        ram[22] = "0b10111100110111011000000001000100";
        ram[23] = "0b00111101110101011010100001011000";
        ram[24] = "0b00111110001011111110101010000001";
        ram[25] = "0b10111100101111001000110011100100";
        ram[26] = "0b10111101110000011110001110110101";
        ram[27] = "0b10111011100111011010101011001011";
        ram[28] = "0b00111101000101111001000001011010";
        ram[29] = "0b00111110001100100001011110001111";
        ram[30] = "0b10111100110010011001110100111000";
        ram[31] = "0b10111101001010111011100110001100";
        ram[32] = "0b00111100111001110111111001011111";
        ram[33] = "0b00111101101011101010000111111100";
        ram[34] = "0b00111101101100001111001001000110";
        ram[35] = "0b10111100100100010101100111000101";
        ram[36] = "0b00111101100100110111000110110010";
        ram[37] = "0b00111100110011000001011010001111";
        ram[38] = "0b00111101110110111000010011011100";
        ram[39] = "0b00111101100110100100110111001100";
        ram[40] = "0b10111101000010000001100111100000";
        ram[41] = "0b10111101101110010101111110011101";
        ram[42] = "0b00111110000101001101101111100000";
        ram[43] = "0b00111100100010111110110100001001";
        ram[44] = "0b10111101001000010100011011110010";
        ram[45] = "0b00111100000011011110101100110000";
        ram[46] = "0b00111110010011000001100011111000";
        ram[47] = "0b00111011010110001101100101001011";
        ram[48] = "0b10111100000010001000111100100101";
        ram[49] = "0b00111011001001101010000111000000";
        ram[50] = "0b00111110000110000100100010111111";
        ram[51] = "0b00111100111011101101010100000000";
        ram[52] = "0b10111100110000010001111001111001";
        ram[53] = "0b00111101000100100001110110001001";
        ram[54] = "0b10111101100110101001000101010011";
        ram[55] = "0b10111100000001001101000011010101";
        ram[56] = "0b00111101100011100111000001010110";
        ram[57] = "0b00111101110000001111100001001110";
        ram[58] = "0b00111100101000110011110010110001";
        ram[59] = "0b00111110001111101001100000010100";
        ram[60] = "0b00111011000001100110000111011001";
        ram[61] = "0b10111011010111001101111111101010";
        ram[62] = "0b10111110000100101101101001010101";
        ram[63] = "0b00111101100000011110101000110110";
        ram[64] = "0b00111101100100010011010011000001";
        ram[65] = "0b10111100111110110111111110011101";
        ram[66] = "0b00111110000110011100001000111011";
        ram[67] = "0b00111101100011101110100111101011";
        ram[68] = "0b00111101010101000011010010100000";
        ram[69] = "0b00111101100110100101110110010100";
        ram[70] = "0b10111101011000111110111011011000";
        ram[71] = "0b00111101100111011011001000000101";
        ram[72] = "0b00111101110010000001011100011000";
        ram[73] = "0b00111100110101011100011111101000";
        ram[74] = "0b10111000100110010010001111010001";
        ram[75] = "0b00111101011001000111000101111111";
        ram[76] = "0b10111101110100011101110011010111";
        ram[77] = "0b10111101100011010110001010111111";
        ram[78] = "0b10111101110100010101001001101110";
        ram[79] = "0b00111101100011111000001110111110";
        ram[80] = "0b00111101001110010111101001110101";
        ram[81] = "0b10111101000000011101000011110000";
        ram[82] = "0b10111100101010111100010010101010";
        ram[83] = "0b10111011110100100101110101110000";
        ram[84] = "0b10111101001010100011100101110101";
        ram[85] = "0b00111101001001010001011011011011";
        ram[86] = "0b10111101001100100011000110101011";
        ram[87] = "0b00111101011110000001001011001100";
        ram[88] = "0b10111101101001001000110011111000";
        ram[89] = "0b00111110000101111101010000010111";
        ram[90] = "0b10111101100110111100100100101100";
        ram[91] = "0b00111101010011101011101001111000";
        ram[92] = "0b10111101010111011110000110101101";
        ram[93] = "0b10111101101110000000100001001111";
        ram[94] = "0b10111110001100011000010000111100";
        ram[95] = "0b10111101000001000000101100001101";
        ram[96] = "0b10111101000001110100111101001010";
        ram[97] = "0b00111100101110100001011010110010";
        ram[98] = "0b00111011110001001100111000111011";
        ram[99] = "0b10111101010100010011111111011110";
        ram[100] = "0b00111110001100100100101111111101";
        ram[101] = "0b10111101110010111110011010100011";
        ram[102] = "0b00111101101010111110011100110111";
        ram[103] = "0b00111100111000010110011110001111";
        ram[104] = "0b00111101111011010111100000111110";
        ram[105] = "0b10111101000011111111011011101110";
        ram[106] = "0b00111110010001111101101000011111";
        ram[107] = "0b00111110000111000010011010011010";
        ram[108] = "0b10111101111111001001100100101000";
        ram[109] = "0b10111101111111010101000010101001";
        ram[110] = "0b00111101110110110100010101101011";
        ram[111] = "0b10111101100111101111110010111101";
        ram[112] = "0b00111110000100010111011011011110";
        ram[113] = "0b10111101111010000001000110110010";
        ram[114] = "0b10111110010000111101101100111100";
        ram[115] = "0b10111101011000100101001000000101";
        ram[116] = "0b10111110001011100000101100001011";
        ram[117] = "0b00111100101000000010100111010111";
        ram[118] = "0b10111101001101101101110001101011";
        ram[119] = "0b10111101010000101011011011100100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_3) {
meminst = new inference_conv2d_f3_1_1_3_ram("inference_conv2d_f3_1_1_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_3() {
    delete meminst;
}


};//endmodule
#endif
