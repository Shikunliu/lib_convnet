// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_5_H__
#define __inference_conv2d_f3_4_1_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_5_ram) {
        ram[0] = "0b10111101000011110100100011011110";
        ram[1] = "0b00111101111000100110010001011110";
        ram[2] = "0b10111110000110101001001010100011";
        ram[3] = "0b10111101001110010111010101010010";
        ram[4] = "0b00111011101110110010001010000000";
        ram[5] = "0b10111101101110100100011100100100";
        ram[6] = "0b10111101101101111000110110100000";
        ram[7] = "0b10111110001000101101011010101010";
        ram[8] = "0b10111100001100100110111000010001";
        ram[9] = "0b00111101111011110110101011010111";
        ram[10] = "0b10111101001101010000001010101100";
        ram[11] = "0b00111101111110101010000011001011";
        ram[12] = "0b10111100001000010010111101100101";
        ram[13] = "0b00111100011011000011010110110011";
        ram[14] = "0b10111110001110111110010001000111";
        ram[15] = "0b00111100100110100111110101011010";
        ram[16] = "0b10111101111000100110010111110001";
        ram[17] = "0b10111101001010110010011000000100";
        ram[18] = "0b10111110011010100110011011011100";
        ram[19] = "0b10111101000011101011100100011011";
        ram[20] = "0b10111100001110110010001111000010";
        ram[21] = "0b00111101111110001001001101110101";
        ram[22] = "0b00111101000010001000100000010100";
        ram[23] = "0b10111101101011100010001011001011";
        ram[24] = "0b00111101011101011000011101010001";
        ram[25] = "0b00111101111001100001011100111100";
        ram[26] = "0b00111110000011110110010011010000";
        ram[27] = "0b10111101011011001101110010100010";
        ram[28] = "0b00111101010010010110101001000010";
        ram[29] = "0b10111100101100010101100001101000";
        ram[30] = "0b10111011000101000011110011100011";
        ram[31] = "0b00111101101110011101010100001110";
        ram[32] = "0b10111101000110010111001111011010";
        ram[33] = "0b00111101101000011010101111101101";
        ram[34] = "0b00111101000110000100001100111101";
        ram[35] = "0b10111101110011101000001010010101";
        ram[36] = "0b10111101001000111111001010111001";
        ram[37] = "0b10111100000000011010001110101111";
        ram[38] = "0b00111100100110110010100010110000";
        ram[39] = "0b00111011100111110110011001111000";
        ram[40] = "0b00111110010001100010100010001001";
        ram[41] = "0b00111101101000001001001011001101";
        ram[42] = "0b00111101010011111000011110101101";
        ram[43] = "0b00111100111000001101001011011110";
        ram[44] = "0b10111101101101111101111000110110";
        ram[45] = "0b10111101000000010110100101010111";
        ram[46] = "0b10111101110101101010100000110011";
        ram[47] = "0b10111101101011001001011000000011";
        ram[48] = "0b00111101011011110111010101101110";
        ram[49] = "0b00111101010101111001011111001100";
        ram[50] = "0b00111100010111111111010011001000";
        ram[51] = "0b00111100000111100011101011011110";
        ram[52] = "0b00111101001110010100101101111011";
        ram[53] = "0b10111110000011101010010110110101";
        ram[54] = "0b00111101001101010010000011000100";
        ram[55] = "0b10111011011001001110011001001001";
        ram[56] = "0b00111101110111011001010001001011";
        ram[57] = "0b00111110010100000101110000000011";
        ram[58] = "0b10111101001010101111001001010010";
        ram[59] = "0b10111101101011011101000111110011";
        ram[60] = "0b10111010110110111001100000010111";
        ram[61] = "0b10111101110011111111011101011001";
        ram[62] = "0b10111110001101001100100101000011";
        ram[63] = "0b10111110000100110000000010011011";
        ram[64] = "0b10111110001001001010000100100111";
        ram[65] = "0b10111101111001001001000100101010";
        ram[66] = "0b10111101010111101111101110111110";
        ram[67] = "0b10111100110000111011110001001101";
        ram[68] = "0b10111101101001100110110100110111";
        ram[69] = "0b00111110001001001110110100101101";
        ram[70] = "0b10111101110011011101100010110110";
        ram[71] = "0b10111100111001010010101000100110";
        ram[72] = "0b10111011011111110110011110101010";
        ram[73] = "0b00111101101110110011100111111101";
        ram[74] = "0b00111011001011000001011111110110";
        ram[75] = "0b10111101011111000010101111001011";
        ram[76] = "0b10111110001111100000111111000011";
        ram[77] = "0b10111110000000010001011010101001";
        ram[78] = "0b00111110000101100111010101011000";
        ram[79] = "0b10111100010010110000011111010001";
        ram[80] = "0b00111100101100110001001000010001";
        ram[81] = "0b10111011101100000010100001111100";
        ram[82] = "0b10111110000110100100001101111000";
        ram[83] = "0b10111101111000000101111111110010";
        ram[84] = "0b10111101101110111011011010001111";
        ram[85] = "0b00111101101111110000110101011100";
        ram[86] = "0b10111101110011100100100111110101";
        ram[87] = "0b00111101101101100111101010100011";
        ram[88] = "0b10111101110101000100000000101001";
        ram[89] = "0b00111100111101110110111010010111";
        ram[90] = "0b10111101000000010010011001110001";
        ram[91] = "0b10111101010011101011101011001001";
        ram[92] = "0b00111101110110101110010011110011";
        ram[93] = "0b10111101100110101100100100000001";
        ram[94] = "0b10111101111000001111100100001001";
        ram[95] = "0b10111101111001000111001101000111";
        ram[96] = "0b10111101000011000000110011001110";
        ram[97] = "0b10111101011001101010000100000100";
        ram[98] = "0b10111110011000101001000111111011";
        ram[99] = "0b00111100000100010011011100110101";
        ram[100] = "0b00111101000001100011101001011100";
        ram[101] = "0b00111100101010110001010011101100";
        ram[102] = "0b10111101110111000100010000111001";
        ram[103] = "0b00111101100111000111101010001010";
        ram[104] = "0b10111110001000111001100101110000";
        ram[105] = "0b00111101011000111001100111001110";
        ram[106] = "0b00111101001111010100000001101000";
        ram[107] = "0b10111110000000000001111111111011";
        ram[108] = "0b00111101100110000011010010101010";
        ram[109] = "0b00111101011010111111111000111011";
        ram[110] = "0b00111110000011100001110010011011";
        ram[111] = "0b10111110000001000111001110001010";
        ram[112] = "0b00111101100011100001110110101000";
        ram[113] = "0b10111101100010111000100000000001";
        ram[114] = "0b00111101110001000101110100001100";
        ram[115] = "0b00111101100000101001001000111110";
        ram[116] = "0b10111101111000000001001001011010";
        ram[117] = "0b00111101100011001111100011100101";
        ram[118] = "0b10111101000011110101001011010100";
        ram[119] = "0b00111110011000000000010100111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_5) {
meminst = new inference_conv2d_f3_4_1_5_ram("inference_conv2d_f3_4_1_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_5() {
    delete meminst;
}


};//endmodule
#endif
