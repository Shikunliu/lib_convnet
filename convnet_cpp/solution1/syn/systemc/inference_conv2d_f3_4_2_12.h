// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_12_H__
#define __inference_conv2d_f3_4_2_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_12_ram) {
        ram[0] = "0b10111101001100111101001110100010";
        ram[1] = "0b00111101110011000111011111101011";
        ram[2] = "0b10111101010000111100011011100100";
        ram[3] = "0b10111100111100110111010011010111";
        ram[4] = "0b10111101000110000101011110110000";
        ram[5] = "0b10111101010000100110101010101001";
        ram[6] = "0b00111100111101111110011000100000";
        ram[7] = "0b10111110000010101100011111011010";
        ram[8] = "0b00111101100110100011010101101011";
        ram[9] = "0b00111101011011001110101011001010";
        ram[10] = "0b00111101100100101010111010001110";
        ram[11] = "0b00111100100111000001110100000010";
        ram[12] = "0b00111100110101110100110101011001";
        ram[13] = "0b10111101100110001011000011000100";
        ram[14] = "0b00111100100110100100000010001001";
        ram[15] = "0b10111101000110100101001001000001";
        ram[16] = "0b00111101100000001011100101111110";
        ram[17] = "0b10111101000111001100110100010000";
        ram[18] = "0b10111101111110100110101001000100";
        ram[19] = "0b10111100001111101101100011101110";
        ram[20] = "0b10111101101110111011010010010001";
        ram[21] = "0b00111110000111010011000000100111";
        ram[22] = "0b00111101001010010110001011010000";
        ram[23] = "0b00111101111010110100010100101000";
        ram[24] = "0b10111101011011101101001000010000";
        ram[25] = "0b10111100101011000110111001010011";
        ram[26] = "0b00111100110001000110111010001111";
        ram[27] = "0b00111100111000011101010011010001";
        ram[28] = "0b10111110000010110001111010011111";
        ram[29] = "0b10111101111111000111000011001010";
        ram[30] = "0b00111100001000000000001111000001";
        ram[31] = "0b00111100010011011101111110000111";
        ram[32] = "0b10111101110110111101001110000000";
        ram[33] = "0b00111101011100011111111010000000";
        ram[34] = "0b00111101100000110010100110101000";
        ram[35] = "0b00111100110110000100101110111100";
        ram[36] = "0b10111101101000101110110010010100";
        ram[37] = "0b00111101100110110100000011101001";
        ram[38] = "0b00111101111101111010111111101010";
        ram[39] = "0b10111100000011101001101101000100";
        ram[40] = "0b10111100100100111010110111111101";
        ram[41] = "0b10111100111100011100011010000001";
        ram[42] = "0b00111101110000010011101111100010";
        ram[43] = "0b10111110000001011011011000111101";
        ram[44] = "0b10111100110011010101001110100110";
        ram[45] = "0b00111101111001010100110101100010";
        ram[46] = "0b10111100011100000010100111001001";
        ram[47] = "0b10111110010100101110100110001010";
        ram[48] = "0b00111100111001011110001110111111";
        ram[49] = "0b10111101100100010100110110101000";
        ram[50] = "0b10111100000100100100011001001001";
        ram[51] = "0b00111101001001010010011001100000";
        ram[52] = "0b00111101100001011110011111110001";
        ram[53] = "0b00111101110001110011000110000010";
        ram[54] = "0b00111101001100011110101110111011";
        ram[55] = "0b00111101011000000010001011010000";
        ram[56] = "0b00111101111001111011111111101000";
        ram[57] = "0b10111100101110110100110000111100";
        ram[58] = "0b00111100101010100110101000000001";
        ram[59] = "0b00111100011110001010111001101000";
        ram[60] = "0b10111101100010011010011101100100";
        ram[61] = "0b10111101000101001101011100001101";
        ram[62] = "0b10111110000011010111000011100111";
        ram[63] = "0b10111101101001000001001010001100";
        ram[64] = "0b10111100001001111111000000001001";
        ram[65] = "0b10111101001100111011011110111101";
        ram[66] = "0b10111110000110111011101001010110";
        ram[67] = "0b00111101010010111110011110010101";
        ram[68] = "0b10111101101010100111101011001000";
        ram[69] = "0b00111100001001111000011100101110";
        ram[70] = "0b10111101110011110010011110111011";
        ram[71] = "0b00111101000101010101110111100110";
        ram[72] = "0b00111110010101111100110100000011";
        ram[73] = "0b00111100101111010110110011011101";
        ram[74] = "0b00111101110010001000001100110100";
        ram[75] = "0b10111101011011111111011100111111";
        ram[76] = "0b10111101101110011000000000111001";
        ram[77] = "0b10111110001010010101101011110011";
        ram[78] = "0b00111100001001101011000001101110";
        ram[79] = "0b10111101110110101110001101100001";
        ram[80] = "0b00111101011000101011100111010100";
        ram[81] = "0b10111101100101011011010001100111";
        ram[82] = "0b10111110000011011111011110100101";
        ram[83] = "0b10111101100000100111101010011001";
        ram[84] = "0b10111101101000101111101010010100";
        ram[85] = "0b10111101100110011011001010101001";
        ram[86] = "0b00111110000001101011111001111011";
        ram[87] = "0b00111101011101001010001001001110";
        ram[88] = "0b00111101111010111001000110110100";
        ram[89] = "0b10111101100101101100111100100111";
        ram[90] = "0b10111101011011010011111000001100";
        ram[91] = "0b00111110000001101011111010111110";
        ram[92] = "0b00111101100001001001011101110100";
        ram[93] = "0b00111101110111101101000101111100";
        ram[94] = "0b10111101011011110011000001010100";
        ram[95] = "0b00111101110001011011101000011110";
        ram[96] = "0b10111100110110100000011101001000";
        ram[97] = "0b10111110000000011100111101111000";
        ram[98] = "0b00111100100100110110100001011101";
        ram[99] = "0b10111101011011010001011001001110";
        ram[100] = "0b10111110001001110100001011011101";
        ram[101] = "0b00111100100011101011101011100100";
        ram[102] = "0b00111100110101101100100111011100";
        ram[103] = "0b00111110000000100101110000111110";
        ram[104] = "0b00111100100000110010100110000000";
        ram[105] = "0b00111101110110101101010010110010";
        ram[106] = "0b00111110000110011001011100111110";
        ram[107] = "0b10111101000010000111011110011110";
        ram[108] = "0b10111101101110100000110101011101";
        ram[109] = "0b10111011000110000010101010101111";
        ram[110] = "0b00111110001100010010101101011110";
        ram[111] = "0b10111101111011000101010000110111";
        ram[112] = "0b10111100001000100000001000010011";
        ram[113] = "0b10111101100000000111001101100101";
        ram[114] = "0b00111101010111100001101001001101";
        ram[115] = "0b10111110000110001110011010001110";
        ram[116] = "0b00111101100111110000111101001101";
        ram[117] = "0b00111101001111000011001101010111";
        ram[118] = "0b00111101001001100001100000010010";
        ram[119] = "0b10111100101001100100100101110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_12) {
meminst = new inference_conv2d_f3_4_2_12_ram("inference_conv2d_f3_4_2_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_12() {
    delete meminst;
}


};//endmodule
#endif
