// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_96_H__
#define __inference_mult_1_120_120_84_s_W4_96_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_96_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_96_ram) {
        ram[0] = "0b00111101110101101110001001100101";
        ram[1] = "0b10111100011111010001000110100100";
        ram[2] = "0b00111101010000000111010000010100";
        ram[3] = "0b00111100001111101001010111010010";
        ram[4] = "0b10111101101110100011000001110000";
        ram[5] = "0b00111101110110000111101001001010";
        ram[6] = "0b10111101110010001010111110001111";
        ram[7] = "0b00111101011101110101111011110111";
        ram[8] = "0b00111101100110111110111010110110";
        ram[9] = "0b10111100100011101010000010101101";
        ram[10] = "0b00111101110110111101110001101010";
        ram[11] = "0b10111100110001011001110011111000";
        ram[12] = "0b10111100101010001100110100010011";
        ram[13] = "0b00111100100011110011010111001000";
        ram[14] = "0b00111011101000101010110111101010";
        ram[15] = "0b00111101010001100111011100101101";
        ram[16] = "0b00111101011000001100000011010101";
        ram[17] = "0b10111101101100110100110010010011";
        ram[18] = "0b10111101111110101001111100111000";
        ram[19] = "0b00111100001101110100010100010001";
        ram[20] = "0b10111101100100010001101001100010";
        ram[21] = "0b00111101010001000110010000101110";
        ram[22] = "0b00111101001111110000110110101101";
        ram[23] = "0b10111110001101111010111000010100";
        ram[24] = "0b10111100110010111101011101101111";
        ram[25] = "0b10111101110010001100000100011111";
        ram[26] = "0b00111110000101010001001001100110";
        ram[27] = "0b10111101000101000100101101100001";
        ram[28] = "0b10111010110110100110010000001111";
        ram[29] = "0b10111100100000010000100010101001";
        ram[30] = "0b00111100000111010110010000101001";
        ram[31] = "0b00111101111001110001000111011000";
        ram[32] = "0b00111101000110111111101010000010";
        ram[33] = "0b00111110001101111001010000100001";
        ram[34] = "0b10111101101001101100001011010101";
        ram[35] = "0b00111101011011011001011101111101";
        ram[36] = "0b00111100111000110111011010010010";
        ram[37] = "0b00111100000111001101101100001101";
        ram[38] = "0b10111110000001111011010001011111";
        ram[39] = "0b00111101111010001000000101011110";
        ram[40] = "0b00111101000110000110010110100010";
        ram[41] = "0b00111101111101100111101000010000";
        ram[42] = "0b10111110001010110011010101101110";
        ram[43] = "0b10111101111101001000011111111101";
        ram[44] = "0b10111101000101010001010110001100";
        ram[45] = "0b10111100010000000101100100100001";
        ram[46] = "0b10111101011000010001011010000000";
        ram[47] = "0b00111110001001000010011010111011";
        ram[48] = "0b00111101101011011000111011110010";
        ram[49] = "0b00111110001100010111101110010110";
        ram[50] = "0b10111101000000101010001010001101";
        ram[51] = "0b00111101100111101100010000010000";
        ram[52] = "0b00111110010001001000011010101101";
        ram[53] = "0b00111101010000111010100110001000";
        ram[54] = "0b10111110000011011011010110010101";
        ram[55] = "0b10111101010101100000011100001000";
        ram[56] = "0b00111101101110111011001010111100";
        ram[57] = "0b10111100010110101010100110011010";
        ram[58] = "0b10111110000001110010001001011011";
        ram[59] = "0b00111110000100000011100000011001";
        ram[60] = "0b00111100110001100001100101010100";
        ram[61] = "0b00111110000100111000101000111011";
        ram[62] = "0b10111110010010001101000111011001";
        ram[63] = "0b00111110001011000010011010011010";
        ram[64] = "0b10111101000111101010100100000011";
        ram[65] = "0b00111100111111111001101101010110";
        ram[66] = "0b10111110001001011111011010111010";
        ram[67] = "0b00111100110010111111010100000001";
        ram[68] = "0b10111100110011100100011000010100";
        ram[69] = "0b00111101000011001111110111000101";
        ram[70] = "0b00111100100000100011011001110001";
        ram[71] = "0b00111110001000011001110100100100";
        ram[72] = "0b00111101110111110111110001100111";
        ram[73] = "0b00111101110100110100111110000011";
        ram[74] = "0b00111101011101001010110110000111";
        ram[75] = "0b00111101101010000000000011111000";
        ram[76] = "0b10111101001001011111111100000011";
        ram[77] = "0b10111110000001110011111101110101";
        ram[78] = "0b00111110000011101111110101000100";
        ram[79] = "0b10111100011100111010110101110111";
        ram[80] = "0b10111101100010001110001010111010";
        ram[81] = "0b00111101110100100111010001011100";
        ram[82] = "0b00111110000101010101110110100010";
        ram[83] = "0b10111101111111111111010110000100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_96) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_96_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_96) {
meminst = new inference_mult_1_120_120_84_s_W4_96_ram("inference_mult_1_120_120_84_s_W4_96_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_96() {
    delete meminst;
}


};//endmodule
#endif
