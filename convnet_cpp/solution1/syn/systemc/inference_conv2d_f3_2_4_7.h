// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_7_H__
#define __inference_conv2d_f3_2_4_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_7_ram) {
        ram[0] = "0b10111100111101001001000011001100";
        ram[1] = "0b10111101001100110000110110101001";
        ram[2] = "0b10111011101110001100111001010011";
        ram[3] = "0b10111110001011011011111011000010";
        ram[4] = "0b00111101101001110010111100011001";
        ram[5] = "0b10111101110101101001011001011111";
        ram[6] = "0b10111101100110110101000101011111";
        ram[7] = "0b10111110000001000100110001111011";
        ram[8] = "0b10111101100111101000110111101000";
        ram[9] = "0b10111100011101001010101110100100";
        ram[10] = "0b10111101101110110101110000111010";
        ram[11] = "0b10111101111110001001000001001111";
        ram[12] = "0b00111101110001111101001011010101";
        ram[13] = "0b00111100100000011011000001101111";
        ram[14] = "0b10111101011110001100000000111011";
        ram[15] = "0b10111101110010100000011100010010";
        ram[16] = "0b00111011110000101001010001100101";
        ram[17] = "0b10111101110010110110010001101000";
        ram[18] = "0b00111101100100110011011111101011";
        ram[19] = "0b10111101111010010001111110110100";
        ram[20] = "0b00111101111011111110001111110011";
        ram[21] = "0b10111011100011111101101100101010";
        ram[22] = "0b10111011101001110000100110101111";
        ram[23] = "0b00111101100001010011001010110010";
        ram[24] = "0b10111110000010000110111000111011";
        ram[25] = "0b10111100011111100011001000110101";
        ram[26] = "0b00111100111100101100110011011100";
        ram[27] = "0b10111100110000011000111111101101";
        ram[28] = "0b10111000101000001110011010000010";
        ram[29] = "0b00111110000010111011101111101000";
        ram[30] = "0b10111101010111000101001110100011";
        ram[31] = "0b00111110000000110001011000011010";
        ram[32] = "0b10111100000111110011001010100000";
        ram[33] = "0b10111101001001010001110010000101";
        ram[34] = "0b00111110000111100011000000000001";
        ram[35] = "0b10111101011110100000101011011001";
        ram[36] = "0b10111101111000101110111101001110";
        ram[37] = "0b10111100101010100010001011101001";
        ram[38] = "0b00111110000000010100001001110000";
        ram[39] = "0b10111101101000110101010110011000";
        ram[40] = "0b10111101000101110101111101111101";
        ram[41] = "0b10111101011111001001100100101000";
        ram[42] = "0b00111011100000000111010000000100";
        ram[43] = "0b10111101011000100101000010001101";
        ram[44] = "0b00111101110001000011110100011110";
        ram[45] = "0b00111101101100101100000110001001";
        ram[46] = "0b00111101100010010010111011001101";
        ram[47] = "0b00111101101011010110010011001011";
        ram[48] = "0b10111100100111010110001011100111";
        ram[49] = "0b00111101110010100101111101110111";
        ram[50] = "0b00111101001100011010101111000100";
        ram[51] = "0b00111101100101110001011110000001";
        ram[52] = "0b00111101010111001110100111001011";
        ram[53] = "0b10111100110111000001011001001100";
        ram[54] = "0b10111101101100010011001010001101";
        ram[55] = "0b00111101001100010100011110000110";
        ram[56] = "0b00111101010000100101101010111001";
        ram[57] = "0b00111110000111111011111111000110";
        ram[58] = "0b10111110000101011011000110000101";
        ram[59] = "0b00111101101110101110001010010111";
        ram[60] = "0b10111101111101001001011110110111";
        ram[61] = "0b10111101111111001111100010010100";
        ram[62] = "0b10111011100111010110101101100000";
        ram[63] = "0b00111101100011010101000111101011";
        ram[64] = "0b00111101100110100001010010100111";
        ram[65] = "0b00111101110010100001010100101101";
        ram[66] = "0b10111101111010011010100000000101";
        ram[67] = "0b00111110000110010011100000010101";
        ram[68] = "0b10111101001101111010101010101100";
        ram[69] = "0b00111100111011011010110111101110";
        ram[70] = "0b10111100010010011100111011101100";
        ram[71] = "0b00111101000100100101011000001110";
        ram[72] = "0b10111101001101101101000111101110";
        ram[73] = "0b10111010010100100010101011011011";
        ram[74] = "0b00111100001000110011110010110001";
        ram[75] = "0b10111101100110010011001000000000";
        ram[76] = "0b00111011100000001110011010110000";
        ram[77] = "0b00111100111010011001101111011011";
        ram[78] = "0b00111101100101110100101010111010";
        ram[79] = "0b10111101101010010100101110110001";
        ram[80] = "0b10111110001001110011000100001010";
        ram[81] = "0b10111101111101000000000010111001";
        ram[82] = "0b00111011001001110101001111101100";
        ram[83] = "0b10111101100111110000110011111110";
        ram[84] = "0b00111101101111110100110010010111";
        ram[85] = "0b10111101110001101110101100110100";
        ram[86] = "0b00111110001001100011100101010000";
        ram[87] = "0b10111101010111001000100111011001";
        ram[88] = "0b00111100101011100111000001010110";
        ram[89] = "0b00111101000010101001001101010010";
        ram[90] = "0b10111101001011001110100011001100";
        ram[91] = "0b00111101001000000101000100001110";
        ram[92] = "0b10111101100110100100001111100100";
        ram[93] = "0b10111101100110100101001011111101";
        ram[94] = "0b10111100111001011110001101010100";
        ram[95] = "0b00111101110001001101011110100000";
        ram[96] = "0b10111101110010000010011001100111";
        ram[97] = "0b10111110000100001101101100100111";
        ram[98] = "0b10111011000000011101111010111101";
        ram[99] = "0b00111100111100100100101101000001";
        ram[100] = "0b00111100110110000001101000001000";
        ram[101] = "0b00111101101001010001101110100000";
        ram[102] = "0b00111101010000111100101011111011";
        ram[103] = "0b10111101110111010010011000110001";
        ram[104] = "0b00111101010100000010101010111011";
        ram[105] = "0b10111011011001010111000101011110";
        ram[106] = "0b00111101100000000110011000000111";
        ram[107] = "0b00111100111001010101101101101111";
        ram[108] = "0b00111100001101001111101111110110";
        ram[109] = "0b10111101000101111111100000001111";
        ram[110] = "0b00111101010011001111010010100101";
        ram[111] = "0b10111101101111100100010001100110";
        ram[112] = "0b00111101110100111111001110011101";
        ram[113] = "0b00111100101110001100011011110001";
        ram[114] = "0b10111110000011010010000110111100";
        ram[115] = "0b10111101001001101001110100111110";
        ram[116] = "0b00111101110110010001100100100110";
        ram[117] = "0b10111100001110011110011010101100";
        ram[118] = "0b10111101110010010001111111000001";
        ram[119] = "0b00111100000010111100100000100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_7) {
meminst = new inference_conv2d_f3_2_4_7_ram("inference_conv2d_f3_2_4_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_7() {
    delete meminst;
}


};//endmodule
#endif
