// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_6_H__
#define __inference_conv2d_f3_3_3_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_6_ram) {
        ram[0] = "0b00111100011000100100101001111000";
        ram[1] = "0b10111101110000100101010000000011";
        ram[2] = "0b10111101010010100011110111000001";
        ram[3] = "0b00111100000001001000111100110001";
        ram[4] = "0b00111110010001111000111100100110";
        ram[5] = "0b00111011111011111010110111001101";
        ram[6] = "0b10111101010100000011101111101101";
        ram[7] = "0b10111101100011010101001000000110";
        ram[8] = "0b00111101011110010110101010100000";
        ram[9] = "0b00111101011111011000100111001110";
        ram[10] = "0b10111101001111010000110111011101";
        ram[11] = "0b10111101110111001100010010101100";
        ram[12] = "0b10111110000111011000000111110001";
        ram[13] = "0b10111100110100011111001001110001";
        ram[14] = "0b10111101000010011101001110111110";
        ram[15] = "0b00111101100001000101001011010011";
        ram[16] = "0b00111101011010111010010000001110";
        ram[17] = "0b10111001101110000111010000110110";
        ram[18] = "0b10111100000111010111001111100100";
        ram[19] = "0b00111110001000010000100100000111";
        ram[20] = "0b00111101101010010010001101111010";
        ram[21] = "0b00111100000101111000100100101001";
        ram[22] = "0b10111101011010011001011110101001";
        ram[23] = "0b10111110010000101100000010100101";
        ram[24] = "0b10111110000101000111101011100001";
        ram[25] = "0b10111100101011010101101000001011";
        ram[26] = "0b00111010111111010101111010111011";
        ram[27] = "0b00111110000110011011010100100000";
        ram[28] = "0b00111101011010010100001010111010";
        ram[29] = "0b10111101100101001110011111101111";
        ram[30] = "0b10111101001010001100110000111101";
        ram[31] = "0b00111110000010011110110010110011";
        ram[32] = "0b10111110001110011101101101100110";
        ram[33] = "0b10111101100010110100110100010011";
        ram[34] = "0b00111101101010001100010101000011";
        ram[35] = "0b00111101101111100000110111101101";
        ram[36] = "0b10111101011111000010111010011111";
        ram[37] = "0b10111100101011011011111101010110";
        ram[38] = "0b10111110000100010011010110011000";
        ram[39] = "0b00111100100000101000001011000111";
        ram[40] = "0b00111101101010111011111001000100";
        ram[41] = "0b00111100111111000100101101000000";
        ram[42] = "0b10111101100010110011100010010011";
        ram[43] = "0b10111100010100100101100010010010";
        ram[44] = "0b00111101011101100111100110100100";
        ram[45] = "0b10111110000001101011111100000001";
        ram[46] = "0b10111101110000001111100011101111";
        ram[47] = "0b10111100001100100110101001001011";
        ram[48] = "0b00111110000010101101001010011010";
        ram[49] = "0b10111110000101110011010101111110";
        ram[50] = "0b00111110001111010111100010000001";
        ram[51] = "0b00111101111000010010011100101101";
        ram[52] = "0b00111011101100110001101011110101";
        ram[53] = "0b00111010000011101101000001110000";
        ram[54] = "0b00111101101101001111101100011111";
        ram[55] = "0b10111101000011101101010010101111";
        ram[56] = "0b10111101010010101000000011000010";
        ram[57] = "0b00111100100111110100000010100011";
        ram[58] = "0b10111110001000100111010001011100";
        ram[59] = "0b00111101110011000110101111001111";
        ram[60] = "0b00111101000010101110001101010011";
        ram[61] = "0b00111101111111010110010000001111";
        ram[62] = "0b00111101110111000101111001110000";
        ram[63] = "0b00111110001110110111100101010011";
        ram[64] = "0b10111101100000011101011110100110";
        ram[65] = "0b00111110000000001101000100110001";
        ram[66] = "0b10111101100001011101001110110100";
        ram[67] = "0b10111101101100110111101010110110";
        ram[68] = "0b00111101110100000101001000001101";
        ram[69] = "0b00111100101011110011111111110100";
        ram[70] = "0b00111100010101110000000100000011";
        ram[71] = "0b10111101110111000011100100110111";
        ram[72] = "0b10111100101101110011010010110101";
        ram[73] = "0b10111100101101110101100101101000";
        ram[74] = "0b10111101111101110100011000000010";
        ram[75] = "0b10111101001101101101000000100110";
        ram[76] = "0b10111110001010111100010101011000";
        ram[77] = "0b00111101010000010001100100100000";
        ram[78] = "0b10111101000101011111101011011110";
        ram[79] = "0b00111100111010001001110000110110";
        ram[80] = "0b00111101110111100011101100000100";
        ram[81] = "0b10111101111011101001100100100000";
        ram[82] = "0b00111100110100011110001000010101";
        ram[83] = "0b10111110000000000000001101101000";
        ram[84] = "0b10111101100110010000110110011101";
        ram[85] = "0b00111100010011101111111110101101";
        ram[86] = "0b10111100100110111100111101101001";
        ram[87] = "0b00111011101010111011001100110111";
        ram[88] = "0b10111101101100111110110110010110";
        ram[89] = "0b10111110000100010110110101101110";
        ram[90] = "0b10111110000101011100011000111011";
        ram[91] = "0b10111101101111101000011001001110";
        ram[92] = "0b10111101011000011000010100100000";
        ram[93] = "0b00111101100100011100101010100110";
        ram[94] = "0b10111110000001010101001100100110";
        ram[95] = "0b00111101110000101010001110100110";
        ram[96] = "0b00111101101111101000100000010110";
        ram[97] = "0b10111100001000101001001101001000";
        ram[98] = "0b10111101010100110000011100101001";
        ram[99] = "0b00111101000111110110010111000001";
        ram[100] = "0b10111101111100100110111100011110";
        ram[101] = "0b10111100101011001110000001101001";
        ram[102] = "0b10111110000010100110000000001011";
        ram[103] = "0b00111100101011010100100011011001";
        ram[104] = "0b10111101111100000010011010001001";
        ram[105] = "0b10111100100111100101100000010000";
        ram[106] = "0b00111101101110100010010000101011";
        ram[107] = "0b00111100110000111011100010111100";
        ram[108] = "0b10111110001011100010100000100100";
        ram[109] = "0b00111011101001010101001001001010";
        ram[110] = "0b00111101100011011000011010110110";
        ram[111] = "0b00111110001010100011001011110100";
        ram[112] = "0b10111101100011100010010000001101";
        ram[113] = "0b10111101100010110000111010100010";
        ram[114] = "0b00111110001101000101101100101001";
        ram[115] = "0b00111100100010110010111011010010";
        ram[116] = "0b00111100010110101001000000000100";
        ram[117] = "0b10111011101110010110110100110100";
        ram[118] = "0b10111101000001000101101001101101";
        ram[119] = "0b00111101111011000000110011101001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_6) {
meminst = new inference_conv2d_f3_3_3_6_ram("inference_conv2d_f3_3_3_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_6() {
    delete meminst;
}


};//endmodule
#endif
