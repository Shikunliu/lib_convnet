// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_6_H__
#define __inference_conv2d_f3_3_0_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_6_ram) {
        ram[0] = "0b10111110001000110100101100001110";
        ram[1] = "0b00111110010010110101100110011011";
        ram[2] = "0b00111101100100110111110011000010";
        ram[3] = "0b00111110001000110111110111101001";
        ram[4] = "0b00111001101110010110110111111110";
        ram[5] = "0b10111101011011110101011100111011";
        ram[6] = "0b10111100001101010110101100011100";
        ram[7] = "0b00111110000111101101111111100111";
        ram[8] = "0b00111101100011000111100011101010";
        ram[9] = "0b10111101101111111011000111010100";
        ram[10] = "0b10111100100100010001000010010100";
        ram[11] = "0b10111101101000011011000101100000";
        ram[12] = "0b10111101101001111001001100010100";
        ram[13] = "0b00111101000111000100011100001110";
        ram[14] = "0b10111101000000001001001100111000";
        ram[15] = "0b10111100010111100010011000100110";
        ram[16] = "0b10111101110100101001010111101010";
        ram[17] = "0b10111101111101101000000011100000";
        ram[18] = "0b10111101110000100110100111111010";
        ram[19] = "0b00111101100010000000000011111000";
        ram[20] = "0b10111101011011010010101101100010";
        ram[21] = "0b10111101001110100111011000011110";
        ram[22] = "0b00111011010010111110110110101010";
        ram[23] = "0b10111101001010010010100010000011";
        ram[24] = "0b00111101100001000111000111111000";
        ram[25] = "0b10111101101111011001011010110100";
        ram[26] = "0b00111100110100111101001001111011";
        ram[27] = "0b10111101111100010011011100101010";
        ram[28] = "0b00111110001100111010010001110010";
        ram[29] = "0b10111101100011011110100110110011";
        ram[30] = "0b10111101100001001111101011101001";
        ram[31] = "0b10111100111100110101100010001000";
        ram[32] = "0b00111101101111011110111111010101";
        ram[33] = "0b00111101010011011000100001111111";
        ram[34] = "0b00111101110001000011011001110110";
        ram[35] = "0b10111101110001110001000011011001";
        ram[36] = "0b00111101101101101100100010011001";
        ram[37] = "0b10111101001110100111110000011000";
        ram[38] = "0b00111101110110000010100010000000";
        ram[39] = "0b10111110000000110001101110011011";
        ram[40] = "0b00111101111011011010000010011101";
        ram[41] = "0b00111101110000011101000110011111";
        ram[42] = "0b00111100111010101100111110110111";
        ram[43] = "0b00111101111110001100011001010000";
        ram[44] = "0b00111110000101111000000011111110";
        ram[45] = "0b00111101101000101110000011010110";
        ram[46] = "0b00111110011001100111101000010000";
        ram[47] = "0b00111100100001010000000000011010";
        ram[48] = "0b10111101001111011100101010110110";
        ram[49] = "0b00111101000110100011010010101111";
        ram[50] = "0b10111110001001011100100011011010";
        ram[51] = "0b00111101110001100010010011000010";
        ram[52] = "0b00111101100010111110101010101101";
        ram[53] = "0b10111101111001111100101011101010";
        ram[54] = "0b00111100010101110110100101110011";
        ram[55] = "0b00111101100011000010010011010001";
        ram[56] = "0b10111100111111111001011111000110";
        ram[57] = "0b00111110000000101110000101101001";
        ram[58] = "0b10111101000111111101101111101110";
        ram[59] = "0b10111101101111011111100101100000";
        ram[60] = "0b10111011001000101000111001100000";
        ram[61] = "0b10111110000001001011011100101100";
        ram[62] = "0b10111101101100000111111000001010";
        ram[63] = "0b10111110000000101100101000010101";
        ram[64] = "0b00111101111101010100100111111001";
        ram[65] = "0b10111101000010000100101111001001";
        ram[66] = "0b10111101000101001000111001000111";
        ram[67] = "0b00111110001011010101010000010001";
        ram[68] = "0b00111110000100110101000001001100";
        ram[69] = "0b10111110001001100011010001010101";
        ram[70] = "0b00111101100010001111111001011100";
        ram[71] = "0b10111110000000001011011000110001";
        ram[72] = "0b00111100110001000011110000000101";
        ram[73] = "0b10111101011000110100101101111001";
        ram[74] = "0b10111100000101101100001110100110";
        ram[75] = "0b10111110000001100010010111101010";
        ram[76] = "0b00111110010000001100000111111101";
        ram[77] = "0b00111100101011011111100101101101";
        ram[78] = "0b00111101100001101010001101101101";
        ram[79] = "0b00111100100000100000110011101011";
        ram[80] = "0b10111110000000011100010000110011";
        ram[81] = "0b10111100000101000111111111111111";
        ram[82] = "0b10111101100000100111110010010111";
        ram[83] = "0b00111101100111010100010100000101";
        ram[84] = "0b00111110001000101100100010000010";
        ram[85] = "0b10111110000010100010111110001100";
        ram[86] = "0b10111101000101100111110001000011";
        ram[87] = "0b10111101100001000110100000101010";
        ram[88] = "0b10111101100111000101000101101111";
        ram[89] = "0b00111101101111101100001100010001";
        ram[90] = "0b00111101011011111010000101011110";
        ram[91] = "0b10111011101011010000110111010101";
        ram[92] = "0b00111110001110011101000100101101";
        ram[93] = "0b10111101111011000011010101001000";
        ram[94] = "0b00111100000111001000001100111001";
        ram[95] = "0b00111101010110110011110011010010";
        ram[96] = "0b10111101010010010111010011110100";
        ram[97] = "0b10111010000100100010111100110001";
        ram[98] = "0b00111101100101110011100000000011";
        ram[99] = "0b10111101000100001011100010011010";
        ram[100] = "0b00111101101000011010000100010010";
        ram[101] = "0b10111101101111101110110111100111";
        ram[102] = "0b00111110000010011011100100001111";
        ram[103] = "0b00111110000111000000001000101010";
        ram[104] = "0b10111100111011011011111111110111";
        ram[105] = "0b00111101100110000010100010000000";
        ram[106] = "0b10111101110000000101100010101000";
        ram[107] = "0b00111101010110011000011100100101";
        ram[108] = "0b10111100011010110000000111010111";
        ram[109] = "0b10111101001110001001011100000101";
        ram[110] = "0b00111101110000100101111000111100";
        ram[111] = "0b10111011001000111100001110111111";
        ram[112] = "0b00111101101110010011111010100011";
        ram[113] = "0b10111101101101010011101100111110";
        ram[114] = "0b00111100110010000010101010100111";
        ram[115] = "0b10111100011100110101001101001001";
        ram[116] = "0b10111101000100001001110010011011";
        ram[117] = "0b10111100110000001111011110101100";
        ram[118] = "0b10111110001101110111101101111100";
        ram[119] = "0b10111110000011010111000011100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_6) {
meminst = new inference_conv2d_f3_3_0_6_ram("inference_conv2d_f3_3_0_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_6() {
    delete meminst;
}


};//endmodule
#endif
