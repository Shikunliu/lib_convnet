// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_99_H__
#define __inference_mult_1_120_120_84_s_W4_99_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_99_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_99_ram) {
        ram[0] = "0b10111101100100100010110100001110";
        ram[1] = "0b10111101101000001111011010010011";
        ram[2] = "0b10111101000010110001010011010001";
        ram[3] = "0b00111101000010010001111001010111";
        ram[4] = "0b10111110000011001110101010101111";
        ram[5] = "0b00111101111100000001000100001010";
        ram[6] = "0b10111110001110001101100011101101";
        ram[7] = "0b00111110001001111010101010101100";
        ram[8] = "0b10111110000011010001111010010111";
        ram[9] = "0b10111101010000001101111001100111";
        ram[10] = "0b10111101110110101111110110010111";
        ram[11] = "0b10111110011001101100011011011110";
        ram[12] = "0b10111101001011010001100111011111";
        ram[13] = "0b00111101010011100111110111011101";
        ram[14] = "0b10111101111111111000110110110101";
        ram[15] = "0b00111100010010010101111101011010";
        ram[16] = "0b10111101111101111100100010001110";
        ram[17] = "0b10111101000010110001100011101000";
        ram[18] = "0b10111101010111100101110110111001";
        ram[19] = "0b10111101000000010011010111011011";
        ram[20] = "0b00111100011101011110100010111010";
        ram[21] = "0b10111100100001101100001001011100";
        ram[22] = "0b00111011101011111010010011011110";
        ram[23] = "0b10111101111010110100101101110011";
        ram[24] = "0b00111011100110001000000010010101";
        ram[25] = "0b10111101000000101101101110010111";
        ram[26] = "0b00111101111010100111111011111010";
        ram[27] = "0b10111101001000110100000100110011";
        ram[28] = "0b10111110001010110000110010001001";
        ram[29] = "0b00111101111010000001010001010001";
        ram[30] = "0b00111101101100001000000000100011";
        ram[31] = "0b00111101110000111110010000011000";
        ram[32] = "0b10111101010000111110110111100110";
        ram[33] = "0b10111101111001011101111100100010";
        ram[34] = "0b10111110000000000101101000101101";
        ram[35] = "0b00111101001001001110000001010100";
        ram[36] = "0b10111101011010101001100000001001";
        ram[37] = "0b00111101100000001001000111000001";
        ram[38] = "0b00111101101110111101101100000000";
        ram[39] = "0b10111100010011001001100011001010";
        ram[40] = "0b00111110000110111001010111100110";
        ram[41] = "0b00111101010001010010110000100100";
        ram[42] = "0b10111110010000010010111110010000";
        ram[43] = "0b10111110010101010001001111111001";
        ram[44] = "0b00111101101101100010011000011111";
        ram[45] = "0b10111100101010011010111001001111";
        ram[46] = "0b10111101101000101110111100011000";
        ram[47] = "0b00111100110110011011000001110101";
        ram[48] = "0b10111101101110010101010101110001";
        ram[49] = "0b00111101101010110110101101101110";
        ram[50] = "0b00111101001010111010101101100101";
        ram[51] = "0b00111011110011111011111111000110";
        ram[52] = "0b00111011001101111101110110100111";
        ram[53] = "0b10111101011110110100001110111110";
        ram[54] = "0b10111101010111010100110101101000";
        ram[55] = "0b10111100101101100010101101101011";
        ram[56] = "0b10111101010001100011101110011110";
        ram[57] = "0b00111110000000110110010000111001";
        ram[58] = "0b00111100001101111001101000110110";
        ram[59] = "0b00111110000110100111111001110100";
        ram[60] = "0b00111101000100000110000100001100";
        ram[61] = "0b10111101101101010010101001110111";
        ram[62] = "0b00111101000001010100000111110100";
        ram[63] = "0b10111100110101101010110011101011";
        ram[64] = "0b00111101101100011001101110010001";
        ram[65] = "0b10111110000110010010100100100100";
        ram[66] = "0b10111101101011011101100100100001";
        ram[67] = "0b10111101101001100010011001100010";
        ram[68] = "0b00111101110111001100110010001010";
        ram[69] = "0b00111101110010111001011111010110";
        ram[70] = "0b10111101011101111011110001100101";
        ram[71] = "0b00111110001000011111111000100010";
        ram[72] = "0b10111101010100100001111111011000";
        ram[73] = "0b00111110000010100100111000111000";
        ram[74] = "0b00111101000010100001100000000001";
        ram[75] = "0b00111110001111111110111110111111";
        ram[76] = "0b10111101100100100010001100110011";
        ram[77] = "0b10111101011010100000000100001011";
        ram[78] = "0b00111101010111110101000100011001";
        ram[79] = "0b00111101110010110011101001000000";
        ram[80] = "0b10111101001000011011101101010111";
        ram[81] = "0b10111100110101101101100000011110";
        ram[82] = "0b00111011100100010110101000001011";
        ram[83] = "0b10111101100111100011001011001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_99) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_99_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_99) {
meminst = new inference_mult_1_120_120_84_s_W4_99_ram("inference_mult_1_120_120_84_s_W4_99_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_99() {
    delete meminst;
}


};//endmodule
#endif
