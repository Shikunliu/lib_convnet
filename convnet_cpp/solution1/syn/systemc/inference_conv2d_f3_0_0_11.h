// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_11_H__
#define __inference_conv2d_f3_0_0_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_11_ram) {
        ram[0] = "0b10111101111001111010010100101011";
        ram[1] = "0b10111110001010001001111011111110";
        ram[2] = "0b00111011101111000100011100011001";
        ram[3] = "0b00111110000110110001100100011110";
        ram[4] = "0b00111101101001111100110001111101";
        ram[5] = "0b00111101111100110000101001001110";
        ram[6] = "0b10111100001110011011101101111000";
        ram[7] = "0b00111110001000010011000011100000";
        ram[8] = "0b10111101101011111011011111011100";
        ram[9] = "0b00111101110111001110100111100110";
        ram[10] = "0b10111110000000010011010100010001";
        ram[11] = "0b00111110010111010101110110000001";
        ram[12] = "0b10111101110100101100101111101010";
        ram[13] = "0b00111101001011110011001100001110";
        ram[14] = "0b00111101000110110101101110100110";
        ram[15] = "0b10111101100110100111010001001000";
        ram[16] = "0b10111101100001001110011111000110";
        ram[17] = "0b00111100111000101010010111101000";
        ram[18] = "0b10111101101000101101100001110010";
        ram[19] = "0b10111011100011111000110011111011";
        ram[20] = "0b10111110000010111101110101110110";
        ram[21] = "0b00111110001000110101111110000001";
        ram[22] = "0b00111100101110111010101001100110";
        ram[23] = "0b00111101101100000101010101011011";
        ram[24] = "0b00111101101000100001100010011100";
        ram[25] = "0b10111110001001010101010111000101";
        ram[26] = "0b10111101101011001111001101001000";
        ram[27] = "0b00111110000100101100111100010000";
        ram[28] = "0b00111101100011001100000011011001";
        ram[29] = "0b00111101101101100000100101100100";
        ram[30] = "0b00111110000000100110010000011011";
        ram[31] = "0b10111110010000100001010101110111";
        ram[32] = "0b10111101000110000100111101100111";
        ram[33] = "0b10111101111110011001111101011110";
        ram[34] = "0b10111101000111011011011001000100";
        ram[35] = "0b10111101100000110010111011100111";
        ram[36] = "0b00111110001111100011011111011111";
        ram[37] = "0b00111100000001110101100111011100";
        ram[38] = "0b10111110010101001000111010001010";
        ram[39] = "0b10111101111111010001011110000011";
        ram[40] = "0b00111101010100111111001111101110";
        ram[41] = "0b00111101110100101001101010100010";
        ram[42] = "0b10111110001000111101101101111111";
        ram[43] = "0b00111101000010100111111001110100";
        ram[44] = "0b10111101010001100000101011000001";
        ram[45] = "0b10111110001111100000001000100001";
        ram[46] = "0b10111101000101110010100100101100";
        ram[47] = "0b10111100100110011001011001110100";
        ram[48] = "0b10111100011011001010000100010011";
        ram[49] = "0b10111101100100011011101111000010";
        ram[50] = "0b00111100110000101000110101111001";
        ram[51] = "0b10111101111101000110000110110111";
        ram[52] = "0b10111100111000101001100011100111";
        ram[53] = "0b10111101110000100110101011101100";
        ram[54] = "0b10111110001110000011111011001001";
        ram[55] = "0b00111110010101011000110001001100";
        ram[56] = "0b00111101101000111000010110101100";
        ram[57] = "0b00111100101011001101010111101100";
        ram[58] = "0b10111101011100010110110011110101";
        ram[59] = "0b10111101101011111101101001110110";
        ram[60] = "0b00111101010100010001100000111011";
        ram[61] = "0b00111100111011100110011110111101";
        ram[62] = "0b10111101001000110101111001110100";
        ram[63] = "0b10111101110100001001010100101001";
        ram[64] = "0b00111101110100010101011010011111";
        ram[65] = "0b00111101001101011001111100011110";
        ram[66] = "0b10111101101001100010100101101101";
        ram[67] = "0b10111101011110110100110001110010";
        ram[68] = "0b00111110001110101001111010110010";
        ram[69] = "0b10111110000111011000011010101001";
        ram[70] = "0b10111010100001100010001001000011";
        ram[71] = "0b10111101111101000010110101001001";
        ram[72] = "0b00111110000100000100101011111001";
        ram[73] = "0b00111100010110110100000010011000";
        ram[74] = "0b10111101100011101110100011000100";
        ram[75] = "0b00111011001010011111011000001000";
        ram[76] = "0b10111101100011001011111011011011";
        ram[77] = "0b00111110000010110110110010111110";
        ram[78] = "0b00111010111111010100101010011001";
        ram[79] = "0b00111110000000101000010001011010";
        ram[80] = "0b00111100000111010110111100110001";
        ram[81] = "0b00111101010001100011000001001011";
        ram[82] = "0b00111110011111100000110011100001";
        ram[83] = "0b00111110000011101001101110111111";
        ram[84] = "0b00111100000011010010100101111110";
        ram[85] = "0b10111011000101101001111010010010";
        ram[86] = "0b10111101110000010110100110001101";
        ram[87] = "0b10111110010111011101101001001001";
        ram[88] = "0b10111100011110011011110101011011";
        ram[89] = "0b10111110010110000001110101111110";
        ram[90] = "0b00111110001111111100111100111110";
        ram[91] = "0b00111110001000101000100110011000";
        ram[92] = "0b00111101100110111110111001110011";
        ram[93] = "0b10111101010001110010001011101111";
        ram[94] = "0b00111101000101001011101110101111";
        ram[95] = "0b00111101001110110100000001111110";
        ram[96] = "0b10111100101001001100100101000011";
        ram[97] = "0b10111110001001001110101111011101";
        ram[98] = "0b00111011000101101100110001100000";
        ram[99] = "0b10111110000111001111111010011011";
        ram[100] = "0b00111101101010010100111100001100";
        ram[101] = "0b10111101000000011011111011100111";
        ram[102] = "0b00111110001110010000000011000101";
        ram[103] = "0b00111101000001101010001110001000";
        ram[104] = "0b10111100011000001011100010100111";
        ram[105] = "0b10111101110101100101011101110101";
        ram[106] = "0b00111100001101000000110110111001";
        ram[107] = "0b00111101111101001001100101001010";
        ram[108] = "0b10111101011011001011001001100000";
        ram[109] = "0b10111101100110100111110110011101";
        ram[110] = "0b10111101111100111010010011111000";
        ram[111] = "0b10111101100100010101111000111001";
        ram[112] = "0b00111101010100010010001011010011";
        ram[113] = "0b00111100010101000010001010010111";
        ram[114] = "0b10111110001100011010101110001111";
        ram[115] = "0b10111101100111010000110001001011";
        ram[116] = "0b10111101101110010111000101010110";
        ram[117] = "0b10111110000110000101110101110100";
        ram[118] = "0b00111101000101000111100000100111";
        ram[119] = "0b10111110000011110100101111101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_11) {
meminst = new inference_conv2d_f3_0_0_11_ram("inference_conv2d_f3_0_0_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_11() {
    delete meminst;
}


};//endmodule
#endif
