// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_14_H__
#define __inference_conv2d_f3_1_2_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_14_ram) {
        ram[0] = "0b00111100100000000101100010110110";
        ram[1] = "0b10111101000011101111101110110001";
        ram[2] = "0b00111110000101100001010001011001";
        ram[3] = "0b00111110000101001001101011011101";
        ram[4] = "0b10111101001110010010110101100011";
        ram[5] = "0b00111110000000110100101001000101";
        ram[6] = "0b10111110000011110010100100001011";
        ram[7] = "0b00111101100011111011100010001010";
        ram[8] = "0b00111011100010010101011100010111";
        ram[9] = "0b10111100001000100100001010001011";
        ram[10] = "0b00111101011100101011101110101010";
        ram[11] = "0b10111101100111111000101010110111";
        ram[12] = "0b10111101010010011000100000111111";
        ram[13] = "0b00111101000111001000110101001111";
        ram[14] = "0b10111100001010101011000110000100";
        ram[15] = "0b00111101100110010001101010111001";
        ram[16] = "0b00111101100001111111110001011011";
        ram[17] = "0b10111110001001101111011010010100";
        ram[18] = "0b10111101111010110010011111001100";
        ram[19] = "0b10111101110011110010100101001110";
        ram[20] = "0b10111110001111001100001010010100";
        ram[21] = "0b10111101000010011100100111100011";
        ram[22] = "0b10111101010101101101011010001100";
        ram[23] = "0b00111101010110100101111011110001";
        ram[24] = "0b10111101010001001000100011000110";
        ram[25] = "0b10111101110101110100100110101110";
        ram[26] = "0b00111110000010010001111101110001";
        ram[27] = "0b00111100111100100010011111010000";
        ram[28] = "0b10111110100101110110010101110111";
        ram[29] = "0b10111100100111001000100001100001";
        ram[30] = "0b00111101100011111001011111000110";
        ram[31] = "0b10111101011100000101101011011100";
        ram[32] = "0b10111101011000011100100101100100";
        ram[33] = "0b10111100000111001100111001000010";
        ram[34] = "0b10111101111110100100110111110100";
        ram[35] = "0b00111110001000010011011111110100";
        ram[36] = "0b10111101111001110110001010010101";
        ram[37] = "0b00111100100011101001110111110011";
        ram[38] = "0b00111101111000001100100011001101";
        ram[39] = "0b00111101110110000011101111100110";
        ram[40] = "0b00111101110011001101010100110000";
        ram[41] = "0b10111101000001101101011011101010";
        ram[42] = "0b00111101111001000110010010011001";
        ram[43] = "0b10111011101011100101101001110001";
        ram[44] = "0b10111101011001000001000111011101";
        ram[45] = "0b10111101101100011000000011010100";
        ram[46] = "0b10111101100110010000111110101001";
        ram[47] = "0b00111101100110111011001000011011";
        ram[48] = "0b10111101101111110111010100111001";
        ram[49] = "0b10111101111000000010110110011101";
        ram[50] = "0b10111101001001100011000111011110";
        ram[51] = "0b00111101001000000100011010010010";
        ram[52] = "0b00111010010000000100000000011001";
        ram[53] = "0b10111100111001101000110100110011";
        ram[54] = "0b00111110000000000111000010111001";
        ram[55] = "0b00111110001111000110010001110111";
        ram[56] = "0b10111101110010100111111100000111";
        ram[57] = "0b00111100101101011001001001010011";
        ram[58] = "0b10111101100001010100101000111100";
        ram[59] = "0b10111110001111111011001101110100";
        ram[60] = "0b00111101100110011001010110000011";
        ram[61] = "0b10111101111010010011001010010100";
        ram[62] = "0b10111101100000111001100011000001";
        ram[63] = "0b00111101100110101111110101100010";
        ram[64] = "0b00111101010010011000010000101000";
        ram[65] = "0b10111101100000110111011011110000";
        ram[66] = "0b10111101101000110101100000110111";
        ram[67] = "0b00111101100000001111011111111101";
        ram[68] = "0b10111010000010010110011100001011";
        ram[69] = "0b10111101111000111100101011111011";
        ram[70] = "0b10111110001110101101011101010010";
        ram[71] = "0b10111100011001111010100111001000";
        ram[72] = "0b10111101110101010010111010110110";
        ram[73] = "0b10111101110000000110101101000101";
        ram[74] = "0b10111101001110001010110010011111";
        ram[75] = "0b10111100111001110011111100111111";
        ram[76] = "0b10111100000111011100101010010110";
        ram[77] = "0b10111011110101011000111101010100";
        ram[78] = "0b10111101100010100111111011011111";
        ram[79] = "0b00111101110110110100000010110011";
        ram[80] = "0b10111101000000110100111100001010";
        ram[81] = "0b10111101101100001101110101000000";
        ram[82] = "0b10111110000011100011011111011111";
        ram[83] = "0b00111110000110001001110100101000";
        ram[84] = "0b00111101111101111010011100000001";
        ram[85] = "0b10111011010100100110111111001111";
        ram[86] = "0b00111110010111110001000011101101";
        ram[87] = "0b10111110010001011100100111100110";
        ram[88] = "0b10111011111110000111100110100100";
        ram[89] = "0b10111101001110011001100000111101";
        ram[90] = "0b10111100101000011001000011011111";
        ram[91] = "0b00111100000001110010010001110111";
        ram[92] = "0b10111100110000110010111001010011";
        ram[93] = "0b00111101111101000010101110110110";
        ram[94] = "0b10111101001000000000110110000111";
        ram[95] = "0b00111101101010110000001111100010";
        ram[96] = "0b00111101110011101110110100000011";
        ram[97] = "0b00111101010101000100110101011111";
        ram[98] = "0b00111101010000010000001011100101";
        ram[99] = "0b00111011001110011100011100110111";
        ram[100] = "0b10111110000011000000100111000100";
        ram[101] = "0b10111101001000100111011010011101";
        ram[102] = "0b00111100100000000011111011101010";
        ram[103] = "0b10111110000011111011101101010001";
        ram[104] = "0b00111101010011000011010000111011";
        ram[105] = "0b10111100101010100110000111010011";
        ram[106] = "0b10111110001101111100011011111100";
        ram[107] = "0b10111110000010011101101011100000";
        ram[108] = "0b00111101110110100110000101011011";
        ram[109] = "0b00111101100111101100111100100000";
        ram[110] = "0b10111101100101010011110010011011";
        ram[111] = "0b00111011101111001010100110101010";
        ram[112] = "0b00111101010100100001001010100010";
        ram[113] = "0b00111110000001110011100001100001";
        ram[114] = "0b10111110001101011110000111000001";
        ram[115] = "0b10111101101101111101000101111000";
        ram[116] = "0b10111110001101010000110100101000";
        ram[117] = "0b10111101110001000010110101110001";
        ram[118] = "0b10111101100001110001011101001011";
        ram[119] = "0b00111110010111010110000111110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_14) {
meminst = new inference_conv2d_f3_1_2_14_ram("inference_conv2d_f3_1_2_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_14() {
    delete meminst;
}


};//endmodule
#endif
