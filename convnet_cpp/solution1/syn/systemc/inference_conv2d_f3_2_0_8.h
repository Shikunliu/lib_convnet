// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_8_H__
#define __inference_conv2d_f3_2_0_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_8_ram) {
        ram[0] = "0b00111101110100010111010110001110";
        ram[1] = "0b10111110001100010000001010111100";
        ram[2] = "0b00111101011011000001111000000001";
        ram[3] = "0b10111101000101001010111001011101";
        ram[4] = "0b10111100010011001110100101010010";
        ram[5] = "0b10111101110011011101101101010101";
        ram[6] = "0b10111100110111000110110101010100";
        ram[7] = "0b00111101100100010110100011010001";
        ram[8] = "0b00111010011000001111110100110000";
        ram[9] = "0b10111100100111010010110011001100";
        ram[10] = "0b10111101101010011000101101001001";
        ram[11] = "0b10111101011111101100111100010011";
        ram[12] = "0b10111100110011010001110101010101";
        ram[13] = "0b00111101100111111101101010111001";
        ram[14] = "0b00111101101100110011101101000110";
        ram[15] = "0b00111100111110010000100010010101";
        ram[16] = "0b00111101100000110100111101101000";
        ram[17] = "0b00111101001001100111010000001000";
        ram[18] = "0b10111110000010101000001011101000";
        ram[19] = "0b00111101011011001110001001001100";
        ram[20] = "0b00111101100101110011111001110110";
        ram[21] = "0b10111101000011001001010001001000";
        ram[22] = "0b10111101111010001000000101011110";
        ram[23] = "0b00111110000101000111001111001101";
        ram[24] = "0b00111110000100100001101111000001";
        ram[25] = "0b10111101011010111010111000000100";
        ram[26] = "0b10111011101000110001001010101010";
        ram[27] = "0b00111101100011100110011110100010";
        ram[28] = "0b00111101001011001000000011111101";
        ram[29] = "0b10111011110000001001000000111110";
        ram[30] = "0b00111101111001001001101110100110";
        ram[31] = "0b00111110000000010111011101100100";
        ram[32] = "0b00111100101011001001001001100101";
        ram[33] = "0b10111101100111110010011101010000";
        ram[34] = "0b00111110000101001010011001100101";
        ram[35] = "0b10111100111011011010001110100111";
        ram[36] = "0b10111100101110100000011110011000";
        ram[37] = "0b00111100111010001000101010011000";
        ram[38] = "0b10111101011111100001101101011001";
        ram[39] = "0b10111110001001001011001011111011";
        ram[40] = "0b00111101101000110001110010001101";
        ram[41] = "0b10111101101100010110011010111000";
        ram[42] = "0b10111100011000010100011110101110";
        ram[43] = "0b10111101110000111100111000111011";
        ram[44] = "0b10111101101110100111100000011100";
        ram[45] = "0b10111101110100011100101001111101";
        ram[46] = "0b00111101000010010001011000001110";
        ram[47] = "0b00111011010000110111000010101110";
        ram[48] = "0b00111110010010010100001010010001";
        ram[49] = "0b10111101100101111010000001100101";
        ram[50] = "0b00111110010000011010011101011101";
        ram[51] = "0b00111101100110000110010111001010";
        ram[52] = "0b10111101111110110001011111001110";
        ram[53] = "0b10111101101101001100011100101010";
        ram[54] = "0b00111101010110000100001000010110";
        ram[55] = "0b10111101110111111010101010001011";
        ram[56] = "0b00111100011101010110111110000011";
        ram[57] = "0b00111101110011011011010000000011";
        ram[58] = "0b10111101001100111011101010101101";
        ram[59] = "0b00111110011011111100010011000001";
        ram[60] = "0b00111110000001100010100000000010";
        ram[61] = "0b10111110001100111100000000111100";
        ram[62] = "0b00111101111111010010000101111001";
        ram[63] = "0b00111101111000111111111001011101";
        ram[64] = "0b10111101110011100110001000010011";
        ram[65] = "0b00111100110110010111110000111101";
        ram[66] = "0b10111101011001110001111010100011";
        ram[67] = "0b10111101111100101100110101111101";
        ram[68] = "0b00111011110101010010011011001110";
        ram[69] = "0b10111110000011110110111110001111";
        ram[70] = "0b10111100111011000011000100010110";
        ram[71] = "0b00111101100000111111101011100111";
        ram[72] = "0b10111101111100111011110000001010";
        ram[73] = "0b10111101101101110011111011010011";
        ram[74] = "0b10111101001110000011010100110000";
        ram[75] = "0b00111110001100011111101110000011";
        ram[76] = "0b00111101001000011110001001011000";
        ram[77] = "0b00111110010010001110010111000101";
        ram[78] = "0b00111110000011110101000111110000";
        ram[79] = "0b00111100101011000100010010010111";
        ram[80] = "0b10111110000110010101001100010101";
        ram[81] = "0b10111101110111000000101000000111";
        ram[82] = "0b10111101010010111110010011011011";
        ram[83] = "0b10111110010100100010110111011000";
        ram[84] = "0b00111101101111111001111111001011";
        ram[85] = "0b10111100000010001111000111101100";
        ram[86] = "0b00111101100000000100111110110001";
        ram[87] = "0b00111101001101011111011100110011";
        ram[88] = "0b00111110000011111111010001110111";
        ram[89] = "0b00111100110011100010000000011111";
        ram[90] = "0b10111110000010001010011000010001";
        ram[91] = "0b10111101110000001000010100111001";
        ram[92] = "0b10111110000101011001010100110110";
        ram[93] = "0b00111101101100000000110111001010";
        ram[94] = "0b10111101101101011101111111000011";
        ram[95] = "0b00111101001010000010001010101111";
        ram[96] = "0b00111110000111101111100100010010";
        ram[97] = "0b10111101100100101110000000100111";
        ram[98] = "0b10111101011000111100110111010000";
        ram[99] = "0b00111100011001010000101001000110";
        ram[100] = "0b10111101100101110001010010011111";
        ram[101] = "0b00111101111110100010010110010110";
        ram[102] = "0b10111011101010101000001001100000";
        ram[103] = "0b10111110001001101011011001011011";
        ram[104] = "0b10111101101111010000010110100010";
        ram[105] = "0b00111101100010111110010110001001";
        ram[106] = "0b10111110001011101011001110011010";
        ram[107] = "0b00111101101000111010001111011111";
        ram[108] = "0b00111100010100000000011010101001";
        ram[109] = "0b10111101111111010000100011010101";
        ram[110] = "0b00111100101011000000110111011011";
        ram[111] = "0b00111011110011100000011110100000";
        ram[112] = "0b10111110001000101100100111010001";
        ram[113] = "0b00111101101000101101011110001110";
        ram[114] = "0b10111101100010011010101101000101";
        ram[115] = "0b10111101111110001111110101011101";
        ram[116] = "0b10111101011110111000011010001001";
        ram[117] = "0b10111101010001110000010111100011";
        ram[118] = "0b10111101010010011010100101111100";
        ram[119] = "0b10111100011110100110100000010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_8) {
meminst = new inference_conv2d_f3_2_0_8_ram("inference_conv2d_f3_2_0_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_8() {
    delete meminst;
}


};//endmodule
#endif
