// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_12_H__
#define __inference_conv2d_f3_1_3_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_12_ram) {
        ram[0] = "0b00111011100011101010001101110001";
        ram[1] = "0b10111101000010011110001000000001";
        ram[2] = "0b00111100100010000001100010011110";
        ram[3] = "0b10111101001001111110001000110010";
        ram[4] = "0b00111101111100011000111111000101";
        ram[5] = "0b10111100101001110011000111010011";
        ram[6] = "0b10111101001101110100001011111000";
        ram[7] = "0b00111110000111111100100100110110";
        ram[8] = "0b00111101100000111001001010111010";
        ram[9] = "0b00111110001000111111111000011001";
        ram[10] = "0b10111101100001000001111001011000";
        ram[11] = "0b10111101111010000011010001001100";
        ram[12] = "0b00111110000111101101001010001001";
        ram[13] = "0b00111101111001100001000111111101";
        ram[14] = "0b10111110000001000111100100001100";
        ram[15] = "0b10111101100110000000010101100000";
        ram[16] = "0b10111101000000100111010100100101";
        ram[17] = "0b10111110000011001101011110001100";
        ram[18] = "0b00111110000100001110111111011101";
        ram[19] = "0b10111110000000001100111111100001";
        ram[20] = "0b00111101011001111000100101100001";
        ram[21] = "0b10111110000110100110110011100011";
        ram[22] = "0b00111101001101110111111110010011";
        ram[23] = "0b00111110001000000010001010011010";
        ram[24] = "0b10111110001010110000101001110000";
        ram[25] = "0b00111101100000100111001010000110";
        ram[26] = "0b10111101101110010111111000000110";
        ram[27] = "0b10111110010101111001111011100000";
        ram[28] = "0b10111101101110100111111010000001";
        ram[29] = "0b00111110000100111111001010010001";
        ram[30] = "0b00111100010010111001110100100010";
        ram[31] = "0b00111101011100000111010000100001";
        ram[32] = "0b10111011101111001001011111100001";
        ram[33] = "0b00111011000011110111001000100011";
        ram[34] = "0b10111101000101100010111100110001";
        ram[35] = "0b00111100100001010111000000010111";
        ram[36] = "0b00111011100010101011101101000101";
        ram[37] = "0b00111101111000111001011100010100";
        ram[38] = "0b10111101000011100001010111011000";
        ram[39] = "0b10111101111100011101001011100001";
        ram[40] = "0b10111100001011011010001100111100";
        ram[41] = "0b10111101010101010001101100110101";
        ram[42] = "0b10111100000101011010111001110011";
        ram[43] = "0b00111110000010000001001111001011";
        ram[44] = "0b00111110000011011100110000100001";
        ram[45] = "0b10111100000000010110100001100000";
        ram[46] = "0b10111101010101110101000000101110";
        ram[47] = "0b10111101000011101011101100011001";
        ram[48] = "0b10111100110101101101101000110111";
        ram[49] = "0b00111101101001010011100011111101";
        ram[50] = "0b10111110000110011011000110111000";
        ram[51] = "0b00111101111111001100100111101011";
        ram[52] = "0b10111101011001010100101101001001";
        ram[53] = "0b10111101110011100010000010001010";
        ram[54] = "0b00111101011010101110001011001101";
        ram[55] = "0b10111101110011100100000100001011";
        ram[56] = "0b00111101110110000011011000100010";
        ram[57] = "0b10111100000001010101101011111110";
        ram[58] = "0b10111101111011101011010011101010";
        ram[59] = "0b10111101011111001001101010000101";
        ram[60] = "0b00111101100111101011011111100111";
        ram[61] = "0b00111101101111011001011110011000";
        ram[62] = "0b00111010010011011100110101111110";
        ram[63] = "0b10111101100011111001110010011000";
        ram[64] = "0b10111110000111101011101101110111";
        ram[65] = "0b00111011110000011101110101011011";
        ram[66] = "0b00111110000100111100010010110001";
        ram[67] = "0b10111101000110001110111110100000";
        ram[68] = "0b00111011101001101010111110101101";
        ram[69] = "0b00111101100001010110110110111011";
        ram[70] = "0b00111011110010001111100110011001";
        ram[71] = "0b10111100100101001010100100000100";
        ram[72] = "0b00111101111001010111111000100100";
        ram[73] = "0b10111101010000110010011110011101";
        ram[74] = "0b10111110011000001111111101010100";
        ram[75] = "0b10111100111000101100000100101011";
        ram[76] = "0b00111101101010100001000111010010";
        ram[77] = "0b10111101001000000000001100001010";
        ram[78] = "0b10111101100001000101100101000110";
        ram[79] = "0b10111100101100111100001001101111";
        ram[80] = "0b00111101010001001011100001100001";
        ram[81] = "0b00111110000001011010000101000101";
        ram[82] = "0b00111110000000111111001010010001";
        ram[83] = "0b00111101010100110101101011110001";
        ram[84] = "0b10111110000010110010111010011101";
        ram[85] = "0b00111101110101100110010100010111";
        ram[86] = "0b00111100010100100001100011010010";
        ram[87] = "0b10111110001000111001000011001001";
        ram[88] = "0b00111101100101110011011010001011";
        ram[89] = "0b10111011010010001101101101010001";
        ram[90] = "0b00111101001011010111000010110001";
        ram[91] = "0b00111011000111001111110101111100";
        ram[92] = "0b00111100110010010110101001000010";
        ram[93] = "0b10111101111011001110111111101101";
        ram[94] = "0b10111110000000100010000010111100";
        ram[95] = "0b10111101110001011011001100011000";
        ram[96] = "0b00111100100100100100101011110001";
        ram[97] = "0b10111011111001000001011111011000";
        ram[98] = "0b10111100100100000111101100001101";
        ram[99] = "0b10111101000111010011100101100001";
        ram[100] = "0b10111101110100110000001011110111";
        ram[101] = "0b00111110010001011001111101101111";
        ram[102] = "0b10111101000100111101101111010000";
        ram[103] = "0b10111100010000111001000000001101";
        ram[104] = "0b10111101001110110111010001001010";
        ram[105] = "0b10111101010011110001011001101110";
        ram[106] = "0b10111101000100010111101111011001";
        ram[107] = "0b10111100100010101111000101100000";
        ram[108] = "0b10111011100000110000000010100110";
        ram[109] = "0b00111101001011111000101011101101";
        ram[110] = "0b00111101011101001111010101011011";
        ram[111] = "0b10111101000111111001001111111111";
        ram[112] = "0b00111100011011111110001101010010";
        ram[113] = "0b10111101111110110000110011001100";
        ram[114] = "0b00111101101010001010100111011000";
        ram[115] = "0b10111101110001100110010111010011";
        ram[116] = "0b00111101110001011000111001100101";
        ram[117] = "0b00111110000000000100001010010110";
        ram[118] = "0b10111101110100011110111010101010";
        ram[119] = "0b00111101110100000000100110110011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_12) {
meminst = new inference_conv2d_f3_1_3_12_ram("inference_conv2d_f3_1_3_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_12() {
    delete meminst;
}


};//endmodule
#endif
