// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_118_H__
#define __inference_mult_1_120_120_84_s_W4_118_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_118_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_118_ram) {
        ram[0] = "0b00111100101110010101100110001000";
        ram[1] = "0b00111110001011001101010001100111";
        ram[2] = "0b10111100001111110101101010001001";
        ram[3] = "0b10111101001000101001001000010110";
        ram[4] = "0b10111110001010111110001000101110";
        ram[5] = "0b00111100111001111100001111111111";
        ram[6] = "0b10111101101011100010000011011010";
        ram[7] = "0b00111110000001101010010100001101";
        ram[8] = "0b10111110000000000110011110001100";
        ram[9] = "0b00111110010001101100010100001001";
        ram[10] = "0b10111110010001101011010010000101";
        ram[11] = "0b10111101100000000010011001000110";
        ram[12] = "0b10111101100100110111101011010001";
        ram[13] = "0b10111101110110111010110100111010";
        ram[14] = "0b10111100101111101100001010110011";
        ram[15] = "0b10111110000010011100110011111011";
        ram[16] = "0b00111101000110000010101110001011";
        ram[17] = "0b00111101000010010010101010110111";
        ram[18] = "0b10111101111011001001010010110100";
        ram[19] = "0b00111110000010100110000000001011";
        ram[20] = "0b10111100000011000100011101101100";
        ram[21] = "0b10111100110001100010001001011001";
        ram[22] = "0b00111101010000100110001100011100";
        ram[23] = "0b10111011001101000001010110011100";
        ram[24] = "0b10111101010011011001100000011110";
        ram[25] = "0b10111101011111110000100111100110";
        ram[26] = "0b00111101101110000000100001011101";
        ram[27] = "0b00111100011011000001110011110100";
        ram[28] = "0b10111110000100111100110101010111";
        ram[29] = "0b10111101000011110111111010101000";
        ram[30] = "0b00111101110101010101001101101001";
        ram[31] = "0b10111101111001110100000010000001";
        ram[32] = "0b00111101100111000001010000001010";
        ram[33] = "0b10111101111011011010010101010101";
        ram[34] = "0b10111010100010100111000100110011";
        ram[35] = "0b00111001100011111101000101100110";
        ram[36] = "0b00111101001111100110000110011010";
        ram[37] = "0b10111100111101011101011110111110";
        ram[38] = "0b00111101100111101111110100000000";
        ram[39] = "0b10111110000100000001001100100011";
        ram[40] = "0b00111100111011100110100010010011";
        ram[41] = "0b10111011011100011110010010001001";
        ram[42] = "0b00111101001111000001110110100011";
        ram[43] = "0b10111101111110101011111100110100";
        ram[44] = "0b00111110010110111111010110010100";
        ram[45] = "0b00111101010001101010000100011111";
        ram[46] = "0b10111101101011101101111010001010";
        ram[47] = "0b10111101111100100000000100000100";
        ram[48] = "0b10111101111111111001001111111111";
        ram[49] = "0b00111100111011101001111110111011";
        ram[50] = "0b10111101011101000011100000010110";
        ram[51] = "0b10111101000000001101010111101001";
        ram[52] = "0b10111101101101000011001100001101";
        ram[53] = "0b00111101000101100010111011111100";
        ram[54] = "0b00111101100000010100111010001100";
        ram[55] = "0b10111110010100010101111011000000";
        ram[56] = "0b00111110000100000001111001101001";
        ram[57] = "0b10111100111001010110110111100011";
        ram[58] = "0b00111101001111001001101000110101";
        ram[59] = "0b00111101110001010100000001100001";
        ram[60] = "0b10111110011000011000110010100000";
        ram[61] = "0b00111100100100110010111101010010";
        ram[62] = "0b10111100111101100010000101011010";
        ram[63] = "0b10111110001110100110010111001111";
        ram[64] = "0b00111101100101100110111100101000";
        ram[65] = "0b00111101111100011010110000010101";
        ram[66] = "0b10111100110011110000000101011010";
        ram[67] = "0b10111101000110110001000001110111";
        ram[68] = "0b00111101011100110011110000000010";
        ram[69] = "0b10111101101101000100100001111111";
        ram[70] = "0b00111101100000010100100000100111";
        ram[71] = "0b10111110000101100000111110100001";
        ram[72] = "0b10111110001010101101001100100000";
        ram[73] = "0b10111101111100110011000000001110";
        ram[74] = "0b00111101110111111100001000100010";
        ram[75] = "0b00111110001101110111100000010100";
        ram[76] = "0b10111101000110001100011111100011";
        ram[77] = "0b10111110001110001010101001000011";
        ram[78] = "0b00111100100000101100110111011011";
        ram[79] = "0b00111110001001000100010000011000";
        ram[80] = "0b00111110010011011110001101110110";
        ram[81] = "0b00111101111110110100011011111110";
        ram[82] = "0b10111100010000100111001101000010";
        ram[83] = "0b10111100101101111110010101111111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_118) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_118_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_118) {
meminst = new inference_mult_1_120_120_84_s_W4_118_ram("inference_mult_1_120_120_84_s_W4_118_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_118() {
    delete meminst;
}


};//endmodule
#endif
