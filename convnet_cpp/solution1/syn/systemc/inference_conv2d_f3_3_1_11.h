// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_11_H__
#define __inference_conv2d_f3_3_1_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_11_ram) {
        ram[0] = "0b10111101001001001110101011101100";
        ram[1] = "0b00111101010110001011110011000101";
        ram[2] = "0b00111110010110000100000110101011";
        ram[3] = "0b00111101011101101011111111100101";
        ram[4] = "0b00111101001100101001011001110000";
        ram[5] = "0b00111101001110101111000110001000";
        ram[6] = "0b10111101110010000110000101110000";
        ram[7] = "0b10111101001111110000110111111101";
        ram[8] = "0b10111100110110111011010000100110";
        ram[9] = "0b10111101000001000100110110111101";
        ram[10] = "0b00111110001100101101111110010011";
        ram[11] = "0b00111100110110010011101110100110";
        ram[12] = "0b10111100110001010000010100100010";
        ram[13] = "0b10111101010001110000101111000011";
        ram[14] = "0b10111100110011111010100100100000";
        ram[15] = "0b00111100001110100000100111100111";
        ram[16] = "0b10111100100011010101000000010101";
        ram[17] = "0b10111100100011101111010011000101";
        ram[18] = "0b00111101100000011000001010001111";
        ram[19] = "0b00111100111011010011000110010001";
        ram[20] = "0b00111100101101000101100100000011";
        ram[21] = "0b00111101000111110011000100000011";
        ram[22] = "0b00111100101010100011110111110111";
        ram[23] = "0b10111101111001011111011010111010";
        ram[24] = "0b00111110001000000101100010011011";
        ram[25] = "0b00111100011110001111100100010000";
        ram[26] = "0b00111101001011001100110100000010";
        ram[27] = "0b10111101101001011111001011011001";
        ram[28] = "0b10111110000010101110101000110001";
        ram[29] = "0b10111101000001110101010000011101";
        ram[30] = "0b00111101100011000101111000000101";
        ram[31] = "0b10111101001110110010001111011101";
        ram[32] = "0b00111101000101001111100110100111";
        ram[33] = "0b10111110001111001100111000011100";
        ram[34] = "0b00111101100101100110000000001110";
        ram[35] = "0b10111101100111111101100000100111";
        ram[36] = "0b00111101100101001001010000011001";
        ram[37] = "0b00111101001100001101110100011000";
        ram[38] = "0b00111101101000000100111000010001";
        ram[39] = "0b10111101111000100001011111010011";
        ram[40] = "0b00111101100110010100101110001001";
        ram[41] = "0b00111000110100100000110110000111";
        ram[42] = "0b10111101101000000000000001010001";
        ram[43] = "0b00111101110010111111100011100010";
        ram[44] = "0b10111101111100110111001100101010";
        ram[45] = "0b10111101010111110000010110011010";
        ram[46] = "0b10111101111110001101000101010010";
        ram[47] = "0b00111100111111110000101011011000";
        ram[48] = "0b00111110000100100101000100111011";
        ram[49] = "0b10111101110101101001010001000110";
        ram[50] = "0b00111101011010011110111101101101";
        ram[51] = "0b00111101011001010010001110100110";
        ram[52] = "0b10111101101010111000100010101111";
        ram[53] = "0b10111101100110111101100011001100";
        ram[54] = "0b10111110000111101001100100100000";
        ram[55] = "0b00111101001100011010000011000010";
        ram[56] = "0b00111100100000000000001101011011";
        ram[57] = "0b10111110001000111100000011000010";
        ram[58] = "0b10111100100100010000101111110111";
        ram[59] = "0b00111100100001110100100111010110";
        ram[60] = "0b10111101110000101111010110011001";
        ram[61] = "0b00111110000101001000111010001010";
        ram[62] = "0b00111101100011110100111011011000";
        ram[63] = "0b10111101101100111011001011000010";
        ram[64] = "0b00111110000000101001101011100101";
        ram[65] = "0b00111011110011101110010001101010";
        ram[66] = "0b00111110001101010111101110000101";
        ram[67] = "0b00111101101100111010101001101100";
        ram[68] = "0b10111101000000000101010010011111";
        ram[69] = "0b10111100100111000011101011111111";
        ram[70] = "0b00111110001001100100001111001100";
        ram[71] = "0b10111110000000010011010011001110";
        ram[72] = "0b00111101100010101110110100101110";
        ram[73] = "0b00111101010000111001111001101011";
        ram[74] = "0b10111101111000001001100000001011";
        ram[75] = "0b10111101001111101111111101001111";
        ram[76] = "0b10111101110010101101111000100010";
        ram[77] = "0b00111100101111010000011100100111";
        ram[78] = "0b10111011100100001010000000100001";
        ram[79] = "0b00111110000000110000101001001110";
        ram[80] = "0b00111110001010011100100001000011";
        ram[81] = "0b10111101110000000101111100000000";
        ram[82] = "0b00111101110011011001110101110111";
        ram[83] = "0b00111101011111000111000101101011";
        ram[84] = "0b10111101101011001100001011001001";
        ram[85] = "0b00111100011001100010010111001111";
        ram[86] = "0b00111101001101011111001100000001";
        ram[87] = "0b10111101110100000011000100000101";
        ram[88] = "0b00111101100111010000101001011010";
        ram[89] = "0b00111101000011101111101111001100";
        ram[90] = "0b00111100010001000110001111011101";
        ram[91] = "0b10111101001101101001011110100001";
        ram[92] = "0b00111110000000010111111001111000";
        ram[93] = "0b00111110000110010110110111010010";
        ram[94] = "0b10111101101000101001001110101001";
        ram[95] = "0b10111101001100001110101011010100";
        ram[96] = "0b00111101100010110001111010000100";
        ram[97] = "0b10111100000110110001101110000101";
        ram[98] = "0b10111101001001100000100000000111";
        ram[99] = "0b00111011101110111100101110001000";
        ram[100] = "0b10111101011101001111100000010100";
        ram[101] = "0b00111110000010011101100101001101";
        ram[102] = "0b10111101101101100111001101110100";
        ram[103] = "0b00111101110101111101100111011100";
        ram[104] = "0b00111101111101011000000110001100";
        ram[105] = "0b10111101100111000110111000011101";
        ram[106] = "0b10111101000100110000101010000100";
        ram[107] = "0b10111110000000101110010100010101";
        ram[108] = "0b00111101000110011001101011110111";
        ram[109] = "0b10111110000000001111001000111001";
        ram[110] = "0b10111100110111001000001011101110";
        ram[111] = "0b00111110010010011011000001101000";
        ram[112] = "0b00111011101100110110001100000100";
        ram[113] = "0b00111101011010111010001101101101";
        ram[114] = "0b00111101010100011100000011011000";
        ram[115] = "0b10111101110001010011111100000100";
        ram[116] = "0b00111100111000000011011001101100";
        ram[117] = "0b10111101111100100000110000000111";
        ram[118] = "0b10111101010010101010101010011001";
        ram[119] = "0b10111110000001111000101110111101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_11) {
meminst = new inference_conv2d_f3_3_1_11_ram("inference_conv2d_f3_3_1_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_11() {
    delete meminst;
}


};//endmodule
#endif
