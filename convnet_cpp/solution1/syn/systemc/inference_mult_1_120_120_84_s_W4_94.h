// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_94_H__
#define __inference_mult_1_120_120_84_s_W4_94_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_94_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_94_ram) {
        ram[0] = "0b00111101011111010101001110110011";
        ram[1] = "0b10111100110010101101101110010001";
        ram[2] = "0b10111110001001011001110100010011";
        ram[3] = "0b00111101100100001011001100110100";
        ram[4] = "0b00111110010010101000000111011100";
        ram[5] = "0b00111101101011001000100000010001";
        ram[6] = "0b00111110000110000000101000011000";
        ram[7] = "0b10111101010010110111101000011100";
        ram[8] = "0b00111100110101111010111001110010";
        ram[9] = "0b00111101001001001000110101111110";
        ram[10] = "0b00111101111011111100111110000001";
        ram[11] = "0b00111100100001010010110101100110";
        ram[12] = "0b10111100100000111001010110110111";
        ram[13] = "0b00111100101000111100011001111001";
        ram[14] = "0b00111010010001101101010101010110";
        ram[15] = "0b00111101101101101011011011100001";
        ram[16] = "0b00111010100000110101000111011010";
        ram[17] = "0b10111101101110101110100111111100";
        ram[18] = "0b00111100010100100011011000101110";
        ram[19] = "0b10111101100101000100110100001111";
        ram[20] = "0b10111110000001100010010011011101";
        ram[21] = "0b10111101111010010111100011010101";
        ram[22] = "0b10111101000101001010101110100100";
        ram[23] = "0b10111100101000010010100000111001";
        ram[24] = "0b00111101001011101000110000011111";
        ram[25] = "0b10111100100111000000110000111011";
        ram[26] = "0b10111100101011011101101010011001";
        ram[27] = "0b00111110001110101001000001000111";
        ram[28] = "0b10111110000100111010010101111111";
        ram[29] = "0b00111101011010010111001000000100";
        ram[30] = "0b10111010100011110001011001011110";
        ram[31] = "0b10111110000100001110001101000111";
        ram[32] = "0b00111101110010101010111111100100";
        ram[33] = "0b10111101100111111011110010111100";
        ram[34] = "0b10111100111100110101010110011000";
        ram[35] = "0b10111100001011101101100110011101";
        ram[36] = "0b10111101111111010001110011000001";
        ram[37] = "0b00111101001010111101001101110011";
        ram[38] = "0b10111101010001001111000110000111";
        ram[39] = "0b00111011100110100011100001100101";
        ram[40] = "0b10111100101100100010000001111001";
        ram[41] = "0b10111101100011111010110010100011";
        ram[42] = "0b10111101101000111111110110100001";
        ram[43] = "0b10111110000000111110110100001111";
        ram[44] = "0b10111101110001000000100001010011";
        ram[45] = "0b10111101110110001001111011111110";
        ram[46] = "0b10111100111100111100000101100011";
        ram[47] = "0b00111101110110010100001000001011";
        ram[48] = "0b00111101010000011001100011110010";
        ram[49] = "0b00111110001100111111100110100101";
        ram[50] = "0b00111101011000010111011110110100";
        ram[51] = "0b00111110001111011010101000001101";
        ram[52] = "0b00111101011111110001101100110011";
        ram[53] = "0b10111100111101011101010110100101";
        ram[54] = "0b00111101110000010111000111111101";
        ram[55] = "0b10111110001100101010101001011100";
        ram[56] = "0b10111101011111111001101100000110";
        ram[57] = "0b00111100111110101001101011010001";
        ram[58] = "0b00111101011110111011000010110000";
        ram[59] = "0b00111100100100111001000101111000";
        ram[60] = "0b10111011000010000001011100010000";
        ram[61] = "0b10111101101001100101000100111000";
        ram[62] = "0b00111101111001101011000001010011";
        ram[63] = "0b10111101110000100100100111110010";
        ram[64] = "0b10111101101111100010010010101110";
        ram[65] = "0b00111101101110110111011001110001";
        ram[66] = "0b10111101000111101000000000111001";
        ram[67] = "0b00111101000011001111001010100111";
        ram[68] = "0b00111110000110010101011001111110";
        ram[69] = "0b10111010111010110010000001001010";
        ram[70] = "0b00111101010010101101101010111010";
        ram[71] = "0b10111011111100010101000110111100";
        ram[72] = "0b10111110000000010011011011100111";
        ram[73] = "0b10111101010111000110100001100110";
        ram[74] = "0b00111100011111010011110101000011";
        ram[75] = "0b10111101101011011111100010100100";
        ram[76] = "0b00111101011011011000100111110111";
        ram[77] = "0b00111100100101111011110001111111";
        ram[78] = "0b00111100110011101011000111011111";
        ram[79] = "0b10111100010111101111011010011011";
        ram[80] = "0b00111100011010111100010101001011";
        ram[81] = "0b00111100101111100010001110111101";
        ram[82] = "0b00111100101011111011000011001000";
        ram[83] = "0b10111101101001001111010010111001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_94) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_94_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_94) {
meminst = new inference_mult_1_120_120_84_s_W4_94_ram("inference_mult_1_120_120_84_s_W4_94_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_94() {
    delete meminst;
}


};//endmodule
#endif
