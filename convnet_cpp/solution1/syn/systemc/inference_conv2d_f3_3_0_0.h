// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_0_H__
#define __inference_conv2d_f3_3_0_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_0_ram) {
        ram[0] = "0b00111101010010111100100010100110";
        ram[1] = "0b10111110000010010010010011110010";
        ram[2] = "0b10111110011110110010000110000001";
        ram[3] = "0b10111101111001111111100110010100";
        ram[4] = "0b00111101000101010111110000011000";
        ram[5] = "0b00111100111010011111010000100101";
        ram[6] = "0b00111101111111000100011111100101";
        ram[7] = "0b00111101010111000001110001100001";
        ram[8] = "0b00111010000100001000000100000110";
        ram[9] = "0b10111110011001010011000001001001";
        ram[10] = "0b10111110010011101000100010011100";
        ram[11] = "0b00111100011001111000001001011011";
        ram[12] = "0b00111101110000010101001110111101";
        ram[13] = "0b00111101110010110010000111111010";
        ram[14] = "0b10111110000011010101100001000011";
        ram[15] = "0b00111101111011100100101001111011";
        ram[16] = "0b10111110000011010111010100011001";
        ram[17] = "0b00111101101101001000101111000011";
        ram[18] = "0b00111110011100001111111110010111";
        ram[19] = "0b00111110001111111011001000100101";
        ram[20] = "0b00111101011110001001011111000001";
        ram[21] = "0b10111110001101101100110110101111";
        ram[22] = "0b00111101011110110111011100111010";
        ram[23] = "0b00111100111011011101101001100100";
        ram[24] = "0b10111110001101110001001010100001";
        ram[25] = "0b10111101110110110101110110001001";
        ram[26] = "0b10111110010110011110110101111100";
        ram[27] = "0b10111101101011011001010111101011";
        ram[28] = "0b10111100101110101101101011111101";
        ram[29] = "0b00111110010101111100010011100011";
        ram[30] = "0b10111110011111000100110110101001";
        ram[31] = "0b00111100100100001101001111000011";
        ram[32] = "0b10111101000100001011010111000101";
        ram[33] = "0b00111101101001000000011101010100";
        ram[34] = "0b00111101110110000110010111011000";
        ram[35] = "0b10111101100000000100100100110001";
        ram[36] = "0b00111101010011011010101111110000";
        ram[37] = "0b10111011111010101010001001110110";
        ram[38] = "0b00111101101110111110100101111000";
        ram[39] = "0b10111110001100001110101010011110";
        ram[40] = "0b00111101111111101111011111000010";
        ram[41] = "0b10111101111010111111010111011000";
        ram[42] = "0b10111101101100010011110101001101";
        ram[43] = "0b10111101011011010011000001001111";
        ram[44] = "0b10111101110101000100010111101101";
        ram[45] = "0b00111110000010101100110000001100";
        ram[46] = "0b10111110001011111010011010011100";
        ram[47] = "0b10111100101110001100010110101111";
        ram[48] = "0b10111101100101010001000110001111";
        ram[49] = "0b00111101101111011101110001010100";
        ram[50] = "0b00111101011101001010011101010111";
        ram[51] = "0b00111101010000011100010011100001";
        ram[52] = "0b10111101100001001101111011101010";
        ram[53] = "0b00111110000010100001100110000111";
        ram[54] = "0b10111110000111000010101110010101";
        ram[55] = "0b10111110000010011000011001110111";
        ram[56] = "0b00111101111011011011000001010111";
        ram[57] = "0b10111101100001110111001011001000";
        ram[58] = "0b00111101110000111000111101111010";
        ram[59] = "0b10111101100000000111011011101001";
        ram[60] = "0b10111100101001101100101001101111";
        ram[61] = "0b10111101111010001001001010101011";
        ram[62] = "0b00111011011011111001000010011100";
        ram[63] = "0b00111101101111000001101101111100";
        ram[64] = "0b10111110001100001010100110011011";
        ram[65] = "0b00111101001100010100111111101001";
        ram[66] = "0b00111110010010000011100111001110";
        ram[67] = "0b10111101010011110011001000111000";
        ram[68] = "0b00111100010111111110010110101110";
        ram[69] = "0b10111110001110110100100100010111";
        ram[70] = "0b00111101011001100110000000011100";
        ram[71] = "0b00111110000101110011110000001100";
        ram[72] = "0b00111101001110010001111111110111";
        ram[73] = "0b10111100100110110101001110101110";
        ram[74] = "0b10111101011100000111011101000111";
        ram[75] = "0b00111101011000100111111001111010";
        ram[76] = "0b10111101011011001011001100011100";
        ram[77] = "0b00111110000100011000001000100011";
        ram[78] = "0b00111100111111000111010111010010";
        ram[79] = "0b10111110001001111000100000010010";
        ram[80] = "0b00111011110101110000100100100110";
        ram[81] = "0b10111101100001001101000101100011";
        ram[82] = "0b00111110000000000000001000011001";
        ram[83] = "0b00111101100011101110111110100010";
        ram[84] = "0b00111101110101000111011110111100";
        ram[85] = "0b00111100101101000100011010001110";
        ram[86] = "0b00111101010110001000110010100100";
        ram[87] = "0b00111101010000000111011010110011";
        ram[88] = "0b00111101110001000101100100011110";
        ram[89] = "0b00111100101001011110100000100111";
        ram[90] = "0b10111110000111000000000110100011";
        ram[91] = "0b00111101001111000101110100101110";
        ram[92] = "0b10111110011110110000100111101010";
        ram[93] = "0b00111101000101011000100000001101";
        ram[94] = "0b00111101101101101001011111111111";
        ram[95] = "0b10111100101010101110101100110000";
        ram[96] = "0b10111101011000110100000101101001";
        ram[97] = "0b10111101000011000100111100101110";
        ram[98] = "0b10111101101110000001111110110001";
        ram[99] = "0b10111010110110110101101101011011";
        ram[100] = "0b00111101100000101110100101000111";
        ram[101] = "0b00111110000011001010010100110111";
        ram[102] = "0b10111101010111101011101010100000";
        ram[103] = "0b10111101001100001101110011111101";
        ram[104] = "0b00111100110011011001000000001011";
        ram[105] = "0b10111110000011011000110001101101";
        ram[106] = "0b10111110001001100001000101110111";
        ram[107] = "0b10111101010111001111111100101111";
        ram[108] = "0b00111101100000110010011011000110";
        ram[109] = "0b00111011111101010010010000011001";
        ram[110] = "0b10111110000100110000101001001110";
        ram[111] = "0b00111100101110111010101000110000";
        ram[112] = "0b10111101011001100001000001101011";
        ram[113] = "0b10111110010111111001101100010011";
        ram[114] = "0b10111101111111011011000010011010";
        ram[115] = "0b10111101110000100000011011010110";
        ram[116] = "0b00111100111111010101000001011000";
        ram[117] = "0b10111101101101101000000000110010";
        ram[118] = "0b00111110000010010000001001011000";
        ram[119] = "0b00111011101010101110011110100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_0) {
meminst = new inference_conv2d_f3_3_0_0_ram("inference_conv2d_f3_3_0_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_0() {
    delete meminst;
}


};//endmodule
#endif
