// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_8_H__
#define __inference_conv2d_f3_1_3_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_8_ram) {
        ram[0] = "0b00111101011000000001001001110100";
        ram[1] = "0b10111110001111011110001101110110";
        ram[2] = "0b00111101001110000010000010111110";
        ram[3] = "0b10111101110010111010110110001011";
        ram[4] = "0b10111101100001011110011001010001";
        ram[5] = "0b10111101101011100010001100001110";
        ram[6] = "0b00111101110111110001110011111100";
        ram[7] = "0b00111110001010011111000011100101";
        ram[8] = "0b10111110000010011000010001011110";
        ram[9] = "0b10111101110001110011010101110001";
        ram[10] = "0b10111101111111011100011000011001";
        ram[11] = "0b10111101001000001011110111001011";
        ram[12] = "0b00111110000000110100001101110100";
        ram[13] = "0b00111101010001010011010100101001";
        ram[14] = "0b00111101000011001101000010010011";
        ram[15] = "0b00111101100101101110010101111101";
        ram[16] = "0b10111101100110001100101010110111";
        ram[17] = "0b00111101110100001110011001101101";
        ram[18] = "0b00111101101111010100111000001001";
        ram[19] = "0b00111101010010010011000010110001";
        ram[20] = "0b10111110001000101001011001110000";
        ram[21] = "0b10111101100101000100011001110100";
        ram[22] = "0b10111100010000111101110110100101";
        ram[23] = "0b00111101001101010101000111110001";
        ram[24] = "0b10111110000101000110001100000110";
        ram[25] = "0b00111101010010010001111011111000";
        ram[26] = "0b10111110001111000001110100101010";
        ram[27] = "0b00111101101000111010101010101111";
        ram[28] = "0b00111110001100001011000000101001";
        ram[29] = "0b00111110001011011100011100100110";
        ram[30] = "0b10111100011011010111111011110100";
        ram[31] = "0b10111110010000100101111010011010";
        ram[32] = "0b00111101000011011000001000110100";
        ram[33] = "0b10111100111001001001011010000011";
        ram[34] = "0b00111110000100001001010011100110";
        ram[35] = "0b00111101011001011110111010100111";
        ram[36] = "0b10111101100110101111001001101101";
        ram[37] = "0b00111100110100100101011110111100";
        ram[38] = "0b00111101100000100010101100011110";
        ram[39] = "0b10111101101001000000000111101101";
        ram[40] = "0b00111110001011010101000100101111";
        ram[41] = "0b10111101001011011111011000101101";
        ram[42] = "0b00111110010000010000100010000001";
        ram[43] = "0b10111110010110111001110001110011";
        ram[44] = "0b00111101001100101001111101110101";
        ram[45] = "0b10111011110110100100011010011101";
        ram[46] = "0b10111100111010110111000100110010";
        ram[47] = "0b00111110010011001000101100000000";
        ram[48] = "0b00111101100101011010000010010110";
        ram[49] = "0b00111100110010101101111111000010";
        ram[50] = "0b10111010100010111111111001111011";
        ram[51] = "0b00111110001010001111100101101110";
        ram[52] = "0b00111101100101101100000111110001";
        ram[53] = "0b10111011011010100000000011100101";
        ram[54] = "0b00111101100001011000000011111001";
        ram[55] = "0b10111110010000010011010101010100";
        ram[56] = "0b10111100100111100111101011100000";
        ram[57] = "0b10111100110111000101010101101011";
        ram[58] = "0b00111101110100001011011100111101";
        ram[59] = "0b00111110010000000111100110100011";
        ram[60] = "0b10111101111110100111111010110111";
        ram[61] = "0b00111101111110011100011000101010";
        ram[62] = "0b10111110010110010000101111001000";
        ram[63] = "0b00111110000010101000010101000100";
        ram[64] = "0b00111110010101111010000000110000";
        ram[65] = "0b10111101110010011011110000011001";
        ram[66] = "0b10111101100111011010100001101101";
        ram[67] = "0b00111101110001111001001000001000";
        ram[68] = "0b10111110000100000000001010011111";
        ram[69] = "0b10111101100011101100100011001000";
        ram[70] = "0b00111110000000011011010110000101";
        ram[71] = "0b00111101111100101010000101110011";
        ram[72] = "0b10111101110111101011100011011000";
        ram[73] = "0b00111110000000110111000010001011";
        ram[74] = "0b00111100011011010110000001010110";
        ram[75] = "0b10111101110111001110111110101010";
        ram[76] = "0b10111110000000101100011000100110";
        ram[77] = "0b10111101001000011110000001011010";
        ram[78] = "0b10111100011000000001000000001011";
        ram[79] = "0b00111100100001101111111110011001";
        ram[80] = "0b10111100111011000100100000101000";
        ram[81] = "0b00111100100110111010111001111100";
        ram[82] = "0b00111110000110100111001100101110";
        ram[83] = "0b10111101000110100111100101111001";
        ram[84] = "0b00111100111100100100000101100110";
        ram[85] = "0b10111101000000110000011010110000";
        ram[86] = "0b00111011001001101101110101001111";
        ram[87] = "0b00111110001110101101001111101001";
        ram[88] = "0b10111101110000001000100101010000";
        ram[89] = "0b00111101100000011111100001010000";
        ram[90] = "0b10111101001011000110001011001010";
        ram[91] = "0b00111101101010101000011000011011";
        ram[92] = "0b00111100101000010100010001010011";
        ram[93] = "0b10111100110010011001110001100001";
        ram[94] = "0b10111100000001111111010011101100";
        ram[95] = "0b10111101000101001111110001100001";
        ram[96] = "0b00111110000001010100011010010001";
        ram[97] = "0b00111110001100010101001000101010";
        ram[98] = "0b00111101111101110101110010001110";
        ram[99] = "0b00111100110100111110001010100000";
        ram[100] = "0b00111101110000001101100000001111";
        ram[101] = "0b00111110001101101111000100010011";
        ram[102] = "0b00111110001000101110011110110100";
        ram[103] = "0b10111101010111111101001100011111";
        ram[104] = "0b10111101111100001101110001110111";
        ram[105] = "0b00111101000110001011100110111011";
        ram[106] = "0b10111101101100011110010000010011";
        ram[107] = "0b10111101001010001010001101011000";
        ram[108] = "0b00111001101001110111111110011100";
        ram[109] = "0b10111011000110011000110101011010";
        ram[110] = "0b10111101001001001000110001110010";
        ram[111] = "0b00111110000011000011100010110000";
        ram[112] = "0b00111100110010011110111111011000";
        ram[113] = "0b00111100010111111100110010000100";
        ram[114] = "0b00111101110000110000010101000110";
        ram[115] = "0b00111101011100110001101000001001";
        ram[116] = "0b00111101000000010010111101000000";
        ram[117] = "0b00111101010100011001110110000010";
        ram[118] = "0b00111110011111111010100011111000";
        ram[119] = "0b00111101101101001111000110101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_8) {
meminst = new inference_conv2d_f3_1_3_8_ram("inference_conv2d_f3_1_3_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_8() {
    delete meminst;
}


};//endmodule
#endif
