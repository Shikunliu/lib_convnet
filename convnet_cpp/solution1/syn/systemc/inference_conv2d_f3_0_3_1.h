// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_1_H__
#define __inference_conv2d_f3_0_3_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_1_ram) {
        ram[0] = "0b10111110000001100100001011000000";
        ram[1] = "0b00111100111100001100001110000010";
        ram[2] = "0b00111100100001000000110101000000";
        ram[3] = "0b00111011010011100011101000110101";
        ram[4] = "0b00111101001010110110100000010011";
        ram[5] = "0b10111100110010000110100011110000";
        ram[6] = "0b00111101011111010011110000110110";
        ram[7] = "0b10111101110101010111001101100100";
        ram[8] = "0b10111101010111111111100010001110";
        ram[9] = "0b10111101010000101110101011001100";
        ram[10] = "0b10111110000100101101110010110001";
        ram[11] = "0b10111100100100100001011100100100";
        ram[12] = "0b10111011101000101001101000001001";
        ram[13] = "0b10111101101001100001111010101101";
        ram[14] = "0b00111110000001001101000001010111";
        ram[15] = "0b00111011011110000111000101101011";
        ram[16] = "0b10111110001110101101011100001110";
        ram[17] = "0b10111100111100111101110000000101";
        ram[18] = "0b10111101110101111011000001110000";
        ram[19] = "0b10111101111010010011100101100101";
        ram[20] = "0b00111101111010000000100111010101";
        ram[21] = "0b00111110000101000111000011101011";
        ram[22] = "0b00111011110100110100000100011011";
        ram[23] = "0b00111101111001000010001110010110";
        ram[24] = "0b00111110000111010111100000111110";
        ram[25] = "0b10111101101111001010010101010010";
        ram[26] = "0b10111101001010010101001101100110";
        ram[27] = "0b00111101111011110010100001000001";
        ram[28] = "0b00111011011001010001010001101100";
        ram[29] = "0b10111101001111101011100100001110";
        ram[30] = "0b10111011101110001100001101010101";
        ram[31] = "0b00111110000000010011011011100111";
        ram[32] = "0b00111100110111001000101001000101";
        ram[33] = "0b00111101101110110110010010011101";
        ram[34] = "0b10111100110011011011011011011000";
        ram[35] = "0b00111101110111101111111000001101";
        ram[36] = "0b10111011110000001001001000010110";
        ram[37] = "0b00111101101010001111110101011101";
        ram[38] = "0b10111011110111111110100011001001";
        ram[39] = "0b00111100010011100110101110011110";
        ram[40] = "0b10111101101111101100100001101010";
        ram[41] = "0b00111101100001000100011010001110";
        ram[42] = "0b10111100111010110010110001101001";
        ram[43] = "0b00111101010111011010110001001110";
        ram[44] = "0b10111101010110000111010010000110";
        ram[45] = "0b10111101100110010111000111011100";
        ram[46] = "0b10111101000100101000000100001100";
        ram[47] = "0b00111101111010101101110011010011";
        ram[48] = "0b10111101110101110101001100011110";
        ram[49] = "0b10111101101101011101011111001011";
        ram[50] = "0b00111011101100001101001110011101";
        ram[51] = "0b10111101101110001100101001100111";
        ram[52] = "0b10111110000100000101010011101111";
        ram[53] = "0b00111110011000000001010010110110";
        ram[54] = "0b00111100101010000000010011001100";
        ram[55] = "0b00111101100001001001011000001010";
        ram[56] = "0b00111100001000110101011000110001";
        ram[57] = "0b00111101100001011010010001011100";
        ram[58] = "0b10111101101101010101011111010001";
        ram[59] = "0b00111100100001110101010100101001";
        ram[60] = "0b00111011000010001101011001010011";
        ram[61] = "0b00111110010101100100010001010010";
        ram[62] = "0b00111101111000101111101001010001";
        ram[63] = "0b00111101110111100011100111110111";
        ram[64] = "0b00111101111111101001011111010000";
        ram[65] = "0b10111101001100010010000110101011";
        ram[66] = "0b00111100100010000011011001100101";
        ram[67] = "0b00111101110011111011110110101101";
        ram[68] = "0b10111101000011011000100100100000";
        ram[69] = "0b10111110000011010101110111000100";
        ram[70] = "0b00111101100111000100111011111001";
        ram[71] = "0b00111101110011001010001111011010";
        ram[72] = "0b10111011100111110100101100110100";
        ram[73] = "0b00111011101000111111111011100011";
        ram[74] = "0b00111101000111111111101101111110";
        ram[75] = "0b00111100110011000110111010100011";
        ram[76] = "0b10111101100000000100001101000100";
        ram[77] = "0b00111011110111011111010110111111";
        ram[78] = "0b00111101100000110010000111100110";
        ram[79] = "0b10111110000100001010110110001010";
        ram[80] = "0b00111101011101011100011101100010";
        ram[81] = "0b00111101001010100111111011111010";
        ram[82] = "0b00111100101101011111010001000011";
        ram[83] = "0b00111101101010101001000011101000";
        ram[84] = "0b10111101110011000110110101111100";
        ram[85] = "0b00111100000010000111111111110111";
        ram[86] = "0b00111101110110110000010001101000";
        ram[87] = "0b00111101110101000011000101111011";
        ram[88] = "0b00111110001001011110101010101011";
        ram[89] = "0b10111110000001011101010001100011";
        ram[90] = "0b00111100010101111110011110110011";
        ram[91] = "0b10111100000101000100011101110101";
        ram[92] = "0b10111100110010000011001100001010";
        ram[93] = "0b10111100100111100111000011001111";
        ram[94] = "0b10111101100110010111010101101101";
        ram[95] = "0b00111100111101000011010100100110";
        ram[96] = "0b10111101100101011100001100001000";
        ram[97] = "0b00111010101001000111111111010010";
        ram[98] = "0b10111101010100100111000100011100";
        ram[99] = "0b00111101100001010010100010010100";
        ram[100] = "0b10111101111111100010001001100000";
        ram[101] = "0b10111101010001111101101000011111";
        ram[102] = "0b00111101011010010011010110000011";
        ram[103] = "0b10111110000000000001111110111000";
        ram[104] = "0b00111110001001110011101100000000";
        ram[105] = "0b00111101100110000000000110001100";
        ram[106] = "0b00111100101011001111011101111010";
        ram[107] = "0b10111100001111010010010111111011";
        ram[108] = "0b10111100110011011111110101001110";
        ram[109] = "0b10111100010011001011111011110101";
        ram[110] = "0b10111110000111001100100101100100";
        ram[111] = "0b10111101100001101110001101110001";
        ram[112] = "0b00111101101100011010010000011101";
        ram[113] = "0b00111100100100010111000001101011";
        ram[114] = "0b00111101101110111000000000110001";
        ram[115] = "0b00111101011000110001011110010010";
        ram[116] = "0b00111110000110001010011001010101";
        ram[117] = "0b00111101110110001100101100001000";
        ram[118] = "0b10111101101100100101110010000001";
        ram[119] = "0b00111101111110101010011100010110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_1) {
meminst = new inference_conv2d_f3_0_3_1_ram("inference_conv2d_f3_0_3_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_1() {
    delete meminst;
}


};//endmodule
#endif
