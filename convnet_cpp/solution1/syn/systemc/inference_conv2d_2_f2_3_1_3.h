// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_2_f2_3_1_3_H__
#define __inference_conv2d_2_f2_3_1_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_2_f2_3_1_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 16;
  static const unsigned AddressWidth = 4;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_2_f2_3_1_3_ram) {
        ram[0] = "0b10111110100101001100010110111001";
        ram[1] = "0b10111101010001100100101100001000";
        ram[2] = "0b00111101101011111000011110100000";
        ram[3] = "0b00111110001110111100000101101010";
        ram[4] = "0b10111110011010100110111010111001";
        ram[5] = "0b10111101101001111111000011111011";
        ram[6] = "0b00111110100100001000001111111101";
        ram[7] = "0b00111110000100010010110001101011";
        ram[8] = "0b00111101100011001111101001000001";
        ram[9] = "0b00111101011000000101110110100011";
        ram[10] = "0b10111101011101010011110000100010";
        ram[11] = "0b10111101100111110001010011101001";
        ram[12] = "0b10111101100011010010001010101110";
        ram[13] = "0b10111101110111011010000011100000";
        ram[14] = "0b10111101001101001000001000000011";
        ram[15] = "0b10111101101011110000100100111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_2_f2_3_1_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 16;
static const unsigned AddressWidth = 4;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_2_f2_3_1_3_ram* meminst;


SC_CTOR(inference_conv2d_2_f2_3_1_3) {
meminst = new inference_conv2d_2_f2_3_1_3_ram("inference_conv2d_2_f2_3_1_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_2_f2_3_1_3() {
    delete meminst;
}


};//endmodule
#endif
