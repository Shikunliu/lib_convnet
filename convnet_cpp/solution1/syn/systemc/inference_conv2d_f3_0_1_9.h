// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_9_H__
#define __inference_conv2d_f3_0_1_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_9_ram) {
        ram[0] = "0b00111011001010111100100001110000";
        ram[1] = "0b10111101011101001010000100100111";
        ram[2] = "0b10111100110010110000011001011001";
        ram[3] = "0b10111101101000101011000100111011";
        ram[4] = "0b10111101101000101010101001110111";
        ram[5] = "0b10111110010110100010111000111100";
        ram[6] = "0b10111101110111010100110011111101";
        ram[7] = "0b10111100100011000100001000101110";
        ram[8] = "0b10111110001001111110010101100100";
        ram[9] = "0b10111100100100100010001110111001";
        ram[10] = "0b10111101010010100101101100011101";
        ram[11] = "0b00111110000001010110101000111000";
        ram[12] = "0b10111101011001100111110011110010";
        ram[13] = "0b00111110000111010000100011010101";
        ram[14] = "0b10111101010100011111000101001010";
        ram[15] = "0b10111001011101110011010110001010";
        ram[16] = "0b00111110000101110011001001011001";
        ram[17] = "0b00111011100011011010011110011110";
        ram[18] = "0b10111101010110011000001001101101";
        ram[19] = "0b10111110000000010000000110110000";
        ram[20] = "0b00111101101111011000111100011010";
        ram[21] = "0b00111101100111010110111011101001";
        ram[22] = "0b00111101011111111000011110000101";
        ram[23] = "0b10111100101000010101100110110111";
        ram[24] = "0b10111100101001110000110100100000";
        ram[25] = "0b10111101111110000100111101001100";
        ram[26] = "0b00111101010011011010110111101110";
        ram[27] = "0b10111110000000100010100001010110";
        ram[28] = "0b00111101001111011101000101101100";
        ram[29] = "0b00111101011101011111101100101111";
        ram[30] = "0b00111101011110101000000101110001";
        ram[31] = "0b00111101011100001011111100011010";
        ram[32] = "0b10111110000010000100110011110000";
        ram[33] = "0b00111101010100110001100100110010";
        ram[34] = "0b10111110001101100101100000111111";
        ram[35] = "0b10111101111100110101101100001100";
        ram[36] = "0b10111101100010000000111011011101";
        ram[37] = "0b10111101010100110101100001010010";
        ram[38] = "0b00111110001001011000110010001111";
        ram[39] = "0b00111101111010001000011010011100";
        ram[40] = "0b10111110000000010101000000010010";
        ram[41] = "0b00111101011000100100100111110010";
        ram[42] = "0b10111101011110100101011101111111";
        ram[43] = "0b10111110001000110101100110111100";
        ram[44] = "0b10111100101001110011001011011111";
        ram[45] = "0b10111101111100000001001000010111";
        ram[46] = "0b00111110000000111000101011000010";
        ram[47] = "0b00111101100000011110010001111111";
        ram[48] = "0b10111110000110110100101111111001";
        ram[49] = "0b10111100101001000111110101011000";
        ram[50] = "0b00111101101101111000010011101100";
        ram[51] = "0b10111101010000001110010011001101";
        ram[52] = "0b10111101101101001111001001011110";
        ram[53] = "0b00111101100101110010110100101000";
        ram[54] = "0b00111101110011111001000100011101";
        ram[55] = "0b00111100100010111100011101111111";
        ram[56] = "0b00111110001011101100100110011111";
        ram[57] = "0b10111101001001100000001000001101";
        ram[58] = "0b00111100010111111100000001011010";
        ram[59] = "0b10111101100100001000101101000000";
        ram[60] = "0b10111101000110011011000011111100";
        ram[61] = "0b00111101100110001011100110111011";
        ram[62] = "0b00111101101010011100010100010000";
        ram[63] = "0b10111011101100100000010000011111";
        ram[64] = "0b00111101111001001000010000001110";
        ram[65] = "0b10111101101110000001110100101101";
        ram[66] = "0b00111101111111001100001100011010";
        ram[67] = "0b00111101011101001011010101111111";
        ram[68] = "0b10111100010000000001101000110111";
        ram[69] = "0b00111101101001010011001111100111";
        ram[70] = "0b10111100001010011101110101001001";
        ram[71] = "0b10111100100000001001000111110110";
        ram[72] = "0b00111100011000100100000011010010";
        ram[73] = "0b00111100111100010011011010100100";
        ram[74] = "0b00111101010110001001011100111011";
        ram[75] = "0b10111101001000111001110000000001";
        ram[76] = "0b10111101101010011001111101011110";
        ram[77] = "0b10111011111111000000001111000111";
        ram[78] = "0b10111110001000111010001101100110";
        ram[79] = "0b10111101010001111001001100111101";
        ram[80] = "0b10111101011000011000000010111001";
        ram[81] = "0b00111101111011101100011101000011";
        ram[82] = "0b10111101111001000011001111010111";
        ram[83] = "0b10111101001110110110110011011000";
        ram[84] = "0b00111101000110111101001010001111";
        ram[85] = "0b10111100001011000100011111110010";
        ram[86] = "0b00111101011011101100110111000011";
        ram[87] = "0b00111101110100101010100001000100";
        ram[88] = "0b00111101010110011001111101111001";
        ram[89] = "0b00111110001100000110110101010000";
        ram[90] = "0b00111100101001101100110010111110";
        ram[91] = "0b00111101010000011010000010110100";
        ram[92] = "0b10111100100011011001100001101111";
        ram[93] = "0b10111101000100011001001011101010";
        ram[94] = "0b00111101100000000010000000001001";
        ram[95] = "0b00111010100011010011001011011001";
        ram[96] = "0b00111101110110110001111010011111";
        ram[97] = "0b00111110000111000110110001010101";
        ram[98] = "0b00111101110101110001000010001000";
        ram[99] = "0b00111100100100011000001110000000";
        ram[100] = "0b10111101000100010011111110001110";
        ram[101] = "0b10111100111001010100000100111000";
        ram[102] = "0b00111110000010101110110101010111";
        ram[103] = "0b00111101101101110111001111010101";
        ram[104] = "0b00111100111011100001011100110101";
        ram[105] = "0b10111101100001010101110111001011";
        ram[106] = "0b00111110000110011001000011110011";
        ram[107] = "0b10111100001100100100111010011100";
        ram[108] = "0b10111110001000100010100000010011";
        ram[109] = "0b00111101110110111101100111001011";
        ram[110] = "0b10111101111011111000100010111001";
        ram[111] = "0b00111101111000111111111111101111";
        ram[112] = "0b00111101110001100000001111110000";
        ram[113] = "0b00111101100001010101001011010110";
        ram[114] = "0b00111100010000010000011011000110";
        ram[115] = "0b10111100111111110100100000010100";
        ram[116] = "0b00111100111011010000101011111011";
        ram[117] = "0b00111101100111001110111111000101";
        ram[118] = "0b00111101010110100111100100101000";
        ram[119] = "0b10111101100100111000111001010010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_9) {
meminst = new inference_conv2d_f3_0_1_9_ram("inference_conv2d_f3_0_1_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_9() {
    delete meminst;
}


};//endmodule
#endif
