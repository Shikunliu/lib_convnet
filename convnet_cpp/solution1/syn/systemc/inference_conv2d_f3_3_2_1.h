// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_1_H__
#define __inference_conv2d_f3_3_2_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_1_ram) {
        ram[0] = "0b10111100100000000100110010001100";
        ram[1] = "0b10111100100101100110001000001100";
        ram[2] = "0b10111110010100100110010111110001";
        ram[3] = "0b00111101110000100000111100000100";
        ram[4] = "0b10111101100100011001000011111010";
        ram[5] = "0b10111101011100100100101111111101";
        ram[6] = "0b10111101001001011001111100101100";
        ram[7] = "0b00111101111001100111110001101100";
        ram[8] = "0b10111100100100011001101001011100";
        ram[9] = "0b00111101110001101100111110000101";
        ram[10] = "0b10111101101000001111011000100111";
        ram[11] = "0b10111101010111001101100110001010";
        ram[12] = "0b10111101010011011000100001111111";
        ram[13] = "0b00111101000011111011001000001010";
        ram[14] = "0b10111110000000110011000101011101";
        ram[15] = "0b10111101111101010001011000010010";
        ram[16] = "0b00111101000111101111011111011101";
        ram[17] = "0b00111100100000110100100111001100";
        ram[18] = "0b00111100110100100100110011010100";
        ram[19] = "0b00111101000100100001111101010010";
        ram[20] = "0b10111100110001101010100101100111";
        ram[21] = "0b00111110011011010101001110001011";
        ram[22] = "0b00111101111100100101111011011101";
        ram[23] = "0b00111101110100010010010101010111";
        ram[24] = "0b10111100110100001111010011100101";
        ram[25] = "0b10111100100100101100001011100110";
        ram[26] = "0b00111101011011100100110000001110";
        ram[27] = "0b00111100000110000011010001101010";
        ram[28] = "0b00111110000000111111101100110111";
        ram[29] = "0b10111100111011001010000110110100";
        ram[30] = "0b10111101110010101101000100101111";
        ram[31] = "0b10111101111010010110101110111010";
        ram[32] = "0b10111101111001111010100101011101";
        ram[33] = "0b10111101111110111111100101000000";
        ram[34] = "0b00111101000101011100101000000001";
        ram[35] = "0b10111101011001010000101001000110";
        ram[36] = "0b00111101000111011000000101101011";
        ram[37] = "0b10111110001100001010011000110011";
        ram[38] = "0b00111110001010001110011000001000";
        ram[39] = "0b10111100101111001000010000010101";
        ram[40] = "0b10111110000111000001011001011001";
        ram[41] = "0b00111100011000010001101001100010";
        ram[42] = "0b10111100111000100101111010011010";
        ram[43] = "0b00111100001101111000101110001000";
        ram[44] = "0b10111101000011101111000000001101";
        ram[45] = "0b10111101000001001101010111110011";
        ram[46] = "0b00111101111000101000000100110100";
        ram[47] = "0b10111101001000010101010001011110";
        ram[48] = "0b00111110000110011110010001010000";
        ram[49] = "0b10111101001101010111100010001000";
        ram[50] = "0b10111100110011101010010011011110";
        ram[51] = "0b00111110001110000111110100101100";
        ram[52] = "0b00111101000110110011111111011101";
        ram[53] = "0b00111101111000110011100010110100";
        ram[54] = "0b00111101100010010011111100000001";
        ram[55] = "0b10111101111000111011010011110110";
        ram[56] = "0b10111101101011100001011000000000";
        ram[57] = "0b10111101000110000100000001001110";
        ram[58] = "0b00111101100101111000011111000001";
        ram[59] = "0b00111101100001000011001001101100";
        ram[60] = "0b10111101000010001111010010000000";
        ram[61] = "0b10111101001011110111111001110011";
        ram[62] = "0b00111101011000010001100101110000";
        ram[63] = "0b00111101110011110011111111011001";
        ram[64] = "0b00111101001000000001001000100100";
        ram[65] = "0b00111110000011101000111111110011";
        ram[66] = "0b10111101100010111011110001111100";
        ram[67] = "0b00111101100111010011001110111000";
        ram[68] = "0b10111110001000010010011111110110";
        ram[69] = "0b10111100000010111010110111001001";
        ram[70] = "0b10111101001101100011101011110000";
        ram[71] = "0b00111101100100000001101100110110";
        ram[72] = "0b10111100011101110100010101000110";
        ram[73] = "0b10111101000001101111011111110001";
        ram[74] = "0b10111101101111011010011001100001";
        ram[75] = "0b10111101110001101010010100001101";
        ram[76] = "0b00111101101010111101101101000011";
        ram[77] = "0b10111100101100000100001000011101";
        ram[78] = "0b00111011000101110111110000001000";
        ram[79] = "0b10111101011100001010101011111000";
        ram[80] = "0b10111110000011000010011010011010";
        ram[81] = "0b10111101100101100001101111011001";
        ram[82] = "0b00111101011011100111100110010000";
        ram[83] = "0b00111101011110110000111101010000";
        ram[84] = "0b10111101101100010001110100110110";
        ram[85] = "0b10111101111111111011100010110010";
        ram[86] = "0b00111011101100010100001101000100";
        ram[87] = "0b00111101010101101001101100010111";
        ram[88] = "0b00111100101001100011000001001011";
        ram[89] = "0b10111101111100000000110011011000";
        ram[90] = "0b10111101101100000010100110100001";
        ram[91] = "0b00111110000000011000000011010100";
        ram[92] = "0b00111101001110000111110111000000";
        ram[93] = "0b00111101011010110100001011011010";
        ram[94] = "0b10111101000111100011010101011010";
        ram[95] = "0b00111110000111011001010010001110";
        ram[96] = "0b00111101010000111001101101100000";
        ram[97] = "0b00111110000100111101100000010111";
        ram[98] = "0b00111101001100011111100111001000";
        ram[99] = "0b00111101011011100000101111111101";
        ram[100] = "0b00111100101100010110100111010000";
        ram[101] = "0b00111100111110101011100100000100";
        ram[102] = "0b10111101010000111001010110110111";
        ram[103] = "0b00111101110010000010000100000001";
        ram[104] = "0b10111011111101000010110101100100";
        ram[105] = "0b00111100110001111001101101101010";
        ram[106] = "0b00111101011101100001101100101010";
        ram[107] = "0b10111110001101010101000111010111";
        ram[108] = "0b10111100110001101111011011001010";
        ram[109] = "0b10111101111010000000100101001110";
        ram[110] = "0b00111101001000101011010000101010";
        ram[111] = "0b00111011010000101101000101110110";
        ram[112] = "0b10111101100101000011110011011011";
        ram[113] = "0b10111100101111000111101101111100";
        ram[114] = "0b10111101110100101011001000111010";
        ram[115] = "0b00111100100011010011000100001011";
        ram[116] = "0b00111101010111101000010101011100";
        ram[117] = "0b00111101010101110111010101001101";
        ram[118] = "0b00111110010010000000010000010000";
        ram[119] = "0b00111110000010101011010111000100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_1) {
meminst = new inference_conv2d_f3_3_2_1_ram("inference_conv2d_f3_3_2_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_1() {
    delete meminst;
}


};//endmodule
#endif
