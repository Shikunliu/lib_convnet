// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_80_H__
#define __inference_mult_1_120_120_84_s_W4_80_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_80_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_80_ram) {
        ram[0] = "0b00111110001001011001010100110110";
        ram[1] = "0b00111110001000000111001101011000";
        ram[2] = "0b00111101111011111110100110111000";
        ram[3] = "0b00111101101101000101011001010110";
        ram[4] = "0b00111101010011110001101100001011";
        ram[5] = "0b00111101101110110101010110000100";
        ram[6] = "0b10111110001100001000110110001111";
        ram[7] = "0b10111101000100101100011001110110";
        ram[8] = "0b10111101100000101101000011001011";
        ram[9] = "0b00111101001001100010110000110100";
        ram[10] = "0b00111110001110010000101001111000";
        ram[11] = "0b00111100100100111100100000110100";
        ram[12] = "0b00111101111011001100110101010011";
        ram[13] = "0b00111101101010110001011010011010";
        ram[14] = "0b10111100101011001011011101001110";
        ram[15] = "0b10111101100110101110011001010000";
        ram[16] = "0b00111101100010110011010110110001";
        ram[17] = "0b00111101101011000011100100011100";
        ram[18] = "0b10111110000110101001101111010000";
        ram[19] = "0b00111101100011000001000100011011";
        ram[20] = "0b00111011000000001111101110111110";
        ram[21] = "0b00111101001000000101011111111010";
        ram[22] = "0b00111101100010101010010101001101";
        ram[23] = "0b00111110001111110011111000000011";
        ram[24] = "0b00111101100011110110100010100011";
        ram[25] = "0b10111110010111101000110001001000";
        ram[26] = "0b00111101011001011011011000001000";
        ram[27] = "0b00111101111110011101001010111111";
        ram[28] = "0b00111110000001110010110011011000";
        ram[29] = "0b10111101110100110110011000001110";
        ram[30] = "0b10111101111101110001011111011111";
        ram[31] = "0b00111100111101010000000100110100";
        ram[32] = "0b00111101011000011001001110011001";
        ram[33] = "0b10111100100101010100001101011110";
        ram[34] = "0b00111101000100101110111010111010";
        ram[35] = "0b10111100010011111101111011010000";
        ram[36] = "0b00111100111000000111011011001110";
        ram[37] = "0b00111101101000011000001010101010";
        ram[38] = "0b10111101001101101110101000001100";
        ram[39] = "0b10111110001111101011101000101000";
        ram[40] = "0b10111101110000101011101111000100";
        ram[41] = "0b10111110000110100001010010001100";
        ram[42] = "0b00111110001110010110001010001101";
        ram[43] = "0b00111101100010100111111000001000";
        ram[44] = "0b10111011100111110100001011111100";
        ram[45] = "0b10111101011011101110010001101010";
        ram[46] = "0b00111110010100101000010000010110";
        ram[47] = "0b10111110000100000001101110000110";
        ram[48] = "0b00111101111010111010110101111101";
        ram[49] = "0b10111100111101101010100011010100";
        ram[50] = "0b10111100110100000101000001000101";
        ram[51] = "0b00111101010111000111100010001100";
        ram[52] = "0b00111101101111001101101010110010";
        ram[53] = "0b10111101011101110100001110011001";
        ram[54] = "0b10111101100010010000111110000001";
        ram[55] = "0b10111110000110010010110110011001";
        ram[56] = "0b00111101000101110000100110000010";
        ram[57] = "0b10111101100100101010110010010000";
        ram[58] = "0b10111110001100000111111010011110";
        ram[59] = "0b10111101000101000110001001110011";
        ram[60] = "0b10111110010000111101010001101011";
        ram[61] = "0b10111100000010011010110000010001";
        ram[62] = "0b00111101100100110101100010010101";
        ram[63] = "0b10111100110010100010100100011001";
        ram[64] = "0b00111101101011011110111100001100";
        ram[65] = "0b00111110000111011011000010011010";
        ram[66] = "0b00111101100101011101100010111101";
        ram[67] = "0b00111101100010111111110010110110";
        ram[68] = "0b10111101111100000000101111001100";
        ram[69] = "0b00111110010001100000000010110000";
        ram[70] = "0b10111101010011011110111101011100";
        ram[71] = "0b00111101100111100101101001101100";
        ram[72] = "0b10111101111000100110110000111100";
        ram[73] = "0b10111101100110101011111001101010";
        ram[74] = "0b00111100011001001010100000100000";
        ram[75] = "0b10111101010011110000011001100011";
        ram[76] = "0b00111101111011010010100100010011";
        ram[77] = "0b00111101001001100010000001011011";
        ram[78] = "0b00111101100001001011100100010000";
        ram[79] = "0b10111101010100010100000001111111";
        ram[80] = "0b10111101111001011001011011001000";
        ram[81] = "0b00111100111001110101111010110100";
        ram[82] = "0b10111101010111100001110100111100";
        ram[83] = "0b10111101101111000000101000000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_80) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_80_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_80) {
meminst = new inference_mult_1_120_120_84_s_W4_80_ram("inference_mult_1_120_120_84_s_W4_80_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_80() {
    delete meminst;
}


};//endmodule
#endif
