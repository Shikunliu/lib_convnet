// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_5_H__
#define __inference_conv2d_f3_1_4_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_5_ram) {
        ram[0] = "0b10111101010100110010100000010110";
        ram[1] = "0b10111101010100110100111010101100";
        ram[2] = "0b00111100110111101011001100010100";
        ram[3] = "0b00111100110111011100111010110011";
        ram[4] = "0b00111101101110110001010000010101";
        ram[5] = "0b00111110000001001010100101001000";
        ram[6] = "0b10111101010100001010111010111111";
        ram[7] = "0b00111101100001010100110101010100";
        ram[8] = "0b10111100000110010011000111110101";
        ram[9] = "0b00111101111011100000000010001111";
        ram[10] = "0b10111110001011101100000101111111";
        ram[11] = "0b00111101110011110101101100011101";
        ram[12] = "0b00111110001001100011100000000000";
        ram[13] = "0b00111011000100011000110110110010";
        ram[14] = "0b00111101100001110101011101011101";
        ram[15] = "0b10111101011101000110011110110001";
        ram[16] = "0b00111101100010100011011000100111";
        ram[17] = "0b10111101100010101000001001000111";
        ram[18] = "0b10111101110010110000000010100010";
        ram[19] = "0b00111011111001010001111101111111";
        ram[20] = "0b10111101100100011111101101001101";
        ram[21] = "0b00111101010010000100000011100001";
        ram[22] = "0b10111101001111010000011000110110";
        ram[23] = "0b10111101110100101101111001000100";
        ram[24] = "0b00111100111000100110110111101001";
        ram[25] = "0b10111110000100110010000001010011";
        ram[26] = "0b10111101100101001100001000000111";
        ram[27] = "0b10111101010101011101001111011101";
        ram[28] = "0b00111110010010100100001100110101";
        ram[29] = "0b00111101101111001100000000011101";
        ram[30] = "0b10111100100011001100001110010011";
        ram[31] = "0b10111100110001110110000011101000";
        ram[32] = "0b10111101000000111101000000011111";
        ram[33] = "0b00111101111010101000111010110100";
        ram[34] = "0b10111101100010011100110001110101";
        ram[35] = "0b00111011110110011010111100001000";
        ram[36] = "0b00111101011100110101111100100011";
        ram[37] = "0b10111101000111100101100010110001";
        ram[38] = "0b00111100111000100111010101000000";
        ram[39] = "0b10111100111000000111010011101011";
        ram[40] = "0b10111100111010101001001110111101";
        ram[41] = "0b00111101011110010011001010111100";
        ram[42] = "0b00111101111001100100010011011000";
        ram[43] = "0b10111101101000100111110001000111";
        ram[44] = "0b00111101111011011010101000001101";
        ram[45] = "0b10111100101110001000101011110110";
        ram[46] = "0b10111101100100100001001010100010";
        ram[47] = "0b00111101110101010001010001111111";
        ram[48] = "0b10111100110101010011011011111111";
        ram[49] = "0b10111101000111001011101010110110";
        ram[50] = "0b10111110001000010011011111110100";
        ram[51] = "0b10111110000101111000000110000100";
        ram[52] = "0b00111101100101000010100001110110";
        ram[53] = "0b00111101111010101110100111101110";
        ram[54] = "0b10111101001011111110110001010111";
        ram[55] = "0b00111101000000010111111110101101";
        ram[56] = "0b10111100110111111011111001000001";
        ram[57] = "0b10111011100000100110011011111000";
        ram[58] = "0b00111110000000010100110010101001";
        ram[59] = "0b00111101100010111010011100110011";
        ram[60] = "0b00111101001110010001111001100100";
        ram[61] = "0b00111101101011101010101110100010";
        ram[62] = "0b00111110001000100010111101101010";
        ram[63] = "0b10111101011010000010000000101010";
        ram[64] = "0b10111100000101101010001111111100";
        ram[65] = "0b00111110000011011100111011000000";
        ram[66] = "0b10111110000010011001100000000111";
        ram[67] = "0b00111101010011110001000110000000";
        ram[68] = "0b10111100101101011010010010010010";
        ram[69] = "0b10111011100111001101011110111101";
        ram[70] = "0b00111100101010010000100100001110";
        ram[71] = "0b00111101110101011101000010110111";
        ram[72] = "0b00111101101101010100000001101111";
        ram[73] = "0b00111101100000010000000001111011";
        ram[74] = "0b00111101101000000100001101101100";
        ram[75] = "0b00111110000011000111011110011010";
        ram[76] = "0b10111101010110111111101101110100";
        ram[77] = "0b00111100110100101010010011101001";
        ram[78] = "0b10111101001101001111101110100101";
        ram[79] = "0b00111101010011001010000111101010";
        ram[80] = "0b00111100010010111001000111001111";
        ram[81] = "0b10111101101001111100110100010001";
        ram[82] = "0b10111101101111011101111100001110";
        ram[83] = "0b10111101100111101110101110100110";
        ram[84] = "0b10111101111011011100000000010010";
        ram[85] = "0b10111110010010110110110101000100";
        ram[86] = "0b00111110000010001011100100110100";
        ram[87] = "0b10111011111110010001111010100101";
        ram[88] = "0b10111110001100110001011011100011";
        ram[89] = "0b10111101100101111001001100010100";
        ram[90] = "0b00111101010101111001110011010101";
        ram[91] = "0b00111110000101001111001100110100";
        ram[92] = "0b10111101001100101110000001111000";
        ram[93] = "0b10111101011111000111011000100011";
        ram[94] = "0b00111101111100101001101110101110";
        ram[95] = "0b00111101001101001010000101111000";
        ram[96] = "0b10111101110000011100101101100010";
        ram[97] = "0b00111100101100011010110100100001";
        ram[98] = "0b00111101100101010110100010100101";
        ram[99] = "0b00111101001010011100001100010010";
        ram[100] = "0b00111101100110110000010101110101";
        ram[101] = "0b10111101011010110011000111011101";
        ram[102] = "0b10111101101101000001100100001100";
        ram[103] = "0b00111010001101001001000101100100";
        ram[104] = "0b00111100011000101000001100010111";
        ram[105] = "0b00111101000111011101111101111001";
        ram[106] = "0b10111101010110000101101010111010";
        ram[107] = "0b10111101001100011010110110001101";
        ram[108] = "0b00111011000010000000011010011111";
        ram[109] = "0b10111101101000110011000110010011";
        ram[110] = "0b10111101111000110001000011011100";
        ram[111] = "0b00111100110101011000100001011101";
        ram[112] = "0b00111110000011101111100100010010";
        ram[113] = "0b00111101001100111101111001010100";
        ram[114] = "0b00111101011011001110011101010100";
        ram[115] = "0b00111101111001011000110011010010";
        ram[116] = "0b10111101010001000110101101001111";
        ram[117] = "0b00111110001010011110101101100100";
        ram[118] = "0b00111101111110000010011111111010";
        ram[119] = "0b00111110000001010001100010110001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_5) {
meminst = new inference_conv2d_f3_1_4_5_ram("inference_conv2d_f3_1_4_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_5() {
    delete meminst;
}


};//endmodule
#endif
