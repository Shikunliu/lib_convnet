// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_1_H__
#define __inference_conv2d_f3_4_2_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_1_ram) {
        ram[0] = "0b00111101111001101110011111100110";
        ram[1] = "0b10111110000011011010100111001010";
        ram[2] = "0b00111101100001111001011110010111";
        ram[3] = "0b00110111001111101111011101110111";
        ram[4] = "0b10111101101001000010001011011010";
        ram[5] = "0b00111101111010001000110001100001";
        ram[6] = "0b00111101111010000100011100101100";
        ram[7] = "0b10111101010011011000011000010101";
        ram[8] = "0b00111100100101001011010101100100";
        ram[9] = "0b00111011001011100001001001110111";
        ram[10] = "0b00111101100111010011001011000110";
        ram[11] = "0b10111101101000001010110100111010";
        ram[12] = "0b00111110001000101100101110100111";
        ram[13] = "0b10111101001101010001001010000001";
        ram[14] = "0b10111101000111000110100110101000";
        ram[15] = "0b00111101100111110111000010001110";
        ram[16] = "0b00111100001101001010100101010101";
        ram[17] = "0b10111101001010111101100111110011";
        ram[18] = "0b00111101000100001010110000100000";
        ram[19] = "0b10111101110111111000100110000011";
        ram[20] = "0b00111110000010111110010010001010";
        ram[21] = "0b00111110000100011110010010110100";
        ram[22] = "0b00111101110110001100111000101101";
        ram[23] = "0b10111101001110100000110011110010";
        ram[24] = "0b00111101100001001101001011110110";
        ram[25] = "0b00111110001001101111110011011111";
        ram[26] = "0b10111100101110101010111001010010";
        ram[27] = "0b00111100010001001011000010011111";
        ram[28] = "0b10111101100010100111010100011111";
        ram[29] = "0b00111001001111100000011010101110";
        ram[30] = "0b10111110000101010011011000001101";
        ram[31] = "0b00111100001001100011110110000001";
        ram[32] = "0b00111110010001001010010110011100";
        ram[33] = "0b00111100100110011110101011000011";
        ram[34] = "0b00111001000010001110000000111001";
        ram[35] = "0b10111110000000101001010110100111";
        ram[36] = "0b10111100000110010010101010011110";
        ram[37] = "0b10111011111111000010001110100111";
        ram[38] = "0b00111011111010101010110100110010";
        ram[39] = "0b00111101110111010100111110011100";
        ram[40] = "0b00111100110100001100000110111001";
        ram[41] = "0b10111101000011001011001110001000";
        ram[42] = "0b10111101101010101011010010110111";
        ram[43] = "0b10111101100011010010111110000110";
        ram[44] = "0b10111110000111000001010001000000";
        ram[45] = "0b10111101101100001111011111000111";
        ram[46] = "0b00111010111000000001101010110010";
        ram[47] = "0b00111101001100101111110111101111";
        ram[48] = "0b10111101100101001101000101111110";
        ram[49] = "0b10111101000111101011100101000100";
        ram[50] = "0b00111101010110111111011010100001";
        ram[51] = "0b10111110000011111101000010001101";
        ram[52] = "0b10111100111010011111000010010100";
        ram[53] = "0b00111101101001010011000101001000";
        ram[54] = "0b10111100110001010001110101110110";
        ram[55] = "0b10111100100101001010000101111000";
        ram[56] = "0b10111100101100111010001010001111";
        ram[57] = "0b10111101000001111111111000010110";
        ram[58] = "0b00111110000000000010011000000011";
        ram[59] = "0b00111100101100111100000110011001";
        ram[60] = "0b10111100100111001010010110001000";
        ram[61] = "0b10111101111010101010001100100111";
        ram[62] = "0b10111101010001010011011011010110";
        ram[63] = "0b10111101101011001001011100011101";
        ram[64] = "0b00111100010111101011000101100110";
        ram[65] = "0b10111101101001101011001111110001";
        ram[66] = "0b10111100111101000101011101010101";
        ram[67] = "0b10111101000001010100000011001100";
        ram[68] = "0b00111011101011111010110001101011";
        ram[69] = "0b00111110000101011011110110010100";
        ram[70] = "0b10111101010011111110000111011010";
        ram[71] = "0b10111110000100111000000101010010";
        ram[72] = "0b00111101101100101101101000111010";
        ram[73] = "0b10111101101100011000011010011000";
        ram[74] = "0b00111100101110110011001000111011";
        ram[75] = "0b10111110000011100010101000111101";
        ram[76] = "0b10111100110010100001101100001100";
        ram[77] = "0b10111101100011111111101111110111";
        ram[78] = "0b00111100110110010001100101110111";
        ram[79] = "0b10111101000110010111100001110111";
        ram[80] = "0b10111110001111010001111100011101";
        ram[81] = "0b10111101110110101000001011101000";
        ram[82] = "0b00111101010100000110001100111111";
        ram[83] = "0b00111100100100111101010011111111";
        ram[84] = "0b00111101001100110110100100011001";
        ram[85] = "0b10111100111101000111101101100111";
        ram[86] = "0b00111011000101111011010110010100";
        ram[87] = "0b00111100000011011100010000101110";
        ram[88] = "0b00111110000010011110011110111000";
        ram[89] = "0b10111101110011010000011001111001";
        ram[90] = "0b00111100000101010100010110000010";
        ram[91] = "0b00111101011101011101010000101101";
        ram[92] = "0b10111100101011110001101011010101";
        ram[93] = "0b10111110010000001111010111100100";
        ram[94] = "0b10111101100001110100010000010010";
        ram[95] = "0b10111100011010000111011000001011";
        ram[96] = "0b10111110010010011101011101110111";
        ram[97] = "0b00111101100110010100110111001010";
        ram[98] = "0b00111101110010100111000101001011";
        ram[99] = "0b00111101100001100000011011111011";
        ram[100] = "0b10111011110110010000101100001001";
        ram[101] = "0b00111101110001011010111100101001";
        ram[102] = "0b10111101101110100110010000010100";
        ram[103] = "0b00111101011110001110100100111011";
        ram[104] = "0b00111100110001111110100111011001";
        ram[105] = "0b10111110000000111101000111001100";
        ram[106] = "0b00111101001000100110010011001010";
        ram[107] = "0b00111101100001111000111101000000";
        ram[108] = "0b10111100101111000010011000100001";
        ram[109] = "0b10111101101010001000010100110010";
        ram[110] = "0b00111101011000000000111001111000";
        ram[111] = "0b00111101110111010000100111100001";
        ram[112] = "0b10111110001101111110110000110101";
        ram[113] = "0b00111100110101111100001101101011";
        ram[114] = "0b10111110001101010101011100010101";
        ram[115] = "0b00111100010011001011111011110101";
        ram[116] = "0b10111110000000111110111010100010";
        ram[117] = "0b00111110010101110000001111110011";
        ram[118] = "0b10111101000110001100101010000010";
        ram[119] = "0b10111101001100110101000001011010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_1) {
meminst = new inference_conv2d_f3_4_2_1_ram("inference_conv2d_f3_4_2_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_1() {
    delete meminst;
}


};//endmodule
#endif
