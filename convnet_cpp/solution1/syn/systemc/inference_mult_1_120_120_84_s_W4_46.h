// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_46_H__
#define __inference_mult_1_120_120_84_s_W4_46_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_46_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_46_ram) {
        ram[0] = "0b00111101111101000110010111101001";
        ram[1] = "0b00111100011101011000000001001010";
        ram[2] = "0b10111101010101010111001111101011";
        ram[3] = "0b10111101100011001010100111010100";
        ram[4] = "0b10111100011010001101101111110111";
        ram[5] = "0b00111100110001000111101010111001";
        ram[6] = "0b10111101111001011110100100011000";
        ram[7] = "0b10111110010010000001100110001111";
        ram[8] = "0b00111101000100011110100000101010";
        ram[9] = "0b10111110001010110111010000010101";
        ram[10] = "0b00111110011010010101100001010011";
        ram[11] = "0b10111110011100101100000100101011";
        ram[12] = "0b10111100101001000110110001011011";
        ram[13] = "0b00111101000000001111110101110001";
        ram[14] = "0b00111101100010011110101100010011";
        ram[15] = "0b00111101111101100010000111111011";
        ram[16] = "0b10111101001001001110111111011001";
        ram[17] = "0b00111101111000010001010011010011";
        ram[18] = "0b10111101010010100011001010111111";
        ram[19] = "0b00111101011010011111001010010010";
        ram[20] = "0b00111100010111000111000111110001";
        ram[21] = "0b00111101111110101101000110001101";
        ram[22] = "0b10111011111111110101101000101000";
        ram[23] = "0b10111101011100100011011010110100";
        ram[24] = "0b10111101111100100011111011100010";
        ram[25] = "0b00111100111010001110001100011000";
        ram[26] = "0b00111101101000110000101101101000";
        ram[27] = "0b10111100110100100100011100101010";
        ram[28] = "0b10111110011100100000101111000100";
        ram[29] = "0b00111101001001011000101100001010";
        ram[30] = "0b10111101110011000101110011000010";
        ram[31] = "0b10111101100011101010100100011110";
        ram[32] = "0b10111110001001010000011000010100";
        ram[33] = "0b00111100001001101000001010110110";
        ram[34] = "0b00111110000110011110000111110100";
        ram[35] = "0b00111101100001100110011100110000";
        ram[36] = "0b00111101110011011010010001001000";
        ram[37] = "0b10111101111000011101111100110011";
        ram[38] = "0b10111110011001001010001010111010";
        ram[39] = "0b00111101111110100000101111100101";
        ram[40] = "0b10111011110100011000000000100101";
        ram[41] = "0b00111110001111101000001100011011";
        ram[42] = "0b10111101100000011111101001101001";
        ram[43] = "0b10111110000100100010001100011000";
        ram[44] = "0b00111101010010100100010011001000";
        ram[45] = "0b00111110001101011110101100110001";
        ram[46] = "0b00111110000001010101110100011100";
        ram[47] = "0b00111100001001100011011110100010";
        ram[48] = "0b10111101001011110101111000001100";
        ram[49] = "0b10111101010010100101100111000000";
        ram[50] = "0b00111101100110010100110010110000";
        ram[51] = "0b10111100011010100111110000001010";
        ram[52] = "0b10111100100001010001000100010111";
        ram[53] = "0b00111011111100011110011110111001";
        ram[54] = "0b00111110001000100110011001110111";
        ram[55] = "0b00111110001010110011110010000010";
        ram[56] = "0b10111110001010100011000010011000";
        ram[57] = "0b10111101110110011001101100101100";
        ram[58] = "0b10111101100100110100010111111000";
        ram[59] = "0b00111101110011100111110011010000";
        ram[60] = "0b00111110000011000010100110111111";
        ram[61] = "0b10111110000010100101010010000010";
        ram[62] = "0b10111101100010011111000011010111";
        ram[63] = "0b00111100001101110010000111010101";
        ram[64] = "0b10111101100011101011110111000110";
        ram[65] = "0b10111101001010010101000001110110";
        ram[66] = "0b00111101000110101100100011110100";
        ram[67] = "0b10111110001111110011001110000111";
        ram[68] = "0b00111100100100010000110110100100";
        ram[69] = "0b10111101100001001001110110001001";
        ram[70] = "0b00111101100111010000101010101010";
        ram[71] = "0b00111110010011001100110001000111";
        ram[72] = "0b10111110000110001000000110100001";
        ram[73] = "0b10111101101100000001111000001011";
        ram[74] = "0b10111110000011111001011110101011";
        ram[75] = "0b10111110011001101001001001110001";
        ram[76] = "0b10111101111100001111000011101001";
        ram[77] = "0b10111101010001110010110001011111";
        ram[78] = "0b00111100100010011111111111111110";
        ram[79] = "0b00111101100010101110101011010010";
        ram[80] = "0b00111101101101010000110101111001";
        ram[81] = "0b10111101001011100110010000010001";
        ram[82] = "0b10111101010111110011100100010110";
        ram[83] = "0b00111101011001011101101001101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_46) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_46_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_46) {
meminst = new inference_mult_1_120_120_84_s_W4_46_ram("inference_mult_1_120_120_84_s_W4_46_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_46() {
    delete meminst;
}


};//endmodule
#endif
