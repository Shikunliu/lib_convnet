// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_10_H__
#define __inference_conv2d_f3_0_4_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_10_ram) {
        ram[0] = "0b00111110000000111111011000111100";
        ram[1] = "0b00111110000001111000101011110100";
        ram[2] = "0b00111101010011001100000011110011";
        ram[3] = "0b10111101111111111000111011000001";
        ram[4] = "0b00111101110110010100100111101001";
        ram[5] = "0b00111110000001010010101001000001";
        ram[6] = "0b00111110001011101101100111100000";
        ram[7] = "0b00111100011100101011111011001111";
        ram[8] = "0b00111101111010101111111001100001";
        ram[9] = "0b00111100110111011100010000110110";
        ram[10] = "0b00111100110000111011010100101100";
        ram[11] = "0b10111101111110111101100000111000";
        ram[12] = "0b00111101111110111100111111010101";
        ram[13] = "0b10111100101001101011101001001001";
        ram[14] = "0b00111101100000110111101111011110";
        ram[15] = "0b00111101001111000001111011100101";
        ram[16] = "0b10111101111101110011000100001010";
        ram[17] = "0b10111101001110011111000111100100";
        ram[18] = "0b00111101001110100100111010010110";
        ram[19] = "0b10111101111001001010000111110001";
        ram[20] = "0b10111101110100110110011110100001";
        ram[21] = "0b00111100111010100111000111000100";
        ram[22] = "0b00111100111001000010010000110111";
        ram[23] = "0b00111110000001111101101101101110";
        ram[24] = "0b00111011101101010100000000101001";
        ram[25] = "0b00111101100000100111100110110101";
        ram[26] = "0b00111101010110011111111001000011";
        ram[27] = "0b00111110000000000111111000010111";
        ram[28] = "0b10111101010101011001100111000101";
        ram[29] = "0b10111101101001010100101000111100";
        ram[30] = "0b10111101001011010001101011101011";
        ram[31] = "0b10111101000000011001001101111110";
        ram[32] = "0b00111110001011000110001001011111";
        ram[33] = "0b00111101101110010011110101111100";
        ram[34] = "0b00111110001111001011101011111001";
        ram[35] = "0b00111101000000101000011010001101";
        ram[36] = "0b00111101110001100111101111001010";
        ram[37] = "0b10111110010001011010001010010100";
        ram[38] = "0b10111101101111000110100011010001";
        ram[39] = "0b10111100011001100001001000011000";
        ram[40] = "0b10111101100011111101101100111111";
        ram[41] = "0b10111101110100111000100110110101";
        ram[42] = "0b00111100101010011110011010111001";
        ram[43] = "0b00111101011000101000100100101100";
        ram[44] = "0b00111101101001100100010110010100";
        ram[45] = "0b10111100011101000001101000011001";
        ram[46] = "0b10111101101010001110010001101000";
        ram[47] = "0b10111101111100000001001110101001";
        ram[48] = "0b00111101100110000111101011011110";
        ram[49] = "0b10111100000100101111010000011001";
        ram[50] = "0b10111101011101000001000110011010";
        ram[51] = "0b00111101000001111100100011101100";
        ram[52] = "0b10111101110100011101010110000000";
        ram[53] = "0b00111110000000110011111010111100";
        ram[54] = "0b10111011010100111101001010100101";
        ram[55] = "0b00111100100010010011000001100000";
        ram[56] = "0b00111101111110110100100010010001";
        ram[57] = "0b00111110000000001000111101100101";
        ram[58] = "0b10111101000111111010110010111110";
        ram[59] = "0b10111110001110010101100000010000";
        ram[60] = "0b10111100001101010000100011110110";
        ram[61] = "0b10111101110100101111110000100110";
        ram[62] = "0b10111011101000001101111010000111";
        ram[63] = "0b00111110000000100001110111011010";
        ram[64] = "0b00111101010110101010101101100010";
        ram[65] = "0b10111110000101111000111101101001";
        ram[66] = "0b10111100010010110110110110111101";
        ram[67] = "0b10111100100100010010001011010011";
        ram[68] = "0b00111110001110111001101010011110";
        ram[69] = "0b10111101100000010101111001000111";
        ram[70] = "0b10111110011010111000110000110011";
        ram[71] = "0b00111101101011010101110001110100";
        ram[72] = "0b00111101000011000111000101011101";
        ram[73] = "0b00111101111011100010000110010110";
        ram[74] = "0b10111101100110111101100100000010";
        ram[75] = "0b00111101010100101001100001010011";
        ram[76] = "0b00111101011110001001110010101111";
        ram[77] = "0b00111100111000111000000001101101";
        ram[78] = "0b10111100000111101000100111111001";
        ram[79] = "0b00111101001111100100011111101010";
        ram[80] = "0b10111101100100100110101101100101";
        ram[81] = "0b10111101111010100100001100110101";
        ram[82] = "0b10111101000111001010010111110011";
        ram[83] = "0b00111101010110001110101010110011";
        ram[84] = "0b00111100101010000100011101111101";
        ram[85] = "0b00111101000111100001101100111110";
        ram[86] = "0b10111101100101011111001101111010";
        ram[87] = "0b00111101101110101100101110010011";
        ram[88] = "0b10111100011001001101001011101000";
        ram[89] = "0b00111101011101101100001100001011";
        ram[90] = "0b10111101001111010011101100101010";
        ram[91] = "0b00111101101111100110110000111111";
        ram[92] = "0b10111101010011101000100111101100";
        ram[93] = "0b00111100110111101101000000000101";
        ram[94] = "0b00111100111101010011000001100011";
        ram[95] = "0b00111101100100110000010011011010";
        ram[96] = "0b10111011011011111010100001000100";
        ram[97] = "0b00111101101000000100010010111100";
        ram[98] = "0b10111101110010100000111110000011";
        ram[99] = "0b00111100010011100000110110101010";
        ram[100] = "0b00111010111011010111110110011100";
        ram[101] = "0b00111110001100000000100111110110";
        ram[102] = "0b10111110001010101010110110100011";
        ram[103] = "0b10111110011001000111001011000001";
        ram[104] = "0b10111011101001000101100100100110";
        ram[105] = "0b00111101001011100101001010001110";
        ram[106] = "0b10111101111111110011100111010010";
        ram[107] = "0b10111100110001011010111111011000";
        ram[108] = "0b10111110000100010101010101010000";
        ram[109] = "0b00111011110100110001110001000111";
        ram[110] = "0b10111110000010110101000000101011";
        ram[111] = "0b10111101111001111001001101010111";
        ram[112] = "0b00111110000110001100010010111101";
        ram[113] = "0b00111101100001000010000011000001";
        ram[114] = "0b10111100110101110011110011001000";
        ram[115] = "0b00111110000011011101010010000100";
        ram[116] = "0b10111110000100101001111010010000";
        ram[117] = "0b00111101100100101001101000000001";
        ram[118] = "0b10111101110100011111011000000001";
        ram[119] = "0b00111101101110110100101101001011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_10) {
meminst = new inference_conv2d_f3_0_4_10_ram("inference_conv2d_f3_0_4_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_10() {
    delete meminst;
}


};//endmodule
#endif
