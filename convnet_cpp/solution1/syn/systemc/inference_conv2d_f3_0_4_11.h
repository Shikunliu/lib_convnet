// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_11_H__
#define __inference_conv2d_f3_0_4_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_11_ram) {
        ram[0] = "0b00111110000010100111110101100111";
        ram[1] = "0b00111101100100000101110101000101";
        ram[2] = "0b00111101011100011110010010011001";
        ram[3] = "0b10111101100011111011101011001011";
        ram[4] = "0b00111101101101010111011010111111";
        ram[5] = "0b10111101000001110010111011100011";
        ram[6] = "0b10111100111111000110111001111011";
        ram[7] = "0b00111101010010100111110110111000";
        ram[8] = "0b00111101101110011101011010000110";
        ram[9] = "0b10111100010000011010001110100100";
        ram[10] = "0b10111101101100010010110011110001";
        ram[11] = "0b00111100100010010000101100001100";
        ram[12] = "0b10111110000100101110000000011010";
        ram[13] = "0b00111100100001111010101101011011";
        ram[14] = "0b00111100011000010011100010010101";
        ram[15] = "0b00111101001011000100110000001001";
        ram[16] = "0b00111100100110101001001100101001";
        ram[17] = "0b00111110000110000011101111100110";
        ram[18] = "0b10111100111111111101010011001100";
        ram[19] = "0b00111100000010110011011110010111";
        ram[20] = "0b10111100111011011111101010101111";
        ram[21] = "0b10111011110000100110001011111100";
        ram[22] = "0b00111110010000011000110100100110";
        ram[23] = "0b00111101100110101011100111001101";
        ram[24] = "0b00111101110100111110101100111010";
        ram[25] = "0b10111110001011100001000010001100";
        ram[26] = "0b10111100101101100011011010001000";
        ram[27] = "0b00111010100111011001111110001110";
        ram[28] = "0b10111101101001101001010100111000";
        ram[29] = "0b00111110000010011010110001111001";
        ram[30] = "0b10111101100011101011011110110001";
        ram[31] = "0b00111101110111011010110101110101";
        ram[32] = "0b10111101100110100100111111011000";
        ram[33] = "0b10111011010011101110111001100101";
        ram[34] = "0b10111101010001010011001101000110";
        ram[35] = "0b00111101011110001110100101110000";
        ram[36] = "0b00111110001010100110010111001111";
        ram[37] = "0b10111011001001011010001011100111";
        ram[38] = "0b10111110001110000100000101101000";
        ram[39] = "0b10111101110100000100001111100101";
        ram[40] = "0b10111011110110110000110110000010";
        ram[41] = "0b00111101000100010110010011000111";
        ram[42] = "0b00111101110010010010010111001001";
        ram[43] = "0b00111100000010011000111010101010";
        ram[44] = "0b10111101001010111111001110100100";
        ram[45] = "0b10111101010000000010111101001010";
        ram[46] = "0b00111101011000101010111010110110";
        ram[47] = "0b00111101101111100101111010011101";
        ram[48] = "0b10111101010100011101000110000100";
        ram[49] = "0b10111110001001110101100010011111";
        ram[50] = "0b00111110000111000010111000110100";
        ram[51] = "0b10111100010000100101000000000111";
        ram[52] = "0b10111110000001010111111101110011";
        ram[53] = "0b10111101100000101101101100010001";
        ram[54] = "0b10111101010111011110000001010000";
        ram[55] = "0b00111101010011001011101110011010";
        ram[56] = "0b10111101010100010010001111111010";
        ram[57] = "0b00111101100001111111101110010010";
        ram[58] = "0b00111100101110011000101110100111";
        ram[59] = "0b10111101100101001100000111010001";
        ram[60] = "0b10111100101000110001001011110101";
        ram[61] = "0b10111110000101010101100000100001";
        ram[62] = "0b10111011100000011000100011101100";
        ram[63] = "0b00111110000011111110100011101110";
        ram[64] = "0b00111101101101011111000110010111";
        ram[65] = "0b00111100011001000011001111110010";
        ram[66] = "0b00111101000001011100101100110110";
        ram[67] = "0b00111110010110001100110010011010";
        ram[68] = "0b10111100011011010100100101000100";
        ram[69] = "0b10111110000011001011001001010011";
        ram[70] = "0b00111100100010001100100111010011";
        ram[71] = "0b00111100100101111110000011111101";
        ram[72] = "0b00111101000011011111100100011101";
        ram[73] = "0b00111101101101111110001111000100";
        ram[74] = "0b10111101101000000111101111100100";
        ram[75] = "0b10111101111011111010011110101000";
        ram[76] = "0b00111110000001001010100100000100";
        ram[77] = "0b00111011001010100011101101111101";
        ram[78] = "0b00111101100101100100111011101001";
        ram[79] = "0b10111100000001101100110010100011";
        ram[80] = "0b00111101001100100000010111010111";
        ram[81] = "0b10111100101000001011111111111111";
        ram[82] = "0b10111101101000111111001010000011";
        ram[83] = "0b10111110000100011000010011000010";
        ram[84] = "0b10111101110110001100001000011110";
        ram[85] = "0b10111110000001010101000010000111";
        ram[86] = "0b10111101001011100000101001001111";
        ram[87] = "0b10111101010101100010010110100111";
        ram[88] = "0b00111101101101001001101111101001";
        ram[89] = "0b10111101111011011010011111110100";
        ram[90] = "0b00111101110010001111000011100010";
        ram[91] = "0b10111101010110000111001101011111";
        ram[92] = "0b10111101101001011010100101001010";
        ram[93] = "0b00111110001010010110001101010110";
        ram[94] = "0b10111100101011111110010001011111";
        ram[95] = "0b00111100001110010100110110010100";
        ram[96] = "0b10111100010010101111101001100101";
        ram[97] = "0b10111101111111001000101001111010";
        ram[98] = "0b10111101100000010000010000100111";
        ram[99] = "0b00111101111111110001010110100101";
        ram[100] = "0b00111101100111010000101000010111";
        ram[101] = "0b00111110000011001111010111110101";
        ram[102] = "0b00111100001001001110001000111000";
        ram[103] = "0b00111101111010101001110101100010";
        ram[104] = "0b00111011010011001000111010001110";
        ram[105] = "0b10111101100001000101011111110110";
        ram[106] = "0b00111110000100110001101000001001";
        ram[107] = "0b10111110000001110000100001101000";
        ram[108] = "0b00111101110101111010011100000001";
        ram[109] = "0b00111101110110110011010000011110";
        ram[110] = "0b00111101001001001100101011110000";
        ram[111] = "0b00111101011010110100110111110111";
        ram[112] = "0b10111101111011101010011111001110";
        ram[113] = "0b00111101101111100110110011000101";
        ram[114] = "0b10111101111000011010011010010011";
        ram[115] = "0b10111101111000101100001010111101";
        ram[116] = "0b10111101010001111001011101101110";
        ram[117] = "0b00111101110011011011101111100000";
        ram[118] = "0b10111100100100110011110000011101";
        ram[119] = "0b00111100110001000011010000001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_11) {
meminst = new inference_conv2d_f3_0_4_11_ram("inference_conv2d_f3_0_4_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_11() {
    delete meminst;
}


};//endmodule
#endif
