// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_27_H__
#define __inference_mult_1_120_120_84_s_W4_27_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_27_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_27_ram) {
        ram[0] = "0b10111011110001100001001110001011";
        ram[1] = "0b00111100100100001000010110111111";
        ram[2] = "0b00111101100110110010000110011100";
        ram[3] = "0b10111110000010011010110010111101";
        ram[4] = "0b10111101101010010000100110100001";
        ram[5] = "0b10111101000100110111001001101110";
        ram[6] = "0b00111100010100001100010010101001";
        ram[7] = "0b00111100000101011011110101000001";
        ram[8] = "0b00111101100010000100010001110010";
        ram[9] = "0b00111101111010001010110011100010";
        ram[10] = "0b00111101000000101000011000111101";
        ram[11] = "0b10111100011110011010000101000001";
        ram[12] = "0b00111100101010110100111100000011";
        ram[13] = "0b10111110001111110110010111011100";
        ram[14] = "0b00111101011101001110000110100100";
        ram[15] = "0b10111011110010100111000011010010";
        ram[16] = "0b10111101100111101010001111011111";
        ram[17] = "0b00111101101100011010101110110111";
        ram[18] = "0b00111101000010000110101111011111";
        ram[19] = "0b00111100101010000111010110100000";
        ram[20] = "0b00111110001001111010110111010001";
        ram[21] = "0b10111101100001100010000111000101";
        ram[22] = "0b10111101101100001001101111000100";
        ram[23] = "0b10111101101001001011011101111101";
        ram[24] = "0b10111101000101101010111101101111";
        ram[25] = "0b10111011110010111110111100101100";
        ram[26] = "0b10111011011000001111101101011000";
        ram[27] = "0b00111101001001100100000010001100";
        ram[28] = "0b10111110001100000101000000110111";
        ram[29] = "0b10111101001111101010101110000111";
        ram[30] = "0b00111100010110000111101111000010";
        ram[31] = "0b00111101100000000101110010001001";
        ram[32] = "0b10111100101101111110110111100011";
        ram[33] = "0b00111101010100011110011011001101";
        ram[34] = "0b10111110000101001001110001101111";
        ram[35] = "0b00111101101010100000001000111111";
        ram[36] = "0b10111011110111110101100110000010";
        ram[37] = "0b00111101001100111010110101000001";
        ram[38] = "0b10111101010010110100010101000011";
        ram[39] = "0b00111100110101000110111111000100";
        ram[40] = "0b00111101000010100010001001111110";
        ram[41] = "0b10111101111111101101100101011010";
        ram[42] = "0b00111100111110010001101110101011";
        ram[43] = "0b10111100101001100110000000011100";
        ram[44] = "0b00111101000011011100011010101101";
        ram[45] = "0b10111110001100111111110011001010";
        ram[46] = "0b10111100111101000011111110100011";
        ram[47] = "0b00111100001010001000100001001010";
        ram[48] = "0b00111110001110110110110111001010";
        ram[49] = "0b00111100111100110000010000000100";
        ram[50] = "0b00111110001101011111010101101010";
        ram[51] = "0b10111011001101001111000010001101";
        ram[52] = "0b00111101100100110101100011110011";
        ram[53] = "0b00111101011010101100011011101001";
        ram[54] = "0b10111010101000001001100100111101";
        ram[55] = "0b00111101011111011101101100010010";
        ram[56] = "0b00111101011100000000011110011010";
        ram[57] = "0b10111101111100011011101000111101";
        ram[58] = "0b00111100111000001011000000001110";
        ram[59] = "0b10111100110010100101001110101011";
        ram[60] = "0b10111101011010010100010001100111";
        ram[61] = "0b00111101101011110011011000110100";
        ram[62] = "0b10111101100110000011111101110111";
        ram[63] = "0b00111001001001000010111101011011";
        ram[64] = "0b10111100111110110101111111110011";
        ram[65] = "0b10111100110110100100000010001001";
        ram[66] = "0b00111110000101001101111001111111";
        ram[67] = "0b00111101011011110101100111011010";
        ram[68] = "0b10111101110000000010011010100100";
        ram[69] = "0b10111101111110110000001101011100";
        ram[70] = "0b00111101111010101100001100100010";
        ram[71] = "0b00111100100010110101011101001100";
        ram[72] = "0b10111100001111010010011001100111";
        ram[73] = "0b00111100100001001000111100010001";
        ram[74] = "0b00111100111110001010011100010000";
        ram[75] = "0b00111100110110010110010110010111";
        ram[76] = "0b00111100011110111100011100100001";
        ram[77] = "0b00111110000101110001000011001011";
        ram[78] = "0b00111101101111111000101001011010";
        ram[79] = "0b00111110001110000011100110001010";
        ram[80] = "0b00111101001000111100100100110011";
        ram[81] = "0b10111101000001010101110111110011";
        ram[82] = "0b00111101011101000001111101110010";
        ram[83] = "0b10111100110010110100101000010110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_27) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_27_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_27) {
meminst = new inference_mult_1_120_120_84_s_W4_27_ram("inference_mult_1_120_120_84_s_W4_27_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_27() {
    delete meminst;
}


};//endmodule
#endif
