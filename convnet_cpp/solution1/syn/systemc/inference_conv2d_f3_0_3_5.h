// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_5_H__
#define __inference_conv2d_f3_0_3_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_5_ram) {
        ram[0] = "0b00111101111010101000000110011001";
        ram[1] = "0b00111101110001000111111101100100";
        ram[2] = "0b00111100001111011001011001100100";
        ram[3] = "0b00111011100001010111000100000011";
        ram[4] = "0b10111101001110011001101110110010";
        ram[5] = "0b00111101110011101011000100111110";
        ram[6] = "0b00111101011011101100011011011000";
        ram[7] = "0b00111100101010000001110110001011";
        ram[8] = "0b00111101110010011111110000011101";
        ram[9] = "0b00111100110011101101110000111100";
        ram[10] = "0b00111101011111001001001110110100";
        ram[11] = "0b10111110010010000001000000011111";
        ram[12] = "0b10111110001011110111110101110100";
        ram[13] = "0b10111011110111010010010010110100";
        ram[14] = "0b00111101011001110000011101110110";
        ram[15] = "0b00111110010110100011011000011010";
        ram[16] = "0b00111101110010011100001001111111";
        ram[17] = "0b00111110000011111110000101010100";
        ram[18] = "0b00111010111101011011011011010001";
        ram[19] = "0b00111110001000110100111110000011";
        ram[20] = "0b00111110001010010001110011010010";
        ram[21] = "0b00111101100011100110011101010001";
        ram[22] = "0b10111101000101011010001011001010";
        ram[23] = "0b00111101111101111100001101010000";
        ram[24] = "0b00111101110010101111001010100010";
        ram[25] = "0b00111100111010100011101100000111";
        ram[26] = "0b00111101110100011011100000100100";
        ram[27] = "0b00111101001000000001000010101100";
        ram[28] = "0b00111100010000111000001100001101";
        ram[29] = "0b10111110001001110000101101001010";
        ram[30] = "0b00111011111011010110000101000010";
        ram[31] = "0b10111101100111000111011101001010";
        ram[32] = "0b10111110001000100000010010110000";
        ram[33] = "0b00111011110011011111111011100110";
        ram[34] = "0b00111101000011000111011001001011";
        ram[35] = "0b00111101010111011110000101011101";
        ram[36] = "0b00111101101111011101101110001011";
        ram[37] = "0b10111101100001111111001101110001";
        ram[38] = "0b10111100011011000100111101001001";
        ram[39] = "0b10111100111111010111100101110011";
        ram[40] = "0b10111101000101110101111111001110";
        ram[41] = "0b10111100011000011010101100010110";
        ram[42] = "0b10111101111110010010001100011100";
        ram[43] = "0b10111100101100110011111111001000";
        ram[44] = "0b10111100110110000110100111101111";
        ram[45] = "0b00111101010110001001001000110011";
        ram[46] = "0b00111101100101100101000011110101";
        ram[47] = "0b00111110001000011011000010001010";
        ram[48] = "0b10111110000010101110101100111110";
        ram[49] = "0b10111100101101011101001100100001";
        ram[50] = "0b00111101011110100001101110000101";
        ram[51] = "0b00111101011111100001101111111010";
        ram[52] = "0b10111110000001001010010001001100";
        ram[53] = "0b10111110001010010001001010011001";
        ram[54] = "0b10111110001101110110100000010110";
        ram[55] = "0b00111101110010111110101001101010";
        ram[56] = "0b10111010111100011111111011100000";
        ram[57] = "0b00111110000010111100101100011101";
        ram[58] = "0b10111101110011111101100011110001";
        ram[59] = "0b00111110000010100000101010010110";
        ram[60] = "0b10111101101101111101100111000001";
        ram[61] = "0b10111101111000011100000011001010";
        ram[62] = "0b10111110000000000100110011001111";
        ram[63] = "0b10111101011110100011010111010110";
        ram[64] = "0b00111101110010000011011010011011";
        ram[65] = "0b10111101110100011111110101011001";
        ram[66] = "0b10111101100110101110100110101011";
        ram[67] = "0b10111101011100001101100010110000";
        ram[68] = "0b10111101011110000001001110100010";
        ram[69] = "0b10111101010100000000111110010010";
        ram[70] = "0b10111101001000011100011111101100";
        ram[71] = "0b10111110000101111001010111110110";
        ram[72] = "0b00111100011110011110111101000101";
        ram[73] = "0b00111101111000110001000001010110";
        ram[74] = "0b00111101111101101100101101010011";
        ram[75] = "0b10111100100000010101101010101001";
        ram[76] = "0b10111110000001101010001101111011";
        ram[77] = "0b10111101100011000100101100100101";
        ram[78] = "0b10111100001111100100100111101000";
        ram[79] = "0b10111101111110110011000001110011";
        ram[80] = "0b10111101101111000011010101001000";
        ram[81] = "0b00111011110011110100010101001101";
        ram[82] = "0b10111101101110001101000100111000";
        ram[83] = "0b10111101111000101110000010100000";
        ram[84] = "0b00111101000000111010000110010000";
        ram[85] = "0b10111100011101101110011110111110";
        ram[86] = "0b00111110000011111000001010110010";
        ram[87] = "0b00111101110111001110011000111010";
        ram[88] = "0b00111101011101100011001010001100";
        ram[89] = "0b00111101001101011111000000010001";
        ram[90] = "0b10111100011011110011011011110000";
        ram[91] = "0b10111110010010001111011000000110";
        ram[92] = "0b00111100001000101001000001001110";
        ram[93] = "0b00111101010101001011010010101000";
        ram[94] = "0b10111101001100000000001010101101";
        ram[95] = "0b00111101111100011001100110111011";
        ram[96] = "0b10111101101011110001011101101101";
        ram[97] = "0b00111101100010010011101011011100";
        ram[98] = "0b10111101100110001100010101000011";
        ram[99] = "0b10111101100010000100001010101010";
        ram[100] = "0b00111101111010100111110001011011";
        ram[101] = "0b10111101000011000011011100101011";
        ram[102] = "0b10111101010101001101010010001001";
        ram[103] = "0b00111100111100100100110010111001";
        ram[104] = "0b00111101001010111100011010001101";
        ram[105] = "0b00111101000011010101100111110000";
        ram[106] = "0b00111110000111011110011001011000";
        ram[107] = "0b10111101010101010011111111001101";
        ram[108] = "0b00111110001110101111000000111001";
        ram[109] = "0b00111011100001100110110101010111";
        ram[110] = "0b00111101000110000001011000001100";
        ram[111] = "0b00111101001100001000000011010001";
        ram[112] = "0b10111101010101001001110001010100";
        ram[113] = "0b10111110001001001111101010001011";
        ram[114] = "0b00111101110011101101111101100001";
        ram[115] = "0b10111101110110100001100001111010";
        ram[116] = "0b00111101110001101001010001100001";
        ram[117] = "0b10111101101001110011011111000000";
        ram[118] = "0b10111101100101100101000010010111";
        ram[119] = "0b00111101111101001101010000000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_5) {
meminst = new inference_conv2d_f3_0_3_5_ram("inference_conv2d_f3_0_3_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_5() {
    delete meminst;
}


};//endmodule
#endif
