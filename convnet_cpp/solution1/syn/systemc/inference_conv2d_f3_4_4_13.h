// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_13_H__
#define __inference_conv2d_f3_4_4_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_13_ram) {
        ram[0] = "0b00111101101010110111100101010011";
        ram[1] = "0b10111100110110111100111001011101";
        ram[2] = "0b10111101100011011111111100010111";
        ram[3] = "0b00111110001110101110011000000000";
        ram[4] = "0b10111101010010110100110100000101";
        ram[5] = "0b10111101011000110010010000100111";
        ram[6] = "0b10111100001011101110001101000010";
        ram[7] = "0b00111110010001111110000000100110";
        ram[8] = "0b10111100110111100101111011111011";
        ram[9] = "0b00111101101011011110110000001111";
        ram[10] = "0b00111101100110000101000010000001";
        ram[11] = "0b10111001111100011011000110010001";
        ram[12] = "0b10111110000011100110011000000010";
        ram[13] = "0b00111101101111000100111011010000";
        ram[14] = "0b10111101100110100101010110000001";
        ram[15] = "0b10111100110011101110100000110000";
        ram[16] = "0b00111101011110011101011011110001";
        ram[17] = "0b00111101011110110110111011010110";
        ram[18] = "0b00111101111010100000011001100100";
        ram[19] = "0b00111101111000010101010011001010";
        ram[20] = "0b10111101110110100010110001100111";
        ram[21] = "0b00111101100101001000010001010001";
        ram[22] = "0b00111100110101111001001110011010";
        ram[23] = "0b00111110000001001111001001101011";
        ram[24] = "0b10111101110100110001111111001101";
        ram[25] = "0b10111101110101100100010100011100";
        ram[26] = "0b00111100000000101000101001001001";
        ram[27] = "0b00111110001100000000011011010001";
        ram[28] = "0b10111110000010010100101101111011";
        ram[29] = "0b00111110010011010110111111011011";
        ram[30] = "0b00111101010101111101001110010001";
        ram[31] = "0b10111101101001101100111110101101";
        ram[32] = "0b10111101010010011001110000101011";
        ram[33] = "0b10111101100101111011101110011011";
        ram[34] = "0b00111110011001101110011100011101";
        ram[35] = "0b00111101110101111111110110000010";
        ram[36] = "0b00111101101111011000000001000100";
        ram[37] = "0b10111100100101101111001100101100";
        ram[38] = "0b00111110001000001011111000001110";
        ram[39] = "0b00111101001101111100101100010011";
        ram[40] = "0b00111101101011010111101010011010";
        ram[41] = "0b00111101100011110100001010100001";
        ram[42] = "0b00111110001000011011111010110010";
        ram[43] = "0b00111100110000000011111001111111";
        ram[44] = "0b10111100101000001001001001111100";
        ram[45] = "0b00111100001111010011100110110010";
        ram[46] = "0b00111101000001010010101100110011";
        ram[47] = "0b00111101110001111000100001100010";
        ram[48] = "0b00111100001000001111010000101100";
        ram[49] = "0b00111100001101011101001001001010";
        ram[50] = "0b10111101001110001010110110010001";
        ram[51] = "0b10111101101111110110011001010101";
        ram[52] = "0b00111110000000001010011110000011";
        ram[53] = "0b10111101110001001001110000011111";
        ram[54] = "0b00111110000000000110000011111110";
        ram[55] = "0b10111110001010001110111100110101";
        ram[56] = "0b10111100001110111111101000010111";
        ram[57] = "0b10111101110101011101010111110101";
        ram[58] = "0b10111101100100001100111001110111";
        ram[59] = "0b10111101011101000010110110110100";
        ram[60] = "0b10111101101110010100100011000001";
        ram[61] = "0b10111011111010011100110011100011";
        ram[62] = "0b10111101011100110110110110000000";
        ram[63] = "0b00111101110111001100011111010010";
        ram[64] = "0b00111101010000010100100110010001";
        ram[65] = "0b10111101000110001101000100011101";
        ram[66] = "0b10111101111110111100111101001111";
        ram[67] = "0b10111101010101101010000110110010";
        ram[68] = "0b00111110000100001111011001101010";
        ram[69] = "0b10111101101101100101101111000010";
        ram[70] = "0b00111100100101111101000110101110";
        ram[71] = "0b10111100010110000010011000110010";
        ram[72] = "0b10111101111100110001001000101011";
        ram[73] = "0b00111100110011100011101100101100";
        ram[74] = "0b10111110010011010010110000111000";
        ram[75] = "0b00111101001010101000000001010111";
        ram[76] = "0b00111101100101101001100010000110";
        ram[77] = "0b10111101100101001101011010101111";
        ram[78] = "0b10111101011100101110001110011101";
        ram[79] = "0b10111101101001100110111111010110";
        ram[80] = "0b00111101101100011101100100000011";
        ram[81] = "0b00111110000011100001011101011101";
        ram[82] = "0b10111101111110101101010100111001";
        ram[83] = "0b10111110000101101110111010110111";
        ram[84] = "0b10111011100001110111011101101110";
        ram[85] = "0b10111110001100100110011000110100";
        ram[86] = "0b10111101101100010110000010111110";
        ram[87] = "0b00111101111001101111100000100111";
        ram[88] = "0b10111110010001001010101111100111";
        ram[89] = "0b10111011010101001011010001001101";
        ram[90] = "0b10111110000011101001101001110000";
        ram[91] = "0b00111101101010111011100011101011";
        ram[92] = "0b10111101101001000000101001101100";
        ram[93] = "0b00111101000111111000110111001111";
        ram[94] = "0b00111101000111111100010110110011";
        ram[95] = "0b00111010111001011011100100101101";
        ram[96] = "0b00111100110001010111110111101110";
        ram[97] = "0b00111110011101111111101100100110";
        ram[98] = "0b00111100010010000111110101000111";
        ram[99] = "0b00111101000111110001111000100011";
        ram[100] = "0b10111101011000111111000010111011";
        ram[101] = "0b00111101100001001100001100101110";
        ram[102] = "0b00111101100110111100000001010000";
        ram[103] = "0b10111110001101010010100100110101";
        ram[104] = "0b00111101000110110001110110101110";
        ram[105] = "0b00111101000100000111011011011011";
        ram[106] = "0b10111110000010111010101000010101";
        ram[107] = "0b00111101010100101100100101001011";
        ram[108] = "0b10111011011100010111011111010010";
        ram[109] = "0b10111100010010110101101001110001";
        ram[110] = "0b00111101110001011010000110100010";
        ram[111] = "0b10111100100110111011101010100110";
        ram[112] = "0b00111101100011011011100011001000";
        ram[113] = "0b10111101111011000010000001001111";
        ram[114] = "0b00111101110100001010001001000100";
        ram[115] = "0b00111101100010011000111100000010";
        ram[116] = "0b10111101110011100110001110100110";
        ram[117] = "0b10111100001011001000110100100111";
        ram[118] = "0b00111011101101111000011000111111";
        ram[119] = "0b00111101100010010001100001011101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_13) {
meminst = new inference_conv2d_f3_4_4_13_ram("inference_conv2d_f3_4_4_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_13() {
    delete meminst;
}


};//endmodule
#endif
