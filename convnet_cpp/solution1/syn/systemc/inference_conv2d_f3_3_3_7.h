// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_7_H__
#define __inference_conv2d_f3_3_3_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_7_ram) {
        ram[0] = "0b10111011010110100110010011100110";
        ram[1] = "0b10111101000101001100100011100101";
        ram[2] = "0b00111101001000000011101000010111";
        ram[3] = "0b10111101100110100001101111010101";
        ram[4] = "0b00111101010101110110111101101101";
        ram[5] = "0b10111101101101100111001010011110";
        ram[6] = "0b00111101101100111110011011000101";
        ram[7] = "0b10111011101101000010111101110010";
        ram[8] = "0b00111101110000001111000001111110";
        ram[9] = "0b00111101011000000001011101100010";
        ram[10] = "0b00111101000010011111000110111100";
        ram[11] = "0b00111101111111101101101111111001";
        ram[12] = "0b00111101110000101010101110111001";
        ram[13] = "0b10111101011011111111101111110111";
        ram[14] = "0b10111110000111011110100100111010";
        ram[15] = "0b10111101100100000111101000011011";
        ram[16] = "0b00111101110001111111110001110110";
        ram[17] = "0b10111101111000101000011101111111";
        ram[18] = "0b10111101001011100110100001000011";
        ram[19] = "0b00111110001011000001010110010000";
        ram[20] = "0b10111100100000000000111110000101";
        ram[21] = "0b10111101110111100111011011001001";
        ram[22] = "0b00111110001110001011110000010111";
        ram[23] = "0b00111101000100100010111010111100";
        ram[24] = "0b10111101001100111010111110101010";
        ram[25] = "0b10111101000110010110001000111100";
        ram[26] = "0b00111101101100000001010000100010";
        ram[27] = "0b10111110000110010000000010000010";
        ram[28] = "0b10111101110000111011010111011010";
        ram[29] = "0b00111101000110011100101110111001";
        ram[30] = "0b00111100111101000011100001001100";
        ram[31] = "0b10111101011001000011000101010011";
        ram[32] = "0b10111101011100110110110111010001";
        ram[33] = "0b10111100111000110101011011100111";
        ram[34] = "0b10111101000101101101110010100000";
        ram[35] = "0b10111101001101010010101001001111";
        ram[36] = "0b00111110000010100110110001011101";
        ram[37] = "0b10111101100000000110000110000100";
        ram[38] = "0b10111101110100010000100010000001";
        ram[39] = "0b00111110000011011011011110101110";
        ram[40] = "0b10111110000111100000101001000010";
        ram[41] = "0b00111100110101111011100100100100";
        ram[42] = "0b00111101001001001011110101101010";
        ram[43] = "0b00111100010001101010000011001110";
        ram[44] = "0b10111100101101001101111001100100";
        ram[45] = "0b00111101010101111001000011100001";
        ram[46] = "0b10111101101111110010011101000010";
        ram[47] = "0b00111101111111000100011111100101";
        ram[48] = "0b10111101100001011000111000000111";
        ram[49] = "0b00111101011010000101001011010000";
        ram[50] = "0b10111100100101100110100110011001";
        ram[51] = "0b10111101000100001110010011011010";
        ram[52] = "0b10111101001010011110110110001010";
        ram[53] = "0b10111101010000111111011111110111";
        ram[54] = "0b10111101111110000111101011010001";
        ram[55] = "0b10111100110111010010111010101111";
        ram[56] = "0b00111110000001010010001110110011";
        ram[57] = "0b10111100000111001100100000001101";
        ram[58] = "0b10111100100010010110010001100011";
        ram[59] = "0b00111101111101000011110100000100";
        ram[60] = "0b10111100001101110000111011110101";
        ram[61] = "0b10111101101001000011111000010000";
        ram[62] = "0b10111110010010100000000001011100";
        ram[63] = "0b00111101100100101001110001111000";
        ram[64] = "0b00111101010101010000100011000001";
        ram[65] = "0b00111101101001111100001001111010";
        ram[66] = "0b00111101110110101101010110111111";
        ram[67] = "0b10111110001000001101110111000110";
        ram[68] = "0b00111101100001110000110000000110";
        ram[69] = "0b10111101101000000100110100010010";
        ram[70] = "0b00111110000011111011110000011011";
        ram[71] = "0b00111100110001100000011010101010";
        ram[72] = "0b10111101100100101011111010110100";
        ram[73] = "0b10111101100001101110110111010011";
        ram[74] = "0b00111101000011011010011101010011";
        ram[75] = "0b10111101110101010011011100011001";
        ram[76] = "0b00111101011001100001111010010011";
        ram[77] = "0b10111100101000100000100110101011";
        ram[78] = "0b10111100110101011001001010100100";
        ram[79] = "0b10111100001000001100110010001001";
        ram[80] = "0b00111110000100000110011100000110";
        ram[81] = "0b00111001101100101111001010000110";
        ram[82] = "0b10111110000000111000100110110101";
        ram[83] = "0b00111101110110111110000010011100";
        ram[84] = "0b00111101101010000010010001000001";
        ram[85] = "0b00111110000111000101001100101010";
        ram[86] = "0b00111100100111011100100010011110";
        ram[87] = "0b00111100001111001001101110010010";
        ram[88] = "0b10111100010111101010011011101010";
        ram[89] = "0b00111101110011010110011001101011";
        ram[90] = "0b00111101001110111110100001011110";
        ram[91] = "0b10111101001011000010000010000101";
        ram[92] = "0b10111101011001100001100100011111";
        ram[93] = "0b00111101100000000110100100010001";
        ram[94] = "0b00111101000111101011010000100000";
        ram[95] = "0b00111101000010011011101011100100";
        ram[96] = "0b00111101001101100010111011111100";
        ram[97] = "0b00111101011000111011110100001001";
        ram[98] = "0b10111101101001010101100110001100";
        ram[99] = "0b10111100110101110100000011000100";
        ram[100] = "0b10111110000001111011100111100000";
        ram[101] = "0b10111110001000110101000110011100";
        ram[102] = "0b10111101111110100001110010101100";
        ram[103] = "0b00111100001101101110111000111110";
        ram[104] = "0b00111101110001100011000011111010";
        ram[105] = "0b00111101101010101100000100001001";
        ram[106] = "0b10111100101111100010011000001011";
        ram[107] = "0b00111101000000010001000101000010";
        ram[108] = "0b10111100101101111001111000110010";
        ram[109] = "0b00111101010101000111111000000111";
        ram[110] = "0b10111101101010111010111111100111";
        ram[111] = "0b10111100011010000010110111100111";
        ram[112] = "0b10111101100110100110101100101000";
        ram[113] = "0b10111010101100100100101001101011";
        ram[114] = "0b10111100111011110110000010101011";
        ram[115] = "0b10111101100110110010111011010010";
        ram[116] = "0b10111101111011010101101101101000";
        ram[117] = "0b10111110000110100001100000110111";
        ram[118] = "0b00111100111010100001001010001110";
        ram[119] = "0b00111101101010000001011101000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_7) {
meminst = new inference_conv2d_f3_3_3_7_ram("inference_conv2d_f3_3_3_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_7() {
    delete meminst;
}


};//endmodule
#endif
