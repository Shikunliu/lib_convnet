// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_103_H__
#define __inference_mult_1_120_120_84_s_W4_103_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_103_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_103_ram) {
        ram[0] = "0b00111010011101110000000000001101";
        ram[1] = "0b10111110000011001100100011011110";
        ram[2] = "0b10111101100100010011111000110001";
        ram[3] = "0b00111101110110100110000111100001";
        ram[4] = "0b00111110000000111101110100010010";
        ram[5] = "0b10111101100101110101001011001101";
        ram[6] = "0b00111110000101000111101111101110";
        ram[7] = "0b00111110000100010111001000100110";
        ram[8] = "0b10111110000101010011110110100111";
        ram[9] = "0b00111101001111011011010001000110";
        ram[10] = "0b00111110001101101111111000101110";
        ram[11] = "0b00111101000000000011000000111100";
        ram[12] = "0b10111101001011001011111001010100";
        ram[13] = "0b00111101111111000001011000010110";
        ram[14] = "0b00111011110001010010111111110101";
        ram[15] = "0b10111101010010000000101101001100";
        ram[16] = "0b10111110011000010101001100110111";
        ram[17] = "0b00111011100001001111101101100111";
        ram[18] = "0b10111101111100010100101110011101";
        ram[19] = "0b10111100100111000011110010101100";
        ram[20] = "0b10111101010010101001000111110101";
        ram[21] = "0b10111101010110010111000110100110";
        ram[22] = "0b00111110011100010110111001111010";
        ram[23] = "0b00111110000001101000101011010111";
        ram[24] = "0b10111101010011100011100101001001";
        ram[25] = "0b10111100110010110011100101001111";
        ram[26] = "0b00111110001111101000001010010101";
        ram[27] = "0b00111110011011100111010100110110";
        ram[28] = "0b00111101101011110001000100111101";
        ram[29] = "0b10111011000010101010001011011100";
        ram[30] = "0b00111110001011100001110001011000";
        ram[31] = "0b10111110000101000110000010101010";
        ram[32] = "0b00111101001000011011101010110101";
        ram[33] = "0b00111101001011000011101111001000";
        ram[34] = "0b00111101110011101100010100101010";
        ram[35] = "0b10111110000101000100000100110101";
        ram[36] = "0b10111101110011000011010111101001";
        ram[37] = "0b10111101001011010011010101011000";
        ram[38] = "0b00111110000010001110110001010011";
        ram[39] = "0b10111110001100110011011101100101";
        ram[40] = "0b10111110011110010011000001111011";
        ram[41] = "0b00111011111011100011111110111001";
        ram[42] = "0b00111101101101111111100000101001";
        ram[43] = "0b00111011100110100101000000111000";
        ram[44] = "0b00111101111111000000011011100010";
        ram[45] = "0b10111110000000111110011111010001";
        ram[46] = "0b10111100111101101000110111111100";
        ram[47] = "0b10111100101101010111101000110101";
        ram[48] = "0b00111100011001100100010110101111";
        ram[49] = "0b00111100011010001001111100100110";
        ram[50] = "0b00111110001000110110000001001010";
        ram[51] = "0b00111101100100110111011010111010";
        ram[52] = "0b00111011100000010111000111000101";
        ram[53] = "0b00111110000001100010000011101111";
        ram[54] = "0b10111100111010111100011111001111";
        ram[55] = "0b10111101010111110100111111110010";
        ram[56] = "0b00111101000001111010010111001100";
        ram[57] = "0b00111101100001001101100010101101";
        ram[58] = "0b00111101001011000010001011010011";
        ram[59] = "0b00111110001001101001011001011111";
        ram[60] = "0b10111101100110011100110010111000";
        ram[61] = "0b00111110010110111101111100001001";
        ram[62] = "0b00111101100100010001000000101000";
        ram[63] = "0b10111101101111100000100000110110";
        ram[64] = "0b10111100100101010111001011111001";
        ram[65] = "0b00111011110011111011101000111101";
        ram[66] = "0b00111100101111011000111011010111";
        ram[67] = "0b10111101010101010101111100101000";
        ram[68] = "0b00111101101101011000001011011100";
        ram[69] = "0b10111011100011000101001100100000";
        ram[70] = "0b10111101101011011100110000100001";
        ram[71] = "0b00111100111000010100011111100100";
        ram[72] = "0b10111100011001011010001011110010";
        ram[73] = "0b00111110000111001001111010101010";
        ram[74] = "0b00111101111100011101000011001000";
        ram[75] = "0b00111101111011101100001110011000";
        ram[76] = "0b00111101101000010000011010000011";
        ram[77] = "0b10111101110000111111110011100101";
        ram[78] = "0b00111101011100110010001111100100";
        ram[79] = "0b10111110011100111001111010101110";
        ram[80] = "0b10111101111011000101010010111101";
        ram[81] = "0b00111100101011000001110110010101";
        ram[82] = "0b10111101000100111010111101011010";
        ram[83] = "0b00111100011001111001111110110111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_103) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_103_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_103) {
meminst = new inference_mult_1_120_120_84_s_W4_103_ram("inference_mult_1_120_120_84_s_W4_103_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_103() {
    delete meminst;
}


};//endmodule
#endif
