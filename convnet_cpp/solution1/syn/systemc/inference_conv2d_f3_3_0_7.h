// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_7_H__
#define __inference_conv2d_f3_3_0_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_7_ram) {
        ram[0] = "0b10111101100011011110000011001001";
        ram[1] = "0b10111110000010110101100000001000";
        ram[2] = "0b10111101100011101110011111111010";
        ram[3] = "0b00111110000000101001101100101000";
        ram[4] = "0b10111101110101111011010110101111";
        ram[5] = "0b00111010101010110011001100011111";
        ram[6] = "0b00111101101001111101101011001101";
        ram[7] = "0b00111100100110001100110000010100";
        ram[8] = "0b00111101000101110110010101110111";
        ram[9] = "0b00111101101011110111000111010000";
        ram[10] = "0b00111101100001000011011001000000";
        ram[11] = "0b00111101000101010111111001001100";
        ram[12] = "0b00111101100111110010110010000001";
        ram[13] = "0b00111101111000000100010010101111";
        ram[14] = "0b10111101101100011011111101101101";
        ram[15] = "0b00111101000110011000100010000010";
        ram[16] = "0b00111100101000010111111110101101";
        ram[17] = "0b10111101100011010001000010100101";
        ram[18] = "0b00111011000001000100111100000101";
        ram[19] = "0b00111101000111111010101111001101";
        ram[20] = "0b00111101010110010001101010000011";
        ram[21] = "0b10111101010001000110001110001101";
        ram[22] = "0b10111101000101111000010011010010";
        ram[23] = "0b00111101010111000001101000010010";
        ram[24] = "0b00111101100000000000111110010010";
        ram[25] = "0b00111101010001101011010100001011";
        ram[26] = "0b10111101011101101100101101010011";
        ram[27] = "0b10111101100100111000111001111011";
        ram[28] = "0b10111101101011111001111011100111";
        ram[29] = "0b10111110000111001000001000010111";
        ram[30] = "0b00111101100101111101100111011100";
        ram[31] = "0b10111101100100011011010001101011";
        ram[32] = "0b00111110000110000000111110011001";
        ram[33] = "0b10111010000000100101111110100111";
        ram[34] = "0b00111100101010011100011000000010";
        ram[35] = "0b00111101100110101101110001011010";
        ram[36] = "0b10111101110100110000011100101001";
        ram[37] = "0b10111101000010110111110010100000";
        ram[38] = "0b00111100111000001100110011001001";
        ram[39] = "0b00111101101011101110000001101110";
        ram[40] = "0b00111100101101011101010111011011";
        ram[41] = "0b10111100110110101111100000001001";
        ram[42] = "0b00111110001010000011000000011010";
        ram[43] = "0b00111101100011101010001001011010";
        ram[44] = "0b10111101011100011000100000000011";
        ram[45] = "0b10111101101001011100101010010101";
        ram[46] = "0b10111101100110110010100101101100";
        ram[47] = "0b00111101100101100001010101110011";
        ram[48] = "0b10111110000100010100001010110011";
        ram[49] = "0b00111110001000001110010010010111";
        ram[50] = "0b00111110001101010111111110110111";
        ram[51] = "0b10111101000111100111110000111101";
        ram[52] = "0b00111110000011000001101111011010";
        ram[53] = "0b10111101101001100001100101101111";
        ram[54] = "0b00111101001001011101010111001101";
        ram[55] = "0b00111101111000001001001011001101";
        ram[56] = "0b10111101101100000011010000111000";
        ram[57] = "0b00111101010101001111010011010100";
        ram[58] = "0b10111110001110101101100001011110";
        ram[59] = "0b10111101111001001001101100100000";
        ram[60] = "0b10111101110101001000101010011100";
        ram[61] = "0b10111101010110100110111001110110";
        ram[62] = "0b10111110000100010100010100001111";
        ram[63] = "0b00111101111101000000000000110010";
        ram[64] = "0b00111101101111110000100110100011";
        ram[65] = "0b10111101101110001001011011000010";
        ram[66] = "0b10111101000001110111111101010000";
        ram[67] = "0b10111110000100010110000010010101";
        ram[68] = "0b00111101100001110101100111000110";
        ram[69] = "0b10111100110011100010111110100011";
        ram[70] = "0b00111101000110111111100101110110";
        ram[71] = "0b00111011011100011110001111011110";
        ram[72] = "0b10111110000011110001101011100011";
        ram[73] = "0b00111101001111111000011101001111";
        ram[74] = "0b00111101001010000101101100110011";
        ram[75] = "0b10111101110100001111101001011001";
        ram[76] = "0b10111101101100001010000001010100";
        ram[77] = "0b10111100111101001010000111001000";
        ram[78] = "0b10111101010011000100010111011001";
        ram[79] = "0b00111110000010110100000001110000";
        ram[80] = "0b10111110000000101001000110111000";
        ram[81] = "0b00111101100100100000011010010011";
        ram[82] = "0b00111101010000111011010011000000";
        ram[83] = "0b00111110000111001010000011000011";
        ram[84] = "0b00111101010010010100101100011101";
        ram[85] = "0b00111100101110101000011111110001";
        ram[86] = "0b10111100010010001110011101100101";
        ram[87] = "0b10111100010100101001001101001011";
        ram[88] = "0b10111101101100000110101110010101";
        ram[89] = "0b00111110001001001110111001111100";
        ram[90] = "0b10111101001101101110001011101011";
        ram[91] = "0b00111110000010011111000110101110";
        ram[92] = "0b10111101011101110101000001100100";
        ram[93] = "0b10111100110001001111010100110010";
        ram[94] = "0b00111110000000000011011111010110";
        ram[95] = "0b00111101011001000011111100001111";
        ram[96] = "0b10111101100100100000111111011010";
        ram[97] = "0b00111110000101001010010000001001";
        ram[98] = "0b00111110000011000100100111111101";
        ram[99] = "0b00111101110101000011101001100100";
        ram[100] = "0b10111101000011100110001111000001";
        ram[101] = "0b00111101001010001101100100100010";
        ram[102] = "0b10111011001100101101111100010000";
        ram[103] = "0b00111101100001101110011001010100";
        ram[104] = "0b10111101011001001001000110010101";
        ram[105] = "0b00111101110010001011111010000000";
        ram[106] = "0b00111101010111011000111011110010";
        ram[107] = "0b00111101010111100100000001000010";
        ram[108] = "0b00111101001010010010110001111111";
        ram[109] = "0b00111101011010101101011000000010";
        ram[110] = "0b00111101010101111011110110100111";
        ram[111] = "0b00111110000101010011000011001111";
        ram[112] = "0b00111100101111100011011100001000";
        ram[113] = "0b00111101100101110101000110110011";
        ram[114] = "0b00111101111001001100110111111011";
        ram[115] = "0b10111100100111011100011001001111";
        ram[116] = "0b10111101110011101000101001110010";
        ram[117] = "0b10111101001100111110000100001110";
        ram[118] = "0b00111101000101010110001010000011";
        ram[119] = "0b10111110000101101100111000110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_7) {
meminst = new inference_conv2d_f3_3_0_7_ram("inference_conv2d_f3_3_0_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_7() {
    delete meminst;
}


};//endmodule
#endif
