// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_9_H__
#define __inference_conv2d_f3_1_4_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_9_ram) {
        ram[0] = "0b00111110000000110100100001101111";
        ram[1] = "0b00111100011000001000110100001001";
        ram[2] = "0b00111100100111000110110110111111";
        ram[3] = "0b10111011101101100010110011111000";
        ram[4] = "0b10111101110001011111001101111010";
        ram[5] = "0b00111100111111111010001100011001";
        ram[6] = "0b10111101111001101010110000100001";
        ram[7] = "0b00111101111110000000011011110010";
        ram[8] = "0b00111110001010001100000100010010";
        ram[9] = "0b10111110010000111100010011110100";
        ram[10] = "0b10111100100100100111000110111101";
        ram[11] = "0b10111101101100011011100110001110";
        ram[12] = "0b00111101011011110100011011000101";
        ram[13] = "0b10111101111101011000010100111000";
        ram[14] = "0b10111100111001001001111110111101";
        ram[15] = "0b00111101100111001110001001011001";
        ram[16] = "0b00111110000011111111011101011001";
        ram[17] = "0b10111100100111011101110101100001";
        ram[18] = "0b10111101101100000111110010000101";
        ram[19] = "0b10111110100001100111111101001110";
        ram[20] = "0b10111101000001110010001010000100";
        ram[21] = "0b00111100110100001010000110100011";
        ram[22] = "0b00111101001000011000001011010010";
        ram[23] = "0b00111101110000011101011101010110";
        ram[24] = "0b00111101111011110110101111100011";
        ram[25] = "0b00111101011111010110010100011011";
        ram[26] = "0b10111101011110101010101101000111";
        ram[27] = "0b00111101001010101110111101111101";
        ram[28] = "0b00111110000010101000111001110001";
        ram[29] = "0b00111110001110000110001000101100";
        ram[30] = "0b00111101111110010011111111110010";
        ram[31] = "0b00111101111011011000000100101000";
        ram[32] = "0b10111101110000000011110001110011";
        ram[33] = "0b10111101011101010101010100010111";
        ram[34] = "0b00111010001111101001001111110001";
        ram[35] = "0b10111101110101111000100110100100";
        ram[36] = "0b00111110000001111001100101011111";
        ram[37] = "0b10111100110111001000111110111000";
        ram[38] = "0b00111101100001101110111100110000";
        ram[39] = "0b00111101111110010101011110001010";
        ram[40] = "0b00111110000010000101001000101111";
        ram[41] = "0b10111101111111010100011100111001";
        ram[42] = "0b10111101111110100101111111001000";
        ram[43] = "0b00111101101100110110001100111010";
        ram[44] = "0b10111101110000001111101110101001";
        ram[45] = "0b10111101000011111110111100010001";
        ram[46] = "0b10111010110010010110110000011010";
        ram[47] = "0b00111110000000011100000011001010";
        ram[48] = "0b10111101000011100000000100010101";
        ram[49] = "0b00111101100110100000100000011111";
        ram[50] = "0b00111101110001010101000100110101";
        ram[51] = "0b00111011100111111001011101100000";
        ram[52] = "0b10111100111101110111010011100001";
        ram[53] = "0b10111101100001010110101011011001";
        ram[54] = "0b10111110100010000101000111101100";
        ram[55] = "0b10111100011011110010011010010100";
        ram[56] = "0b00111011000110100011111100000110";
        ram[57] = "0b00111101110101101100101101010011";
        ram[58] = "0b00111101011110000001001001000101";
        ram[59] = "0b10111101011110110101101111011100";
        ram[60] = "0b10111011100000010110000000111101";
        ram[61] = "0b10111101110010100110101111100100";
        ram[62] = "0b00111101110110011001010111101110";
        ram[63] = "0b10111110100101001010111101001111";
        ram[64] = "0b00111101110000100000110111011100";
        ram[65] = "0b10111101010100111110110111011001";
        ram[66] = "0b00111110011101000111000011101011";
        ram[67] = "0b10111110000010111100100101000111";
        ram[68] = "0b00111101100000010010110110111010";
        ram[69] = "0b10111100111100100010110000000010";
        ram[70] = "0b00111101010111111101000000101111";
        ram[71] = "0b00111110001101101010110011101011";
        ram[72] = "0b00111110001111110011101100100001";
        ram[73] = "0b00111110000111000010011000010100";
        ram[74] = "0b00111101100111110100100010000000";
        ram[75] = "0b10111101101000001000011001000101";
        ram[76] = "0b00111101110010010101110110101101";
        ram[77] = "0b10111110010100010100111111001110";
        ram[78] = "0b00111101101001100000100101100100";
        ram[79] = "0b00111100011111001011110011101010";
        ram[80] = "0b10111110000010100000110111111110";
        ram[81] = "0b10111101101111111110010000001110";
        ram[82] = "0b10111101110111011100101001001011";
        ram[83] = "0b00111100001010010111100100001011";
        ram[84] = "0b00111101100000001111111111101000";
        ram[85] = "0b10111100100001100010001111010001";
        ram[86] = "0b10111100100111111101000100100001";
        ram[87] = "0b10111011010010001100000000100011";
        ram[88] = "0b00111011001010010101111010110100";
        ram[89] = "0b00111101100001110100101011110000";
        ram[90] = "0b00111101100100010100100100110011";
        ram[91] = "0b00111110001110001101100001100110";
        ram[92] = "0b00111101101110010111011101111000";
        ram[93] = "0b00111101101011000000111000101011";
        ram[94] = "0b10111101001110001001111001110111";
        ram[95] = "0b00111110000011110101101010010110";
        ram[96] = "0b00111101010011010000111011000001";
        ram[97] = "0b10111110010010010000111111111001";
        ram[98] = "0b00111110010110000011110111111111";
        ram[99] = "0b10111100010010001001111110101100";
        ram[100] = "0b00111110001001011110010100101010";
        ram[101] = "0b10111110010111000011001101110010";
        ram[102] = "0b00111100011110101011000101110111";
        ram[103] = "0b10111110010010000010001000110110";
        ram[104] = "0b10111100001000111111111000001100";
        ram[105] = "0b10111110010110011100100010000110";
        ram[106] = "0b00111101001111110001011001111011";
        ram[107] = "0b10111110000001101100001011110000";
        ram[108] = "0b00111110000001011110000011111000";
        ram[109] = "0b00111101100110101001001010100011";
        ram[110] = "0b00111100001111011101100111101011";
        ram[111] = "0b00111011111100111100111111110001";
        ram[112] = "0b00111100111100101101000101000011";
        ram[113] = "0b00111101001100001100100111100111";
        ram[114] = "0b10111101110110000010101010011001";
        ram[115] = "0b10111101100001010001010101100011";
        ram[116] = "0b10111101101000100100001110100111";
        ram[117] = "0b10111101110110101000000011010000";
        ram[118] = "0b10111110000111010101110111000100";
        ram[119] = "0b00111110001101001101110000100011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_9) {
meminst = new inference_conv2d_f3_1_4_9_ram("inference_conv2d_f3_1_4_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_9() {
    delete meminst;
}


};//endmodule
#endif
