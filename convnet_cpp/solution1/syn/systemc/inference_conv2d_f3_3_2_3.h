// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_3_H__
#define __inference_conv2d_f3_3_2_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_3_ram) {
        ram[0] = "0b00111101010111011011100011001000";
        ram[1] = "0b10111101101000011010001011110101";
        ram[2] = "0b00111100100111101000010101011100";
        ram[3] = "0b10111101001001110010010100001000";
        ram[4] = "0b00111100110000001011100111001111";
        ram[5] = "0b10111110001001000000001100010101";
        ram[6] = "0b10111101001001000011110001010101";
        ram[7] = "0b00111011000001100001111111101010";
        ram[8] = "0b00111011111100011010100100010000";
        ram[9] = "0b10111110001000010100000000010100";
        ram[10] = "0b10111101000100100110100111111010";
        ram[11] = "0b10111011111110111100010110011110";
        ram[12] = "0b10111101110000101100110000111011";
        ram[13] = "0b10111010011101101000010100101101";
        ram[14] = "0b00111100100001000010111011001110";
        ram[15] = "0b10111011011000000100111011100000";
        ram[16] = "0b00111101100011111110000101100010";
        ram[17] = "0b00111101001111100110011000011101";
        ram[18] = "0b10111101101010110010110001110111";
        ram[19] = "0b00111100001010000111101000000111";
        ram[20] = "0b00111100111001001110010000011011";
        ram[21] = "0b10111011111100100010100111101001";
        ram[22] = "0b10111101100110000110111000101110";
        ram[23] = "0b10111110001110010001101000110011";
        ram[24] = "0b10111101111101101100111011111111";
        ram[25] = "0b10111101001011100011001101101010";
        ram[26] = "0b10111101010011111111111001000101";
        ram[27] = "0b10111101010000101011000001100100";
        ram[28] = "0b00111101111010011011000011101110";
        ram[29] = "0b00111101101001111111100101011110";
        ram[30] = "0b00111101111101010000011001010111";
        ram[31] = "0b10111101001011001000110010000110";
        ram[32] = "0b10111101010110010010011010101101";
        ram[33] = "0b00111101011110100001100000101010";
        ram[34] = "0b10111101001001111110000110101100";
        ram[35] = "0b10111110000011101110110001111101";
        ram[36] = "0b00111100100010010010100100111111";
        ram[37] = "0b00111101111001000000011011000000";
        ram[38] = "0b10111101101111111101001001110000";
        ram[39] = "0b10111011101111010011010111010110";
        ram[40] = "0b00111101111000101011100001000001";
        ram[41] = "0b00111110000010001100100001101001";
        ram[42] = "0b10111101100111011001100000011110";
        ram[43] = "0b10111101111000010001000100100111";
        ram[44] = "0b00111110001111011010011000011110";
        ram[45] = "0b00111100101000001010110101010100";
        ram[46] = "0b10111110000101100000001001000011";
        ram[47] = "0b10111101111110010001110011010010";
        ram[48] = "0b10111100111010000101001100000101";
        ram[49] = "0b00111110000011001110001000001001";
        ram[50] = "0b00111100111100010001010000001010";
        ram[51] = "0b00111100101011100000011101000101";
        ram[52] = "0b10111101001111101010101101010001";
        ram[53] = "0b00111101101011011111011010100110";
        ram[54] = "0b00111101001000101000100101000111";
        ram[55] = "0b10111101110101011101001111011101";
        ram[56] = "0b00111110001001010001100110111101";
        ram[57] = "0b00111101010000010011001111000010";
        ram[58] = "0b10111101100010101000111001100100";
        ram[59] = "0b10111101101010111001101000100101";
        ram[60] = "0b10111101110011011100000110100100";
        ram[61] = "0b00111101110001010001110001101010";
        ram[62] = "0b10111101111101010100100001100111";
        ram[63] = "0b00111101001100111100000011000010";
        ram[64] = "0b10111110000011000010000000001100";
        ram[65] = "0b10111110001001011001011101001110";
        ram[66] = "0b10111100010111110100011111111010";
        ram[67] = "0b00111101011110111100101101101101";
        ram[68] = "0b10111101011000001000001000000110";
        ram[69] = "0b10111101001010011100000111010000";
        ram[70] = "0b00111101110101111101000111111110";
        ram[71] = "0b00111110001101101001101111100001";
        ram[72] = "0b00111110010001001010111101001111";
        ram[73] = "0b00111011100000000001101110000100";
        ram[74] = "0b10111100011001111101100110011001";
        ram[75] = "0b10111100100010100100110001010100";
        ram[76] = "0b10111101110110101001111000101100";
        ram[77] = "0b10111101011110000010111010010101";
        ram[78] = "0b00111101100111100100001110111000";
        ram[79] = "0b00111101000111110000110101011100";
        ram[80] = "0b00111101000111010001100100010101";
        ram[81] = "0b10111100000100010101100100001110";
        ram[82] = "0b00111101111111100001101100001001";
        ram[83] = "0b10111101101010001010111100110001";
        ram[84] = "0b10111101010110010010100110000010";
        ram[85] = "0b10111100110001001111110000011110";
        ram[86] = "0b10111001001001100011011000111110";
        ram[87] = "0b10111101111001101100011011011110";
        ram[88] = "0b00111101111110110011001100010010";
        ram[89] = "0b00111101000110101000011101101011";
        ram[90] = "0b00111101101100110100100010100101";
        ram[91] = "0b10111110000101100110010011010100";
        ram[92] = "0b00111101110101011101100110100001";
        ram[93] = "0b10111100110011101001101100000011";
        ram[94] = "0b10111101100001111101000101111000";
        ram[95] = "0b10111100101011010010111011011000";
        ram[96] = "0b10111101010001100111111111111100";
        ram[97] = "0b10111100111001010011111111110110";
        ram[98] = "0b00111110001100001100010011011111";
        ram[99] = "0b10111101100011110000100110110001";
        ram[100] = "0b10111101000100000110011111110111";
        ram[101] = "0b10111101011000001010110101101111";
        ram[102] = "0b10111100110101011100011000000101";
        ram[103] = "0b10111110000000000010011100001111";
        ram[104] = "0b10111101011111101001000000001110";
        ram[105] = "0b00111101110100011100101110001010";
        ram[106] = "0b00111101001000111111110100110101";
        ram[107] = "0b00111101100010010101111011010100";
        ram[108] = "0b10111011010010010001100110001111";
        ram[109] = "0b00111110001101001000011101110111";
        ram[110] = "0b10111011100110110110111101011101";
        ram[111] = "0b00111101100110000001100001101000";
        ram[112] = "0b10111101011100001011111011100101";
        ram[113] = "0b00111100101010110010101101011101";
        ram[114] = "0b10111101001110011111101010110011";
        ram[115] = "0b00111101110111001000110100011001";
        ram[116] = "0b00111101111010011100110010111000";
        ram[117] = "0b10111110001111100001010111001010";
        ram[118] = "0b00111011100100011000011011111100";
        ram[119] = "0b10111101000100011111100110101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_3) {
meminst = new inference_conv2d_f3_3_2_3_ram("inference_conv2d_f3_3_2_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_3() {
    delete meminst;
}


};//endmodule
#endif
