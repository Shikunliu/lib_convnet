// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_14_H__
#define __inference_conv2d_f3_0_2_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_14_ram) {
        ram[0] = "0b10111101000000111111001110101011";
        ram[1] = "0b10111100011110000110100100110011";
        ram[2] = "0b00111101100011110010111011001111";
        ram[3] = "0b00111101001101100000101001100011";
        ram[4] = "0b00111100000000100111100100100001";
        ram[5] = "0b00111110100011111000000010011001";
        ram[6] = "0b10111101010101100101101111000010";
        ram[7] = "0b10111100100111001101100100011111";
        ram[8] = "0b00111110001001001111110011100111";
        ram[9] = "0b10111101101101000100001110111010";
        ram[10] = "0b10111101010110000001100111010010";
        ram[11] = "0b10111101010000000000011100000111";
        ram[12] = "0b00111101110011100111101000110001";
        ram[13] = "0b00111101010100111101111000111001";
        ram[14] = "0b10111110001001110000100101110100";
        ram[15] = "0b10111101110110000010100010000000";
        ram[16] = "0b10111011001000111001001011000010";
        ram[17] = "0b00111110000001111011111100011111";
        ram[18] = "0b00111101001010111011010001001110";
        ram[19] = "0b10111100100100101010011001100000";
        ram[20] = "0b10111101011111010011010111010001";
        ram[21] = "0b00111100100100011010000101001000";
        ram[22] = "0b00111110010010111001010100011100";
        ram[23] = "0b00111101111010100101011100100001";
        ram[24] = "0b10111101100100111111110101111000";
        ram[25] = "0b00111101001011001011000100011110";
        ram[26] = "0b00111100100011101000011000001010";
        ram[27] = "0b00111110000000011000000100010111";
        ram[28] = "0b10111101110110011001000010110000";
        ram[29] = "0b00111101101010010000001111010000";
        ram[30] = "0b10111101110010100000101000001111";
        ram[31] = "0b10111011110100010011010101111101";
        ram[32] = "0b10111100110110111110110000100101";
        ram[33] = "0b10111101100000011010000111001110";
        ram[34] = "0b00111101001101100100101000100100";
        ram[35] = "0b00111110000010011000010010100001";
        ram[36] = "0b10111100111001010111100010010101";
        ram[37] = "0b00111101000101010111001110011010";
        ram[38] = "0b10111101010110110111010010011011";
        ram[39] = "0b10111110000001101111101110001111";
        ram[40] = "0b10111101101111111000100110000011";
        ram[41] = "0b10111100011011111100011001100001";
        ram[42] = "0b00111100001100111001100100011111";
        ram[43] = "0b00111100110011000110001001000100";
        ram[44] = "0b00111101001011101010011101100011";
        ram[45] = "0b00111101110011111010001001101010";
        ram[46] = "0b00111101100100011110010000100001";
        ram[47] = "0b10111101000100111100011101111000";
        ram[48] = "0b10111101000011101100100101110111";
        ram[49] = "0b00111110000100001001011000110101";
        ram[50] = "0b00111101111011010110010111100100";
        ram[51] = "0b10111101000110111011111010001000";
        ram[52] = "0b10111011100101011000111010001000";
        ram[53] = "0b00111101011100001001010010001000";
        ram[54] = "0b10111101101110101111011101001101";
        ram[55] = "0b00111110000101111111110011111100";
        ram[56] = "0b10111101110101110000010001111001";
        ram[57] = "0b00111110000010101101001110100110";
        ram[58] = "0b10111011001111000110010011110110";
        ram[59] = "0b10111101000011101100010010111111";
        ram[60] = "0b00111100101000000101010111100001";
        ram[61] = "0b10111101110010110110111011001001";
        ram[62] = "0b00111110001110011001110100000010";
        ram[63] = "0b10111101111111000110100111111001";
        ram[64] = "0b10111101100010010101100010010111";
        ram[65] = "0b00111101111001001101001010110011";
        ram[66] = "0b00111101101000110101100101101100";
        ram[67] = "0b10111110100111100000100010101111";
        ram[68] = "0b10111101000011110100011110000001";
        ram[69] = "0b10111101100000110000100110111011";
        ram[70] = "0b00111101110011110101110110111100";
        ram[71] = "0b10111101100001111010010010010111";
        ram[72] = "0b00111100101010010100110100110110";
        ram[73] = "0b10111101001101100001100100101100";
        ram[74] = "0b10111100111001011001101000100011";
        ram[75] = "0b10111101101000010010100011100111";
        ram[76] = "0b00111101101100010001011010110110";
        ram[77] = "0b10111110001011100101100101101101";
        ram[78] = "0b10111110010111001011011100001011";
        ram[79] = "0b00111100110101001001001001011110";
        ram[80] = "0b10111110000111100000110101100111";
        ram[81] = "0b00111011000111010110110010111000";
        ram[82] = "0b10111101001001100111111111111100";
        ram[83] = "0b10111101101110111000010100011111";
        ram[84] = "0b00111110000011100001011111100011";
        ram[85] = "0b00111010100111011101010000111100";
        ram[86] = "0b00111101101100011000010110100111";
        ram[87] = "0b10111110011000111110011101001011";
        ram[88] = "0b10111101110101101011010101001110";
        ram[89] = "0b10111101111111101101000001110000";
        ram[90] = "0b00111101100000011100000000011100";
        ram[91] = "0b00111100110100001101101100011010";
        ram[92] = "0b00111101011010111100111010111011";
        ram[93] = "0b00111110000101101010101100010101";
        ram[94] = "0b00111101010011010111001100011011";
        ram[95] = "0b00111100111001100010100010001001";
        ram[96] = "0b10111101001110101110001100010000";
        ram[97] = "0b10111101100011000011100011110011";
        ram[98] = "0b10111101111000010001100110001011";
        ram[99] = "0b00111101000000111101100010111000";
        ram[100] = "0b00111101101101001001010000011001";
        ram[101] = "0b10111100101001011111001101111010";
        ram[102] = "0b00111101110101101100010010000010";
        ram[103] = "0b10111101101110111101010011010000";
        ram[104] = "0b00111110100000111101010011010000";
        ram[105] = "0b00111101001010101011010011111010";
        ram[106] = "0b10111101111100000001011001001000";
        ram[107] = "0b00111101011010010111111111011100";
        ram[108] = "0b00111101011110111111101101110100";
        ram[109] = "0b10111101100111110110011100011110";
        ram[110] = "0b10111101010100110110101101100111";
        ram[111] = "0b00111011110011000001001011010011";
        ram[112] = "0b00111101101010101110010011011000";
        ram[113] = "0b10111101101101111100001100001101";
        ram[114] = "0b00111101100001111110101011100110";
        ram[115] = "0b00111101111011010011110011111111";
        ram[116] = "0b10111101110010100101011110001101";
        ram[117] = "0b10111101010101000101111010101100";
        ram[118] = "0b10111101010110100001010101110000";
        ram[119] = "0b00111110010101000100100100010011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_14) {
meminst = new inference_conv2d_f3_0_2_14_ram("inference_conv2d_f3_0_2_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_14() {
    delete meminst;
}


};//endmodule
#endif
