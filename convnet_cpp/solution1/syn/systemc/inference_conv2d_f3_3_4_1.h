// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_1_H__
#define __inference_conv2d_f3_3_4_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_1_ram) {
        ram[0] = "0b00111101001101101001100111110000";
        ram[1] = "0b10111101000101011011111110000101";
        ram[2] = "0b10111110000110111110010110010111";
        ram[3] = "0b00111101110010010100000100100111";
        ram[4] = "0b00111101110100100000110100010011";
        ram[5] = "0b10111101111111000110000110010101";
        ram[6] = "0b00111101111110110001011011000010";
        ram[7] = "0b10111100011011000110010010101101";
        ram[8] = "0b10111100010010111011110000101100";
        ram[9] = "0b10111110001111100010111000101100";
        ram[10] = "0b10111110000001011110001011001110";
        ram[11] = "0b00111110001110001010111011111011";
        ram[12] = "0b10111101111011111010111110000110";
        ram[13] = "0b00111101001001011111000011110110";
        ram[14] = "0b10111101100001100110111001010001";
        ram[15] = "0b00111110010100000010110110011101";
        ram[16] = "0b00111011011000001011101110010111";
        ram[17] = "0b00111101011101111101110100011100";
        ram[18] = "0b00111101100111100010101010000000";
        ram[19] = "0b00111101001110001101001101101011";
        ram[20] = "0b00111100111100110001000001100011";
        ram[21] = "0b00111100011100001111111001110000";
        ram[22] = "0b10111101010101000110000110011100";
        ram[23] = "0b10111101000000000001011101100010";
        ram[24] = "0b00111101101001100101111101010010";
        ram[25] = "0b00111011011111101101001000000011";
        ram[26] = "0b00111101010100011110011001111101";
        ram[27] = "0b10111001011011000000011000100011";
        ram[28] = "0b00111100110010101101001110011001";
        ram[29] = "0b00111101100111011110010011100000";
        ram[30] = "0b00111100100101010111111100100011";
        ram[31] = "0b00111100100100111111100110110010";
        ram[32] = "0b00111011010101111100010001001101";
        ram[33] = "0b00111100110011011011110110001110";
        ram[34] = "0b00111101111011010000100110011110";
        ram[35] = "0b00111100101010110001101000101010";
        ram[36] = "0b00111100111100001010101000100010";
        ram[37] = "0b00111110000001001001011011101110";
        ram[38] = "0b00111100001100011111111000010100";
        ram[39] = "0b00111101011100011011000110001001";
        ram[40] = "0b00111101000111000000100110000001";
        ram[41] = "0b10111110001001110110011111010011";
        ram[42] = "0b00111101101000110110001000111011";
        ram[43] = "0b10111101100100101101110001010011";
        ram[44] = "0b00111101010110011001100100101110";
        ram[45] = "0b10111100111101111011101101011000";
        ram[46] = "0b00111100111110010000110011000111";
        ram[47] = "0b00111101011100110100101111110010";
        ram[48] = "0b10111101111000100100101010101110";
        ram[49] = "0b00111101110100101010100011001010";
        ram[50] = "0b10111101111101101101001000100100";
        ram[51] = "0b10111110001110111100011011101011";
        ram[52] = "0b10111100010100101101010010111001";
        ram[53] = "0b00111110000010000100100000111000";
        ram[54] = "0b10111110000111000111101100000011";
        ram[55] = "0b00111101100100010101000110010111";
        ram[56] = "0b00111010100111000000110000111011";
        ram[57] = "0b10111101011101011100000011111101";
        ram[58] = "0b00111101101011001110100100000010";
        ram[59] = "0b00111101000010100011101010011100";
        ram[60] = "0b00111100110111001010101101100111";
        ram[61] = "0b00111101010110011101111100000100";
        ram[62] = "0b10111100000010010110011001000110";
        ram[63] = "0b10111110000000010011100100000000";
        ram[64] = "0b10111110001010010111011000110110";
        ram[65] = "0b10111100110111100111001001111100";
        ram[66] = "0b10111101111110111000000110110110";
        ram[67] = "0b10111101111111101010011001111111";
        ram[68] = "0b10111110000001001000101100100010";
        ram[69] = "0b00111101100100000010010110010111";
        ram[70] = "0b00111101011111111111011011100001";
        ram[71] = "0b00111110001011100010001000011101";
        ram[72] = "0b00111110000111011010000010011101";
        ram[73] = "0b10111110000111100110101000110011";
        ram[74] = "0b10111100001000100000100000010011";
        ram[75] = "0b00111100001001101110110110101011";
        ram[76] = "0b10111101000001111011000101101111";
        ram[77] = "0b00111110010101001000001111001011";
        ram[78] = "0b00111110001011000111101111001100";
        ram[79] = "0b00111101101100001000010000011111";
        ram[80] = "0b00111101000010010110101001011101";
        ram[81] = "0b10111101111101001010001010111010";
        ram[82] = "0b00111101000010110110101011001101";
        ram[83] = "0b00111100110001110010010111111010";
        ram[84] = "0b00111101100000011111011100000000";
        ram[85] = "0b00111110000011100000000110011011";
        ram[86] = "0b00111101100010100100010110010001";
        ram[87] = "0b10111011100101010011110000111101";
        ram[88] = "0b10111101110111111010010111010011";
        ram[89] = "0b10111100101101111100001110000110";
        ram[90] = "0b10111101100000000001001010000010";
        ram[91] = "0b10111100000101100111100101010100";
        ram[92] = "0b00111101111100101011100010000100";
        ram[93] = "0b00111110001101110111110100001111";
        ram[94] = "0b10111101110110101111011111010011";
        ram[95] = "0b00111100011111000001011011010010";
        ram[96] = "0b00111110001011101001101100111001";
        ram[97] = "0b10111101101100110100111101001101";
        ram[98] = "0b00111101000100100011110000001101";
        ram[99] = "0b00111101100110110111010101100100";
        ram[100] = "0b00111101001011100010011001001110";
        ram[101] = "0b10111101011001101010101011111010";
        ram[102] = "0b00111101001000011110111110001111";
        ram[103] = "0b10111110001010000111101111011101";
        ram[104] = "0b10111101001100010001100010001100";
        ram[105] = "0b10111100010111100100001100010111";
        ram[106] = "0b00111110001001001111011010011101";
        ram[107] = "0b00111101000000000011001011011011";
        ram[108] = "0b00111101101000100100111000111110";
        ram[109] = "0b10111110001001101110010011000001";
        ram[110] = "0b00111010111101100000001001010000";
        ram[111] = "0b00111110000100111000111010110000";
        ram[112] = "0b00111100100010001110000001000100";
        ram[113] = "0b00111011110010011000011100001000";
        ram[114] = "0b10111011101101111000110101100000";
        ram[115] = "0b10111101000111001110100001010011";
        ram[116] = "0b00111101110100101100101001011000";
        ram[117] = "0b00111101001001000011010000001100";
        ram[118] = "0b00111101101010011111000100000000";
        ram[119] = "0b10111110001010001110111101111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_1) {
meminst = new inference_conv2d_f3_3_4_1_ram("inference_conv2d_f3_3_4_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_1() {
    delete meminst;
}


};//endmodule
#endif
