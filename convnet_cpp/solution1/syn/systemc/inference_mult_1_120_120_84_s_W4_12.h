// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_12_H__
#define __inference_mult_1_120_120_84_s_W4_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_12_ram) {
        ram[0] = "0b00111101100010101111101111000010";
        ram[1] = "0b00111110001000010000000110110000";
        ram[2] = "0b10111100100011010010111110010011";
        ram[3] = "0b00111101001101101101111110101011";
        ram[4] = "0b10111100011101111111101000001101";
        ram[5] = "0b00111101110011011111101011001010";
        ram[6] = "0b00111101101001101100100110001011";
        ram[7] = "0b00111101010001000000101110101110";
        ram[8] = "0b00111110000000011100001011100011";
        ram[9] = "0b10111101110000011101100101000110";
        ram[10] = "0b10111110000001011001110001001001";
        ram[11] = "0b00111101011000110011110111011000";
        ram[12] = "0b00111101000001001001101111000001";
        ram[13] = "0b00111101000010011010010010101010";
        ram[14] = "0b00111101000001101101111001011011";
        ram[15] = "0b00111110001111010010101010100110";
        ram[16] = "0b00111101110001101100001010111010";
        ram[17] = "0b00111100111101001011000011100010";
        ram[18] = "0b00111101011010000101111011111010";
        ram[19] = "0b00111110010100101110101010010110";
        ram[20] = "0b00111101101101000110111100111110";
        ram[21] = "0b00111101010010001110110110010101";
        ram[22] = "0b10111101011010011000100000001001";
        ram[23] = "0b10111100100110000101111000110000";
        ram[24] = "0b00111110010011111111011001001101";
        ram[25] = "0b10111100100111000011010100100000";
        ram[26] = "0b10111010110111011110000001000101";
        ram[27] = "0b00111101010101010000110111001001";
        ram[28] = "0b10111110000001010111000110001111";
        ram[29] = "0b10111101110010000110000111011100";
        ram[30] = "0b00111100100101100011110100100011";
        ram[31] = "0b00111110001011101000011001000000";
        ram[32] = "0b10111110000000000100001000001111";
        ram[33] = "0b10111100111001101101100110111110";
        ram[34] = "0b10111100000010110100001000010011";
        ram[35] = "0b00111101100100010010100011001101";
        ram[36] = "0b00111101100001000111111100000110";
        ram[37] = "0b00111101111110011110100011000100";
        ram[38] = "0b10111101110101110110100000010110";
        ram[39] = "0b10111101100110110111100010110010";
        ram[40] = "0b00111110001011111010110011100110";
        ram[41] = "0b10111101100101010111110111100001";
        ram[42] = "0b10111110001011010100011100111001";
        ram[43] = "0b10111101111110110011101011101111";
        ram[44] = "0b10111100110000011011111110001000";
        ram[45] = "0b00111110001001000111001011000001";
        ram[46] = "0b10111100111001001001100101110010";
        ram[47] = "0b10111101101110000010101001110001";
        ram[48] = "0b00111110001110110101100101011000";
        ram[49] = "0b10111101100011011111100010001001";
        ram[50] = "0b00111100100011010110001110010110";
        ram[51] = "0b00111101110110000011010010001111";
        ram[52] = "0b00111110001100110011001111111101";
        ram[53] = "0b00111110001111111001110110110010";
        ram[54] = "0b10111101010010111100101100101010";
        ram[55] = "0b10111101111110110101001110010011";
        ram[56] = "0b00111101101101100110100100010011";
        ram[57] = "0b00111101010010010011001001011110";
        ram[58] = "0b10111101011010000000100001000010";
        ram[59] = "0b00111011001101011100001100011011";
        ram[60] = "0b00111110000010000111110001100011";
        ram[61] = "0b00111110000001010010001010100111";
        ram[62] = "0b00111011111100010110110100010101";
        ram[63] = "0b10111100110111100100101000111000";
        ram[64] = "0b00111110010000110001000011011100";
        ram[65] = "0b10111101011101100010111011111100";
        ram[66] = "0b00111100000011010100101110001101";
        ram[67] = "0b10111101110101111010000100111100";
        ram[68] = "0b00111101010001000101101111001010";
        ram[69] = "0b10111110000110111100110000101001";
        ram[70] = "0b10111100000111110110101111110110";
        ram[71] = "0b00111110001101010110101111001010";
        ram[72] = "0b10111100111001101000110011111101";
        ram[73] = "0b00111101110000111010001001100111";
        ram[74] = "0b00111110001000100011000000110100";
        ram[75] = "0b10111101100011001110011111000000";
        ram[76] = "0b10111100110000111011010100101100";
        ram[77] = "0b00111101011101100111110101010000";
        ram[78] = "0b00111101001011101010111010011111";
        ram[79] = "0b00111110001000011101011100010011";
        ram[80] = "0b10111110001110010010110100010011";
        ram[81] = "0b10111101100001101000111101011001";
        ram[82] = "0b10111110000100010010000100100101";
        ram[83] = "0b10111100101001110000110001001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_12_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_12) {
meminst = new inference_mult_1_120_120_84_s_W4_12_ram("inference_mult_1_120_120_84_s_W4_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_12() {
    delete meminst;
}


};//endmodule
#endif
