// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_28_H__
#define __inference_mult_1_120_120_84_s_W4_28_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_28_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_28_ram) {
        ram[0] = "0b00111101111001001110101001001011";
        ram[1] = "0b00111100101001110010001000011000";
        ram[2] = "0b10111101101011000010100111100111";
        ram[3] = "0b00111110000001010100110111101000";
        ram[4] = "0b10111110010001101001110110110110";
        ram[5] = "0b00111101110000100111000100011100";
        ram[6] = "0b10111110001110110111101100101001";
        ram[7] = "0b10111110000000000101010010101100";
        ram[8] = "0b00111110000101101101100000101100";
        ram[9] = "0b10111101010111011010111110101001";
        ram[10] = "0b00111100110000110011101010110011";
        ram[11] = "0b00111110001001011001110110011001";
        ram[12] = "0b10111011100110011000001000011101";
        ram[13] = "0b10111100111101011111111000011110";
        ram[14] = "0b00111110000001111011111000010010";
        ram[15] = "0b10111101001010001011101011010100";
        ram[16] = "0b10111101111100110111110010011010";
        ram[17] = "0b00111101111101010001100100110111";
        ram[18] = "0b00111101111111011010110111111011";
        ram[19] = "0b00111101000000110101010100000100";
        ram[20] = "0b00111101110001100110110000101011";
        ram[21] = "0b00111101100111101000010001011101";
        ram[22] = "0b00111101101010110010110101110110";
        ram[23] = "0b00111101110111010000110110001101";
        ram[24] = "0b00111110011001010000011001010111";
        ram[25] = "0b00111101001011010111000010110001";
        ram[26] = "0b10111101010101110000110011000010";
        ram[27] = "0b10111110011001011110100000001100";
        ram[28] = "0b10111100101110001000000110000110";
        ram[29] = "0b00111101110011100001100000100110";
        ram[30] = "0b00111110000101110110011100001010";
        ram[31] = "0b10111100111110110001010000001000";
        ram[32] = "0b10111011000000011001101111110111";
        ram[33] = "0b00111101000010011101011110100000";
        ram[34] = "0b00111101001001100000000010110000";
        ram[35] = "0b00111101100101010000010110110110";
        ram[36] = "0b10111100011001111000011011111000";
        ram[37] = "0b10111101000101110010000010010011";
        ram[38] = "0b10111101001100101101000011011000";
        ram[39] = "0b00111101010101001011011010001011";
        ram[40] = "0b00111101001111101101011101011100";
        ram[41] = "0b10111110001100110011001101110110";
        ram[42] = "0b10111101101111000111101101100001";
        ram[43] = "0b00111100111111010001011110111001";
        ram[44] = "0b10111110001000110110101101001100";
        ram[45] = "0b10111101011000100110000010110011";
        ram[46] = "0b10111110001111000011001011101100";
        ram[47] = "0b00111110100000111001011010101111";
        ram[48] = "0b10111101101101010100011111100000";
        ram[49] = "0b10111101011001000011011101100111";
        ram[50] = "0b10111101110111110001110011111100";
        ram[51] = "0b00111110000111010011110110000110";
        ram[52] = "0b10111100000100111110011100111110";
        ram[53] = "0b00111110000010100011010110010011";
        ram[54] = "0b10111100011111010111010000110101";
        ram[55] = "0b00111110011001110011110101011100";
        ram[56] = "0b10111101100000100010101110100100";
        ram[57] = "0b00111100110010000100101010111101";
        ram[58] = "0b00111010000110111011110001110000";
        ram[59] = "0b10111110001001001111110000011110";
        ram[60] = "0b00111101100011101010000001001111";
        ram[61] = "0b10111101100011011000111101011101";
        ram[62] = "0b10111101100000001001111010001011";
        ram[63] = "0b00111110010010111101110001101010";
        ram[64] = "0b10111101011101011001110000010100";
        ram[65] = "0b00111100111111101100101011100001";
        ram[66] = "0b00111010101010111101001111011001";
        ram[67] = "0b00111100100010111011010101000000";
        ram[68] = "0b10111100101110010001011010100010";
        ram[69] = "0b10111100100101010000110001101100";
        ram[70] = "0b10111011100010000110001101100110";
        ram[71] = "0b00111110000110110001110101010000";
        ram[72] = "0b00111110010001111011011011111110";
        ram[73] = "0b10111101110000010110101001110001";
        ram[74] = "0b00111110001010110000001101011100";
        ram[75] = "0b10111100001101100000010101110110";
        ram[76] = "0b00111100101101100111011101010110";
        ram[77] = "0b00111101111010111100001011111100";
        ram[78] = "0b00111101101010000100100000011110";
        ram[79] = "0b00111101101000101100101110100111";
        ram[80] = "0b10111101111010101000101010000011";
        ram[81] = "0b00111101111010000011011111111000";
        ram[82] = "0b00111101011011000011000011000110";
        ram[83] = "0b00111101010011001000000111010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_28) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_28_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_28) {
meminst = new inference_mult_1_120_120_84_s_W4_28_ram("inference_mult_1_120_120_84_s_W4_28_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_28() {
    delete meminst;
}


};//endmodule
#endif
