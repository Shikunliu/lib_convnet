// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_102_H__
#define __inference_mult_1_120_120_84_s_W4_102_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_102_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_102_ram) {
        ram[0] = "0b00111101100111110110001000110000";
        ram[1] = "0b00111101101110110001111111101111";
        ram[2] = "0b10111101110001101100100001010110";
        ram[3] = "0b00111010101011100111010011110011";
        ram[4] = "0b10111101111100111100000111001110";
        ram[5] = "0b10111100100101010000001101101000";
        ram[6] = "0b00111100001000101000111000101010";
        ram[7] = "0b10111100000100010101000110110111";
        ram[8] = "0b10111101100101101000011010010111";
        ram[9] = "0b00111101100011110011101011000011";
        ram[10] = "0b00111110001101001111010010000100";
        ram[11] = "0b10111110000110010010001010010110";
        ram[12] = "0b10111110000010100101011011011110";
        ram[13] = "0b00111101001110111111111001100011";
        ram[14] = "0b00111101111101001101101011010011";
        ram[15] = "0b00111101100010111000110110011101";
        ram[16] = "0b10111110000011100110101010111010";
        ram[17] = "0b10111110100000110111011001001111";
        ram[18] = "0b00111100011110000110010111011000";
        ram[19] = "0b10111101100001010100100010110111";
        ram[20] = "0b10111010110100001111011000100111";
        ram[21] = "0b10111110001010101001111101111011";
        ram[22] = "0b10111100011000000011001000000100";
        ram[23] = "0b10111101001001110110000010110010";
        ram[24] = "0b00111100111010011100001101001000";
        ram[25] = "0b00111101101110011000110100011111";
        ram[26] = "0b10111100110100011001011110100010";
        ram[27] = "0b10111110010010101110110101010111";
        ram[28] = "0b00111101110011100100111100110011";
        ram[29] = "0b10111101010000010010001011100000";
        ram[30] = "0b10111101101110011011111011100000";
        ram[31] = "0b10111100001010111110011100001111";
        ram[32] = "0b00111101111000000001010011111001";
        ram[33] = "0b10111110011000010100011111110001";
        ram[34] = "0b10111110001001111001010100101101";
        ram[35] = "0b10111101100110000000011010101111";
        ram[36] = "0b00111101001101100010110001110111";
        ram[37] = "0b00111101100011111000011001010000";
        ram[38] = "0b10111110010111110000110111000111";
        ram[39] = "0b00111101111100010100011111110001";
        ram[40] = "0b10111101101101100001100001001000";
        ram[41] = "0b10111011101111010000010001011000";
        ram[42] = "0b10111101001111110000110101011100";
        ram[43] = "0b10111100010010010100110001111010";
        ram[44] = "0b10111101100101010011100100010111";
        ram[45] = "0b10111101101011110001011111001011";
        ram[46] = "0b00111101101011100100010101110011";
        ram[47] = "0b10111101100101010111001100101111";
        ram[48] = "0b10111101101101010100101000000111";
        ram[49] = "0b10111011000101011110101110111010";
        ram[50] = "0b00111101000100110101010100010010";
        ram[51] = "0b00111101000110000101101010000101";
        ram[52] = "0b10111100111110001101011100010111";
        ram[53] = "0b00111100101011010110100011101111";
        ram[54] = "0b00111110001110111100100111001101";
        ram[55] = "0b00111011000011000001100110101001";
        ram[56] = "0b10111101100001101101111010111001";
        ram[57] = "0b00111101111011101111010111101101";
        ram[58] = "0b10111101011010101000100000110100";
        ram[59] = "0b00111101110010000011101100011101";
        ram[60] = "0b00111100111110111101110001001111";
        ram[61] = "0b10111110001011100000100101111000";
        ram[62] = "0b00111100101011000111000000110110";
        ram[63] = "0b10111101101010110010010010001100";
        ram[64] = "0b10111110000001010010010000111010";
        ram[65] = "0b00111110000110001101101111001111";
        ram[66] = "0b10111110001001011011111110101101";
        ram[67] = "0b00111100100100100110000100101100";
        ram[68] = "0b00111101010101000011101100111011";
        ram[69] = "0b10111100100111010001111011110101";
        ram[70] = "0b00111101100000010110111110101111";
        ram[71] = "0b10111101000010101100100111110011";
        ram[72] = "0b10111101111110100101111010111011";
        ram[73] = "0b00111100111000100111101001111110";
        ram[74] = "0b10111011000101100000001100110111";
        ram[75] = "0b00111101000101100010000111111011";
        ram[76] = "0b10111100011011101010111101110110";
        ram[77] = "0b00111101000001100010110011010101";
        ram[78] = "0b10111101100010100101100101010101";
        ram[79] = "0b10111011101111011001100000111100";
        ram[80] = "0b10111101011101111101100101110000";
        ram[81] = "0b10111100010100100110010001010001";
        ram[82] = "0b00111101101011001100101111101001";
        ram[83] = "0b10111101100111001011010101000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_102) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_102_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_102) {
meminst = new inference_mult_1_120_120_84_s_W4_102_ram("inference_mult_1_120_120_84_s_W4_102_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_102() {
    delete meminst;
}


};//endmodule
#endif
