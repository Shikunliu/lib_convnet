// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_15_H__
#define __inference_conv2d_f3_2_4_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_15_ram) {
        ram[0] = "0b10111101001101001001001111110001";
        ram[1] = "0b00111101000001000011011100010111";
        ram[2] = "0b00111101001001111100100000110001";
        ram[3] = "0b10111101101010000111110001010110";
        ram[4] = "0b00111101111100111011110000001010";
        ram[5] = "0b00111101101000101101001010101110";
        ram[6] = "0b00111110000110000010101111101001";
        ram[7] = "0b10111101110111101000101000101111";
        ram[8] = "0b10111101100010101001000101000110";
        ram[9] = "0b00111100111001111001110110011110";
        ram[10] = "0b00111110001101110011000100001010";
        ram[11] = "0b00111110000100110110111000101111";
        ram[12] = "0b00111101101010100010010001000110";
        ram[13] = "0b00111110000000101001010011011101";
        ram[14] = "0b10111101001110111110011110000111";
        ram[15] = "0b10111101101011001000001101001011";
        ram[16] = "0b00111101100001101000111010001111";
        ram[17] = "0b10111101100100001111010101111001";
        ram[18] = "0b00111101011010110001100100000011";
        ram[19] = "0b10111101010011010111010111010101";
        ram[20] = "0b00111101001101010011101101100110";
        ram[21] = "0b10111110010110111110001000101110";
        ram[22] = "0b00111101100100010101101000110000";
        ram[23] = "0b00111100110010000000011001011111";
        ram[24] = "0b10111101100101111010100111111110";
        ram[25] = "0b00111101111111100100011100010011";
        ram[26] = "0b00111101000101000111011011100101";
        ram[27] = "0b10111110001101111110100101010011";
        ram[28] = "0b00111101110000100101000111011100";
        ram[29] = "0b10111101111000111011001001010111";
        ram[30] = "0b10111101100011000100010100011101";
        ram[31] = "0b00111101111111110101110001101100";
        ram[32] = "0b10111101000110101110111001100011";
        ram[33] = "0b00111100101011010100010000111100";
        ram[34] = "0b10111110010010100110010011000011";
        ram[35] = "0b10111100010011011010010001100011";
        ram[36] = "0b00111101001101101000111010111000";
        ram[37] = "0b00111101011111011011000100100001";
        ram[38] = "0b10111101001100011001011111110011";
        ram[39] = "0b00111101111011010000001001000111";
        ram[40] = "0b00111101001010110011111011000011";
        ram[41] = "0b10111101010011110100100000100010";
        ram[42] = "0b10111110000111110011101110100111";
        ram[43] = "0b00111101110000011011011001011011";
        ram[44] = "0b10111101110011000000011100110010";
        ram[45] = "0b00111101110010001111100010010111";
        ram[46] = "0b00111100100100111001010001100111";
        ram[47] = "0b00111110001100011010111011110111";
        ram[48] = "0b10111101000110101110011111111110";
        ram[49] = "0b00111100100110011100000010011011";
        ram[50] = "0b10111110000010101000101100001001";
        ram[51] = "0b00111100111101011011111110100000";
        ram[52] = "0b10111101111001011001001000010000";
        ram[53] = "0b00111100101110100000110001101011";
        ram[54] = "0b10111100011100010011010101100010";
        ram[55] = "0b10111110001001100011101000011001";
        ram[56] = "0b00111101000110110111100010110010";
        ram[57] = "0b10111101010100011010011000011011";
        ram[58] = "0b00111110001101010000011011011101";
        ram[59] = "0b00111110000111111101001110110011";
        ram[60] = "0b00111101011111101100100111110000";
        ram[61] = "0b00111101011010110011110000100100";
        ram[62] = "0b10111110000010100010110001100111";
        ram[63] = "0b00111101111000111011001101100011";
        ram[64] = "0b00111101001011111000111001100011";
        ram[65] = "0b00111110001110111000010010011001";
        ram[66] = "0b10111110000100011001111010110110";
        ram[67] = "0b00111100100010011010000101101001";
        ram[68] = "0b10111100011011000011011010001010";
        ram[69] = "0b00111101110101101110110011100001";
        ram[70] = "0b00111101111111101111001010000100";
        ram[71] = "0b00111100111110111110101110011110";
        ram[72] = "0b00111101100111000100010111100111";
        ram[73] = "0b10111101100101101011110101101111";
        ram[74] = "0b00111100011000100011010000111101";
        ram[75] = "0b10111110010011100101011100010001";
        ram[76] = "0b10111101101101000100110001111011";
        ram[77] = "0b10111010000010010100101001100011";
        ram[78] = "0b10111101101001001111000001010010";
        ram[79] = "0b00111100010101000000100101101101";
        ram[80] = "0b00111100011000010111011101111111";
        ram[81] = "0b10111110000010101110111110110011";
        ram[82] = "0b00111100110010100010101010010001";
        ram[83] = "0b00111100110100010000111110111101";
        ram[84] = "0b10111101100111101001110101111010";
        ram[85] = "0b10111110000111101101101000100011";
        ram[86] = "0b00111101010011001110110111101111";
        ram[87] = "0b00111100111111000101001110100011";
        ram[88] = "0b10111110000011010111000011100111";
        ram[89] = "0b10111101111100011000000010010001";
        ram[90] = "0b00111101010111101100111111001111";
        ram[91] = "0b00111101010010111110010100101011";
        ram[92] = "0b00111100101000001101001111101011";
        ram[93] = "0b00111101100110110111110110111010";
        ram[94] = "0b10111101111111001000110000001101";
        ram[95] = "0b10111100111000000100000100011110";
        ram[96] = "0b10111100110000101110011100000101";
        ram[97] = "0b10111100110000111101001110010100";
        ram[98] = "0b00111110010000010101011011100010";
        ram[99] = "0b00111110001101100100110111000010";
        ram[100] = "0b00111101101000011000101001101100";
        ram[101] = "0b00111101101011010110000000111011";
        ram[102] = "0b10111100101110111111100010011111";
        ram[103] = "0b00111101111111101100001101010100";
        ram[104] = "0b00111101000011001010010000111000";
        ram[105] = "0b10111101000110000011110110101111";
        ram[106] = "0b10111100101001111010110110001110";
        ram[107] = "0b10111110000000101010100001000100";
        ram[108] = "0b10111101001011001111100010000111";
        ram[109] = "0b00111101000011100010110110100101";
        ram[110] = "0b10111101011111111001111010110001";
        ram[111] = "0b10111100111000100111110101101110";
        ram[112] = "0b10111101100011001000011000111011";
        ram[113] = "0b10111101111000100110100000001010";
        ram[114] = "0b00111110001010101100010111000001";
        ram[115] = "0b10111101001100001101100111010111";
        ram[116] = "0b10111101110110001110000010000111";
        ram[117] = "0b00111100101100100000011001111000";
        ram[118] = "0b00111100101001000011111111100110";
        ram[119] = "0b00111011111111111011001111101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_15) {
meminst = new inference_conv2d_f3_2_4_15_ram("inference_conv2d_f3_2_4_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_15() {
    delete meminst;
}


};//endmodule
#endif
