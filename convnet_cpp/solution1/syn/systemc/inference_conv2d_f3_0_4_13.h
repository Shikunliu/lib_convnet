// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_13_H__
#define __inference_conv2d_f3_0_4_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_13_ram) {
        ram[0] = "0b10111110001001100110010001001110";
        ram[1] = "0b00111110010010000111101001001010";
        ram[2] = "0b00111110000111001111101010101101";
        ram[3] = "0b00111110000001011111110100000101";
        ram[4] = "0b10111101001000100010010111100000";
        ram[5] = "0b00111101101110000110000001100100";
        ram[6] = "0b10111101101010000100000100100101";
        ram[7] = "0b00111011011110000010000111100101";
        ram[8] = "0b00111101011011110110111000010111";
        ram[9] = "0b00111100011000111010100100011101";
        ram[10] = "0b00111101101000001001111010110100";
        ram[11] = "0b10111101100101010011000000111011";
        ram[12] = "0b10111101111100011011101000111101";
        ram[13] = "0b00111101010100000101001101001111";
        ram[14] = "0b00111101101101100000010001011100";
        ram[15] = "0b10111011111010111110111101010010";
        ram[16] = "0b00111110001110001011000110011010";
        ram[17] = "0b00111101111001101001110111111001";
        ram[18] = "0b10111100111111001100000111110010";
        ram[19] = "0b00111101010010001010001010000001";
        ram[20] = "0b00111101101111011011111111110111";
        ram[21] = "0b10111100100011100100000011010110";
        ram[22] = "0b10111101111011101000001010010101";
        ram[23] = "0b00111110000111000101110001010111";
        ram[24] = "0b00111110000111111110100000100101";
        ram[25] = "0b00111101000111110100111110100001";
        ram[26] = "0b10111101110010101110110011011110";
        ram[27] = "0b10111101101001111101100000000110";
        ram[28] = "0b00111101001111101110010001011100";
        ram[29] = "0b00111101101101110110011010010001";
        ram[30] = "0b10111101110010100001001111010000";
        ram[31] = "0b00111101011100110110111100101110";
        ram[32] = "0b10111101111010100011011110101100";
        ram[33] = "0b00111101110001001100000110011011";
        ram[34] = "0b00111011001100000000010000111111";
        ram[35] = "0b10111101011011010111000110001000";
        ram[36] = "0b00111101010000110110111010110101";
        ram[37] = "0b00111101111100011110001000010101";
        ram[38] = "0b10111101100000000000010000110010";
        ram[39] = "0b10111101010100001011010001001101";
        ram[40] = "0b10111101000011110000100001111100";
        ram[41] = "0b00111101110100001001001010001010";
        ram[42] = "0b00111100011111110100110101010011";
        ram[43] = "0b10111101000001001001000001010011";
        ram[44] = "0b00111110000011000001101011001110";
        ram[45] = "0b00111101001110110011001111101000";
        ram[46] = "0b00111101100100011000000110101011";
        ram[47] = "0b10111101010101001110000101101110";
        ram[48] = "0b10111101010010001101111101101101";
        ram[49] = "0b10111101010111010101111010000000";
        ram[50] = "0b00111110001001101100110111110010";
        ram[51] = "0b10111110001000011110110111100001";
        ram[52] = "0b00111101001001110110100111010001";
        ram[53] = "0b00111101000001001100100110101110";
        ram[54] = "0b10111110000000001110000010101000";
        ram[55] = "0b10111101101111111010100100101110";
        ram[56] = "0b10111101111100011110010111000001";
        ram[57] = "0b10111101101101100001100111001101";
        ram[58] = "0b00111101101001000000011001000111";
        ram[59] = "0b00111100110000000000100011001111";
        ram[60] = "0b00111101011001100100101110101001";
        ram[61] = "0b00111101000110000010000000000010";
        ram[62] = "0b10111110001111000000001000101010";
        ram[63] = "0b10111100110000110100010010001110";
        ram[64] = "0b10111100100000101000011110011010";
        ram[65] = "0b10111101001111000100000001110011";
        ram[66] = "0b10111110000110001001101010001001";
        ram[67] = "0b00111110010100100111100001001011";
        ram[68] = "0b00111011110011001000111101010000";
        ram[69] = "0b10111100111000011101110011111111";
        ram[70] = "0b00111101001110111110101100110011";
        ram[71] = "0b10111101101000100001100110001101";
        ram[72] = "0b10111101001001001110010001010000";
        ram[73] = "0b00111101111001000000001010001110";
        ram[74] = "0b10111101110000101011101111101101";
        ram[75] = "0b00111110001111101101011110000100";
        ram[76] = "0b00111101110000100111100010001110";
        ram[77] = "0b10111101000001010101100000101111";
        ram[78] = "0b00111101111100100000100111101110";
        ram[79] = "0b00111100111110111000111111111001";
        ram[80] = "0b00111101101000010111001110011110";
        ram[81] = "0b10111101100011001100011111101101";
        ram[82] = "0b00111101100010100101101000011110";
        ram[83] = "0b00111110001010011100010110100100";
        ram[84] = "0b00111101111101010110000100001011";
        ram[85] = "0b10111101011000101101001110000100";
        ram[86] = "0b10111101001010111011001101111000";
        ram[87] = "0b00111101100101011010001011110010";
        ram[88] = "0b00111101110001001000000101100010";
        ram[89] = "0b00111101100011001011100011101110";
        ram[90] = "0b00111110000111101101011011111110";
        ram[91] = "0b00111100000111011111110000011111";
        ram[92] = "0b10111101101001100111110101010000";
        ram[93] = "0b00111101000000010010001100110001";
        ram[94] = "0b00111101010011100111110011101011";
        ram[95] = "0b00111101100110110110110001101101";
        ram[96] = "0b10111101011110101001000100101011";
        ram[97] = "0b10111101001000000001111111000110";
        ram[98] = "0b00111101101011010101100011100100";
        ram[99] = "0b10111011110010110111100010100100";
        ram[100] = "0b10111101101100100000011110010010";
        ram[101] = "0b00111101010111110101101101111010";
        ram[102] = "0b00111101101100110001001100111000";
        ram[103] = "0b00111101001011001001111101100110";
        ram[104] = "0b00111101100000000101010101110101";
        ram[105] = "0b00111110000010100001110000100110";
        ram[106] = "0b00111110000110000110100000110100";
        ram[107] = "0b10111101100101011111101100010100";
        ram[108] = "0b00111100111010001011110001001100";
        ram[109] = "0b00111101010000001011111101011101";
        ram[110] = "0b00111101001100011111101100100101";
        ram[111] = "0b10111101000111111000001101101110";
        ram[112] = "0b10111101101000011001011001111011";
        ram[113] = "0b10111101001000100010001111100010";
        ram[114] = "0b10111101100000111010001010000010";
        ram[115] = "0b00111100111100101110001010101011";
        ram[116] = "0b10111101111000101001001100001000";
        ram[117] = "0b00111101000010101000111100111011";
        ram[118] = "0b10111101001101101100011100100010";
        ram[119] = "0b10111101101101110111011010101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_13) {
meminst = new inference_conv2d_f3_0_4_13_ram("inference_conv2d_f3_0_4_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_13() {
    delete meminst;
}


};//endmodule
#endif
