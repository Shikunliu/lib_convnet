// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_44_H__
#define __inference_mult_1_120_120_84_s_W4_44_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_44_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_44_ram) {
        ram[0] = "0b00111101001010111111001001100010";
        ram[1] = "0b10111100110101111101110100110111";
        ram[2] = "0b00111011101100101101001011111100";
        ram[3] = "0b10111110001010101000101110001111";
        ram[4] = "0b10111110001011001010111011101010";
        ram[5] = "0b10111100110011010000011110000101";
        ram[6] = "0b00111110010000010010011111110110";
        ram[7] = "0b00111100000000000110000000111000";
        ram[8] = "0b10111101111010100001000001011010";
        ram[9] = "0b10111110010001001011001111000100";
        ram[10] = "0b10111101010111011000001001000010";
        ram[11] = "0b10111101011101000011110001001000";
        ram[12] = "0b00111010111001101110101011011011";
        ram[13] = "0b10111011010100001101001111000011";
        ram[14] = "0b00111101101100011101011001100100";
        ram[15] = "0b10111100101010001011111010011011";
        ram[16] = "0b00111101111001011110111111101001";
        ram[17] = "0b00111101101000010010011101110000";
        ram[18] = "0b10111101100110101110100010101100";
        ram[19] = "0b00111110010010011000110110001011";
        ram[20] = "0b10111110001011001100010101110110";
        ram[21] = "0b00111100101101011111010000001110";
        ram[22] = "0b10111011001111111111100101010101";
        ram[23] = "0b00111101100011110011001110010101";
        ram[24] = "0b00111101111000101100000110110001";
        ram[25] = "0b00111100110011001001111110110110";
        ram[26] = "0b00111001000010111101110010111010";
        ram[27] = "0b10111110000010101110110101010111";
        ram[28] = "0b10111110000010011111011001100110";
        ram[29] = "0b00111100110100110010101010110101";
        ram[30] = "0b10111100000000011011011110111011";
        ram[31] = "0b10111101100010110010011110111111";
        ram[32] = "0b10111110010001100011010000010001";
        ram[33] = "0b10111110010010011000111001010100";
        ram[34] = "0b10111110000000101001001010000001";
        ram[35] = "0b10111100101001010111101001000011";
        ram[36] = "0b00111101011000010110111010010101";
        ram[37] = "0b00111101010010011010011100101110";
        ram[38] = "0b10111100011000100100110011111100";
        ram[39] = "0b10111100001100010011100111001001";
        ram[40] = "0b10111100000111111101000000011111";
        ram[41] = "0b00111011010010110100100000010010";
        ram[42] = "0b10111101011110100111000100110000";
        ram[43] = "0b10111101100100000001001101001011";
        ram[44] = "0b10111101101011000011100000101010";
        ram[45] = "0b00111101010111011010011110010110";
        ram[46] = "0b00111101100111010100011000011111";
        ram[47] = "0b00111101111110101001110010011001";
        ram[48] = "0b00111100101000110110111111011100";
        ram[49] = "0b10111101011001110011111001101000";
        ram[50] = "0b00111110001100101010000110110110";
        ram[51] = "0b00111110001110100101000010010100";
        ram[52] = "0b10111100110010101010010110101011";
        ram[53] = "0b10111101011100001001011010100001";
        ram[54] = "0b10111101010111101010111100011000";
        ram[55] = "0b00111110000000000111000000110011";
        ram[56] = "0b00111010001101100101101000110011";
        ram[57] = "0b10111100110111101111111011001001";
        ram[58] = "0b10111101100010100111110000110011";
        ram[59] = "0b00111100101001001000110101111110";
        ram[60] = "0b00111101101011011000110001100000";
        ram[61] = "0b10111101011011110011100100100011";
        ram[62] = "0b00111100101001111001110011111101";
        ram[63] = "0b10111101000000110000011100110110";
        ram[64] = "0b00111101100000110110111000010100";
        ram[65] = "0b00111101010011010001011100100101";
        ram[66] = "0b10111110000010010000101001111000";
        ram[67] = "0b10111101101100111001001010000100";
        ram[68] = "0b10111101111011110001110100111111";
        ram[69] = "0b10111110011001001101101000001010";
        ram[70] = "0b00111101110100100101000010110101";
        ram[71] = "0b00111110010011010011011010110101";
        ram[72] = "0b00111110010010000000000000100010";
        ram[73] = "0b10111101001010111000111110011011";
        ram[74] = "0b10111101001100011010001010100101";
        ram[75] = "0b10111110001000101100001101000100";
        ram[76] = "0b00111101111101011000010010110010";
        ram[77] = "0b10111110000010110010111010011101";
        ram[78] = "0b00111101101001100001001010111001";
        ram[79] = "0b10111110000101110111101010110011";
        ram[80] = "0b10111110010010010000011101010011";
        ram[81] = "0b10111101001111101010101001111011";
        ram[82] = "0b00111110010110101001011010010010";
        ram[83] = "0b10111100101000001111110001100100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_44) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_44_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_44) {
meminst = new inference_mult_1_120_120_84_s_W4_44_ram("inference_mult_1_120_120_84_s_W4_44_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_44() {
    delete meminst;
}


};//endmodule
#endif
