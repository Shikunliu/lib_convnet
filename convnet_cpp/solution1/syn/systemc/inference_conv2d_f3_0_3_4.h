// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_4_H__
#define __inference_conv2d_f3_0_3_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_4_ram) {
        ram[0] = "0b00111110000010000010011001100111";
        ram[1] = "0b10111101011111001011100100111110";
        ram[2] = "0b00111110010001001111110101101101";
        ram[3] = "0b00111101001101110100011101011111";
        ram[4] = "0b00111101110111100010011000001011";
        ram[5] = "0b10111101110100111111110010000111";
        ram[6] = "0b00111101110101110001000000000010";
        ram[7] = "0b10111101011001101100111111100011";
        ram[8] = "0b10111101101000001110100010010011";
        ram[9] = "0b00111110000000101010010011011011";
        ram[10] = "0b10111011101100000001010100000110";
        ram[11] = "0b00111101100011001010101001000000";
        ram[12] = "0b10111101111010001110011100010100";
        ram[13] = "0b00111100111000101001100011100111";
        ram[14] = "0b00111101110000110110000100100001";
        ram[15] = "0b00111110011001010001111001110101";
        ram[16] = "0b10111100111100101100110000000101";
        ram[17] = "0b00111110000001100101010101011100";
        ram[18] = "0b10111100110101011000000010011011";
        ram[19] = "0b10111101101010100000001011010011";
        ram[20] = "0b00111101001000101101010101001101";
        ram[21] = "0b10111110000001110011100110110000";
        ram[22] = "0b10111101110001110101000110100110";
        ram[23] = "0b00111110011010111001001100000011";
        ram[24] = "0b10111110010000111111001011010100";
        ram[25] = "0b10111101100100011001011100000001";
        ram[26] = "0b00111101101011010101000011101100";
        ram[27] = "0b00111100000101111100111110010101";
        ram[28] = "0b10111110010000010000110010110011";
        ram[29] = "0b10111101100000100110110011011101";
        ram[30] = "0b10111100111100110001010111010111";
        ram[31] = "0b00111101111100101111110100110011";
        ram[32] = "0b00111110000000000011000111001111";
        ram[33] = "0b10111101111000010111011101100100";
        ram[34] = "0b10111101111000000000001010011111";
        ram[35] = "0b00111101100101000010010100001110";
        ram[36] = "0b00111101100001111010000110110101";
        ram[37] = "0b00111101011000011010011001011110";
        ram[38] = "0b10111100110101010101010001011011";
        ram[39] = "0b00111011000101001010111011111001";
        ram[40] = "0b10111110001000101000111111100010";
        ram[41] = "0b10111110000000111100010101111010";
        ram[42] = "0b00111101110000010010100110001001";
        ram[43] = "0b00111010110101011101100100010000";
        ram[44] = "0b00111101111111110011000011101000";
        ram[45] = "0b00111101111101000000000000110010";
        ram[46] = "0b00111100001001001010010011111011";
        ram[47] = "0b10111100000010001001001011100001";
        ram[48] = "0b10111011011111110101011010111000";
        ram[49] = "0b10111011011011101010110111001000";
        ram[50] = "0b10111101100100110111100011000110";
        ram[51] = "0b10111100110100010111111101001111";
        ram[52] = "0b10111100011111001111111100101111";
        ram[53] = "0b00111101010101000101010001100110";
        ram[54] = "0b10111101000110100011000110001010";
        ram[55] = "0b00111110001010111101011000011111";
        ram[56] = "0b10111101001010111111100100011000";
        ram[57] = "0b10111101111100011010100101110110";
        ram[58] = "0b10111101101111111101100010000101";
        ram[59] = "0b10111101000010010000001101100100";
        ram[60] = "0b10111101110110010111101010101011";
        ram[61] = "0b00111101010010101011000100011001";
        ram[62] = "0b10111110000001001101101000001010";
        ram[63] = "0b00111101100000010000101001111111";
        ram[64] = "0b00111110001111111101011000001111";
        ram[65] = "0b10111100011010000001000011110110";
        ram[66] = "0b00111110001010010010010001101100";
        ram[67] = "0b10111110001010010101100010010111";
        ram[68] = "0b00111101101001011001001110001000";
        ram[69] = "0b10111101111111000001111001111001";
        ram[70] = "0b10111100110101110110110100000100";
        ram[71] = "0b00111101101011011011101001011011";
        ram[72] = "0b00111100010010000001000010100101";
        ram[73] = "0b10111100110011100000000010101001";
        ram[74] = "0b00111100110001000011100100010101";
        ram[75] = "0b10111101000001000100001001001111";
        ram[76] = "0b00111101110101000111111000000111";
        ram[77] = "0b00111110100001010110111101010100";
        ram[78] = "0b10111101110101110110100100100011";
        ram[79] = "0b00111110001110011010000001101010";
        ram[80] = "0b00111110000000011000101000000001";
        ram[81] = "0b10111101111000011001010000111010";
        ram[82] = "0b10111101100101010101111110000110";
        ram[83] = "0b00111101100011011000010111100000";
        ram[84] = "0b00111011011100001000001101100000";
        ram[85] = "0b00111100001010010100110111010111";
        ram[86] = "0b00111101010000011010010011001011";
        ram[87] = "0b10111110100001110110100001011010";
        ram[88] = "0b10111101000011001110001011010010";
        ram[89] = "0b10111101011000101110101001100000";
        ram[90] = "0b10111101011011111111000010111110";
        ram[91] = "0b00111110000110010100011000111101";
        ram[92] = "0b00111100001101111000000010100000";
        ram[93] = "0b00111101110110110100011001111000";
        ram[94] = "0b00111110000101100101001110000111";
        ram[95] = "0b10111110000000000001001011100000";
        ram[96] = "0b00111110000010101010000011001011";
        ram[97] = "0b00111110000000000100111010100101";
        ram[98] = "0b10111110001011011010011101101110";
        ram[99] = "0b00111101101101100010111001000000";
        ram[100] = "0b10111110010111100001110010011011";
        ram[101] = "0b00111100101000011101111001000001";
        ram[102] = "0b10111101011011001110110110000100";
        ram[103] = "0b10111101011001001111101001010110";
        ram[104] = "0b00111110010000100001100001011001";
        ram[105] = "0b10111101011110011010110010010100";
        ram[106] = "0b10111100101011110010010000010000";
        ram[107] = "0b10111101101111101101001100110111";
        ram[108] = "0b00111101110011101010010110110101";
        ram[109] = "0b10111101000000110100010110110101";
        ram[110] = "0b00111100111101100010110001110111";
        ram[111] = "0b00111101100101010110110110101110";
        ram[112] = "0b10111101110111110101101011011001";
        ram[113] = "0b00111101111111000000000000010001";
        ram[114] = "0b10111101001011100111001010111111";
        ram[115] = "0b00111101101000000010111101011000";
        ram[116] = "0b10111110010000101001001010000001";
        ram[117] = "0b10111100011001110101010101111010";
        ram[118] = "0b10111101111101011001110011010000";
        ram[119] = "0b00111100110010101000011101111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_4) {
meminst = new inference_conv2d_f3_0_3_4_ram("inference_conv2d_f3_0_3_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_4() {
    delete meminst;
}


};//endmodule
#endif
