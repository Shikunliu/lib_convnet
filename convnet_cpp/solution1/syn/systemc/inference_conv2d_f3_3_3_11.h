// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_11_H__
#define __inference_conv2d_f3_3_3_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_11_ram) {
        ram[0] = "0b10111101011011111111000000111000";
        ram[1] = "0b10111101011010011101101100110000";
        ram[2] = "0b10111101100000101011010000000010";
        ram[3] = "0b00111101101101010000001111010011";
        ram[4] = "0b10111101101100111100111011000010";
        ram[5] = "0b00111101101000010010101110000111";
        ram[6] = "0b00111100101101010111010001010110";
        ram[7] = "0b10111101100000010101011001000001";
        ram[8] = "0b00111101001000101000010000001001";
        ram[9] = "0b10111101111001011010110011001101";
        ram[10] = "0b00111110000101011011101010110010";
        ram[11] = "0b00111100100110000111011001001110";
        ram[12] = "0b00111101110001010000111001000010";
        ram[13] = "0b10111101010001101001010010001010";
        ram[14] = "0b10111101110011011001010000001000";
        ram[15] = "0b00111101000100010011111010011100";
        ram[16] = "0b10111101110011001011001000011101";
        ram[17] = "0b00111110000101000000000011111100";
        ram[18] = "0b10111101000000011101111100110011";
        ram[19] = "0b10111101010101000100000001011111";
        ram[20] = "0b10111110000000001011010101100111";
        ram[21] = "0b10111101101000011010101001100111";
        ram[22] = "0b10111110000010100100100000110000";
        ram[23] = "0b00111010000101011011010001000011";
        ram[24] = "0b00111101110000001110100010101110";
        ram[25] = "0b00111110000111011110011101100100";
        ram[26] = "0b00111110000001101110010111001101";
        ram[27] = "0b00111110000001000101110000110110";
        ram[28] = "0b00111101011010010110011111110011";
        ram[29] = "0b10111101110111001001111001100111";
        ram[30] = "0b10111101100001000000001101110010";
        ram[31] = "0b00111101111110000100011111110101";
        ram[32] = "0b10111100001001011101011100101010";
        ram[33] = "0b00111101101010000011000001101011";
        ram[34] = "0b00111110000100111010001000010110";
        ram[35] = "0b10111110001101110000100000100101";
        ram[36] = "0b00111011101100010010011100101010";
        ram[37] = "0b10111101100101011010111010111110";
        ram[38] = "0b00111101110111111100011111100111";
        ram[39] = "0b10111101101101110011110111111101";
        ram[40] = "0b10111110001010101011110111100100";
        ram[41] = "0b00111101111010101110100011100010";
        ram[42] = "0b10111010001010110100010111111011";
        ram[43] = "0b10111100111001010001111100111111";
        ram[44] = "0b00111101100011011110011001001010";
        ram[45] = "0b10111101101111010010111111110001";
        ram[46] = "0b10111110010001011110100101011011";
        ram[47] = "0b10111101111010111110001001110001";
        ram[48] = "0b10111101001100111100011101000010";
        ram[49] = "0b10111101100000010101010000101000";
        ram[50] = "0b00111110000110100011100100111111";
        ram[51] = "0b00111100111011101011100110000111";
        ram[52] = "0b00111011101001011101100111011001";
        ram[53] = "0b10111100001100001111001101010010";
        ram[54] = "0b10111101010111010111100111000011";
        ram[55] = "0b10111110000011011010000101100110";
        ram[56] = "0b00111101011100001010111110110000";
        ram[57] = "0b10111101111001111100010100100110";
        ram[58] = "0b00111101110101111100100010001110";
        ram[59] = "0b00111110001101001101011100101000";
        ram[60] = "0b10111101010100101111111111101101";
        ram[61] = "0b00111101101100001010110101000111";
        ram[62] = "0b10111101110010000011011101001001";
        ram[63] = "0b00111110000111101011001010001110";
        ram[64] = "0b10111101010100101010000100111101";
        ram[65] = "0b10111011001001011010011001101101";
        ram[66] = "0b00111101100100101101011101011000";
        ram[67] = "0b00111101000101100111111011001000";
        ram[68] = "0b00111101100111111100101100100111";
        ram[69] = "0b00111101010100011010110010110110";
        ram[70] = "0b10111101110001100001000011001001";
        ram[71] = "0b00111011000011111110111101001100";
        ram[72] = "0b10111101110110000010110110111110";
        ram[73] = "0b10111110001011011001000101101000";
        ram[74] = "0b10111101100001101101000111100001";
        ram[75] = "0b00111100000110111111101110111111";
        ram[76] = "0b10111101111001011110101110110111";
        ram[77] = "0b00111101100000100110010000110110";
        ram[78] = "0b10111101011100110101001111010000";
        ram[79] = "0b00111011010001100000111100011000";
        ram[80] = "0b00111011101011010010111111001110";
        ram[81] = "0b10111101000001001011001001001100";
        ram[82] = "0b10111101110100101100000111110100";
        ram[83] = "0b10111101000110100000001000100101";
        ram[84] = "0b10111101011101100011110010000010";
        ram[85] = "0b00111100100110101100010101111110";
        ram[86] = "0b00111010110011100101111001110010";
        ram[87] = "0b00111101010011111010110100110111";
        ram[88] = "0b00111100110010100100001110000110";
        ram[89] = "0b10111100000001111100100000110110";
        ram[90] = "0b00111110000000001001010000011101";
        ram[91] = "0b10111100000011110100101110100010";
        ram[92] = "0b00111100110111110011100000001001";
        ram[93] = "0b00111110000110010111100001001111";
        ram[94] = "0b10111001110010000111000110010110";
        ram[95] = "0b00111110010001010110011101010101";
        ram[96] = "0b10111110000100000001111011101111";
        ram[97] = "0b00111101101010111101010101010110";
        ram[98] = "0b10111101010101100111000111111101";
        ram[99] = "0b10111011100010001001101111000101";
        ram[100] = "0b00111100011100101111010101010110";
        ram[101] = "0b10111101000110001110011011101100";
        ram[102] = "0b10111110000010011100010011011011";
        ram[103] = "0b10111100100011010110011101011100";
        ram[104] = "0b00111100101000010001010101011001";
        ram[105] = "0b10111101110011011101000001010011";
        ram[106] = "0b00111100110010101011100010001011";
        ram[107] = "0b10111011111000101000001000000000";
        ram[108] = "0b10111110000001111001111101100110";
        ram[109] = "0b00111100110101100011101011010101";
        ram[110] = "0b00111101010001111011101011111010";
        ram[111] = "0b00111110001110101100111000100101";
        ram[112] = "0b10111100101100110101100010111101";
        ram[113] = "0b00111100001111111001010001101011";
        ram[114] = "0b00111101110110011110110011110110";
        ram[115] = "0b00111101110100001010000100111000";
        ram[116] = "0b10111101011100100111111101111001";
        ram[117] = "0b00111101101001000001101101110110";
        ram[118] = "0b00111101011111000011101011001001";
        ram[119] = "0b10111101101110000010111110101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_11) {
meminst = new inference_conv2d_f3_3_3_11_ram("inference_conv2d_f3_3_3_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_11() {
    delete meminst;
}


};//endmodule
#endif
