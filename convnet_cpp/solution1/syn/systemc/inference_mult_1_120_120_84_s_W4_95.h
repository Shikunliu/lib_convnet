// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_95_H__
#define __inference_mult_1_120_120_84_s_W4_95_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_95_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_95_ram) {
        ram[0] = "0b10111101000111101001010110000010";
        ram[1] = "0b10111101000101010011011110000101";
        ram[2] = "0b10111100101100011111011101011110";
        ram[3] = "0b00111101010111100011111110111100";
        ram[4] = "0b10111100001010111110100100100111";
        ram[5] = "0b10111011010100111000011001001111";
        ram[6] = "0b10111101010110110001101010001000";
        ram[7] = "0b00111011110101011110011101101000";
        ram[8] = "0b00111110001000111101100101100110";
        ram[9] = "0b10111101110011000110111010111110";
        ram[10] = "0b10111100011001011010111111110011";
        ram[11] = "0b00111101110001111100101010110101";
        ram[12] = "0b00111101100101011111110110001011";
        ram[13] = "0b10111101001111111101011000001111";
        ram[14] = "0b10111101110110101000100100110011";
        ram[15] = "0b00111101001101101100110110111101";
        ram[16] = "0b10111101001101011000011110111100";
        ram[17] = "0b00111101011100110100101101010001";
        ram[18] = "0b10111110000110100100111100000001";
        ram[19] = "0b10111110000110000100100000111000";
        ram[20] = "0b10111100010101010100000000111001";
        ram[21] = "0b10111100001010111001000010101000";
        ram[22] = "0b00111101011001111111010010001011";
        ram[23] = "0b10111101001110010111010000010000";
        ram[24] = "0b10111110000101111011000101111101";
        ram[25] = "0b00111101000010111010001001000101";
        ram[26] = "0b00111101110011001011111110111111";
        ram[27] = "0b00111101110100011110010000101110";
        ram[28] = "0b00111110001010000111010000000000";
        ram[29] = "0b00111011100000001110001111000000";
        ram[30] = "0b00111100101000111010000100100101";
        ram[31] = "0b10111101101100101011110001001011";
        ram[32] = "0b00111101010000110000010101101110";
        ram[33] = "0b00111110010000110001101000001001";
        ram[34] = "0b00111101000001111101000011111111";
        ram[35] = "0b10111010111001100000011000000100";
        ram[36] = "0b10111100100100100110110001001001";
        ram[37] = "0b00111011000111101111010011001101";
        ram[38] = "0b00111101101010000000010101101101";
        ram[39] = "0b00111100000100110000110100011000";
        ram[40] = "0b10111110000110111011010010010001";
        ram[41] = "0b00111110000110101010000111010111";
        ram[42] = "0b10111100100111010100011010011000";
        ram[43] = "0b10111100000110011101111101101111";
        ram[44] = "0b10111110000011001001110000001011";
        ram[45] = "0b10111101101110100000111001110111";
        ram[46] = "0b00111100111010100001000000001001";
        ram[47] = "0b10111100110111110010101011010011";
        ram[48] = "0b10111110001110000110111101001000";
        ram[49] = "0b00111101110111011001011101110000";
        ram[50] = "0b00111101110110111011101001010110";
        ram[51] = "0b00111101010101000011011000011000";
        ram[52] = "0b10111101000101001100100001111010";
        ram[53] = "0b10111101111011011010111111010001";
        ram[54] = "0b10111110000011010000100010010010";
        ram[55] = "0b10111110000101111111110100111111";
        ram[56] = "0b10111101100010101000111000000110";
        ram[57] = "0b00111101110110010110010100101100";
        ram[58] = "0b00111011101001100011101011010010";
        ram[59] = "0b10111110010001101010110100101110";
        ram[60] = "0b00111101100010001111001001001101";
        ram[61] = "0b00111101100001110100001111110111";
        ram[62] = "0b00111110000000000001001100100011";
        ram[63] = "0b10111101111000101001111110011101";
        ram[64] = "0b10111100100011110001110100001001";
        ram[65] = "0b10111011101100000011111010001100";
        ram[66] = "0b00111100110011001111100100001101";
        ram[67] = "0b10111101100100100101011011001010";
        ram[68] = "0b10111101000110000101010101111100";
        ram[69] = "0b00111100111000011000000101011010";
        ram[70] = "0b10111101011011000111010111100000";
        ram[71] = "0b10111110001101000010101000100100";
        ram[72] = "0b00111100100101100101110001100011";
        ram[73] = "0b00111110000001011000100111110000";
        ram[74] = "0b00111101111001001011111011000110";
        ram[75] = "0b10111101010101110001111101101100";
        ram[76] = "0b00111101110000111110101010100110";
        ram[77] = "0b10111101000010101000001110010111";
        ram[78] = "0b10111100111110100100011100100100";
        ram[79] = "0b10111101011010100000110110100000";
        ram[80] = "0b10111101000000010011000100111110";
        ram[81] = "0b00111010101011010000100011100010";
        ram[82] = "0b10111101101001111011111100000100";
        ram[83] = "0b00111101100110011111001001101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_95) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_95_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_95) {
meminst = new inference_mult_1_120_120_84_s_W4_95_ram("inference_mult_1_120_120_84_s_W4_95_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_95() {
    delete meminst;
}


};//endmodule
#endif
