// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_10_H__
#define __inference_conv2d_f3_3_1_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_10_ram) {
        ram[0] = "0b00111101100010110110011011010001";
        ram[1] = "0b10111011011101111011010010101101";
        ram[2] = "0b10111101100111101100110010001111";
        ram[3] = "0b00111100000000011010100111000100";
        ram[4] = "0b00111101011011101111000011100100";
        ram[5] = "0b10111101010011101010011101001000";
        ram[6] = "0b00111101001001111011111000111010";
        ram[7] = "0b10111101101110101011010000001001";
        ram[8] = "0b00111101000111110010011011110010";
        ram[9] = "0b00111100101111010010011001100111";
        ram[10] = "0b00111101101110101010011101100110";
        ram[11] = "0b00111101100110010011110111001100";
        ram[12] = "0b00111100000100110100100111101010";
        ram[13] = "0b00111011010000001001000100101010";
        ram[14] = "0b00111101110101110000100010101011";
        ram[15] = "0b10111010100001110110101001101101";
        ram[16] = "0b10111101011011011010000011010010";
        ram[17] = "0b00111100010101101001100011111110";
        ram[18] = "0b10111101101110010111010001101110";
        ram[19] = "0b00111101101010001111110100110100";
        ram[20] = "0b00111011111000000000100111000000";
        ram[21] = "0b10111101110001001100011001010011";
        ram[22] = "0b00111101101110110011010001100001";
        ram[23] = "0b10111101011111100110110101011001";
        ram[24] = "0b00111110000001110100100010100001";
        ram[25] = "0b00111110000101001001011010101011";
        ram[26] = "0b10111100110110110111000101000000";
        ram[27] = "0b00111101011000010110100000010101";
        ram[28] = "0b00111101010111100101111011100000";
        ram[29] = "0b00111101100100000001100000101011";
        ram[30] = "0b10111101010010111100100111101000";
        ram[31] = "0b00111101011000100110110011000010";
        ram[32] = "0b00111011100111111001111010000001";
        ram[33] = "0b00111100100111111111001001111001";
        ram[34] = "0b10111110001100110100110000011011";
        ram[35] = "0b10111101011110001110111101010000";
        ram[36] = "0b00111100111010000011000000110101";
        ram[37] = "0b10111110001111000010110000011011";
        ram[38] = "0b00111101010100000110111101001110";
        ram[39] = "0b10111011110101100100000000101001";
        ram[40] = "0b00111100110110001110001001001111";
        ram[41] = "0b10111110010101101101001100110001";
        ram[42] = "0b00111101111110001010011001010101";
        ram[43] = "0b10111101000010010100110100110110";
        ram[44] = "0b10111101011110110011001101111101";
        ram[45] = "0b00111101000111010111010111111101";
        ram[46] = "0b00111101111101000101110110000101";
        ram[47] = "0b00111011100100110001101001100100";
        ram[48] = "0b10111100111111100111100110111000";
        ram[49] = "0b00111101000111111110101111111001";
        ram[50] = "0b00111100111010111101011101010100";
        ram[51] = "0b00111100010101100101001000011100";
        ram[52] = "0b00111101110001000100010111111011";
        ram[53] = "0b00111110001000000001110100011001";
        ram[54] = "0b00111101101110011010000111000111";
        ram[55] = "0b00111010101001000001000000010101";
        ram[56] = "0b10111101000110001110110010010110";
        ram[57] = "0b10111110000000110101010101000111";
        ram[58] = "0b00111101101010010011111000101010";
        ram[59] = "0b00111101010010001010000101110100";
        ram[60] = "0b00111101110110010100001010010001";
        ram[61] = "0b00111101101111111010011111011110";
        ram[62] = "0b10111101100001101100010000001010";
        ram[63] = "0b00111101011000111110101010100110";
        ram[64] = "0b00111101101000110010110111001101";
        ram[65] = "0b00111100110101101010000011110111";
        ram[66] = "0b00111101101011101001100001111111";
        ram[67] = "0b10111100100011010101010011101000";
        ram[68] = "0b00111110000000001011101101101111";
        ram[69] = "0b10111101100001111010011101101100";
        ram[70] = "0b10111110001000111111010111111001";
        ram[71] = "0b00111101111000111011000111010001";
        ram[72] = "0b00111101000110101010010011000111";
        ram[73] = "0b00111101001010111110011001010011";
        ram[74] = "0b00111101111011100101011100010001";
        ram[75] = "0b10111101011101011000011110000110";
        ram[76] = "0b00111110000101001100101111100010";
        ram[77] = "0b10111011001110000010001010011100";
        ram[78] = "0b10111101100110111111111100010010";
        ram[79] = "0b00111101101010110011100011010110";
        ram[80] = "0b10111101000101110011011010110011";
        ram[81] = "0b00111100011010001111111100110010";
        ram[82] = "0b10111101011010011000000010010111";
        ram[83] = "0b00111101000111000011000010011101";
        ram[84] = "0b10111101111001011101010100101100";
        ram[85] = "0b00111101000010111010000000010010";
        ram[86] = "0b10111101100000100010101001100010";
        ram[87] = "0b00111101010011111111001010100001";
        ram[88] = "0b10111110010100101111001010110110";
        ram[89] = "0b00111101110101111111111010001111";
        ram[90] = "0b00111101101011100011010100010111";
        ram[91] = "0b00111101111000001110101101101000";
        ram[92] = "0b10111110001001011011100011011100";
        ram[93] = "0b10111101100100001101100111110010";
        ram[94] = "0b00111101001010000100010011011101";
        ram[95] = "0b10111101100111011010000011000101";
        ram[96] = "0b10111101011111010111110100000011";
        ram[97] = "0b00111101111100001100100010001010";
        ram[98] = "0b10111101001100101000010001100111";
        ram[99] = "0b10111110000011101010001001001101";
        ram[100] = "0b10111101011001101100111111111110";
        ram[101] = "0b10111110001101011010110100010000";
        ram[102] = "0b00111101010101100000110101010011";
        ram[103] = "0b00111110000010011010111011010101";
        ram[104] = "0b00111101000101111001100000011101";
        ram[105] = "0b00111101001011100001110011111001";
        ram[106] = "0b10111101100001111000001011101110";
        ram[107] = "0b00111101011100000001110110011111";
        ram[108] = "0b10111101100011111001000110110001";
        ram[109] = "0b10111101100010010100000011100100";
        ram[110] = "0b00111101101111100011011000001001";
        ram[111] = "0b00111101001001000101100111001100";
        ram[112] = "0b10111101110111110111000011011111";
        ram[113] = "0b00111100110001111110100001100001";
        ram[114] = "0b00111101111000110010101000000110";
        ram[115] = "0b00111101100100010001111010100001";
        ram[116] = "0b00111101110011001100101100010010";
        ram[117] = "0b10111101000111010111011010000011";
        ram[118] = "0b00111110001011000101000101010101";
        ram[119] = "0b10111100100011110011011100001010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_10) {
meminst = new inference_conv2d_f3_3_1_10_ram("inference_conv2d_f3_3_1_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_10() {
    delete meminst;
}


};//endmodule
#endif
