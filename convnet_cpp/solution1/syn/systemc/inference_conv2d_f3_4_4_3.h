// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_3_H__
#define __inference_conv2d_f3_4_4_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_3_ram) {
        ram[0] = "0b10111011101101100101111000100000";
        ram[1] = "0b10111101101111001111011100101010";
        ram[2] = "0b00111101110101011111110000111011";
        ram[3] = "0b10111101101011110010011000101001";
        ram[4] = "0b00111010100110001100101100010011";
        ram[5] = "0b00111100100000110101101110011111";
        ram[6] = "0b10111101100110111110011110000111";
        ram[7] = "0b00111100101100010000010100100110";
        ram[8] = "0b00111101001101110000110000111011";
        ram[9] = "0b10111100000111110110100000111011";
        ram[10] = "0b10111101010110100001010010110100";
        ram[11] = "0b00111101100101001110110111110110";
        ram[12] = "0b00111100110101010110101010010110";
        ram[13] = "0b00111101001100001011000001010001";
        ram[14] = "0b10111100100110110101101001100100";
        ram[15] = "0b00111101000100100000000111110110";
        ram[16] = "0b10111100101001100110110000010000";
        ram[17] = "0b00111110000100011110100101101100";
        ram[18] = "0b10111101111111010100000001101000";
        ram[19] = "0b00111110000111101111101111110100";
        ram[20] = "0b10111100011101011101001000010100";
        ram[21] = "0b00111101001000101100110100111010";
        ram[22] = "0b00111101110111100011110010010111";
        ram[23] = "0b00111101010011010110100110101011";
        ram[24] = "0b10111101110111010101110010111000";
        ram[25] = "0b00111101101010111100110111010111";
        ram[26] = "0b00111101100100011101010000111110";
        ram[27] = "0b10111101110010111101001010101010";
        ram[28] = "0b00111110001100010000110011110110";
        ram[29] = "0b00111101110001110010111000001101";
        ram[30] = "0b10111101000011011110101011011010";
        ram[31] = "0b10111101001001101010111011011011";
        ram[32] = "0b00111110010001011101110101001100";
        ram[33] = "0b10111101001011011000010111100000";
        ram[34] = "0b10111100110010000001111111110101";
        ram[35] = "0b00111110010000111000111000101010";
        ram[36] = "0b10111110001000110110111010110101";
        ram[37] = "0b10111100000001111001110100000010";
        ram[38] = "0b10111101101000101000001101011011";
        ram[39] = "0b10111100100010101100000000011000";
        ram[40] = "0b10111101101011001001101011111110";
        ram[41] = "0b10111110000001001101000100100000";
        ram[42] = "0b00111011110000011011111111101001";
        ram[43] = "0b00111110000011110101100110001010";
        ram[44] = "0b10111110000100100111011111000100";
        ram[45] = "0b10111101010101100010101011001010";
        ram[46] = "0b00111110001101010100000000000011";
        ram[47] = "0b10111101100010110000100001001001";
        ram[48] = "0b00111101111010011001101111110110";
        ram[49] = "0b10111011110001001110000110011100";
        ram[50] = "0b10111101101111111110011100100110";
        ram[51] = "0b10111101011100110111111000101100";
        ram[52] = "0b00111100100100110101010001110001";
        ram[53] = "0b10111100111111001111111011000100";
        ram[54] = "0b00111110000111001111101011110000";
        ram[55] = "0b10111110000111000111111000101000";
        ram[56] = "0b10111101101011010101101110011110";
        ram[57] = "0b10111110000010011110010010010011";
        ram[58] = "0b00111101101100101010000110001110";
        ram[59] = "0b00111101100000010101001010001000";
        ram[60] = "0b10111101010100010011110110101011";
        ram[61] = "0b00111110000101101011101010001100";
        ram[62] = "0b00111101101001101011110000111010";
        ram[63] = "0b00111100100101001011100111001011";
        ram[64] = "0b00111110000000001010101001100101";
        ram[65] = "0b00111110001011110111110001100111";
        ram[66] = "0b00111100001100100010111110010011";
        ram[67] = "0b10111100111011101101110101100011";
        ram[68] = "0b10111101101100001100101001111011";
        ram[69] = "0b10111110001000111001100001100011";
        ram[70] = "0b10111101110010001111100100011110";
        ram[71] = "0b10111101001010010101000110011110";
        ram[72] = "0b10111100010001100000110001010100";
        ram[73] = "0b00111110001101011000110011010010";
        ram[74] = "0b00111101100100000100101000111101";
        ram[75] = "0b00111101000000101100000000000100";
        ram[76] = "0b00111101011111011000001100110011";
        ram[77] = "0b10111100111101001011011010001011";
        ram[78] = "0b10111101000100000101010100110010";
        ram[79] = "0b00111100110011010000101100010110";
        ram[80] = "0b10111101010010011111100011000010";
        ram[81] = "0b10111101000111101010000010111010";
        ram[82] = "0b10111101110010101111111110001000";
        ram[83] = "0b00111110001000011111001000010011";
        ram[84] = "0b10111101101000001100001001000000";
        ram[85] = "0b00111101110000010111010100010101";
        ram[86] = "0b00111011010101000001101100100000";
        ram[87] = "0b10111101111110110101011111000101";
        ram[88] = "0b00111101111011000111011111011110";
        ram[89] = "0b00111101101000001101100101010001";
        ram[90] = "0b00111101101111101110111110100010";
        ram[91] = "0b10111110001010101111101100111011";
        ram[92] = "0b10111100111011010110110101010110";
        ram[93] = "0b00111101100001010110001010000011";
        ram[94] = "0b10111101101010001111100001101111";
        ram[95] = "0b10111101101001010110000110011111";
        ram[96] = "0b10111101000001000101100100101011";
        ram[97] = "0b00111100110111011011010101010010";
        ram[98] = "0b00111100111101101110011010110001";
        ram[99] = "0b10111101001110011100111100010100";
        ram[100] = "0b00111101011101101001111111101010";
        ram[101] = "0b00111101000110011010111000001100";
        ram[102] = "0b10111110000010001010101010000110";
        ram[103] = "0b00111101000010010111010000011101";
        ram[104] = "0b10111101100011000110000011100111";
        ram[105] = "0b00111101011001001101101111010010";
        ram[106] = "0b00111011110101111000000110011100";
        ram[107] = "0b10111101011010101101101100100101";
        ram[108] = "0b00111101100010100111110001110110";
        ram[109] = "0b10111101011011001001111010001111";
        ram[110] = "0b10111100100110010010111111100111";
        ram[111] = "0b00111110000101010111000111010010";
        ram[112] = "0b00111100000000111110101110000111";
        ram[113] = "0b00111101101101101010000011000001";
        ram[114] = "0b00111011011111101000111100111101";
        ram[115] = "0b00111101100001101110111101011000";
        ram[116] = "0b10111101001101111011000000000101";
        ram[117] = "0b00111101101110110101111000101010";
        ram[118] = "0b10111100000110010110001011101000";
        ram[119] = "0b00111101001010010110000010000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_3) {
meminst = new inference_conv2d_f3_4_4_3_ram("inference_conv2d_f3_4_4_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_3() {
    delete meminst;
}


};//endmodule
#endif
