// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_50_H__
#define __inference_mult_1_120_120_84_s_W4_50_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_50_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_50_ram) {
        ram[0] = "0b00111110000010110011000100111100";
        ram[1] = "0b00111100111100011001001011101010";
        ram[2] = "0b10111101101101000000010110011001";
        ram[3] = "0b00111100010110101111010111110000";
        ram[4] = "0b00111100001001001011111010010001";
        ram[5] = "0b00111101001101001111100100000110";
        ram[6] = "0b10111100111010110110010111011111";
        ram[7] = "0b10111101100010100100101101010101";
        ram[8] = "0b10111010000010010101001001001111";
        ram[9] = "0b00111101111100010111110001011111";
        ram[10] = "0b10111100010100011111000011111001";
        ram[11] = "0b10111101111101000010001111011001";
        ram[12] = "0b00111101010100100001000000000011";
        ram[13] = "0b00111110010010010111000001110010";
        ram[14] = "0b00111101011000010001100001100100";
        ram[15] = "0b00111110000011000011110000011001";
        ram[16] = "0b00111100100001101101000000110100";
        ram[17] = "0b10111101100110111100111101110111";
        ram[18] = "0b10111101110100101010011010110001";
        ram[19] = "0b00111101111000101000101010100100";
        ram[20] = "0b00111101101101110101110101010111";
        ram[21] = "0b10111011101111101111011111100010";
        ram[22] = "0b00111110000100010101111101000110";
        ram[23] = "0b00111110010111010110001010111111";
        ram[24] = "0b10111100111010101101111000110000";
        ram[25] = "0b10111101100011011010101011111110";
        ram[26] = "0b00111101000111111111110000000100";
        ram[27] = "0b10111110000111000001101000000101";
        ram[28] = "0b00111110000000100011101001101101";
        ram[29] = "0b00111100000001111100100101000010";
        ram[30] = "0b00111101000000011010001010010111";
        ram[31] = "0b00111110001101111101111000001101";
        ram[32] = "0b10111101101010101101111011000011";
        ram[33] = "0b00111011111101000110110010001110";
        ram[34] = "0b10111100111010001000000111111111";
        ram[35] = "0b10111100110001000000100001101110";
        ram[36] = "0b10111101011010110100001000011110";
        ram[37] = "0b00111101110100010110001010101110";
        ram[38] = "0b00111100110000110111110010001100";
        ram[39] = "0b10111110001000101001100110010101";
        ram[40] = "0b10111101111011001110100010010110";
        ram[41] = "0b10111101101011110000001000001001";
        ram[42] = "0b10111101001100111000011011100000";
        ram[43] = "0b10111101010111101110101111001110";
        ram[44] = "0b10111110011111110001100010000111";
        ram[45] = "0b00111101010000111010010110100111";
        ram[46] = "0b10111101101010010000111100010101";
        ram[47] = "0b10111100111010011001011011010010";
        ram[48] = "0b00111100001110111101101010100010";
        ram[49] = "0b00111101111000011000011110100101";
        ram[50] = "0b10111110000000000010000000111110";
        ram[51] = "0b10111101100111011001111010011111";
        ram[52] = "0b10111101101111010110101010000001";
        ram[53] = "0b00111101010011111100110110111001";
        ram[54] = "0b00111110000000000011111111110111";
        ram[55] = "0b00111100100011110101110101101011";
        ram[56] = "0b00111101101110000000110110000000";
        ram[57] = "0b00111101110010000001111001101111";
        ram[58] = "0b00111011101100101101111101100110";
        ram[59] = "0b10111110000110110100110111001111";
        ram[60] = "0b10111110000001010111111010101010";
        ram[61] = "0b10111100001000110011101100011001";
        ram[62] = "0b00111101111100111010000101001101";
        ram[63] = "0b10111101111101000100011110000000";
        ram[64] = "0b00111011001011001111000011100100";
        ram[65] = "0b00111100010001100101010001111000";
        ram[66] = "0b10111100100000011111011110000111";
        ram[67] = "0b10111110010000111011100111110001";
        ram[68] = "0b10111101111011001100111101101100";
        ram[69] = "0b10111101001111011111010011000011";
        ram[70] = "0b00111101110011111011001110110111";
        ram[71] = "0b00111101111010010011010100110011";
        ram[72] = "0b00111101101010001011010101101110";
        ram[73] = "0b00111101111111100100001101100111";
        ram[74] = "0b00111010110001000110011001001100";
        ram[75] = "0b10111101110001000010001010010111";
        ram[76] = "0b10111110001001110111111100101000";
        ram[77] = "0b10111101000000110111111100010001";
        ram[78] = "0b10111110000101110000010010111100";
        ram[79] = "0b00111110001001011001110011010000";
        ram[80] = "0b10111101101101001111110101101101";
        ram[81] = "0b10111101101000001000010100101011";
        ram[82] = "0b10111101111110101010100110110101";
        ram[83] = "0b00111100010010001111111011100010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_50) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_50_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_50) {
meminst = new inference_mult_1_120_120_84_s_W4_50_ram("inference_mult_1_120_120_84_s_W4_50_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_50() {
    delete meminst;
}


};//endmodule
#endif
