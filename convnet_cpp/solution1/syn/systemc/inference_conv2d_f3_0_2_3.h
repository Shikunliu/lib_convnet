// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_3_H__
#define __inference_conv2d_f3_0_2_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_3_ram) {
        ram[0] = "0b10111110001111001010111111110111";
        ram[1] = "0b00111101001011001001001010110101";
        ram[2] = "0b10111101001001101010000001100011";
        ram[3] = "0b10111110000100101111000011100001";
        ram[4] = "0b00111101011101000001111110100111";
        ram[5] = "0b10111101110110011010010010011100";
        ram[6] = "0b10111100110000011111010011001101";
        ram[7] = "0b10111101001111101111001101000000";
        ram[8] = "0b00111101100111100111011011100100";
        ram[9] = "0b00111110000101010000110010100010";
        ram[10] = "0b10111101110001111101010110101010";
        ram[11] = "0b10111100101011101010011010100111";
        ram[12] = "0b00111110010000011010011010010011";
        ram[13] = "0b10111101000101111001011000011111";
        ram[14] = "0b00111101110100000011001000010010";
        ram[15] = "0b00111101001001011100001110101001";
        ram[16] = "0b00111110001001101100010011000110";
        ram[17] = "0b00111101101001010111100111110010";
        ram[18] = "0b00111110010001100011100101010000";
        ram[19] = "0b10111101100001001000100010010000";
        ram[20] = "0b00111110001001001011010101010111";
        ram[21] = "0b00111100110011001100001001010000";
        ram[22] = "0b10111101111010011101101111101100";
        ram[23] = "0b10111101111001010110100100101011";
        ram[24] = "0b00111101110001000001001110001011";
        ram[25] = "0b00111110000010111100101101100000";
        ram[26] = "0b00111101000001101001000101100100";
        ram[27] = "0b10111101001011000110110111001101";
        ram[28] = "0b00111101010111100000100011001010";
        ram[29] = "0b00111101101111100100101100000010";
        ram[30] = "0b10111110001110000010110110111110";
        ram[31] = "0b10111011010111001000000010011111";
        ram[32] = "0b10111101100101010000001010011110";
        ram[33] = "0b10111101100010100000100010110010";
        ram[34] = "0b10111101110110000111111001111100";
        ram[35] = "0b00111101110111111110111010110011";
        ram[36] = "0b00111100100111100110111010000000";
        ram[37] = "0b10111101010101101110101101001111";
        ram[38] = "0b00111101011100000100010110010011";
        ram[39] = "0b10111110000010000111011011100010";
        ram[40] = "0b10111101010100100010001011111101";
        ram[41] = "0b00111101011000000001010101001001";
        ram[42] = "0b10111101010100100011010111000010";
        ram[43] = "0b00111101100001100111110010010100";
        ram[44] = "0b00111110000010000100001001110100";
        ram[45] = "0b00111100101011110111101011100010";
        ram[46] = "0b10111101110110011100010100011110";
        ram[47] = "0b10111101110000101001100110010101";
        ram[48] = "0b00111100010000000110000110000100";
        ram[49] = "0b10111100110011110101011000010100";
        ram[50] = "0b00111101011110001110010001101000";
        ram[51] = "0b00111011101001000100100111100001";
        ram[52] = "0b00111101101100110101111010110111";
        ram[53] = "0b00111101010110100000000100110011";
        ram[54] = "0b10111101011001010010101000001011";
        ram[55] = "0b10111110011011100101000100001001";
        ram[56] = "0b10111101100000011001111011010001";
        ram[57] = "0b10111011010111110000000101011000";
        ram[58] = "0b10111110010010011100100000000000";
        ram[59] = "0b00111101011000000011111111110111";
        ram[60] = "0b00111101101110110000011111000011";
        ram[61] = "0b00111100000011111100000111110101";
        ram[62] = "0b10111100000001101100101011001010";
        ram[63] = "0b00111101101001101101011000100000";
        ram[64] = "0b00111101110000011100110010111111";
        ram[65] = "0b00111100110000001101100101111010";
        ram[66] = "0b00111101001011000011111101110100";
        ram[67] = "0b00111110000010010011011000111111";
        ram[68] = "0b10111100100000111100010100011100";
        ram[69] = "0b00111101000011000110110110010111";
        ram[70] = "0b10111110000001011011110110010100";
        ram[71] = "0b00111100000111111111111110001111";
        ram[72] = "0b00111101010001001000100010010000";
        ram[73] = "0b00111101100011100100001000100101";
        ram[74] = "0b00111101101100111111000101011100";
        ram[75] = "0b00111110000001011100010000100010";
        ram[76] = "0b00111100110010001011111001001010";
        ram[77] = "0b10111100101101110100111110001101";
        ram[78] = "0b00111101011101100101101101110001";
        ram[79] = "0b10111110001100001001101101110100";
        ram[80] = "0b00111101100110110010010101100011";
        ram[81] = "0b10111110001011000101111100111001";
        ram[82] = "0b00111110010000000100010000101000";
        ram[83] = "0b10111100111000101010001100101110";
        ram[84] = "0b00111011010011100011000001111010";
        ram[85] = "0b10111101010011000011011110110001";
        ram[86] = "0b10111110000001000110110001110110";
        ram[87] = "0b00111110010011001100001001010000";
        ram[88] = "0b00111011011001100101110101101101";
        ram[89] = "0b00111100110000110101110001000000";
        ram[90] = "0b00111100010001010011101000110001";
        ram[91] = "0b10111011000001001001010111111100";
        ram[92] = "0b10111101101111110011011001011100";
        ram[93] = "0b10111101101100111011110101011010";
        ram[94] = "0b10111101000010110100001001010011";
        ram[95] = "0b10111101100100010000011110101010";
        ram[96] = "0b00111101100011000010100001110000";
        ram[97] = "0b10111100100111010101001101100010";
        ram[98] = "0b00111101011001010010101000001011";
        ram[99] = "0b00111101001110001010001111010000";
        ram[100] = "0b00111101100000101000100110100101";
        ram[101] = "0b10111101000001111010101010111001";
        ram[102] = "0b00111110000010100011001001101110";
        ram[103] = "0b00111011101010010110110110100010";
        ram[104] = "0b10111110010010001011100011110001";
        ram[105] = "0b00111101101111011100011110111001";
        ram[106] = "0b00111110001111101001011011000100";
        ram[107] = "0b10111101100100101001000000100101";
        ram[108] = "0b00111101101000010111010010001111";
        ram[109] = "0b00111110001011101010100010010111";
        ram[110] = "0b10111110000110100100000110100010";
        ram[111] = "0b00111101111110010100010010101010";
        ram[112] = "0b10111101000000001011001110000100";
        ram[113] = "0b10111101110110001000101110010111";
        ram[114] = "0b10111101100010001010011100000011";
        ram[115] = "0b00111101001010110110000001101011";
        ram[116] = "0b00111011010101001010010101011110";
        ram[117] = "0b00111101010110010111100110011110";
        ram[118] = "0b00111101110001110110010001101011";
        ram[119] = "0b10111110001011100010011000001011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_3) {
meminst = new inference_conv2d_f3_0_2_3_ram("inference_conv2d_f3_0_2_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_3() {
    delete meminst;
}


};//endmodule
#endif
