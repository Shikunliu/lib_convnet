// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_4_H__
#define __inference_conv2d_f3_2_4_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_4_ram) {
        ram[0] = "0b10111101100111110010110111000011";
        ram[1] = "0b00111110000010010001010001101110";
        ram[2] = "0b10111101111011101000011111010011";
        ram[3] = "0b00111101100011101011000101001011";
        ram[4] = "0b10111101101000010111010111010001";
        ram[5] = "0b10111101011111011001111001000001";
        ram[6] = "0b10111100011010110101011010010000";
        ram[7] = "0b10111101110111000111011010001110";
        ram[8] = "0b10111010001101101001111010010110";
        ram[9] = "0b00111101000000110100101010100011";
        ram[10] = "0b00111101101101110011101110101110";
        ram[11] = "0b10111101011110110101011111100000";
        ram[12] = "0b10111110001111101000001010010101";
        ram[13] = "0b10111101100101011110011011111111";
        ram[14] = "0b00111101100111011111000010111001";
        ram[15] = "0b00111101001000010101001010110001";
        ram[16] = "0b10111101010001011011111100100111";
        ram[17] = "0b00111100100110110100010010010101";
        ram[18] = "0b10111101001010100001100111100101";
        ram[19] = "0b00111100101010101100010100000101";
        ram[20] = "0b00111100101111001101010000110001";
        ram[21] = "0b00111001110010001001001001111000";
        ram[22] = "0b10111110010001001110011101101000";
        ram[23] = "0b10111110001101000100001111010100";
        ram[24] = "0b10111100111111010011001110011101";
        ram[25] = "0b00111110000000110010110100101100";
        ram[26] = "0b10111101111010001100000011001111";
        ram[27] = "0b00111110000000111011001101100011";
        ram[28] = "0b00111110010011001101011100000110";
        ram[29] = "0b00111101101011010111110101101111";
        ram[30] = "0b10111101000011111100110111101110";
        ram[31] = "0b10111100101100000101010100110010";
        ram[32] = "0b10111101010010111111011000001101";
        ram[33] = "0b00111101000011101101100010101011";
        ram[34] = "0b00111100110010111110000010101001";
        ram[35] = "0b00111101101111010111110100101100";
        ram[36] = "0b00111101011100111010101111111111";
        ram[37] = "0b00111011000001001110010010101100";
        ram[38] = "0b10111001101110100111101010010000";
        ram[39] = "0b10111100101010011010011000100001";
        ram[40] = "0b10111110000011100000010000111010";
        ram[41] = "0b00111101111110010010001010010110";
        ram[42] = "0b10111101100100011101000111010100";
        ram[43] = "0b10111100001100111111010111010001";
        ram[44] = "0b10111101110110101110010011110011";
        ram[45] = "0b00111100111101010010100101000010";
        ram[46] = "0b10111101100111101011110010000100";
        ram[47] = "0b10111101101011101011100100101001";
        ram[48] = "0b00111101110001010110000101000001";
        ram[49] = "0b00111101010100001110010110010110";
        ram[50] = "0b00111101011110000010100010011011";
        ram[51] = "0b10111101100111100100010101011000";
        ram[52] = "0b10111101100110001000110100001111";
        ram[53] = "0b00111110000001011000010100111000";
        ram[54] = "0b10111110000010111110111111010000";
        ram[55] = "0b00111101000011111011000100011000";
        ram[56] = "0b10111110001100001000100101011101";
        ram[57] = "0b10111101111000101101100101001001";
        ram[58] = "0b10111100000100110010000100000101";
        ram[59] = "0b00111010010100011101011000011000";
        ram[60] = "0b10111101100100010000110110111111";
        ram[61] = "0b00111101001110010100001010101100";
        ram[62] = "0b00111101100100000100110001111110";
        ram[63] = "0b00111101100111011011011011001010";
        ram[64] = "0b10111101010010100011001100001111";
        ram[65] = "0b10111101100110101110000011001111";
        ram[66] = "0b10111101011011000101010001101100";
        ram[67] = "0b00111101010001000100110111110011";
        ram[68] = "0b00111101101011110101001101101000";
        ram[69] = "0b00111101110100011101010110000000";
        ram[70] = "0b00111101111000001110010000010001";
        ram[71] = "0b00111101101001001010110010100011";
        ram[72] = "0b10111110001001111000100011011011";
        ram[73] = "0b00111101001100110001110010101000";
        ram[74] = "0b10111101010101110011111010101011";
        ram[75] = "0b00111110001100001100101011100110";
        ram[76] = "0b00111101100101110001010001110111";
        ram[77] = "0b00111101000010001111001011010011";
        ram[78] = "0b10111101001100111110010111100001";
        ram[79] = "0b10111101001110011011111101011001";
        ram[80] = "0b00111101111110001100101110001110";
        ram[81] = "0b00111010111110110111110110001111";
        ram[82] = "0b00111100110010111101111110011101";
        ram[83] = "0b10111101111010000000110001110100";
        ram[84] = "0b00111101010101000111110101001011";
        ram[85] = "0b10111101000101010110010001001011";
        ram[86] = "0b00111101101100011101101010110001";
        ram[87] = "0b10111011101000100111110111000100";
        ram[88] = "0b00111101001001101000101101101010";
        ram[89] = "0b00111101100111000101110011011101";
        ram[90] = "0b00111100011000000001101000011100";
        ram[91] = "0b00111101110001000011101001001010";
        ram[92] = "0b10111100000011011100100010001011";
        ram[93] = "0b10111101010100100011010100100001";
        ram[94] = "0b10111101010110011110001000001110";
        ram[95] = "0b10111100010001100011000100111101";
        ram[96] = "0b00111101100011011010101111100010";
        ram[97] = "0b10111101000101011001111011101001";
        ram[98] = "0b00111110001010010100010011101101";
        ram[99] = "0b00111100111001010110000111101111";
        ram[100] = "0b10111011011101101001110110000001";
        ram[101] = "0b10111101110110111110010001000111";
        ram[102] = "0b00111101001011001111111111011110";
        ram[103] = "0b00111101000001010001110011110000";
        ram[104] = "0b10111110001010011000000101111100";
        ram[105] = "0b00111101111100110101001000100010";
        ram[106] = "0b00111100000110000010000001001000";
        ram[107] = "0b00111101111000011111000100000110";
        ram[108] = "0b10111101000011100010001010100011";
        ram[109] = "0b10111100001001011100000000011001";
        ram[110] = "0b00111101111001011000000101001001";
        ram[111] = "0b00111110000111110010101110101010";
        ram[112] = "0b00111110000101111101010110101010";
        ram[113] = "0b00111101101111100011100110110100";
        ram[114] = "0b10111100011101011111010001111001";
        ram[115] = "0b00111110000111010100101100100111";
        ram[116] = "0b00111011100000100101100110110111";
        ram[117] = "0b00110111111101101000100010011101";
        ram[118] = "0b10111110011011110110110101110110";
        ram[119] = "0b00111110000010111110100011111111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_4) {
meminst = new inference_conv2d_f3_2_4_4_ram("inference_conv2d_f3_2_4_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_4() {
    delete meminst;
}


};//endmodule
#endif
