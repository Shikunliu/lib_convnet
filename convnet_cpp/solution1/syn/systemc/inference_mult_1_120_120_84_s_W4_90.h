// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_90_H__
#define __inference_mult_1_120_120_84_s_W4_90_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_90_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_90_ram) {
        ram[0] = "0b10111101110010001110100010110101";
        ram[1] = "0b00111101100010010100111110010010";
        ram[2] = "0b00111101100000010001011111101011";
        ram[3] = "0b10111101100111000100101110101011";
        ram[4] = "0b00111100101110000101011010111110";
        ram[5] = "0b10111110010001000101000001101010";
        ram[6] = "0b00111110000101010001111011111011";
        ram[7] = "0b10111110001111110011101010011011";
        ram[8] = "0b10111101110111100100001001011011";
        ram[9] = "0b10111101100100001111101100111101";
        ram[10] = "0b10111101001110001000011011000101";
        ram[11] = "0b10111101001110100110111110000010";
        ram[12] = "0b10111101010000011110110001001110";
        ram[13] = "0b10111100111101010111011111100111";
        ram[14] = "0b00111101101101000011010000110101";
        ram[15] = "0b00111101100010011110001010100010";
        ram[16] = "0b10111101001110001100010110101111";
        ram[17] = "0b00111100000100100111101111000011";
        ram[18] = "0b10111101011010011101111110110011";
        ram[19] = "0b00111011111101110101001101110100";
        ram[20] = "0b10111101110110000001010100011010";
        ram[21] = "0b00111101011100111101100011000101";
        ram[22] = "0b10111101100111110000100010010111";
        ram[23] = "0b10111101111010010001110000001000";
        ram[24] = "0b10111100100111001101010000010110";
        ram[25] = "0b00111110000010111000001000111101";
        ram[26] = "0b10111101110000111111011111011100";
        ram[27] = "0b10111101111010111101111011000110";
        ram[28] = "0b10111101110110011111001000110100";
        ram[29] = "0b10111101111010111001001111001101";
        ram[30] = "0b00111100111111011011001010110011";
        ram[31] = "0b00111101100101011101001010001101";
        ram[32] = "0b10111101111110110110011101111111";
        ram[33] = "0b00111101001010011111001010010010";
        ram[34] = "0b00111101011010110110111111110000";
        ram[35] = "0b10111011100001010100110110110010";
        ram[36] = "0b10111101001001011100001010000010";
        ram[37] = "0b10111101110000110011110111001010";
        ram[38] = "0b00111100110100010001100010001100";
        ram[39] = "0b00111101101110111000011010100100";
        ram[40] = "0b10111101100101001100110100100100";
        ram[41] = "0b00111110001010000100000010011110";
        ram[42] = "0b00111011101001000100010110011010";
        ram[43] = "0b10111110010001000100000001101100";
        ram[44] = "0b10111011010000101100011010111010";
        ram[45] = "0b00111100101001001100101011110000";
        ram[46] = "0b00111100111101010101011100110000";
        ram[47] = "0b00111100011110010100111111100011";
        ram[48] = "0b00111101100010111110101111000111";
        ram[49] = "0b00111101011111010011111110010001";
        ram[50] = "0b10111110001111001110010011101011";
        ram[51] = "0b00111100100101000001001001110001";
        ram[52] = "0b10111101111110000110110000100010";
        ram[53] = "0b10111101100111010111010010101101";
        ram[54] = "0b00111100101101000011100010110111";
        ram[55] = "0b00111011001101001100001011101011";
        ram[56] = "0b00111110000101110010001110101011";
        ram[57] = "0b00111100101101110111101011110110";
        ram[58] = "0b00111101101001100111100011001101";
        ram[59] = "0b00111011001011100110101010110111";
        ram[60] = "0b00111100010011101011001010000000";
        ram[61] = "0b00111110001010111000010100011111";
        ram[62] = "0b10111101011111100110111001100101";
        ram[63] = "0b00111101101111101111111101000010";
        ram[64] = "0b00111110001000000111100001010011";
        ram[65] = "0b00111101100010011110101001100101";
        ram[66] = "0b10111100100111010110100100110010";
        ram[67] = "0b10111101011011110011101111111000";
        ram[68] = "0b10111101110010000010110011011010";
        ram[69] = "0b00111110000100111000001110101110";
        ram[70] = "0b00111101001110001001001101011010";
        ram[71] = "0b00111100110111000110111100000001";
        ram[72] = "0b00111101010110010111010100110111";
        ram[73] = "0b00111101101111001101100011110111";
        ram[74] = "0b10111101101010111011111000101010";
        ram[75] = "0b10111101100101000110001101111111";
        ram[76] = "0b00111100111000000001010100010100";
        ram[77] = "0b10111101010111000000111101000101";
        ram[78] = "0b10111101101100100011111110111000";
        ram[79] = "0b00111010001100011111100001011000";
        ram[80] = "0b00111110000110000100101001010001";
        ram[81] = "0b00111101011000111011101000110100";
        ram[82] = "0b10111101100110111110111011010001";
        ram[83] = "0b00111101100010101010000110000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_90) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_90_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_90) {
meminst = new inference_mult_1_120_120_84_s_W4_90_ram("inference_mult_1_120_120_84_s_W4_90_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_90() {
    delete meminst;
}


};//endmodule
#endif
