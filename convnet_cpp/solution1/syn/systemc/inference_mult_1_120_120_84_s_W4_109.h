// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_109_H__
#define __inference_mult_1_120_120_84_s_W4_109_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_109_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_109_ram) {
        ram[0] = "0b00111011001110111111111101001010";
        ram[1] = "0b00111101110011000101111101100010";
        ram[2] = "0b00111101100011101101001010010110";
        ram[3] = "0b00111100100000100010000110101110";
        ram[4] = "0b10111010101011101101010110010110";
        ram[5] = "0b00111100001001011111111010010111";
        ram[6] = "0b00111101010011010010100111101010";
        ram[7] = "0b10111101100100011101001000110010";
        ram[8] = "0b00111101100101100111001001000000";
        ram[9] = "0b10111110001110100111110000011000";
        ram[10] = "0b00111101101001011011011010101001";
        ram[11] = "0b00111101000000010011010011101001";
        ram[12] = "0b00111110000000110001000110100101";
        ram[13] = "0b10111101011101011100100010100100";
        ram[14] = "0b10111101100010011000100110110111";
        ram[15] = "0b00111101000011110101101000101011";
        ram[16] = "0b00111101110101110101000110001011";
        ram[17] = "0b00111101101010100001000000100100";
        ram[18] = "0b10111101010111100001100000011001";
        ram[19] = "0b10111101100101101011110010011000";
        ram[20] = "0b10111101101001001000010110101110";
        ram[21] = "0b00111101110101100010001100000111";
        ram[22] = "0b10111110010110000101001001110010";
        ram[23] = "0b10111101010110010011111110000111";
        ram[24] = "0b10111110000011001101010110110111";
        ram[25] = "0b10111101111111110110000010011110";
        ram[26] = "0b10111100011110100111110100001001";
        ram[27] = "0b10111110000011101111110101000100";
        ram[28] = "0b10111101100001011111011101001110";
        ram[29] = "0b10111101010000100101111100111011";
        ram[30] = "0b10111101111011101011100110100001";
        ram[31] = "0b00111101110101101010011010100000";
        ram[32] = "0b00111101000100100110010101000010";
        ram[33] = "0b10111101101101100100011110101101";
        ram[34] = "0b10111100110111001010001010011000";
        ram[35] = "0b10111011101010110100101001110001";
        ram[36] = "0b10111101110001011000011000101001";
        ram[37] = "0b00111101010000011100001100011001";
        ram[38] = "0b00111100011001011110001001001000";
        ram[39] = "0b00111101001011100001010001111011";
        ram[40] = "0b10111101111000110000001111000000";
        ram[41] = "0b10111101100101100010001100100010";
        ram[42] = "0b00111110000010000000000010101000";
        ram[43] = "0b10111100100011100000110001101000";
        ram[44] = "0b00111101011000000110000001000010";
        ram[45] = "0b00111101000110011001010011100010";
        ram[46] = "0b10111001000110100111110011011101";
        ram[47] = "0b10111101110010100010111010101000";
        ram[48] = "0b00111100100110101100010101001000";
        ram[49] = "0b10111110001010011001101000100000";
        ram[50] = "0b00111101000010110100000111001101";
        ram[51] = "0b10111101000001000110111101100110";
        ram[52] = "0b00111101011011000010101011100110";
        ram[53] = "0b10111110001111111110011001001111";
        ram[54] = "0b10111101011010100100011011100001";
        ram[55] = "0b10111101000101111000110111010110";
        ram[56] = "0b10111101111110111001010000010000";
        ram[57] = "0b00111100010110010011001010100001";
        ram[58] = "0b10111101101010001000011110101001";
        ram[59] = "0b00111110000101001011011010100110";
        ram[60] = "0b00111101110001100100100011100010";
        ram[61] = "0b00111100100111010110010111010111";
        ram[62] = "0b10111110000110000100001010110111";
        ram[63] = "0b10111100010111100001111111011011";
        ram[64] = "0b10111100101111100110010111001100";
        ram[65] = "0b00111110000001100001111000001100";
        ram[66] = "0b10111101101001110100001111101001";
        ram[67] = "0b00111101011101101000110101110110";
        ram[68] = "0b00111110000011101010101110111101";
        ram[69] = "0b10111010111110110100011011011110";
        ram[70] = "0b10111101110011011001011100101101";
        ram[71] = "0b00111100000111010010010010110100";
        ram[72] = "0b10111101100101010011011011111111";
        ram[73] = "0b10111100111010011111010010010000";
        ram[74] = "0b10111101110110101011011001001010";
        ram[75] = "0b10111011101100000111100001011000";
        ram[76] = "0b00111011010100001011101001101101";
        ram[77] = "0b00111101101101001111010111100001";
        ram[78] = "0b10111101101010011001001100100111";
        ram[79] = "0b00111101001011000010001100111111";
        ram[80] = "0b10111100001100101010111000111110";
        ram[81] = "0b00111110010110110111000001101001";
        ram[82] = "0b10111101100010101110100001011100";
        ram[83] = "0b00111101101000111011110100010110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_109) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_109_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_109) {
meminst = new inference_mult_1_120_120_84_s_W4_109_ram("inference_mult_1_120_120_84_s_W4_109_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_109() {
    delete meminst;
}


};//endmodule
#endif
