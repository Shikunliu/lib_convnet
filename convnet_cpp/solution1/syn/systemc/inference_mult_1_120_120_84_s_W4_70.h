// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_70_H__
#define __inference_mult_1_120_120_84_s_W4_70_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_70_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_70_ram) {
        ram[0] = "0b00111101110011111011110010100001";
        ram[1] = "0b00111110010010101001110100011111";
        ram[2] = "0b00111101111110110001000011111101";
        ram[3] = "0b00111100010000000011001011110110";
        ram[4] = "0b00111101011101100100100101101000";
        ram[5] = "0b00111101101111101100101110010000";
        ram[6] = "0b00111101110100111010110001001111";
        ram[7] = "0b00111101111000010100111001111111";
        ram[8] = "0b00111101100101101110001010011011";
        ram[9] = "0b00111101011110100011101001011001";
        ram[10] = "0b00111110011010000010010001001111";
        ram[11] = "0b10111110001111001110011100000100";
        ram[12] = "0b00111101001110000000000010001101";
        ram[13] = "0b10111101100100111000111100011100";
        ram[14] = "0b00111110000110110110111100011010";
        ram[15] = "0b00111110000001011100101101111001";
        ram[16] = "0b00111101101000110111111101000110";
        ram[17] = "0b10111110001001001100000000010110";
        ram[18] = "0b00111110011000001010101100101110";
        ram[19] = "0b00111110001011001001100110101111";
        ram[20] = "0b10111010010001000011000100000011";
        ram[21] = "0b00111101100011000010010011000100";
        ram[22] = "0b10111110001011010111111010001001";
        ram[23] = "0b10111101000000100100100000001111";
        ram[24] = "0b10111100100111010000010000011101";
        ram[25] = "0b10111101110111010110110001110010";
        ram[26] = "0b10111110001000111101010000101000";
        ram[27] = "0b10111101010000011000010011101011";
        ram[28] = "0b10111110010111001100100011011110";
        ram[29] = "0b10111100111100100001110100011110";
        ram[30] = "0b10111101100111110101111111100010";
        ram[31] = "0b10111110010100111001111101110111";
        ram[32] = "0b00111101100000101001011011000001";
        ram[33] = "0b10111101001010011001000000110111";
        ram[34] = "0b00111101100110111111100101101000";
        ram[35] = "0b00111101000100101000111100110100";
        ram[36] = "0b00111100110100110000000000100010";
        ram[37] = "0b00111101001010011110101001111111";
        ram[38] = "0b00111110000111100101101011111111";
        ram[39] = "0b00111101100010111111101000010111";
        ram[40] = "0b10111101101111011000101010110010";
        ram[41] = "0b10111110001010100111010110001010";
        ram[42] = "0b10111101101011011111000110101011";
        ram[43] = "0b00111011111000100111101101001010";
        ram[44] = "0b10111110001111110000100011001100";
        ram[45] = "0b00111110001100011011101011000011";
        ram[46] = "0b10111101010101100011010001101111";
        ram[47] = "0b00111100110011101101001100000010";
        ram[48] = "0b00111101010011101100100101110111";
        ram[49] = "0b10111101000111000101101100010101";
        ram[50] = "0b00111110000010001101110110100101";
        ram[51] = "0b00111101010111011110100010011001";
        ram[52] = "0b00111110001011111110001101101101";
        ram[53] = "0b10111110010101001000110010110101";
        ram[54] = "0b00111101000111000111011010101001";
        ram[55] = "0b10111101100000011110001001011000";
        ram[56] = "0b10111110000110000011111011001001";
        ram[57] = "0b10111101110100010011010000000101";
        ram[58] = "0b00111100110010010111001010100101";
        ram[59] = "0b00111101111111110010111101010101";
        ram[60] = "0b10111101101000100101100111100010";
        ram[61] = "0b00111101001101111001011000111010";
        ram[62] = "0b10111100110010010111101100111110";
        ram[63] = "0b00111101110001110010111110111010";
        ram[64] = "0b10111101100000001101100101011111";
        ram[65] = "0b10111101010110111010100010011101";
        ram[66] = "0b00111110001101111010101110111001";
        ram[67] = "0b10111100101011000011001110011010";
        ram[68] = "0b00111101100110110101011101011010";
        ram[69] = "0b00111100101111000010101100101001";
        ram[70] = "0b00111110000011011110110110101111";
        ram[71] = "0b10111101110110110011010000011110";
        ram[72] = "0b00111101111011000100111011111001";
        ram[73] = "0b00111101011000000101010111000110";
        ram[74] = "0b00111110001000101110100001111101";
        ram[75] = "0b10111110001000001100001010000011";
        ram[76] = "0b00111101110001111011001110100011";
        ram[77] = "0b10111100100101001000001110110000";
        ram[78] = "0b00111110010101010101110010010110";
        ram[79] = "0b00111110011101001000000101101111";
        ram[80] = "0b00111101000110110011010101100000";
        ram[81] = "0b10111100110101111010110000100100";
        ram[82] = "0b00111101000110010000001110001100";
        ram[83] = "0b10111101101101100111011101010110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_70) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_70_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_70) {
meminst = new inference_mult_1_120_120_84_s_W4_70_ram("inference_mult_1_120_120_84_s_W4_70_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_70() {
    delete meminst;
}


};//endmodule
#endif
