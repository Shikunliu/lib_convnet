// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_12_H__
#define __inference_conv2d_f3_4_3_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_12_ram) {
        ram[0] = "0b10111101000100111110011000110001";
        ram[1] = "0b00111101100000011000100001100001";
        ram[2] = "0b10111110000000011000111011111100";
        ram[3] = "0b10111101101011000011011001101111";
        ram[4] = "0b00111101110000100001000010001001";
        ram[5] = "0b10111101001111111101010100111000";
        ram[6] = "0b00111101001101100110010111010011";
        ram[7] = "0b10111101001100101010011100000001";
        ram[8] = "0b00111100101000111100100011001000";
        ram[9] = "0b10111101000000000011100111000111";
        ram[10] = "0b10111110001000111101001011011000";
        ram[11] = "0b10111110001101111001010110110011";
        ram[12] = "0b10111101101100001010011001011011";
        ram[13] = "0b10111100100010111111100111010100";
        ram[14] = "0b10111100001110111111011001010000";
        ram[15] = "0b00111101101101101011110111110101";
        ram[16] = "0b10111101000101110111111100101000";
        ram[17] = "0b00111101111001110110011111010011";
        ram[18] = "0b00111101111101010001111011111011";
        ram[19] = "0b00111101110101101011010101001110";
        ram[20] = "0b00111100101110100100101111110110";
        ram[21] = "0b00111100110100100100001111001111";
        ram[22] = "0b00111100010001100110011000010110";
        ram[23] = "0b10111101010000101100110110100101";
        ram[24] = "0b00111101110110010111000000101110";
        ram[25] = "0b10111101111110011010001100001010";
        ram[26] = "0b10111101011110011110100111101100";
        ram[27] = "0b00111011110010001111100010101101";
        ram[28] = "0b00111101011111000001010011101111";
        ram[29] = "0b00111100100111010011100011110110";
        ram[30] = "0b10111100101000110011110011100110";
        ram[31] = "0b00111100000001011000001010010110";
        ram[32] = "0b10111101011010010010010100001101";
        ram[33] = "0b10111101111101111100101010100111";
        ram[34] = "0b10111100110001110011101110010011";
        ram[35] = "0b10111101101100100101010011110100";
        ram[36] = "0b00111101111000100100110111010011";
        ram[37] = "0b00111110000101000101000000100111";
        ram[38] = "0b10111101011000111001000011111111";
        ram[39] = "0b10111101111101000000101010101111";
        ram[40] = "0b10111101010001000101010110110101";
        ram[41] = "0b10111100011001010010101000100110";
        ram[42] = "0b00111101100100011001000011000100";
        ram[43] = "0b00111101000110011010000001010000";
        ram[44] = "0b10111101101000101100100110101001";
        ram[45] = "0b10111101111110000111110111110110";
        ram[46] = "0b10111101101100110001100010000100";
        ram[47] = "0b00111101101010010011010101000000";
        ram[48] = "0b00111101001111110001010100111001";
        ram[49] = "0b00111101101001100001010110101001";
        ram[50] = "0b00111110000011001001000110001110";
        ram[51] = "0b10111101000000011101001001101000";
        ram[52] = "0b10111101010111101111111001111000";
        ram[53] = "0b00111101001010001101110110001010";
        ram[54] = "0b10111101010110100010001001010110";
        ram[55] = "0b00111101111101011011000010111100";
        ram[56] = "0b10111100111111101100001001111110";
        ram[57] = "0b00111101101010100110010010110110";
        ram[58] = "0b10111101001010011101100110000011";
        ram[59] = "0b00111101100011011001110001101011";
        ram[60] = "0b00111101010000000111110011100011";
        ram[61] = "0b00111101101010110001111111010100";
        ram[62] = "0b10111100101110011101100110101011";
        ram[63] = "0b00111110010010011111101100011110";
        ram[64] = "0b10111101101110000111011111111100";
        ram[65] = "0b10111101000101000101010011010001";
        ram[66] = "0b00111101111110011110010010010011";
        ram[67] = "0b00111100101111101000011110010000";
        ram[68] = "0b00111110010011101011111100100011";
        ram[69] = "0b00111101101011010011001110001111";
        ram[70] = "0b10111101100101101110111100100010";
        ram[71] = "0b10111101001100000000110100001110";
        ram[72] = "0b00111101101011010111001100000000";
        ram[73] = "0b10111101101000100101000001100101";
        ram[74] = "0b00111101100011111010100001111111";
        ram[75] = "0b00111101001111100011100100000110";
        ram[76] = "0b00111101000011001111101110010001";
        ram[77] = "0b10111101100010111100110110101110";
        ram[78] = "0b10111101110100000010100110101110";
        ram[79] = "0b00111101001111101100110100110000";
        ram[80] = "0b10111110000001000000001001001011";
        ram[81] = "0b10111101001111111100011101100000";
        ram[82] = "0b10111010111001011101000010101010";
        ram[83] = "0b10111100101001010011001110010110";
        ram[84] = "0b00111110000101010100000111011001";
        ram[85] = "0b10111100110111111101010011100111";
        ram[86] = "0b00111100110000001111100101011010";
        ram[87] = "0b00111101111001101101111011111100";
        ram[88] = "0b00111110000111101100000000101111";
        ram[89] = "0b00111101110001101001000111010000";
        ram[90] = "0b10111101111001001110001101111010";
        ram[91] = "0b00111101001111001010001101010100";
        ram[92] = "0b10111110001001110111110010001001";
        ram[93] = "0b00111101001010101111000110010110";
        ram[94] = "0b10111110000011001010111000100001";
        ram[95] = "0b00111101100010111111111010011001";
        ram[96] = "0b10111101001010110110101100011110";
        ram[97] = "0b10111011101010111001000111010100";
        ram[98] = "0b00111101100001101000110110111001";
        ram[99] = "0b00111101011001001010011101001010";
        ram[100] = "0b00111100111000001001001000010001";
        ram[101] = "0b00111101100000010000000111001011";
        ram[102] = "0b10111100100011101111000100110101";
        ram[103] = "0b10111100101111001000000001001110";
        ram[104] = "0b10111100101100101011111100111010";
        ram[105] = "0b10111101101010010011101001100100";
        ram[106] = "0b10111101111100101110101111100110";
        ram[107] = "0b10111110000100001000000011111010";
        ram[108] = "0b10111101101011001100100011101100";
        ram[109] = "0b10111110000011010111111110010101";
        ram[110] = "0b10111100100000000011110001100110";
        ram[111] = "0b10111110001000100000110111011100";
        ram[112] = "0b00111110000101001001001001111001";
        ram[113] = "0b00111101111110100101101010001010";
        ram[114] = "0b10111100101111101010101011001011";
        ram[115] = "0b00111101010101100101001100101001";
        ram[116] = "0b00111100110110110000000110101110";
        ram[117] = "0b00111110000100111011000010000001";
        ram[118] = "0b10111101001110100010000100010011";
        ram[119] = "0b10111101011100001011001101011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_12) {
meminst = new inference_conv2d_f3_4_3_12_ram("inference_conv2d_f3_4_3_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_12() {
    delete meminst;
}


};//endmodule
#endif
