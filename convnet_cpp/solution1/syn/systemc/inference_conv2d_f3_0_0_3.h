// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_3_H__
#define __inference_conv2d_f3_0_0_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_3_ram) {
        ram[0] = "0b00111010111110001110110100111100";
        ram[1] = "0b00111101101110100100000100000001";
        ram[2] = "0b10111101011110010110101000110100";
        ram[3] = "0b00111101001100010001101000111001";
        ram[4] = "0b00111110001001011101110001000000";
        ram[5] = "0b10111101010110010101111001110110";
        ram[6] = "0b10111110000110101010100001100101";
        ram[7] = "0b00111101101110001000101000010010";
        ram[8] = "0b10111110000101101101010011000011";
        ram[9] = "0b10111110000100111111100011011011";
        ram[10] = "0b00111101110100110000011100101001";
        ram[11] = "0b00111101101001100101011011100010";
        ram[12] = "0b00111101010111000010001000001010";
        ram[13] = "0b10111100101100011100000101000011";
        ram[14] = "0b00111101100110010101000110101011";
        ram[15] = "0b00111101001100011110101001111001";
        ram[16] = "0b10111110001000101001111011010100";
        ram[17] = "0b10111110010110011100111101010111";
        ram[18] = "0b00111101100011010100101011110010";
        ram[19] = "0b00111100100011101001101111011010";
        ram[20] = "0b10111100110011100000100000110110";
        ram[21] = "0b00111110000100111000001110101110";
        ram[22] = "0b00111101001000110011011000010101";
        ram[23] = "0b00111101110110001010001110110101";
        ram[24] = "0b10111101110100110000101011010100";
        ram[25] = "0b10111100001010111101110000100111";
        ram[26] = "0b10111101100001010000011001110010";
        ram[27] = "0b10111100001111000101001000101011";
        ram[28] = "0b10111101110010101101100000101000";
        ram[29] = "0b10111110010000010001100011000010";
        ram[30] = "0b00111110010111100101101010111100";
        ram[31] = "0b00111100011000011100100101001001";
        ram[32] = "0b00111110000111000110111100110111";
        ram[33] = "0b00111101110001100011110010000010";
        ram[34] = "0b00111101010001010001100100101010";
        ram[35] = "0b00111101010011011000100010110100";
        ram[36] = "0b00111110000101000001100110100000";
        ram[37] = "0b10111001011000101100001011000111";
        ram[38] = "0b10111101001001101110010000000101";
        ram[39] = "0b00111101010010111000001100000110";
        ram[40] = "0b00111101100010011111010110011101";
        ram[41] = "0b10111101000000110000010110001001";
        ram[42] = "0b10111100100001000010110111000010";
        ram[43] = "0b10111101001110000011000001111000";
        ram[44] = "0b00111101001111010000101100001000";
        ram[45] = "0b10111101101110000011100000010011";
        ram[46] = "0b00111101111100101001110000110100";
        ram[47] = "0b00111101001100100001011001101000";
        ram[48] = "0b00111110010001000010101111111010";
        ram[49] = "0b10111101110110100110110111110000";
        ram[50] = "0b00111101101110101100010111001111";
        ram[51] = "0b10111100110111111001100010110111";
        ram[52] = "0b10111101011010000011011001001010";
        ram[53] = "0b10111101011101100011011000111000";
        ram[54] = "0b10111101000101100000111000101010";
        ram[55] = "0b10111100000010100000100110011001";
        ram[56] = "0b00111101111110100110101111010111";
        ram[57] = "0b00111101110000000100000100000011";
        ram[58] = "0b00111101010100110001001010010111";
        ram[59] = "0b10111101101101100110010111000101";
        ram[60] = "0b10111101100011101110001100001101";
        ram[61] = "0b10111101001010010010000101111100";
        ram[62] = "0b10111101100110001011000101010111";
        ram[63] = "0b00111110001000011010010110000111";
        ram[64] = "0b00111101011110101110001111100111";
        ram[65] = "0b00111100111001010011000101001000";
        ram[66] = "0b00111101100100111001101111110100";
        ram[67] = "0b00111110010000000100011001000001";
        ram[68] = "0b10111101010100000101011010101010";
        ram[69] = "0b10111110010011010001110000111011";
        ram[70] = "0b10111100101111101011101100100111";
        ram[71] = "0b00111101000010010100101010110010";
        ram[72] = "0b10111101000101010011100111010011";
        ram[73] = "0b10111101011100001100110111111110";
        ram[74] = "0b00111100110111100011111110000110";
        ram[75] = "0b00111101110101001011011000100000";
        ram[76] = "0b10111011100010000011101100001101";
        ram[77] = "0b00111110000100000100010100110101";
        ram[78] = "0b10111101001011011000110011100110";
        ram[79] = "0b10111110000010000101010111011010";
        ram[80] = "0b10111100101010010100110001011111";
        ram[81] = "0b00111110001001110011101100000000";
        ram[82] = "0b10111100110111001010000001111111";
        ram[83] = "0b00111110010101110101111110110011";
        ram[84] = "0b10111101101111100011000100110110";
        ram[85] = "0b10111101111111100101001110101000";
        ram[86] = "0b00111100111111001111101011111101";
        ram[87] = "0b00111101010111111010100001110010";
        ram[88] = "0b10111101111101101111000100010011";
        ram[89] = "0b00111101110110001000011001011001";
        ram[90] = "0b00111101110010010000111111111001";
        ram[91] = "0b00111011011100000100010001001011";
        ram[92] = "0b00111101110100000100101010110110";
        ram[93] = "0b10111101011101000001110010000010";
        ram[94] = "0b10111101000001111010010011011010";
        ram[95] = "0b10111011111100101100000010111101";
        ram[96] = "0b10111100011110001100010101111001";
        ram[97] = "0b10111101100110001111110101111000";
        ram[98] = "0b10111100111110100000011011110111";
        ram[99] = "0b10111110000011001011111001100010";
        ram[100] = "0b10111101010001111101000001011110";
        ram[101] = "0b10111101001000000100000011101000";
        ram[102] = "0b00111101110000010100001010100110";
        ram[103] = "0b10111100100010010001101000100101";
        ram[104] = "0b00111101101011110000011100111010";
        ram[105] = "0b10111110000111001001011111011001";
        ram[106] = "0b10111101011101011011100101010101";
        ram[107] = "0b00111011100110011010000111010010";
        ram[108] = "0b00111101110101010011001011101000";
        ram[109] = "0b00111100100110000100100110100011";
        ram[110] = "0b10111101001001010111010111011011";
        ram[111] = "0b00111101010010100111101010010010";
        ram[112] = "0b10111101010111011000110010100011";
        ram[113] = "0b10111110001111111010110011100110";
        ram[114] = "0b10111110000011011100101100010100";
        ram[115] = "0b00111101110000010110100100111100";
        ram[116] = "0b00111101100010101011100101000111";
        ram[117] = "0b00111101001000010101001011100110";
        ram[118] = "0b10111101100101001101011111001001";
        ram[119] = "0b00111101000000101010011101000100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_3) {
meminst = new inference_conv2d_f3_0_0_3_ram("inference_conv2d_f3_0_0_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_3() {
    delete meminst;
}


};//endmodule
#endif
