// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_5_H__
#define __inference_conv2d_f3_4_2_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_5_ram) {
        ram[0] = "0b00111011000110000001101000111110";
        ram[1] = "0b00111101010010000110100101000000";
        ram[2] = "0b00111110001011010010010111101110";
        ram[3] = "0b10111100101100000110111000100111";
        ram[4] = "0b00111110000101010011111001110000";
        ram[5] = "0b00111101101010100110001000010110";
        ram[6] = "0b10111110000100010001101100011110";
        ram[7] = "0b10111110011001010011000110011000";
        ram[8] = "0b00111101000010011111000100011011";
        ram[9] = "0b10111101100111001101000000000000";
        ram[10] = "0b10111101010000000100101001110011";
        ram[11] = "0b00111101110001101011110100010001";
        ram[12] = "0b10111100000011001101001100010111";
        ram[13] = "0b00111110000101110001001000011011";
        ram[14] = "0b00111011110011011000100100001010";
        ram[15] = "0b10111101010101000111110110110110";
        ram[16] = "0b10111101011001110011110111100010";
        ram[17] = "0b10111101010000011010001011101000";
        ram[18] = "0b00111100101000110100001101100111";
        ram[19] = "0b10111101101111000011011010110010";
        ram[20] = "0b10111101010010110110001000011001";
        ram[21] = "0b00111100101000010100111111011100";
        ram[22] = "0b00111101110011100100111110111001";
        ram[23] = "0b10111101011111100100010100010101";
        ram[24] = "0b00111011111111111010011101000000";
        ram[25] = "0b00111100110100100100100100001110";
        ram[26] = "0b10111101110101011001101010110111";
        ram[27] = "0b00111110000000110100101011001011";
        ram[28] = "0b00111101010101011101001010110101";
        ram[29] = "0b10111101001111101011101001101011";
        ram[30] = "0b00111010011101000110011110101101";
        ram[31] = "0b00111110001101011000000110001100";
        ram[32] = "0b00111101110010000111011010010001";
        ram[33] = "0b10111100110110011011100111100101";
        ram[34] = "0b00111100000101110000000001010111";
        ram[35] = "0b00111110000011110101001100111111";
        ram[36] = "0b10111101111111110011010100011010";
        ram[37] = "0b10111101000010100010000001100101";
        ram[38] = "0b00111100111101110000010001000011";
        ram[39] = "0b00111110001010110001010110110101";
        ram[40] = "0b00111100010001001100011001101110";
        ram[41] = "0b10111101010111001010011110100001";
        ram[42] = "0b10111011011010000000100010010010";
        ram[43] = "0b00111100001001001001011001001101";
        ram[44] = "0b00111101110111101011000110000001";
        ram[45] = "0b00111110001010001000001010101110";
        ram[46] = "0b10111100111101110101010100110111";
        ram[47] = "0b10111110000010001100110001010111";
        ram[48] = "0b00111101110011001011110110110011";
        ram[49] = "0b10111101111111000011001111111000";
        ram[50] = "0b00111101010100110111000011110110";
        ram[51] = "0b00111110001001100100110101111111";
        ram[52] = "0b00111100101010011010011011000010";
        ram[53] = "0b00111100100110100000010100101111";
        ram[54] = "0b00111101110110000101011000011101";
        ram[55] = "0b10111101001100011011100101100110";
        ram[56] = "0b00111101100010110101001000000000";
        ram[57] = "0b00111100111011110101101000101011";
        ram[58] = "0b00111101110111110001110011111100";
        ram[59] = "0b10111101111011000001000110100001";
        ram[60] = "0b10111101010010000111100101001011";
        ram[61] = "0b10111101111100001001110100000110";
        ram[62] = "0b10111110000101001011010101010111";
        ram[63] = "0b00111100110010101001000011101000";
        ram[64] = "0b10111101101100101010100000000000";
        ram[65] = "0b00111110000010111110001101111110";
        ram[66] = "0b10111101010100001101100110100010";
        ram[67] = "0b00111101100101110000001101000100";
        ram[68] = "0b10111100011110110000100001001001";
        ram[69] = "0b00111100000110100100000100011111";
        ram[70] = "0b10111101110010101111101001010111";
        ram[71] = "0b10111100110001111100001101111001";
        ram[72] = "0b00111101011100000011111110011001";
        ram[73] = "0b10111110001111010011010111101011";
        ram[74] = "0b10111101000111000000000000010001";
        ram[75] = "0b10111110011000100000011111010101";
        ram[76] = "0b00111101000001000111010111100110";
        ram[77] = "0b10111010101110000100011110000101";
        ram[78] = "0b10111110010000101101101010011000";
        ram[79] = "0b00111101110111100000100000101001";
        ram[80] = "0b00111101100000101000100101000111";
        ram[81] = "0b10111101111111100000001111110111";
        ram[82] = "0b10111100111101011100000010101100";
        ram[83] = "0b10111101110110010001111011101011";
        ram[84] = "0b10111100101011010110101101110011";
        ram[85] = "0b00111101011011000000011000110011";
        ram[86] = "0b00111101111110110000010001101000";
        ram[87] = "0b10111011000001000101110001000110";
        ram[88] = "0b10111101101010001111010110110101";
        ram[89] = "0b10111101011011001000111110010000";
        ram[90] = "0b10111110000100001100100111011010";
        ram[91] = "0b00111101101000000010101001101010";
        ram[92] = "0b10111100001010001011111001100101";
        ram[93] = "0b10111100001111010000111111000000";
        ram[94] = "0b10111101101100110110100111010101";
        ram[95] = "0b00111101010101100101001101011110";
        ram[96] = "0b00111101010010101011111001001111";
        ram[97] = "0b10111011111110010101111010111100";
        ram[98] = "0b00111110001011000011100110111101";
        ram[99] = "0b10111101100110011001100011000011";
        ram[100] = "0b00111101011101101110101001000010";
        ram[101] = "0b10111101001000100101111011101010";
        ram[102] = "0b10111110000000111101100110101001";
        ram[103] = "0b00111101110000011010111111101001";
        ram[104] = "0b00111101000101000110000011000101";
        ram[105] = "0b10111100110010011110001101000011";
        ram[106] = "0b10111100100011101010101010001000";
        ram[107] = "0b00111100110001100000001101001111";
        ram[108] = "0b00111101110011111111111100110111";
        ram[109] = "0b00111100100101111011001001101110";
        ram[110] = "0b10111100110000001000110101011001";
        ram[111] = "0b10111101111001101111011100011010";
        ram[112] = "0b10111100101101111011111111110101";
        ram[113] = "0b00111101011110001101001001011111";
        ram[114] = "0b00111101101101101010101111011110";
        ram[115] = "0b10111100001000101001001110111110";
        ram[116] = "0b00111101111100110100110101101010";
        ram[117] = "0b00111100100010001000001010000110";
        ram[118] = "0b00111100110110100111101001101010";
        ram[119] = "0b00111110010000100111100010001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_5) {
meminst = new inference_conv2d_f3_4_2_5_ram("inference_conv2d_f3_4_2_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_5() {
    delete meminst;
}


};//endmodule
#endif
