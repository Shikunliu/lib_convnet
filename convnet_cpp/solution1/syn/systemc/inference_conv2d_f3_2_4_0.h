// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_0_H__
#define __inference_conv2d_f3_2_4_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_0_ram) {
        ram[0] = "0b10111110001001011101011111001011";
        ram[1] = "0b00111100110110100001111011111011";
        ram[2] = "0b10111100101000110101011110001000";
        ram[3] = "0b10111110000011011101100100111100";
        ram[4] = "0b00111101011001100111011001010111";
        ram[5] = "0b10111101111100001011110110001000";
        ram[6] = "0b00111100111000010010000001110111";
        ram[7] = "0b10111100010010001101100001001100";
        ram[8] = "0b10111101000111011001111010101100";
        ram[9] = "0b10111101001100001010000110100011";
        ram[10] = "0b10111101100010010010010101000011";
        ram[11] = "0b00111101010010001011101010011111";
        ram[12] = "0b10111100011010000011000001101011";
        ram[13] = "0b10111101000010101100111110011101";
        ram[14] = "0b00111010100111111100110100111010";
        ram[15] = "0b00111101111101010110011001001001";
        ram[16] = "0b10111001110101000000000110011111";
        ram[17] = "0b00111110011110100110111001110110";
        ram[18] = "0b00111100010000010011010011101001";
        ram[19] = "0b00111011101000101011100001010001";
        ram[20] = "0b10111100111111001111101000100111";
        ram[21] = "0b10111100101000111000110101101110";
        ram[22] = "0b00111101110010001001000100001011";
        ram[23] = "0b00111101100110011100001011001111";
        ram[24] = "0b10111011100010111101001010011100";
        ram[25] = "0b10111101111100011101110111100011";
        ram[26] = "0b00111101010101011101111000001000";
        ram[27] = "0b10111101010111100010101000000111";
        ram[28] = "0b10111101100010110011000110001100";
        ram[29] = "0b00111101110111111110101100000111";
        ram[30] = "0b10111110001010000001101100100010";
        ram[31] = "0b10111101111000101101011010101010";
        ram[32] = "0b10111100010010000000011000101001";
        ram[33] = "0b00111110000010110101000110111101";
        ram[34] = "0b10111110000101001001001111001001";
        ram[35] = "0b00111110001111101011101110111010";
        ram[36] = "0b10111110001010011010111011010101";
        ram[37] = "0b10111100110110001001100001001000";
        ram[38] = "0b10111011011111100001001101000001";
        ram[39] = "0b00111011001101000101100011100011";
        ram[40] = "0b00111101111111110111010110010111";
        ram[41] = "0b10111110010100110100010111010000";
        ram[42] = "0b00111100101101010010011100101001";
        ram[43] = "0b00111101101010110010100000110111";
        ram[44] = "0b00111101101110101010011000001001";
        ram[45] = "0b00111100111101101101001000100100";
        ram[46] = "0b00111110001100001111000001100011";
        ram[47] = "0b00111100110011010001111100111000";
        ram[48] = "0b10111101101111010111110101100001";
        ram[49] = "0b00111110001000101111001111000011";
        ram[50] = "0b00111110000000101111111110001111";
        ram[51] = "0b10111110001011111010100100111011";
        ram[52] = "0b10111101110111100100101000111000";
        ram[53] = "0b00111101011100011101001101001100";
        ram[54] = "0b00111101010100011111101101110101";
        ram[55] = "0b10111110001011001101010011101101";
        ram[56] = "0b00111101100100000001000110111001";
        ram[57] = "0b10111100001010000100001000111110";
        ram[58] = "0b00111100110100101011011110010011";
        ram[59] = "0b00111101010101000101111110111001";
        ram[60] = "0b10111101100001000001111000010101";
        ram[61] = "0b10111100101001011001000100011111";
        ram[62] = "0b00111101010010000001101110001101";
        ram[63] = "0b10111101111100011001010001111101";
        ram[64] = "0b00111100100101010100001101011110";
        ram[65] = "0b00111101011110011101011001010000";
        ram[66] = "0b00111110000001000110111100010101";
        ram[67] = "0b10111110000101100011001001111111";
        ram[68] = "0b10111101011000000000010101110100";
        ram[69] = "0b00111110000000110100101010001000";
        ram[70] = "0b00111101110000011100100001110010";
        ram[71] = "0b00111101010011110111001111011100";
        ram[72] = "0b10111110000100101110010001001011";
        ram[73] = "0b00111101111101011100110010000101";
        ram[74] = "0b00111101010100010011011001010011";
        ram[75] = "0b00111110000000100010010000100101";
        ram[76] = "0b00111101010111010010010111100000";
        ram[77] = "0b00111100100100110000001010100111";
        ram[78] = "0b10111101111111001110010100101110";
        ram[79] = "0b10111110001110010101001000001001";
        ram[80] = "0b00111100111011010011010111111001";
        ram[81] = "0b00111101100001111110111011101111";
        ram[82] = "0b10111101010111111110001111001011";
        ram[83] = "0b00111100101001111000111010111010";
        ram[84] = "0b10111100001011001111110110001111";
        ram[85] = "0b10111101000010001010010001001001";
        ram[86] = "0b10111101110010111010100000110010";
        ram[87] = "0b00111100100111010111110011101001";
        ram[88] = "0b00111101101001101100010011111011";
        ram[89] = "0b00111101101001000111100000001101";
        ram[90] = "0b00111100100111101101001111001011";
        ram[91] = "0b10111101111001110000100011101110";
        ram[92] = "0b10111100000010010001110101110110";
        ram[93] = "0b00111100010100100110101101110010";
        ram[94] = "0b00111101100001011010011101011001";
        ram[95] = "0b10111101011111110110100101010010";
        ram[96] = "0b10111101100001011000010100011101";
        ram[97] = "0b00111110000100010100111011000010";
        ram[98] = "0b00111110000001111100001010000111";
        ram[99] = "0b00111101111010001101111000101011";
        ram[100] = "0b00111110000010100001111011000101";
        ram[101] = "0b10111101001000010101000100000011";
        ram[102] = "0b00111110001111011011010001000110";
        ram[103] = "0b00111101100111110100111110010100";
        ram[104] = "0b10111100111001110111000001010010";
        ram[105] = "0b10111100011010110100100010111001";
        ram[106] = "0b10111101110000111100110011111001";
        ram[107] = "0b10111101100001000011010111100010";
        ram[108] = "0b10111100110011010011111001110111";
        ram[109] = "0b10111101111101111110111101011011";
        ram[110] = "0b10111101100001101000000011111011";
        ram[111] = "0b10111101100111001110101110111100";
        ram[112] = "0b10111101111011010110101110101001";
        ram[113] = "0b00111110000101000000111010011101";
        ram[114] = "0b10111101111000110001100111000110";
        ram[115] = "0b10111100000111100111111111111110";
        ram[116] = "0b00111100111100100001111000101011";
        ram[117] = "0b10111011011110010110000001111111";
        ram[118] = "0b00111101110101110101101110000001";
        ram[119] = "0b10111101011101101100110011100110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_0) {
meminst = new inference_conv2d_f3_2_4_0_ram("inference_conv2d_f3_2_4_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_0() {
    delete meminst;
}


};//endmodule
#endif
