// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_15_H__
#define __inference_conv2d_f3_4_3_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_15_ram) {
        ram[0] = "0b10111110011101001010000111110001";
        ram[1] = "0b10111011011110011110111000011000";
        ram[2] = "0b00111110000101011000001001010110";
        ram[3] = "0b00111101011000001110111011000011";
        ram[4] = "0b10111101110011010110010111100100";
        ram[5] = "0b10111101100101001110000001101111";
        ram[6] = "0b10111110000001011011111010100001";
        ram[7] = "0b00111101110110011110111010001001";
        ram[8] = "0b00111101001010100011100111000101";
        ram[9] = "0b10111110000000100111101001100011";
        ram[10] = "0b00111110000100010110111000110111";
        ram[11] = "0b10111101101100101110010110101000";
        ram[12] = "0b00111100110010110110101100000011";
        ram[13] = "0b10111110000111111000000100011111";
        ram[14] = "0b10111110001011111011101001000101";
        ram[15] = "0b10111110001001100101101001010111";
        ram[16] = "0b00111100111101001111101111110110";
        ram[17] = "0b10111101010101001000001010111111";
        ram[18] = "0b10111110001000000011001101100001";
        ram[19] = "0b10111110001001101110010011000001";
        ram[20] = "0b10111101111000010001011101110010";
        ram[21] = "0b10111101100100100111000000001111";
        ram[22] = "0b00111101111010011111000001011111";
        ram[23] = "0b00111101000111010110001011100111";
        ram[24] = "0b00111101100110000001000011110110";
        ram[25] = "0b10111101001111011011000111000010";
        ram[26] = "0b10111101011110101010000000001111";
        ram[27] = "0b10111110000111101010011100000101";
        ram[28] = "0b00111101111011011010101000001101";
        ram[29] = "0b10111101110111000000001110111100";
        ram[30] = "0b10111101010001100101010001000010";
        ram[31] = "0b10111101100100010110000101000100";
        ram[32] = "0b10111101111110011001000000101010";
        ram[33] = "0b00111100111000010001110101010001";
        ram[34] = "0b10111101010000010000011011100001";
        ram[35] = "0b00111100001101011111011110011110";
        ram[36] = "0b00111100010001111100110001000111";
        ram[37] = "0b00111101101001100001011100111100";
        ram[38] = "0b10111101101001101111110001110100";
        ram[39] = "0b10111011101100010010011011111111";
        ram[40] = "0b10111100001101000001111101010111";
        ram[41] = "0b00111101100111101111010101110100";
        ram[42] = "0b10111011011011110011100001011101";
        ram[43] = "0b00111110001010111001110001110011";
        ram[44] = "0b00111110000000111011000100000111";
        ram[45] = "0b10111101111011110000011111000000";
        ram[46] = "0b10111110000011110111010001000111";
        ram[47] = "0b10111101110010111011010000110011";
        ram[48] = "0b00111101001111000011011110100100";
        ram[49] = "0b10111101110101101010110001100100";
        ram[50] = "0b00111100100010010110000110101001";
        ram[51] = "0b00111101100100010100110011101100";
        ram[52] = "0b10111110000011100001011100011010";
        ram[53] = "0b00111100001111111010111110101110";
        ram[54] = "0b00111101101010011001001111010101";
        ram[55] = "0b00111101001110111001101101100111";
        ram[56] = "0b00111101111010001000101111011011";
        ram[57] = "0b00111110000110010100110110010100";
        ram[58] = "0b00111100000111000101111101010001";
        ram[59] = "0b10111100001100010101011001001111";
        ram[60] = "0b00111101001011010001011001001110";
        ram[61] = "0b00111101001101101000110010011111";
        ram[62] = "0b00111011101011101011101110101010";
        ram[63] = "0b10111101101010010110010001001000";
        ram[64] = "0b10111101110010011111010101011010";
        ram[65] = "0b10111101101101101001001010001100";
        ram[66] = "0b10111101110000101111010101010110";
        ram[67] = "0b10111101100000110011001110101100";
        ram[68] = "0b10111101010000000111000110101010";
        ram[69] = "0b00111101100000110100100101100001";
        ram[70] = "0b10111101101100010011001001100101";
        ram[71] = "0b10111101101101001111110111011001";
        ram[72] = "0b10111110000011111100111100111110";
        ram[73] = "0b10111100000010001100101101001011";
        ram[74] = "0b10111100011110110101101001111111";
        ram[75] = "0b10111101110000111110110000111001";
        ram[76] = "0b10111101000011101001001010100000";
        ram[77] = "0b10111100101110010100001011100010";
        ram[78] = "0b10111011011100010001101000001001";
        ram[79] = "0b10111101101100110110100111110000";
        ram[80] = "0b00111100100011111111100100111101";
        ram[81] = "0b10111101010001110000010010000110";
        ram[82] = "0b10111011101011000100010010000010";
        ram[83] = "0b10111110000001111100101111110111";
        ram[84] = "0b00111101100001000100110101101101";
        ram[85] = "0b10111100000110001110011001000000";
        ram[86] = "0b00111110001011111100011100011101";
        ram[87] = "0b00111011110000101101111001001100";
        ram[88] = "0b00111110001110010011100111101011";
        ram[89] = "0b10111101101100111000110010100101";
        ram[90] = "0b00111101001010111010100000001010";
        ram[91] = "0b10111100101111011100101111011110";
        ram[92] = "0b10111101101001001101100100001011";
        ram[93] = "0b00111101100010111101011011101001";
        ram[94] = "0b00111110000011100100100100101100";
        ram[95] = "0b10111100001111000011011000010001";
        ram[96] = "0b10111110000001010101000100001101";
        ram[97] = "0b10111101100011111101010000101011";
        ram[98] = "0b10111101111110000011110101111001";
        ram[99] = "0b00111101011100101000010000110001";
        ram[100] = "0b10111101101010101011001100001010";
        ram[101] = "0b00111101011010100111110011100001";
        ram[102] = "0b10111110001011110001111100010101";
        ram[103] = "0b10111101000110111100110110111100";
        ram[104] = "0b10111101100101100011010001111101";
        ram[105] = "0b10111100110101010100111010110001";
        ram[106] = "0b00111110000101111001011000111010";
        ram[107] = "0b10111101101101011011110100101001";
        ram[108] = "0b10111110000100110000111111010000";
        ram[109] = "0b00111101101001111100010001001111";
        ram[110] = "0b10111101110000101000001110010000";
        ram[111] = "0b00111110001111010110010000001111";
        ram[112] = "0b00111100011110011000110001001000";
        ram[113] = "0b10111101100011100000001101010110";
        ram[114] = "0b00111101000011011111111011100001";
        ram[115] = "0b00111101100001011011110101011111";
        ram[116] = "0b00111011011001010011111001011110";
        ram[117] = "0b00111110000100000011000111001111";
        ram[118] = "0b10111101101101010110010011111001";
        ram[119] = "0b10111110010111011111001011101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_15) {
meminst = new inference_conv2d_f3_4_3_15_ram("inference_conv2d_f3_4_3_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_15() {
    delete meminst;
}


};//endmodule
#endif
