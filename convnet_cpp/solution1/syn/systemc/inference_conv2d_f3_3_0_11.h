// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_11_H__
#define __inference_conv2d_f3_3_0_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_11_ram) {
        ram[0] = "0b00111011111111100110010111001100";
        ram[1] = "0b00111101111101010111011000000100";
        ram[2] = "0b00111110000100101010100110010011";
        ram[3] = "0b00111100100001111110001111000100";
        ram[4] = "0b10111101110011011010011011100111";
        ram[5] = "0b10111101111011010011111010010010";
        ram[6] = "0b00111101000010011011000111100000";
        ram[7] = "0b10111101100100110010110100000011";
        ram[8] = "0b00111101110111011010100010111101";
        ram[9] = "0b00111101101110100110011111001101";
        ram[10] = "0b10111110000100000110000101000001";
        ram[11] = "0b00111101101101001010100110011000";
        ram[12] = "0b00111011110001000100010111010101";
        ram[13] = "0b00111101100010111110000110001101";
        ram[14] = "0b10111100010101010100100100001000";
        ram[15] = "0b00111101110010000110001110110010";
        ram[16] = "0b00111101100111010000111100000100";
        ram[17] = "0b00111100111001100010111110101010";
        ram[18] = "0b00111101100011110001111111000011";
        ram[19] = "0b00111101001110100001000111111010";
        ram[20] = "0b10111101010101010010000011011111";
        ram[21] = "0b00111101111000000100010100110101";
        ram[22] = "0b10111100000100011001001010111010";
        ram[23] = "0b00111110000001101110111001110100";
        ram[24] = "0b00111101110001010011010100011011";
        ram[25] = "0b10111110000000010100101110011101";
        ram[26] = "0b10111101101001011110100011010101";
        ram[27] = "0b00111101101110010111110110000000";
        ram[28] = "0b00111110001101000011110100000100";
        ram[29] = "0b00111100000010111011001001011011";
        ram[30] = "0b10111011100111110010001111110010";
        ram[31] = "0b00111110001001101001010110010110";
        ram[32] = "0b10111100101110100000101111001010";
        ram[33] = "0b10111101011110010001101110010000";
        ram[34] = "0b00111100011010000111010100110100";
        ram[35] = "0b00111101101101010111111101001011";
        ram[36] = "0b00111011011101110100101011111011";
        ram[37] = "0b10111110000010001111010111000011";
        ram[38] = "0b00111110000010111000110100111111";
        ram[39] = "0b10111110010010011000000010110010";
        ram[40] = "0b00111101110110110101110110001001";
        ram[41] = "0b10111100101010001000110010110001";
        ram[42] = "0b00111101010010000011011111000010";
        ram[43] = "0b00111110001101100000010111101110";
        ram[44] = "0b00111101011110001100000100010010";
        ram[45] = "0b10111100001010100110001100010101";
        ram[46] = "0b10111110000100010111011111101010";
        ram[47] = "0b00111101010010000101001110100110";
        ram[48] = "0b00111100010010010111110100100010";
        ram[49] = "0b10111101111110010111000111000001";
        ram[50] = "0b00111101101111111001011110101011";
        ram[51] = "0b00111101001101001100111101001010";
        ram[52] = "0b10111101100001111111110101011010";
        ram[53] = "0b10111101010110111010010011110010";
        ram[54] = "0b00111101111110010001001111101000";
        ram[55] = "0b00111100111001100110110001000110";
        ram[56] = "0b10111101011000010010110001010000";
        ram[57] = "0b00111101010101010101111010000111";
        ram[58] = "0b10111110001100000011110010001110";
        ram[59] = "0b00111100110011000110011110111000";
        ram[60] = "0b10111101100101101101101010100010";
        ram[61] = "0b00111100001000101010011100111111";
        ram[62] = "0b10111101101111001000011001111110";
        ram[63] = "0b10111101100011010110101101001011";
        ram[64] = "0b10111101101110010110010101000111";
        ram[65] = "0b10111100000011101101111111101101";
        ram[66] = "0b10111100010000000100101101001010";
        ram[67] = "0b10111101110011010111100000111110";
        ram[68] = "0b10111100111100100000010000101001";
        ram[69] = "0b10111110001101000010100011010100";
        ram[70] = "0b00111101111011000110000101010010";
        ram[71] = "0b10111110000001011000011010000111";
        ram[72] = "0b10111101111101001111001101110111";
        ram[73] = "0b10111101001100111010100100001111";
        ram[74] = "0b10111101100011001111110110110111";
        ram[75] = "0b10111101100000100000101110000000";
        ram[76] = "0b00111100000111101101010111100100";
        ram[77] = "0b10111110000011111110000101010100";
        ram[78] = "0b00111101111111010010000011110011";
        ram[79] = "0b00111101101111000000100000110001";
        ram[80] = "0b10111101001011101101000100011110";
        ram[81] = "0b10111101100000010011101111100010";
        ram[82] = "0b10111101100100110101000101011001";
        ram[83] = "0b00111101001110110001000100011000";
        ram[84] = "0b00111110010011010001011001110110";
        ram[85] = "0b00111101111011111000110011101011";
        ram[86] = "0b10111101011000001010011000110011";
        ram[87] = "0b00111011111101010000110000011100";
        ram[88] = "0b10111101110110011000000001101111";
        ram[89] = "0b00111110000000011000010011000010";
        ram[90] = "0b10111100000011110100011111100111";
        ram[91] = "0b10111011101100010110100111000101";
        ram[92] = "0b10111101000101111110100101111011";
        ram[93] = "0b00111100000011001110000010101110";
        ram[94] = "0b10111101101010000001100000010111";
        ram[95] = "0b00111101100011110000001000001001";
        ram[96] = "0b10111011011010111011000100010100";
        ram[97] = "0b10111110000101001110100100111110";
        ram[98] = "0b00111101101101010010001000101110";
        ram[99] = "0b00111011100000101101111101000011";
        ram[100] = "0b00111110001000101111101010010100";
        ram[101] = "0b10111100111001111101001000001100";
        ram[102] = "0b10111101001111100010101000000111";
        ram[103] = "0b10111101101111000001100001001010";
        ram[104] = "0b00111101010100011100011010110111";
        ram[105] = "0b00111101010011101111100101000111";
        ram[106] = "0b10111101100011100001111010100111";
        ram[107] = "0b00111100001010111000001110100111";
        ram[108] = "0b00111101001000101000101011110101";
        ram[109] = "0b10111101000111000101000010011001";
        ram[110] = "0b10111100101110011111010110001111";
        ram[111] = "0b10111100101111100111100110000011";
        ram[112] = "0b00111101001101101000001101001010";
        ram[113] = "0b10111101101111101111111111110000";
        ram[114] = "0b00111101101100100111001010000110";
        ram[115] = "0b10111110001111110100000100101001";
        ram[116] = "0b10111011010011001000100010101111";
        ram[117] = "0b00111101110100001010000010110010";
        ram[118] = "0b00111101110011110110100010111110";
        ram[119] = "0b10111101000110110011000111010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_11) {
meminst = new inference_conv2d_f3_3_0_11_ram("inference_conv2d_f3_3_0_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_11() {
    delete meminst;
}


};//endmodule
#endif
