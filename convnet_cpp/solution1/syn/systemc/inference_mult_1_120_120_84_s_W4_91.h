// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_91_H__
#define __inference_mult_1_120_120_84_s_W4_91_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_91_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_91_ram) {
        ram[0] = "0b10111101011001100110001101011100";
        ram[1] = "0b10111101101011101100110111111001";
        ram[2] = "0b00111101001001110000010010100001";
        ram[3] = "0b10111101110100011010000100010010";
        ram[4] = "0b00111101101101000001110110101001";
        ram[5] = "0b00111100111111101100011110000110";
        ram[6] = "0b10111101110011000100001000000101";
        ram[7] = "0b10111101100000101010100011100101";
        ram[8] = "0b00111101110101000111010110100011";
        ram[9] = "0b00111101111100111010111101110101";
        ram[10] = "0b10111101101001100011111000110000";
        ram[11] = "0b10111101000100110100100110100100";
        ram[12] = "0b10111101111011100110100001011110";
        ram[13] = "0b10111011100000101010110011000011";
        ram[14] = "0b00111101110100101101110010110001";
        ram[15] = "0b00111101101101011001111000000100";
        ram[16] = "0b10111101000111101101111000101100";
        ram[17] = "0b00111101010011100100110000101001";
        ram[18] = "0b00111101100000001101111011111011";
        ram[19] = "0b10111101001000110111110110011001";
        ram[20] = "0b10111110000100101010101010011111";
        ram[21] = "0b00111101100111000000010010101110";
        ram[22] = "0b10111101101111001111010000011111";
        ram[23] = "0b10111101110111110001101001011101";
        ram[24] = "0b10111100000100111110000101001001";
        ram[25] = "0b10111101100010011000000011110101";
        ram[26] = "0b10111101110011100111010001101101";
        ram[27] = "0b10111100101011101010001001110101";
        ram[28] = "0b00111011111011100010000110011100";
        ram[29] = "0b00111101111011010100110101000000";
        ram[30] = "0b00111011111001111111001100011001";
        ram[31] = "0b00111101111100001100011011111000";
        ram[32] = "0b10111101001101100100110100101111";
        ram[33] = "0b10111101001100101100101000100010";
        ram[34] = "0b10111110001101000010010001011111";
        ram[35] = "0b10111110001101111100010000011010";
        ram[36] = "0b00111100101111110001101000100111";
        ram[37] = "0b10111101011000101111110101011011";
        ram[38] = "0b10111101001010000010011110000001";
        ram[39] = "0b10111101010101000000000000010111";
        ram[40] = "0b00111110000001100101101001010111";
        ram[41] = "0b00111101001010111100010000111111";
        ram[42] = "0b00111110000110110001110001000011";
        ram[43] = "0b00111101001010011111011000001000";
        ram[44] = "0b10111101000000100011001011000101";
        ram[45] = "0b10111101100000100000100011010100";
        ram[46] = "0b00111100001100111010011010001011";
        ram[47] = "0b00111110001011010100010011011101";
        ram[48] = "0b10111100100010100001001000111101";
        ram[49] = "0b00111100100110001101010011100011";
        ram[50] = "0b00111101000000111010010101010110";
        ram[51] = "0b00111110000110101010111000101001";
        ram[52] = "0b00111101101111010011000010100000";
        ram[53] = "0b10111101100101011100011000000101";
        ram[54] = "0b00111110000100001110001001111110";
        ram[55] = "0b10111110000110100101110010100011";
        ram[56] = "0b10111101001001101001000011111001";
        ram[57] = "0b00111011111011000010110010001110";
        ram[58] = "0b10111100111110010100001001000001";
        ram[59] = "0b00111101100100001101001011011110";
        ram[60] = "0b10111101110000101011010111100101";
        ram[61] = "0b00111101111100000110101000101011";
        ram[62] = "0b10111101100100110000000000111101";
        ram[63] = "0b10111100101100110011011001011001";
        ram[64] = "0b00111101011100100000000100111010";
        ram[65] = "0b10111110001001001010011011101100";
        ram[66] = "0b00111101000111100100111111111101";
        ram[67] = "0b00111100110011011111110100011001";
        ram[68] = "0b10111011000001111100100010110111";
        ram[69] = "0b10111101110111000000111010111111";
        ram[70] = "0b00111101011001100101101000111101";
        ram[71] = "0b00111101111011101110001010000110";
        ram[72] = "0b10111110001001011111001001000101";
        ram[73] = "0b00111010110110111100010000001100";
        ram[74] = "0b00111101111101110010001011100010";
        ram[75] = "0b10111110000001111101001100001011";
        ram[76] = "0b00111101100111100010101111000010";
        ram[77] = "0b10111101001111000111101011011011";
        ram[78] = "0b00111101100000001011110111001011";
        ram[79] = "0b00111101101010010111010111001011";
        ram[80] = "0b10111101111001100101111100001111";
        ram[81] = "0b10111101010100110100100111110100";
        ram[82] = "0b00111101110010101011001011100001";
        ram[83] = "0b00111100101010000100110111000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_91) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_91_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_91) {
meminst = new inference_mult_1_120_120_84_s_W4_91_ram("inference_mult_1_120_120_84_s_W4_91_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_91() {
    delete meminst;
}


};//endmodule
#endif
