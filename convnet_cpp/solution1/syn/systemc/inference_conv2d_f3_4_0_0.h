// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_0_H__
#define __inference_conv2d_f3_4_0_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_0_ram) {
        ram[0] = "0b00111101010000100010001111000111";
        ram[1] = "0b00111101010001101100101110110001";
        ram[2] = "0b10111101111001010101101100000011";
        ram[3] = "0b00111101101101101011110101111100";
        ram[4] = "0b00111110001010100000110100110101";
        ram[5] = "0b00111101111001101110111000110001";
        ram[6] = "0b00111110000100000111000011111100";
        ram[7] = "0b10111110000101010100111011110100";
        ram[8] = "0b00111100111100001001010001010010";
        ram[9] = "0b10111101110011001001100011011000";
        ram[10] = "0b00111101000111111000111001110000";
        ram[11] = "0b00111101001101101101111110101011";
        ram[12] = "0b00111101111011011000101110100100";
        ram[13] = "0b10111101101111100100111111000111";
        ram[14] = "0b10111101111110101111011101001101";
        ram[15] = "0b00111100111000110011101101101110";
        ram[16] = "0b00111101010000111010010100000110";
        ram[17] = "0b10111100111111010000101110001111";
        ram[18] = "0b00111110010000100011011110001011";
        ram[19] = "0b00111110000110101111010111111101";
        ram[20] = "0b00111101100110110010100000011100";
        ram[21] = "0b10111110000100011101001101100111";
        ram[22] = "0b00111101101111010111000110111110";
        ram[23] = "0b10111100100010011010011010101000";
        ram[24] = "0b00111101100101101111100101101001";
        ram[25] = "0b00111110000000101000100011001110";
        ram[26] = "0b10111110000011011010110111111011";
        ram[27] = "0b00111110000000011001110101100111";
        ram[28] = "0b10111100111011100011011010101010";
        ram[29] = "0b00111110000001010101101000111010";
        ram[30] = "0b10111101001111011000111100100111";
        ram[31] = "0b10111101100100010011110110011101";
        ram[32] = "0b10111101101011100100010010011100";
        ram[33] = "0b10111101100010001101100110000000";
        ram[34] = "0b10111110000000111000010001110111";
        ram[35] = "0b10111101101110010100111110000101";
        ram[36] = "0b00111101000010101000100010000101";
        ram[37] = "0b00111101000010001100101011100000";
        ram[38] = "0b10111101100110111010101000100010";
        ram[39] = "0b10111110000001000101001111010010";
        ram[40] = "0b10111100101010010001010100111000";
        ram[41] = "0b00111101000000011011110000010010";
        ram[42] = "0b10111110000001010010011111100101";
        ram[43] = "0b10111110000010011000010011100100";
        ram[44] = "0b10111011111001110001111010001000";
        ram[45] = "0b00111110000000000010011101010010";
        ram[46] = "0b00111110001100010110000101011111";
        ram[47] = "0b00111101101001001011101101010001";
        ram[48] = "0b10111101111010011100000000100011";
        ram[49] = "0b00111101111001101011101101010110";
        ram[50] = "0b00111110001001000110110001110110";
        ram[51] = "0b10111011101001101111100010111101";
        ram[52] = "0b00111110000001011001111001100010";
        ram[53] = "0b00111010110100110101011111010110";
        ram[54] = "0b10111100100101101111011010000111";
        ram[55] = "0b10111101100111001111100000001110";
        ram[56] = "0b00111110000001110011000001000000";
        ram[57] = "0b00111100010010000101001101010110";
        ram[58] = "0b00111101010100011011100001110100";
        ram[59] = "0b00111101010100010100010110111101";
        ram[60] = "0b00111101111010110101000100110111";
        ram[61] = "0b00111101011111000111000111110001";
        ram[62] = "0b10111100111111000000010110011111";
        ram[63] = "0b00111101011111110011010010010100";
        ram[64] = "0b00111110000111100011011011010010";
        ram[65] = "0b10111110000000001011100010001101";
        ram[66] = "0b00111101100110000111001101011111";
        ram[67] = "0b00111101000010001101101111000001";
        ram[68] = "0b10111101011010001010111010010000";
        ram[69] = "0b00111101100001011101000001100111";
        ram[70] = "0b10111101011101100000000101011111";
        ram[71] = "0b10111100001111011000000011111111";
        ram[72] = "0b00111101101100100110001101111010";
        ram[73] = "0b10111110001011110110000010011110";
        ram[74] = "0b00111101000000111101110111000000";
        ram[75] = "0b10111101110111001011110011001111";
        ram[76] = "0b00111101100001000000111111101101";
        ram[77] = "0b10111101101101000010111110011000";
        ram[78] = "0b00111101001010110000111010100010";
        ram[79] = "0b00111110001100010010000111101110";
        ram[80] = "0b00111101101101011110001001100010";
        ram[81] = "0b00111101110000101000010111011111";
        ram[82] = "0b00111101101100010011110011010100";
        ram[83] = "0b00111101100110011001111010111101";
        ram[84] = "0b00111110010000001111010001010001";
        ram[85] = "0b10111101100100110100001011100000";
        ram[86] = "0b00111100110001011100101011100101";
        ram[87] = "0b10111011111100001110011011011101";
        ram[88] = "0b00111101010011110100011101100110";
        ram[89] = "0b00111110000000110100101000000010";
        ram[90] = "0b10111101010011110001010101111100";
        ram[91] = "0b10111110001011010101110111000100";
        ram[92] = "0b10111110011100110001110000100010";
        ram[93] = "0b00111101100000111100011010111100";
        ram[94] = "0b00111001111100000010110111010000";
        ram[95] = "0b10111101110110001110111010101111";
        ram[96] = "0b10111101000100111111100000011111";
        ram[97] = "0b00111110000001101111001010100110";
        ram[98] = "0b00111101111000000110011111001111";
        ram[99] = "0b00111101111010101100010010110101";
        ram[100] = "0b10111101111110101111100001011001";
        ram[101] = "0b00111100010110010010001001000110";
        ram[102] = "0b00111100110000001011110100101010";
        ram[103] = "0b00111011101011110110010001000111";
        ram[104] = "0b10111100111011101111111111111101";
        ram[105] = "0b00111100101110011101010101111001";
        ram[106] = "0b00111110001001000110010011011100";
        ram[107] = "0b10111100011001100111100110110010";
        ram[108] = "0b00111100100000101001100111011001";
        ram[109] = "0b10111101111000001100011111000001";
        ram[110] = "0b10111110010110110110111101011101";
        ram[111] = "0b00111101100010000111110110100101";
        ram[112] = "0b00111101111010100010101000001011";
        ram[113] = "0b00111110001011001111001110011001";
        ram[114] = "0b10111100110011000011110011101111";
        ram[115] = "0b10111101111000000001001101100110";
        ram[116] = "0b00111101000111000111100110110011";
        ram[117] = "0b10111101000111110000010100010011";
        ram[118] = "0b00111101111001000100100001001001";
        ram[119] = "0b10111100101111001110110010000101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_0) {
meminst = new inference_conv2d_f3_4_0_0_ram("inference_conv2d_f3_4_0_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_0() {
    delete meminst;
}


};//endmodule
#endif
