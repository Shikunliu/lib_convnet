// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_4_H__
#define __inference_conv2d_f3_4_0_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_4_ram) {
        ram[0] = "0b00111100010010011010111010100000";
        ram[1] = "0b10111101000100010010110101001111";
        ram[2] = "0b10111011001110010000010011101111";
        ram[3] = "0b10111110001010001100101101001011";
        ram[4] = "0b00111101100010110011110000110001";
        ram[5] = "0b10111101000101001000000010001011";
        ram[6] = "0b10111101101100010011110111010011";
        ram[7] = "0b10111100110100101110111011110000";
        ram[8] = "0b00111101100110101010111111111111";
        ram[9] = "0b10111110000111100101000001000000";
        ram[10] = "0b10111101010101101110110001000000";
        ram[11] = "0b10111101100010111000101001111000";
        ram[12] = "0b00111100001110110011101001101001";
        ram[13] = "0b10111101001011111100001011010001";
        ram[14] = "0b00111101000010010100011101010111";
        ram[15] = "0b10111110001011001110101110111100";
        ram[16] = "0b00111101100011101111101000011110";
        ram[17] = "0b00111101110100000010001011011101";
        ram[18] = "0b00111101110100001111100111010011";
        ram[19] = "0b00111101101111100100010110000000";
        ram[20] = "0b10111101000100001010101000111100";
        ram[21] = "0b10111101000101010111000100010110";
        ram[22] = "0b10111110000011100010111100111000";
        ram[23] = "0b00111110000100010100010100001111";
        ram[24] = "0b00111101010000101100110001100011";
        ram[25] = "0b00111101010010000000000011101011";
        ram[26] = "0b00111100010111100001001001101111";
        ram[27] = "0b10111110000100010110011000010111";
        ram[28] = "0b00111110000001010100001101101100";
        ram[29] = "0b00111101101101101101011001111110";
        ram[30] = "0b00111101100010110110011101111111";
        ram[31] = "0b10111100101101110010000001011101";
        ram[32] = "0b10111110000111010110000010100110";
        ram[33] = "0b00111101110000001010001001000100";
        ram[34] = "0b10111110001001110111011101001011";
        ram[35] = "0b10111101100000101100000000011110";
        ram[36] = "0b00111100001111110011110100101101";
        ram[37] = "0b00111101100001010010000101001010";
        ram[38] = "0b10111100110100100011111000100110";
        ram[39] = "0b10111100101110101011111110111010";
        ram[40] = "0b00111101101010110010001011000011";
        ram[41] = "0b00111101011100001111101010001111";
        ram[42] = "0b10111101010111011101101010100111";
        ram[43] = "0b10111101000110010110100111100100";
        ram[44] = "0b00111101101100010110110001101111";
        ram[45] = "0b10111101100010110100111111011010";
        ram[46] = "0b00111110000011011010111011000101";
        ram[47] = "0b00111101100000110000000001001011";
        ram[48] = "0b00111100110111110101110010000111";
        ram[49] = "0b00111101001101100111110100110101";
        ram[50] = "0b10111101100011111011110001101011";
        ram[51] = "0b00111101100000011100010001011011";
        ram[52] = "0b10111101010111010010000111100100";
        ram[53] = "0b00111011111100100110111001110010";
        ram[54] = "0b00111101101010100110000110000011";
        ram[55] = "0b00111100010100110000011000110111";
        ram[56] = "0b00111101110100011010110010011011";
        ram[57] = "0b00111101100000011011000110010110";
        ram[58] = "0b10111100101000011001001110011001";
        ram[59] = "0b00111101101100010111011001110010";
        ram[60] = "0b10111101011101011110010101011111";
        ram[61] = "0b00111101000110101000111000000110";
        ram[62] = "0b10111101011001010001101111001001";
        ram[63] = "0b00111100100101000010111000100000";
        ram[64] = "0b00111101000101101111011001010001";
        ram[65] = "0b00111100110000111000101100111010";
        ram[66] = "0b00111100010101101011010111101111";
        ram[67] = "0b00111101010100110001011110111010";
        ram[68] = "0b00111101001111110101101000011110";
        ram[69] = "0b10111101100110101111110011001110";
        ram[70] = "0b00111100110000001111100111111011";
        ram[71] = "0b10111100101001110010010100001000";
        ram[72] = "0b10111101100111100100100110100101";
        ram[73] = "0b10111011011101011110001001110000";
        ram[74] = "0b00111100101011100000111010011100";
        ram[75] = "0b00111101110110100001101000001101";
        ram[76] = "0b00111101101010001001011101110001";
        ram[77] = "0b10111110000001000100010011100001";
        ram[78] = "0b10111101110000000101100011000011";
        ram[79] = "0b00111011110100100101100101101001";
        ram[80] = "0b00111101000111000011100110100010";
        ram[81] = "0b10111101100000111110000110111100";
        ram[82] = "0b10111101110100011100111100110101";
        ram[83] = "0b10111110000000001100100100010000";
        ram[84] = "0b00111100011001000100111001011110";
        ram[85] = "0b10111101111101011100001100010110";
        ram[86] = "0b10111101001100001100010110000000";
        ram[87] = "0b00111101100101100000011000010111";
        ram[88] = "0b00111101101101101111001101010100";
        ram[89] = "0b00111101101010100010001000111011";
        ram[90] = "0b10111011110110111011000110101101";
        ram[91] = "0b10111101100010000111101001011000";
        ram[92] = "0b00111101000101000101100110111111";
        ram[93] = "0b10111101000010000000010101010010";
        ram[94] = "0b00111100100110101111101110011001";
        ram[95] = "0b10111101101001101010100011000110";
        ram[96] = "0b10111101110000110000100010111100";
        ram[97] = "0b00111110000011010011001001000000";
        ram[98] = "0b00111011100010101011100100101100";
        ram[99] = "0b10111100111011110001101111100010";
        ram[100] = "0b00111100110010000011100011101001";
        ram[101] = "0b00111011001110011101000111110011";
        ram[102] = "0b00111010100111111010110010101110";
        ram[103] = "0b00111101110011110010101111101101";
        ram[104] = "0b00111101011110011011010111101001";
        ram[105] = "0b10111101000011111101100101110111";
        ram[106] = "0b10111101101100111000110110111111";
        ram[107] = "0b10111011000111110001101110111010";
        ram[108] = "0b10111100101100000110100110001010";
        ram[109] = "0b00111101101110101110101011100000";
        ram[110] = "0b00111010000110001001100011001111";
        ram[111] = "0b00111110000011100010011101011011";
        ram[112] = "0b00111101101000100101000101111110";
        ram[113] = "0b00111101010001111101010101100111";
        ram[114] = "0b10111101011010100100110011011011";
        ram[115] = "0b10111100010010000101001001111111";
        ram[116] = "0b00111101101011011000100101001000";
        ram[117] = "0b10111101110101011111111011011010";
        ram[118] = "0b10111100101000110101000110101001";
        ram[119] = "0b10111101110010111000111001001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_4) {
meminst = new inference_conv2d_f3_4_0_4_ram("inference_conv2d_f3_4_0_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_4() {
    delete meminst;
}


};//endmodule
#endif
