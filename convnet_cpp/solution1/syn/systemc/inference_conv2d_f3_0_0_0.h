// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_0_H__
#define __inference_conv2d_f3_0_0_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_0_ram) {
        ram[0] = "0b10111101111110001011010001111100";
        ram[1] = "0b10111101100110111100101001100001";
        ram[2] = "0b10111100110011100011110100001111";
        ram[3] = "0b00111101011010100101001111000110";
        ram[4] = "0b10111101011010100001011000111001";
        ram[5] = "0b00111101101011110110100100101010";
        ram[6] = "0b00111100000100111101010100111111";
        ram[7] = "0b00111101001100000010111111000011";
        ram[8] = "0b10111101011111110011110110110011";
        ram[9] = "0b10111101100110100100011111000101";
        ram[10] = "0b00111011001010101111000000101110";
        ram[11] = "0b10111101101111010001110111011011";
        ram[12] = "0b10111101111010110011100010010011";
        ram[13] = "0b10111101100100010001100111011011";
        ram[14] = "0b10111110000011000101010101000011";
        ram[15] = "0b10111011010100000011111001110001";
        ram[16] = "0b00111101001111111000001010010111";
        ram[17] = "0b00111100101100010000011101110100";
        ram[18] = "0b00111101000010101011100110110010";
        ram[19] = "0b00111100110001001101001001100010";
        ram[20] = "0b00111110000001011001100100100100";
        ram[21] = "0b00111101100100111111010000111110";
        ram[22] = "0b00111101111101011110111100100000";
        ram[23] = "0b10111101100101110000001001010011";
        ram[24] = "0b00111110001000010111110100101000";
        ram[25] = "0b10111110000010101010110100011101";
        ram[26] = "0b10111101011111010011110010000111";
        ram[27] = "0b00111110001101100110110110111101";
        ram[28] = "0b00111101110011011000101110100100";
        ram[29] = "0b10111101100001001100010100101100";
        ram[30] = "0b00111101111100010111100010110011";
        ram[31] = "0b10111101101110100010011111110010";
        ram[32] = "0b00111110000000110001100100111111";
        ram[33] = "0b10111100010110101001110010011001";
        ram[34] = "0b00111100000001100111100001001010";
        ram[35] = "0b00111101000101100100011110111011";
        ram[36] = "0b10111101001101111010110010001111";
        ram[37] = "0b00111101000101011001001110110000";
        ram[38] = "0b10111110000000111110110111011001";
        ram[39] = "0b00111101111001101010010111010111";
        ram[40] = "0b10111100111100100101101101100111";
        ram[41] = "0b10111110001111110111100011111111";
        ram[42] = "0b00111100000000110100100100101011";
        ram[43] = "0b00111100101110101011111101001110";
        ram[44] = "0b10111110000001111011110100000110";
        ram[45] = "0b10111100101011010111100011011111";
        ram[46] = "0b00111101101000101111110100110011";
        ram[47] = "0b10111110000111111110100100110010";
        ram[48] = "0b10111101010001001100000001011001";
        ram[49] = "0b10111101100001001011010000010100";
        ram[50] = "0b00111101100110111111110111011101";
        ram[51] = "0b00111101101001001111100110100111";
        ram[52] = "0b10111010000011001100000101001101";
        ram[53] = "0b00111101010110000111100000110001";
        ram[54] = "0b10111110001001100111101100011100";
        ram[55] = "0b10111110000010011110100101001011";
        ram[56] = "0b10111100010001111100010010111011";
        ram[57] = "0b00111101111100011110010010110100";
        ram[58] = "0b00111101001111011000000001111001";
        ram[59] = "0b00111101000010011100001101100011";
        ram[60] = "0b10111101111010110101010001011100";
        ram[61] = "0b10111011111001111001001000001011";
        ram[62] = "0b10111100111100001000101010101101";
        ram[63] = "0b00111101101101101100000011111111";
        ram[64] = "0b10111100110110010111100001000001";
        ram[65] = "0b10111100110100100101110011000100";
        ram[66] = "0b10111110000010011101010110100010";
        ram[67] = "0b10111100011101001001101110110011";
        ram[68] = "0b10111101101011000101111011110110";
        ram[69] = "0b00111101101110000100010011011101";
        ram[70] = "0b00111101100001110111101111110101";
        ram[71] = "0b00111101110111111110010000110110";
        ram[72] = "0b00111110001010000111100001110101";
        ram[73] = "0b10111101110110110101001100001101";
        ram[74] = "0b10111101011100010110010000001011";
        ram[75] = "0b10111001000010111101110010111010";
        ram[76] = "0b10111101100011000110110111001101";
        ram[77] = "0b10111110001100011000000100010111";
        ram[78] = "0b10111110011000101011011000101000";
        ram[79] = "0b00111110010001010101110000010000";
        ram[80] = "0b10111101111011111111000010001001";
        ram[81] = "0b10111101110011110000100011001100";
        ram[82] = "0b00111101100111101000110000010010";
        ram[83] = "0b10111101000001001011001000110001";
        ram[84] = "0b10111101100001101000101000101000";
        ram[85] = "0b00111101110001111000101001100000";
        ram[86] = "0b10111101010001000101011100010010";
        ram[87] = "0b10111101100001011000110100111101";
        ram[88] = "0b10111100010000101010011101000100";
        ram[89] = "0b00111101111011100011110001010011";
        ram[90] = "0b00111101100111011010100001010010";
        ram[91] = "0b10111110000101101100111101000010";
        ram[92] = "0b00111110010000000011110001001011";
        ram[93] = "0b10111100000110001000000000110100";
        ram[94] = "0b10111110001101000111001001111110";
        ram[95] = "0b00111101011101100011001100010010";
        ram[96] = "0b00111100110000010001110010010101";
        ram[97] = "0b00111100111111110001001101110001";
        ram[98] = "0b00111110000000011001001011101010";
        ram[99] = "0b10111101001100110111001000011101";
        ram[100] = "0b00111101100011011011101000110011";
        ram[101] = "0b00111100100001010010001101010101";
        ram[102] = "0b00111101111001000110111110011100";
        ram[103] = "0b00111101110100000001011101010101";
        ram[104] = "0b10111101000011101101010110000110";
        ram[105] = "0b00111101100001010110111101000000";
        ram[106] = "0b00111110001111001110000011111100";
        ram[107] = "0b00111100110101110011110010010010";
        ram[108] = "0b10111100111100110101010111001110";
        ram[109] = "0b10111101000110011010101011100111";
        ram[110] = "0b10111100110000111100011011111111";
        ram[111] = "0b10111101100101100010011010100110";
        ram[112] = "0b00111110000100011011110100011111";
        ram[113] = "0b10111110001100101101110101111011";
        ram[114] = "0b10111110000010101010101011000001";
        ram[115] = "0b10111100111110110010011110111111";
        ram[116] = "0b00111011110010101110110010001101";
        ram[117] = "0b00111110010101111010110010000010";
        ram[118] = "0b10111101101011101001000100110101";
        ram[119] = "0b10111110000000001110110010110111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_0) {
meminst = new inference_conv2d_f3_0_0_0_ram("inference_conv2d_f3_0_0_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_0() {
    delete meminst;
}


};//endmodule
#endif
