// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_52_H__
#define __inference_mult_1_120_120_84_s_W4_52_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_52_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_52_ram) {
        ram[0] = "0b10111100011010110000111000000000";
        ram[1] = "0b10111101111001010100001101101100";
        ram[2] = "0b10111100001110001010100001010011";
        ram[3] = "0b10111100011000111111110111010110";
        ram[4] = "0b00111100011011010000110011011110";
        ram[5] = "0b00111110000100100101101001101000";
        ram[6] = "0b10111100001001101110100000110111";
        ram[7] = "0b00111011111101101101111101011010";
        ram[8] = "0b10111101111001101000101000001101";
        ram[9] = "0b00111110000101111111011000101011";
        ram[10] = "0b00111100111011100000110101011010";
        ram[11] = "0b00111100101111000101110101001001";
        ram[12] = "0b10111110001000100011011001111110";
        ram[13] = "0b10111110000010000011100110001010";
        ram[14] = "0b10111101101100000011110111000011";
        ram[15] = "0b00111101001101100111000010100000";
        ram[16] = "0b10111101110001101100110100101001";
        ram[17] = "0b00111110000100100110001001000101";
        ram[18] = "0b00111101111111011001000010011111";
        ram[19] = "0b00111101010000010010011100010010";
        ram[20] = "0b00111101101000011111111001100101";
        ram[21] = "0b10111101100110011111000110100001";
        ram[22] = "0b00111101100000110101011010010111";
        ram[23] = "0b00111101100011110101101000101011";
        ram[24] = "0b00111101100101100011000000110000";
        ram[25] = "0b10111101110101010100000100010000";
        ram[26] = "0b00111101111100011010110100100001";
        ram[27] = "0b00111101001001101000011000101100";
        ram[28] = "0b10111101011101001011100000011110";
        ram[29] = "0b10111100001000110100101001011101";
        ram[30] = "0b10111101101111110111111111000010";
        ram[31] = "0b00111101110011101100111100100000";
        ram[32] = "0b00111100111000101000110000011100";
        ram[33] = "0b10111100011111110110010001100100";
        ram[34] = "0b00111100110111110111011010001000";
        ram[35] = "0b00111110000001010011001010100101";
        ram[36] = "0b10111110000101111110101001100000";
        ram[37] = "0b10111011000110101001100101001001";
        ram[38] = "0b10111101001100101000000101011101";
        ram[39] = "0b10111101011011100101110001001111";
        ram[40] = "0b00111100101001011111101100111100";
        ram[41] = "0b10111101100110101101110001110101";
        ram[42] = "0b00111101110110011001010011100010";
        ram[43] = "0b10111110001110110011000010110110";
        ram[44] = "0b10111100001110010010000111110101";
        ram[45] = "0b00111110001010010000001100100001";
        ram[46] = "0b10111110000010100111101001000010";
        ram[47] = "0b00111101110111111100011101100000";
        ram[48] = "0b10111100111110111001011011100101";
        ram[49] = "0b00111100100101010010000011111001";
        ram[50] = "0b10111101010010101001001100011100";
        ram[51] = "0b00111101100001111100000000111000";
        ram[52] = "0b10111110000101101100100101111110";
        ram[53] = "0b00111110000011100111101100111110";
        ram[54] = "0b00111101011000001100100110100100";
        ram[55] = "0b00111101101111100011111001000100";
        ram[56] = "0b00111011110100101010000001100001";
        ram[57] = "0b00111101110110010010010000101001";
        ram[58] = "0b00111100111111000001110110111110";
        ram[59] = "0b00111101011011111111010101000001";
        ram[60] = "0b10111101110100001000000100111101";
        ram[61] = "0b10111100110110001010110111100001";
        ram[62] = "0b10111100111111001111110011100001";
        ram[63] = "0b00111101110111000010010011000100";
        ram[64] = "0b10111100000110111110110111110010";
        ram[65] = "0b00111101111001100110011111111001";
        ram[66] = "0b10111101111110101100100100101010";
        ram[67] = "0b00111110001011101100001110011000";
        ram[68] = "0b10111100001010110100001100001111";
        ram[69] = "0b10111011110000010001101011111101";
        ram[70] = "0b00111011110001011111100001110010";
        ram[71] = "0b10111100100011110011101000110000";
        ram[72] = "0b10111011011001101010010000001110";
        ram[73] = "0b10111101110010011101110010101000";
        ram[74] = "0b00111100110111000110110100011110";
        ram[75] = "0b10111101010011010101011011100110";
        ram[76] = "0b00111101111101111100110111001101";
        ram[77] = "0b10111101101100111011010111101000";
        ram[78] = "0b10111110000011110111110111111010";
        ram[79] = "0b00111101110001001011110000100111";
        ram[80] = "0b00111100111101100110000011100101";
        ram[81] = "0b10111110000001110100110000001010";
        ram[82] = "0b10111110001101110100100101101011";
        ram[83] = "0b00111101111000110100010011000011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_52) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_52_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_52) {
meminst = new inference_mult_1_120_120_84_s_W4_52_ram("inference_mult_1_120_120_84_s_W4_52_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_52() {
    delete meminst;
}


};//endmodule
#endif
