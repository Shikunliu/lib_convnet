// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_14_H__
#define __inference_conv2d_f3_0_0_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_14_ram) {
        ram[0] = "0b10111101010000100001100011000100";
        ram[1] = "0b10111100110101001000001001101110";
        ram[2] = "0b10111101000101000101110110000101";
        ram[3] = "0b10111101100111011111111110000010";
        ram[4] = "0b10111110000100111101000110001001";
        ram[5] = "0b10111100110011010000000111011100";
        ram[6] = "0b00111101101001110101100101110110";
        ram[7] = "0b00111101111111010001111101100000";
        ram[8] = "0b00111110000000101011101001011010";
        ram[9] = "0b10111100100001011010010000011001";
        ram[10] = "0b10111100000101110111010000010000";
        ram[11] = "0b10111101100100100001011001000000";
        ram[12] = "0b00111110001001000001111101100100";
        ram[13] = "0b10111101010001100100011000000000";
        ram[14] = "0b10111110000100011011001010100010";
        ram[15] = "0b00111101101011011000001110111001";
        ram[16] = "0b10111101100011110001100001111001";
        ram[17] = "0b10111100101101001101100010111010";
        ram[18] = "0b00111101011110000111101000101111";
        ram[19] = "0b00111101001000010101110111101001";
        ram[20] = "0b00111100110101100110011100010101";
        ram[21] = "0b10111110001111000101111101111100";
        ram[22] = "0b00111101100110110000101100000011";
        ram[23] = "0b10111110001111101011001111011101";
        ram[24] = "0b00111110000001111011000010110100";
        ram[25] = "0b00111101111010000001011111111100";
        ram[26] = "0b10111101110010100011101101110011";
        ram[27] = "0b00111101011111010100000101110100";
        ram[28] = "0b00111101001101011000100000101000";
        ram[29] = "0b10111011110100000100001001100011";
        ram[30] = "0b10111110100001010111101111001000";
        ram[31] = "0b00111101100000110010100100100010";
        ram[32] = "0b10111101111100101111111101001100";
        ram[33] = "0b00111101010010100111100000101001";
        ram[34] = "0b10111101101111111010001011111110";
        ram[35] = "0b00111101101101011010001001010001";
        ram[36] = "0b00111101110000101011111000100000";
        ram[37] = "0b00111101101101110010100010001011";
        ram[38] = "0b10111100101001100101001111110010";
        ram[39] = "0b10111110000100001001010110101111";
        ram[40] = "0b00111110000110000100010001001010";
        ram[41] = "0b00111110000101110000100111111010";
        ram[42] = "0b10111101100011101000001001101100";
        ram[43] = "0b10111101100000101000000000000000";
        ram[44] = "0b10111101101011100000101101011011";
        ram[45] = "0b10111101010111001111101110000100";
        ram[46] = "0b00111110000000101110100011000000";
        ram[47] = "0b00111100111100101000100111000000";
        ram[48] = "0b10111101000110000111100100111110";
        ram[49] = "0b00111101000001100011000111111001";
        ram[50] = "0b10111101101101100001000010010011";
        ram[51] = "0b00111110001010110100101100110000";
        ram[52] = "0b00111110000111000011111010111000";
        ram[53] = "0b10111101100010101000110011101100";
        ram[54] = "0b00111100110111001011010010100001";
        ram[55] = "0b10111101100000110101100011110011";
        ram[56] = "0b10111100000111001110010010010010";
        ram[57] = "0b00111101100101001100000010101010";
        ram[58] = "0b00111101000010101011101011011010";
        ram[59] = "0b00111010000100001011001100010110";
        ram[60] = "0b00111101100101101101001111111010";
        ram[61] = "0b00111110001010110101100000001000";
        ram[62] = "0b10111101110011000101011101101001";
        ram[63] = "0b00111101110001001111001100001100";
        ram[64] = "0b00111110001100000010111001100110";
        ram[65] = "0b10111100011111010000101101011001";
        ram[66] = "0b10111101110110110100001101010010";
        ram[67] = "0b00111101101010011000101100111100";
        ram[68] = "0b00111100111001110111000111111111";
        ram[69] = "0b10111011100001001011000110000000";
        ram[70] = "0b00111101000000001111001100101010";
        ram[71] = "0b00111101001011001000010010001110";
        ram[72] = "0b00111101100011000101001001100001";
        ram[73] = "0b10111101100001011011010010000010";
        ram[74] = "0b00111101100100011100111001111001";
        ram[75] = "0b00111101001111101011110100100101";
        ram[76] = "0b10111110000000010100110110110110";
        ram[77] = "0b00111100110110011000011111000110";
        ram[78] = "0b00111100110011011111010101010110";
        ram[79] = "0b00111001111101100001100110001000";
        ram[80] = "0b10111011110110110001111010011111";
        ram[81] = "0b00111011001011010100111100101110";
        ram[82] = "0b00111101011111001101100100000100";
        ram[83] = "0b10111110001000001110110011111010";
        ram[84] = "0b00111101111011000011110110101011";
        ram[85] = "0b10111101101101001100011010110001";
        ram[86] = "0b00111100101100001001001000000100";
        ram[87] = "0b00111101111010011011011110111111";
        ram[88] = "0b10111100110110010101000001101001";
        ram[89] = "0b10111101001111000010010001011001";
        ram[90] = "0b10111101001111111110111000010010";
        ram[91] = "0b00111110001101111101000001101100";
        ram[92] = "0b10111010111001011001100111111000";
        ram[93] = "0b00111101110010011101101000100100";
        ram[94] = "0b10111101100111010001000110110001";
        ram[95] = "0b10111101110101100110000101101011";
        ram[96] = "0b00111101100111011011001111110101";
        ram[97] = "0b00111101110010110110011100100001";
        ram[98] = "0b00111101101000000000111111010101";
        ram[99] = "0b10111101010001010010010010011000";
        ram[100] = "0b00111101110101010100010111001000";
        ram[101] = "0b00111101110001110010001100010111";
        ram[102] = "0b00111101100001111110111110000011";
        ram[103] = "0b00111110001001010000000111100010";
        ram[104] = "0b00111100110010001001110000011011";
        ram[105] = "0b00111101010001100111100110010111";
        ram[106] = "0b10111100100010010000111011010010";
        ram[107] = "0b10111101101011111011001111111010";
        ram[108] = "0b10111110001110011100001000111011";
        ram[109] = "0b00111101001111010001101000111101";
        ram[110] = "0b10111110001000011011010011111110";
        ram[111] = "0b00111101001101000101101100110111";
        ram[112] = "0b00111101111111111101110101100110";
        ram[113] = "0b10111110000010011110000000011110";
        ram[114] = "0b00111101101111010000010000101010";
        ram[115] = "0b10111110000111001000001111101101";
        ram[116] = "0b00111101110000111100100110111001";
        ram[117] = "0b10111101000010010111101000110010";
        ram[118] = "0b10111101001001110101011001010000";
        ram[119] = "0b10111101010100010111000110101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_14) {
meminst = new inference_conv2d_f3_0_0_14_ram("inference_conv2d_f3_0_0_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_14() {
    delete meminst;
}


};//endmodule
#endif
