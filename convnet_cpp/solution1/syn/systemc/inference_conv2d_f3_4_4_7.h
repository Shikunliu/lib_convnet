// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_7_H__
#define __inference_conv2d_f3_4_4_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_7_ram) {
        ram[0] = "0b10111100111100000110111010010011";
        ram[1] = "0b10111101101101011001011010111011";
        ram[2] = "0b00111101001101101101011111101001";
        ram[3] = "0b00111101110100000010101101000001";
        ram[4] = "0b10111101111010111110110001101000";
        ram[5] = "0b10111110000101101011110101101111";
        ram[6] = "0b00111010101111000101110001100111";
        ram[7] = "0b00111110000110010011011111010010";
        ram[8] = "0b10111101110101001001111010001000";
        ram[9] = "0b10111110000011110011100100001000";
        ram[10] = "0b10111101110111011111101010000111";
        ram[11] = "0b10111101010001101010101011000100";
        ram[12] = "0b10111100100010000010011100010110";
        ram[13] = "0b00111101010101111000100111110101";
        ram[14] = "0b00111101001100011010110111011101";
        ram[15] = "0b10111101100000111011000111000011";
        ram[16] = "0b00111110001011011110111001111000";
        ram[17] = "0b10111101100000100011010100101111";
        ram[18] = "0b10111100001100110100011001111110";
        ram[19] = "0b00111100111001000111001111101000";
        ram[20] = "0b10111100111101110001001010111100";
        ram[21] = "0b00111101001110010100100001010110";
        ram[22] = "0b10111110000010001111101110000111";
        ram[23] = "0b10111101111101011001011100001011";
        ram[24] = "0b10111010001111100011001010110100";
        ram[25] = "0b00111100001000001001001111101010";
        ram[26] = "0b10111110010111011000010010010000";
        ram[27] = "0b00111101000100110010000010001001";
        ram[28] = "0b00111110001010000111100010111000";
        ram[29] = "0b00111100101100010010111101001101";
        ram[30] = "0b10111100011001000111000011000011";
        ram[31] = "0b00111101100101110101111011110111";
        ram[32] = "0b10111110000111011011001111000000";
        ram[33] = "0b00111110000110101111101111000010";
        ram[34] = "0b00111110010000011110100000011101";
        ram[35] = "0b00111110001000111010111001101000";
        ram[36] = "0b00111001000010011010011111110000";
        ram[37] = "0b00111101110101001110011001011100";
        ram[38] = "0b10111101010001001111111010100010";
        ram[39] = "0b00111110000111011000010111100000";
        ram[40] = "0b00111110010001010000001111111011";
        ram[41] = "0b00111110001101110010111111111101";
        ram[42] = "0b10111101010011111010111111010110";
        ram[43] = "0b00111101111101011011101100111000";
        ram[44] = "0b10111100110010000101101101001110";
        ram[45] = "0b00111101001000000100001110100010";
        ram[46] = "0b10111101010101110000111100101011";
        ram[47] = "0b10111110000110100111101110010001";
        ram[48] = "0b10111100001101000001001011000010";
        ram[49] = "0b00111100100000010011001001100101";
        ram[50] = "0b10111100011011100100001110101010";
        ram[51] = "0b00111101110001101100011010001110";
        ram[52] = "0b10111101011101011101010000010010";
        ram[53] = "0b10111101100011010110100000100110";
        ram[54] = "0b00111101000100111011010001100010";
        ram[55] = "0b10111101110111101011100101011110";
        ram[56] = "0b10111101100100101101010110011101";
        ram[57] = "0b00111100100001010000010001001100";
        ram[58] = "0b10111101011110000001000000010010";
        ram[59] = "0b00111011101010100100011110100111";
        ram[60] = "0b10111110000010000010010011010101";
        ram[61] = "0b10111110010010100100101011001111";
        ram[62] = "0b00111101100111001011011010000101";
        ram[63] = "0b00111110000100100000011001000010";
        ram[64] = "0b10111101101110001000110111011001";
        ram[65] = "0b10111100100010111000010110100101";
        ram[66] = "0b10111101101101000101000001011100";
        ram[67] = "0b00111110000010100011000101100010";
        ram[68] = "0b00111101101010011010010101011000";
        ram[69] = "0b10111101011110101101100111110001";
        ram[70] = "0b10111101111001011111010110101110";
        ram[71] = "0b10111101000100101001011111001101";
        ram[72] = "0b00111101101101011000101000100110";
        ram[73] = "0b00111101111010110001000111000111";
        ram[74] = "0b00111100111000000111011100111001";
        ram[75] = "0b00111011111011100000110111100101";
        ram[76] = "0b00111101101010000111100110000001";
        ram[77] = "0b10111101101000101011111000100000";
        ram[78] = "0b10111100111111110111100000011011";
        ram[79] = "0b00111101101001111001001111111000";
        ram[80] = "0b10111100101110101011001011101111";
        ram[81] = "0b10111101101001110010011000000111";
        ram[82] = "0b00111101011100110100100001100010";
        ram[83] = "0b00111110000100011000000111100000";
        ram[84] = "0b00111100100010011100001110011000";
        ram[85] = "0b00111110001001110000101111010000";
        ram[86] = "0b10111101001110010010001110001000";
        ram[87] = "0b00111110001000000001011010001011";
        ram[88] = "0b00111101101010111001000010011010";
        ram[89] = "0b00111110001101010101000110010011";
        ram[90] = "0b10111100001111001011111100111001";
        ram[91] = "0b10111110000111111011110100100111";
        ram[92] = "0b10111100000001000000011010001010";
        ram[93] = "0b10111101100111001011111000010001";
        ram[94] = "0b00111110000111101000000101000101";
        ram[95] = "0b00111101011010000110011010100001";
        ram[96] = "0b10111110000011100110101000110011";
        ram[97] = "0b00111101010101000010110111001111";
        ram[98] = "0b00111101110000011001101011111101";
        ram[99] = "0b00111101101001100100010010110000";
        ram[100] = "0b10111100000000011100100000001100";
        ram[101] = "0b10111100100110100010000010101000";
        ram[102] = "0b00111010011110110101000100000000";
        ram[103] = "0b00111110010110010000000110001110";
        ram[104] = "0b00111011001100101111001111011110";
        ram[105] = "0b10111101100111010010110101010010";
        ram[106] = "0b10111101001000101101001111110000";
        ram[107] = "0b10111100011011010111010001111000";
        ram[108] = "0b00111101111100100111000000101010";
        ram[109] = "0b10111100110101000110110010011111";
        ram[110] = "0b00111011101011111110000011000011";
        ram[111] = "0b10111110010101001010101001010100";
        ram[112] = "0b00111100101001010101000110010011";
        ram[113] = "0b10111101110011111101111100111011";
        ram[114] = "0b10111010110011101101011000111100";
        ram[115] = "0b10111100110110000010001101111000";
        ram[116] = "0b10111110000101001001111100001110";
        ram[117] = "0b00111101111110100101011111101011";
        ram[118] = "0b10111101100010110100011011110000";
        ram[119] = "0b00111110000000100101001110010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_7) {
meminst = new inference_conv2d_f3_4_4_7_ram("inference_conv2d_f3_4_4_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_7() {
    delete meminst;
}


};//endmodule
#endif
