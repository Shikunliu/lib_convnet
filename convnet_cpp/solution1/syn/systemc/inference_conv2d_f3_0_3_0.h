// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_0_H__
#define __inference_conv2d_f3_0_3_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_0_ram) {
        ram[0] = "0b10111100101110111101011110110010";
        ram[1] = "0b10111101100001011111110001100100";
        ram[2] = "0b00111101011111101100001000010010";
        ram[3] = "0b10111101010000011101100111110101";
        ram[4] = "0b00111110000111000011011101100001";
        ram[5] = "0b10111110000001000100101001100010";
        ram[6] = "0b00111011010001111011101101101011";
        ram[7] = "0b10111110001011101000100101100101";
        ram[8] = "0b00111110001001010010010111001100";
        ram[9] = "0b00111101101100101010000011011111";
        ram[10] = "0b10111100101001110111111110100001";
        ram[11] = "0b00111101100111111011110110101101";
        ram[12] = "0b10111101111000110111100100110001";
        ram[13] = "0b10111101110110111100010011010010";
        ram[14] = "0b00111011100001111101111010000110";
        ram[15] = "0b00111100111010010111001101100001";
        ram[16] = "0b00111100001111001001100111100100";
        ram[17] = "0b10111101011001111000100110010111";
        ram[18] = "0b00111101001000101010100111001001";
        ram[19] = "0b10111101100111101100110000010110";
        ram[20] = "0b10111101010110000000001110010111";
        ram[21] = "0b00111101100011000011001000111101";
        ram[22] = "0b10111101110101011010100001011000";
        ram[23] = "0b00111101111001100101111000000011";
        ram[24] = "0b00111101111100111000111011110011";
        ram[25] = "0b00111101110010000000100011100011";
        ram[26] = "0b00111101010000001001010011001011";
        ram[27] = "0b00111011101110111010111110011001";
        ram[28] = "0b00111110011010011010011011111000";
        ram[29] = "0b00111101011011111110110011000010";
        ram[30] = "0b00111101011110100111000011011111";
        ram[31] = "0b00111100000000000100001010000110";
        ram[32] = "0b10111101111011001011100101100111";
        ram[33] = "0b00111101110000010111001001000001";
        ram[34] = "0b00111100100011011011101010011110";
        ram[35] = "0b00111101101111111100100110111100";
        ram[36] = "0b00111101001000100000010101111001";
        ram[37] = "0b00111101100010001110110111011000";
        ram[38] = "0b10111101100111101010011011000010";
        ram[39] = "0b00111101000111000101010110000110";
        ram[40] = "0b10111101101110111111111001110001";
        ram[41] = "0b00111101110100100000001110100011";
        ram[42] = "0b10111101101100011010011000110110";
        ram[43] = "0b10111011011011100110011010100101";
        ram[44] = "0b00111100001011010100000110000010";
        ram[45] = "0b10111101001001000100110101010010";
        ram[46] = "0b10111101101011100011101100011111";
        ram[47] = "0b00111101011000001101011111100111";
        ram[48] = "0b10111101110011001010000011011101";
        ram[49] = "0b10111101101110100101100001110001";
        ram[50] = "0b00111101010010110010101101011101";
        ram[51] = "0b10111100111000100010110111110011";
        ram[52] = "0b10111101010010101001000010110010";
        ram[53] = "0b00111101111011011000011011101100";
        ram[54] = "0b00111110000111100110111100101111";
        ram[55] = "0b10111100101000100010100111000001";
        ram[56] = "0b00111110011000010010110011110001";
        ram[57] = "0b10111101100010000000100000011010";
        ram[58] = "0b10111101010010011111110101000100";
        ram[59] = "0b00111100100000000001011000000101";
        ram[60] = "0b10111101111001010111111000100100";
        ram[61] = "0b10111110001111010011000110111010";
        ram[62] = "0b10111110000001010100111000101011";
        ram[63] = "0b00111101101100000100111101101110";
        ram[64] = "0b10111110000110001010001110110101";
        ram[65] = "0b10111101000010111000110100110010";
        ram[66] = "0b00111101000011110100100011011110";
        ram[67] = "0b00111101100100000011011000101001";
        ram[68] = "0b10111101011000100001001001111001";
        ram[69] = "0b10111110001001110010111100110100";
        ram[70] = "0b10111100101100110011111110010011";
        ram[71] = "0b10111101110100001001100011010100";
        ram[72] = "0b00111101010110001100000101100010";
        ram[73] = "0b10111100110110100110110000100111";
        ram[74] = "0b10111101100000001011110001111011";
        ram[75] = "0b10111100110000101001011000010010";
        ram[76] = "0b00111101001010010111001110110010";
        ram[77] = "0b00111101100100100111011010011101";
        ram[78] = "0b00111011010000001101000000111111";
        ram[79] = "0b10111101100101000110110001000001";
        ram[80] = "0b10111101100010101111000100111000";
        ram[81] = "0b10111101101011000010010000110000";
        ram[82] = "0b10111101110111000001110001100001";
        ram[83] = "0b10111100010000111001010100010110";
        ram[84] = "0b00111110000001010100111011110100";
        ram[85] = "0b00111100110110110110000101010000";
        ram[86] = "0b00111110001111011010110110111000";
        ram[87] = "0b00111101010001000000110101110110";
        ram[88] = "0b00111101111001011010100100100010";
        ram[89] = "0b00111101111000110000000110101000";
        ram[90] = "0b10111110001000000010111011101100";
        ram[91] = "0b10111101110011001010011001101100";
        ram[92] = "0b00111100111001111111010000000101";
        ram[93] = "0b10111101001101110001011100100011";
        ram[94] = "0b10111100111000010101000110001001";
        ram[95] = "0b00111101000011010011110011001010";
        ram[96] = "0b10111101100110110100001111011001";
        ram[97] = "0b10111100101110111110100110000101";
        ram[98] = "0b10111110000011110011011011110000";
        ram[99] = "0b10111100111110100111010011011011";
        ram[100] = "0b10111101010110010101001010000010";
        ram[101] = "0b00111101110000011101000110111010";
        ram[102] = "0b10111011110100101100110100000001";
        ram[103] = "0b10111101001110010010011101001110";
        ram[104] = "0b00111101111010111000111110011011";
        ram[105] = "0b00111010100010110000100010000111";
        ram[106] = "0b00111110000011010101001101001000";
        ram[107] = "0b00111101110100101001111011010100";
        ram[108] = "0b00111101111111010010011000110001";
        ram[109] = "0b00111100101000011101011001001001";
        ram[110] = "0b00111100001101110110000001010100";
        ram[111] = "0b10111101011000001000101001001111";
        ram[112] = "0b10111101001001111000110010000111";
        ram[113] = "0b00111101101011011111110100001011";
        ram[114] = "0b10111110001101101011101100010011";
        ram[115] = "0b00111100100111101111010111000100";
        ram[116] = "0b00111101011000001000000001110011";
        ram[117] = "0b10111011111110100010000110011010";
        ram[118] = "0b10111101011111110111010101100001";
        ram[119] = "0b00111100111001111011000000010011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_0) {
meminst = new inference_conv2d_f3_0_3_0_ram("inference_conv2d_f3_0_3_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_0() {
    delete meminst;
}


};//endmodule
#endif
