// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_10_H__
#define __inference_conv2d_f3_0_1_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_10_ram) {
        ram[0] = "0b00111011111111001110111110010101";
        ram[1] = "0b10111101100101010110100011001101";
        ram[2] = "0b10111011111111110010111010011111";
        ram[3] = "0b10111100110011111101000100101110";
        ram[4] = "0b00111100111011011111001101011000";
        ram[5] = "0b10111101110011010010110000111000";
        ram[6] = "0b00111110000111100011010000110011";
        ram[7] = "0b00111101000101110101100111010100";
        ram[8] = "0b00111100110011011111001101110011";
        ram[9] = "0b10111101010100010100010011001100";
        ram[10] = "0b00111101011110000111011110101011";
        ram[11] = "0b10111110001100000110001011010100";
        ram[12] = "0b10111101101110101101000100100010";
        ram[13] = "0b10111101101100101100001101101100";
        ram[14] = "0b00111110000010001011111001110011";
        ram[15] = "0b00111101001011011101010011010101";
        ram[16] = "0b10111100101011110100011000111111";
        ram[17] = "0b10111101100101001000000111011010";
        ram[18] = "0b10111100100101101010001010100100";
        ram[19] = "0b10111101010001100100110010000000";
        ram[20] = "0b10111101110001011011010111010010";
        ram[21] = "0b10111110000111101000000010111111";
        ram[22] = "0b00111110000110011000001101010001";
        ram[23] = "0b10111100010101001001111110010101";
        ram[24] = "0b10111110000011101100010101101101";
        ram[25] = "0b10111011100110110111110111100000";
        ram[26] = "0b00111101111100000010101111000111";
        ram[27] = "0b10111110010100100010011110001101";
        ram[28] = "0b00111110001011110010111001001001";
        ram[29] = "0b10111101101100110001101110001110";
        ram[30] = "0b10111101101100110100100001000111";
        ram[31] = "0b00111101101110000001111111100111";
        ram[32] = "0b10111010001111010101001110100010";
        ram[33] = "0b10111110000001111110011100111010";
        ram[34] = "0b00111101111110001100001100101011";
        ram[35] = "0b00111101100100011100110100001111";
        ram[36] = "0b00111101100000111101010011010111";
        ram[37] = "0b00111101101011110100010111111100";
        ram[38] = "0b10111101101110000010100101100100";
        ram[39] = "0b00111100011111001011110011101010";
        ram[40] = "0b10111101101111110110011110001001";
        ram[41] = "0b00111010101010011100010001011111";
        ram[42] = "0b10111101010000011111011101010001";
        ram[43] = "0b10111101011111110110010110001011";
        ram[44] = "0b10111100010011100100000101000001";
        ram[45] = "0b10111101101001000010011010000110";
        ram[46] = "0b00111100111011001000010011111001";
        ram[47] = "0b00111101110100111110011100001000";
        ram[48] = "0b00111100000101001101000010011101";
        ram[49] = "0b00111100000011110111010111111111";
        ram[50] = "0b00111110000111101001001001001111";
        ram[51] = "0b00111101000110010010011011111110";
        ram[52] = "0b10111101100001111011100110111000";
        ram[53] = "0b10111101101100111011001111001111";
        ram[54] = "0b10111101001111110010000111101001";
        ram[55] = "0b10111101111111001001011100001111";
        ram[56] = "0b00111100100001010001101111111110";
        ram[57] = "0b10111100101000100101110110001101";
        ram[58] = "0b00111101100000010010011111011011";
        ram[59] = "0b10111101111100100101011100000000";
        ram[60] = "0b10111101100011001111111100101111";
        ram[61] = "0b00111101000001001011110011111110";
        ram[62] = "0b00111101100000101000000100001100";
        ram[63] = "0b00111100111100011010011010100001";
        ram[64] = "0b00111110000100101110010101011000";
        ram[65] = "0b10111011001101110000000111011111";
        ram[66] = "0b10111100100100110001000110001010";
        ram[67] = "0b10111101010110000011010111010001";
        ram[68] = "0b00111101111100000011000100000101";
        ram[69] = "0b10111101101100100001110100101100";
        ram[70] = "0b10111110011101011100000001110110";
        ram[71] = "0b00111101010110001001110011100101";
        ram[72] = "0b00111011011111110010100001101010";
        ram[73] = "0b10111010111011101001000000010110";
        ram[74] = "0b10111101100000010001010011101110";
        ram[75] = "0b10111101100010001100110111101010";
        ram[76] = "0b00111100010011010110011100100110";
        ram[77] = "0b00111110001001010110101111001010";
        ram[78] = "0b00111101011101101001100010010011";
        ram[79] = "0b10111100001010010100000110101101";
        ram[80] = "0b10111101001001000111101000011000";
        ram[81] = "0b00111101100101000100101111100111";
        ram[82] = "0b00111101011111000000100111010001";
        ram[83] = "0b10111101101001001010110000011100";
        ram[84] = "0b10111101010001101010000110100101";
        ram[85] = "0b10111110001101110110010011110001";
        ram[86] = "0b10111110000011001000101111001010";
        ram[87] = "0b00111101000000100000111111000000";
        ram[88] = "0b10111101011000001101101110010010";
        ram[89] = "0b10111101001101111000011110001011";
        ram[90] = "0b10111010101111011001101010000000";
        ram[91] = "0b00111110000111000011000101011001";
        ram[92] = "0b10111101110101110111111010100010";
        ram[93] = "0b00111110000101110001111100110110";
        ram[94] = "0b10111100100110010111001010011000";
        ram[95] = "0b10111101111000010101011011100010";
        ram[96] = "0b10111101101000011101111011100010";
        ram[97] = "0b10111101100000111111110110000110";
        ram[98] = "0b00111101000111010001010000001101";
        ram[99] = "0b10111101100111010100101100100111";
        ram[100] = "0b00111101100110010010100110000010";
        ram[101] = "0b00111110001001000001011101000100";
        ram[102] = "0b10111101101001101011100000111110";
        ram[103] = "0b00111101010110101000000011010000";
        ram[104] = "0b00111100100011101110110100000011";
        ram[105] = "0b10111110010001101001001111000000";
        ram[106] = "0b10111101010011100111100110101011";
        ram[107] = "0b00111100010000111010100110100011";
        ram[108] = "0b00111100110101011111000100000011";
        ram[109] = "0b10111101101111001111010011001110";
        ram[110] = "0b00111101100110111000111010001111";
        ram[111] = "0b10111101110100000010111001100110";
        ram[112] = "0b00111101100001110010100101101111";
        ram[113] = "0b10111100110101001011001110110110";
        ram[114] = "0b10111101100001010111000111101101";
        ram[115] = "0b00111100010111011110001010011111";
        ram[116] = "0b00111110000101100011111011010001";
        ram[117] = "0b10111101000000000110001011000111";
        ram[118] = "0b00111101101001100111100110110010";
        ram[119] = "0b00111100110011111011100010100101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_10) {
meminst = new inference_conv2d_f3_0_1_10_ram("inference_conv2d_f3_0_1_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_10() {
    delete meminst;
}


};//endmodule
#endif
