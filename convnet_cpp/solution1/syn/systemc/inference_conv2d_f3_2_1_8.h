// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_8_H__
#define __inference_conv2d_f3_2_1_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_8_ram) {
        ram[0] = "0b00111101111011001001111110110110";
        ram[1] = "0b10111100001001110010000101000010";
        ram[2] = "0b10111011111100110110111011001101";
        ram[3] = "0b00111101010100100101010111011000";
        ram[4] = "0b10111101111001000100100011001111";
        ram[5] = "0b10111101011100111011101000100111";
        ram[6] = "0b10111100111110111010000000011111";
        ram[7] = "0b00111110010010000110010000000010";
        ram[8] = "0b00111101100011101001111010101111";
        ram[9] = "0b10111101101011001011011010010010";
        ram[10] = "0b00111010100001010011000101011000";
        ram[11] = "0b10111100100101100111001010011110";
        ram[12] = "0b10111100111111110000010111001111";
        ram[13] = "0b00111100101101011101001001001010";
        ram[14] = "0b10111101111001111010011111001010";
        ram[15] = "0b00111101111001001101111101001000";
        ram[16] = "0b10111101110000100000101011111010";
        ram[17] = "0b00111100010101110000010011001010";
        ram[18] = "0b10111101010100011000110111111101";
        ram[19] = "0b10111101011101000000100001111011";
        ram[20] = "0b10111110010001011100110100001100";
        ram[21] = "0b00111100000111111100100011001000";
        ram[22] = "0b10111101010100001011100110100110";
        ram[23] = "0b10111101010011100101111011101110";
        ram[24] = "0b10111101100110010001111011101011";
        ram[25] = "0b00111011100000001000000000101110";
        ram[26] = "0b10111101101100110010111110100011";
        ram[27] = "0b10111001001000011000100100000101";
        ram[28] = "0b00111101010100111100101110001111";
        ram[29] = "0b00111110000000010010011010100110";
        ram[30] = "0b10111010100101001100010011110100";
        ram[31] = "0b10111110000100100101011110000110";
        ram[32] = "0b10111100000111011101110010011111";
        ram[33] = "0b10111110001100001010000011110101";
        ram[34] = "0b00111110010011011000111001000011";
        ram[35] = "0b00111101011101010101101101111100";
        ram[36] = "0b10111101100100100011100010010111";
        ram[37] = "0b00111101010100100101101111101101";
        ram[38] = "0b00111101101100010101101001001011";
        ram[39] = "0b00111011011101100110000000011001";
        ram[40] = "0b00111110001101110110010100110100";
        ram[41] = "0b10111101000111100000111100101111";
        ram[42] = "0b10111101100000010100011111110001";
        ram[43] = "0b10111101111001010001011111100111";
        ram[44] = "0b10111101100000101110100111101000";
        ram[45] = "0b10111101010100000010110001001101";
        ram[46] = "0b10111110000111100101011011001101";
        ram[47] = "0b10111101111001110100011011001100";
        ram[48] = "0b10111101001001101111110110110110";
        ram[49] = "0b00111100101010110001111100110011";
        ram[50] = "0b00111101110110011011000100110001";
        ram[51] = "0b10111101000110011001110010001001";
        ram[52] = "0b10111110001110110000011101001010";
        ram[53] = "0b00111010100001110110000100001000";
        ram[54] = "0b10111101111101111111001100000110";
        ram[55] = "0b10111101111100101000100001001000";
        ram[56] = "0b10111100101000111001001111101110";
        ram[57] = "0b10111101011111000110111110100010";
        ram[58] = "0b00111100000111110111100001000000";
        ram[59] = "0b00111110010010001111001000010111";
        ram[60] = "0b00111100010011110101101001000110";
        ram[61] = "0b10111100000000001100001010111110";
        ram[62] = "0b00111011101001110011101011010111";
        ram[63] = "0b00111101110100011010110010011011";
        ram[64] = "0b00111101101010101001000110001001";
        ram[65] = "0b00111110000100101111111111010010";
        ram[66] = "0b00111101110101100011101100100101";
        ram[67] = "0b10111101101010101101000101010111";
        ram[68] = "0b00111101000101100011001011011101";
        ram[69] = "0b10111101001101010110011010110100";
        ram[70] = "0b10111101100110010000000011100000";
        ram[71] = "0b00111101101110000111111111001100";
        ram[72] = "0b00111101101000011011111111110100";
        ram[73] = "0b10111101111011010100010101100011";
        ram[74] = "0b00111100110101100010100101101101";
        ram[75] = "0b10111101111011001100101111000000";
        ram[76] = "0b10111101111000100110001101010010";
        ram[77] = "0b00111101101110110011001010001011";
        ram[78] = "0b00111101101000000100101001110011";
        ram[79] = "0b00111110001010101110001101100001";
        ram[80] = "0b10111010110010000101111001010011";
        ram[81] = "0b00111100111110110001100001101111";
        ram[82] = "0b10111101110011100000100111111111";
        ram[83] = "0b00111100010110010010010001011111";
        ram[84] = "0b10111100011001010101110011100111";
        ram[85] = "0b10111101111001001110110001100011";
        ram[86] = "0b00111101011100000011001001100010";
        ram[87] = "0b10111101011100000100101110101000";
        ram[88] = "0b00111101111110001010010011000010";
        ram[89] = "0b00111101010011010111110011000000";
        ram[90] = "0b10111101101111101111110101101100";
        ram[91] = "0b10111100100101110111111100001101";
        ram[92] = "0b00111101101110100100100110001101";
        ram[93] = "0b00111101011011111101100001010000";
        ram[94] = "0b10111101001110111100110001000100";
        ram[95] = "0b00111101100110100111010010011000";
        ram[96] = "0b00111101001101111100100101100101";
        ram[97] = "0b10111101011101000110100001010010";
        ram[98] = "0b10111100001001000111100000011010";
        ram[99] = "0b00111101000100010111011001100101";
        ram[100] = "0b10111101010101001101010101111010";
        ram[101] = "0b00111011011011101101011010001101";
        ram[102] = "0b10111101000000011100011011000100";
        ram[103] = "0b00111101110011101111011101111111";
        ram[104] = "0b00111100110111111011110011111111";
        ram[105] = "0b10111101011111111001010101011100";
        ram[106] = "0b00111101000011001101110100101000";
        ram[107] = "0b10111011001001001101001001011101";
        ram[108] = "0b10111100111110011111000011110010";
        ram[109] = "0b10111101001011011001110001101011";
        ram[110] = "0b00111101000011111110000010110011";
        ram[111] = "0b10111101001110010101000101011010";
        ram[112] = "0b00111100000101101101110110000111";
        ram[113] = "0b00111101011011011110010110110111";
        ram[114] = "0b00111101100110110100101100110000";
        ram[115] = "0b00111101101110101111100000110001";
        ram[116] = "0b00111011111110000010101010011111";
        ram[117] = "0b00111101001100001100111001101010";
        ram[118] = "0b10111101001111110110110001110111";
        ram[119] = "0b10111101001011101011000001100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_8) {
meminst = new inference_conv2d_f3_2_1_8_ram("inference_conv2d_f3_2_1_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_8() {
    delete meminst;
}


};//endmodule
#endif
