// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_11_H__
#define __inference_conv2d_f3_4_0_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_11_ram) {
        ram[0] = "0b10111101101100011110100111110010";
        ram[1] = "0b10111101010000110011110011100110";
        ram[2] = "0b10111101101101110000001010110001";
        ram[3] = "0b10111101100110111001110111011110";
        ram[4] = "0b00111100011111010011101100101010";
        ram[5] = "0b10111101110111001000010000110000";
        ram[6] = "0b00111101010001100101101010101000";
        ram[7] = "0b10111110000100001100001100001001";
        ram[8] = "0b10111110000101101011001101111000";
        ram[9] = "0b00111101111010010011111110101111";
        ram[10] = "0b10111101110101011110001100010001";
        ram[11] = "0b00111101100111011111111101001100";
        ram[12] = "0b00111100111010110001010000010101";
        ram[13] = "0b10111100111000011101110110100000";
        ram[14] = "0b00111010001011111001000001001000";
        ram[15] = "0b10111101000010011111010110111000";
        ram[16] = "0b10111101101001011000110111111001";
        ram[17] = "0b10111100110000100101010011011001";
        ram[18] = "0b00111101110100001111011000100111";
        ram[19] = "0b00111010100001100001111000111101";
        ram[20] = "0b00111101010101111110010111101011";
        ram[21] = "0b10111101011000111101000010100101";
        ram[22] = "0b00111101101101100001001000011000";
        ram[23] = "0b10111110000100001111111111011010";
        ram[24] = "0b10111110000011100101100110110000";
        ram[25] = "0b00111110000000011100100001100101";
        ram[26] = "0b00111100110111110010011000000000";
        ram[27] = "0b10111101000001000110011000010001";
        ram[28] = "0b10111101000010001110110000111000";
        ram[29] = "0b10111101110010001010101101101010";
        ram[30] = "0b00111101011000111010101010010101";
        ram[31] = "0b10111101101011110010101001110101";
        ram[32] = "0b00111110001110111100111010000101";
        ram[33] = "0b00111101000110001010110111100001";
        ram[34] = "0b00111100100010000000011001011111";
        ram[35] = "0b00111100110000001011101000000100";
        ram[36] = "0b10111101101001100001100111001101";
        ram[37] = "0b10111100100100000011111000000110";
        ram[38] = "0b10111101011110011010110000101001";
        ram[39] = "0b00111100111001100011100000001110";
        ram[40] = "0b00111100011100010011111010011100";
        ram[41] = "0b10111011111001000010010101011001";
        ram[42] = "0b10111101000101100100000000101110";
        ram[43] = "0b10111100101101100110111001010001";
        ram[44] = "0b10111101100001100000001111111110";
        ram[45] = "0b00111101100010010100110101010001";
        ram[46] = "0b10111101011101000010110000100010";
        ram[47] = "0b10111101011011110010011011111111";
        ram[48] = "0b00111110001000010110011010011101";
        ram[49] = "0b10111100010010111100111101110111";
        ram[50] = "0b00111101101110010111111001001001";
        ram[51] = "0b00111010000100111110100101011111";
        ram[52] = "0b10111011010010011111000111010001";
        ram[53] = "0b00111110001011001011111000011111";
        ram[54] = "0b00111011010001011011111010010001";
        ram[55] = "0b00111100101001111110110001111000";
        ram[56] = "0b00111101100100011111010101010011";
        ram[57] = "0b10111101011111010001000001100001";
        ram[58] = "0b00111100001101100100100111010100";
        ram[59] = "0b10111110010001111010101010101100";
        ram[60] = "0b00111101110101001111110001100001";
        ram[61] = "0b00111100000110001010011101101100";
        ram[62] = "0b00111101001011010111100111101011";
        ram[63] = "0b10111100100000110101001011010001";
        ram[64] = "0b00111101100010111001110011111010";
        ram[65] = "0b00111101110010000010010010011111";
        ram[66] = "0b10111100110100100001001000011100";
        ram[67] = "0b00111101011010101110111011110111";
        ram[68] = "0b00111101101101010110100000101100";
        ram[69] = "0b00111101101010011011010100111011";
        ram[70] = "0b10111101000111001101100101010101";
        ram[71] = "0b00111101100100111011101001101010";
        ram[72] = "0b00111110001011001011111000011111";
        ram[73] = "0b00111101010011111111111101101100";
        ram[74] = "0b00111100111111111011111011000111";
        ram[75] = "0b10111101101001100100111011011100";
        ram[76] = "0b10111100100001101111010011100111";
        ram[77] = "0b10111101001001001010010110000001";
        ram[78] = "0b00111110001111111001000101100000";
        ram[79] = "0b00111101000110100101010100010110";
        ram[80] = "0b10111101110100100101010101101101";
        ram[81] = "0b00111101110111001000101001111010";
        ram[82] = "0b00111110000001110101100110101011";
        ram[83] = "0b00111110000110010010100000010111";
        ram[84] = "0b00111110000111010111000101101101";
        ram[85] = "0b10111101000000011111110001011010";
        ram[86] = "0b10111010001000101000001101000101";
        ram[87] = "0b00111101000000011110101111111110";
        ram[88] = "0b10111101110000000000100100011111";
        ram[89] = "0b00111101111111111111010110000100";
        ram[90] = "0b10111101110001101001000111000010";
        ram[91] = "0b00111010111100110110111101001110";
        ram[92] = "0b00111101010000101111001000001000";
        ram[93] = "0b00111010111110111001011100010000";
        ram[94] = "0b00111101100000101100000011110101";
        ram[95] = "0b10111011001111000011110010110010";
        ram[96] = "0b10111110000101101100101101010011";
        ram[97] = "0b10111100110010111111100100110011";
        ram[98] = "0b00111101100001001000100011101110";
        ram[99] = "0b10111101111100001011010100100100";
        ram[100] = "0b10111101110010001011110111111010";
        ram[101] = "0b10111100111111010001010110100000";
        ram[102] = "0b00111101100100001000011000111000";
        ram[103] = "0b00111011111111100000111100100101";
        ram[104] = "0b00111100110100101100110000100000";
        ram[105] = "0b10111101100101110110000001000111";
        ram[106] = "0b10111110001110100010101110011101";
        ram[107] = "0b00111100011000010100010010111110";
        ram[108] = "0b10111101111001010001110010011111";
        ram[109] = "0b00111110001101101011101000000110";
        ram[110] = "0b10111100001011010001101000010100";
        ram[111] = "0b10111101000000100000011001010000";
        ram[112] = "0b10111100011000110010000001100001";
        ram[113] = "0b10111011110101001110110000101011";
        ram[114] = "0b10111101010101000001010111001100";
        ram[115] = "0b10111101100100011011001110100010";
        ram[116] = "0b00111101001110101000011001011110";
        ram[117] = "0b00111101100110110111000011010100";
        ram[118] = "0b00111110000010110010101111111110";
        ram[119] = "0b10111101101100001001001100101011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_11) {
meminst = new inference_conv2d_f3_4_0_11_ram("inference_conv2d_f3_4_0_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_11() {
    delete meminst;
}


};//endmodule
#endif
