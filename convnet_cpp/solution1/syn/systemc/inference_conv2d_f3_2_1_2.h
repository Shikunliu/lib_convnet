// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_2_H__
#define __inference_conv2d_f3_2_1_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_2_ram) {
        ram[0] = "0b00111101111010001001111000110100";
        ram[1] = "0b00111101101100000010101110011111";
        ram[2] = "0b10111100100111110000000101001101";
        ram[3] = "0b10111100000110110101101011110000";
        ram[4] = "0b10111100111110011010010010011100";
        ram[5] = "0b10111110000000010000111010001000";
        ram[6] = "0b10111110000000111111011110001100";
        ram[7] = "0b10111101100010101000100101001110";
        ram[8] = "0b00111101000011110000100011100111";
        ram[9] = "0b10111110000101010011110001011000";
        ram[10] = "0b10111101110100100111100110011010";
        ram[11] = "0b00111101001011001011001111110011";
        ram[12] = "0b10111101100010101100111000001010";
        ram[13] = "0b00111101001010101110010110000111";
        ram[14] = "0b10111100100001001000100110011101";
        ram[15] = "0b10111101101011011011110110101000";
        ram[16] = "0b00111101100000010011011101111011";
        ram[17] = "0b10111110010010110000100101100011";
        ram[18] = "0b10111101110101110010111111111101";
        ram[19] = "0b00111101000100111101010111010110";
        ram[20] = "0b10111101001101001001010010010010";
        ram[21] = "0b10111110001001101101111111000110";
        ram[22] = "0b10111101001110110110101101111011";
        ram[23] = "0b10111101001101100101111111011001";
        ram[24] = "0b10111101100011111001100011010010";
        ram[25] = "0b10111110001111000111001000011001";
        ram[26] = "0b00111101101001100110000110000110";
        ram[27] = "0b00111101100011011101001110010011";
        ram[28] = "0b10111101101101011001001001101110";
        ram[29] = "0b00111101100001011010111000000010";
        ram[30] = "0b10111101001110110111111001000000";
        ram[31] = "0b10111101101010001001010111011110";
        ram[32] = "0b00111110010000101101110100110111";
        ram[33] = "0b10111101100000011010000001111111";
        ram[34] = "0b10111110001011011010111011000101";
        ram[35] = "0b00111100000001010101100101111011";
        ram[36] = "0b00111101110001100000101000000101";
        ram[37] = "0b00111101111001110001010011111101";
        ram[38] = "0b00111101101000100110000001110000";
        ram[39] = "0b10111100001010110111110011110001";
        ram[40] = "0b10111101101111000000100001100111";
        ram[41] = "0b10111110001001111001001110011010";
        ram[42] = "0b00111100011010010001111010101000";
        ram[43] = "0b00111100011101101110110100110010";
        ram[44] = "0b00111100101000010000010000100111";
        ram[45] = "0b10111101100000001111001010110001";
        ram[46] = "0b10111100111001010111101111110000";
        ram[47] = "0b00111100111111001101010100111110";
        ram[48] = "0b00111110000010010110010110110010";
        ram[49] = "0b00111110001010100101011111101011";
        ram[50] = "0b10111101101010110011101001101001";
        ram[51] = "0b10111100111101000111001100111010";
        ram[52] = "0b10111101101110011111110010010110";
        ram[53] = "0b00111101011110110101110111011010";
        ram[54] = "0b10111100100000101100100100111110";
        ram[55] = "0b00111101101100111000010011000111";
        ram[56] = "0b10111101000000001011010101001100";
        ram[57] = "0b00111101101100011011111010110010";
        ram[58] = "0b00111110010000010000101011011101";
        ram[59] = "0b10111110000000101001100100001111";
        ram[60] = "0b00111101011111011110111000101000";
        ram[61] = "0b00111101000110110010110010010001";
        ram[62] = "0b00111101010001111100010100001011";
        ram[63] = "0b00111100101011000001110010111110";
        ram[64] = "0b10111101000101000010101011000101";
        ram[65] = "0b00111100010111101101010101111000";
        ram[66] = "0b10111100010100100101000010011010";
        ram[67] = "0b10111101110100110100010110001101";
        ram[68] = "0b10111110001110110000010000100101";
        ram[69] = "0b10111110001010110010110010000100";
        ram[70] = "0b00111101111111110011100000111111";
        ram[71] = "0b00111101011101000000010101010110";
        ram[72] = "0b10111110001000110010111111001011";
        ram[73] = "0b10111100101101010001000111111011";
        ram[74] = "0b10111100100101111101000100001101";
        ram[75] = "0b00111101000101010111111101011001";
        ram[76] = "0b10111101111000100110010011100101";
        ram[77] = "0b00111100001101111111010100111010";
        ram[78] = "0b00111101100100001010011101011010";
        ram[79] = "0b00111101001111111100110000110011";
        ram[80] = "0b00111110001010111011111100001110";
        ram[81] = "0b10111110001110001111100110110001";
        ram[82] = "0b10111101110010011000110100000100";
        ram[83] = "0b10111101011100010111101101010011";
        ram[84] = "0b10111100110111101011010101100010";
        ram[85] = "0b10111100110110010001111001001010";
        ram[86] = "0b10111110000010111101011111110101";
        ram[87] = "0b10111011101011011101001010100001";
        ram[88] = "0b10111101101111000000111101111011";
        ram[89] = "0b10111101110101101111010000111000";
        ram[90] = "0b10111011111101101110001011100000";
        ram[91] = "0b00111100101111000101110000000111";
        ram[92] = "0b00111101011000101111101000000000";
        ram[93] = "0b00111101010000101111100111001010";
        ram[94] = "0b10111101110001000111101000001011";
        ram[95] = "0b10111101000011111000011100001100";
        ram[96] = "0b00111101001001100010000110111000";
        ram[97] = "0b10111101100011101111110001111010";
        ram[98] = "0b10111110010110011011001010000001";
        ram[99] = "0b10111101000011110100010010101100";
        ram[100] = "0b10111110000110000100011001100011";
        ram[101] = "0b10111110000010101101000100000111";
        ram[102] = "0b00111101111111010001101010101000";
        ram[103] = "0b10111101101100100000101111011110";
        ram[104] = "0b10111100110000011100001010101110";
        ram[105] = "0b00111101111011000111000000000000";
        ram[106] = "0b00111100101101011001010010100010";
        ram[107] = "0b00111110001100101110011100101110";
        ram[108] = "0b10111101101001011001000111000000";
        ram[109] = "0b00111011001010001111010100000001";
        ram[110] = "0b10111100110101100110010110011101";
        ram[111] = "0b10111100011111111110000101100010";
        ram[112] = "0b10111101101100110100000011110000";
        ram[113] = "0b00111101111111101010010011101100";
        ram[114] = "0b00111011111111000110010110101100";
        ram[115] = "0b00111101110110010100110010001000";
        ram[116] = "0b10111100100000110000011001000101";
        ram[117] = "0b10111101101011110110101111010110";
        ram[118] = "0b10111100100111001101010111000100";
        ram[119] = "0b00111101110000110111001100001111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_2) {
meminst = new inference_conv2d_f3_2_1_2_ram("inference_conv2d_f3_2_1_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_2() {
    delete meminst;
}


};//endmodule
#endif
