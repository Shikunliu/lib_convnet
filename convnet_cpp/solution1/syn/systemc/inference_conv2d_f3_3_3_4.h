// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_4_H__
#define __inference_conv2d_f3_3_3_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_4_ram) {
        ram[0] = "0b00111101111010100000000100100110";
        ram[1] = "0b00111100111101010111100111001010";
        ram[2] = "0b10111011110011110000100000111011";
        ram[3] = "0b10111100110010100111011110111110";
        ram[4] = "0b10111101101110100011011001011101";
        ram[5] = "0b00111100100101001001010011100010";
        ram[6] = "0b00111110001011000001110011100111";
        ram[7] = "0b10111100000011001101111111011000";
        ram[8] = "0b10111100111101010111111010011101";
        ram[9] = "0b10111101110101010110001010011110";
        ram[10] = "0b10111101001011111010000111001001";
        ram[11] = "0b10111110000010111100101101100000";
        ram[12] = "0b00111101100111101100110111010001";
        ram[13] = "0b00111110000010001100001111110100";
        ram[14] = "0b00111110000010110001011110001011";
        ram[15] = "0b00111110000011101001011010000001";
        ram[16] = "0b10111100101111011000111110101110";
        ram[17] = "0b00111101001010010101010000000111";
        ram[18] = "0b00111101110111001000111000100110";
        ram[19] = "0b00111100001111110111111100000110";
        ram[20] = "0b00111110000111111001111000111000";
        ram[21] = "0b00111100111111110111101101110110";
        ram[22] = "0b00111101101011101011101111010101";
        ram[23] = "0b10111110000000101111111101001100";
        ram[24] = "0b10111110000100100001011111010011";
        ram[25] = "0b00111101100010101100101100001101";
        ram[26] = "0b00111100101110001101100000100011";
        ram[27] = "0b10111101100010110110101011110101";
        ram[28] = "0b00111011100010100011100111010101";
        ram[29] = "0b10111110000100001100101101101100";
        ram[30] = "0b10111101100010100001101011111111";
        ram[31] = "0b00111110001111111111001001011110";
        ram[32] = "0b10111011001000101110000011000000";
        ram[33] = "0b00111101110100100100111010011100";
        ram[34] = "0b10111101101001000001010100111000";
        ram[35] = "0b00111100101001110010100010011001";
        ram[36] = "0b00111110000000000010111001100110";
        ram[37] = "0b10111011000100100100110011001001";
        ram[38] = "0b10111101000111111010011001011001";
        ram[39] = "0b00111101100001010011101110001110";
        ram[40] = "0b00111101110000100110010100101000";
        ram[41] = "0b10111101101011111000001010010111";
        ram[42] = "0b10111101000010010101011000111011";
        ram[43] = "0b10111101110001111011011101110111";
        ram[44] = "0b00111101100000101100111000111001";
        ram[45] = "0b10111110000011011001101010010101";
        ram[46] = "0b10111110000111000110000110010101";
        ram[47] = "0b00111101010110110000110111110011";
        ram[48] = "0b00111101001111001000001011010011";
        ram[49] = "0b00111110001101010111110011010100";
        ram[50] = "0b00111101101110110110011100101111";
        ram[51] = "0b00111101101011101110100110001101";
        ram[52] = "0b10111101101010111100110100001101";
        ram[53] = "0b10111101110111111011001011101110";
        ram[54] = "0b10111101010100010110101111001110";
        ram[55] = "0b10111101110100101000100101010101";
        ram[56] = "0b10111110000001101110111011111010";
        ram[57] = "0b10111100001000011001000100110101";
        ram[58] = "0b10111100100011101101000011101001";
        ram[59] = "0b00111101010011100110110110110111";
        ram[60] = "0b00111101100110010100110010100010";
        ram[61] = "0b00111101100111000001000110100001";
        ram[62] = "0b10111011101110111100100010000011";
        ram[63] = "0b10111101101000101111100100101001";
        ram[64] = "0b00111110000010101111100100100011";
        ram[65] = "0b10111101001000000010001001001010";
        ram[66] = "0b10111101110000011001101000001100";
        ram[67] = "0b10111110010001001101100010111010";
        ram[68] = "0b00111101101010011111001101001110";
        ram[69] = "0b00111110011000001000110100001001";
        ram[70] = "0b10111110000101110010000111010101";
        ram[71] = "0b10111101111101100001000100110100";
        ram[72] = "0b00111110001101101101011011011100";
        ram[73] = "0b00111101000111000110010010000101";
        ram[74] = "0b10111100101010000101011001100000";
        ram[75] = "0b10111101110011100010100111111010";
        ram[76] = "0b10111100110101010000100001110000";
        ram[77] = "0b00111100100010000111110101000111";
        ram[78] = "0b00111101111110010000100001011111";
        ram[79] = "0b00111101000011000111100111000001";
        ram[80] = "0b00111110000001000100000111111111";
        ram[81] = "0b00111101001101111101100010011010";
        ram[82] = "0b10111100000111000001110100101101";
        ram[83] = "0b10111101100100101000100000100000";
        ram[84] = "0b00111101001000100111110001100001";
        ram[85] = "0b00111101011101101001000011101011";
        ram[86] = "0b10111011001100010101001100011111";
        ram[87] = "0b10111101011100100011010101110010";
        ram[88] = "0b00111101101010110000101001110000";
        ram[89] = "0b00111010100111110101101011001111";
        ram[90] = "0b10111100101010100100110000000100";
        ram[91] = "0b10111101101110001011101001110111";
        ram[92] = "0b00111101001000101110110111010110";
        ram[93] = "0b00111101000100001111111101000111";
        ram[94] = "0b10111101100110110011011010100010";
        ram[95] = "0b10111101011100101011001111100111";
        ram[96] = "0b00111101110011110010101011100000";
        ram[97] = "0b10111110000111100000011101011111";
        ram[98] = "0b10111001001100010101110100001101";
        ram[99] = "0b10111101111011101011110111010011";
        ram[100] = "0b10111101110001111110101110000111";
        ram[101] = "0b10111101000011011110000000101000";
        ram[102] = "0b00111011010101100000010010101111";
        ram[103] = "0b00111101000000111010111010010001";
        ram[104] = "0b10111101000110111110010101010100";
        ram[105] = "0b10111101000001100100000111101001";
        ram[106] = "0b10111101110110001010001100101111";
        ram[107] = "0b10111101001110101111101011011110";
        ram[108] = "0b10111101110011101110110100000011";
        ram[109] = "0b10111100111001000000110010111010";
        ram[110] = "0b00111100110100000011001001000111";
        ram[111] = "0b00111101011001000100100111011100";
        ram[112] = "0b10111110000101001111100010110110";
        ram[113] = "0b10111101001000100010001110010001";
        ram[114] = "0b10111110000101000111011111111111";
        ram[115] = "0b00111100100111100101110001000001";
        ram[116] = "0b00111101000011101111000110111011";
        ram[117] = "0b00111100101101001101000001010111";
        ram[118] = "0b10111101100100001010011110000011";
        ram[119] = "0b00111110000001000100110001111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_4) {
meminst = new inference_conv2d_f3_3_3_4_ram("inference_conv2d_f3_3_3_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_4() {
    delete meminst;
}


};//endmodule
#endif
