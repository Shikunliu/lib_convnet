// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_13_H__
#define __inference_conv2d_f3_4_2_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_13_ram) {
        ram[0] = "0b10111100101110001010011001101111";
        ram[1] = "0b00111101001010011110101001100101";
        ram[2] = "0b00111101000000110010101011000010";
        ram[3] = "0b10111110000101010010111010110110";
        ram[4] = "0b10111110010110101110010110111101";
        ram[5] = "0b00111101101010101111010010000101";
        ram[6] = "0b10111101010000111111100101101111";
        ram[7] = "0b10111101000100100101110100010101";
        ram[8] = "0b00111100110111100001000110011001";
        ram[9] = "0b00111100110110111100000010000110";
        ram[10] = "0b00111101111011000110011110011101";
        ram[11] = "0b10111110001110111001001011000000";
        ram[12] = "0b10111101011100101011110100000111";
        ram[13] = "0b00111101110001100000111001010010";
        ram[14] = "0b00111110001001100000001100001100";
        ram[15] = "0b10111010111101111011100110001010";
        ram[16] = "0b00111100101000111100000111011100";
        ram[17] = "0b10111011110010111101111110100111";
        ram[18] = "0b00111101100100110000011101000100";
        ram[19] = "0b10111101100010010100100110100101";
        ram[20] = "0b10111101101000100001001100101000";
        ram[21] = "0b00111101111011011111011110100101";
        ram[22] = "0b10111101100101011010111000000010";
        ram[23] = "0b00111100111011011111001011101101";
        ram[24] = "0b10111100010011111110110111101001";
        ram[25] = "0b00111101111101000011001000000001";
        ram[26] = "0b10111110000011110111011000011101";
        ram[27] = "0b10111101001110011001111100001101";
        ram[28] = "0b10111101110111001111101100110011";
        ram[29] = "0b00111100100111101110101001110001";
        ram[30] = "0b10111110001001100000101001100011";
        ram[31] = "0b10111110001101110111001010010011";
        ram[32] = "0b00111100110101110111111001101100";
        ram[33] = "0b10111011111000111000010001001001";
        ram[34] = "0b10111101000101111100001110000110";
        ram[35] = "0b10111110010000101010110010111000";
        ram[36] = "0b10111101110001100000010110010000";
        ram[37] = "0b00111100110010000011011111011101";
        ram[38] = "0b00111101100111110110011000011111";
        ram[39] = "0b10111101110000000000011000010101";
        ram[40] = "0b10111101101100110011110100001110";
        ram[41] = "0b10111100011000100000101111111001";
        ram[42] = "0b10111100110010111000000110101001";
        ram[43] = "0b10111110000100011010100010101100";
        ram[44] = "0b00111110000001110100001000010100";
        ram[45] = "0b00111101110000011100000010111101";
        ram[46] = "0b10111101010110100011000001100011";
        ram[47] = "0b10111110011001000101010000010101";
        ram[48] = "0b10111110000000110111001111110011";
        ram[49] = "0b00111100000010000110111011100100";
        ram[50] = "0b10111101101011110100101011101001";
        ram[51] = "0b00111101111111101000111011100111";
        ram[52] = "0b10111100011011111011010011000100";
        ram[53] = "0b10111011100000100100111001111001";
        ram[54] = "0b10111101100100011110011110111111";
        ram[55] = "0b10111100111001100110000000011100";
        ram[56] = "0b00111110000001011111010001011110";
        ram[57] = "0b00111100101101110101111001110001";
        ram[58] = "0b10111101011101011001011010100000";
        ram[59] = "0b00111101111110101011110000001110";
        ram[60] = "0b00111101100100111101111111100111";
        ram[61] = "0b10111101101000100010100101001000";
        ram[62] = "0b10111101001100110000110101011001";
        ram[63] = "0b00111101000111001100001001000011";
        ram[64] = "0b10111101100001101001000100111100";
        ram[65] = "0b10111110000110101111001111100100";
        ram[66] = "0b00111101010000111000011110101010";
        ram[67] = "0b00111101010001011101111110101000";
        ram[68] = "0b00111011000000100100110101111000";
        ram[69] = "0b00111101110001001011000101000000";
        ram[70] = "0b10111101101101010101101011000000";
        ram[71] = "0b00111100100000100110000001100010";
        ram[72] = "0b00111101001010011111000100110101";
        ram[73] = "0b10111101111110101010001101101010";
        ram[74] = "0b00111100101010100010101001000000";
        ram[75] = "0b10111100100001011110101100110001";
        ram[76] = "0b10111101100011010111100111010001";
        ram[77] = "0b10111101110001110011011110100101";
        ram[78] = "0b10111110000110110010000100111110";
        ram[79] = "0b10111110001000001001000001110001";
        ram[80] = "0b10111110001110010001011011001010";
        ram[81] = "0b10111100100010110010011111100111";
        ram[82] = "0b00111100100110001000100010001101";
        ram[83] = "0b00111101111011100100010010110111";
        ram[84] = "0b00111101110010101011011100100001";
        ram[85] = "0b10111101100011110011011101011011";
        ram[86] = "0b10111101101000100100100101000011";
        ram[87] = "0b10111100101110110111000000011001";
        ram[88] = "0b10111101100001110001010010011111";
        ram[89] = "0b10111110000011101011101001101011";
        ram[90] = "0b00111100111010100101000011010111";
        ram[91] = "0b10111110001010001100111101111101";
        ram[92] = "0b10111101001101010001110100110011";
        ram[93] = "0b10111101101111011100100110101010";
        ram[94] = "0b00111101000100101110100110010111";
        ram[95] = "0b10111110000011001001110001001110";
        ram[96] = "0b10111100011101000010010000101010";
        ram[97] = "0b10111101111110011000001010001000";
        ram[98] = "0b00111101001111000000100011000101";
        ram[99] = "0b10111101111010010001100001011101";
        ram[100] = "0b00111110001101100101110010110011";
        ram[101] = "0b10111100110100110110001101010100";
        ram[102] = "0b10111100010111111111010100110011";
        ram[103] = "0b10111101010001100110000100001101";
        ram[104] = "0b10111101001101100101010011110001";
        ram[105] = "0b00111100111101111100110000011111";
        ram[106] = "0b00111101010111100001100101000000";
        ram[107] = "0b00111101010011100000010000000100";
        ram[108] = "0b10111110001001101010000111101000";
        ram[109] = "0b10111110010101100000110101000101";
        ram[110] = "0b00111101011000101010111110001101";
        ram[111] = "0b00111110001111011011010100001111";
        ram[112] = "0b10111101101001001100111001011001";
        ram[113] = "0b10111010001010111111011001111010";
        ram[114] = "0b10111101101011000011100011011001";
        ram[115] = "0b10111101111011100101110111100001";
        ram[116] = "0b00111101001110001011010010110010";
        ram[117] = "0b00111110000100100010101001101111";
        ram[118] = "0b00111100101101111001101000110110";
        ram[119] = "0b00111110001110000001011110111001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_13) {
meminst = new inference_conv2d_f3_4_2_13_ram("inference_conv2d_f3_4_2_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_13() {
    delete meminst;
}


};//endmodule
#endif
