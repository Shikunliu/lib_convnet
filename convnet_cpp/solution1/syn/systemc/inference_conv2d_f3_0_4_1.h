// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_1_H__
#define __inference_conv2d_f3_0_4_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_1_ram) {
        ram[0] = "0b00111110001110100111011100011101";
        ram[1] = "0b10111101101000010110110100000010";
        ram[2] = "0b10111101110000110110101000001010";
        ram[3] = "0b10111110000101011110011000110110";
        ram[4] = "0b00111101011011101110101010011001";
        ram[5] = "0b10111100111010011110101111110111";
        ram[6] = "0b00111110010111100111011010000110";
        ram[7] = "0b00111110001110000101100000110110";
        ram[8] = "0b10111101100011100010010000001101";
        ram[9] = "0b00111101101010010111101010011101";
        ram[10] = "0b00111101001000111101010001010000";
        ram[11] = "0b00111110000001000110000110110111";
        ram[12] = "0b00111100110100000100111100000011";
        ram[13] = "0b00111101000000010110011010000010";
        ram[14] = "0b10111101001001101101100111011001";
        ram[15] = "0b10111100110000100111010010000100";
        ram[16] = "0b00111110000111010101000011101100";
        ram[17] = "0b10111101111110110001000001110111";
        ram[18] = "0b00111101100110111110001011111000";
        ram[19] = "0b00111011110001111001101110100000";
        ram[20] = "0b10111101010011000001110010111110";
        ram[21] = "0b00111100100110000111100010011101";
        ram[22] = "0b10111110000000110010111010111110";
        ram[23] = "0b00111101101000100110000001111101";
        ram[24] = "0b10111100000010010010000101011100";
        ram[25] = "0b00111101010111100111000100011111";
        ram[26] = "0b00111101000111111101001011101001";
        ram[27] = "0b10111110000110111010010100011010";
        ram[28] = "0b00111101011101010011111110011000";
        ram[29] = "0b00111110000111101111000000101000";
        ram[30] = "0b10111100110101011010111011110100";
        ram[31] = "0b00111101001011100001100110000011";
        ram[32] = "0b00111100101010011111010011111100";
        ram[33] = "0b00111101011001101100101000000100";
        ram[34] = "0b10111101110100001001010100101001";
        ram[35] = "0b10111101001100100100001011000011";
        ram[36] = "0b00111101000101001000010101111000";
        ram[37] = "0b00111101100110101000110100000111";
        ram[38] = "0b10111011110010000110111101110000";
        ram[39] = "0b10111101100000100110011100100110";
        ram[40] = "0b10111101110001101010011100100110";
        ram[41] = "0b00111100100100111000000100011100";
        ram[42] = "0b10111100110001101101000111100001";
        ram[43] = "0b00111101010001111000100001110000";
        ram[44] = "0b10111101000111110011011000001011";
        ram[45] = "0b10111110000010101101111001100101";
        ram[46] = "0b00111110010011011010101011010110";
        ram[47] = "0b00111101101110101011011101110001";
        ram[48] = "0b10111101100010100010000110100111";
        ram[49] = "0b10111100111111000101000100011111";
        ram[50] = "0b10111101010000110000001101110000";
        ram[51] = "0b00111101000010011000110000111011";
        ram[52] = "0b10111101111100000010011110010101";
        ram[53] = "0b00111110001000001101111000001001";
        ram[54] = "0b10111101110100111011101001110111";
        ram[55] = "0b00111101111000110001111100000100";
        ram[56] = "0b10110111001010000001110110111000";
        ram[57] = "0b00111110001010010000010001110001";
        ram[58] = "0b00111101100000011000011000010010";
        ram[59] = "0b00111110001010001000100000101111";
        ram[60] = "0b10111100010111110011101101100100";
        ram[61] = "0b10111110001010011011110111000111";
        ram[62] = "0b10111100111100110100001100100011";
        ram[63] = "0b00111101101001010110001100001001";
        ram[64] = "0b10111101100100101011111000100000";
        ram[65] = "0b10111101111111100001010101000100";
        ram[66] = "0b00111101101110001101111111001011";
        ram[67] = "0b00111011100010010001110111001011";
        ram[68] = "0b10111110000010100011011010100000";
        ram[69] = "0b10111101000000111110111101000011";
        ram[70] = "0b10111110001000110011100111000001";
        ram[71] = "0b00111011011101110101101001101010";
        ram[72] = "0b10111101100101000101110111010110";
        ram[73] = "0b00111101110101010011011100011001";
        ram[74] = "0b00111110000101100101000101101110";
        ram[75] = "0b00111101101100001101100100011100";
        ram[76] = "0b10111110000001010001001001100110";
        ram[77] = "0b00111110001100011010101011000101";
        ram[78] = "0b00111101101111001011101000010101";
        ram[79] = "0b00111100111111000010011011000010";
        ram[80] = "0b00111101110001101001101000011000";
        ram[81] = "0b00111101011010100011010110010011";
        ram[82] = "0b00111101000001011101010000000101";
        ram[83] = "0b00111101000000101110000011110000";
        ram[84] = "0b00111101001001010000100100111001";
        ram[85] = "0b00111101100001001110001001010010";
        ram[86] = "0b10111101000001010111000100001001";
        ram[87] = "0b00111101110110101101110010010000";
        ram[88] = "0b10111101001110110001010111101011";
        ram[89] = "0b00111101100010010010001101100000";
        ram[90] = "0b00111100011111100000010000010010";
        ram[91] = "0b10111101101011001011001100101010";
        ram[92] = "0b00111100000100011110111100010110";
        ram[93] = "0b10111101001010010111100011010101";
        ram[94] = "0b00111100000101001111010011001111";
        ram[95] = "0b10111110001010000010100011000011";
        ram[96] = "0b00111101111001010111001110101000";
        ram[97] = "0b00111101100110101001101011011110";
        ram[98] = "0b00111100101000000000011010011011";
        ram[99] = "0b00111110000011000000010100001100";
        ram[100] = "0b10111101000111010001000100111000";
        ram[101] = "0b10111101001011001001100000001110";
        ram[102] = "0b00111110000001001000001110001000";
        ram[103] = "0b10111110000011010011010101100101";
        ram[104] = "0b10111110000000001011100011010000";
        ram[105] = "0b00111101110010101111110001111110";
        ram[106] = "0b00111101100000110000100010010011";
        ram[107] = "0b10111100101000011000110100011001";
        ram[108] = "0b10111101001101111011100101011010";
        ram[109] = "0b10111101101100000111110110111001";
        ram[110] = "0b00111101000001010010000001001011";
        ram[111] = "0b00111100110011111111010111100010";
        ram[112] = "0b10111101101000010000000101111010";
        ram[113] = "0b00111101000100101110011110110100";
        ram[114] = "0b10111101100010101001001000011101";
        ram[115] = "0b00111110001000101101001000110101";
        ram[116] = "0b10111101001101101110110110011101";
        ram[117] = "0b00111101101101110000011010010010";
        ram[118] = "0b00111101011101010011001000101100";
        ram[119] = "0b10111101111101111010000111000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_1) {
meminst = new inference_conv2d_f3_0_4_1_ram("inference_conv2d_f3_0_4_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_1() {
    delete meminst;
}


};//endmodule
#endif
