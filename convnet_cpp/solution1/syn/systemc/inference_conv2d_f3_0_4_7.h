// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_7_H__
#define __inference_conv2d_f3_0_4_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_7_ram) {
        ram[0] = "0b00111011101010011010101010110100";
        ram[1] = "0b00111100101011000001010000100101";
        ram[2] = "0b10111110000011101100110100001000";
        ram[3] = "0b10111101100111101001111101000010";
        ram[4] = "0b00111100100111110011100000111111";
        ram[5] = "0b00111101011100101011100101110110";
        ram[6] = "0b00111110000110010101100111100110";
        ram[7] = "0b00111100110111000101001000010000";
        ram[8] = "0b10111100111101000001000110000000";
        ram[9] = "0b00111100100111111101011011001010";
        ram[10] = "0b00111101001101110101111101001000";
        ram[11] = "0b10111101101000101100010111001000";
        ram[12] = "0b00111101111010010101001100010101";
        ram[13] = "0b00111101101001000011101100111011";
        ram[14] = "0b10111101001111000101010000101001";
        ram[15] = "0b10111101010111100101001000010101";
        ram[16] = "0b10111101101010001111110111010110";
        ram[17] = "0b10111011011001011011111100001100";
        ram[18] = "0b00111100011100010101101100100010";
        ram[19] = "0b10111101111011111111010111000111";
        ram[20] = "0b00111110010110110110111000001101";
        ram[21] = "0b00111110010010100111011001010011";
        ram[22] = "0b00111101100010100101111001011110";
        ram[23] = "0b00111101010111101010110100110101";
        ram[24] = "0b10111101101101101001111110100111";
        ram[25] = "0b00111100101100000000011011000011";
        ram[26] = "0b10111101000000001111111001100010";
        ram[27] = "0b00111101000010111101110011100011";
        ram[28] = "0b00111101101010111010011001001111";
        ram[29] = "0b00111011010010101100001111011110";
        ram[30] = "0b00111101100010111001101001011011";
        ram[31] = "0b00111100101001100011110111101101";
        ram[32] = "0b00111100101001110010011111111000";
        ram[33] = "0b00111101011111001000010011010001";
        ram[34] = "0b10111101110001111111000110110111";
        ram[35] = "0b00111110000000001100010100100010";
        ram[36] = "0b00111101100110111110001011101010";
        ram[37] = "0b00111101010010001000001010100000";
        ram[38] = "0b10111101001101111110100110010110";
        ram[39] = "0b00111101101110100011101111010001";
        ram[40] = "0b00111101000101100010011010110011";
        ram[41] = "0b10111101010000110001011101011100";
        ram[42] = "0b00111101100011111110100001110110";
        ram[43] = "0b00111101110000110001010011011000";
        ram[44] = "0b00111110000100110101111000110001";
        ram[45] = "0b00111100001001101110101100100110";
        ram[46] = "0b00111100101001000110110111010011";
        ram[47] = "0b10111100100110001111111110101011";
        ram[48] = "0b00111101100001100000110101000101";
        ram[49] = "0b00111100001111001011001100001111";
        ram[50] = "0b00111100000011111111001100000111";
        ram[51] = "0b10111110000010101110000011000001";
        ram[52] = "0b10111101111111110100010001001110";
        ram[53] = "0b10111100111001110011101000000001";
        ram[54] = "0b00111101111101011100000011111101";
        ram[55] = "0b00111101000111000110010101110110";
        ram[56] = "0b10111101010111100111001111011001";
        ram[57] = "0b00111110000011001011000110001001";
        ram[58] = "0b00111101101101110101000010011001";
        ram[59] = "0b10111101010110111011101000100000";
        ram[60] = "0b00111011110101101101101011000011";
        ram[61] = "0b10111100100110000111000001101111";
        ram[62] = "0b10111101001010110010110101110110";
        ram[63] = "0b00111110010000100000010000101001";
        ram[64] = "0b00111100101001010001011110110010";
        ram[65] = "0b10111011011110000100000111000110";
        ram[66] = "0b00111011101100010011100100110011";
        ram[67] = "0b10111101100000000110101100011101";
        ram[68] = "0b00111110001101000111000111111000";
        ram[69] = "0b00111101100000000100000011001101";
        ram[70] = "0b00111101011010001010000011010011";
        ram[71] = "0b10111101011010000101111110000000";
        ram[72] = "0b00111101100100000101100110011010";
        ram[73] = "0b00111110010100011101101010111110";
        ram[74] = "0b00111101001101010000001011000111";
        ram[75] = "0b00111101001101110000001100000001";
        ram[76] = "0b00111101001000001001010001100000";
        ram[77] = "0b10111110000110101011110101011110";
        ram[78] = "0b10111100110000001011110111001011";
        ram[79] = "0b00111100111110101101101011000111";
        ram[80] = "0b00111011011000100101010100011111";
        ram[81] = "0b00111110000001111011111010011000";
        ram[82] = "0b10111101100011110110110101011011";
        ram[83] = "0b00111110001010111101110110111010";
        ram[84] = "0b00111101100101001011100100000010";
        ram[85] = "0b00111100100001100001011100000110";
        ram[86] = "0b00111101010101101100000100100111";
        ram[87] = "0b00111100111010111010001011100110";
        ram[88] = "0b10111101011001010000001000011000";
        ram[89] = "0b10111101100101001100010001010101";
        ram[90] = "0b00111100100011111000011100100111";
        ram[91] = "0b00111101001100110110100001011101";
        ram[92] = "0b10111101100100101001111010101011";
        ram[93] = "0b00111101100000100101011110100001";
        ram[94] = "0b00111101111100011000011001010101";
        ram[95] = "0b00111101100111011111000011101111";
        ram[96] = "0b00111101111000000000001100100101";
        ram[97] = "0b00111101110100101001101100101000";
        ram[98] = "0b00111100101010011010100110110010";
        ram[99] = "0b00111110001001100110101011011011";
        ram[100] = "0b00111101100111101100110010011100";
        ram[101] = "0b10111101000100000011000100100000";
        ram[102] = "0b10111110001010100110010010000000";
        ram[103] = "0b00111101001001010111101111010101";
        ram[104] = "0b10111110000101101000000001011010";
        ram[105] = "0b00111001110101111110110111111001";
        ram[106] = "0b00111101000001101000001010000000";
        ram[107] = "0b00111110001001011111011001110111";
        ram[108] = "0b00111011101000101100001001100010";
        ram[109] = "0b00111101111101100101001111001010";
        ram[110] = "0b10111110000000010110010001000001";
        ram[111] = "0b00111101110001001000011101110111";
        ram[112] = "0b10111101001111110000011101100010";
        ram[113] = "0b00111110001110111001011100110101";
        ram[114] = "0b10111101110111010010000101111001";
        ram[115] = "0b10111110001011101000000001111100";
        ram[116] = "0b00111110001000101110011101110001";
        ram[117] = "0b10111101110110110011101101110101";
        ram[118] = "0b10111101001001011001010001000100";
        ram[119] = "0b00111101100110110000000000001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_7) {
meminst = new inference_conv2d_f3_0_4_7_ram("inference_conv2d_f3_0_4_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_7() {
    delete meminst;
}


};//endmodule
#endif
