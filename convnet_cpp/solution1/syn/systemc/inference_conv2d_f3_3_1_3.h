// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_3_H__
#define __inference_conv2d_f3_3_1_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_3_ram) {
        ram[0] = "0b00111100101011110101100001111101";
        ram[1] = "0b00111101110100011110010000101110";
        ram[2] = "0b10111101101000000011110000111110";
        ram[3] = "0b10111101011011111100101011111111";
        ram[4] = "0b00111110010011011110101011001101";
        ram[5] = "0b10111101101101100101100101011000";
        ram[6] = "0b10111110000010111111000101100011";
        ram[7] = "0b00111101110110000001011100110011";
        ram[8] = "0b00111101111110010110110010000011";
        ram[9] = "0b00111110010000100110101010101001";
        ram[10] = "0b00111100101010100000000100100110";
        ram[11] = "0b00111110000111001001100111110010";
        ram[12] = "0b00111110000001110000010101000010";
        ram[13] = "0b00111101000100001000000111000011";
        ram[14] = "0b00111101011011001010110010011100";
        ram[15] = "0b00111101101011000001010000100101";
        ram[16] = "0b00111101100001001000000110001010";
        ram[17] = "0b00111110011101000000110111010100";
        ram[18] = "0b10111110011011001110000110000010";
        ram[19] = "0b00111101101001111111011000111001";
        ram[20] = "0b10111101010001010001001110000000";
        ram[21] = "0b10111110000110110111011101111101";
        ram[22] = "0b10111110010000011111100000011010";
        ram[23] = "0b00111101010000010010100100101011";
        ram[24] = "0b00111100110011100100100010011000";
        ram[25] = "0b10111110000000111011000010000001";
        ram[26] = "0b10111110000111110000000001101001";
        ram[27] = "0b10111101101000111100101110110111";
        ram[28] = "0b00111110000001100110101111101000";
        ram[29] = "0b10111101111000111001000101001111";
        ram[30] = "0b00111011101001011100011001100011";
        ram[31] = "0b00111100110110011001110001010100";
        ram[32] = "0b10111101100010011001011011100000";
        ram[33] = "0b10111100101000001011110101000101";
        ram[34] = "0b10111011101000100000001110100000";
        ram[35] = "0b00111100100111101101010111100100";
        ram[36] = "0b00111101110001111100111000010000";
        ram[37] = "0b10111101110011001000101010110000";
        ram[38] = "0b10111101100010101110100010010001";
        ram[39] = "0b10111100101101001000111110111111";
        ram[40] = "0b00111101100110010001011001011111";
        ram[41] = "0b00111110000110010101101101111001";
        ram[42] = "0b00111110000010111000001100000110";
        ram[43] = "0b00111100111100001101110000001011";
        ram[44] = "0b10111101101110111100100100010001";
        ram[45] = "0b00111101011111010101111111111000";
        ram[46] = "0b00111110011000010010101101011110";
        ram[47] = "0b10111100010101010000111110010001";
        ram[48] = "0b10111100010111011011100100011001";
        ram[49] = "0b10111110000000110111100111111011";
        ram[50] = "0b10111101000001001101011100110101";
        ram[51] = "0b00111101110110110000011100000111";
        ram[52] = "0b00111101100100110000100111010101";
        ram[53] = "0b10111101100000001100011100111011";
        ram[54] = "0b10111110000001111010011111001010";
        ram[55] = "0b00111101110110100001000000010111";
        ram[56] = "0b10111101010011011101111110000111";
        ram[57] = "0b10111101100000000100011010101101";
        ram[58] = "0b10111101110111000100000010001110";
        ram[59] = "0b00111110001011101010001000001010";
        ram[60] = "0b00111100001010011001100000010100";
        ram[61] = "0b00111101101010011010110110000110";
        ram[62] = "0b00111101101001010011000011110111";
        ram[63] = "0b10111101000000001000111001001011";
        ram[64] = "0b00111110000101001011110011110001";
        ram[65] = "0b00111101100101001001000100101010";
        ram[66] = "0b10111110010101100000011110000001";
        ram[67] = "0b10111101000111011000010010010000";
        ram[68] = "0b00111011001110111011001000011101";
        ram[69] = "0b10111101111011110000010010011011";
        ram[70] = "0b00111011010111101001011001111001";
        ram[71] = "0b00111100100000111011111000110000";
        ram[72] = "0b10111101111000011011100101110011";
        ram[73] = "0b10111110001101101110100011110011";
        ram[74] = "0b10111110001100011110001000010101";
        ram[75] = "0b10111101000011101110101000010011";
        ram[76] = "0b10111100101010000100111100001001";
        ram[77] = "0b00111110001100010010000010011111";
        ram[78] = "0b10111101101110011100010001010100";
        ram[79] = "0b10111110001001011111101110110101";
        ram[80] = "0b00111110010100110110101100001001";
        ram[81] = "0b10111110010001000111011001101100";
        ram[82] = "0b10111101000010110000100101001000";
        ram[83] = "0b00111101011100110001001110100011";
        ram[84] = "0b10111101010010111101001010110111";
        ram[85] = "0b10111110001110000010001000110110";
        ram[86] = "0b10111101100010100110111010101100";
        ram[87] = "0b00111101101101011101111100111101";
        ram[88] = "0b10111100001110111111111010110100";
        ram[89] = "0b10111101100101001111101101010101";
        ram[90] = "0b10111101101001001100000101001011";
        ram[91] = "0b10111101100111101011100110111100";
        ram[92] = "0b00111011101000101001101001001001";
        ram[93] = "0b00111101110010111001010111110011";
        ram[94] = "0b10111101010011110011011101110110";
        ram[95] = "0b10111101110110011010010100100010";
        ram[96] = "0b10111101100100010110111101111001";
        ram[97] = "0b10111101100010010011010110111001";
        ram[98] = "0b10111101110110001110100011101010";
        ram[99] = "0b10111110000000010101111100000011";
        ram[100] = "0b00111110000001011010111111110011";
        ram[101] = "0b00111110000001110111010011101111";
        ram[102] = "0b10111101000110111101100111001011";
        ram[103] = "0b00111101111000001001010001100000";
        ram[104] = "0b00111101101101011100011011001111";
        ram[105] = "0b10111101001100010001111010111100";
        ram[106] = "0b10111100110011010111001011100101";
        ram[107] = "0b00111100100000000001101101111001";
        ram[108] = "0b00111110000001011100010110110101";
        ram[109] = "0b00111101001011001011011010010010";
        ram[110] = "0b10111101111011001010001101100010";
        ram[111] = "0b10111100010101000110001001011000";
        ram[112] = "0b10111101010011100110011100110110";
        ram[113] = "0b00111110000100101001011101111101";
        ram[114] = "0b10111110010011011000000110101110";
        ram[115] = "0b00111100000000000011011110001000";
        ram[116] = "0b00111101011110110110000110111011";
        ram[117] = "0b00111101011000001100101101101100";
        ram[118] = "0b10111101001010110010101101011101";
        ram[119] = "0b10111101100011111100101101110111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_3) {
meminst = new inference_conv2d_f3_3_1_3_ram("inference_conv2d_f3_3_1_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_3() {
    delete meminst;
}


};//endmodule
#endif
