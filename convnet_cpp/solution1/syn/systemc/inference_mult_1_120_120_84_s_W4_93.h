// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_93_H__
#define __inference_mult_1_120_120_84_s_W4_93_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_93_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_93_ram) {
        ram[0] = "0b00111101100100011111110010001111";
        ram[1] = "0b10111100110001010101010110101010";
        ram[2] = "0b10111101101001111000100100101100";
        ram[3] = "0b00111110010011000110100110110110";
        ram[4] = "0b00111101011010100010101111010011";
        ram[5] = "0b10111101010101010000000010101110";
        ram[6] = "0b10111101101011111100010110011000";
        ram[7] = "0b00111010001010000000011110100100";
        ram[8] = "0b00111101110011000100011111001010";
        ram[9] = "0b10111101100101011100101000101010";
        ram[10] = "0b00111011111110011000011111000001";
        ram[11] = "0b00111101001111101011100001010010";
        ram[12] = "0b00111100100110010101110100110100";
        ram[13] = "0b10111110000111101110111000001111";
        ram[14] = "0b10111101100000010100110010000001";
        ram[15] = "0b10111110001010101011110000001110";
        ram[16] = "0b10111011111011000100001101001010";
        ram[17] = "0b00111100111101100010001110101000";
        ram[18] = "0b10111101111100011010110100100001";
        ram[19] = "0b00111101101010111011000100101001";
        ram[20] = "0b00111101111101011010101101111110";
        ram[21] = "0b10111100111000001110100001111000";
        ram[22] = "0b10111101101001111111001011010000";
        ram[23] = "0b00111101110110000101000101100101";
        ram[24] = "0b00111101110010001011111011011110";
        ram[25] = "0b00111100111111110100100010000000";
        ram[26] = "0b10111101010111010100110101001110";
        ram[27] = "0b10111100101011000000000110110001";
        ram[28] = "0b00111101000110000100111010101011";
        ram[29] = "0b10111101111100111101011111010100";
        ram[30] = "0b10111101001001111110011111000000";
        ram[31] = "0b10111101101111100110000111101011";
        ram[32] = "0b00111101000101000110110101110101";
        ram[33] = "0b10111100011110001010110100100101";
        ram[34] = "0b00111100001011110101011000101111";
        ram[35] = "0b10111110001111111111001101101011";
        ram[36] = "0b10111011110010100001110011101111";
        ram[37] = "0b10111100110111011010001010101000";
        ram[38] = "0b00111101101011001010000101111110";
        ram[39] = "0b10111101000010100100110000011111";
        ram[40] = "0b10111101100100001011010101011010";
        ram[41] = "0b00111101010010011101101000100100";
        ram[42] = "0b10111101101010011010001001000000";
        ram[43] = "0b10111100110111001111101111101111";
        ram[44] = "0b00111011101001011010001000010001";
        ram[45] = "0b00111011000111100111000111000110";
        ram[46] = "0b10111110000101011111110110001011";
        ram[47] = "0b10111101010011011110101101000101";
        ram[48] = "0b00111100101001010111111110000001";
        ram[49] = "0b00111101000000111110011110110110";
        ram[50] = "0b10111100101111001001100000110111";
        ram[51] = "0b00111110000110000101111110001101";
        ram[52] = "0b10111101000110110011110100100011";
        ram[53] = "0b00111100000100101101011010011100";
        ram[54] = "0b10111100001101011011000010111100";
        ram[55] = "0b00111100000000101000110110100100";
        ram[56] = "0b00111101111001101011001001101100";
        ram[57] = "0b10111101100110110011001001010110";
        ram[58] = "0b10111101101010001100111111110101";
        ram[59] = "0b10111101001111011000001010101101";
        ram[60] = "0b10111101111100110100000101011011";
        ram[61] = "0b00111101100001001011011000010010";
        ram[62] = "0b00111110000000101110001111000101";
        ram[63] = "0b10111100110000001010000010100100";
        ram[64] = "0b00111100100000101110111011001000";
        ram[65] = "0b00111101001110110011101001101001";
        ram[66] = "0b00111110000100000010011101010010";
        ram[67] = "0b00111101110111001011000101000110";
        ram[68] = "0b10111101001010101000000000000110";
        ram[69] = "0b10111101001000111111110110100001";
        ram[70] = "0b00111101110101010100100101110011";
        ram[71] = "0b00111101111111101011011101000101";
        ram[72] = "0b00111100110111110101100011110110";
        ram[73] = "0b00111101101100100110000001100010";
        ram[74] = "0b00111100110100100100011010001001";
        ram[75] = "0b00111100111001010110101110010101";
        ram[76] = "0b10111101001010000011011100000110";
        ram[77] = "0b10111101111001100010011001110000";
        ram[78] = "0b00111010000110011000001100111000";
        ram[79] = "0b00111100101001100011111101100101";
        ram[80] = "0b00111110000110110111000110111001";
        ram[81] = "0b10111110000100011010001001100010";
        ram[82] = "0b10111101111100101011010001010011";
        ram[83] = "0b00111101101000011010001111011010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_93) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_93_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_93) {
meminst = new inference_mult_1_120_120_84_s_W4_93_ram("inference_mult_1_120_120_84_s_W4_93_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_93() {
    delete meminst;
}


};//endmodule
#endif
