// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_14_H__
#define __inference_conv2d_f3_2_2_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_14_ram) {
        ram[0] = "0b00111100110100001011000010111101";
        ram[1] = "0b10111101101101001110001110111101";
        ram[2] = "0b00111011111110001001011011101011";
        ram[3] = "0b00111100001000000111000111011011";
        ram[4] = "0b00111110000100000011100111101111";
        ram[5] = "0b10111100101001000010110000101111";
        ram[6] = "0b00111110001010110010011000111001";
        ram[7] = "0b10111011100000011011011010001110";
        ram[8] = "0b10111100010001000101001111101101";
        ram[9] = "0b10111101110110110110000110111011";
        ram[10] = "0b10111101110101001011010000000111";
        ram[11] = "0b00111110000001100110100100000101";
        ram[12] = "0b00111101101000001111011010010011";
        ram[13] = "0b00111101110010011101111000100000";
        ram[14] = "0b00111100100010110010011100010000";
        ram[15] = "0b00111011100110100001101100011111";
        ram[16] = "0b10111101000010101101111110101000";
        ram[17] = "0b10111110001110100101111010111011";
        ram[18] = "0b10111110001011100111010010110000";
        ram[19] = "0b00111101001011011000011100100010";
        ram[20] = "0b10111101001110010001100010000101";
        ram[21] = "0b00111110000011011110011011011110";
        ram[22] = "0b10111101010001101111010010010110";
        ram[23] = "0b00111101111001011100100010010111";
        ram[24] = "0b00111101001110101011111000100111";
        ram[25] = "0b00111101110000101001001110001110";
        ram[26] = "0b00111101111000111110111110101110";
        ram[27] = "0b00111101100001010000000000011010";
        ram[28] = "0b00111101001101010011100111010011";
        ram[29] = "0b00111101011101101111101111100000";
        ram[30] = "0b00111101110010001000011011000101";
        ram[31] = "0b10111011100010111010101101000100";
        ram[32] = "0b00111101100001010101000010111101";
        ram[33] = "0b00111101000001011011101110110001";
        ram[34] = "0b10111100000101000111101101100010";
        ram[35] = "0b00111100111010100100110100010000";
        ram[36] = "0b00111101101100111010010001100101";
        ram[37] = "0b00111101000111010110110011011101";
        ram[38] = "0b10111101110100010011100000110111";
        ram[39] = "0b00111010110100000001000011111010";
        ram[40] = "0b10111101111000101111101101011101";
        ram[41] = "0b00111101000101111001101000011011";
        ram[42] = "0b10111101010010111101101010101111";
        ram[43] = "0b00111101011111011010010111001110";
        ram[44] = "0b00111110000100011011100111111010";
        ram[45] = "0b00111101101110110010110100011000";
        ram[46] = "0b10111110000010111101000101100111";
        ram[47] = "0b00111101111010000110100111000110";
        ram[48] = "0b00111101001011100010110000010011";
        ram[49] = "0b10111100001011011100101010101001";
        ram[50] = "0b00111101001100100010011110011010";
        ram[51] = "0b00111110000010000101100010111100";
        ram[52] = "0b00111101000100100101011010101111";
        ram[53] = "0b10111100000111010110011101000100";
        ram[54] = "0b10111101100001100100101100100011";
        ram[55] = "0b10111101111110010001011110010100";
        ram[56] = "0b00111101110011100110011101010001";
        ram[57] = "0b00111110000011000100110111101100";
        ram[58] = "0b00111101000000001000111110101000";
        ram[59] = "0b10111101100000111101000111110100";
        ram[60] = "0b10111101111001110000000010001010";
        ram[61] = "0b00111110000010011100010000010001";
        ram[62] = "0b10111101010111000101000110001010";
        ram[63] = "0b10111101000001110100011010110001";
        ram[64] = "0b10111101000010111011001010000110";
        ram[65] = "0b00111101100010011001000011100110";
        ram[66] = "0b10111101110010000010011111111010";
        ram[67] = "0b00111100100011000000111000101011";
        ram[68] = "0b10111110000101010100011100010111";
        ram[69] = "0b00111100110010101011001101001101";
        ram[70] = "0b00111101000111001000111010010001";
        ram[71] = "0b10111101011100000000010110110111";
        ram[72] = "0b10111101101110001110110001010011";
        ram[73] = "0b00111101100111101000100001110100";
        ram[74] = "0b10111110001010100111110001011011";
        ram[75] = "0b10111100100010100110111110010000";
        ram[76] = "0b00111110010011011111011010011000";
        ram[77] = "0b10111100111011010000001010011000";
        ram[78] = "0b00111101011010000011010011010010";
        ram[79] = "0b10111101111111100010011110011110";
        ram[80] = "0b10111101000101011111010111010110";
        ram[81] = "0b00111011001111111110101110111110";
        ram[82] = "0b10111011010100100100111011101101";
        ram[83] = "0b10111101100101111011000001010110";
        ram[84] = "0b00111101011111011100010001101100";
        ram[85] = "0b00111011101000110100100110000110";
        ram[86] = "0b00111100101001101001010000011110";
        ram[87] = "0b10111011001110000110110001101110";
        ram[88] = "0b10111100101110010111111001110001";
        ram[89] = "0b00111100011010111001010111100110";
        ram[90] = "0b00111101100000000101001001010000";
        ram[91] = "0b10111101101010000111010100011010";
        ram[92] = "0b00111110001011011101101101010101";
        ram[93] = "0b10111101101001110100110000100101";
        ram[94] = "0b10111101010000101110111001011100";
        ram[95] = "0b10111101001011010001001000011100";
        ram[96] = "0b10111110000100000001110010010011";
        ram[97] = "0b00111101000011000010111011111101";
        ram[98] = "0b10111110011000100111110000111001";
        ram[99] = "0b00111001111010101001001011100100";
        ram[100] = "0b00111101100101111010110101100110";
        ram[101] = "0b00111101111101000111001110001010";
        ram[102] = "0b00111110010001000111010010010111";
        ram[103] = "0b00111101000000100001101000000110";
        ram[104] = "0b00111101111100011001100000101001";
        ram[105] = "0b00111100001101101110101101001111";
        ram[106] = "0b00111101001001011011010000111111";
        ram[107] = "0b10111101001011100111100111000110";
        ram[108] = "0b00111101001010101000101101011001";
        ram[109] = "0b00111101101100110100110011100100";
        ram[110] = "0b10111101101101101110011110010110";
        ram[111] = "0b00111101100111010001010111110000";
        ram[112] = "0b00111101010001100001110101010000";
        ram[113] = "0b10111110010001100111010011010001";
        ram[114] = "0b10111110000000011010001101101110";
        ram[115] = "0b00111101110110101011001000011000";
        ram[116] = "0b10111101100011101100001000010010";
        ram[117] = "0b10111101101110111010001011001011";
        ram[118] = "0b00111101011101011010101000100001";
        ram[119] = "0b00111110000000111101101111000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_14) {
meminst = new inference_conv2d_f3_2_2_14_ram("inference_conv2d_f3_2_2_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_14() {
    delete meminst;
}


};//endmodule
#endif
