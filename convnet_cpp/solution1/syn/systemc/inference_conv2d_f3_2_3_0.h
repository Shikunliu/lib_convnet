// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_0_H__
#define __inference_conv2d_f3_2_3_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_0_ram) {
        ram[0] = "0b00111100101100011000001111010001";
        ram[1] = "0b00111101011100010111101010110001";
        ram[2] = "0b10111101011110110001011011111000";
        ram[3] = "0b00111101011010100111100011001010";
        ram[4] = "0b00111101000010001101001111001001";
        ram[5] = "0b00111101011101001011001000001001";
        ram[6] = "0b00111101001101011001001101111011";
        ram[7] = "0b00111101100101100001100101101111";
        ram[8] = "0b10111101001001111100011100100100";
        ram[9] = "0b10111101111101010100100011101101";
        ram[10] = "0b00111101011000011001001000000110";
        ram[11] = "0b00111101001100001010101101100100";
        ram[12] = "0b00111101100000001111111010001011";
        ram[13] = "0b00111101111001011010100110101000";
        ram[14] = "0b00111101101010011011100110111101";
        ram[15] = "0b00111101101011110100110110111110";
        ram[16] = "0b00111100000001100100011001001011";
        ram[17] = "0b00111100011110010000001111111000";
        ram[18] = "0b00111110001101100101001110000111";
        ram[19] = "0b00111110000001100001101010100100";
        ram[20] = "0b10111101010011011000001010100000";
        ram[21] = "0b10111101110000011000100101101101";
        ram[22] = "0b00111101000110110110010100110001";
        ram[23] = "0b00111100000011100100111100011000";
        ram[24] = "0b10111101001101011010011011100001";
        ram[25] = "0b10111110000001111000111100100110";
        ram[26] = "0b10111101001110101011001110010000";
        ram[27] = "0b00111101110011110111010011001101";
        ram[28] = "0b10111101011110101000010000010000";
        ram[29] = "0b10111011101001000111001010111100";
        ram[30] = "0b00111100111101101001100000001101";
        ram[31] = "0b00111101100010001011001100000101";
        ram[32] = "0b10111101100101110010100000000101";
        ram[33] = "0b10111101111100111100100000011001";
        ram[34] = "0b00111101000001110000111100011110";
        ram[35] = "0b10111101010110100011010110000110";
        ram[36] = "0b10111110001010101001101010000000";
        ram[37] = "0b10111100111000111000101110001011";
        ram[38] = "0b10111101111010001110101101000110";
        ram[39] = "0b10111101110001011010111001100000";
        ram[40] = "0b00111110000100010011010100010001";
        ram[41] = "0b10111110000000010101101000001000";
        ram[42] = "0b00111100100110100100010100100110";
        ram[43] = "0b00111101010110011000101111111000";
        ram[44] = "0b10111101101011100000101101011011";
        ram[45] = "0b00111100111110000110011110000101";
        ram[46] = "0b00111101011000111100101100010110";
        ram[47] = "0b00111101111110000110111101001000";
        ram[48] = "0b00111101000111100010001111110010";
        ram[49] = "0b00111100101010100111011100000010";
        ram[50] = "0b10111101101101100111010101110010";
        ram[51] = "0b00111101101010010001000010000000";
        ram[52] = "0b00111101101111001100001011001001";
        ram[53] = "0b00111101100100111010101000001110";
        ram[54] = "0b10111101110000100000110001111111";
        ram[55] = "0b10111101111100001011011000110001";
        ram[56] = "0b10111101111010001100111101111101";
        ram[57] = "0b10111110000101000110100000000001";
        ram[58] = "0b10111010111100100000001111101001";
        ram[59] = "0b10111100111111100000001101110001";
        ram[60] = "0b00111101100111100000001001001010";
        ram[61] = "0b10111011010111111110001110000000";
        ram[62] = "0b00111110010101100010000010101011";
        ram[63] = "0b10111100101001100010011000111010";
        ram[64] = "0b10111101000010101001011100011000";
        ram[65] = "0b00111101110111010000000011110111";
        ram[66] = "0b00111011100110111000111010100111";
        ram[67] = "0b00111101001010111010011000100110";
        ram[68] = "0b00111101011110100000011110011000";
        ram[69] = "0b10111101101111001101110100000000";
        ram[70] = "0b00111110001111011110010000111111";
        ram[71] = "0b00111101100000011010111101110000";
        ram[72] = "0b00111110000011010001010100100111";
        ram[73] = "0b00111110000000001011100011010000";
        ram[74] = "0b00111110001000101101000010100010";
        ram[75] = "0b00111101101001100011110110101010";
        ram[76] = "0b00111101101111100011101001111110";
        ram[77] = "0b00111101101110110111110000001101";
        ram[78] = "0b00111101110110111011000111110010";
        ram[79] = "0b00111100101111001010001011101001";
        ram[80] = "0b10111101010110010101011111110110";
        ram[81] = "0b00111101010000010111000001111000";
        ram[82] = "0b10111101110010011001011101011000";
        ram[83] = "0b00111110000101011101100110100001";
        ram[84] = "0b10111101110001100101010111100011";
        ram[85] = "0b00111101110000110110011011001010";
        ram[86] = "0b00111110001001111001010110110011";
        ram[87] = "0b10111100111001010000111101001110";
        ram[88] = "0b10111110001000000101100110100111";
        ram[89] = "0b10111101010101010111100000000010";
        ram[90] = "0b00111100101001100000111010001000";
        ram[91] = "0b10111101101100001110010100011101";
        ram[92] = "0b10111101101100011000010100010011";
        ram[93] = "0b00111101001110010100111111111101";
        ram[94] = "0b00111100100101111010001010110100";
        ram[95] = "0b00111100110000110000110011111011";
        ram[96] = "0b10111101011010100010100011100011";
        ram[97] = "0b10111101101100111011011001010011";
        ram[98] = "0b00111101100101011100011100011111";
        ram[99] = "0b00111101001101101000000011100000";
        ram[100] = "0b00111101111100001101010000010011";
        ram[101] = "0b10111101100110000010100011101100";
        ram[102] = "0b10111101001111001111110101001100";
        ram[103] = "0b00111101111010010110100100011010";
        ram[104] = "0b10111101101110101010110100010000";
        ram[105] = "0b10111101101100000110111101110111";
        ram[106] = "0b10111101111111111110101010000001";
        ram[107] = "0b10111101010101001111111111010111";
        ram[108] = "0b10111100001011110011011100100101";
        ram[109] = "0b00111101110101110111100111101010";
        ram[110] = "0b10111100101001101101001011010011";
        ram[111] = "0b10111101100111011101111110010100";
        ram[112] = "0b00111101110001110110010101000010";
        ram[113] = "0b00111011111111010101000011111001";
        ram[114] = "0b10111101010110010100110111001010";
        ram[115] = "0b10111101101110101100011011011011";
        ram[116] = "0b10111101101110111000111110001110";
        ram[117] = "0b10111101001100110111000111101000";
        ram[118] = "0b10111101100010101101100101101010";
        ram[119] = "0b10111101100111101110011001101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_0) {
meminst = new inference_conv2d_f3_2_3_0_ram("inference_conv2d_f3_2_3_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_0() {
    delete meminst;
}


};//endmodule
#endif
