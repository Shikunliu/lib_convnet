// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_3_H__
#define __inference_conv2d_f3_2_3_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_3_ram) {
        ram[0] = "0b00111101100000101000001011101111";
        ram[1] = "0b10111101110110111100000100100111";
        ram[2] = "0b10111010000011111111010101110000";
        ram[3] = "0b10111101011110110011110010011100";
        ram[4] = "0b10111100100010001100111010100110";
        ram[5] = "0b00111110000100110011111010111100";
        ram[6] = "0b10111101110110101011110000001110";
        ram[7] = "0b10111101110011100111101000110001";
        ram[8] = "0b10111110001011000001101000000101";
        ram[9] = "0b00111100010011101001101000101100";
        ram[10] = "0b10111110000001010111000000111111";
        ram[11] = "0b00111101110001100110000100011011";
        ram[12] = "0b00111100000111011010011100000101";
        ram[13] = "0b10111101111111111001011110101011";
        ram[14] = "0b10111110001001011011001111100001";
        ram[15] = "0b00111101101110001110100110001011";
        ram[16] = "0b00111101100000100000111101000111";
        ram[17] = "0b00111100111111000101100111101110";
        ram[18] = "0b10111110000010010010110000000110";
        ram[19] = "0b00111010100011100101000110111101";
        ram[20] = "0b00111101011000101111111001001101";
        ram[21] = "0b10111101100100011001011010001000";
        ram[22] = "0b10111100000100111101110001000000";
        ram[23] = "0b00111110000011101110101001100100";
        ram[24] = "0b10111010101101101000011100111011";
        ram[25] = "0b00111010111010001110011011011111";
        ram[26] = "0b00111101100000110110111111000001";
        ram[27] = "0b00111101111100110001011111110000";
        ram[28] = "0b00111110000100100000110001001010";
        ram[29] = "0b10111101101011110001101001110111";
        ram[30] = "0b00111100011111101110100000111101";
        ram[31] = "0b10111101111100011010001010100101";
        ram[32] = "0b10111101100001100111011000010100";
        ram[33] = "0b00111101101001000100110101101101";
        ram[34] = "0b00111101111110010011001101011101";
        ram[35] = "0b00111101011100001101010000101110";
        ram[36] = "0b00111110000000001011110110001000";
        ram[37] = "0b10111100000011000010000101101100";
        ram[38] = "0b00111100100011101001100001111111";
        ram[39] = "0b00111101001101110011101001000100";
        ram[40] = "0b00111110001000110111111110111111";
        ram[41] = "0b10111011101010010100001010011010";
        ram[42] = "0b10111101101000000000000110100000";
        ram[43] = "0b10111101100010011010100100101100";
        ram[44] = "0b10111101100011010111101001111111";
        ram[45] = "0b00111101000010100010100111110000";
        ram[46] = "0b10111110001100111011100101101011";
        ram[47] = "0b10111101011110000101011000111000";
        ram[48] = "0b10111101011000110100010110011010";
        ram[49] = "0b10111101010111011000000100011010";
        ram[50] = "0b00111101100111110001110011111100";
        ram[51] = "0b00111101011110001011011000001111";
        ram[52] = "0b10111101011001001101111011000010";
        ram[53] = "0b00111100001100101001110111100010";
        ram[54] = "0b10111011000101011100101101011001";
        ram[55] = "0b00111100110100110010100111011110";
        ram[56] = "0b10111101100111100111111101100010";
        ram[57] = "0b10111101100100001001000110011000";
        ram[58] = "0b00111101101010000111000011011010";
        ram[59] = "0b10111101000000001011101010100110";
        ram[60] = "0b00111101100101101101000000001011";
        ram[61] = "0b00111101110110001011010110001001";
        ram[62] = "0b10111011100001110010010011111000";
        ram[63] = "0b10111110001111010101001101001000";
        ram[64] = "0b10111101011100000110101100111000";
        ram[65] = "0b00111110001101001100100100000000";
        ram[66] = "0b00111101100100010001110100101001";
        ram[67] = "0b00111101010010111110010001010101";
        ram[68] = "0b00111110001001000000101111111110";
        ram[69] = "0b10111101000101101100111111110000";
        ram[70] = "0b10111101100101101000100111100101";
        ram[71] = "0b00111100111111111000110001110010";
        ram[72] = "0b10111101111001000100011111000011";
        ram[73] = "0b00111100100000001000110101011001";
        ram[74] = "0b10111100011110010011110000101100";
        ram[75] = "0b10111101001110000010110101101110";
        ram[76] = "0b10111101101010100111110111101101";
        ram[77] = "0b10111100011101111001101001101011";
        ram[78] = "0b10111011010010001111010101010010";
        ram[79] = "0b10111100100010110100010111100100";
        ram[80] = "0b10111101000010101111101000010100";
        ram[81] = "0b10111110001000111100100111101111";
        ram[82] = "0b00111101101011010101110001011010";
        ram[83] = "0b10111101110011010110001111001100";
        ram[84] = "0b10111101110111111100110100100101";
        ram[85] = "0b10111110010001111100000001101110";
        ram[86] = "0b00111110001000100010000010111100";
        ram[87] = "0b10111101001101010000011010001101";
        ram[88] = "0b10111101101010000010101011011100";
        ram[89] = "0b10111110000100101010001011000010";
        ram[90] = "0b00111101011101110000100000001010";
        ram[91] = "0b10111110001111111000010111010111";
        ram[92] = "0b10111100010010110110011010011011";
        ram[93] = "0b10111101101010110111001001100111";
        ram[94] = "0b10111101110011010000100000001011";
        ram[95] = "0b00111110000110011101000111110110";
        ram[96] = "0b10111101011011001100110110111110";
        ram[97] = "0b10111101110001010010100100100111";
        ram[98] = "0b10111101110011000001001001000010";
        ram[99] = "0b00111101011000010110000111100101";
        ram[100] = "0b10111101100110011111011110001101";
        ram[101] = "0b10111110010001110011011011001110";
        ram[102] = "0b10111110000100010010111011000111";
        ram[103] = "0b00111101110101111111010110100101";
        ram[104] = "0b10111101011000100011000110011110";
        ram[105] = "0b00111101101001010011110001110010";
        ram[106] = "0b10111101100011011001000011110000";
        ram[107] = "0b00111101100111010110001110111110";
        ram[108] = "0b00111101101100100110010100001101";
        ram[109] = "0b10111101111101000100111011010111";
        ram[110] = "0b10111101000011101000010001111000";
        ram[111] = "0b10111101111100000111011011000000";
        ram[112] = "0b10111101100011000100110110000001";
        ram[113] = "0b00111110000111000110011001001101";
        ram[114] = "0b00111101101001001010001011100010";
        ram[115] = "0b00111110001000001100100011001101";
        ram[116] = "0b00111110000110010000101111001000";
        ram[117] = "0b10111110000000100110001010001001";
        ram[118] = "0b00111100010100101100010110100000";
        ram[119] = "0b10111101010010110100101001001011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_3) {
meminst = new inference_conv2d_f3_2_3_3_ram("inference_conv2d_f3_2_3_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_3() {
    delete meminst;
}


};//endmodule
#endif
