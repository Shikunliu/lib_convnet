// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_6_H__
#define __inference_conv2d_f3_3_1_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_6_ram) {
        ram[0] = "0b10111110001110101111010000101000";
        ram[1] = "0b10111101100111011110101010100100";
        ram[2] = "0b00111110011011001101011011000011";
        ram[3] = "0b10111100111100011100010011010100";
        ram[4] = "0b00111101100000000101011010011101";
        ram[5] = "0b00111101011000100110001100110111";
        ram[6] = "0b00111100101111001110111001101000";
        ram[7] = "0b10111110000000010001011010101001";
        ram[8] = "0b00111100001101100101011110101011";
        ram[9] = "0b00111100111110000001110110110011";
        ram[10] = "0b00111110001000111101101001110011";
        ram[11] = "0b10111101101001011011000111001000";
        ram[12] = "0b00111101100100010110010110101011";
        ram[13] = "0b10111110001011110011111001000111";
        ram[14] = "0b00111101101011000001010000001010";
        ram[15] = "0b10111101101000011001100011111111";
        ram[16] = "0b00111100011111000101111011110110";
        ram[17] = "0b10111110000000101100110111000000";
        ram[18] = "0b10111110000100011110011000000100";
        ram[19] = "0b00111101010010000001110111000001";
        ram[20] = "0b10111110000100101110010101011000";
        ram[21] = "0b10111100111011010010101000111010";
        ram[22] = "0b00111110001001011100111010011110";
        ram[23] = "0b00111101111111011000000111110001";
        ram[24] = "0b00111101100100101001110011110000";
        ram[25] = "0b00111101001101111111110001011011";
        ram[26] = "0b00111100011010110100101001100110";
        ram[27] = "0b00111101011110100101110011110011";
        ram[28] = "0b00111100011110100010110000010110";
        ram[29] = "0b00111100001101110010011110110100";
        ram[30] = "0b00111101101010001010001001100110";
        ram[31] = "0b00111101001011011000110001111011";
        ram[32] = "0b10111101111000101100001101000100";
        ram[33] = "0b10111101111101011000110010001111";
        ram[34] = "0b10111100110000100110011011100011";
        ram[35] = "0b00111100001000101001011111111011";
        ram[36] = "0b00111100111111010110110010101000";
        ram[37] = "0b10111110000111100001001110110010";
        ram[38] = "0b10111101101011001001110011101111";
        ram[39] = "0b10111100011011111000111000101101";
        ram[40] = "0b10111101001010110101111000111000";
        ram[41] = "0b00111101110000101000011111000010";
        ram[42] = "0b10111110000110110010000111000100";
        ram[43] = "0b00111011100001010101001101100111";
        ram[44] = "0b00111101110101001011110101110111";
        ram[45] = "0b10111100110001100101010110000101";
        ram[46] = "0b10111110000010000111010011001001";
        ram[47] = "0b00111101010011111000101010110111";
        ram[48] = "0b10111101011110001010010101111110";
        ram[49] = "0b00111100111110101111000010010111";
        ram[50] = "0b10111011100110001100101000100110";
        ram[51] = "0b10111101110001101000010101001000";
        ram[52] = "0b00111101000000000001011011011100";
        ram[53] = "0b10111110001101101011110000011111";
        ram[54] = "0b00111100101110000111001000000010";
        ram[55] = "0b00111101010101011101010000010010";
        ram[56] = "0b00111110000010001100100111111011";
        ram[57] = "0b00111101110011100001100100110011";
        ram[58] = "0b10111101010010100011110001100100";
        ram[59] = "0b10111100000101101110000110000011";
        ram[60] = "0b10111110001001101110101001000010";
        ram[61] = "0b10111011110101010100001011101000";
        ram[62] = "0b00111100011110100001100001011111";
        ram[63] = "0b10111101111001011000101100111111";
        ram[64] = "0b10111101000011000001111000000001";
        ram[65] = "0b00111110000011011110001111111100";
        ram[66] = "0b10111110000111110011111101010011";
        ram[67] = "0b10111101100010010010010001111001";
        ram[68] = "0b00111101010100110100010010110110";
        ram[69] = "0b10111110000001010011111100111010";
        ram[70] = "0b10111101101110001011101110000011";
        ram[71] = "0b10111110001000000000101101000110";
        ram[72] = "0b00111100001111010001110110011000";
        ram[73] = "0b10111101011100110110101110111000";
        ram[74] = "0b10111100100000101001101001000100";
        ram[75] = "0b10111100101001001100010001110000";
        ram[76] = "0b10111101000010110100000101111101";
        ram[77] = "0b00111101001110001110101110111111";
        ram[78] = "0b00111100111111111010001110000100";
        ram[79] = "0b00111101000110100111010111101000";
        ram[80] = "0b00111101001110110000100111011100";
        ram[81] = "0b10111101111101001110111101000110";
        ram[82] = "0b10111110011010101101010000101100";
        ram[83] = "0b10111100101001111101010010010000";
        ram[84] = "0b10111110011010101000000000000110";
        ram[85] = "0b10111101101101001111100100101110";
        ram[86] = "0b10111100001110011111010000011000";
        ram[87] = "0b10111101110110110001001010010000";
        ram[88] = "0b10111110000110100100001100110101";
        ram[89] = "0b10111101010001000100110110111101";
        ram[90] = "0b00111110000101011000010110111110";
        ram[91] = "0b10111110001111100111111100101100";
        ram[92] = "0b00111101001101101111110110101000";
        ram[93] = "0b00111100110011111001001001000100";
        ram[94] = "0b00111001111101100111001110011000";
        ram[95] = "0b00111110000101110000000111011010";
        ram[96] = "0b10111101000100010110000110000111";
        ram[97] = "0b00111101100000111000000101010010";
        ram[98] = "0b10111101000010101011000001011101";
        ram[99] = "0b10111101111001100111111010000100";
        ram[100] = "0b00111101000001101010000101010100";
        ram[101] = "0b10111101101010000000110011000100";
        ram[102] = "0b00111100111100000101111011011000";
        ram[103] = "0b00111110000101011111010100100111";
        ram[104] = "0b00111110000110010100100010011001";
        ram[105] = "0b00111101101000111001110001000100";
        ram[106] = "0b10111101000100101111011101101110";
        ram[107] = "0b10111101110000111111110000011011";
        ram[108] = "0b10111011000111101101110111010001";
        ram[109] = "0b00111110000011110110001100111101";
        ram[110] = "0b10111101011001000110000000010111";
        ram[111] = "0b10111101101111001010010100110111";
        ram[112] = "0b00111101111110000010000110101111";
        ram[113] = "0b00111010111010010010111101011001";
        ram[114] = "0b10111100101000110100000001000001";
        ram[115] = "0b00111110001001011011110110010100";
        ram[116] = "0b10111100111010101010101101110000";
        ram[117] = "0b10111101101000000111100010010110";
        ram[118] = "0b10111110011010001100010001111010";
        ram[119] = "0b10111101111010011100111111011101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_6) {
meminst = new inference_conv2d_f3_3_1_6_ram("inference_conv2d_f3_3_1_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_6() {
    delete meminst;
}


};//endmodule
#endif
