// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_6_H__
#define __inference_conv2d_f3_1_3_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_6_ram) {
        ram[0] = "0b10111101001010001100000110001010";
        ram[1] = "0b00111101100001001111001101001111";
        ram[2] = "0b10111010110001000110001111110011";
        ram[3] = "0b10111100110100100011100101010011";
        ram[4] = "0b10111100110111010100111101100110";
        ram[5] = "0b00111101100111010011010110110110";
        ram[6] = "0b10111110000001101011011000010111";
        ram[7] = "0b00111101101010111100001010111001";
        ram[8] = "0b00111101111100111111100101100010";
        ram[9] = "0b10111110001010000111000100011101";
        ram[10] = "0b10111101101101100110111111110001";
        ram[11] = "0b00111010011111010100100100001110";
        ram[12] = "0b10111100100010010000111100111110";
        ram[13] = "0b00111010110101011100101101001110";
        ram[14] = "0b10111110000010110011110011000101";
        ram[15] = "0b10111101001100000110111101001110";
        ram[16] = "0b10111101010011101000000100011101";
        ram[17] = "0b10111101110011111011111010111010";
        ram[18] = "0b00111101110001110101111101010101";
        ram[19] = "0b00111100100111100000000110101000";
        ram[20] = "0b00111101010000011100000011001010";
        ram[21] = "0b00111101100111000101000101100010";
        ram[22] = "0b00111101011010011101100011100010";
        ram[23] = "0b00111101100011101101111010110011";
        ram[24] = "0b00111011111001101111110000100011";
        ram[25] = "0b10111101001000011101101001000101";
        ram[26] = "0b00111101110101000000111011100000";
        ram[27] = "0b10111100111100111111111101000001";
        ram[28] = "0b10111101101100010110000011011001";
        ram[29] = "0b00111101000111010101011100001110";
        ram[30] = "0b00111110000101111111101101101010";
        ram[31] = "0b00111100101111010100001011101100";
        ram[32] = "0b00111101001001100100111111110110";
        ram[33] = "0b10111101010010011101010111110010";
        ram[34] = "0b00111101111001100111011100101101";
        ram[35] = "0b00111101100111111111111101011111";
        ram[36] = "0b00111010101110010010000110011111";
        ram[37] = "0b00111011000101111101000110011000";
        ram[38] = "0b10111110001100010010001100111110";
        ram[39] = "0b00111110000111000110110001010101";
        ram[40] = "0b00111101001100110111110100000101";
        ram[41] = "0b10111100111100011000110011010101";
        ram[42] = "0b10111101101101010000010101110011";
        ram[43] = "0b00111110000000111001100101110000";
        ram[44] = "0b00111100101110100100101000010011";
        ram[45] = "0b00111110000101000010001101010011";
        ram[46] = "0b00111101011111000010101001101110";
        ram[47] = "0b00111100100110111010000000000100";
        ram[48] = "0b10111101011100101100010010101110";
        ram[49] = "0b00111101101010111001111001100100";
        ram[50] = "0b00111101110111001011001001010011";
        ram[51] = "0b00111110000011010001101010101000";
        ram[52] = "0b00111110000100111001101101000101";
        ram[53] = "0b10111101010100110011011001011001";
        ram[54] = "0b10111110011001110111101100111001";
        ram[55] = "0b10111101000111000010001011100001";
        ram[56] = "0b10111110001110110011011000110111";
        ram[57] = "0b10111000101100101011100100011011";
        ram[58] = "0b00111101010101101010011001010000";
        ram[59] = "0b00111101000110111100001010011110";
        ram[60] = "0b00111101100100001101101101111000";
        ram[61] = "0b10111101101101111101110110100010";
        ram[62] = "0b10111110000111111000001110111110";
        ram[63] = "0b10111101000111000110000100101010";
        ram[64] = "0b10111101000110000100111111010011";
        ram[65] = "0b10111100001101101100101111011010";
        ram[66] = "0b10111101100000011010111000111011";
        ram[67] = "0b10111101000011100111100101000000";
        ram[68] = "0b10111101000110101110100010011111";
        ram[69] = "0b10111110000000001001111101100010";
        ram[70] = "0b10111110000010001001011111101010";
        ram[71] = "0b10111101100110101000110111011110";
        ram[72] = "0b00111101001110001111001110000001";
        ram[73] = "0b10111101000000101101011110110110";
        ram[74] = "0b10111101010101011010100000100011";
        ram[75] = "0b00111101101001100101100001110100";
        ram[76] = "0b10111101101001100111110110101110";
        ram[77] = "0b00111101110011000101101111111001";
        ram[78] = "0b10111101100110110100010110000110";
        ram[79] = "0b00111110000000001011010001011011";
        ram[80] = "0b10111101100101101001110011010010";
        ram[81] = "0b10111101110000110011100111110111";
        ram[82] = "0b00111101100011111101110010101010";
        ram[83] = "0b00111101101101010010000000100011";
        ram[84] = "0b00111110000110000010101110100110";
        ram[85] = "0b10111011100011111010001110001100";
        ram[86] = "0b00111110000110010000111001100111";
        ram[87] = "0b10111100101100011000100000000011";
        ram[88] = "0b10111101111100011000110000011001";
        ram[89] = "0b10111101110000001000111001110011";
        ram[90] = "0b00111101000011001010001011011011";
        ram[91] = "0b00111101111010111010101001011000";
        ram[92] = "0b10111101110101010001110111101111";
        ram[93] = "0b00111110010011101001010001101000";
        ram[94] = "0b00111100101110101110000111101001";
        ram[95] = "0b00111100110010101000101001101000";
        ram[96] = "0b00111101000100001011100110001100";
        ram[97] = "0b10111110001101111110000001101001";
        ram[98] = "0b00111100111101101110000001100111";
        ram[99] = "0b00111101100010100101110101011110";
        ram[100] = "0b10111110000110000100111010000011";
        ram[101] = "0b00111101111100000101000100000001";
        ram[102] = "0b10111100110101110100110011101110";
        ram[103] = "0b10111110010010110010110100001010";
        ram[104] = "0b00111110001001011110010011100111";
        ram[105] = "0b10111101111011110010111000000110";
        ram[106] = "0b10111101100001100011100100110101";
        ram[107] = "0b10111110010010111000011001101110";
        ram[108] = "0b10111101100011010010101100010001";
        ram[109] = "0b10111100111110100111011100101010";
        ram[110] = "0b00111101101101001000101000010110";
        ram[111] = "0b00111110001001000100010000011000";
        ram[112] = "0b00111101101111010100010010100111";
        ram[113] = "0b00111101111000110101011110100011";
        ram[114] = "0b00111101111010101110011011001001";
        ram[115] = "0b10111110000100010101110110110011";
        ram[116] = "0b10111100111100100010100101111110";
        ram[117] = "0b10111100111101101110111110000000";
        ram[118] = "0b00111101010101100100111000111011";
        ram[119] = "0b10111101011101010001011001000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_6) {
meminst = new inference_conv2d_f3_1_3_6_ram("inference_conv2d_f3_1_3_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_6() {
    delete meminst;
}


};//endmodule
#endif
