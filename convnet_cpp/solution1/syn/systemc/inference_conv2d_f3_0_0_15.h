// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_15_H__
#define __inference_conv2d_f3_0_0_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_15_ram) {
        ram[0] = "0b10111101001001011001010111110001";
        ram[1] = "0b10111101000110001111001111010010";
        ram[2] = "0b00111101110010011100000111111000";
        ram[3] = "0b10111100101111010011101100101010";
        ram[4] = "0b00111101111001111101111111100011";
        ram[5] = "0b00111101010001110010100011001110";
        ram[6] = "0b00111101111011001001100101101011";
        ram[7] = "0b00111110000110011000010100100111";
        ram[8] = "0b10111010010001011001111011110101";
        ram[9] = "0b00111110001011100111100100100101";
        ram[10] = "0b00111101010001010101101100011110";
        ram[11] = "0b00111101101110101111001000101001";
        ram[12] = "0b00111101010100000111011101111100";
        ram[13] = "0b10111110000010111101110110111010";
        ram[14] = "0b10111100101011110100011111101100";
        ram[15] = "0b00111101100111010001011110010000";
        ram[16] = "0b00111011010101111011010010110010";
        ram[17] = "0b10111011110111110110100000011010";
        ram[18] = "0b00111101110101101011001100110101";
        ram[19] = "0b10111100101101100011000010101001";
        ram[20] = "0b00111101100100111011101100001011";
        ram[21] = "0b10111101000001011011100101111101";
        ram[22] = "0b10111110000001100111101111100101";
        ram[23] = "0b10111101010110001010001110011011";
        ram[24] = "0b10111100101001111001100010010110";
        ram[25] = "0b10111011010100101101100100000000";
        ram[26] = "0b00111101101100110110100100011001";
        ram[27] = "0b10111100111000110111100001000000";
        ram[28] = "0b10111100011001111110010000010101";
        ram[29] = "0b10111110000111010010100100010011";
        ram[30] = "0b00111101101010011001010111101110";
        ram[31] = "0b10111110000001110110101010110110";
        ram[32] = "0b10111100001010010111011101011101";
        ram[33] = "0b10111110001000101011101111101101";
        ram[34] = "0b10111101100001100111011000010100";
        ram[35] = "0b00111101001000110100100111100111";
        ram[36] = "0b10111101100101111001100100001110";
        ram[37] = "0b10111101111000011010101000111111";
        ram[38] = "0b00111101100100100011000101000000";
        ram[39] = "0b00111101001000111100101101001100";
        ram[40] = "0b10111100100110010101000000110011";
        ram[41] = "0b10111101010000101000001000100110";
        ram[42] = "0b00111110000001110010001001011011";
        ram[43] = "0b00111101001000100111110011101000";
        ram[44] = "0b10111101110100110010011110101010";
        ram[45] = "0b10111101010110000010011000010111";
        ram[46] = "0b10111110000100001101010101100011";
        ram[47] = "0b00111110001100011111111011101011";
        ram[48] = "0b10111101000011100100100011001110";
        ram[49] = "0b10111101000110101110110110100111";
        ram[50] = "0b00111110000011000110010101000001";
        ram[51] = "0b00111110000011110001111101011000";
        ram[52] = "0b00111100010100001000000001001011";
        ram[53] = "0b00111101101001111010100111100011";
        ram[54] = "0b10111101001100010001100011110111";
        ram[55] = "0b10111101111110100001001010110110";
        ram[56] = "0b00111101111111010000111000010011";
        ram[57] = "0b00111101110000111001100000000101";
        ram[58] = "0b00111101001011010100101000110110";
        ram[59] = "0b00111110000010001110110111100101";
        ram[60] = "0b10111101110011111010000111100100";
        ram[61] = "0b10111100001101100001000110011111";
        ram[62] = "0b10111101100000000000101001111100";
        ram[63] = "0b10111101001011101001100000101110";
        ram[64] = "0b10111101010111110011000000101100";
        ram[65] = "0b10111101111001101100110110101111";
        ram[66] = "0b10111101101010011011110101101001";
        ram[67] = "0b00111101101011111100001001110011";
        ram[68] = "0b00111101001111101011101101011100";
        ram[69] = "0b10111100111010011111011011011111";
        ram[70] = "0b10111101110000011011110010011001";
        ram[71] = "0b00111101000101110110011100001010";
        ram[72] = "0b00111101100011000111011011000100";
        ram[73] = "0b00111101010011100101100010111110";
        ram[74] = "0b00111101011101010100100111000100";
        ram[75] = "0b00111100100010011001110101101101";
        ram[76] = "0b00111101011100110111000011011011";
        ram[77] = "0b10111101111111110111011110101111";
        ram[78] = "0b10111110000111100100010001110100";
        ram[79] = "0b10111100001010010110010110111111";
        ram[80] = "0b00111100110100101011101100100011";
        ram[81] = "0b00111101110011011110011111101010";
        ram[82] = "0b10111101101110001100110011010000";
        ram[83] = "0b00111100101110110111111101101000";
        ram[84] = "0b00111101101011101010100001111101";
        ram[85] = "0b00111101011000100000001111100110";
        ram[86] = "0b00111110001001100100101000010111";
        ram[87] = "0b10111100010010111010101111010000";
        ram[88] = "0b00111100110100000110011000010100";
        ram[89] = "0b10111101001011101110001000011011";
        ram[90] = "0b10111110000101101000000101100111";
        ram[91] = "0b10111101001000111011100101111000";
        ram[92] = "0b10111100101001101101110100011001";
        ram[93] = "0b00111010111110010101100011110010";
        ram[94] = "0b00111101100001101000001001100110";
        ram[95] = "0b10111101011101100000100111000010";
        ram[96] = "0b10111100011001111101011111101011";
        ram[97] = "0b00111101101111010011100000111010";
        ram[98] = "0b10111101100100011110001001011000";
        ram[99] = "0b00111101001000111000001111001000";
        ram[100] = "0b10111110010000000100101101111111";
        ram[101] = "0b00111101100101010000011011000011";
        ram[102] = "0b00111100110110001101100010101001";
        ram[103] = "0b00111101101110110000100000101111";
        ram[104] = "0b10111011110011111111010111100010";
        ram[105] = "0b00111110000100110000011111110010";
        ram[106] = "0b10111101011111000000000001111100";
        ram[107] = "0b00111011111011011000010011111110";
        ram[108] = "0b10111101110001100011001011111000";
        ram[109] = "0b00111101010000011000001010011100";
        ram[110] = "0b00111110000100010110011110101001";
        ram[111] = "0b10111101000110100100100011010001";
        ram[112] = "0b10111101101001010101010001110110";
        ram[113] = "0b00111011001110000000111010100101";
        ram[114] = "0b10111100001100001000100011001001";
        ram[115] = "0b10111110001010001010101001000011";
        ram[116] = "0b00111110001100101001000111111011";
        ram[117] = "0b10111100110010100110100111100110";
        ram[118] = "0b00111101010001011001111001110000";
        ram[119] = "0b00111101100000010001111000000000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_15) {
meminst = new inference_conv2d_f3_0_0_15_ram("inference_conv2d_f3_0_0_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_15() {
    delete meminst;
}


};//endmodule
#endif
