// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_6_H__
#define __inference_conv2d_f3_2_4_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_6_ram) {
        ram[0] = "0b00111101000010001110011100010100";
        ram[1] = "0b10111101000011001000001000111111";
        ram[2] = "0b10111101100000111111000100001011";
        ram[3] = "0b00111101000011111001101100010011";
        ram[4] = "0b00111101101001100010100110001000";
        ram[5] = "0b10111101000101011000010001100001";
        ram[6] = "0b00111101101100110111100100100100";
        ram[7] = "0b10111100100011101000011010101100";
        ram[8] = "0b00111101101010010001010000101011";
        ram[9] = "0b00111101011100000100101111111000";
        ram[10] = "0b10111110011000101010011010110001";
        ram[11] = "0b00111011100011011001111010111010";
        ram[12] = "0b10111101100010100000011000000110";
        ram[13] = "0b10111011011101110000110111101001";
        ram[14] = "0b00111011000101011001100100000100";
        ram[15] = "0b10111101110111011101000000001111";
        ram[16] = "0b00111100000010000111111011101010";
        ram[17] = "0b10111101000101011001111011001110";
        ram[18] = "0b10111101010110110010100001000101";
        ram[19] = "0b10111110001101000110001011000011";
        ram[20] = "0b10111101110000110110011111110010";
        ram[21] = "0b10111101100110100111000010011100";
        ram[22] = "0b10111101010000000111100100110111";
        ram[23] = "0b00111101010111000010110111100011";
        ram[24] = "0b00111101011111010010011000010110";
        ram[25] = "0b10111101110001111110110011010110";
        ram[26] = "0b10111101000101100101101101010110";
        ram[27] = "0b10111101101101111110110001101011";
        ram[28] = "0b00111101001000001010001011110011";
        ram[29] = "0b00111101111010101110011101001111";
        ram[30] = "0b10111110000000101110001110000010";
        ram[31] = "0b00111101010001000101011010100111";
        ram[32] = "0b10111100100111001100111010100011";
        ram[33] = "0b10111100101110011110100101100110";
        ram[34] = "0b10111100111110110111010100100001";
        ram[35] = "0b10111110000111101110011111000101";
        ram[36] = "0b00111101100100100110110011101010";
        ram[37] = "0b00111101010001111110001011101110";
        ram[38] = "0b10111101011000010100001101111100";
        ram[39] = "0b10111101100010001100001101100000";
        ram[40] = "0b00111101111100001101100101010001";
        ram[41] = "0b00111101101100101100011000011000";
        ram[42] = "0b10111101110100111100010001101110";
        ram[43] = "0b10111100100111001111011001111011";
        ram[44] = "0b10111101010001000101000011100010";
        ram[45] = "0b10111110001101111011101011101101";
        ram[46] = "0b00111100110111110100011111000100";
        ram[47] = "0b00111101000101110101010000001111";
        ram[48] = "0b00111010010010010001000010110011";
        ram[49] = "0b00111100100001010111011101101110";
        ram[50] = "0b00111100101111100101000101110100";
        ram[51] = "0b10111101100100010011100000011100";
        ram[52] = "0b00111101011000011100110111001011";
        ram[53] = "0b00111101101110111000111010011100";
        ram[54] = "0b10111110010001110111000010111101";
        ram[55] = "0b00111110000111110000110000110101";
        ram[56] = "0b00111100111000001010111100000010";
        ram[57] = "0b10111101101111101000001000110111";
        ram[58] = "0b10111101100001101100010101011001";
        ram[59] = "0b10111100100111011110110001111010";
        ram[60] = "0b00111101001101011011110001111010";
        ram[61] = "0b00111101110111010101000110110101";
        ram[62] = "0b10111110010000000000111000101000";
        ram[63] = "0b00111011010111110111101001111001";
        ram[64] = "0b10111101110011011100101110011011";
        ram[65] = "0b10111110000010111001100100001011";
        ram[66] = "0b10111110010010011000101111111000";
        ram[67] = "0b00111101100110000010010101110110";
        ram[68] = "0b00111101101111000010111100011000";
        ram[69] = "0b00111101010010101100100100110111";
        ram[70] = "0b10111101101011000100111110011010";
        ram[71] = "0b00111100110101111110101000000010";
        ram[72] = "0b00111110000001011101101011110000";
        ram[73] = "0b10111011100110011000000100000101";
        ram[74] = "0b10111110001100111001010000110001";
        ram[75] = "0b00111110001001010111001101100100";
        ram[76] = "0b10111101110001111010001010110100";
        ram[77] = "0b00111100111011011000100001100100";
        ram[78] = "0b10111101101010011001101101010101";
        ram[79] = "0b00111101101111011010001010110110";
        ram[80] = "0b00111101101001010000011110100111";
        ram[81] = "0b10111101001001100010100101000101";
        ram[82] = "0b00111101110100101101101010011000";
        ram[83] = "0b00111100000010111001001111111101";
        ram[84] = "0b00111011110001011011011001101110";
        ram[85] = "0b10111101001111011100111001111101";
        ram[86] = "0b10111101101011001000110011111111";
        ram[87] = "0b00111101010101110100110010111000";
        ram[88] = "0b10111101111100111100010011110100";
        ram[89] = "0b10111101100100110011111011100100";
        ram[90] = "0b10111100111100101001100110110000";
        ram[91] = "0b00111110001011000000100000110001";
        ram[92] = "0b00111011111110100011011000010010";
        ram[93] = "0b00111101100110011001001111110000";
        ram[94] = "0b00111101100001011010011100001001";
        ram[95] = "0b10111110001001010110000100001011";
        ram[96] = "0b00111101101011000010111000110100";
        ram[97] = "0b10111101111001010101011101011000";
        ram[98] = "0b00111101100100111101111011011010";
        ram[99] = "0b00111101110000101011101000001001";
        ram[100] = "0b00111100011000001000100110101110";
        ram[101] = "0b10111110000100010010000100100101";
        ram[102] = "0b10111101110100001011101111110101";
        ram[103] = "0b00111101110010101000010010001001";
        ram[104] = "0b00111100101001101111100001011101";
        ram[105] = "0b00111101001000101111111100001001";
        ram[106] = "0b00111101111110100111011101100000";
        ram[107] = "0b00111101010001001011000001101001";
        ram[108] = "0b00111101010100010110100101001001";
        ram[109] = "0b00111100100010000110101110101010";
        ram[110] = "0b00111100100100110000010101100001";
        ram[111] = "0b00111101000011001001011010010111";
        ram[112] = "0b00111101011100011010000100101101";
        ram[113] = "0b00111101101001001100101100001011";
        ram[114] = "0b00111100000010010100100101010101";
        ram[115] = "0b10111101001000010100001010100110";
        ram[116] = "0b00111100101110111100110101101011";
        ram[117] = "0b10111100000010011110001110001110";
        ram[118] = "0b10111101100111110010010010111110";
        ram[119] = "0b10111101010010001110011100010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_6) {
meminst = new inference_conv2d_f3_2_4_6_ram("inference_conv2d_f3_2_4_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_6() {
    delete meminst;
}


};//endmodule
#endif
