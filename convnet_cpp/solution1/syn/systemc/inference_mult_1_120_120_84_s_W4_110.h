// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_110_H__
#define __inference_mult_1_120_120_84_s_W4_110_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_110_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_110_ram) {
        ram[0] = "0b10111101111101001011100010111111";
        ram[1] = "0b00111101011101010001001000010110";
        ram[2] = "0b10111101001001010000100001001000";
        ram[3] = "0b10111100110010101111000111001100";
        ram[4] = "0b00111110001111010101100011001001";
        ram[5] = "0b00111110001100101100011000100110";
        ram[6] = "0b00111101001101100000011101011001";
        ram[7] = "0b00111101000000110001100100001010";
        ram[8] = "0b10111101101001011100111001110110";
        ram[9] = "0b00111100111010110011101011100001";
        ram[10] = "0b00111101101111101001011110011011";
        ram[11] = "0b10111101101100110010110000101101";
        ram[12] = "0b10111101001100011010001010100101";
        ram[13] = "0b00111101001101010110111110000011";
        ram[14] = "0b10111101100011111101110101001011";
        ram[15] = "0b00111100111001101010010100011011";
        ram[16] = "0b10111110000010011001000010110000";
        ram[17] = "0b10111101101100010101001100110111";
        ram[18] = "0b00111101100011011010001001110011";
        ram[19] = "0b10111101111010001101100001100110";
        ram[20] = "0b00111101010100110000111100111100";
        ram[21] = "0b10111101110110010110110100001001";
        ram[22] = "0b10111110001000110011001001101010";
        ram[23] = "0b00111110001100001010101001100101";
        ram[24] = "0b10111100100010111010101011000100";
        ram[25] = "0b10111100100010010001111111001111";
        ram[26] = "0b00111101011110011111110100110111";
        ram[27] = "0b00111110000010110110001100001011";
        ram[28] = "0b00111101101110110010100001010010";
        ram[29] = "0b10111110001101100111001100111111";
        ram[30] = "0b10111100011100011110100001111011";
        ram[31] = "0b00111101100111110101011110110100";
        ram[32] = "0b00111101101110001111111111010100";
        ram[33] = "0b00111110001001101111100101110110";
        ram[34] = "0b10111100100100110110010100111000";
        ram[35] = "0b10111101011111000010101011110100";
        ram[36] = "0b10111101011000101100101000010101";
        ram[37] = "0b00111101100011010101011111100101";
        ram[38] = "0b00111101101111100101101001101100";
        ram[39] = "0b00111101001000010111011011011110";
        ram[40] = "0b00111100101010111011011111011111";
        ram[41] = "0b00111101111010001110111101111000";
        ram[42] = "0b00111101010110001001111001011100";
        ram[43] = "0b00111101100000110010100011101101";
        ram[44] = "0b00111101110011000101010010010101";
        ram[45] = "0b00111101100001001001011001101000";
        ram[46] = "0b00111101101100011010100010111010";
        ram[47] = "0b10111100000111011110110011010000";
        ram[48] = "0b10111011100110100001010011010100";
        ram[49] = "0b00111101001110000000011110010011";
        ram[50] = "0b00111110010000101000110100000000";
        ram[51] = "0b10111101101001001110110011101010";
        ram[52] = "0b10111110000110011100111100010100";
        ram[53] = "0b10111110001011001001000100001000";
        ram[54] = "0b00111100111111000100110010000010";
        ram[55] = "0b00111110000011100011100000100010";
        ram[56] = "0b10111101110101101101011101100010";
        ram[57] = "0b00111100101000011011001000000001";
        ram[58] = "0b10111110000010100101101000000100";
        ram[59] = "0b10111100100010011001100010011011";
        ram[60] = "0b00111101100011000110111110010101";
        ram[61] = "0b10111101010000101110011000010100";
        ram[62] = "0b10111110001111111101100000100111";
        ram[63] = "0b00111100100110010100010110000001";
        ram[64] = "0b10111110001001100110100100000101";
        ram[65] = "0b00111101111010110000100001010111";
        ram[66] = "0b10111101010001100100001101111011";
        ram[67] = "0b10111101010011101101110101100011";
        ram[68] = "0b10111110001110001011101110010000";
        ram[69] = "0b10111100001111111110001000000011";
        ram[70] = "0b10111110000001001010101011011010";
        ram[71] = "0b10111110010000011010010001111011";
        ram[72] = "0b10111101100101110001011010010000";
        ram[73] = "0b10111101011101111011110111110111";
        ram[74] = "0b10111100101110010111011111110001";
        ram[75] = "0b10111110001010100110010111001111";
        ram[76] = "0b10111101100100001100100010011000";
        ram[77] = "0b10111110001011010100000010101011";
        ram[78] = "0b00111101100010110101100001011001";
        ram[79] = "0b00111101100001110110011101101000";
        ram[80] = "0b00111100001010100001111111111010";
        ram[81] = "0b10111101010110111100101101010010";
        ram[82] = "0b00111100001100100000001111110100";
        ram[83] = "0b00111101111101010110100011101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_110) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_110_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_110) {
meminst = new inference_mult_1_120_120_84_s_W4_110_ram("inference_mult_1_120_120_84_s_W4_110_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_110() {
    delete meminst;
}


};//endmodule
#endif
