// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_2_H__
#define __inference_conv2d_f3_1_0_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_2_ram) {
        ram[0] = "0b10111100000011011100110000000110";
        ram[1] = "0b00111100111011110100110011110101";
        ram[2] = "0b10111100101101100110000110000110";
        ram[3] = "0b00111110001100010110010110010000";
        ram[4] = "0b10111101101001011111001001111011";
        ram[5] = "0b10111110000000001001110110001100";
        ram[6] = "0b10111110000110001111000101001110";
        ram[7] = "0b00111101011010011100110001100111";
        ram[8] = "0b10111101001111001100000000001111";
        ram[9] = "0b10111101001011100010010101011101";
        ram[10] = "0b10111101111010001010100000101010";
        ram[11] = "0b10111110001111100110000111010000";
        ram[12] = "0b00111101101110001110000110100001";
        ram[13] = "0b00111110011000010100011110101110";
        ram[14] = "0b00111011001010100000011011001111";
        ram[15] = "0b10111100111001001011000000011000";
        ram[16] = "0b00111100100010111011001100100111";
        ram[17] = "0b10111101000111101010010111011101";
        ram[18] = "0b00111011011001010001000001100101";
        ram[19] = "0b00111101001001001100000100110000";
        ram[20] = "0b10111101100110110010101110010010";
        ram[21] = "0b00111101001100111010001111010001";
        ram[22] = "0b00111100111100100001000100101010";
        ram[23] = "0b00111101110001110101110100101111";
        ram[24] = "0b00111110000111111101001100101100";
        ram[25] = "0b00111110000010000110010011001011";
        ram[26] = "0b10111101100001011000011001010010";
        ram[27] = "0b10111101111101101000011110110001";
        ram[28] = "0b10111101011101011111001011100110";
        ram[29] = "0b10111101110100101011001101000110";
        ram[30] = "0b10111101110001000101101010010101";
        ram[31] = "0b10111101110011111011110110101101";
        ram[32] = "0b00111100111111000101101100110000";
        ram[33] = "0b00111101100100111000111011110011";
        ram[34] = "0b00111101101010000111010111111110";
        ram[35] = "0b10111100100110001010101100100111";
        ram[36] = "0b00111110001001001111110011100111";
        ram[37] = "0b00111101110100111101010100110100";
        ram[38] = "0b00111100111111001000010010110110";
        ram[39] = "0b00111101011110100110001111000100";
        ram[40] = "0b00111110001111100111010001101101";
        ram[41] = "0b10111101011001110110011010010001";
        ram[42] = "0b00111100101111010111010101110111";
        ram[43] = "0b00111100100101010010011000111000";
        ram[44] = "0b00111110000011010000100110011110";
        ram[45] = "0b10111110000001011000011010000111";
        ram[46] = "0b00111110000010001101000011001100";
        ram[47] = "0b10111101100101100000001001111001";
        ram[48] = "0b00111101111001110100000100000111";
        ram[49] = "0b10111110000101111011100101011010";
        ram[50] = "0b00111011100101111101101000111100";
        ram[51] = "0b00111101110100011001001101110001";
        ram[52] = "0b10111101110110011011111011010011";
        ram[53] = "0b00111101011001011101100111111111";
        ram[54] = "0b00111100111110010111111110110011";
        ram[55] = "0b00111101110001011111110010001100";
        ram[56] = "0b00111101101101100001100010001011";
        ram[57] = "0b00111101100011101100001110011000";
        ram[58] = "0b00111100101000110111100011100001";
        ram[59] = "0b10111100001101101001110011100000";
        ram[60] = "0b00111101010101111110101110010100";
        ram[61] = "0b10111101001001110101110100000110";
        ram[62] = "0b10111101000101001111111100000000";
        ram[63] = "0b00111101100010100010111111101010";
        ram[64] = "0b10111100000110100110011100110100";
        ram[65] = "0b00111100100000100110011110000100";
        ram[66] = "0b10111101011110100101101001101111";
        ram[67] = "0b10111110000001110001111110111100";
        ram[68] = "0b10111101100100000010010000010010";
        ram[69] = "0b00111101000010111011011001100111";
        ram[70] = "0b10111110001000110001100110000011";
        ram[71] = "0b10111101100001001101110001001011";
        ram[72] = "0b00111101000011001010001101111100";
        ram[73] = "0b10111100111110010101101101101011";
        ram[74] = "0b00111100101011010010110110010101";
        ram[75] = "0b00111101101010001010000011111100";
        ram[76] = "0b10111101101011001010111110110100";
        ram[77] = "0b10111101101100011101111000110100";
        ram[78] = "0b00111100101111110000110010111011";
        ram[79] = "0b10111101100110101101011010100011";
        ram[80] = "0b10111110000010000110110011101100";
        ram[81] = "0b00111100001111101111100100111010";
        ram[82] = "0b10111101011100011100101111011010";
        ram[83] = "0b10111101001100001011010110101010";
        ram[84] = "0b10111110001000100110000010110011";
        ram[85] = "0b00111100000111000000000110110100";
        ram[86] = "0b00111100000110110101111110010111";
        ram[87] = "0b00111101001101000010000001001000";
        ram[88] = "0b10111101101101001001000010010110";
        ram[89] = "0b10111101100100111111100010001011";
        ram[90] = "0b10111101100111011010100110101111";
        ram[91] = "0b00111101000110000010000010111110";
        ram[92] = "0b00111101100011001100010111111100";
        ram[93] = "0b00111101111110011110000101101101";
        ram[94] = "0b10111100111011011101110100011101";
        ram[95] = "0b10111100010101110010111110010010";
        ram[96] = "0b00111011100000001011101110111101";
        ram[97] = "0b10111110000010001011001000100000";
        ram[98] = "0b10111011001001011111001110011010";
        ram[99] = "0b10111100101000001101010010001100";
        ram[100] = "0b10111101001010111100110010100010";
        ram[101] = "0b10111101001001101000111001011010";
        ram[102] = "0b10111100101111100011100111000010";
        ram[103] = "0b00111101101100010010011000000101";
        ram[104] = "0b10111110000101010011111001110000";
        ram[105] = "0b00111101101100011001100001000011";
        ram[106] = "0b00111101111100101011111111011011";
        ram[107] = "0b10111101100001001101111111000001";
        ram[108] = "0b00111110001110001110101111001100";
        ram[109] = "0b00111101111101100001001001000000";
        ram[110] = "0b00111110001001001011011111110110";
        ram[111] = "0b10111110000010100111000000001001";
        ram[112] = "0b10111101001010101000000011011101";
        ram[113] = "0b00111101011101010101100101111110";
        ram[114] = "0b00111101011101100100100100011000";
        ram[115] = "0b10111101110111011100011000011001";
        ram[116] = "0b00111110001100111101100001011010";
        ram[117] = "0b10111101010100101010011110111101";
        ram[118] = "0b00111101001011010001100111111010";
        ram[119] = "0b00111101110110110101100111011110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_2) {
meminst = new inference_conv2d_f3_1_0_2_ram("inference_conv2d_f3_1_0_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_2() {
    delete meminst;
}


};//endmodule
#endif
