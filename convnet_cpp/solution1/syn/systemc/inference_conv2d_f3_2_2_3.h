// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_3_H__
#define __inference_conv2d_f3_2_2_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_3_ram) {
        ram[0] = "0b10111100100100100111101101100010";
        ram[1] = "0b10111101100000001110100101001111";
        ram[2] = "0b10111011111000000111100010010001";
        ram[3] = "0b00111101110101110111100101100100";
        ram[4] = "0b10111100111101000100110010100011";
        ram[5] = "0b10111100110001111101101101100001";
        ram[6] = "0b00111101010100100110101110001101";
        ram[7] = "0b10111101101111010000011110100000";
        ram[8] = "0b10111110000101100010010101100011";
        ram[9] = "0b00111110010000110001100111000110";
        ram[10] = "0b10111101101100111110100101001001";
        ram[11] = "0b00111101100110010010000010001011";
        ram[12] = "0b10111101100001110011100110110000";
        ram[13] = "0b10111110000001000100101110110010";
        ram[14] = "0b00111101111011010111010110011111";
        ram[15] = "0b10111101100100110000001001001001";
        ram[16] = "0b00111110000011000011011001010100";
        ram[17] = "0b00111101100011000100011110010100";
        ram[18] = "0b10111101100001110011110101101001";
        ram[19] = "0b00111100110010000101101100011000";
        ram[20] = "0b00111101110010001111000000110100";
        ram[21] = "0b10111101101110110011110000010110";
        ram[22] = "0b10111101000000001111110111000001";
        ram[23] = "0b10111110001000111001110111100101";
        ram[24] = "0b00111101100101111000100011011011";
        ram[25] = "0b00111110001010010001101000110011";
        ram[26] = "0b10111101010101011101111011000100";
        ram[27] = "0b10111101101111111110011110101100";
        ram[28] = "0b00111101101110010111111011110111";
        ram[29] = "0b00111101110110000010110010110010";
        ram[30] = "0b00111101101000100110101100010100";
        ram[31] = "0b00111101100001000011000110110000";
        ram[32] = "0b00111101100001100001101010100100";
        ram[33] = "0b10111110001101101100100000101110";
        ram[34] = "0b00111011100010010110100010001010";
        ram[35] = "0b10111101101110010010110010011010";
        ram[36] = "0b10111110010100000011100111101111";
        ram[37] = "0b00111101111111010111110100111001";
        ram[38] = "0b00111110000001100111100000111010";
        ram[39] = "0b10111011110011111100110111011110";
        ram[40] = "0b00111101111001001101101010010000";
        ram[41] = "0b00111101001100010010111110111000";
        ram[42] = "0b00111101011011101001011111000011";
        ram[43] = "0b10111110000101011111001111011000";
        ram[44] = "0b00111101100111100010101110110101";
        ram[45] = "0b00111101011001111001111011111011";
        ram[46] = "0b10111110010001010110010110000000";
        ram[47] = "0b10111101111000010011000110101001";
        ram[48] = "0b00111110001111111001010010000101";
        ram[49] = "0b10111101101000001100111110011110";
        ram[50] = "0b10111101001100001100110111111110";
        ram[51] = "0b10111101110111011001110010101110";
        ram[52] = "0b10111110001100111011101000110100";
        ram[53] = "0b10111100010111011110000111001000";
        ram[54] = "0b10111101000100011111011000000001";
        ram[55] = "0b00111101111101111101010000010111";
        ram[56] = "0b00111101101111111001111100101010";
        ram[57] = "0b00111100011000101110011000010100";
        ram[58] = "0b10111101100111111000100010101100";
        ram[59] = "0b00111101011010010001010110001000";
        ram[60] = "0b10111100110110111011011100010110";
        ram[61] = "0b10111101100010100100111001100000";
        ram[62] = "0b00111101101010010000101111001000";
        ram[63] = "0b00111011010010011010001011001100";
        ram[64] = "0b00111100000000000010100000111001";
        ram[65] = "0b00111110001001001110110101110000";
        ram[66] = "0b00111101011110011001111110101111";
        ram[67] = "0b00111101110100100000110010001101";
        ram[68] = "0b00111101000011001110111001011011";
        ram[69] = "0b00111101110111111011001111111010";
        ram[70] = "0b10111101000110100001001010000000";
        ram[71] = "0b10111110010000110001000011011100";
        ram[72] = "0b10111011101000011111000010000000";
        ram[73] = "0b00111101101001111111001101100100";
        ram[74] = "0b00111101001001101010100001110110";
        ram[75] = "0b10111101101100100001110111011010";
        ram[76] = "0b00111101001001001011001011101101";
        ram[77] = "0b00111110001010110100111001010101";
        ram[78] = "0b10111101001100110010010000011010";
        ram[79] = "0b10111100100010110000000110111100";
        ram[80] = "0b00111101100111101001101110110010";
        ram[81] = "0b00111101010110100110001010111000";
        ram[82] = "0b00111100111011000111101011101000";
        ram[83] = "0b00111100111010111001110011010001";
        ram[84] = "0b00111110000010010100101011110101";
        ram[85] = "0b00111101101101010100101110110100";
        ram[86] = "0b00111101000101111011001100010000";
        ram[87] = "0b00111100011010100000101011001011";
        ram[88] = "0b00111101000100100101110111010001";
        ram[89] = "0b10111101100001111010000111111000";
        ram[90] = "0b00111110001000000001101010111101";
        ram[91] = "0b10111110000100110001100111000110";
        ram[92] = "0b00111101111101011001000011000001";
        ram[93] = "0b10111101101110111101011001100010";
        ram[94] = "0b00111100010111010000011000000000";
        ram[95] = "0b10111110000100000100110111011011";
        ram[96] = "0b10111110000011011010011010100100";
        ram[97] = "0b00111100100000111101001011110011";
        ram[98] = "0b00111101010000000111100100110111";
        ram[99] = "0b00111101110101110011110000001100";
        ram[100] = "0b00111101101100010110110010010111";
        ram[101] = "0b10111101011101001101000110110100";
        ram[102] = "0b10111101110111010101100100001100";
        ram[103] = "0b00111101111110100001101000001101";
        ram[104] = "0b00111101111000001100010000010101";
        ram[105] = "0b10111101111010001000001001101011";
        ram[106] = "0b10111101000110010001001011110110";
        ram[107] = "0b10111101100010100011100000001010";
        ram[108] = "0b00111101100000011000111000011000";
        ram[109] = "0b00111100010110001100101111011111";
        ram[110] = "0b10111110001000011100101000111010";
        ram[111] = "0b10111101101100001001110000010101";
        ram[112] = "0b10111101000111001001101000110101";
        ram[113] = "0b10111101110011101010100011011010";
        ram[114] = "0b00111110010001010110000111010100";
        ram[115] = "0b10111101110001100100001101010011";
        ram[116] = "0b00111110000000110010101000000110";
        ram[117] = "0b00111110000110000110001010110010";
        ram[118] = "0b00111101111111011011101000001010";
        ram[119] = "0b10111101011110110100011100110100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_3) {
meminst = new inference_conv2d_f3_2_2_3_ram("inference_conv2d_f3_2_2_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_3() {
    delete meminst;
}


};//endmodule
#endif
