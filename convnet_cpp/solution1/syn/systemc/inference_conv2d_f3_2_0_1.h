// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_1_H__
#define __inference_conv2d_f3_2_0_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_1_ram) {
        ram[0] = "0b10111101100111011000011010001110";
        ram[1] = "0b10111110001001101111010000111000";
        ram[2] = "0b10111101110111011001011111110110";
        ram[3] = "0b10111101111111011011101100010111";
        ram[4] = "0b00111011100000001001110001011101";
        ram[5] = "0b10111110011111010011111010010010";
        ram[6] = "0b00111011010001101001001001001011";
        ram[7] = "0b00111011001111000010011100111000";
        ram[8] = "0b00111100111010100001110001101001";
        ram[9] = "0b00111100100011100101101011010111";
        ram[10] = "0b10111110100011111110101011000100";
        ram[11] = "0b00111101110111101011101011110001";
        ram[12] = "0b00111110000011010010000000101001";
        ram[13] = "0b10111101100100001010011100111111";
        ram[14] = "0b10111101000001111111011101100000";
        ram[15] = "0b00111110010101011111110000111011";
        ram[16] = "0b10111101101011111011010010000001";
        ram[17] = "0b00111110000010110110011101111111";
        ram[18] = "0b10111101011110001011000001001011";
        ram[19] = "0b00111101101111001010011010010100";
        ram[20] = "0b00111101001001111001011000101100";
        ram[21] = "0b10111110000011001000111001101001";
        ram[22] = "0b10111110000000101101110001101110";
        ram[23] = "0b00111101111010010001000110001100";
        ram[24] = "0b10111101101001011000110110000001";
        ram[25] = "0b10111101101100101010110010010000";
        ram[26] = "0b00111101111000111110001100011001";
        ram[27] = "0b00111101001100000110000100001100";
        ram[28] = "0b10111101111010001110111101111000";
        ram[29] = "0b00111011100000001011011010110100";
        ram[30] = "0b00111101110110100100101001001001";
        ram[31] = "0b00111101010110101011000001101011";
        ram[32] = "0b00111011100101011000010010100010";
        ram[33] = "0b10111100110101100110011101001011";
        ram[34] = "0b10111101101100001111011111110000";
        ram[35] = "0b00111101011110111111110110100111";
        ram[36] = "0b10111100110111000110111100000001";
        ram[37] = "0b10111110000010101111001011011000";
        ram[38] = "0b10111101001000111110010101101000";
        ram[39] = "0b00111100010110000101101100001011";
        ram[40] = "0b00111101001100000001010110100111";
        ram[41] = "0b00111101111001001110100010111000";
        ram[42] = "0b10111101100101110001011000001001";
        ram[43] = "0b00111100110000100101000111101010";
        ram[44] = "0b10111101011001001101110010101001";
        ram[45] = "0b10111101000001010011011011010110";
        ram[46] = "0b00111100010100111100111110001011";
        ram[47] = "0b00111101010011111111100010011100";
        ram[48] = "0b00111110001001111011101110110110";
        ram[49] = "0b00111011101100101011000010000001";
        ram[50] = "0b00111101110010011001100011101011";
        ram[51] = "0b10111100101010001010100001100000";
        ram[52] = "0b10111101101101100011001001110001";
        ram[53] = "0b10111101110011100000011111100110";
        ram[54] = "0b00111010010010000011111101010010";
        ram[55] = "0b00111101010001000001010110100100";
        ram[56] = "0b10111110000101000110101000011010";
        ram[57] = "0b10111101111001010100101101001001";
        ram[58] = "0b00111011110101110011001100000010";
        ram[59] = "0b10111011100111100111101101010110";
        ram[60] = "0b00111101101100100010100100100000";
        ram[61] = "0b10111011010111111010111011010010";
        ram[62] = "0b10111101110000011111110111000100";
        ram[63] = "0b00111110000011111010001101110111";
        ram[64] = "0b10111101001000010110000100001110";
        ram[65] = "0b00111100001001011010011000010111";
        ram[66] = "0b00111101100111000001000001101100";
        ram[67] = "0b00111100111110111101010110011001";
        ram[68] = "0b00111101001100100101101011100001";
        ram[69] = "0b00111101000011101101001101010010";
        ram[70] = "0b10111101110001111011110101100100";
        ram[71] = "0b00111101101010010000100010110000";
        ram[72] = "0b10111101100000000011101001000000";
        ram[73] = "0b00111100111000110011000111111110";
        ram[74] = "0b00111101100111110000100100101010";
        ram[75] = "0b00111100101101111111110111010011";
        ram[76] = "0b10111110010101111101100011001111";
        ram[77] = "0b00111101010111111001110010011000";
        ram[78] = "0b00111101101100001111100000110011";
        ram[79] = "0b10111101000011111111110011001101";
        ram[80] = "0b10111101011000100110110000111100";
        ram[81] = "0b10111101110111101011101101110111";
        ram[82] = "0b00111101011000110111001010110001";
        ram[83] = "0b10111110000011010111111111011000";
        ram[84] = "0b10111110001001000001010101101110";
        ram[85] = "0b00111010101111111101101110100011";
        ram[86] = "0b00111101110100000101000100000001";
        ram[87] = "0b00111110010101100001011100111100";
        ram[88] = "0b00111101101010010100110101000011";
        ram[89] = "0b00111100110110011101110010110101";
        ram[90] = "0b10111101111001111101000100110101";
        ram[91] = "0b10111101111111010011010111101011";
        ram[92] = "0b00111110001001011110001101010100";
        ram[93] = "0b10111101001110001111011101001000";
        ram[94] = "0b10111101101111110101100010011000";
        ram[95] = "0b00111101110101111111001100000110";
        ram[96] = "0b10111110001000011111000010000000";
        ram[97] = "0b10111110010010001010000011010011";
        ram[98] = "0b00111110011000011100010111000101";
        ram[99] = "0b10111100000011000101100010101001";
        ram[100] = "0b00111110000011111111100101110010";
        ram[101] = "0b00111101010101101111101110101010";
        ram[102] = "0b10111101010101010110101111110011";
        ram[103] = "0b00111100101011011001001010101011";
        ram[104] = "0b00111101110001010001001011111010";
        ram[105] = "0b00111101110010010100111010100000";
        ram[106] = "0b00111101100011101011001010110110";
        ram[107] = "0b10111101101010101101010000010001";
        ram[108] = "0b10111101100000010010011111101000";
        ram[109] = "0b10111101110100000111001110011011";
        ram[110] = "0b00111101000100001100001001011011";
        ram[111] = "0b00111101110010010111100001011100";
        ram[112] = "0b00111101110111100101101110000101";
        ram[113] = "0b00111101001011001111001000111100";
        ram[114] = "0b10111100001000011010100101101000";
        ram[115] = "0b00111101100110001110100111001110";
        ram[116] = "0b00111101101000110001111100000100";
        ram[117] = "0b00111011110001001001010100110000";
        ram[118] = "0b00111110001100111011110000001010";
        ram[119] = "0b00111101001010101100011101101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_1) {
meminst = new inference_conv2d_f3_2_0_1_ram("inference_conv2d_f3_2_0_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_1() {
    delete meminst;
}


};//endmodule
#endif
