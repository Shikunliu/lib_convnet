// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_14_H__
#define __inference_conv2d_f3_2_0_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_14_ram) {
        ram[0] = "0b10111110010000010111010011000101";
        ram[1] = "0b10111101000001100001000011110001";
        ram[2] = "0b00111011101100010111101001100001";
        ram[3] = "0b10111101010011111111110101101110";
        ram[4] = "0b10111101110101011100100111100110";
        ram[5] = "0b00111101101010101101101001000001";
        ram[6] = "0b10111101100111110011100101011001";
        ram[7] = "0b00111110001100001101011100111000";
        ram[8] = "0b10111101100001100011011100101001";
        ram[9] = "0b10111101101010100110000011100010";
        ram[10] = "0b00111011001100011010001011010000";
        ram[11] = "0b00111100101010011010101000011101";
        ram[12] = "0b10111110001010101000010000111000";
        ram[13] = "0b00111000001101000111011010110101";
        ram[14] = "0b10111101110111000001001001101010";
        ram[15] = "0b10111101111001110111100100100000";
        ram[16] = "0b10111110000101010101010110000010";
        ram[17] = "0b10111101010100101111100011100110";
        ram[18] = "0b10111110000000111101000000111001";
        ram[19] = "0b00111101001101001000001001101110";
        ram[20] = "0b00111101000000001001111101100010";
        ram[21] = "0b00111100101101111101101011001101";
        ram[22] = "0b00111100110000011110110001101001";
        ram[23] = "0b10111101101110001010000110011101";
        ram[24] = "0b00111101101111100000000101011000";
        ram[25] = "0b10111101011000100000000011110111";
        ram[26] = "0b00111101000100101010000101110011";
        ram[27] = "0b10111100111110010101110001000010";
        ram[28] = "0b10111100110111111111001001000011";
        ram[29] = "0b10111101011001101011101101010110";
        ram[30] = "0b00111101101000100001000001000110";
        ram[31] = "0b10111101011110100111100111111111";
        ram[32] = "0b10111110001011001111111011011111";
        ram[33] = "0b10111101111111011101100101111111";
        ram[34] = "0b10111101100010101010010101011011";
        ram[35] = "0b00111101110010110101010101000001";
        ram[36] = "0b10111100101001000000010011000010";
        ram[37] = "0b00111100111101000110110100100101";
        ram[38] = "0b10111101010011011110101101000101";
        ram[39] = "0b00111101001000110101100100110110";
        ram[40] = "0b00111101110001101000111000100100";
        ram[41] = "0b10111101011111100100011000111100";
        ram[42] = "0b10111101110001111010110101110011";
        ram[43] = "0b10111101111110011011000010101011";
        ram[44] = "0b00111101111001111111111001001100";
        ram[45] = "0b10111100111100011110011011001101";
        ram[46] = "0b10111101011101100010100001111011";
        ram[47] = "0b10111101111001101100000110100000";
        ram[48] = "0b00111100101111111000101011111011";
        ram[49] = "0b10111100001010010100111100011001";
        ram[50] = "0b10111101101000110001010101101100";
        ram[51] = "0b00111101000110010011011111111010";
        ram[52] = "0b10111101000000011101000010000101";
        ram[53] = "0b00111110000111110111111100000110";
        ram[54] = "0b00111101010100011010000010001100";
        ram[55] = "0b00111101100001001011000010011111";
        ram[56] = "0b00111101100000110111010101000011";
        ram[57] = "0b00111101110000110110100011100011";
        ram[58] = "0b00111011110001011010000110100000";
        ram[59] = "0b10111101000110100000000011100010";
        ram[60] = "0b00111100101101000011111000101011";
        ram[61] = "0b10111100100111011001000011010101";
        ram[62] = "0b10111110000000110000110111111010";
        ram[63] = "0b00111110000101110101001111100111";
        ram[64] = "0b00111101101010010000001111011101";
        ram[65] = "0b00111101100011100010100101110100";
        ram[66] = "0b10111100011110000000001011011011";
        ram[67] = "0b00111101100000101011001000011111";
        ram[68] = "0b10111101101111111111110110010111";
        ram[69] = "0b00111110000110101001011011010101";
        ram[70] = "0b10111101110110010000010000101110";
        ram[71] = "0b10111101001100000100111000010001";
        ram[72] = "0b00111101011111100111010101101100";
        ram[73] = "0b00111101001000011101010000010110";
        ram[74] = "0b10111001100000010101011001110001";
        ram[75] = "0b10111101111101110001000000000010";
        ram[76] = "0b10111100100110000011000001111000";
        ram[77] = "0b10111110010000100001011001000000";
        ram[78] = "0b10111101001011011110110010000111";
        ram[79] = "0b10111101010010111011010011101111";
        ram[80] = "0b10111101111111101101100001001101";
        ram[81] = "0b10111100100101000100010000100101";
        ram[82] = "0b10111110011010110101001000000000";
        ram[83] = "0b10111110000000000010101000110101";
        ram[84] = "0b00111101100011100100111001001111";
        ram[85] = "0b00111110000111110010001100000011";
        ram[86] = "0b10111110000010101111010000101000";
        ram[87] = "0b00111101111001100110011011101101";
        ram[88] = "0b10111101000110010010000011001110";
        ram[89] = "0b10111101010001010111001110101000";
        ram[90] = "0b10111101010100100010010011100001";
        ram[91] = "0b10111110001000110001100000110011";
        ram[92] = "0b00111101000011000111100000010011";
        ram[93] = "0b10111101100000000111001011010010";
        ram[94] = "0b00111110001001011001010100110110";
        ram[95] = "0b10111110000001110001001110101101";
        ram[96] = "0b10111101101001010111001000111101";
        ram[97] = "0b00111101111010010010001101100000";
        ram[98] = "0b00111110000100000000100111110110";
        ram[99] = "0b10111101100101110011011111000000";
        ram[100] = "0b00111110001000110010110001100010";
        ram[101] = "0b00111110000011110001001000111100";
        ram[102] = "0b00111011000101011101110000100000";
        ram[103] = "0b10111100011111000101000001001000";
        ram[104] = "0b10111101110111111110001100101010";
        ram[105] = "0b10111101000001110110000101101110";
        ram[106] = "0b00111101100101101101001100111110";
        ram[107] = "0b10111100000011010000000001101111";
        ram[108] = "0b10111101101101110001001010101110";
        ram[109] = "0b00111101110011001011111110100100";
        ram[110] = "0b00111101111001010101001110101100";
        ram[111] = "0b00111100010001110111110100000010";
        ram[112] = "0b10111110000111100100000100001011";
        ram[113] = "0b00111011100110111100100001001000";
        ram[114] = "0b10111101100000111010100000011110";
        ram[115] = "0b10111101111011100000111111000011";
        ram[116] = "0b10111101001111101111011111111000";
        ram[117] = "0b00111101010011111000100001001110";
        ram[118] = "0b10111110000100011101011100010011";
        ram[119] = "0b10111101101010011001001010101110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_14) {
meminst = new inference_conv2d_f3_2_0_14_ram("inference_conv2d_f3_2_0_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_14() {
    delete meminst;
}


};//endmodule
#endif
