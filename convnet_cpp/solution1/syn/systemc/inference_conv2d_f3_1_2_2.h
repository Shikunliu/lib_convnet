// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_2_H__
#define __inference_conv2d_f3_1_2_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_2_ram) {
        ram[0] = "0b10111101110011010110010101011110";
        ram[1] = "0b00111110000100000110110110010100";
        ram[2] = "0b00111110000001010100111100110111";
        ram[3] = "0b10111100100111001111110101100111";
        ram[4] = "0b10111100110100111101001110000111";
        ram[5] = "0b10111101011110000100010100100001";
        ram[6] = "0b10111101010100011001010111011010";
        ram[7] = "0b10111101100101010001100010111110";
        ram[8] = "0b00111101001010011010010001110100";
        ram[9] = "0b00111101011111110001011110100011";
        ram[10] = "0b00111101100010100000100001100010";
        ram[11] = "0b00111110000001111110011101111101";
        ram[12] = "0b10111101101000010111110110010100";
        ram[13] = "0b10111101111011111001100110000000";
        ram[14] = "0b00111100011011000101101000110001";
        ram[15] = "0b10111100100011000101010001101100";
        ram[16] = "0b10111101101000101111001101100101";
        ram[17] = "0b10111110000001000000100000010000";
        ram[18] = "0b10111100111011111010011000010110";
        ram[19] = "0b10111110000100101010010001010101";
        ram[20] = "0b00111101110111010101011011110011";
        ram[21] = "0b00111110001000011101011000000110";
        ram[22] = "0b00111011101010001111110011100100";
        ram[23] = "0b00111101101100100110110100000101";
        ram[24] = "0b10111110000111011101111000110111";
        ram[25] = "0b10111101111110100110001111111010";
        ram[26] = "0b00111100110000100000001000000011";
        ram[27] = "0b10111101111011001010001111101000";
        ram[28] = "0b00111101011001100011101011111101";
        ram[29] = "0b10111101010110111011001100011010";
        ram[30] = "0b10111101011100001001101010111000";
        ram[31] = "0b10111101111010001000101011001110";
        ram[32] = "0b00111110001001101110101011001000";
        ram[33] = "0b00111100100011010101010011101000";
        ram[34] = "0b10111101010110101001100011010011";
        ram[35] = "0b00111100001001110001001000101000";
        ram[36] = "0b00111101111010111101110010101101";
        ram[37] = "0b10111101000000100100010011101001";
        ram[38] = "0b10111101010111101110000100000001";
        ram[39] = "0b10111101001000000100110101111101";
        ram[40] = "0b10111101111001010110001111101101";
        ram[41] = "0b00111100011010101110110001110011";
        ram[42] = "0b00111101100011011100011101101001";
        ram[43] = "0b10111101110001000001101000100110";
        ram[44] = "0b10111101010000110110001110010111";
        ram[45] = "0b00111101110010001100011001010000";
        ram[46] = "0b10111110000000100110000000101101";
        ram[47] = "0b10111101101010000010011100001001";
        ram[48] = "0b10111101101000001001110010001101";
        ram[49] = "0b10111101100001010110010101010111";
        ram[50] = "0b10111101010100101100110010100110";
        ram[51] = "0b10111011000010100110110011010110";
        ram[52] = "0b00111100001101100001101001101110";
        ram[53] = "0b10111101110100111001000010000110";
        ram[54] = "0b00111110001011110001111010001110";
        ram[55] = "0b10111110000000011011110110100101";
        ram[56] = "0b10111110000011110010101000010111";
        ram[57] = "0b00111101110101001111100111000010";
        ram[58] = "0b00111101100001101011110000010010";
        ram[59] = "0b10111110001100101001111001001101";
        ram[60] = "0b00111101111001011010101000101110";
        ram[61] = "0b00111110000010111000111011010010";
        ram[62] = "0b00111011100100101000101100011101";
        ram[63] = "0b00111110001000100011111110101011";
        ram[64] = "0b00111010110001010001000011000001";
        ram[65] = "0b10111101001111101000000111001011";
        ram[66] = "0b00111100101110111101011010100110";
        ram[67] = "0b00111101110001110110111101101101";
        ram[68] = "0b10111101100101111110011011001111";
        ram[69] = "0b00111101100101010101111101101011";
        ram[70] = "0b10111101100110101111101111101010";
        ram[71] = "0b10111101111001100101000001100001";
        ram[72] = "0b00111110000110110111100011001101";
        ram[73] = "0b10111110000111010111101110100110";
        ram[74] = "0b00111110001011001101000101000010";
        ram[75] = "0b10111101110000001100111001001111";
        ram[76] = "0b00111101011111011000011110011011";
        ram[77] = "0b00111101010010101011101110110000";
        ram[78] = "0b10111101010001101001110011101101";
        ram[79] = "0b10111101111010110110111000001101";
        ram[80] = "0b00111110010001011011110001000101";
        ram[81] = "0b10111101001001011010101111011100";
        ram[82] = "0b00111101010011111001100001011001";
        ram[83] = "0b00111101111010010000011110010110";
        ram[84] = "0b10111110000101010111010011110111";
        ram[85] = "0b00111101101101100100110100101111";
        ram[86] = "0b10111101010101111101010011101110";
        ram[87] = "0b10111101100001011100110110000101";
        ram[88] = "0b00111101111000101001001010000001";
        ram[89] = "0b00111101000011110000101100000000";
        ram[90] = "0b00111100111011111101111000010100";
        ram[91] = "0b10111100011101000110000010010000";
        ram[92] = "0b10111101010000100110001111011000";
        ram[93] = "0b10111100101001010110110101000010";
        ram[94] = "0b10111100100100110110101110000010";
        ram[95] = "0b00111101100110110101101000111100";
        ram[96] = "0b00111110001111111101100101110111";
        ram[97] = "0b00111101010011110100111001101100";
        ram[98] = "0b00111101001111111111111101111010";
        ram[99] = "0b00111101000110001000110101100000";
        ram[100] = "0b10111100100110001111011001110001";
        ram[101] = "0b10111011110010101010010100010101";
        ram[102] = "0b10111101010011011100000110100100";
        ram[103] = "0b10111101101000010001110000110111";
        ram[104] = "0b00111101011100101101001100100111";
        ram[105] = "0b00111100010111001110010101001001";
        ram[106] = "0b00111011100111000000000010010010";
        ram[107] = "0b00111101111011001011111110110001";
        ram[108] = "0b00111100010011011101111001000101";
        ram[109] = "0b00111101110110101011010010110111";
        ram[110] = "0b10111100011011101001100100111011";
        ram[111] = "0b10111101001011101110100111000011";
        ram[112] = "0b10111100101011101000110111101000";
        ram[113] = "0b00111101100101001010010111011111";
        ram[114] = "0b10111100110011000010101100011100";
        ram[115] = "0b10111101101101001000010100101000";
        ram[116] = "0b00111100000011000111010000000010";
        ram[117] = "0b10111101001010000110110100111100";
        ram[118] = "0b00110111011011011111100000111111";
        ram[119] = "0b10111101010001011110100001000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_2) {
meminst = new inference_conv2d_f3_1_2_2_ram("inference_conv2d_f3_1_2_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_2() {
    delete meminst;
}


};//endmodule
#endif
