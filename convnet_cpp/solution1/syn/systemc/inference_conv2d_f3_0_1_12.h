// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_12_H__
#define __inference_conv2d_f3_0_1_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_12_ram) {
        ram[0] = "0b10111010100000111101101011000001";
        ram[1] = "0b00111101110100000011011101010000";
        ram[2] = "0b10111110010000001100001100001001";
        ram[3] = "0b00111101001001001011111011111100";
        ram[4] = "0b00111011110010011010010001111001";
        ram[5] = "0b10111101110001110100001101010110";
        ram[6] = "0b10111101001110000011011000111101";
        ram[7] = "0b10111101101001010010011011110100";
        ram[8] = "0b00111010001100100000101010111011";
        ram[9] = "0b10111110000000100100011100000010";
        ram[10] = "0b10111100110101001100101010010010";
        ram[11] = "0b10111011001110100110101001001010";
        ram[12] = "0b10111110000101101011101000000110";
        ram[13] = "0b10111110000111011111100000101011";
        ram[14] = "0b00111101110110101111110110010111";
        ram[15] = "0b00111101110100010101010110010011";
        ram[16] = "0b00111101011101111111000010000010";
        ram[17] = "0b10111101110100110001001010110010";
        ram[18] = "0b00111101111110011101000000100000";
        ram[19] = "0b10111100101011001001110001000000";
        ram[20] = "0b00111101101111100000101001000010";
        ram[21] = "0b10111101101110111001100000011001";
        ram[22] = "0b00111110000110110110001100001011";
        ram[23] = "0b00111101000100111111001111101110";
        ram[24] = "0b00111110000111001110000011111100";
        ram[25] = "0b00111110001011110101101011011001";
        ram[26] = "0b10111100111001111100110111011010";
        ram[27] = "0b10111100100010100111011101010010";
        ram[28] = "0b10111101111010011010011101111110";
        ram[29] = "0b00111101110111001001011010001001";
        ram[30] = "0b00111101100110101100111010000011";
        ram[31] = "0b10111101100001101110000110101001";
        ram[32] = "0b10111011111001110111111001101001";
        ram[33] = "0b00111110000100111100110100010100";
        ram[34] = "0b00111101101101010000101111100110";
        ram[35] = "0b10111101001010110001001010011110";
        ram[36] = "0b10111101010011111000000011011100";
        ram[37] = "0b00111101101000000001000111101110";
        ram[38] = "0b00111101110000001001010000011101";
        ram[39] = "0b00111101101101111101000000011011";
        ram[40] = "0b00111101010000001000101010111010";
        ram[41] = "0b10111101101000010001111111111110";
        ram[42] = "0b10111101100111111101101110000010";
        ram[43] = "0b00111110001101110111010110111000";
        ram[44] = "0b10111110000001010010111001110011";
        ram[45] = "0b00111100100000110000001110001011";
        ram[46] = "0b10111100111100010011000110011100";
        ram[47] = "0b10111101001010011100100010100001";
        ram[48] = "0b10111100100010010110110000100101";
        ram[49] = "0b10111100110111011010101100001100";
        ram[50] = "0b00111101110100101101000010100010";
        ram[51] = "0b10111100100100100011010001001011";
        ram[52] = "0b00111101011110010010101010001110";
        ram[53] = "0b00111101110010011101100000011000";
        ram[54] = "0b00111100010001010000100010110011";
        ram[55] = "0b00111011100111010111011110100000";
        ram[56] = "0b10111100101101100010011000101101";
        ram[57] = "0b00111110010110010010110010001100";
        ram[58] = "0b00111101100101111111101101000001";
        ram[59] = "0b10111110000011000100101011000111";
        ram[60] = "0b00111110001000000100101011111001";
        ram[61] = "0b10111101001011101000100100110000";
        ram[62] = "0b00111101000011001101010010101010";
        ram[63] = "0b10111110010000010001001000110100";
        ram[64] = "0b00111101101000001111011000011010";
        ram[65] = "0b10111101101111011111001111010001";
        ram[66] = "0b00111101011001110010001110010000";
        ram[67] = "0b10111101100010111110001010110101";
        ram[68] = "0b00111101010010011101011001011101";
        ram[69] = "0b10111101010110110101100000010101";
        ram[70] = "0b10111110010110001110011111011110";
        ram[71] = "0b00111101100101100111000101110110";
        ram[72] = "0b10111101101011111001000010100100";
        ram[73] = "0b10111100010100010011010101111101";
        ram[74] = "0b00111110000100111000100101110010";
        ram[75] = "0b10111110000100100001111101101101";
        ram[76] = "0b00111101011101001100110111010011";
        ram[77] = "0b10111100101100011000011111001101";
        ram[78] = "0b10111100101101101001101011111100";
        ram[79] = "0b10111100100111010001011011000111";
        ram[80] = "0b10111101011001011000011011110011";
        ram[81] = "0b00111101000111100000111111010000";
        ram[82] = "0b10111101100111011101001110100000";
        ram[83] = "0b10111110000011001100111011100110";
        ram[84] = "0b00111110000110000000010001010011";
        ram[85] = "0b10111100110000101001101011100101";
        ram[86] = "0b00111110000001011101011110001000";
        ram[87] = "0b00111101101010010000011101111011";
        ram[88] = "0b10111101111110001011111011111001";
        ram[89] = "0b00111101101110011101010001101101";
        ram[90] = "0b10111101001011011000010100100100";
        ram[91] = "0b00111101110101110111101011110110";
        ram[92] = "0b00111100001110111100001110010000";
        ram[93] = "0b10111101110010001001111000110100";
        ram[94] = "0b00111110000011011111010010000000";
        ram[95] = "0b00111100110001010000101111011000";
        ram[96] = "0b10111110010000000111011110001010";
        ram[97] = "0b10111101000110011010110110000110";
        ram[98] = "0b10111011111000111001011100101001";
        ram[99] = "0b10111101100000101010000010110111";
        ram[100] = "0b00111101111111000000011011100010";
        ram[101] = "0b10111110010011000100100001101011";
        ram[102] = "0b00111101011101101111001000011111";
        ram[103] = "0b00111110010110100110100101111011";
        ram[104] = "0b10111101011001111001000101011001";
        ram[105] = "0b10111100101110110110011101111111";
        ram[106] = "0b10111101101100110100101100101001";
        ram[107] = "0b00111101111011111010110111110011";
        ram[108] = "0b10111101100101011000010110110001";
        ram[109] = "0b00111101110111101001010010101011";
        ram[110] = "0b00111101111111010111010011010110";
        ram[111] = "0b00111101101100010110011011111011";
        ram[112] = "0b10111101101000111110011011111010";
        ram[113] = "0b10111101000000100000111001001000";
        ram[114] = "0b00111110001011101100111011011101";
        ram[115] = "0b10111100101101110111011011111010";
        ram[116] = "0b00111101110000110010100100010101";
        ram[117] = "0b10111100110100010000110010011000";
        ram[118] = "0b00111101110110010111001001000111";
        ram[119] = "0b10111100110000100101000000000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_12) {
meminst = new inference_conv2d_f3_0_1_12_ram("inference_conv2d_f3_0_1_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_12() {
    delete meminst;
}


};//endmodule
#endif
