// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_9_H__
#define __inference_conv2d_f3_2_2_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_9_ram) {
        ram[0] = "0b00111101100100010011011000011110";
        ram[1] = "0b00111101111011111100100100110110";
        ram[2] = "0b00111101011010011010001100010111";
        ram[3] = "0b00111100011001011101010011011100";
        ram[4] = "0b10111101000001001010110100101001";
        ram[5] = "0b10111110001001000010001101010011";
        ram[6] = "0b00111101111001111101001101001110";
        ram[7] = "0b00111100110011001011010110000110";
        ram[8] = "0b10111101111110010111001101010100";
        ram[9] = "0b00111101101011111110010001101100";
        ram[10] = "0b00111101000111000111111101011101";
        ram[11] = "0b00111101000100000111001001011001";
        ram[12] = "0b10111101111001100111000011100011";
        ram[13] = "0b10111110000111100101000111010010";
        ram[14] = "0b10111100000101100001101100011111";
        ram[15] = "0b00111100000100000100011110010110";
        ram[16] = "0b10111101110011001100110111011001";
        ram[17] = "0b10111110001010010000010011110111";
        ram[18] = "0b00111101111100111000110111100111";
        ram[19] = "0b10111110000001101110111111000011";
        ram[20] = "0b00111101100111011110110000000001";
        ram[21] = "0b00111101101000011100011010110111";
        ram[22] = "0b00111101011110010010100000001010";
        ram[23] = "0b00111100110010010101010000111101";
        ram[24] = "0b00111101001000001110001010011001";
        ram[25] = "0b10111101110000000111001100110000";
        ram[26] = "0b10111101100011011010000000111111";
        ram[27] = "0b10111110000000101001001011000101";
        ram[28] = "0b10111110000000011010101101001011";
        ram[29] = "0b10111100110000000000111101001111";
        ram[30] = "0b00111110000101010111111011101101";
        ram[31] = "0b00111100100111000011000100100100";
        ram[32] = "0b10111100000011100001011111110001";
        ram[33] = "0b10111101111010111010011010101101";
        ram[34] = "0b00111100011101111100010011001000";
        ram[35] = "0b10111100100101110001100010000000";
        ram[36] = "0b10111101100001000010011010101110";
        ram[37] = "0b00111101111111000100100101110111";
        ram[38] = "0b00111100001001110110000000101100";
        ram[39] = "0b10111101100100010111010110011100";
        ram[40] = "0b10111011010001110011001110110001";
        ram[41] = "0b00111101111010001111101001111011";
        ram[42] = "0b00111101111011100000000110011011";
        ram[43] = "0b10111110000111001000100111110100";
        ram[44] = "0b00111101100110011100011101111010";
        ram[45] = "0b10111101111001111000011011000010";
        ram[46] = "0b00111100101110100111011011110100";
        ram[47] = "0b00111101001110110010011000010001";
        ram[48] = "0b10111011100010110001011010110100";
        ram[49] = "0b10111110000001001101100000110100";
        ram[50] = "0b00111101100010010111001001111101";
        ram[51] = "0b00111011111101010010101110111100";
        ram[52] = "0b10111101001111111001101111110111";
        ram[53] = "0b10111101100101001000111111100111";
        ram[54] = "0b10111101011011000000111100000010";
        ram[55] = "0b10111101011111100100110000110110";
        ram[56] = "0b10111100010101011010100000111110";
        ram[57] = "0b10111100000110010010110101111001";
        ram[58] = "0b00111010000111110100011010101101";
        ram[59] = "0b10111100110001001101011000101001";
        ram[60] = "0b10111101100111011111111110101010";
        ram[61] = "0b00111101100000000001011011000001";
        ram[62] = "0b00111101001101100100101000001001";
        ram[63] = "0b00111100100011001000111111111100";
        ram[64] = "0b10111101100111011110011100100001";
        ram[65] = "0b10111101000100010011011110010110";
        ram[66] = "0b10111101100111011100000011101001";
        ram[67] = "0b00111110000101101001110001100111";
        ram[68] = "0b00111101101000000001101011100101";
        ram[69] = "0b00111101110001101001100101101010";
        ram[70] = "0b10111100001011100100001111100000";
        ram[71] = "0b00111101011101100011011101011111";
        ram[72] = "0b10111101011010111100011101100100";
        ram[73] = "0b10111100101111011110001100100101";
        ram[74] = "0b00111101100010010100001011010101";
        ram[75] = "0b10111101010100100111001110100000";
        ram[76] = "0b00111100111000100110010011100101";
        ram[77] = "0b10111101101110010000101100110100";
        ram[78] = "0b10111101110010100100111010111110";
        ram[79] = "0b10111101000010001001001011111100";
        ram[80] = "0b10111101001010001110100011000010";
        ram[81] = "0b10111101101011100000000100110000";
        ram[82] = "0b10111101011111010101010010111111";
        ram[83] = "0b10111101000000101000000101001111";
        ram[84] = "0b00111101111001010000001101110101";
        ram[85] = "0b00111011110101101001100100101001";
        ram[86] = "0b00111101101000010011010001111110";
        ram[87] = "0b10111110001100011101010000110000";
        ram[88] = "0b10111100110011111001111000000011";
        ram[89] = "0b00111101101100000000000111110001";
        ram[90] = "0b10111110001001101010110101110001";
        ram[91] = "0b10111101100010011111111010101111";
        ram[92] = "0b00111101100010101111101010101000";
        ram[93] = "0b00111110000000101111110001101001";
        ram[94] = "0b00111101100111000011001110000000";
        ram[95] = "0b10111110000010001111110010010011";
        ram[96] = "0b00111101011010100001000101100110";
        ram[97] = "0b10111101001110010001011110010100";
        ram[98] = "0b00111101010101011111011001000001";
        ram[99] = "0b00111101110100000111001100010101";
        ram[100] = "0b00111101001111101001011011000100";
        ram[101] = "0b00111100101110101010100101111111";
        ram[102] = "0b10111100111100010011001110110100";
        ram[103] = "0b00111101101011111000011011100100";
        ram[104] = "0b00111101010001010111010000101110";
        ram[105] = "0b10111101001110111001101011100001";
        ram[106] = "0b00111011101010100111100001100100";
        ram[107] = "0b00111100100110000111001010111110";
        ram[108] = "0b00111100110110100001011111011001";
        ram[109] = "0b10111100001001111000011011000010";
        ram[110] = "0b00111011110001010001011001100000";
        ram[111] = "0b10111101000011100010101110100111";
        ram[112] = "0b10111100001100101000100001111110";
        ram[113] = "0b00111101001001000010101101110011";
        ram[114] = "0b10111100111111001000101111010111";
        ram[115] = "0b00111101010111101001011111010000";
        ram[116] = "0b00111101011111101001001010010010";
        ram[117] = "0b10111100000101100010101101110000";
        ram[118] = "0b10111110001010000111010110010010";
        ram[119] = "0b10111110010000101000011100111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_9) {
meminst = new inference_conv2d_f3_2_2_9_ram("inference_conv2d_f3_2_2_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_9() {
    delete meminst;
}


};//endmodule
#endif
