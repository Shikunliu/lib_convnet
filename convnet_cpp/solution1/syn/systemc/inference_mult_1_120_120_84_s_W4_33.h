// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_33_H__
#define __inference_mult_1_120_120_84_s_W4_33_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_33_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_33_ram) {
        ram[0] = "0b10111101110011010000100110011110";
        ram[1] = "0b10111110000101000100100011001111";
        ram[2] = "0b10111101101000011011100100100011";
        ram[3] = "0b10111100111101011111100101001100";
        ram[4] = "0b00111100111011111111001011010111";
        ram[5] = "0b00111101101010110100111001111101";
        ram[6] = "0b00111100111101110001101000010011";
        ram[7] = "0b00111011100101101101011111001000";
        ram[8] = "0b10111110000111011111000001001110";
        ram[9] = "0b10111110000100001101000010101011";
        ram[10] = "0b10111100011101010110101000001111";
        ram[11] = "0b10111101101010001111011011001111";
        ram[12] = "0b10111110001011001001100100101000";
        ram[13] = "0b00111101101001001001011011111011";
        ram[14] = "0b00111011110001111101110011111001";
        ram[15] = "0b00111101101110001100110111000010";
        ram[16] = "0b00111101100010100110010111000010";
        ram[17] = "0b10111101100011010100010000100001";
        ram[18] = "0b10111110000011000010110000011011";
        ram[19] = "0b00111101001101110011111010010000";
        ram[20] = "0b00111101001001010010010110111111";
        ram[21] = "0b10111110001100100101001011001110";
        ram[22] = "0b10111101000110110001110011010111";
        ram[23] = "0b00111110000001100010011101111100";
        ram[24] = "0b00111110000010111110111101001010";
        ram[25] = "0b10111101101110010010101101100101";
        ram[26] = "0b00111110010100011011000010001010";
        ram[27] = "0b10111100011001101010000001001000";
        ram[28] = "0b00111101011001111000101101000100";
        ram[29] = "0b10111101011011110111000111111000";
        ram[30] = "0b10111110001000100100110100001010";
        ram[31] = "0b00111101100011000100101000011000";
        ram[32] = "0b00111100010000011000111111101101";
        ram[33] = "0b10111100100110111110010110100100";
        ram[34] = "0b00111100101111111111111011110100";
        ram[35] = "0b00111110001101111100010111101111";
        ram[36] = "0b00111101110110010001010101111011";
        ram[37] = "0b10111101100001010101110101010010";
        ram[38] = "0b00111101101101000000000111100000";
        ram[39] = "0b10111101001101100100100111101110";
        ram[40] = "0b00111101100100000111111010101011";
        ram[41] = "0b10111101101100011111010000000011";
        ram[42] = "0b10111101001001010010111000000111";
        ram[43] = "0b00111101011110110011010000011110";
        ram[44] = "0b10111101011111110001000111111001";
        ram[45] = "0b10111110010000001110111111011101";
        ram[46] = "0b00111110000011101011001100010100";
        ram[47] = "0b00111100100111101111100001111110";
        ram[48] = "0b00111101101110000010110111011001";
        ram[49] = "0b00111101010010010101011000100000";
        ram[50] = "0b10111110000100010001001010111010";
        ram[51] = "0b00111101101011111101010100101010";
        ram[52] = "0b10111110000011100110011001000101";
        ram[53] = "0b10111101010011010111001110111100";
        ram[54] = "0b10111011110110111110010000000001";
        ram[55] = "0b10111101101010110101111100000001";
        ram[56] = "0b10111101101000011010001100000011";
        ram[57] = "0b00111100100100111100000101001000";
        ram[58] = "0b10111110001100101110001001110110";
        ram[59] = "0b10111101111001011001110000000110";
        ram[60] = "0b10111100000101101110011000010110";
        ram[61] = "0b10111101110100111010011110011000";
        ram[62] = "0b10111101001111100011101000101101";
        ram[63] = "0b00111101000011101100110000010110";
        ram[64] = "0b00111100100011001110101110100001";
        ram[65] = "0b00111100101000001101111101110100";
        ram[66] = "0b10111101000010111111011101101010";
        ram[67] = "0b10111101111000100101111010011010";
        ram[68] = "0b00111101111000011011101100000110";
        ram[69] = "0b10111101101000000111011111110101";
        ram[70] = "0b00111100000101111111000110101111";
        ram[71] = "0b00111101100111100010000110010110";
        ram[72] = "0b10111001111101101111100101101001";
        ram[73] = "0b00111101000110000000001000111010";
        ram[74] = "0b00111101101000110001100011101111";
        ram[75] = "0b00111101010111110101110010100010";
        ram[76] = "0b10111001000101110010101101000100";
        ram[77] = "0b00111101100011001001100010100010";
        ram[78] = "0b10111100101010011001010100100101";
        ram[79] = "0b00111100110111110111100101000010";
        ram[80] = "0b10111110001111110011011100110011";
        ram[81] = "0b10111100001100110101000011111011";
        ram[82] = "0b10111101101100110001110001110010";
        ram[83] = "0b10111110011100110101100001101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_33) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_33_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_33) {
meminst = new inference_mult_1_120_120_84_s_W4_33_ram("inference_mult_1_120_120_84_s_W4_33_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_33() {
    delete meminst;
}


};//endmodule
#endif
