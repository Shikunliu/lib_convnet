// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_14_H__
#define __inference_conv2d_f3_0_1_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_14_ram) {
        ram[0] = "0b10111110011000100001011110001111";
        ram[1] = "0b10111100001111111001010001101011";
        ram[2] = "0b10111110000000011011001101101100";
        ram[3] = "0b00111101011010101100111110000010";
        ram[4] = "0b00111101110001001001000100000001";
        ram[5] = "0b00111101110001111001000000111111";
        ram[6] = "0b00111101010101101110011110100011";
        ram[7] = "0b00111110010001100001101110110000";
        ram[8] = "0b10111101110010110000011011111010";
        ram[9] = "0b00111101001001100101000010010111";
        ram[10] = "0b00111101110000000001101000001111";
        ram[11] = "0b10111110001010101100111111111010";
        ram[12] = "0b00111101100101011000110100001000";
        ram[13] = "0b10111101111110100110000001001110";
        ram[14] = "0b00111101011100011101100000011111";
        ram[15] = "0b00111101100010011100010101010011";
        ram[16] = "0b10111101100001010111000000111111";
        ram[17] = "0b00111100101100101110011101111110";
        ram[18] = "0b00111100100001000000111001001101";
        ram[19] = "0b00111101000010001010000011101110";
        ram[20] = "0b00111101111111110111111110001101";
        ram[21] = "0b00111101000111000101110000000111";
        ram[22] = "0b00111100101001111000011010001100";
        ram[23] = "0b10111110000011100001101000111111";
        ram[24] = "0b00111110001101110110110011001110";
        ram[25] = "0b10111101011111101100010101101101";
        ram[26] = "0b00111101100110000110011011010111";
        ram[27] = "0b00111110001011001000010100111100";
        ram[28] = "0b10111101111010111001001101000111";
        ram[29] = "0b10111110001001100101111111011001";
        ram[30] = "0b00111101101100000100010110000101";
        ram[31] = "0b00111110011001101011100011111010";
        ram[32] = "0b10111101111001111111100110010100";
        ram[33] = "0b10111110010101001001101100100000";
        ram[34] = "0b10111110000101011111110001111110";
        ram[35] = "0b00111100100010111011010111100001";
        ram[36] = "0b00111100010111001000101001000101";
        ram[37] = "0b00111110001100010001011011101100";
        ram[38] = "0b10111100000011011000100110100001";
        ram[39] = "0b00111101011100110101100111111111";
        ram[40] = "0b00111101010001110011000010010001";
        ram[41] = "0b00111101011011101010100000011111";
        ram[42] = "0b10111101011100110011000011100101";
        ram[43] = "0b10111101110010101010010111000110";
        ram[44] = "0b00111101100010001011101001000001";
        ram[45] = "0b10111101110110111101110101110110";
        ram[46] = "0b10111100110010101100011010011000";
        ram[47] = "0b00111101110000011011010010010011";
        ram[48] = "0b10111101001100100011101011100110";
        ram[49] = "0b00111110001101111101110101000100";
        ram[50] = "0b10111101100110011110010010100000";
        ram[51] = "0b00111110000010010100110011001011";
        ram[52] = "0b10111101101100000001011111101000";
        ram[53] = "0b00111100101110101110001011110101";
        ram[54] = "0b10111101001110110110101001101111";
        ram[55] = "0b10111110000000011000100100110111";
        ram[56] = "0b10111110000111111111110100011110";
        ram[57] = "0b00111101010010000111000011001101";
        ram[58] = "0b10111110000101111001111011100000";
        ram[59] = "0b00111110100100110100110111110000";
        ram[60] = "0b10111101100111011100100101100111";
        ram[61] = "0b00111011011010000111010011110100";
        ram[62] = "0b10111101000000100111010011010101";
        ram[63] = "0b10111100101101100011101101011011";
        ram[64] = "0b00111110000101010000001100110010";
        ram[65] = "0b10111110000111101100000001110010";
        ram[66] = "0b10111101010011111000110001001010";
        ram[67] = "0b10111101010000101010100001010001";
        ram[68] = "0b00111100111001001110010001010000";
        ram[69] = "0b00111101101011001101000111100011";
        ram[70] = "0b00111101000100001000111111010000";
        ram[71] = "0b10111110001010011111011011101100";
        ram[72] = "0b10111100110010110011110100010101";
        ram[73] = "0b10111101101010111101111010101011";
        ram[74] = "0b00111101100101011110100110111001";
        ram[75] = "0b10111101110000010101011111010100";
        ram[76] = "0b10111101011101011011110011001011";
        ram[77] = "0b10111100101011110001010011110110";
        ram[78] = "0b10111010001001001001100111111110";
        ram[79] = "0b10111010101111001010111101001000";
        ram[80] = "0b10111101110000110100001111101101";
        ram[81] = "0b10111011110000010100000111111111";
        ram[82] = "0b00111100001110001100111101010100";
        ram[83] = "0b00111101111101111101000111111110";
        ram[84] = "0b00111101110110010000001010011011";
        ram[85] = "0b00111100000010100101010100001110";
        ram[86] = "0b10111100101000001000100111100011";
        ram[87] = "0b00111101101110100000101000111000";
        ram[88] = "0b10111100100000001110011000001111";
        ram[89] = "0b10111101010110011000001110010100";
        ram[90] = "0b10111101111000111100110110011010";
        ram[91] = "0b00111101010011111001111010100100";
        ram[92] = "0b10111101100011000000001110111100";
        ram[93] = "0b00111101001101010011000011101010";
        ram[94] = "0b00111101101101011100010011101011";
        ram[95] = "0b00111101100001011100001110000001";
        ram[96] = "0b10111100100100011010100101110110";
        ram[97] = "0b10111101100101010001100000101011";
        ram[98] = "0b00111110010011001000000001000001";
        ram[99] = "0b10111100100000110100010100101111";
        ram[100] = "0b00111101001100100000100100110010";
        ram[101] = "0b00111101001110110111110001011101";
        ram[102] = "0b10111101111110101101011101010010";
        ram[103] = "0b00111101110010101101111111111000";
        ram[104] = "0b00111100111000110100100101111011";
        ram[105] = "0b00111101101001011011100000101110";
        ram[106] = "0b10111101000010111101101100000000";
        ram[107] = "0b10111110001000111011110101011010";
        ram[108] = "0b10111100100001000000000101001100";
        ram[109] = "0b10111101101101101011111001000101";
        ram[110] = "0b10111101010110110110111111100011";
        ram[111] = "0b00111101000110011111101000010010";
        ram[112] = "0b10111101011100000001101001111010";
        ram[113] = "0b00111101000001101011011001101000";
        ram[114] = "0b00111110000101100011110010111000";
        ram[115] = "0b10111110000010100010010000000011";
        ram[116] = "0b00111110010011010100110001110111";
        ram[117] = "0b00111110000001010101110110100010";
        ram[118] = "0b00111100101100001001101011010010";
        ram[119] = "0b10111101111010010011000110000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_14) {
meminst = new inference_conv2d_f3_0_1_14_ram("inference_conv2d_f3_0_1_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_14() {
    delete meminst;
}


};//endmodule
#endif
