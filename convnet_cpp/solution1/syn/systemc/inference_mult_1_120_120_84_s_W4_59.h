// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_59_H__
#define __inference_mult_1_120_120_84_s_W4_59_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_59_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_59_ram) {
        ram[0] = "0b00111110000001010101011111011110";
        ram[1] = "0b00111101010011101111001001110111";
        ram[2] = "0b10111011001001000110100000101010";
        ram[3] = "0b10111101100100000010101111000111";
        ram[4] = "0b10111100110100110101000110110111";
        ram[5] = "0b10111101111000111110101101111101";
        ram[6] = "0b00111110000100010001111101001111";
        ram[7] = "0b10111100111111000010011001010111";
        ram[8] = "0b00111110101000111000000101010010";
        ram[9] = "0b00111101110011010011000011110000";
        ram[10] = "0b00111101000011111010001100001011";
        ram[11] = "0b00111101000010111001000000111100";
        ram[12] = "0b10111101110001110101111010110100";
        ram[13] = "0b00111101010111010101101101110101";
        ram[14] = "0b00111110001100010010110001101011";
        ram[15] = "0b10111101101110001000000000000001";
        ram[16] = "0b00111101000101001000001111100110";
        ram[17] = "0b10111110001010011110000100101010";
        ram[18] = "0b00111110001111100010011000001011";
        ram[19] = "0b10111101000011000110010101101001";
        ram[20] = "0b10111100101010010101101011011000";
        ram[21] = "0b00111101110011111110111101111100";
        ram[22] = "0b00111101011101100000001111001000";
        ram[23] = "0b10111101100101010000001000001011";
        ram[24] = "0b00111101101110110100010001101100";
        ram[25] = "0b00111100100110101000100101001110";
        ram[26] = "0b10111101011001101101101011100110";
        ram[27] = "0b10111110001101101001001010110100";
        ram[28] = "0b00111101011110011010011001001010";
        ram[29] = "0b10111101101100010111111000011010";
        ram[30] = "0b00111011101111010010000011001000";
        ram[31] = "0b00111100100101101010110100100000";
        ram[32] = "0b10111110000100011100101101000111";
        ram[33] = "0b00111101000000100110110101001000";
        ram[34] = "0b10111011101101001011110110110111";
        ram[35] = "0b00111101111001100110010001001110";
        ram[36] = "0b00111101011100010111001110010000";
        ram[37] = "0b10111101001110101000111110110011";
        ram[38] = "0b10111100111100011010111101110000";
        ram[39] = "0b10111110000010101101001010011010";
        ram[40] = "0b00111110000001101000010100010010";
        ram[41] = "0b10111110010001101100000010010100";
        ram[42] = "0b00111100110000000110011000100010";
        ram[43] = "0b10111101100011010111101101100011";
        ram[44] = "0b10111110000010100100011111101101";
        ram[45] = "0b00111101101100010101001011100110";
        ram[46] = "0b00111011111111001100111110110100";
        ram[47] = "0b10111101111011001010110011010010";
        ram[48] = "0b00111101111100101100111100010000";
        ram[49] = "0b10111011110001001100110101100100";
        ram[50] = "0b00111100000011011110100011000001";
        ram[51] = "0b00111101101001011000110011010010";
        ram[52] = "0b00111110000001011000010110111110";
        ram[53] = "0b00111101011000101011010111110011";
        ram[54] = "0b00111101000001011001111100010001";
        ram[55] = "0b00111110010100100101000000101111";
        ram[56] = "0b10111100101010000100011110110010";
        ram[57] = "0b00111101100111110110111010111000";
        ram[58] = "0b00111101101101000010011001011101";
        ram[59] = "0b00111101101000110111100000100101";
        ram[60] = "0b00111101011000010001110001100000";
        ram[61] = "0b10111110100001010100101001011110";
        ram[62] = "0b00111110000011011000001011111101";
        ram[63] = "0b10111101100001011111101001110011";
        ram[64] = "0b00111101110001001010110010111101";
        ram[65] = "0b00111110010111100101111001101000";
        ram[66] = "0b10111101101011111010100000010100";
        ram[67] = "0b00111110000000100001110111011010";
        ram[68] = "0b00111100110001111110000011010101";
        ram[69] = "0b10111101111000000101010001101001";
        ram[70] = "0b00111101111100100000110000000111";
        ram[71] = "0b00111101100101010011110000101111";
        ram[72] = "0b00111110010111000111011000001000";
        ram[73] = "0b10111100100101111000001011010100";
        ram[74] = "0b10111100000111011000000001000100";
        ram[75] = "0b00111100101000000111011011001110";
        ram[76] = "0b00111101111011100111011010000110";
        ram[77] = "0b00111110001100001010110101000111";
        ram[78] = "0b10111011111000101111110111111100";
        ram[79] = "0b00111101100010110000110001100000";
        ram[80] = "0b10111101100110011110010010101110";
        ram[81] = "0b10111110010100011001101101001110";
        ram[82] = "0b10111101011011001011111101100001";
        ram[83] = "0b10111011111110011101011111001000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_59) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_59_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_59) {
meminst = new inference_mult_1_120_120_84_s_W4_59_ram("inference_mult_1_120_120_84_s_W4_59_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_59() {
    delete meminst;
}


};//endmodule
#endif
