// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_1_H__
#define __inference_conv2d_f3_3_0_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_1_ram) {
        ram[0] = "0b00111110011000110010111100000001";
        ram[1] = "0b10111101100100110101110111000110";
        ram[2] = "0b00111011000001110011011101101100";
        ram[3] = "0b00111011111000111011011100011111";
        ram[4] = "0b00111100101011101000100110110110";
        ram[5] = "0b10111110010110111000111100010101";
        ram[6] = "0b00111101001110101010111111100100";
        ram[7] = "0b10111100100100111110000011110011";
        ram[8] = "0b00111101111101101100101111011010";
        ram[9] = "0b00111010100010001110111011111100";
        ram[10] = "0b10111110000110110001110111010110";
        ram[11] = "0b00111101000101110001111000001111";
        ram[12] = "0b00111011101000101010100000100001";
        ram[13] = "0b10111100111001111110001100111110";
        ram[14] = "0b00111110001001111000110001000011";
        ram[15] = "0b00111101001110001010100101000100";
        ram[16] = "0b10111101100111011101011000111111";
        ram[17] = "0b10111101101011010110000010011001";
        ram[18] = "0b00111101111000100001001000001110";
        ram[19] = "0b00111110001001111100101011101010";
        ram[20] = "0b00111100000111100001001111110010";
        ram[21] = "0b00111101101010100111011010110001";
        ram[22] = "0b10111110001100010001000100100111";
        ram[23] = "0b10111101100111100111000000111011";
        ram[24] = "0b00111100100000011111010111011001";
        ram[25] = "0b00111101010011000101000111101000";
        ram[26] = "0b10111011110110101101100011111111";
        ram[27] = "0b00111110001001010001101101010000";
        ram[28] = "0b00111110010011000100001010100110";
        ram[29] = "0b00111101111011110110100111001011";
        ram[30] = "0b10111100100011001000011000100000";
        ram[31] = "0b10111101100111101101011011100011";
        ram[32] = "0b00111100000000010001011111001101";
        ram[33] = "0b10111101100100001000000010011100";
        ram[34] = "0b00111101011011110010101001011010";
        ram[35] = "0b00111010110100011100110011100111";
        ram[36] = "0b10111101111101000101111110011110";
        ram[37] = "0b00111110001001101111000100010011";
        ram[38] = "0b00111100010101001101111000010011";
        ram[39] = "0b00111101100000011010100001001110";
        ram[40] = "0b10111101110111010110001100000010";
        ram[41] = "0b10111100011100100010011000100011";
        ram[42] = "0b10111110000011100111110011010000";
        ram[43] = "0b10111100111001100100100010011111";
        ram[44] = "0b00111100101110111001111101111110";
        ram[45] = "0b00111101100000001111000000000101";
        ram[46] = "0b10111110000100101001011000101101";
        ram[47] = "0b00111100100111101100110010101010";
        ram[48] = "0b10111101011010011010011101100100";
        ram[49] = "0b00111101101010110111000101110110";
        ram[50] = "0b10111110001010101010100000100010";
        ram[51] = "0b10111101110100010000111111011000";
        ram[52] = "0b00111101100100111100110110110101";
        ram[53] = "0b00111100111110000011000010010011";
        ram[54] = "0b00111110010101110110010110111010";
        ram[55] = "0b10111011010111000001101000011101";
        ram[56] = "0b00111101100101111110001100111110";
        ram[57] = "0b10111110001010100010110110110110";
        ram[58] = "0b10111101010101001000011000110100";
        ram[59] = "0b00111011111001001011110000000010";
        ram[60] = "0b00111101100111010101010010010111";
        ram[61] = "0b10111101110011001000011010110100";
        ram[62] = "0b00111101011100000000000100011010";
        ram[63] = "0b00111110001010011100010011011011";
        ram[64] = "0b10111101010000111110001000001101";
        ram[65] = "0b10111101111111010101100010000110";
        ram[66] = "0b00111110001010111111101000001001";
        ram[67] = "0b10111100000100101000101101111110";
        ram[68] = "0b10111101010100000010101000110101";
        ram[69] = "0b10111101100101110101011000101000";
        ram[70] = "0b00111101111101001110000010011000";
        ram[71] = "0b00111110001010111111000100100000";
        ram[72] = "0b00111100101000001111111110001010";
        ram[73] = "0b00111100110100011011100011111011";
        ram[74] = "0b00111101011110010100111111001000";
        ram[75] = "0b10111100111001001011100110111110";
        ram[76] = "0b10111101100110100001111100100011";
        ram[77] = "0b00111100110110110010110001000001";
        ram[78] = "0b00111101100000111001101001010100";
        ram[79] = "0b10111110001101001000001111001011";
        ram[80] = "0b00111100001010111110100100100111";
        ram[81] = "0b00111110001110100110111011111100";
        ram[82] = "0b10111101110000001101010101110000";
        ram[83] = "0b00111101111000011010000011001111";
        ram[84] = "0b00111110010000011010111101111101";
        ram[85] = "0b10111110000011001100111110101111";
        ram[86] = "0b00111101101010110000001101101001";
        ram[87] = "0b00111110001111000100011010010101";
        ram[88] = "0b00111101011010101001001111110011";
        ram[89] = "0b00111101100110101011011101110001";
        ram[90] = "0b00111101101101111000001111000101";
        ram[91] = "0b00111101101001010111110101011011";
        ram[92] = "0b00111101100001001011000111010011";
        ram[93] = "0b00111101010010100011011101110111";
        ram[94] = "0b00111100001000110011000000010001";
        ram[95] = "0b10111101011110000101100010000111";
        ram[96] = "0b00111110000100110000001001110001";
        ram[97] = "0b00111101010000011110101111001000";
        ram[98] = "0b10111101100001100110101001100010";
        ram[99] = "0b10111011110100111110010011011010";
        ram[100] = "0b10111100100110101111000000010001";
        ram[101] = "0b00111101011111000001011100001000";
        ram[102] = "0b10111101011010010101101100001101";
        ram[103] = "0b00111100001000100000110011011011";
        ram[104] = "0b10111100100100010101011010011111";
        ram[105] = "0b00111110010000100111011111000100";
        ram[106] = "0b00111100011111100100101010001001";
        ram[107] = "0b10111101000110010101010110100111";
        ram[108] = "0b10111101001111000100001001010110";
        ram[109] = "0b10111101101010011110111110010101";
        ram[110] = "0b10111101100111100011000100000000";
        ram[111] = "0b10111100110011011011111110100110";
        ram[112] = "0b10111101110000000000000111010110";
        ram[113] = "0b10111101000101101110101000001100";
        ram[114] = "0b00111101010101010111010011011100";
        ram[115] = "0b10111101011001011001010110111100";
        ram[116] = "0b00111100111001010110010110110101";
        ram[117] = "0b10111101101101110011010000101111";
        ram[118] = "0b00111110010011010010001001000010";
        ram[119] = "0b00111110000000010101011111101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_1) {
meminst = new inference_conv2d_f3_3_0_1_ram("inference_conv2d_f3_3_0_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_1() {
    delete meminst;
}


};//endmodule
#endif
