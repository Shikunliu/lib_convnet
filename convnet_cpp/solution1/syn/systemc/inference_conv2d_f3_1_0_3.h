// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_3_H__
#define __inference_conv2d_f3_1_0_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_3_ram) {
        ram[0] = "0b10111010100111101000101000011001";
        ram[1] = "0b10111100010101001110010011001001";
        ram[2] = "0b00111101111100010010101010010101";
        ram[3] = "0b00111110001001100000000101111001";
        ram[4] = "0b10111101100000010010110000101000";
        ram[5] = "0b10111101011011101100110101110011";
        ram[6] = "0b00111101100010010100101111110100";
        ram[7] = "0b10111001001010001001010011101000";
        ram[8] = "0b00111100111011001111111001100110";
        ram[9] = "0b00111101000000011110100111001010";
        ram[10] = "0b00111100111110001101001101010000";
        ram[11] = "0b00111101110101101111001010100110";
        ram[12] = "0b10111101111011110011001101000100";
        ram[13] = "0b00111110000010100001100010111101";
        ram[14] = "0b00111100101010110001010110001101";
        ram[15] = "0b10111101101111111000100011111101";
        ram[16] = "0b00111101001100001011000010000111";
        ram[17] = "0b00111101110001000111110110000000";
        ram[18] = "0b00111101001001011111010000110110";
        ram[19] = "0b10111110001001010010100100110101";
        ram[20] = "0b10111101001110101100010000000110";
        ram[21] = "0b00111101100011101010110011110001";
        ram[22] = "0b00111101110011000011011011101000";
        ram[23] = "0b10111100110011000010001001001101";
        ram[24] = "0b10111100101000111100010111011000";
        ram[25] = "0b10111101101101111011010110000110";
        ram[26] = "0b00111101001100010110110101111011";
        ram[27] = "0b00111101001011100011010001000000";
        ram[28] = "0b00111100110101010110001100111111";
        ram[29] = "0b00111100100100000000110010001000";
        ram[30] = "0b10111101010010111101010111000001";
        ram[31] = "0b10111100110111111111101100010010";
        ram[32] = "0b10111110000001000110011101111011";
        ram[33] = "0b00111100000110101000111111000100";
        ram[34] = "0b10111110001010011100111100010100";
        ram[35] = "0b10111101110110000001010000001110";
        ram[36] = "0b00111101100110000011110101101100";
        ram[37] = "0b10111101101101000001111101110010";
        ram[38] = "0b00111101011010100101000101111000";
        ram[39] = "0b00111100101001110001111011110011";
        ram[40] = "0b10111101100110110101101100101101";
        ram[41] = "0b10111101011101000110010101001000";
        ram[42] = "0b00111110000001000100110110000111";
        ram[43] = "0b00111100110101110001011101110100";
        ram[44] = "0b00111110000000010011110100110010";
        ram[45] = "0b00111101111000100010101110111111";
        ram[46] = "0b00111011111101101000010000000000";
        ram[47] = "0b00111110001100001011000000101001";
        ram[48] = "0b00111101111000010010100101000101";
        ram[49] = "0b00111101010110011110000000101011";
        ram[50] = "0b10111101010011001111100000011011";
        ram[51] = "0b10111101010101001110000001000111";
        ram[52] = "0b00111101000100111110101010011001";
        ram[53] = "0b10111101100011001110100110001000";
        ram[54] = "0b00111101101001100101101111001111";
        ram[55] = "0b00111101101011110110010111001111";
        ram[56] = "0b00111101101001010101011101001010";
        ram[57] = "0b10111101101110100000100001010100";
        ram[58] = "0b00111101010100110011100011011101";
        ram[59] = "0b00111110000010010101100101100000";
        ram[60] = "0b00111110000100010101010100001101";
        ram[61] = "0b10111100101010011110111011100111";
        ram[62] = "0b00111100011011100111100101011010";
        ram[63] = "0b00111110000011111001110010100110";
        ram[64] = "0b10111110001110011011110011111101";
        ram[65] = "0b10111110001000110001101001001100";
        ram[66] = "0b00111101110000000100101110001101";
        ram[67] = "0b10111101101001100101010101101010";
        ram[68] = "0b10111110000011111110100010101011";
        ram[69] = "0b10111101000011001111100000011011";
        ram[70] = "0b00111110000001111010000011111001";
        ram[71] = "0b00111101000010000111101011111001";
        ram[72] = "0b10111110000010101001101110001101";
        ram[73] = "0b00111011010101100011110000001100";
        ram[74] = "0b00111101101110101110010000011100";
        ram[75] = "0b00111101011110010101110001011101";
        ram[76] = "0b00111110001111101110101011101010";
        ram[77] = "0b00111101011011011101000010111110";
        ram[78] = "0b10111101011000001110110011111010";
        ram[79] = "0b10111101011000010101001110111101";
        ram[80] = "0b00111110010110000101011001100000";
        ram[81] = "0b00111101111001101100001010101101";
        ram[82] = "0b00111101011000101010000011011111";
        ram[83] = "0b10111110000101001111010100001010";
        ram[84] = "0b00111101100010101100101101011101";
        ram[85] = "0b00111101100100101010010101000110";
        ram[86] = "0b00111110001001011010111000011101";
        ram[87] = "0b10111010100011101111000001110011";
        ram[88] = "0b10111110001011011100110011101010";
        ram[89] = "0b10111100000100010110111101101001";
        ram[90] = "0b00111011110011110110011110000111";
        ram[91] = "0b00111110001100101000010011100000";
        ram[92] = "0b10111101111111111011000011010101";
        ram[93] = "0b10111101001000001011101111001101";
        ram[94] = "0b00111101100010011000010111111110";
        ram[95] = "0b10111101000100001011100101110001";
        ram[96] = "0b00111100100000010100000101001001";
        ram[97] = "0b00111101010111011111010001110010";
        ram[98] = "0b10111101010111011110100110100101";
        ram[99] = "0b00111101111011001111011101000100";
        ram[100] = "0b00111101010111111111010010101101";
        ram[101] = "0b00111100111100110101001010101000";
        ram[102] = "0b10111101100110010111000010100111";
        ram[103] = "0b00111100010001110011111011101110";
        ram[104] = "0b10111110000101000100010111101101";
        ram[105] = "0b00111100011000100011000000001011";
        ram[106] = "0b00111100100011100101101010100001";
        ram[107] = "0b10111101101101101111001001001000";
        ram[108] = "0b00111100101010100000110111110001";
        ram[109] = "0b00111101101011101000101000111100";
        ram[110] = "0b10111110000110110001110000000000";
        ram[111] = "0b10111101010001111010001111101001";
        ram[112] = "0b10111101010001000111110101110011";
        ram[113] = "0b10111101111010000010110011110101";
        ram[114] = "0b00111101010101011001000000100000";
        ram[115] = "0b00111011000111100011011101100011";
        ram[116] = "0b00111101010001100111010111010000";
        ram[117] = "0b00111101111000100011000110000011";
        ram[118] = "0b00111101111001001101111111001110";
        ram[119] = "0b10111101110001000110011111001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_3) {
meminst = new inference_conv2d_f3_1_0_3_ram("inference_conv2d_f3_1_0_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_3() {
    delete meminst;
}


};//endmodule
#endif
