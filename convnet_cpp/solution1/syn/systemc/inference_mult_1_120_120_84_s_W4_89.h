// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_89_H__
#define __inference_mult_1_120_120_84_s_W4_89_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_89_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_89_ram) {
        ram[0] = "0b10111101110011101010111000011001";
        ram[1] = "0b10111101011100101111001111000011";
        ram[2] = "0b00111110000000011101001100100100";
        ram[3] = "0b00111101111100100111100110011010";
        ram[4] = "0b10111001101101110001111101101111";
        ram[5] = "0b00111011100110100110100001110111";
        ram[6] = "0b00111101010100010010011001111110";
        ram[7] = "0b10111110000001101111010111001011";
        ram[8] = "0b00111110000110111110000111101011";
        ram[9] = "0b10111101100100100101000011011101";
        ram[10] = "0b10111101101000100000001010001001";
        ram[11] = "0b10111110001011110000010001010111";
        ram[12] = "0b10111110001111110001011000101011";
        ram[13] = "0b10111101110101000011111100011100";
        ram[14] = "0b00111101010110011010010111000011";
        ram[15] = "0b10111100000110110111101011000101";
        ram[16] = "0b10111101100010110011111100101110";
        ram[17] = "0b10111011011000111000101011010100";
        ram[18] = "0b00111101000001010110010111010000";
        ram[19] = "0b10111100101010111011001100001100";
        ram[20] = "0b00111110000011000011011000010001";
        ram[21] = "0b10111101100100111111111100110011";
        ram[22] = "0b10111110000010101011101000111000";
        ram[23] = "0b10111101101100101110001111010011";
        ram[24] = "0b10111101010001101100010101001100";
        ram[25] = "0b00111101101000001100100010011000";
        ram[26] = "0b10111101001010011000111111100111";
        ram[27] = "0b10111101110101001100011101101101";
        ram[28] = "0b00111100010111110111100000110110";
        ram[29] = "0b00111101100011100011001111001000";
        ram[30] = "0b00111110000001010101101000111010";
        ram[31] = "0b10111101000101000110110111100001";
        ram[32] = "0b10111101000110010110001001010111";
        ram[33] = "0b00111101111111000001000101011110";
        ram[34] = "0b00111011111010011000000001001100";
        ram[35] = "0b10111101001111100010000110100100";
        ram[36] = "0b10111101111111011101011011100000";
        ram[37] = "0b10111101001110101010000100000001";
        ram[38] = "0b10111101100011000001111111001001";
        ram[39] = "0b10111100101110100101010110011100";
        ram[40] = "0b00111110011100001010000011110101";
        ram[41] = "0b00111100011101001000010000110110";
        ram[42] = "0b00111001111111100011101111001001";
        ram[43] = "0b00111011010110100101111100110010";
        ram[44] = "0b10111011110001011111110111010001";
        ram[45] = "0b10111011111001101011111000111011";
        ram[46] = "0b10111011101001110010001000000011";
        ram[47] = "0b00111101100010011010110001011111";
        ram[48] = "0b10111101100001000100010001001101";
        ram[49] = "0b10111100110011100000110100001001";
        ram[50] = "0b00111101001110110011101101011010";
        ram[51] = "0b00111101101010011100110111111010";
        ram[52] = "0b10111110001011111110000000000101";
        ram[53] = "0b10111110001010110000110100001111";
        ram[54] = "0b00111100110001001100011100001111";
        ram[55] = "0b10111100000111001100011011110110";
        ram[56] = "0b10111101010110001110100001100100";
        ram[57] = "0b00111101111101000110101010100001";
        ram[58] = "0b00111100101000011011110110001010";
        ram[59] = "0b00111110001100110011100001110001";
        ram[60] = "0b00111101010001010000000010100000";
        ram[61] = "0b10111100011111010010010000011000";
        ram[62] = "0b10111101101111011011001001110000";
        ram[63] = "0b10111101100011000110111100101010";
        ram[64] = "0b10111110000100010101100000110010";
        ram[65] = "0b10111110000000000110100101100010";
        ram[66] = "0b10111110001001010110101010111110";
        ram[67] = "0b00111011110001010101001000011010";
        ram[68] = "0b10111101101011100100111011111110";
        ram[69] = "0b10111101011101010000011001110010";
        ram[70] = "0b10111100101111101101100011101110";
        ram[71] = "0b00111110001010011001100000000111";
        ram[72] = "0b10111101010001111110010000010101";
        ram[73] = "0b10111110000010101000011001010001";
        ram[74] = "0b10111101010111100001111001111110";
        ram[75] = "0b10111100001101110001001001010000";
        ram[76] = "0b10111100001100000000100101001000";
        ram[77] = "0b00111101001111101010001000110010";
        ram[78] = "0b10111110011001011100101000101010";
        ram[79] = "0b00111101010000101111100101000100";
        ram[80] = "0b10111100111010001000101101101111";
        ram[81] = "0b00111100000010101001110000110000";
        ram[82] = "0b00111110000001010111000110001111";
        ram[83] = "0b10111101001100001001011100001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_89) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_89_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_89) {
meminst = new inference_mult_1_120_120_84_s_W4_89_ram("inference_mult_1_120_120_84_s_W4_89_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_89() {
    delete meminst;
}


};//endmodule
#endif
