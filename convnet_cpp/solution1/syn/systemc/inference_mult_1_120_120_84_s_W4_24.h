// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_24_H__
#define __inference_mult_1_120_120_84_s_W4_24_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_24_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_24_ram) {
        ram[0] = "0b10111101110111101000101111000001";
        ram[1] = "0b00111101011010011110111011001100";
        ram[2] = "0b00111110000011010100110110000011";
        ram[3] = "0b10111101010011011100010101010000";
        ram[4] = "0b00111010101000101010011100001001";
        ram[5] = "0b00111101110010000111000001010100";
        ram[6] = "0b10111110001010001110101001111101";
        ram[7] = "0b10111101110111010111110100111001";
        ram[8] = "0b10111101101111111011001101011001";
        ram[9] = "0b00111101011001011100011100111010";
        ram[10] = "0b10111101100010110111100011011010";
        ram[11] = "0b00111110001011111110100000100101";
        ram[12] = "0b10111101101100011011111010010111";
        ram[13] = "0b10111101001010100001011000111001";
        ram[14] = "0b00111101111000011001011001010011";
        ram[15] = "0b00111101100101101100101110110001";
        ram[16] = "0b10111110000100111111111100100110";
        ram[17] = "0b10111101111110011001001011001001";
        ram[18] = "0b00111110000110101110101111000100";
        ram[19] = "0b10111110001110001111110001010000";
        ram[20] = "0b00111100111010011100000100101111";
        ram[21] = "0b00111101101101010000100001110000";
        ram[22] = "0b00111101110110011100110001110101";
        ram[23] = "0b00111101110001111101101010011000";
        ram[24] = "0b10111010001011100111111010001100";
        ram[25] = "0b00111101000011101110111010010101";
        ram[26] = "0b10111110010000011011010001111000";
        ram[27] = "0b10111110000101110101111001100011";
        ram[28] = "0b00111101101111011101101111001110";
        ram[29] = "0b10111101101111010010111100000000";
        ram[30] = "0b00111011010101000000010011001111";
        ram[31] = "0b10111100101000010001010001001101";
        ram[32] = "0b00111100011011100001101101100111";
        ram[33] = "0b10111101011111000110100100000111";
        ram[34] = "0b00111100101111111101001000010011";
        ram[35] = "0b00111101001100010100001001001000";
        ram[36] = "0b00111101101001000000100111001011";
        ram[37] = "0b10111101101111110010010100101010";
        ram[38] = "0b00111110000010000101000001011001";
        ram[39] = "0b10111101111111010001101110110101";
        ram[40] = "0b10111101010010100110110011110001";
        ram[41] = "0b00111100101111100110001000111011";
        ram[42] = "0b10111101001011011001101100101001";
        ram[43] = "0b00111101111100010010111011000111";
        ram[44] = "0b00111011101100110110111001010111";
        ram[45] = "0b00111110000000011111110010001111";
        ram[46] = "0b10111101100011110111000000100011";
        ram[47] = "0b00111110000011110101010010001111";
        ram[48] = "0b10111110000101101111010101000101";
        ram[49] = "0b00111101001001110101100111111100";
        ram[50] = "0b10111101111010001010000111100000";
        ram[51] = "0b00111110000000010101111111001100";
        ram[52] = "0b00111101101000011000000100110010";
        ram[53] = "0b10111100101001101001011100001110";
        ram[54] = "0b10111101100011001011101000010101";
        ram[55] = "0b10111101001000001000000010101001";
        ram[56] = "0b00111101000001100100110010110110";
        ram[57] = "0b00111011001001100100000011000111";
        ram[58] = "0b00111101000001100010110011010101";
        ram[59] = "0b00111100101110100110111100110010";
        ram[60] = "0b10111101100110001011110001011010";
        ram[61] = "0b00111101101011010101111111000010";
        ram[62] = "0b00111101101001011000101000001011";
        ram[63] = "0b10111101101101100001101001111100";
        ram[64] = "0b10111110010011001101100101100010";
        ram[65] = "0b00111101110111110110110000100111";
        ram[66] = "0b10111110010101001101001101111100";
        ram[67] = "0b10111100011100111001111011001001";
        ram[68] = "0b00111011101111111100001101001111";
        ram[69] = "0b00111110000110110110011101111111";
        ram[70] = "0b00111101101110110010111011000101";
        ram[71] = "0b10111101110010111010101010001110";
        ram[72] = "0b00111101111011101110001100001101";
        ram[73] = "0b00111101011010001000111110100001";
        ram[74] = "0b10111101011001011011100010100111";
        ram[75] = "0b10111100100000101101011110000001";
        ram[76] = "0b10111101000111111001110000010010";
        ram[77] = "0b00111011100110110000110000001010";
        ram[78] = "0b00111100000010011100110011010011";
        ram[79] = "0b00111100111101110001010111100001";
        ram[80] = "0b10111101100000000100011101001110";
        ram[81] = "0b10111101100011110111100000110110";
        ram[82] = "0b00111110001000101100010111100011";
        ram[83] = "0b10111101010000000000110000101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_24) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_24_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_24) {
meminst = new inference_mult_1_120_120_84_s_W4_24_ram("inference_mult_1_120_120_84_s_W4_24_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_24() {
    delete meminst;
}


};//endmodule
#endif
