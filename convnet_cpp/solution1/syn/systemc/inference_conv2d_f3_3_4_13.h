// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_13_H__
#define __inference_conv2d_f3_3_4_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_13_ram) {
        ram[0] = "0b10111101110001011000001000111011";
        ram[1] = "0b10111101101011000010100011011011";
        ram[2] = "0b00111100110001000101110110010011";
        ram[3] = "0b10111110001111001100011101001100";
        ram[4] = "0b10111101001111000011100101010001";
        ram[5] = "0b00111110000011011000011011101100";
        ram[6] = "0b10111101011010111101111110011101";
        ram[7] = "0b00111101100111101001111000110110";
        ram[8] = "0b10111011100010010010000110111101";
        ram[9] = "0b00111100111011000010101010010110";
        ram[10] = "0b00111101100000000001110101000001";
        ram[11] = "0b10111101011101000000010001001001";
        ram[12] = "0b10111100110000101001010001100101";
        ram[13] = "0b10111101010111111110101000010110";
        ram[14] = "0b00111101001000011111010100111000";
        ram[15] = "0b00111101100100110000110110011100";
        ram[16] = "0b00111101101101011101100100001101";
        ram[17] = "0b10111101011000100010011110001101";
        ram[18] = "0b00111101110110100101111000110101";
        ram[19] = "0b00111101111101000100110111001011";
        ram[20] = "0b00111100111001011010011010111000";
        ram[21] = "0b10111101111101100101111001000110";
        ram[22] = "0b00111100110001111100001010100010";
        ram[23] = "0b00111101101001110010100011001110";
        ram[24] = "0b10111101100010100101111111111110";
        ram[25] = "0b10111101110100100000010110111100";
        ram[26] = "0b10111101100001000101100101100001";
        ram[27] = "0b00111100100000111010011111000000";
        ram[28] = "0b00111101011000100001010001111000";
        ram[29] = "0b10111100100111101011000000100100";
        ram[30] = "0b00111011000110100100001100111000";
        ram[31] = "0b10111100101101100111110111010110";
        ram[32] = "0b10111101111110110110010001011010";
        ram[33] = "0b10111100101101110101111011011100";
        ram[34] = "0b10111100100000101101111110101110";
        ram[35] = "0b10111101001011100111111000010010";
        ram[36] = "0b00111101101000001101010101001000";
        ram[37] = "0b00111101111011101101000100111001";
        ram[38] = "0b10111101101100010110010101001101";
        ram[39] = "0b00111100100001001110111010110010";
        ram[40] = "0b10111110000001001110101010001110";
        ram[41] = "0b10111110001111110011011101110110";
        ram[42] = "0b10111101100011100000100110000110";
        ram[43] = "0b10111101110010000111100101100110";
        ram[44] = "0b10111101111001001111011001011010";
        ram[45] = "0b10111101000011111000001101111011";
        ram[46] = "0b10111110000111000001110111110011";
        ram[47] = "0b10111110001100110111110100100000";
        ram[48] = "0b10111100001101110000010001111001";
        ram[49] = "0b10111100110010111101001110101001";
        ram[50] = "0b10111101001100100110110101110000";
        ram[51] = "0b00111101100111001100100111111000";
        ram[52] = "0b00111110000100111010000100001010";
        ram[53] = "0b00111100101101010011101011100000";
        ram[54] = "0b10111101000001111111111001100111";
        ram[55] = "0b00111110000011101100010001100001";
        ram[56] = "0b00111101100000110010001110010100";
        ram[57] = "0b00111100101101001010111000101000";
        ram[58] = "0b00111101001000101000110101000011";
        ram[59] = "0b00111101001000010111011101111111";
        ram[60] = "0b10111101011001100111110000110110";
        ram[61] = "0b00111101111111010100011010110010";
        ram[62] = "0b10111101110010011101111011001110";
        ram[63] = "0b00111100111111110101101001010011";
        ram[64] = "0b10111101000111011011101001000000";
        ram[65] = "0b10111101001111001001100101111001";
        ram[66] = "0b10111101111110110111011100111010";
        ram[67] = "0b10111101111100001001101111111010";
        ram[68] = "0b10111100111000101000011000111101";
        ram[69] = "0b10111101011100100001101010011010";
        ram[70] = "0b10111101010010010000110011010100";
        ram[71] = "0b10111100100111001001101110101101";
        ram[72] = "0b00111101010011010101011101010001";
        ram[73] = "0b10111110001010100001001101111111";
        ram[74] = "0b10111110001001001100011001100001";
        ram[75] = "0b10111100010111101111001001101001";
        ram[76] = "0b10111101010010110010111010011101";
        ram[77] = "0b10111100101000111110001011001001";
        ram[78] = "0b00111101100000110010000010110001";
        ram[79] = "0b10111100110101111101101100011110";
        ram[80] = "0b00111101010110010011101000010011";
        ram[81] = "0b00111100101011101111010001110101";
        ram[82] = "0b10111110001110011001001010000110";
        ram[83] = "0b10111101111111110011011100110011";
        ram[84] = "0b00111101001101111111111011111010";
        ram[85] = "0b10111101100111100000101110010001";
        ram[86] = "0b10111100010011100110011010010101";
        ram[87] = "0b00111100110010011100010011011011";
        ram[88] = "0b10111101011011000101110001100101";
        ram[89] = "0b00111010111110110100110011101000";
        ram[90] = "0b10111101100010010111000101111110";
        ram[91] = "0b10111110000100001110010000010001";
        ram[92] = "0b10111101100000101001001000001001";
        ram[93] = "0b10111100110011000111000010111100";
        ram[94] = "0b10111101111001010001001000100011";
        ram[95] = "0b00111011110000110010010101011001";
        ram[96] = "0b10111101000110001001000000110101";
        ram[97] = "0b00111010110101101111001010010110";
        ram[98] = "0b00111110000000010011010011001110";
        ram[99] = "0b00111100011010101110000010110100";
        ram[100] = "0b00111100111110001010010011000010";
        ram[101] = "0b10111101010100000001001101110011";
        ram[102] = "0b00111101000011111100011110001001";
        ram[103] = "0b00111110000000011111000011000011";
        ram[104] = "0b10111101110100100101010101101101";
        ram[105] = "0b10111101100000110000111101010111";
        ram[106] = "0b10111101110001110010011110100111";
        ram[107] = "0b00111011111111100111100011010111";
        ram[108] = "0b10111110000011010001000110111110";
        ram[109] = "0b10111100111111110110001010110111";
        ram[110] = "0b10111110000000101101010000001011";
        ram[111] = "0b10111101110111110101011100101110";
        ram[112] = "0b00111100010110000100010011010000";
        ram[113] = "0b00111100100110000110010011100110";
        ram[114] = "0b00111101000100000100111111011001";
        ram[115] = "0b10111110001001101101100011110101";
        ram[116] = "0b10111101110001001001010110000100";
        ram[117] = "0b00111101100101101111001010110011";
        ram[118] = "0b10111011000110111010001001011101";
        ram[119] = "0b00111101001010101101000001011000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_13) {
meminst = new inference_conv2d_f3_3_4_13_ram("inference_conv2d_f3_3_4_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_13() {
    delete meminst;
}


};//endmodule
#endif
