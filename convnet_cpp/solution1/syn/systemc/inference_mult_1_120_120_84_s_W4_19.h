// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_19_H__
#define __inference_mult_1_120_120_84_s_W4_19_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_19_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_19_ram) {
        ram[0] = "0b00111101011111100011100110100111";
        ram[1] = "0b00111101010001011001001101010010";
        ram[2] = "0b10111100100001110110110100010001";
        ram[3] = "0b10111100001101101010011101011100";
        ram[4] = "0b10111110001011000001001000100111";
        ram[5] = "0b00111101111000011110011110010110";
        ram[6] = "0b00111101111010001010111011111011";
        ram[7] = "0b00111101110110010000111000100100";
        ram[8] = "0b00111110000110001110011110011011";
        ram[9] = "0b00111110011100001101110101000000";
        ram[10] = "0b00111101010100100110010001010001";
        ram[11] = "0b10111100111001100010101001101100";
        ram[12] = "0b10111011101000110000001110010000";
        ram[13] = "0b10111100110111000101010100110110";
        ram[14] = "0b00111110000111100100100000011111";
        ram[15] = "0b10111101011011011001010000111101";
        ram[16] = "0b00111100111111100101111011100000";
        ram[17] = "0b10111110010100111000110001010100";
        ram[18] = "0b10111110001110101001111001101111";
        ram[19] = "0b00111101111011000010100100111001";
        ram[20] = "0b10111011100101100110111011101101";
        ram[21] = "0b10111100000101000001111000001111";
        ram[22] = "0b00111101110000111100011111001001";
        ram[23] = "0b00111100001101010000100101100010";
        ram[24] = "0b10111110001101000000111011100000";
        ram[25] = "0b00111101101110111111111011101001";
        ram[26] = "0b00111101011000111101100110001110";
        ram[27] = "0b10111110000100110001110001100101";
        ram[28] = "0b00111101111111011010000101100110";
        ram[29] = "0b10111101000100001001100011010100";
        ram[30] = "0b10111101110111010011001011000110";
        ram[31] = "0b00111101110100111000110001010100";
        ram[32] = "0b00111100101110000110011010101111";
        ram[33] = "0b00111110001011110100010001001110";
        ram[34] = "0b10111110001001111110110011111111";
        ram[35] = "0b10111100111001001010000101101010";
        ram[36] = "0b10111101101100111001000111001000";
        ram[37] = "0b00111101100101100010010101100011";
        ram[38] = "0b00111100101101110010111011010110";
        ram[39] = "0b10111110000010101111111101101101";
        ram[40] = "0b00111101111001100001100101010100";
        ram[41] = "0b00111011101001000101000011101101";
        ram[42] = "0b00111100100110000100001100100011";
        ram[43] = "0b00111110000001000001101111111100";
        ram[44] = "0b10111101011100010011100101011110";
        ram[45] = "0b00111100111100111101001100000001";
        ram[46] = "0b00111101001111101011001011111001";
        ram[47] = "0b00111100101110111001000100000101";
        ram[48] = "0b00111100101011100011100011111000";
        ram[49] = "0b10111110000000111100100011100010";
        ram[50] = "0b00111101001100001011101010110011";
        ram[51] = "0b00111110000001010101001110101100";
        ram[52] = "0b00111110000110010111100011010101";
        ram[53] = "0b00111101111000110000110010101010";
        ram[54] = "0b10111101111100001000010111110101";
        ram[55] = "0b00111100101101100101010010000110";
        ram[56] = "0b00111110001010001011000001001011";
        ram[57] = "0b00111101110101110000011000001100";
        ram[58] = "0b00111101100000100000001110111110";
        ram[59] = "0b10111101101111001111111110011010";
        ram[60] = "0b10111101100101000101000011110000";
        ram[61] = "0b10111101101010011100001111101001";
        ram[62] = "0b00111101110101100111011001100100";
        ram[63] = "0b10111100111100100010000101010000";
        ram[64] = "0b00111101101101111001110011100010";
        ram[65] = "0b00111110000000001010000110111110";
        ram[66] = "0b00111101010011001000101101111001";
        ram[67] = "0b00111110000000001101001000111101";
        ram[68] = "0b10111101110110101101101110000011";
        ram[69] = "0b10111100101110001111010001110011";
        ram[70] = "0b00111100111001101101010010110110";
        ram[71] = "0b10111110001110100000001011111011";
        ram[72] = "0b10111101111110101001010000110110";
        ram[73] = "0b10111110000101000100000100110101";
        ram[74] = "0b00111110001101011010111011100110";
        ram[75] = "0b00111100110110000100011001001000";
        ram[76] = "0b00111101111000000001000111010011";
        ram[77] = "0b00111101010101000001010101111100";
        ram[78] = "0b10111110000011000101110001010111";
        ram[79] = "0b00111101110101011100011000111011";
        ram[80] = "0b10111011011001001100101001000101";
        ram[81] = "0b10111101110111111101101111010011";
        ram[82] = "0b00111100110100010011111111000011";
        ram[83] = "0b10111101111111011010110111111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_19) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_19_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_19) {
meminst = new inference_mult_1_120_120_84_s_W4_19_ram("inference_mult_1_120_120_84_s_W4_19_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_19() {
    delete meminst;
}


};//endmodule
#endif
