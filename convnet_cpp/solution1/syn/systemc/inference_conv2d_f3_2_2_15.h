// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_15_H__
#define __inference_conv2d_f3_2_2_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_15_ram) {
        ram[0] = "0b00111011000101111000010111000011";
        ram[1] = "0b10111101100111010111010100100110";
        ram[2] = "0b10111101001101010110001101011001";
        ram[3] = "0b00111101001010101011000101101010";
        ram[4] = "0b10111101010110001101001000001110";
        ram[5] = "0b10111100110011010100100111001010";
        ram[6] = "0b10111101110000100101000000000111";
        ram[7] = "0b10111100111010011101110101111111";
        ram[8] = "0b00111101000110101010111011110011";
        ram[9] = "0b00111101000100011001100011111111";
        ram[10] = "0b00111100010001001111111010100010";
        ram[11] = "0b10111101011010000101110101001100";
        ram[12] = "0b10111100111010110010110101110110";
        ram[13] = "0b10111110000000101101010111100000";
        ram[14] = "0b00111100101101101110001001001010";
        ram[15] = "0b10111101100011100001100101001110";
        ram[16] = "0b00111101111011100001110101100101";
        ram[17] = "0b10111110000010111110011011100110";
        ram[18] = "0b00111100100000001010110000101101";
        ram[19] = "0b00111101110001100101000011011010";
        ram[20] = "0b10111101011110100011010001000100";
        ram[21] = "0b10111100110110010110110110001111";
        ram[22] = "0b10111100011110001100000101000111";
        ram[23] = "0b00111101100000111101010000011011";
        ram[24] = "0b00111110011011000101000111011011";
        ram[25] = "0b00111110000010011111110011110100";
        ram[26] = "0b10111101101110111100011111101010";
        ram[27] = "0b00111101100011111001000111100110";
        ram[28] = "0b10111101100011101101011100110011";
        ram[29] = "0b00111101000010001001011011000010";
        ram[30] = "0b10111100001000010111111111101101";
        ram[31] = "0b10111100100100011010110011010001";
        ram[32] = "0b10111101000111111101111011011101";
        ram[33] = "0b00111101000101001000001110110000";
        ram[34] = "0b00111101011111000100111111011101";
        ram[35] = "0b10111110000001011111010101101010";
        ram[36] = "0b10111101100111000001110110100011";
        ram[37] = "0b00111101001000111110011110011100";
        ram[38] = "0b00111100011101010001010011101010";
        ram[39] = "0b10111101100000010010000011010101";
        ram[40] = "0b10111101001000100100011111110100";
        ram[41] = "0b00111011101101110101110100111001";
        ram[42] = "0b00111101101000111110001010000110";
        ram[43] = "0b00111101101100100100101001101011";
        ram[44] = "0b00111101100010101111010001011101";
        ram[45] = "0b10111110000010011011101101101011";
        ram[46] = "0b00111101000000101000101110010110";
        ram[47] = "0b10111101101010001000101111001101";
        ram[48] = "0b00111101111000101001110110000100";
        ram[49] = "0b10111101100110110110101011110101";
        ram[50] = "0b00111110010101011100100000010001";
        ram[51] = "0b10111101110100101111010011001111";
        ram[52] = "0b10111100000000011110101101010010";
        ram[53] = "0b10111101001000111010100011001100";
        ram[54] = "0b10111011110110001010111110101111";
        ram[55] = "0b00111101101100100011011010100111";
        ram[56] = "0b10111110000110110010110010000100";
        ram[57] = "0b00111110000100100100001101010111";
        ram[58] = "0b10111100111111101000001111001001";
        ram[59] = "0b00111011111000101101111001110010";
        ram[60] = "0b00111101001100010011010101111101";
        ram[61] = "0b00111100010000111001000110111011";
        ram[62] = "0b10111101100101000011001100011011";
        ram[63] = "0b10111110010011111111010101000001";
        ram[64] = "0b00111101001000001101001000001000";
        ram[65] = "0b00111101111010100010001100111010";
        ram[66] = "0b10111101101000110001011101011100";
        ram[67] = "0b10111101101010110000000111001001";
        ram[68] = "0b00111101101001001110101111111000";
        ram[69] = "0b10111101100111000011101101001111";
        ram[70] = "0b10111100110000100101010100001111";
        ram[71] = "0b00111101100011001001110111100000";
        ram[72] = "0b00111101010111000111111000011011";
        ram[73] = "0b00111100010100111110011101110011";
        ram[74] = "0b00111110001010111110010100010001";
        ram[75] = "0b10111100101101010010110001100111";
        ram[76] = "0b00111110000010101000010111001011";
        ram[77] = "0b00111101011000011011110010110011";
        ram[78] = "0b10111100101011100101111110001111";
        ram[79] = "0b10111100100100100001101101010110";
        ram[80] = "0b10111101000110110001111111000110";
        ram[81] = "0b10111101010101011100110110101101";
        ram[82] = "0b00111101000110101011000101110111";
        ram[83] = "0b10111011101010101010010001011001";
        ram[84] = "0b10111100111001010111101111110000";
        ram[85] = "0b00111101000011100101111000110010";
        ram[86] = "0b00111100110010010100001110101011";
        ram[87] = "0b00111110000101000000101001101100";
        ram[88] = "0b00111110000110111100100101000111";
        ram[89] = "0b00111101101101010101000000000001";
        ram[90] = "0b10111101100100110001001101101110";
        ram[91] = "0b10111101111111000101100010101100";
        ram[92] = "0b00111110001111110111011011100110";
        ram[93] = "0b00111100011010000000101001000000";
        ram[94] = "0b10111101110110100001101010010011";
        ram[95] = "0b00111101101001010011000110110011";
        ram[96] = "0b10111011111101001010101000001100";
        ram[97] = "0b00111101001000111101001101111010";
        ram[98] = "0b10111101000001111010001000100000";
        ram[99] = "0b10111101110010100110110111010101";
        ram[100] = "0b00111110000110110010111001011010";
        ram[101] = "0b10111100001001100100001011110101";
        ram[102] = "0b00111101111011011100011101101001";
        ram[103] = "0b10111100001110000010111100011011";
        ram[104] = "0b10111101011001110010111100011001";
        ram[105] = "0b10111110010001001001100101001010";
        ram[106] = "0b10111101101011010000110010000000";
        ram[107] = "0b10111011111110011101010111011010";
        ram[108] = "0b00111101100011100000011000000010";
        ram[109] = "0b10111100110100101111101001000011";
        ram[110] = "0b10111101111010010111011101000010";
        ram[111] = "0b10111101100000011101111100011000";
        ram[112] = "0b10111101011100101010111110000000";
        ram[113] = "0b10111101001000001001010100110110";
        ram[114] = "0b00111100010111110100010010011111";
        ram[115] = "0b00111101101110100110001011010010";
        ram[116] = "0b10111100011011011101111111010111";
        ram[117] = "0b00111110001001111110010101100100";
        ram[118] = "0b00111100100110100001100100011011";
        ram[119] = "0b00111101110101001101010110010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_15) {
meminst = new inference_conv2d_f3_2_2_15_ram("inference_conv2d_f3_2_2_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_15() {
    delete meminst;
}


};//endmodule
#endif
