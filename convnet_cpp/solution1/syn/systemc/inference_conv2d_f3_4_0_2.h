// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_2_H__
#define __inference_conv2d_f3_4_0_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_2_ram) {
        ram[0] = "0b10111101000101100001000010010011";
        ram[1] = "0b00111100110010011001001111111101";
        ram[2] = "0b00111011010101000100011111000000";
        ram[3] = "0b10111100101100100001010101011100";
        ram[4] = "0b10111101101010011010101001000110";
        ram[5] = "0b00111101100010000010110011101000";
        ram[6] = "0b10111100101110111011101011000001";
        ram[7] = "0b10111100100011110110111001101000";
        ram[8] = "0b10111101101010010000010010001011";
        ram[9] = "0b00111101100100010110111101101100";
        ram[10] = "0b10111100011100111101011111010100";
        ram[11] = "0b00111101111000011110111111111010";
        ram[12] = "0b00111110001000001001001001000111";
        ram[13] = "0b00111011101011001111101110100001";
        ram[14] = "0b00111100101111111111001110100000";
        ram[15] = "0b10111101011111111001011000011000";
        ram[16] = "0b00111011100101001011100000001000";
        ram[17] = "0b00111101010000001011101111001101";
        ram[18] = "0b10111101100101101110111111011110";
        ram[19] = "0b10111010100000110011110101100010";
        ram[20] = "0b00111110000000110001000110100101";
        ram[21] = "0b00111110000001010011100100110010";
        ram[22] = "0b10111101111001001011110010101110";
        ram[23] = "0b00111011100110100100111011100001";
        ram[24] = "0b10111011101001111011001011110111";
        ram[25] = "0b00111101001111110110111000100101";
        ram[26] = "0b00111101101111001111010011110110";
        ram[27] = "0b00111110000101100100111111011011";
        ram[28] = "0b00111100100100111100101111111010";
        ram[29] = "0b10111110001000101110111100001011";
        ram[30] = "0b00111101100110001010100110100010";
        ram[31] = "0b10111110001100001110001001111110";
        ram[32] = "0b10111101001110100101101101111011";
        ram[33] = "0b10111100100001100011101100011000";
        ram[34] = "0b10111110000101101000010001001001";
        ram[35] = "0b00111101110011111110000011001110";
        ram[36] = "0b10111110001101111011101000100011";
        ram[37] = "0b10111101111110101100111101110100";
        ram[38] = "0b10111101110011011100000100011110";
        ram[39] = "0b00111100100100100010010001011010";
        ram[40] = "0b00111110001111101010011100000101";
        ram[41] = "0b10111101100011101110011000001010";
        ram[42] = "0b00111110000100001010101010101000";
        ram[43] = "0b00111101101011110000110100100110";
        ram[44] = "0b10111101101010101101110100111110";
        ram[45] = "0b00111011011100100010011100100100";
        ram[46] = "0b00111010101101111010010111001001";
        ram[47] = "0b00111101001100001101100000001111";
        ram[48] = "0b00111101000101000101000100001011";
        ram[49] = "0b10111110000101101110110001011011";
        ram[50] = "0b10111101101101100111101100001111";
        ram[51] = "0b00111100110100100100010011011100";
        ram[52] = "0b00111101100011000001010001011011";
        ram[53] = "0b10111100000100000110100111011011";
        ram[54] = "0b00111100011001100101000000101100";
        ram[55] = "0b10111101010101000001001111001110";
        ram[56] = "0b00111101101101000100100001010111";
        ram[57] = "0b00111101000000010001000010100001";
        ram[58] = "0b10111100111111100100000010101101";
        ram[59] = "0b10111100110000100101100110101100";
        ram[60] = "0b10111100111001001010100111001110";
        ram[61] = "0b00111100101000110001011010111011";
        ram[62] = "0b00111101000101100001001000001011";
        ram[63] = "0b10111110000001111111110100111111";
        ram[64] = "0b00111100111011101110100111000011";
        ram[65] = "0b00111101000100111001001110010000";
        ram[66] = "0b10111101101000111111000000110101";
        ram[67] = "0b00111110000010100000110110111011";
        ram[68] = "0b00111100000110010101010111000111";
        ram[69] = "0b00111101110010101100001010001111";
        ram[70] = "0b00111100001100010100101101100111";
        ram[71] = "0b10111101011011100110111101100100";
        ram[72] = "0b00111011110001101000000101011001";
        ram[73] = "0b00111101100001111100011101011010";
        ram[74] = "0b00111101101001001101101111100000";
        ram[75] = "0b00111100110101000101010110001101";
        ram[76] = "0b00111110001001101110011001010100";
        ram[77] = "0b00111101010000011010000110100110";
        ram[78] = "0b00111011100100111100100000110100";
        ram[79] = "0b00111101101000110010000010110001";
        ram[80] = "0b00111110000000001101101000011011";
        ram[81] = "0b10111110001111010000010110101111";
        ram[82] = "0b00111101010101101110101011001000";
        ram[83] = "0b10111101100000000111110100100110";
        ram[84] = "0b00111011001010111010100000111010";
        ram[85] = "0b10111100101010100110001010101010";
        ram[86] = "0b10111100010001110101110010110110";
        ram[87] = "0b00111101110000100001110101111100";
        ram[88] = "0b10111101111010111100101011011010";
        ram[89] = "0b10111101001011101101101000111110";
        ram[90] = "0b10111101111001011001001010010110";
        ram[91] = "0b10111110000011110100111000000001";
        ram[92] = "0b10111101111011001110001011010010";
        ram[93] = "0b10111110010000100101000001110010";
        ram[94] = "0b10111101011000111110000011001011";
        ram[95] = "0b00111101001001010111110011111101";
        ram[96] = "0b00111100000101101000010100110010";
        ram[97] = "0b10111101001100000111101011110010";
        ram[98] = "0b10111101010110111111111000101110";
        ram[99] = "0b10111100111000000000000110010011";
        ram[100] = "0b10111101110101111011111010011000";
        ram[101] = "0b00111100100010010101000111101110";
        ram[102] = "0b10111011101111110001010001010010";
        ram[103] = "0b00111100111010111001111111000001";
        ram[104] = "0b10111101100001000110100100101001";
        ram[105] = "0b10111101001010101110111110011000";
        ram[106] = "0b00111100111111100111111101100010";
        ram[107] = "0b10111101010010101100101110111011";
        ram[108] = "0b10111101001110000111111000010001";
        ram[109] = "0b00111101000101110010100000000101";
        ram[110] = "0b00111110001000101101100101001001";
        ram[111] = "0b10111101001010100110110010111011";
        ram[112] = "0b10111101111000001101000010101011";
        ram[113] = "0b00111110001000010000011100110001";
        ram[114] = "0b00111010000000111001100000011101";
        ram[115] = "0b00111100111111000101010011100101";
        ram[116] = "0b10111110000000010111101101010011";
        ram[117] = "0b10111101000001101011010010111011";
        ram[118] = "0b10111101100011000000100101001011";
        ram[119] = "0b10111101110011000100111010011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_2) {
meminst = new inference_conv2d_f3_4_0_2_ram("inference_conv2d_f3_4_0_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_2() {
    delete meminst;
}


};//endmodule
#endif
