// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_7_H__
#define __inference_conv2d_f3_1_2_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_7_ram) {
        ram[0] = "0b10111101010101101110110011111100";
        ram[1] = "0b10111101011100000100000100101011";
        ram[2] = "0b00111100101011001011001111110011";
        ram[3] = "0b00111101001011101100000101111111";
        ram[4] = "0b10111101010001111000111011010101";
        ram[5] = "0b10111100100011000011001111101011";
        ram[6] = "0b10111110001000001111000111110101";
        ram[7] = "0b10111100110000101100110110100101";
        ram[8] = "0b00111101000111010001111110010110";
        ram[9] = "0b00111101111101111100100100010101";
        ram[10] = "0b10111100110111011100111110111111";
        ram[11] = "0b00111101110001101110111011101101";
        ram[12] = "0b10111100111100011010100100100101";
        ram[13] = "0b10111101101111110101110110010011";
        ram[14] = "0b10111101110100110111110010011010";
        ram[15] = "0b00111101101010000001111100101011";
        ram[16] = "0b10111110001100100011101001101101";
        ram[17] = "0b00111101101010000100100110010101";
        ram[18] = "0b10111101100010111111001011001101";
        ram[19] = "0b10111100100101110000100100110001";
        ram[20] = "0b00111101000011111011101100101001";
        ram[21] = "0b10111100110110111101000101001101";
        ram[22] = "0b00111110001001100000011110000001";
        ram[23] = "0b00111010011010101000001100001110";
        ram[24] = "0b00111110010101110000111100111001";
        ram[25] = "0b00111101010110110100000110100101";
        ram[26] = "0b10111101011001101100100111001110";
        ram[27] = "0b00111101001000100000000101000111";
        ram[28] = "0b10111100100101111001100001101101";
        ram[29] = "0b00111110001010100101100100111010";
        ram[30] = "0b10111101000100010110111101000100";
        ram[31] = "0b10111100100100000000001100011000";
        ram[32] = "0b10111100110000100000101101110011";
        ram[33] = "0b00111101000000101100111010110010";
        ram[34] = "0b00111100111001001010110010001000";
        ram[35] = "0b00111100100111100000110101100111";
        ram[36] = "0b00111100100000111111010010000001";
        ram[37] = "0b00111101010111001001100000011100";
        ram[38] = "0b10111101110000101110100100101100";
        ram[39] = "0b10111101101101110100111100111100";
        ram[40] = "0b00111101001111000010010111101011";
        ram[41] = "0b10111110000000000011101010111000";
        ram[42] = "0b10111100010011010001111010010111";
        ram[43] = "0b00111100111011100100010100100010";
        ram[44] = "0b10111110001001010111001011011110";
        ram[45] = "0b10111110000110101011100001100011";
        ram[46] = "0b00111110001101110100001000010100";
        ram[47] = "0b00111101101111001010111001010111";
        ram[48] = "0b00111101100000100010111111100011";
        ram[49] = "0b10111101000000001000011010100011";
        ram[50] = "0b00111101000000111011001100101110";
        ram[51] = "0b00111101100000010111100111101000";
        ram[52] = "0b00111101001010000101100001011110";
        ram[53] = "0b10111100100000101111101101011101";
        ram[54] = "0b10111101101000111011100111110001";
        ram[55] = "0b10111101110011111010010110001111";
        ram[56] = "0b10111110001111100111101110000001";
        ram[57] = "0b00111110000111100101100010100011";
        ram[58] = "0b10111101111110000011000011100100";
        ram[59] = "0b10111100010111110001100100000000";
        ram[60] = "0b10111101010010110011100011111110";
        ram[61] = "0b00111101111001011010010001101010";
        ram[62] = "0b00111101001100101000100000010011";
        ram[63] = "0b10111101111000101011110101111111";
        ram[64] = "0b10111110000001110100001110100110";
        ram[65] = "0b10111101000011111100111011100000";
        ram[66] = "0b10111110000100111101001111100101";
        ram[67] = "0b10111110000000000100110110011000";
        ram[68] = "0b10111110001001000111011101111001";
        ram[69] = "0b00111101101000100001000100110111";
        ram[70] = "0b00111110001010010011010011110000";
        ram[71] = "0b10111101110101010000000010010011";
        ram[72] = "0b00111101010011100101110000110100";
        ram[73] = "0b10111101101101000011011100100100";
        ram[74] = "0b00111100011001110111010000011000";
        ram[75] = "0b10111101100101100010100011001100";
        ram[76] = "0b00111100001110001010000110011101";
        ram[77] = "0b10111101110101001000100110001111";
        ram[78] = "0b00111100100100000010011010111111";
        ram[79] = "0b10111100001101010000110111111111";
        ram[80] = "0b00111110001111101010111101101000";
        ram[81] = "0b10111110001111001110001001001100";
        ram[82] = "0b10111100001011100101000011100001";
        ram[83] = "0b00111101001101010011101000111111";
        ram[84] = "0b00111101100100001011111000001110";
        ram[85] = "0b00111110000000001001111010011001";
        ram[86] = "0b10111101000111001110011111101000";
        ram[87] = "0b00111100100101101110111111010001";
        ram[88] = "0b10111101001001010110111111100001";
        ram[89] = "0b10111101010001000101010010101001";
        ram[90] = "0b10111101000110001010110101110110";
        ram[91] = "0b00111101110011101011000100111110";
        ram[92] = "0b10111110001100011110011000000100";
        ram[93] = "0b10111101110001010011000111110110";
        ram[94] = "0b10111101100111100101010000010011";
        ram[95] = "0b10111100110101010000000011100011";
        ram[96] = "0b10111110000011000110110001010101";
        ram[97] = "0b10111101011001111001001000110000";
        ram[98] = "0b00111101100100101001000100010111";
        ram[99] = "0b10111101101110010110001111000001";
        ram[100] = "0b10111101101010010110101101000001";
        ram[101] = "0b10111110000100111000110111100111";
        ram[102] = "0b10111101111010110001000000110100";
        ram[103] = "0b10111101010110100110100110001000";
        ram[104] = "0b10111011110010111111101010101010";
        ram[105] = "0b00111110000111010001000101111011";
        ram[106] = "0b00111110000011000011000000001010";
        ram[107] = "0b00111101101101110011100010001001";
        ram[108] = "0b10111101000110111010011111111100";
        ram[109] = "0b10111101101110101010110111011001";
        ram[110] = "0b10111101010100100001011100111111";
        ram[111] = "0b10111101000110001010001110000000";
        ram[112] = "0b00111101100001011001011011111110";
        ram[113] = "0b00111101100010101011110100110110";
        ram[114] = "0b00111110001111100110000010000000";
        ram[115] = "0b00111100110101100010000000110011";
        ram[116] = "0b00111110000101011100000111000110";
        ram[117] = "0b00111011101001010110100001101111";
        ram[118] = "0b00111101100010000100000100110010";
        ram[119] = "0b10111100111111111000000001001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_7) {
meminst = new inference_conv2d_f3_1_2_7_ram("inference_conv2d_f3_1_2_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_7() {
    delete meminst;
}


};//endmodule
#endif
