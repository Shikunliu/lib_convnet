// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_0_H__
#define __inference_conv2d_f3_0_2_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_0_ram) {
        ram[0] = "0b00111110011001010110011000000110";
        ram[1] = "0b00111101101011110010010101000100";
        ram[2] = "0b00111100010010100100000000101011";
        ram[3] = "0b00111100100011010100010011111000";
        ram[4] = "0b00111110010111000110101100000101";
        ram[5] = "0b00111101100001010010010111110101";
        ram[6] = "0b10111101011010100011011011010101";
        ram[7] = "0b00111100011000010000111100001111";
        ram[8] = "0b10111101101100111111100101000111";
        ram[9] = "0b10111101001110011100101011100010";
        ram[10] = "0b10111101011111110111010011000000";
        ram[11] = "0b00111101101001111101111100011010";
        ram[12] = "0b00111100110110111001000111000001";
        ram[13] = "0b10111101110001011010000110010101";
        ram[14] = "0b10111101110010101101111110011010";
        ram[15] = "0b00111101101110000011000011100100";
        ram[16] = "0b00111101110000001100110111110001";
        ram[17] = "0b10111101110011001000000010000100";
        ram[18] = "0b00111101010100100001001000011100";
        ram[19] = "0b00111101111110001100011101011100";
        ram[20] = "0b10111101101011011100001111100110";
        ram[21] = "0b10111011100110011010101110001101";
        ram[22] = "0b00111101001000110010000011001100";
        ram[23] = "0b00111101100101000010001010111111";
        ram[24] = "0b10111101101110111001010100011100";
        ram[25] = "0b10111101111000100000001011011010";
        ram[26] = "0b00111110000100011110100001100000";
        ram[27] = "0b10111110000110101110101001110100";
        ram[28] = "0b10111101110101101000100101000100";
        ram[29] = "0b10111101111110001000110000011110";
        ram[30] = "0b10111011110000011101011101100110";
        ram[31] = "0b10111100110001101111010011100111";
        ram[32] = "0b10111101001010110101111101011111";
        ram[33] = "0b10111110000101010110101111001010";
        ram[34] = "0b00111101001101100010110111101111";
        ram[35] = "0b00111100101100011011100111101100";
        ram[36] = "0b00111011101101001100011100011101";
        ram[37] = "0b10111110000110110000110011001100";
        ram[38] = "0b00111110000001110000111100111001";
        ram[39] = "0b00111101011001000110110100010111";
        ram[40] = "0b10111101110011110010010100011100";
        ram[41] = "0b00111101010001100111101111100101";
        ram[42] = "0b10111101011000111110011011000101";
        ram[43] = "0b00111100110101101111000011011101";
        ram[44] = "0b00111101100100101110001001110110";
        ram[45] = "0b10111101001000001011111010100010";
        ram[46] = "0b00111101100100100010101111011010";
        ram[47] = "0b00111101101110100000101010010110";
        ram[48] = "0b00111101101111101000011110000010";
        ram[49] = "0b10111101100110001011001001111110";
        ram[50] = "0b10111110010000100000111001100011";
        ram[51] = "0b00111100010110111111010101011111";
        ram[52] = "0b00111101101011001000110011001001";
        ram[53] = "0b10111101101011110000001110011100";
        ram[54] = "0b10111100110011111111111100011100";
        ram[55] = "0b00111110010100001001000000101110";
        ram[56] = "0b00111101000001100111110011010111";
        ram[57] = "0b10111101011010011011010110001011";
        ram[58] = "0b10111101100111110010100100011000";
        ram[59] = "0b00111101100100010011111110110110";
        ram[60] = "0b10111101110000111011010001100010";
        ram[61] = "0b00111101100111101011101011111110";
        ram[62] = "0b10111101101010000001010101010000";
        ram[63] = "0b10111110001011000100101111010011";
        ram[64] = "0b00111110000111101000010110111010";
        ram[65] = "0b00111110001010100100110100101011";
        ram[66] = "0b00111101101110111101000010000011";
        ram[67] = "0b00111100100001100111010010001110";
        ram[68] = "0b10111101111111000101011010010011";
        ram[69] = "0b00111101001101011001010010000111";
        ram[70] = "0b10111110001101011101001011010000";
        ram[71] = "0b10111101110000100000111110110010";
        ram[72] = "0b10111110000000010101000101100001";
        ram[73] = "0b10111101101101010110000001000010";
        ram[74] = "0b10111110000000111101011001000001";
        ram[75] = "0b10111101110101110101111010100110";
        ram[76] = "0b00111110000001001100001000101111";
        ram[77] = "0b10111101100100010110100111111000";
        ram[78] = "0b10111101000101110111100100010011";
        ram[79] = "0b00111101111101000101000101110110";
        ram[80] = "0b00111110000100101111011101101110";
        ram[81] = "0b10111110001110111111000100100000";
        ram[82] = "0b10111110000111011110000000001101";
        ram[83] = "0b10111100011011010001101010110110";
        ram[84] = "0b10111100100011011110101101000101";
        ram[85] = "0b10111110000000011000101101010000";
        ram[86] = "0b00111110011101011111010000011011";
        ram[87] = "0b00111101100000001111010001101100";
        ram[88] = "0b10111101000111000010110001010001";
        ram[89] = "0b10111110000101100101101001010111";
        ram[90] = "0b10111110001011100011000111010111";
        ram[91] = "0b00111101010000100000001101100000";
        ram[92] = "0b00111101100111101011001100101111";
        ram[93] = "0b10111101000110000001011011111101";
        ram[94] = "0b00111101100000101011111000111011";
        ram[95] = "0b10111110010111000110011110011101";
        ram[96] = "0b10111101011100010101111011001101";
        ram[97] = "0b10111110010001110101100101101000";
        ram[98] = "0b10111100110110001111111000110011";
        ram[99] = "0b10111101001000000100100111101101";
        ram[100] = "0b00111101011101000101001111111010";
        ram[101] = "0b10111101010000010001100010110100";
        ram[102] = "0b00111100010001001010110101000100";
        ram[103] = "0b10111100100011101100110101011000";
        ram[104] = "0b00111101110000100101000001111111";
        ram[105] = "0b10111011110110010000011010101100";
        ram[106] = "0b00111100111100001101111000100100";
        ram[107] = "0b00111100101001000100010001001101";
        ram[108] = "0b10111101001110111110001100000101";
        ram[109] = "0b00111101110001100001101000101011";
        ram[110] = "0b00111101100000010111001011101111";
        ram[111] = "0b00111101100110010110010111110101";
        ram[112] = "0b00111101000011001101110100101000";
        ram[113] = "0b10111101101111110000111010010001";
        ram[114] = "0b10111100100000100011100010001010";
        ram[115] = "0b00111101010111100111000001001000";
        ram[116] = "0b00111100101101110000001100110111";
        ram[117] = "0b10111101101010100101000100110101";
        ram[118] = "0b10111100010011110101100100000100";
        ram[119] = "0b00111110010010010100011010000000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_0) {
meminst = new inference_conv2d_f3_0_2_0_ram("inference_conv2d_f3_0_2_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_0() {
    delete meminst;
}


};//endmodule
#endif
