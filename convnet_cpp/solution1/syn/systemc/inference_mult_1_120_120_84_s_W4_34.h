// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_34_H__
#define __inference_mult_1_120_120_84_s_W4_34_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_34_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_34_ram) {
        ram[0] = "0b00111110001110101101111010101001";
        ram[1] = "0b00111110010010100010000001011000";
        ram[2] = "0b10111101000010010101100110110000";
        ram[3] = "0b00111100111001101010101000100011";
        ram[4] = "0b00111101100110101011011110001100";
        ram[5] = "0b10111101100100111010100011001100";
        ram[6] = "0b10111101010110100111000110110110";
        ram[7] = "0b10111101000111100101111010101011";
        ram[8] = "0b10111110010100011010111000101110";
        ram[9] = "0b10111101101110010010110101100011";
        ram[10] = "0b00111110000000011101001000011000";
        ram[11] = "0b10111100100100011001001100111011";
        ram[12] = "0b00111110000000011000000101011010";
        ram[13] = "0b10111101010000110010100000001000";
        ram[14] = "0b10111101101010101010011011000101";
        ram[15] = "0b00111100000000011001011111111011";
        ram[16] = "0b00111100010111110110010111000001";
        ram[17] = "0b00111101110101001001010110011110";
        ram[18] = "0b00111101111000011110011010001010";
        ram[19] = "0b10111101101111011010101001000010";
        ram[20] = "0b10111011100111110110110010000010";
        ram[21] = "0b00111100100010100110011111001101";
        ram[22] = "0b00111101000011111010001011010110";
        ram[23] = "0b10111110000000110001111001111110";
        ram[24] = "0b10111110010111000100011010010101";
        ram[25] = "0b10111110010000100111000110111101";
        ram[26] = "0b10111110000000001010010010100000";
        ram[27] = "0b00111101001111111101100010010011";
        ram[28] = "0b10111101101111111011100111011010";
        ram[29] = "0b00111100100000000000111001111000";
        ram[30] = "0b10111110000011110110011001100010";
        ram[31] = "0b00111101101110111101000100110010";
        ram[32] = "0b10111101001011100010110110001010";
        ram[33] = "0b00111110010000011011010111001000";
        ram[34] = "0b00111101010110110100001100000010";
        ram[35] = "0b00111101000010011101100101001101";
        ram[36] = "0b00111101011111101010001011010011";
        ram[37] = "0b00111101100011011101001010101111";
        ram[38] = "0b10111100011001001101000011010000";
        ram[39] = "0b10111010101011010000011000110011";
        ram[40] = "0b10111101010110111110100100011010";
        ram[41] = "0b00111101011010000101011011100111";
        ram[42] = "0b10111110000001011001010110111100";
        ram[43] = "0b10111110000010001110100110110100";
        ram[44] = "0b10111101000111011100001110010101";
        ram[45] = "0b00111110000000000010110000001010";
        ram[46] = "0b10111101010001001110111111011001";
        ram[47] = "0b10111101100000001000011010111110";
        ram[48] = "0b00111101010111000011010100111010";
        ram[49] = "0b00111101100101011010000110001000";
        ram[50] = "0b10111110001001110010101110001000";
        ram[51] = "0b10111101100001000011101010001101";
        ram[52] = "0b00111101000011101000010110111010";
        ram[53] = "0b00111101000101111110001100110001";
        ram[54] = "0b10111110000101000001100011010111";
        ram[55] = "0b10111110001000001111010011011000";
        ram[56] = "0b10111100011001000010100010011111";
        ram[57] = "0b00111101011101101100101001100010";
        ram[58] = "0b10111101001001001110000000000100";
        ram[59] = "0b00111100111111100110001001110001";
        ram[60] = "0b10111101011000000100111010100101";
        ram[61] = "0b00111101000101001101110100000111";
        ram[62] = "0b10111101011000011100011000001001";
        ram[63] = "0b10111011001110100011000000010010";
        ram[64] = "0b10111110011000001110101000011000";
        ram[65] = "0b10111010101101100110000110100110";
        ram[66] = "0b00111100111110001000101100101100";
        ram[67] = "0b10111110001111010010111110100001";
        ram[68] = "0b10111101000000100111100000110000";
        ram[69] = "0b10111101101101101101011011011100";
        ram[70] = "0b00111101000110010000001100000110";
        ram[71] = "0b10111110000011100111110110011010";
        ram[72] = "0b00111100001011011000111100011010";
        ram[73] = "0b00111110010100110010110110110010";
        ram[74] = "0b00111110010011011101101000000110";
        ram[75] = "0b00111100000101111001010010011100";
        ram[76] = "0b00111101000111101111001101011011";
        ram[77] = "0b00111011111110100011010000100100";
        ram[78] = "0b00111100110010000100101100101000";
        ram[79] = "0b10111100101101001010101100000010";
        ram[80] = "0b00111101100010010011111100110110";
        ram[81] = "0b00111101001010001101000010001001";
        ram[82] = "0b10111110001011100000100010101111";
        ram[83] = "0b10111101100010000110000000100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_34) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_34_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_34) {
meminst = new inference_mult_1_120_120_84_s_W4_34_ram("inference_mult_1_120_120_84_s_W4_34_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_34() {
    delete meminst;
}


};//endmodule
#endif
