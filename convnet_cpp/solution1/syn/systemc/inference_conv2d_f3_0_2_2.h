// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_2_H__
#define __inference_conv2d_f3_0_2_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_2_ram) {
        ram[0] = "0b10111101111100011100111010101111";
        ram[1] = "0b10111100111000000010011100011101";
        ram[2] = "0b10111101110000000101111001011111";
        ram[3] = "0b10111110001011000010111101000000";
        ram[4] = "0b00111101000000101111000011100001";
        ram[5] = "0b00111101011000111011111010000001";
        ram[6] = "0b10111100100100110000001011011100";
        ram[7] = "0b10111110001010100110010011000011";
        ram[8] = "0b00111101001111110100111001000100";
        ram[9] = "0b10111101101010101001111111110100";
        ram[10] = "0b00111100011010111010101000001000";
        ram[11] = "0b00111100101110110011010000011110";
        ram[12] = "0b10111101101000010100110111000011";
        ram[13] = "0b10111110001101010011010111001010";
        ram[14] = "0b00111101011101111010101111101110";
        ram[15] = "0b10111101011000100001001111110001";
        ram[16] = "0b10111101111000101100100010000010";
        ram[17] = "0b10111110010110101100011010001011";
        ram[18] = "0b00111100001100001100110001010001";
        ram[19] = "0b10111001011100110110011010010101";
        ram[20] = "0b00111101000011011011100100100110";
        ram[21] = "0b00111110000101110100010000101100";
        ram[22] = "0b00111101010000000001000000001011";
        ram[23] = "0b10111101010111010010011011101101";
        ram[24] = "0b00111101011000011010000111011100";
        ram[25] = "0b10111011000011000011011011011011";
        ram[26] = "0b00111101101010011111011110110110";
        ram[27] = "0b00111100100111110010001011011011";
        ram[28] = "0b10111101010100110100110011111111";
        ram[29] = "0b10111101010011000100100100011001";
        ram[30] = "0b00111101001101111111110001000000";
        ram[31] = "0b00111101111000001111001111001011";
        ram[32] = "0b00111101010000011111110010001111";
        ram[33] = "0b00111100011100000010110100100100";
        ram[34] = "0b00111101001011001010110001001011";
        ram[35] = "0b00111110000100101110111011001000";
        ram[36] = "0b00111101011100100001100110001101";
        ram[37] = "0b10111100000000101011010000110000";
        ram[38] = "0b00111110000100010101110101110000";
        ram[39] = "0b00111101001001100110110100011100";
        ram[40] = "0b10111110000111111100111010111000";
        ram[41] = "0b10111101110010111101100100011100";
        ram[42] = "0b00111100100011010111010010010010";
        ram[43] = "0b00111101000110101110011111001000";
        ram[44] = "0b00111100100000001010100010011100";
        ram[45] = "0b00111100001100000100001100101001";
        ram[46] = "0b10111110000010001011110001011010";
        ram[47] = "0b10111101001011010010111101011110";
        ram[48] = "0b10111101100001100010100000111000";
        ram[49] = "0b00111100100000001101111110001110";
        ram[50] = "0b10111100011001000100100000010100";
        ram[51] = "0b10111010100111100001001111111101";
        ram[52] = "0b10111101011011111000010111001010";
        ram[53] = "0b10111110001011011111011001010101";
        ram[54] = "0b00111100111101101010101101011000";
        ram[55] = "0b10111101100000001110011111100101";
        ram[56] = "0b10111101111101101111001010100110";
        ram[57] = "0b10111100111000000010110111010011";
        ram[58] = "0b00111101000101100001001001000000";
        ram[59] = "0b10111011010010110011000011101011";
        ram[60] = "0b10111101110000110010000100000010";
        ram[61] = "0b00111011111001100001111000010111";
        ram[62] = "0b00111100010100110001011000101000";
        ram[63] = "0b10111101010011111010111011001010";
        ram[64] = "0b00111101001110001011001101010101";
        ram[65] = "0b10111011011111110100000111101010";
        ram[66] = "0b10111100101101010110001001001101";
        ram[67] = "0b10111110000111010101101000011000";
        ram[68] = "0b10111101000010011010111111100010";
        ram[69] = "0b10111101111010111011100100000110";
        ram[70] = "0b00111101010100110001000000010011";
        ram[71] = "0b10111101011110100011101110011011";
        ram[72] = "0b10111101000000000011001000011111";
        ram[73] = "0b00111110000011001111001010001100";
        ram[74] = "0b00111101001101111010110010101010";
        ram[75] = "0b00111011111001000000000100110001";
        ram[76] = "0b00111110000110000000100011001000";
        ram[77] = "0b10111101100011010110110000010100";
        ram[78] = "0b00111101100111010011100011011011";
        ram[79] = "0b00111101101100111101111010010111";
        ram[80] = "0b10111101110010000110111100000101";
        ram[81] = "0b10111100111100001100101011011001";
        ram[82] = "0b00111101111100101111010111011100";
        ram[83] = "0b00111110000000000001111010101100";
        ram[84] = "0b10111101110011101000000110001000";
        ram[85] = "0b10111101000010110101011100010110";
        ram[86] = "0b00111100100000011111100100110100";
        ram[87] = "0b00111101100110001101011001011011";
        ram[88] = "0b10111101010110110101110100111001";
        ram[89] = "0b10111101100010011111100100010011";
        ram[90] = "0b10111101101111111110100001000000";
        ram[91] = "0b00111101111111011011000100100001";
        ram[92] = "0b10111100111101100110110001101110";
        ram[93] = "0b00111101100000010010011011001111";
        ram[94] = "0b10111101010001100100000101111101";
        ram[95] = "0b10111101001110101111101011000011";
        ram[96] = "0b10111101001101000001010011110101";
        ram[97] = "0b00111101101101110010010111010001";
        ram[98] = "0b10111101100101110001111100101001";
        ram[99] = "0b00111100011111110110001110001101";
        ram[100] = "0b10111101110001010011011110100000";
        ram[101] = "0b00111101000010101100100111110011";
        ram[102] = "0b10111100111110101111000110100011";
        ram[103] = "0b10111101011010100000101011001011";
        ram[104] = "0b10111011111001100111101000011101";
        ram[105] = "0b10111101000010011111000011001010";
        ram[106] = "0b10111101111000011111110100010101";
        ram[107] = "0b10111101011101100011001000100001";
        ram[108] = "0b10111101100100111001111101011100";
        ram[109] = "0b10111100101101110010100010001011";
        ram[110] = "0b10111101110110100001000110101001";
        ram[111] = "0b10111100001100001010011011111100";
        ram[112] = "0b10111110001011010010000100110110";
        ram[113] = "0b00111101111011100110100011100100";
        ram[114] = "0b00111101110100010011111110001110";
        ram[115] = "0b00111110000001100001101000011110";
        ram[116] = "0b10111110001010001001001010101011";
        ram[117] = "0b10111101000001001001001111111110";
        ram[118] = "0b00111010101001000000010000000001";
        ram[119] = "0b10111101100000111010110100001011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_2) {
meminst = new inference_conv2d_f3_0_2_2_ram("inference_conv2d_f3_0_2_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_2() {
    delete meminst;
}


};//endmodule
#endif
