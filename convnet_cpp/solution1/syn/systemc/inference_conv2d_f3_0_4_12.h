// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_12_H__
#define __inference_conv2d_f3_0_4_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_12_ram) {
        ram[0] = "0b00111101011100111011010100111001";
        ram[1] = "0b00111101010001110010000101000010";
        ram[2] = "0b00111101100100011010010101011111";
        ram[3] = "0b10111110001101001111010101001101";
        ram[4] = "0b00111101101010110111110111100011";
        ram[5] = "0b00111101011000011000001000110001";
        ram[6] = "0b00111101101001101100001010000100";
        ram[7] = "0b10111100010011111011101001010010";
        ram[8] = "0b00111100110110101011001011010100";
        ram[9] = "0b00111101010010101000101010011101";
        ram[10] = "0b10111101110010101101111111010000";
        ram[11] = "0b10111101110111010000111100011111";
        ram[12] = "0b10111110000101000111000001100101";
        ram[13] = "0b00111100101101011010010011111101";
        ram[14] = "0b00111101101111111110000101101111";
        ram[15] = "0b10111100100010000000010111110011";
        ram[16] = "0b00111101011010010011100101001010";
        ram[17] = "0b10111100101110101011110011001010";
        ram[18] = "0b10111101101110010001100111111101";
        ram[19] = "0b10111101110001010101000011100101";
        ram[20] = "0b00111100100100111101001010110000";
        ram[21] = "0b00111011100011010001010111010011";
        ram[22] = "0b00111110001100001011001111010101";
        ram[23] = "0b10111100111110010010011011001000";
        ram[24] = "0b00111101001110000010000100001110";
        ram[25] = "0b00111101011110110100110101001001";
        ram[26] = "0b10111101000101000111110000100011";
        ram[27] = "0b10111101011110100100011100100100";
        ram[28] = "0b00111010110010010000111000100110";
        ram[29] = "0b00111101101001001010101100000010";
        ram[30] = "0b10111101000100101000111010010011";
        ram[31] = "0b10111101001011001010010110010101";
        ram[32] = "0b00111101001011101011001100000110";
        ram[33] = "0b10111101111111100001111100111010";
        ram[34] = "0b10111101110011010100111111011111";
        ram[35] = "0b00111101100001111110010110110101";
        ram[36] = "0b00111101010110110101010100100110";
        ram[37] = "0b10111101100000000011110101010111";
        ram[38] = "0b10111110000111110100111100001110";
        ram[39] = "0b00111101000001000001110010101010";
        ram[40] = "0b00111110001101101110110001011011";
        ram[41] = "0b00111101001111110100001010100001";
        ram[42] = "0b00111100101010001001010110000000";
        ram[43] = "0b00111110001011110101000010100000";
        ram[44] = "0b10111101100010110100011011100011";
        ram[45] = "0b00111110000011001101101001101110";
        ram[46] = "0b00111110000000011101000110010001";
        ram[47] = "0b10111110001110011000110110001011";
        ram[48] = "0b00111101101111100011001001101011";
        ram[49] = "0b10111101001001111110101110100010";
        ram[50] = "0b00111101100010111001011010000111";
        ram[51] = "0b10111101111100011011011110011110";
        ram[52] = "0b00111101101110100000011110011000";
        ram[53] = "0b00111101101011101000100010101010";
        ram[54] = "0b10111110000100001101100011001011";
        ram[55] = "0b00111010101110110110001101101110";
        ram[56] = "0b10111110000001001000001100000010";
        ram[57] = "0b00111110001010000010111011001011";
        ram[58] = "0b10111110001100111011011000000011";
        ram[59] = "0b00111101011111111010011111010001";
        ram[60] = "0b00111101011111010011001110111000";
        ram[61] = "0b00111110000010000011010000001001";
        ram[62] = "0b10111101100000101111001100111101";
        ram[63] = "0b10111101110000000110001111010011";
        ram[64] = "0b10111101110111001010110110011011";
        ram[65] = "0b10111100011110101110000110110011";
        ram[66] = "0b10111101100000100000100010000011";
        ram[67] = "0b10111101001111011110011100111100";
        ram[68] = "0b10111101101010000111000010100101";
        ram[69] = "0b10111110001000111111011011000010";
        ram[70] = "0b00111101001001100110010100001001";
        ram[71] = "0b10111101101001010110110001011110";
        ram[72] = "0b00111101100110001000001000110101";
        ram[73] = "0b10111101011010000011110110111100";
        ram[74] = "0b10111101101011001110111101011010";
        ram[75] = "0b00111101110000010110100000111101";
        ram[76] = "0b00111110010011111101101100001010";
        ram[77] = "0b10111100110010010101111011101111";
        ram[78] = "0b10111101100000010011111110110110";
        ram[79] = "0b00111101110111001001001011011110";
        ram[80] = "0b00111100111000110010101001110010";
        ram[81] = "0b00111101111110001010000010010000";
        ram[82] = "0b00111100000100000101111011110011";
        ram[83] = "0b10111110000110111100100001111110";
        ram[84] = "0b00111110000010011101011001101011";
        ram[85] = "0b00111100010111001000110100110100";
        ram[86] = "0b10111100110111100011111000001110";
        ram[87] = "0b10111101010110111010001010111110";
        ram[88] = "0b00111101101111101011101111010101";
        ram[89] = "0b10111101110110111111111100000100";
        ram[90] = "0b10111101000000110110110011010010";
        ram[91] = "0b00111101110010101011100011110110";
        ram[92] = "0b00111100001100001011000100001101";
        ram[93] = "0b10111101001110001001000011010110";
        ram[94] = "0b00111100001111011000100010001100";
        ram[95] = "0b00111110010001100001011010110101";
        ram[96] = "0b00111101101100000000100010100111";
        ram[97] = "0b00111101011111101110001110000101";
        ram[98] = "0b00111101001101001100101110111010";
        ram[99] = "0b10111100010000111110101111101000";
        ram[100] = "0b10111101010110001110010000110010";
        ram[101] = "0b10111101100011101101000011101001";
        ram[102] = "0b10111110001101010111011110010110";
        ram[103] = "0b10111110010010001100001100101011";
        ram[104] = "0b10111101000110011101101001001100";
        ram[105] = "0b00111101110001100001110100000000";
        ram[106] = "0b10111101000011010100001000111110";
        ram[107] = "0b00111101101100001001111001100011";
        ram[108] = "0b00111101110010110000010100111111";
        ram[109] = "0b00111100101010001001001110011101";
        ram[110] = "0b10111101010111001011010100101000";
        ram[111] = "0b00111011100001011110010000110000";
        ram[112] = "0b00111011100011110111100001101110";
        ram[113] = "0b10111101111110100110001001100111";
        ram[114] = "0b10111110000101011111010111110001";
        ram[115] = "0b00111110000101001101011111110001";
        ram[116] = "0b10111101011010010110101011100011";
        ram[117] = "0b00111110000100110010100100111101";
        ram[118] = "0b00111110000100101000100100010010";
        ram[119] = "0b10111100000010000101011111010011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_12) {
meminst = new inference_conv2d_f3_0_4_12_ram("inference_conv2d_f3_0_4_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_12() {
    delete meminst;
}


};//endmodule
#endif
