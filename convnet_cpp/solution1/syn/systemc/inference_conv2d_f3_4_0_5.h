// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_5_H__
#define __inference_conv2d_f3_4_0_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_5_ram) {
        ram[0] = "0b10111101000000101010110110001111";
        ram[1] = "0b00111110000000111110111010100010";
        ram[2] = "0b00111110000100001011001100001011";
        ram[3] = "0b10111101111010110100111000010010";
        ram[4] = "0b00111101010100110011110010001000";
        ram[5] = "0b00111100110111000101100010010001";
        ram[6] = "0b00111101011100010110011011111011";
        ram[7] = "0b10111100111011000100111101001001";
        ram[8] = "0b10111100100111110001011001111011";
        ram[9] = "0b00111100101010100001011110010110";
        ram[10] = "0b00111110000001010010111010110110";
        ram[11] = "0b00111101110101111000111111101111";
        ram[12] = "0b10111101101101000011110001110000";
        ram[13] = "0b10111101001100110110100000100111";
        ram[14] = "0b00111110001001011011000101000010";
        ram[15] = "0b00111101101101001010110111001010";
        ram[16] = "0b00111101111010000101111101001010";
        ram[17] = "0b10111101100111110110000111101101";
        ram[18] = "0b10111100001001110001100101001001";
        ram[19] = "0b10111101111001101101000001001110";
        ram[20] = "0b00111101000000110101011001000110";
        ram[21] = "0b00111110000101000110010110100101";
        ram[22] = "0b00111110001101001001101111101001";
        ram[23] = "0b00111110001001000010110101001001";
        ram[24] = "0b00111101000001101011000101100000";
        ram[25] = "0b10111101001001110010000111001000";
        ram[26] = "0b00111101111100100101001111011010";
        ram[27] = "0b00111010100001101001011010110011";
        ram[28] = "0b00111110010111111110011111100010";
        ram[29] = "0b10111101111111001111010001100010";
        ram[30] = "0b00111101010000010010111101011010";
        ram[31] = "0b10111110001010010101010100101110";
        ram[32] = "0b10111101110100101000000011110001";
        ram[33] = "0b10111101001101011110100000011001";
        ram[34] = "0b00111110001000110101111110000001";
        ram[35] = "0b10111101001001000101001001110101";
        ram[36] = "0b00111110010001001100101111100010";
        ram[37] = "0b00111101111101000100101100101011";
        ram[38] = "0b10111101101100000001101100011011";
        ram[39] = "0b00111101011100101000111001000010";
        ram[40] = "0b00111100101111100100000111110000";
        ram[41] = "0b00111101100001001010100101100010";
        ram[42] = "0b00111101011010111000100001111010";
        ram[43] = "0b00111110000111000001111000110110";
        ram[44] = "0b10111101111011111000110001100101";
        ram[45] = "0b00111100100111000111001000100111";
        ram[46] = "0b00111101011010010011010000001100";
        ram[47] = "0b10111011000000101110001110100000";
        ram[48] = "0b00111100100000110001010101011110";
        ram[49] = "0b10111101111111000011100010110000";
        ram[50] = "0b10111110001010011001011100111110";
        ram[51] = "0b00111101111001010110011110011001";
        ram[52] = "0b00111101011000000010110011000110";
        ram[53] = "0b00111101000111011101000110111101";
        ram[54] = "0b00111110000111010111111010001001";
        ram[55] = "0b10111101101110001000110010010110";
        ram[56] = "0b10111101100001010100001110000110";
        ram[57] = "0b00111101001110111101010111001111";
        ram[58] = "0b10111110001011110001010101100010";
        ram[59] = "0b10111011100100011011111000011000";
        ram[60] = "0b00111101101010111001000111101010";
        ram[61] = "0b10111100101101101001100110000101";
        ram[62] = "0b00111101100110100110001111000100";
        ram[63] = "0b10111101100100001111110101100011";
        ram[64] = "0b10111101111100010001000011100100";
        ram[65] = "0b10111101100001010101011101011000";
        ram[66] = "0b10111101101000101110100111011010";
        ram[67] = "0b10111101100111101010100111110100";
        ram[68] = "0b10111011100011110110101010101100";
        ram[69] = "0b10111110010000001001110011000011";
        ram[70] = "0b00111101111100010000101010011010";
        ram[71] = "0b00111101110011100111001111100111";
        ram[72] = "0b10111100011010010100110011001011";
        ram[73] = "0b10111100011001110100110100010110";
        ram[74] = "0b10111101011110101010111101011110";
        ram[75] = "0b10111101000001111111100000110111";
        ram[76] = "0b00111110001000000001101100000000";
        ram[77] = "0b00111110001100111001000101001111";
        ram[78] = "0b00111101110101010111011010001010";
        ram[79] = "0b10111101001000011011011110010000";
        ram[80] = "0b10111110010101011111110111001110";
        ram[81] = "0b10111100110111011000101100101011";
        ram[82] = "0b00111101101001110001101000100000";
        ram[83] = "0b10111011000110000101100101111110";
        ram[84] = "0b10111101111011011111100010110001";
        ram[85] = "0b10111101101000000110010011011111";
        ram[86] = "0b10111101000011001100001010100001";
        ram[87] = "0b10111101101110100101100100111010";
        ram[88] = "0b10111101100110111110001000101110";
        ram[89] = "0b10111101000101101111111100100000";
        ram[90] = "0b10111110001001000101000011110000";
        ram[91] = "0b10111101010001100110010100001001";
        ram[92] = "0b00111101110000011110000101001100";
        ram[93] = "0b10111101110011001011101100100010";
        ram[94] = "0b00111110000000100001001101011110";
        ram[95] = "0b00111110000000100001111100101010";
        ram[96] = "0b10111101001010000110000100101101";
        ram[97] = "0b10111101100111100010000001101111";
        ram[98] = "0b00111101101010001111010000111101";
        ram[99] = "0b10111110000000100100000100111110";
        ram[100] = "0b00111110000001101000101010010011";
        ram[101] = "0b10111100100111001001000100110000";
        ram[102] = "0b10111101111001110001111011110011";
        ram[103] = "0b00111011111001110011011000011010";
        ram[104] = "0b10111100100100011011100101100110";
        ram[105] = "0b00111110010010010011010010101101";
        ram[106] = "0b00111101000101110100011100001111";
        ram[107] = "0b00111101100111001111001011101010";
        ram[108] = "0b10111011010001111010101001111001";
        ram[109] = "0b00111100100011110010001111110101";
        ram[110] = "0b10111100110001001110010000000000";
        ram[111] = "0b10111101111001100110000010100010";
        ram[112] = "0b00111110010101100111100111001100";
        ram[113] = "0b10111101111100000111011101000111";
        ram[114] = "0b10111101000101110101101000111111";
        ram[115] = "0b00111110010110011111011000100011";
        ram[116] = "0b10111101100010100011101110001101";
        ram[117] = "0b10111101000101010101000011001010";
        ram[118] = "0b00111101110011100000010000111010";
        ram[119] = "0b00111101100010110000101000010010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_5) {
meminst = new inference_conv2d_f3_4_0_5_ram("inference_conv2d_f3_4_0_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_5() {
    delete meminst;
}


};//endmodule
#endif
