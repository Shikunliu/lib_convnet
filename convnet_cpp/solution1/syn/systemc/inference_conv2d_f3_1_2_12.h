// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_12_H__
#define __inference_conv2d_f3_1_2_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_12_ram) {
        ram[0] = "0b00111101010101111001010010001100";
        ram[1] = "0b00111101010110011000101111000010";
        ram[2] = "0b00111100101010011101010000001111";
        ram[3] = "0b10111101110011111111100011101100";
        ram[4] = "0b00111110001000001010001100001110";
        ram[5] = "0b00111101110110000100110010101101";
        ram[6] = "0b00111100100010010111111100111010";
        ram[7] = "0b00110111111010110000000010101110";
        ram[8] = "0b00111101011001011001000010011000";
        ram[9] = "0b00111101100000000110001010000100";
        ram[10] = "0b00111101110110000000010111100110";
        ram[11] = "0b00111101011101110010111001101010";
        ram[12] = "0b00111101100000100000001101100000";
        ram[13] = "0b00111011111100100011011110010101";
        ram[14] = "0b10111100000100100111111000000111";
        ram[15] = "0b10111101101110111001101100110001";
        ram[16] = "0b10111101111000110110010101000101";
        ram[17] = "0b10111110000011010101101101101000";
        ram[18] = "0b00111110001001000101111101011011";
        ram[19] = "0b00111101100000100101110110011011";
        ram[20] = "0b00111101111110100101110100101001";
        ram[21] = "0b10111101111010010101100011011010";
        ram[22] = "0b00111100101101010101110100001111";
        ram[23] = "0b00111101011001001001100010011011";
        ram[24] = "0b10111101100111011101001011110010";
        ram[25] = "0b00111101100001111011100100100100";
        ram[26] = "0b00111001110110011111100001111100";
        ram[27] = "0b10111110001010100110101000000001";
        ram[28] = "0b10111101011100100101110010101001";
        ram[29] = "0b00111100110010110000111111001001";
        ram[30] = "0b00111101001111110100000000011100";
        ram[31] = "0b00111101010100100101100101101001";
        ram[32] = "0b00111110000001011000110111011110";
        ram[33] = "0b00111101001010111010000000101100";
        ram[34] = "0b10111110001011010000001011001101";
        ram[35] = "0b00111101101111010010011111101100";
        ram[36] = "0b10111100110100001110001010100110";
        ram[37] = "0b00111101100010001001001011101111";
        ram[38] = "0b10111101001011001001010010011001";
        ram[39] = "0b00111100011101011110001011011011";
        ram[40] = "0b10111101101000000001010100100001";
        ram[41] = "0b10111101101100110110101111000101";
        ram[42] = "0b00111101011110001001010010000001";
        ram[43] = "0b00111100010101101010011101000001";
        ram[44] = "0b10111101101110111000101101001110";
        ram[45] = "0b00111101001101110100010111100111";
        ram[46] = "0b10111110000010101101110010010000";
        ram[47] = "0b10111101100010010100110101111001";
        ram[48] = "0b00111101111111011100101001001011";
        ram[49] = "0b00111101100001111101011001011000";
        ram[50] = "0b00111101101111101001100000100001";
        ram[51] = "0b00111110000000011101011100010011";
        ram[52] = "0b00111100111100110111010010100010";
        ram[53] = "0b10111101111100101110100111001101";
        ram[54] = "0b10111101011111010011101110110000";
        ram[55] = "0b10111101001001001101100100011000";
        ram[56] = "0b00111101001110011110101101111110";
        ram[57] = "0b10111101100110001011110110000001";
        ram[58] = "0b10111110001101000101100100010000";
        ram[59] = "0b10111101100000111111011000000111";
        ram[60] = "0b10111101011011111111011011010011";
        ram[61] = "0b00111110000001100110110101111010";
        ram[62] = "0b00111101100100000111101010111100";
        ram[63] = "0b00111101011011111011001100110001";
        ram[64] = "0b10111101110001010010010100011110";
        ram[65] = "0b10111101100111001010001010110011";
        ram[66] = "0b00111101110100110000100000110101";
        ram[67] = "0b10111110000001101101001011101101";
        ram[68] = "0b10111110001101101111111000101110";
        ram[69] = "0b00111110000011110011001100000001";
        ram[70] = "0b10111100011000011010100111010100";
        ram[71] = "0b00111011111000100000101110001110";
        ram[72] = "0b10111100011100001010101011111000";
        ram[73] = "0b10111100101001000011011000001010";
        ram[74] = "0b00111110001100000101001111100011";
        ram[75] = "0b10111110001011101001111111110001";
        ram[76] = "0b00111100110100010110101100101101";
        ram[77] = "0b10111101101001100111100011110110";
        ram[78] = "0b00111101111001001010111100001100";
        ram[79] = "0b10111100000100111110010101000101";
        ram[80] = "0b00111100100011011010101001000010";
        ram[81] = "0b10111101110011001110100000010000";
        ram[82] = "0b10111101001100000101101101100010";
        ram[83] = "0b10111100101010001010010100000101";
        ram[84] = "0b10111101101000001001011110100000";
        ram[85] = "0b00111100110010110010001011011110";
        ram[86] = "0b10111101000101100001101100001111";
        ram[87] = "0b00111101000001101010010101101011";
        ram[88] = "0b10111101100110101110001011110101";
        ram[89] = "0b00111101000011101101111100101011";
        ram[90] = "0b00111110000000101111001100111101";
        ram[91] = "0b00111110000010100110111001110110";
        ram[92] = "0b00111101000101111110101001101101";
        ram[93] = "0b00111110001111011100110110110011";
        ram[94] = "0b10111101110000011100101010011000";
        ram[95] = "0b00111101010101011011110010010101";
        ram[96] = "0b00111100110111001111001110001011";
        ram[97] = "0b00111100010000101111110101000000";
        ram[98] = "0b10111100100000011010000001111111";
        ram[99] = "0b10111101011100001000101111010100";
        ram[100] = "0b00111101011010110011001000010011";
        ram[101] = "0b00111001011101000001001111111101";
        ram[102] = "0b00111100101001111011010010110000";
        ram[103] = "0b10111101000110111110100001111001";
        ram[104] = "0b00111110001100011000001000100011";
        ram[105] = "0b10111011110100111000100110010101";
        ram[106] = "0b00111101101000001010111101000101";
        ram[107] = "0b10111110000000100100111110101001";
        ram[108] = "0b10111101001010100110110010100000";
        ram[109] = "0b10111101001111000000000001100001";
        ram[110] = "0b10111100001111111001111101010010";
        ram[111] = "0b10111101000101000011101010011010";
        ram[112] = "0b00111101001110011101001100101011";
        ram[113] = "0b00111110010000010111011001010111";
        ram[114] = "0b00111110001101000001111100100001";
        ram[115] = "0b00111110001110000011011111111000";
        ram[116] = "0b00111101001111001000100011001101";
        ram[117] = "0b10111100101110010101110001000010";
        ram[118] = "0b10111101111001011001100101100111";
        ram[119] = "0b00111101110001010111110101011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_12) {
meminst = new inference_conv2d_f3_1_2_12_ram("inference_conv2d_f3_1_2_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_12() {
    delete meminst;
}


};//endmodule
#endif
