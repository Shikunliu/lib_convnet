// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_65_H__
#define __inference_mult_1_120_120_84_s_W4_65_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_65_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_65_ram) {
        ram[0] = "0b00111101010011011001110100001100";
        ram[1] = "0b10111101110100100101110000111110";
        ram[2] = "0b00111100101110111100010100111110";
        ram[3] = "0b10111101001010100000011011001111";
        ram[4] = "0b10111101100100000101000001111010";
        ram[5] = "0b10111110000101111001000010111000";
        ram[6] = "0b10111100111111111110100101011010";
        ram[7] = "0b00111110000010001000000100011011";
        ram[8] = "0b10111110000101010011001001100001";
        ram[9] = "0b00111101010000010111001100110010";
        ram[10] = "0b00111101101000001110010101010011";
        ram[11] = "0b00111100100110011100001011101010";
        ram[12] = "0b10111100111101010100101101110001";
        ram[13] = "0b10111101001001000110100100000000";
        ram[14] = "0b00111101010110100101100000111011";
        ram[15] = "0b10111101110111101101100011010011";
        ram[16] = "0b00111100001110010101000111000110";
        ram[17] = "0b00111101110011111101110110101001";
        ram[18] = "0b00111110001011001101000111001000";
        ram[19] = "0b00111101011100100000000111110110";
        ram[20] = "0b10111001111101110001100010001100";
        ram[21] = "0b00111101110011010110101010011100";
        ram[22] = "0b10111100101110011100000111111000";
        ram[23] = "0b10111101011111000011001101010111";
        ram[24] = "0b00111110000111101111110001111010";
        ram[25] = "0b10111101001101010011010100000001";
        ram[26] = "0b10111101000101011001100011101110";
        ram[27] = "0b00111101101010011000101100100001";
        ram[28] = "0b00111101100101001111000101000100";
        ram[29] = "0b10111110010000100101010011100111";
        ram[30] = "0b10111101101111010010001110101101";
        ram[31] = "0b10111101100101111111001100111100";
        ram[32] = "0b00111101111001001100000011011111";
        ram[33] = "0b00111101100100101011011110100000";
        ram[34] = "0b10111101101001110100100010010100";
        ram[35] = "0b10111010000110011101001100010100";
        ram[36] = "0b10111110001101111011100010010001";
        ram[37] = "0b00111101100010110000011010011100";
        ram[38] = "0b00111110000111111111011011010011";
        ram[39] = "0b10111101100001110001100001110011";
        ram[40] = "0b10111011110110101011010000000001";
        ram[41] = "0b10111101110101000100111001010001";
        ram[42] = "0b00111101110010100001100100000001";
        ram[43] = "0b00111110001101110100101111000111";
        ram[44] = "0b00111110000110011101011111111110";
        ram[45] = "0b00111101100010000000011111100100";
        ram[46] = "0b10111101011111000111001000100111";
        ram[47] = "0b00111100101001001011110110111010";
        ram[48] = "0b10111101010011010101011011001011";
        ram[49] = "0b10111101101010000110101001011010";
        ram[50] = "0b10111110000111011000000000011011";
        ram[51] = "0b10111110001000101111001010110110";
        ram[52] = "0b10111110000010110111110110000101";
        ram[53] = "0b00111101000111000111001100110011";
        ram[54] = "0b10111101001101000111111110011001";
        ram[55] = "0b00111101101100000000010001110101";
        ram[56] = "0b00111101111110001100100101110101";
        ram[57] = "0b10111101111100011001101111010100";
        ram[58] = "0b10111101111001110010111100110100";
        ram[59] = "0b10111011100101101110011111111001";
        ram[60] = "0b00111100100111110010100101011011";
        ram[61] = "0b00111101010000110110100010000101";
        ram[62] = "0b00111101000111010111010100001011";
        ram[63] = "0b00111110000000111111110000000001";
        ram[64] = "0b00111101101011100110110100111110";
        ram[65] = "0b10111110001110111010001000111000";
        ram[66] = "0b00111100011011110110110101110110";
        ram[67] = "0b10111011100010010011100011100100";
        ram[68] = "0b10111101100110011011101010101111";
        ram[69] = "0b00111101100101100111111010111010";
        ram[70] = "0b10111101000000111111100011001110";
        ram[71] = "0b00111101100100111101000000010001";
        ram[72] = "0b00111101100101111111011001111100";
        ram[73] = "0b00111110000111010011001101001100";
        ram[74] = "0b10111110000101011100001011010010";
        ram[75] = "0b00111101001101101011101011111000";
        ram[76] = "0b10111101000111010000101010011101";
        ram[77] = "0b10111100110100110110110100110000";
        ram[78] = "0b10111101001110111110111111101011";
        ram[79] = "0b00111100011111010010100100100001";
        ram[80] = "0b10111100111101011010101010100111";
        ram[81] = "0b10111101101011101000011100001001";
        ram[82] = "0b10111100100100100010101110110001";
        ram[83] = "0b10111101001110011011000011100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_65) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_65_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_65) {
meminst = new inference_mult_1_120_120_84_s_W4_65_ram("inference_mult_1_120_120_84_s_W4_65_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_65() {
    delete meminst;
}


};//endmodule
#endif
