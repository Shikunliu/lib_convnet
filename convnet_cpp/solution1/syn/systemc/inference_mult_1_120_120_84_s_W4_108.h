// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_108_H__
#define __inference_mult_1_120_120_84_s_W4_108_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_108_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_108_ram) {
        ram[0] = "0b00111100101000010010011110011000";
        ram[1] = "0b10111101001000110101100100110110";
        ram[2] = "0b10111101100010111011001010101110";
        ram[3] = "0b10111011010010101010100000101111";
        ram[4] = "0b10111101011001101110110101110101";
        ram[5] = "0b10111110001001110111010111111011";
        ram[6] = "0b10111101010111000101011110011111";
        ram[7] = "0b00111100110100001101001110001101";
        ram[8] = "0b10111101101010111000100011011000";
        ram[9] = "0b10111100110110001011001001111110";
        ram[10] = "0b10111101010111010110010011100101";
        ram[11] = "0b10111101011110011010101100000010";
        ram[12] = "0b10111101001110010011000001101110";
        ram[13] = "0b00111100000011001101001111111001";
        ram[14] = "0b00111110001011010100101100100111";
        ram[15] = "0b10111100100110001110101101010100";
        ram[16] = "0b10111101100101001000110111110111";
        ram[17] = "0b00111100010000000001000101101000";
        ram[18] = "0b10111101011110110000100110001100";
        ram[19] = "0b10111101001010111001101101011010";
        ram[20] = "0b00111101000100001011000101000011";
        ram[21] = "0b00111100110111110001100001011111";
        ram[22] = "0b10111101000011100101100000000010";
        ram[23] = "0b10111100101011111000010010111101";
        ram[24] = "0b00111101100101101101010100000110";
        ram[25] = "0b00111101111100111010101101000011";
        ram[26] = "0b00111101101111101010010101110010";
        ram[27] = "0b00111101011111010000001111100111";
        ram[28] = "0b10111101100100110001111011110110";
        ram[29] = "0b00111101110110101011110100011011";
        ram[30] = "0b10111101111101100011101110101100";
        ram[31] = "0b00111101101101111110101010010101";
        ram[32] = "0b00111101100001100010011100011110";
        ram[33] = "0b10111011101010100100110111110010";
        ram[34] = "0b10111110010001001100010000000101";
        ram[35] = "0b00111100101110100000101011110011";
        ram[36] = "0b10111101100001101010000110011000";
        ram[37] = "0b10111101010010001001110100001101";
        ram[38] = "0b00111101110000101111000101110100";
        ram[39] = "0b00111110001111100011001000011010";
        ram[40] = "0b10111101000100101011101110101010";
        ram[41] = "0b00111110010000110011001111111101";
        ram[42] = "0b10111101001001101101011001111110";
        ram[43] = "0b00111101100010101001001011011001";
        ram[44] = "0b00111101000001110110110001010110";
        ram[45] = "0b10111011010110110010011001010111";
        ram[46] = "0b00111100100001101110111111011110";
        ram[47] = "0b10111010111011111101010100111011";
        ram[48] = "0b00111110001011101101001001000110";
        ram[49] = "0b10111110000011100011101111001101";
        ram[50] = "0b00111110001000000001111111111011";
        ram[51] = "0b10111101011100101111100011001011";
        ram[52] = "0b10111101100111000110110001111101";
        ram[53] = "0b00111101111010111010101101100101";
        ram[54] = "0b00111101001101110001110101010011";
        ram[55] = "0b10111101100101000000001010001110";
        ram[56] = "0b10111101100001011100101101011110";
        ram[57] = "0b00111101111001000101010101100101";
        ram[58] = "0b00111101110111001101000010111011";
        ram[59] = "0b10111110000001100110111010000111";
        ram[60] = "0b00111101101001010011000111001110";
        ram[61] = "0b00111101111010101110100101101000";
        ram[62] = "0b00111101101011111000101010001111";
        ram[63] = "0b00111101011110010000101000001101";
        ram[64] = "0b10111101101111000010010001110011";
        ram[65] = "0b00111101100001001110000110001001";
        ram[66] = "0b00111101101001010101110010010110";
        ram[67] = "0b10111110000110101010101110001010";
        ram[68] = "0b00111110001100000110000011111110";
        ram[69] = "0b00111110010011101000000101000101";
        ram[70] = "0b00111101000101011101111110011011";
        ram[71] = "0b00111100110001100111000010010010";
        ram[72] = "0b10111100111110111100101100011101";
        ram[73] = "0b00111101001101110010000000001101";
        ram[74] = "0b10111101100101111010111110110101";
        ram[75] = "0b10111101111110100111000000001001";
        ram[76] = "0b00111101101001101110101111111101";
        ram[77] = "0b10111100101101101011010111010100";
        ram[78] = "0b10111101110110010100001010010001";
        ram[79] = "0b10111101100111110011001011110011";
        ram[80] = "0b10111110000101111101100001001001";
        ram[81] = "0b10111101101111111100111011111011";
        ram[82] = "0b10111101111110111111011010100001";
        ram[83] = "0b00111101110111111100101100001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_108) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_108_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_108) {
meminst = new inference_mult_1_120_120_84_s_W4_108_ram("inference_mult_1_120_120_84_s_W4_108_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_108() {
    delete meminst;
}


};//endmodule
#endif
