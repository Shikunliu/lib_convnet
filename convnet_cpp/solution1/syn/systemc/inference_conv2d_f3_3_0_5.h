// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_5_H__
#define __inference_conv2d_f3_3_0_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_5_ram) {
        ram[0] = "0b10111110000101110111101111000000";
        ram[1] = "0b00111110011100100000111101101111";
        ram[2] = "0b00111101010010110011000100100001";
        ram[3] = "0b00111110000011101100011001111010";
        ram[4] = "0b00111101010101101101010101111111";
        ram[5] = "0b00111101110010010101100110110000";
        ram[6] = "0b00111110000101010101111010101111";
        ram[7] = "0b10111101011100011011110011000001";
        ram[8] = "0b00111101001110001111101101111010";
        ram[9] = "0b00111011100000010111110100000011";
        ram[10] = "0b00111110000000101010111001001011";
        ram[11] = "0b00111100110100111101001001000101";
        ram[12] = "0b00111010110010110011111110000100";
        ram[13] = "0b10111110010110001100100101110101";
        ram[14] = "0b00111101000100000110111000100111";
        ram[15] = "0b00111110001010010110010100101100";
        ram[16] = "0b00111100111011101100100111100010";
        ram[17] = "0b10111110000101101111100010101101";
        ram[18] = "0b00111101101111000111111100100111";
        ram[19] = "0b10111101001110100011010010010100";
        ram[20] = "0b10111110001001000110100011001011";
        ram[21] = "0b10111101000100000111001011000100";
        ram[22] = "0b00111110000101110110100001011010";
        ram[23] = "0b00111100101010100100001001011110";
        ram[24] = "0b00111110001010101000010101000100";
        ram[25] = "0b00111011111000110101110000011011";
        ram[26] = "0b10111101101110100011100011101110";
        ram[27] = "0b00111101011000011000100001000110";
        ram[28] = "0b10111110001101110000010111001001";
        ram[29] = "0b00111101110100111110001011010110";
        ram[30] = "0b00111110100011110100111110110101";
        ram[31] = "0b10111101001110010101011100111010";
        ram[32] = "0b00111101010100100001100111011110";
        ram[33] = "0b10111110000011000011110100100101";
        ram[34] = "0b10111101100111100010010110101101";
        ram[35] = "0b00111101011100101110010110000000";
        ram[36] = "0b10111101100000011001011011110100";
        ram[37] = "0b00111101000111010010111001000100";
        ram[38] = "0b10111110000100000010110111100000";
        ram[39] = "0b10111101010011011110000100110100";
        ram[40] = "0b00111101011011100010000011011010";
        ram[41] = "0b00111101011011000001010000100101";
        ram[42] = "0b00111101011111011101110110010110";
        ram[43] = "0b00111101111111110110100100000001";
        ram[44] = "0b00111101111100110111011011010101";
        ram[45] = "0b00111101101011101100000001100101";
        ram[46] = "0b00111101011111101111101110111110";
        ram[47] = "0b10111100111111100010000010010111";
        ram[48] = "0b00111101011100110111100000010111";
        ram[49] = "0b00111101000100001101100110100010";
        ram[50] = "0b10111101000000100000110001001010";
        ram[51] = "0b10111011010100000100100101011001";
        ram[52] = "0b00111101001101110011110111101111";
        ram[53] = "0b00111001000101011000011001011100";
        ram[54] = "0b00111101000101100101100010011100";
        ram[55] = "0b00111101110011101101101100101111";
        ram[56] = "0b00111100110100101101111011001010";
        ram[57] = "0b10111101101000011011010011010110";
        ram[58] = "0b10111100110000010111000110111010";
        ram[59] = "0b00111101011111101000100111111001";
        ram[60] = "0b00111011011001110111011000011011";
        ram[61] = "0b10111101001011111111110000010001";
        ram[62] = "0b10111101100010010000011101000101";
        ram[63] = "0b10111011110100001000110101100001";
        ram[64] = "0b10111110000101100100111000000101";
        ram[65] = "0b10111100111100000000100101111101";
        ram[66] = "0b10111101011001111010110101011001";
        ram[67] = "0b00111100110011011001010100010100";
        ram[68] = "0b10111100011011100001010111110011";
        ram[69] = "0b10111101111101101000100010111110";
        ram[70] = "0b10111101011100110010101101010110";
        ram[71] = "0b10111100101111101100000010011011";
        ram[72] = "0b00111110000001111000101011110100";
        ram[73] = "0b10111010011000010001111110101111";
        ram[74] = "0b00111101111100000001011111011011";
        ram[75] = "0b00111110000111101000100110101001";
        ram[76] = "0b10111110000011100001110000010101";
        ram[77] = "0b10111101111101111010010101101110";
        ram[78] = "0b10111101100011000011000011000110";
        ram[79] = "0b00111110000110110101001010000111";
        ram[80] = "0b00111101010011001000000101101000";
        ram[81] = "0b00111100111100001111001010110001";
        ram[82] = "0b10111101011111001101101001000110";
        ram[83] = "0b10111101001000000001100100010000";
        ram[84] = "0b10111110001011001001000000111111";
        ram[85] = "0b10111101011010011000010101001111";
        ram[86] = "0b00111101011001100000110111100110";
        ram[87] = "0b10111101011110101000111111001110";
        ram[88] = "0b00111100101000010100110000010110";
        ram[89] = "0b10111101100001101100000010111100";
        ram[90] = "0b00111100101111011000101110110001";
        ram[91] = "0b00111101111110101010000111010111";
        ram[92] = "0b00111100100010111001110100100010";
        ram[93] = "0b00111110001110011000101011101100";
        ram[94] = "0b00111110000110010000100111110010";
        ram[95] = "0b10111100101011100000010001010101";
        ram[96] = "0b00111100110111000100000110110101";
        ram[97] = "0b10111101000000010000110000011111";
        ram[98] = "0b10111101111011100011000001000100";
        ram[99] = "0b10111110000110110011000100111100";
        ram[100] = "0b00111101110100111111110110010011";
        ram[101] = "0b10111100110010100011101111111001";
        ram[102] = "0b10111100110000100100010010110100";
        ram[103] = "0b10111101100011111111000000010000";
        ram[104] = "0b10111101111011101100100101011100";
        ram[105] = "0b00111101101001110000111110100100";
        ram[106] = "0b00111101001010000010010001000001";
        ram[107] = "0b10111100111001111010100010111011";
        ram[108] = "0b00111110010001100010101111110001";
        ram[109] = "0b00111011010010110101001011001111";
        ram[110] = "0b10111011111010101110001010001100";
        ram[111] = "0b10111101101100110010100000100011";
        ram[112] = "0b00111011001101010101101001101010";
        ram[113] = "0b10111101000101010001010011101010";
        ram[114] = "0b10111100001111011010001000100010";
        ram[115] = "0b00111110011010101100101010111100";
        ram[116] = "0b10111100111101011111110011011100";
        ram[117] = "0b10111110000101100011110001110101";
        ram[118] = "0b10111101111010111011001111001000";
        ram[119] = "0b00111011000101110111110101100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_5) {
meminst = new inference_conv2d_f3_3_0_5_ram("inference_conv2d_f3_3_0_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_5() {
    delete meminst;
}


};//endmodule
#endif
