// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_15_H__
#define __inference_conv2d_f3_1_2_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_15_ram) {
        ram[0] = "0b10111010001101011001101000100011";
        ram[1] = "0b10111100011101100000101001001000";
        ram[2] = "0b00111110000100010001010011010011";
        ram[3] = "0b00111101010100100010110000000010";
        ram[4] = "0b10111101110011111101010010111111";
        ram[5] = "0b00111101101000001111100000100101";
        ram[6] = "0b10111101001101010001111100110001";
        ram[7] = "0b10111101010110111100001000110011";
        ram[8] = "0b00111100101000001010101001100101";
        ram[9] = "0b00111101101001001001111011110011";
        ram[10] = "0b00111101100101100110111000110110";
        ram[11] = "0b00111110001000101000010100100011";
        ram[12] = "0b00111110000101011110010000011101";
        ram[13] = "0b00111101111110101010010110000011";
        ram[14] = "0b10111110000110011010010001011001";
        ram[15] = "0b00111101000011001110100010110001";
        ram[16] = "0b00111100100011000000111000101011";
        ram[17] = "0b10111101011100010110110010100100";
        ram[18] = "0b10111100100001000010001101111011";
        ram[19] = "0b10111101110110011001111011011000";
        ram[20] = "0b10111110000111110111011000011101";
        ram[21] = "0b00111100111111101010111101101000";
        ram[22] = "0b00111011100001011000001000001011";
        ram[23] = "0b10111110000000101001110010111011";
        ram[24] = "0b10111100101010001010100100110111";
        ram[25] = "0b10111110000011011011101101011010";
        ram[26] = "0b00111101100011100000111101110010";
        ram[27] = "0b10111011111101101000110010111010";
        ram[28] = "0b10111110000001101010011100100110";
        ram[29] = "0b00111101101011110101101000101011";
        ram[30] = "0b10111101010111000001010101110101";
        ram[31] = "0b10111110000100010101111000111001";
        ram[32] = "0b00111110000100011100100000100001";
        ram[33] = "0b00111101000011001010001101111100";
        ram[34] = "0b10111101111000101111101011010111";
        ram[35] = "0b10111100110111111101000010000000";
        ram[36] = "0b00111100011000011001000111101011";
        ram[37] = "0b10111101000001100110010010011110";
        ram[38] = "0b10111100010001101010001000010000";
        ram[39] = "0b00111101011011000101011001010000";
        ram[40] = "0b00111110010000000111111111101101";
        ram[41] = "0b10111110001000010011111000111110";
        ram[42] = "0b10111110000010100001000110101001";
        ram[43] = "0b10111101100111011011101100100100";
        ram[44] = "0b10111100110000011010100001000001";
        ram[45] = "0b00111110000001111001100011011001";
        ram[46] = "0b10111101111111111011100000101100";
        ram[47] = "0b00111110001000101000111001010000";
        ram[48] = "0b10111110001110001101100001100110";
        ram[49] = "0b00111110000000111111101000101011";
        ram[50] = "0b10111101001100110100111110011110";
        ram[51] = "0b00111110000111010000110010000000";
        ram[52] = "0b10111100101100000011010000010000";
        ram[53] = "0b00111101100011010001011110101011";
        ram[54] = "0b10111101100000100100111011101101";
        ram[55] = "0b00111101010101110110100111111010";
        ram[56] = "0b00111101010000110100010001011000";
        ram[57] = "0b00111100101100000000111111001000";
        ram[58] = "0b10111110001000100111111011011000";
        ram[59] = "0b10111101001000100011001101001100";
        ram[60] = "0b00111101010000101100100001001100";
        ram[61] = "0b00111100000111011001001100001110";
        ram[62] = "0b10111110001001010110011101010101";
        ram[63] = "0b10111110000101100011010100011110";
        ram[64] = "0b10111101001010110100001110010110";
        ram[65] = "0b00111011110010010101110011000000";
        ram[66] = "0b10111110001011011111111001110110";
        ram[67] = "0b10111100000001110101100111010001";
        ram[68] = "0b00111101100111011000100000111100";
        ram[69] = "0b00111101001011110101101001000110";
        ram[70] = "0b10111100010100000000101000000100";
        ram[71] = "0b00111010010001100000100101110101";
        ram[72] = "0b00111110000000100000011111010101";
        ram[73] = "0b00111101010100100000110111101010";
        ram[74] = "0b00111101100000100011001111101101";
        ram[75] = "0b10111011100011010010101011100001";
        ram[76] = "0b00111101000010110010001110011010";
        ram[77] = "0b00111110000100111011011110010101";
        ram[78] = "0b10111110010000110110011111100100";
        ram[79] = "0b10111101101000011110010010110100";
        ram[80] = "0b00111101111001110110010100110100";
        ram[81] = "0b10111101000000101110100110100100";
        ram[82] = "0b00111011100001001110100000000111";
        ram[83] = "0b00111101100111001000111001110110";
        ram[84] = "0b10111101001000011110001101001010";
        ram[85] = "0b10111100011101111111001011101011";
        ram[86] = "0b10111101011010001100100110011101";
        ram[87] = "0b00111100001000100101111100000101";
        ram[88] = "0b10111101100110111111111111001110";
        ram[89] = "0b00111011110100000111100001010011";
        ram[90] = "0b00111100100111110101110001010001";
        ram[91] = "0b10111101111010000010001011111111";
        ram[92] = "0b10111100111000111011000000001000";
        ram[93] = "0b10111101111111010001101010101000";
        ram[94] = "0b00111110001011110000010100100001";
        ram[95] = "0b00111100100010110110000011110010";
        ram[96] = "0b10111100001110001001100110100101";
        ram[97] = "0b00111011111110100111100000010110";
        ram[98] = "0b00111101100011011110010111101100";
        ram[99] = "0b10111101001000010001010111011111";
        ram[100] = "0b10111101010000110011111110100000";
        ram[101] = "0b10111100010010111100010000100100";
        ram[102] = "0b10111101110000011011011101000000";
        ram[103] = "0b00111101101011000100011100101001";
        ram[104] = "0b10111101000101011100111100100101";
        ram[105] = "0b00111011000000010100010110010000";
        ram[106] = "0b10111110000011011111000101011010";
        ram[107] = "0b10111100001101111001101000110110";
        ram[108] = "0b10111100010100111011110001000000";
        ram[109] = "0b00111110001111100101000110001111";
        ram[110] = "0b10111011010111100001101001010010";
        ram[111] = "0b00111100101110110011010100101011";
        ram[112] = "0b00111011110010000011011010100110";
        ram[113] = "0b00111110010000001100101001100000";
        ram[114] = "0b10111100111010010010010101011110";
        ram[115] = "0b10111100110001111000011110110100";
        ram[116] = "0b10111101000101000110011101111011";
        ram[117] = "0b10111101001101000100000111010110";
        ram[118] = "0b00111100010100101001111100001001";
        ram[119] = "0b10111100010010100111001001111111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_15) {
meminst = new inference_conv2d_f3_1_2_15_ram("inference_conv2d_f3_1_2_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_15() {
    delete meminst;
}


};//endmodule
#endif
