// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_43_H__
#define __inference_mult_1_120_120_84_s_W4_43_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_43_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_43_ram) {
        ram[0] = "0b00111101100111001011111111100111";
        ram[1] = "0b00111101111010101001101011000011";
        ram[2] = "0b10111100100110011000101001001010";
        ram[3] = "0b00111100000111010010110011101100";
        ram[4] = "0b00111110010101110001000000000010";
        ram[5] = "0b00111100111011011010111011000101";
        ram[6] = "0b10111100001100101100111011110101";
        ram[7] = "0b10111101111001101001001101111101";
        ram[8] = "0b10111110000111101010011111001110";
        ram[9] = "0b00111101101011010001100010011101";
        ram[10] = "0b10111101110000001010011001000000";
        ram[11] = "0b00111110000100110100000111100001";
        ram[12] = "0b10111101100011000011111010000010";
        ram[13] = "0b10111011110000001011010011010001";
        ram[14] = "0b10111110000100111111111111101111";
        ram[15] = "0b00111100010001010001010000000110";
        ram[16] = "0b00111110001100101101010011010100";
        ram[17] = "0b00111101110010111111100010011111";
        ram[18] = "0b00111101010110011101001000000011";
        ram[19] = "0b10111101101011000000011110011110";
        ram[20] = "0b10111101101100000000101100011101";
        ram[21] = "0b10111101010111110101011110110100";
        ram[22] = "0b00111110011001011000010101111011";
        ram[23] = "0b00111110001110001110101101000110";
        ram[24] = "0b10111011110111101011000001100101";
        ram[25] = "0b10111101101000000011111000000110";
        ram[26] = "0b00111110000010010011010001101010";
        ram[27] = "0b10111100110110111001000100100000";
        ram[28] = "0b00111101100100110101010100011111";
        ram[29] = "0b00111100110100101011001110010111";
        ram[30] = "0b00111011111000001101001111000000";
        ram[31] = "0b10111101011010001111001101110100";
        ram[32] = "0b10111101011001010011001000011110";
        ram[33] = "0b00111110001001001100111110001101";
        ram[34] = "0b00111100111000110001101001001100";
        ram[35] = "0b10111110001111010111101100100000";
        ram[36] = "0b00111101001010010101001001110100";
        ram[37] = "0b10111110001000110110101010000011";
        ram[38] = "0b10111100100000110111111000111010";
        ram[39] = "0b00111100000111010000000000000001";
        ram[40] = "0b00111101000001011011111000011011";
        ram[41] = "0b10111101001111001111001001111111";
        ram[42] = "0b10111101110111001110001100010101";
        ram[43] = "0b10111101100001110000101010110110";
        ram[44] = "0b00111101101001010110111100100101";
        ram[45] = "0b10111101101000100000000000010010";
        ram[46] = "0b10111101100010000100101101010000";
        ram[47] = "0b10111100100000010011010000010010";
        ram[48] = "0b00111101101000110101111110000001";
        ram[49] = "0b00111101100110001100010101111001";
        ram[50] = "0b10111101110111010000111010011001";
        ram[51] = "0b00111110000000000111111110101010";
        ram[52] = "0b00111101100001100000100001001010";
        ram[53] = "0b00111101001111110101111011010101";
        ram[54] = "0b00111110000111111011111011111101";
        ram[55] = "0b00111100101101001011011101100010";
        ram[56] = "0b00111110001101010101111101111000";
        ram[57] = "0b10111100101010111111111110011000";
        ram[58] = "0b10111110010001010000101100001111";
        ram[59] = "0b00111100100011111101110000010110";
        ram[60] = "0b00111101111111100011010000110011";
        ram[61] = "0b10111100000111111011001111001111";
        ram[62] = "0b10111101101011011111010111001111";
        ram[63] = "0b10111100001010000110111110001011";
        ram[64] = "0b00111101110010111100000010101110";
        ram[65] = "0b00111110000001110001111111111111";
        ram[66] = "0b00111101101011101000000100001111";
        ram[67] = "0b10111101101111010110000000010011";
        ram[68] = "0b10111110000010001101000001000110";
        ram[69] = "0b10111101101101000110001110011010";
        ram[70] = "0b00111101110001011111001111100101";
        ram[71] = "0b10111101010001000110100001000101";
        ram[72] = "0b10111100011010110000001111101111";
        ram[73] = "0b00111110001011101101111010011000";
        ram[74] = "0b10111110000110001110101000111010";
        ram[75] = "0b00111101100000100101100111100010";
        ram[76] = "0b10111100000011110100011011010000";
        ram[77] = "0b10111101111001011001011111010101";
        ram[78] = "0b00111101010011100011001001011101";
        ram[79] = "0b10111110001100111001101110001001";
        ram[80] = "0b10111110000011011111101101010000";
        ram[81] = "0b00111101011100111110111000101001";
        ram[82] = "0b10111110000101111011100111100000";
        ram[83] = "0b10111100100101010110000001001111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_43) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_43_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_43) {
meminst = new inference_mult_1_120_120_84_s_W4_43_ram("inference_mult_1_120_120_84_s_W4_43_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_43() {
    delete meminst;
}


};//endmodule
#endif
