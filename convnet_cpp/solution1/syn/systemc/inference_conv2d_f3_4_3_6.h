// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_6_H__
#define __inference_conv2d_f3_4_3_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_6_ram) {
        ram[0] = "0b10111101111101100010001100000111";
        ram[1] = "0b10111100100000011000000011010100";
        ram[2] = "0b10111101100111001001000010001111";
        ram[3] = "0b00111110000101010011100100110010";
        ram[4] = "0b00111110000101000111010111100110";
        ram[5] = "0b10111101010011001011111010001010";
        ram[6] = "0b00111101101011001100000101010001";
        ram[7] = "0b10111110010111000110010010111011";
        ram[8] = "0b00111101001010111011111100011011";
        ram[9] = "0b00111100100000101001011001001000";
        ram[10] = "0b00111101110011110100011000100100";
        ram[11] = "0b10111101100110011101000111110110";
        ram[12] = "0b00111101010011110111101010101100";
        ram[13] = "0b00111101100001110110101001001010";
        ram[14] = "0b00111101110101010110010000110000";
        ram[15] = "0b10111101100110101011110101010000";
        ram[16] = "0b10111100111111011100110111110111";
        ram[17] = "0b00111011011011100111010011101000";
        ram[18] = "0b00111110001111111001000010010111";
        ram[19] = "0b00111110000101111111000101110011";
        ram[20] = "0b00111110010001010111011011001101";
        ram[21] = "0b00111110000010110011111100100001";
        ram[22] = "0b10111101011110001101001000101001";
        ram[23] = "0b00111101111100111101100101100110";
        ram[24] = "0b00111101111001010100100110110110";
        ram[25] = "0b10111101100000010101001010100011";
        ram[26] = "0b10111101101110111011011011111011";
        ram[27] = "0b00111011111010011011111110001100";
        ram[28] = "0b00111101100111001001000100100011";
        ram[29] = "0b00111101000110011000001011110011";
        ram[30] = "0b10111101111011110110010100010011";
        ram[31] = "0b00111101100000110000000101001010";
        ram[32] = "0b00111011110010101000110000000000";
        ram[33] = "0b00111110001000000101100010011011";
        ram[34] = "0b10111110000101000100110010111110";
        ram[35] = "0b00111100000011111001010011011110";
        ram[36] = "0b00111101001010101100000010000011";
        ram[37] = "0b00111101110011110111101000001011";
        ram[38] = "0b10111110001100010111010111010001";
        ram[39] = "0b10111101111101001011011010100110";
        ram[40] = "0b00111101000000011010011001000011";
        ram[41] = "0b00111101111100001111000111110101";
        ram[42] = "0b00111100111110011011001100010101";
        ram[43] = "0b00111101010010101010001101011101";
        ram[44] = "0b00111101100101011000111100100001";
        ram[45] = "0b10111101000001110000000101000110";
        ram[46] = "0b10111100111101110001110000101100";
        ram[47] = "0b10111110001010010011010100110011";
        ram[48] = "0b00111110010011001111001110011001";
        ram[49] = "0b10111101111110010001101111000101";
        ram[50] = "0b00111101100101101100010011100000";
        ram[51] = "0b00111100010001011011011100101111";
        ram[52] = "0b00111110000001100000011011111011";
        ram[53] = "0b00111101111101001111010110010000";
        ram[54] = "0b00111110000011010111101001010111";
        ram[55] = "0b10111010111011010010111001101100";
        ram[56] = "0b10111101110111011011011111110001";
        ram[57] = "0b10111011110111010011111011001010";
        ram[58] = "0b10111101101101001010101101100000";
        ram[59] = "0b00111110000011110110000110101010";
        ram[60] = "0b10111100110100010010001000110010";
        ram[61] = "0b10111101010100011001110110110111";
        ram[62] = "0b10111110000001111001001000001000";
        ram[63] = "0b00111101000101010111010101100011";
        ram[64] = "0b10111110001001010110001100100100";
        ram[65] = "0b00111101110000000101101000000101";
        ram[66] = "0b10111101010101010111110011010100";
        ram[67] = "0b00111110001100010111011000010100";
        ram[68] = "0b00111100000111100000001001101010";
        ram[69] = "0b00111101101101101001000101001001";
        ram[70] = "0b00111101101100110011111010000110";
        ram[71] = "0b00111100101110000011100100101100";
        ram[72] = "0b00111101000101001100011110111110";
        ram[73] = "0b00111101110011110110101001010001";
        ram[74] = "0b00111110001001000101010010011011";
        ram[75] = "0b00111101111000110010001010101111";
        ram[76] = "0b10111101110000101100101010110110";
        ram[77] = "0b10111100010001001111111111100100";
        ram[78] = "0b00111101011100100101000010011010";
        ram[79] = "0b10111110001000110111100100110001";
        ram[80] = "0b00111110000001000110101000011010";
        ram[81] = "0b10111101110101111000010111111001";
        ram[82] = "0b10111101001001111100000110110000";
        ram[83] = "0b00111101010001011110111110011001";
        ram[84] = "0b00111100010110100110011000010011";
        ram[85] = "0b10111110010011000101111000101101";
        ram[86] = "0b10111100000011011011001011110001";
        ram[87] = "0b00111101100100111010111001001110";
        ram[88] = "0b10111101101101011011100111101001";
        ram[89] = "0b10111011000011010111100110100110";
        ram[90] = "0b00111101100110110011110000111110";
        ram[91] = "0b00111101010011100111000111101000";
        ram[92] = "0b00111100011100111011100100110101";
        ram[93] = "0b00111011100111000111010000111111";
        ram[94] = "0b10111101111100101010001001111111";
        ram[95] = "0b10111101110110010110011101000101";
        ram[96] = "0b00111100100111010110001101010011";
        ram[97] = "0b00111011110001101000001001000101";
        ram[98] = "0b00111001111100110011100100110111";
        ram[99] = "0b10111101111001000101100110010110";
        ram[100] = "0b00111101000110000011011110011010";
        ram[101] = "0b10111101101100101010001000101111";
        ram[102] = "0b10111100111000100011110010100001";
        ram[103] = "0b00111011101010010110101110011111";
        ram[104] = "0b00111110001100001001110100000110";
        ram[105] = "0b10111011011000111111111101000011";
        ram[106] = "0b00111110010001011111110011000010";
        ram[107] = "0b10111110000101010010001100101101";
        ram[108] = "0b10111110000011001110100110100011";
        ram[109] = "0b00111101100010011110110100000100";
        ram[110] = "0b00111100101011101110001010100001";
        ram[111] = "0b00111100111111111000101111010001";
        ram[112] = "0b10111101110010010001100111110000";
        ram[113] = "0b10111110000011000100100001101011";
        ram[114] = "0b10111101000111001011110100100000";
        ram[115] = "0b10111100101100000010001110110100";
        ram[116] = "0b10111101000011011011100001101010";
        ram[117] = "0b00111101110111101110110011000000";
        ram[118] = "0b00111110001001000010101001100111";
        ram[119] = "0b10111101101010000110100011000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_6) {
meminst = new inference_conv2d_f3_4_3_6_ram("inference_conv2d_f3_4_3_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_6() {
    delete meminst;
}


};//endmodule
#endif
