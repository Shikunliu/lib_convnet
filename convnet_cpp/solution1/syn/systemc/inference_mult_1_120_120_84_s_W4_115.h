// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_115_H__
#define __inference_mult_1_120_120_84_s_W4_115_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_115_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_115_ram) {
        ram[0] = "0b00111100110011110110000011000110";
        ram[1] = "0b00111101111011011100011001011100";
        ram[2] = "0b10111001010001000101000110001111";
        ram[3] = "0b00111110000101010100010011111110";
        ram[4] = "0b10111110001101011110001001001000";
        ram[5] = "0b10111101010111111101111011000011";
        ram[6] = "0b00111101100011010011001110011101";
        ram[7] = "0b00111101101111101110100010000001";
        ram[8] = "0b00111101001001011110010100000001";
        ram[9] = "0b00111101010101000011111010110001";
        ram[10] = "0b10111101100110111110100010111100";
        ram[11] = "0b00111100101101100011000010101001";
        ram[12] = "0b00111100111110011101101110001110";
        ram[13] = "0b00111101000110110001110110101110";
        ram[14] = "0b00111101100001111011011001000010";
        ram[15] = "0b10111100011101000000001010011100";
        ram[16] = "0b00111101000100000010010010001011";
        ram[17] = "0b10111110001011111010110011100110";
        ram[18] = "0b10111011110110101010010101010011";
        ram[19] = "0b10111110001101101000011010100101";
        ram[20] = "0b00111110001100100111011011111011";
        ram[21] = "0b10111101101100111101110100111010";
        ram[22] = "0b00111100100001111100000101100000";
        ram[23] = "0b00111101101010011000101110100111";
        ram[24] = "0b00111100011111001111101011111101";
        ram[25] = "0b00111101111101110000111011110101";
        ram[26] = "0b10111100111101101010010001101100";
        ram[27] = "0b10111101011001101011001000011011";
        ram[28] = "0b10111100011001101110000000001001";
        ram[29] = "0b10111101001001100010100110110000";
        ram[30] = "0b00111110000001110110001001010010";
        ram[31] = "0b00111110011010101110110110011010";
        ram[32] = "0b00111100111010011001101100000100";
        ram[33] = "0b10111101110100101001111011010100";
        ram[34] = "0b10111101110101101000000001011010";
        ram[35] = "0b00111110000111000110100011101100";
        ram[36] = "0b00111010110101110100100101111101";
        ram[37] = "0b00111101000100001001111000101101";
        ram[38] = "0b10111101110010000101110111100000";
        ram[39] = "0b10111011110000100110011000000001";
        ram[40] = "0b00111110001000111001001000011001";
        ram[41] = "0b10111110001011000100101011000111";
        ram[42] = "0b10111101110100110011000100011010";
        ram[43] = "0b10111110000000001111001110001000";
        ram[44] = "0b10111101110011000100001111110110";
        ram[45] = "0b00111101011011000111010100100100";
        ram[46] = "0b10111110001000000000010001110101";
        ram[47] = "0b10111110010101111001000110000010";
        ram[48] = "0b00111101110001001101010010100011";
        ram[49] = "0b10111100111011111011000010010010";
        ram[50] = "0b10111110011001000111100001000010";
        ram[51] = "0b00111110011000111001011110011010";
        ram[52] = "0b10111101000011010110100010111001";
        ram[53] = "0b00111101110100110001100001110110";
        ram[54] = "0b00111101011000111000100111000011";
        ram[55] = "0b00111101000100011101011011111000";
        ram[56] = "0b00111101100000000110000010000101";
        ram[57] = "0b10111101101011010101001101111101";
        ram[58] = "0b10111110000001100011011110111101";
        ram[59] = "0b10111101100000110010010101011100";
        ram[60] = "0b00111110011100110001100010111001";
        ram[61] = "0b00111101001011010101100100011001";
        ram[62] = "0b00111100010111000011010110001011";
        ram[63] = "0b10111110100111100000100110011010";
        ram[64] = "0b00111110000011110100111100001110";
        ram[65] = "0b00111100001101111110010001110011";
        ram[66] = "0b10111110001000111011010001110000";
        ram[67] = "0b10111110000011110010010100011100";
        ram[68] = "0b10111110010000100010110001000101";
        ram[69] = "0b10111110000101001000010000001110";
        ram[70] = "0b10111101101001000101101100000001";
        ram[71] = "0b10111110000100011100101101000111";
        ram[72] = "0b00111010000101110110101010101111";
        ram[73] = "0b00111101110101110100101010111010";
        ram[74] = "0b00111101000011011101111111010111";
        ram[75] = "0b00111101111101010000100011110110";
        ram[76] = "0b10111101100011000011011000111001";
        ram[77] = "0b00111011100010111011000001111000";
        ram[78] = "0b10111101101101110101001101100001";
        ram[79] = "0b00111101001011100000111110101000";
        ram[80] = "0b10111010111111101010100111101010";
        ram[81] = "0b00111101100110100011111101010100";
        ram[82] = "0b10111101100101110110101000000111";
        ram[83] = "0b10111101101100000001010001110010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_115) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_115_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_115) {
meminst = new inference_mult_1_120_120_84_s_W4_115_ram("inference_mult_1_120_120_84_s_W4_115_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_115() {
    delete meminst;
}


};//endmodule
#endif
