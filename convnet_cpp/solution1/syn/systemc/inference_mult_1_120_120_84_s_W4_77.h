// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_77_H__
#define __inference_mult_1_120_120_84_s_W4_77_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_77_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_77_ram) {
        ram[0] = "0b00111101000011100101101001101100";
        ram[1] = "0b00111101100101100000101100111010";
        ram[2] = "0b10111101001001100100010111100101";
        ram[3] = "0b00111101000011010011000101011100";
        ram[4] = "0b10111101011111001010000111110111";
        ram[5] = "0b00111100101101000010101010101010";
        ram[6] = "0b10111100101001010110100110110001";
        ram[7] = "0b10111101000111010101101110010000";
        ram[8] = "0b00111101001111100011101101101111";
        ram[9] = "0b00111101010110101011110001011111";
        ram[10] = "0b10111101110001011011011011010001";
        ram[11] = "0b10111100100001101011011001101000";
        ram[12] = "0b00111011100001011001111001100101";
        ram[13] = "0b10111101110111010110000111110110";
        ram[14] = "0b10111101111110000111110111110110";
        ram[15] = "0b00111101101100000100100101011001";
        ram[16] = "0b10111100011110101110010010100011";
        ram[17] = "0b10111110010000101111111011000101";
        ram[18] = "0b10111101001111000001101100011110";
        ram[19] = "0b10111100111101100000010111100001";
        ram[20] = "0b10111110000110001000111110000110";
        ram[21] = "0b00111100110110001010101010111100";
        ram[22] = "0b10111100101010000111100000100100";
        ram[23] = "0b00111110000010110110101011101000";
        ram[24] = "0b00111110000110001011000010001110";
        ram[25] = "0b10111110001011010111010001001111";
        ram[26] = "0b00111110010000100100011111001011";
        ram[27] = "0b00111101101011000001110110110000";
        ram[28] = "0b10111101101010111000011001000110";
        ram[29] = "0b00111101010100100110001111001011";
        ram[30] = "0b00111100011001110000111100000011";
        ram[31] = "0b00111101100010011110011100111111";
        ram[32] = "0b10111101111000010101000110100100";
        ram[33] = "0b00111101101011000000001000000001";
        ram[34] = "0b10111101001010000011101001100001";
        ram[35] = "0b10111101101001101111011000000001";
        ram[36] = "0b10111101100000011110110101101000";
        ram[37] = "0b00111101110001001010000110100000";
        ram[38] = "0b10111110000101010010110111101101";
        ram[39] = "0b00111100101011110111100011001001";
        ram[40] = "0b10111110001000010000011001101000";
        ram[41] = "0b10111101000101110100001101111110";
        ram[42] = "0b00111101110100001110000000100010";
        ram[43] = "0b00111101100000111100110100000111";
        ram[44] = "0b00111101001101011001011000011010";
        ram[45] = "0b00111110010111001100001011010111";
        ram[46] = "0b00111010010100010100011001001000";
        ram[47] = "0b10111100001101011001001101100000";
        ram[48] = "0b00111101101111011011101011010100";
        ram[49] = "0b10111101101010011110101111011100";
        ram[50] = "0b10111101100010001111000010111010";
        ram[51] = "0b10111110000011000100011101011110";
        ram[52] = "0b10111110000000000101011011000101";
        ram[53] = "0b10111100101010000111000111011001";
        ram[54] = "0b00111101110110001110010100111111";
        ram[55] = "0b00111101111111000010110010100001";
        ram[56] = "0b10111110001100001100110111001000";
        ram[57] = "0b10111011111000010100111111100111";
        ram[58] = "0b10111101111011101110101011101010";
        ram[59] = "0b10111100101000110111111111001100";
        ram[60] = "0b10111100001110100101110111001010";
        ram[61] = "0b10111110001101110100001001010111";
        ram[62] = "0b00111101101100110010101101010110";
        ram[63] = "0b00111101010011001101001000100110";
        ram[64] = "0b00111101000100010111111110111010";
        ram[65] = "0b10111011110100000100100100000011";
        ram[66] = "0b00111110000001100011011010110001";
        ram[67] = "0b00111101000111101000000010111111";
        ram[68] = "0b10111101110100101111010101010110";
        ram[69] = "0b00111100110000100100111100110000";
        ram[70] = "0b10111101100010111101101010000111";
        ram[71] = "0b00111110001000001100011111000001";
        ram[72] = "0b00111101000000110000000100000111";
        ram[73] = "0b00111101100000011100010001001110";
        ram[74] = "0b00111101110100100000001010010111";
        ram[75] = "0b00111101100110011100010010010111";
        ram[76] = "0b10111101100000010010101100000000";
        ram[77] = "0b00111011011101010000100101010111";
        ram[78] = "0b10111100111100100111001110111011";
        ram[79] = "0b10111101010110000010000100101001";
        ram[80] = "0b10111100100010111010011111010100";
        ram[81] = "0b10111101110010111001101001001101";
        ram[82] = "0b10111101100111100100100010001011";
        ram[83] = "0b10111110010000000110010011101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_77) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_77_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_77) {
meminst = new inference_mult_1_120_120_84_s_W4_77_ram("inference_mult_1_120_120_84_s_W4_77_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_77() {
    delete meminst;
}


};//endmodule
#endif
