// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_2_H__
#define __inference_conv2d_f3_0_0_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_2_ram) {
        ram[0] = "0b00111101100110101001101000000111";
        ram[1] = "0b00111101011010010000111011101101";
        ram[2] = "0b10111100011101010000100110010111";
        ram[3] = "0b00111101101111110001110101011010";
        ram[4] = "0b10111101101101000110000011010011";
        ram[5] = "0b10111101001010000111000110100100";
        ram[6] = "0b00111100101100000100111111110100";
        ram[7] = "0b10111101100100101101001010100000";
        ram[8] = "0b10111011010001110100001001001001";
        ram[9] = "0b10111101001110111110111101001010";
        ram[10] = "0b10111110000010011011110101000000";
        ram[11] = "0b10111110001110000110101001001101";
        ram[12] = "0b10111110000011111100001011101100";
        ram[13] = "0b10111010111001111010001100010010";
        ram[14] = "0b00111101001011111100101001111000";
        ram[15] = "0b00111110000010000011011000100010";
        ram[16] = "0b00111110000001010010110110101010";
        ram[17] = "0b10111101111010101010011011010010";
        ram[18] = "0b00111101111000100111001000000000";
        ram[19] = "0b00111101011011010100000100110001";
        ram[20] = "0b10111101001000010011110011111100";
        ram[21] = "0b00110111010000110100111000100101";
        ram[22] = "0b00111100011010000001110111110111";
        ram[23] = "0b00111101111001001000111010001010";
        ram[24] = "0b00111101100000010101101011011110";
        ram[25] = "0b00111101101100010011011010111111";
        ram[26] = "0b10111110000001111000001011010100";
        ram[27] = "0b10111110000111111010010101001100";
        ram[28] = "0b00111110000110100001011101101110";
        ram[29] = "0b10111101110111001111110111010010";
        ram[30] = "0b00111110000011000010001111111011";
        ram[31] = "0b00111100100110011101000110011000";
        ram[32] = "0b00111101011001100111100110110010";
        ram[33] = "0b00111100100110111010110010011001";
        ram[34] = "0b10111101101010011110101000010100";
        ram[35] = "0b10111101111111110000110000110101";
        ram[36] = "0b00111101100111100101101011111111";
        ram[37] = "0b10111100101011100000100100101000";
        ram[38] = "0b00111101111111000111010001110101";
        ram[39] = "0b10111101110101011100100111100110";
        ram[40] = "0b10111100111010001111001101110100";
        ram[41] = "0b00111101101101000011101011011101";
        ram[42] = "0b10111101010000011011010100001100";
        ram[43] = "0b10111110000101000010101011101101";
        ram[44] = "0b00111110000011000111101000111010";
        ram[45] = "0b00111101010111100000001111000001";
        ram[46] = "0b00111110000110000111111100000010";
        ram[47] = "0b00111101110001100000011011111011";
        ram[48] = "0b10111101111010101010001000011010";
        ram[49] = "0b00111101111111001000000010000100";
        ram[50] = "0b10111101010100101111011010011000";
        ram[51] = "0b00111101101101000101000000110100";
        ram[52] = "0b10111100110101101100001011110000";
        ram[53] = "0b00111101100100011000010110100111";
        ram[54] = "0b00111100100111011011011000101001";
        ram[55] = "0b00111100100010010111010011110100";
        ram[56] = "0b10111101011111110001011101101101";
        ram[57] = "0b00111101111001101110110010011110";
        ram[58] = "0b10111101101111001011001010110001";
        ram[59] = "0b00111101010001111110001110001111";
        ram[60] = "0b10111010011110001011100100101001";
        ram[61] = "0b10111101110010011100101111000110";
        ram[62] = "0b10111110000001100010001101001011";
        ram[63] = "0b00111101101101100011101001101010";
        ram[64] = "0b10111110000001001010010001001100";
        ram[65] = "0b00111100111110100101010010010000";
        ram[66] = "0b00111101110100101000101101101110";
        ram[67] = "0b00111110000011110001010100011110";
        ram[68] = "0b00111110000110100000010000001000";
        ram[69] = "0b10111100010001001010111010000110";
        ram[70] = "0b00111100111000001000111111111000";
        ram[71] = "0b10111110001100000100011110010001";
        ram[72] = "0b00111101000111010010110000010000";
        ram[73] = "0b10111101000000100011001001011010";
        ram[74] = "0b10111101101010000001011101000001";
        ram[75] = "0b10111101101001011001111100010001";
        ram[76] = "0b10111101011000000000000111111110";
        ram[77] = "0b00111110001001010011011111100011";
        ram[78] = "0b10111100001111000000101101001001";
        ram[79] = "0b10111101100001101110111001001100";
        ram[80] = "0b00111101110000110011100111000001";
        ram[81] = "0b10111101111000001001010101101100";
        ram[82] = "0b00111100000011110111010000111100";
        ram[83] = "0b00111101101000001001110101001001";
        ram[84] = "0b10111100010011011110101101000101";
        ram[85] = "0b00111101101100011100000111100100";
        ram[86] = "0b10111110001001011011101100111000";
        ram[87] = "0b00111101010101101011111110110000";
        ram[88] = "0b00111101100100100000010010110000";
        ram[89] = "0b00111100011001000111001001110000";
        ram[90] = "0b10111101010110101011011100000110";
        ram[91] = "0b10111101110010100011011001001111";
        ram[92] = "0b00111101100110000110011110000101";
        ram[93] = "0b10111101001011000001000000001110";
        ram[94] = "0b00111101100010110101011101110100";
        ram[95] = "0b10111110001000110011110110110000";
        ram[96] = "0b00111101001100011100011000010110";
        ram[97] = "0b00111101111011100010111100111000";
        ram[98] = "0b00111101100001110001111111111111";
        ram[99] = "0b00111101100010000100101000001110";
        ram[100] = "0b00111101100010000101011101000101";
        ram[101] = "0b00111101010110110111011111110110";
        ram[102] = "0b00111101001000101000100010001011";
        ram[103] = "0b00111101111010100010100011111110";
        ram[104] = "0b10111101101110001001101010100100";
        ram[105] = "0b00111101110111100010110001010110";
        ram[106] = "0b10111101000111101000000010111111";
        ram[107] = "0b10111101100001000001011100110110";
        ram[108] = "0b00111101010110001110001001001111";
        ram[109] = "0b00111101100010011011000011101110";
        ram[110] = "0b00111110000100110110001101101111";
        ram[111] = "0b00111101000001100000111001101101";
        ram[112] = "0b00111101101011011100010110000110";
        ram[113] = "0b00111101001110111100000000110101";
        ram[114] = "0b00111100110110001001010111111001";
        ram[115] = "0b00111101110100011001010001111101";
        ram[116] = "0b00111001100110000000000011001110";
        ram[117] = "0b10111101111000011001100001101100";
        ram[118] = "0b00111101010110011000100010111000";
        ram[119] = "0b00111101110010001000011111101100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_2) {
meminst = new inference_conv2d_f3_0_0_2_ram("inference_conv2d_f3_0_0_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_2() {
    delete meminst;
}


};//endmodule
#endif
