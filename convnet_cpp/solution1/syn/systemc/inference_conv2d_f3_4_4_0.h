// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_0_H__
#define __inference_conv2d_f3_4_4_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_0_ram) {
        ram[0] = "0b10111101010100100010001010010010";
        ram[1] = "0b00111110000000001111111000000100";
        ram[2] = "0b00111100101000111010001101110011";
        ram[3] = "0b10111011100010111000110000100101";
        ram[4] = "0b10111110001011110010000011101010";
        ram[5] = "0b00111100100100011100010111111011";
        ram[6] = "0b00111101111011011001100000111001";
        ram[7] = "0b00111101000001011110000111011100";
        ram[8] = "0b00111100111001011110111111101001";
        ram[9] = "0b10111101001110111100111010010011";
        ram[10] = "0b00111101111100011100110000010000";
        ram[11] = "0b00111101111111010011001011000110";
        ram[12] = "0b10111101000001101101110000001101";
        ram[13] = "0b00111101100000001101110001001110";
        ram[14] = "0b00111101101111111111001100001101";
        ram[15] = "0b00111101000011101010000110111001";
        ram[16] = "0b10111110001000000101011111010001";
        ram[17] = "0b10111101011000101100000010100101";
        ram[18] = "0b10111100100000011001110011101110";
        ram[19] = "0b00111011111010111101000000110011";
        ram[20] = "0b00111110011101111011010011100101";
        ram[21] = "0b10111101010110100110010011101011";
        ram[22] = "0b00111101010100100000010110100001";
        ram[23] = "0b00111101100101111000101001111011";
        ram[24] = "0b10111100000100111000111011101001";
        ram[25] = "0b00111100100101010101111000000000";
        ram[26] = "0b10111100100000101000100001110000";
        ram[27] = "0b10111100000011110011100010001101";
        ram[28] = "0b00111100110000000111110000100111";
        ram[29] = "0b10111110000010001111110010010011";
        ram[30] = "0b10111100000011010101001101000101";
        ram[31] = "0b00111110001101100110100101001001";
        ram[32] = "0b00111101000001010011000111001110";
        ram[33] = "0b00111101100111100000110110000010";
        ram[34] = "0b10111101100000010000010011110000";
        ram[35] = "0b00111101000010001000001011110001";
        ram[36] = "0b00111101001010100000001001001101";
        ram[37] = "0b10111101000100011000110000110100";
        ram[38] = "0b10111101101010100100011111000101";
        ram[39] = "0b10111101110000000111001101001010";
        ram[40] = "0b00111101101010111000111001011001";
        ram[41] = "0b10111101010110111111110010011011";
        ram[42] = "0b00111101101000011011111100111000";
        ram[43] = "0b10111101101001010101111000101001";
        ram[44] = "0b00111101100011001111101111010100";
        ram[45] = "0b10111101100101110110000010001010";
        ram[46] = "0b10111100011110100000001011111011";
        ram[47] = "0b10111101100111100001110101111111";
        ram[48] = "0b00111101011101001100111100010101";
        ram[49] = "0b10111101011111111010011100110000";
        ram[50] = "0b10111101101000100100100000110111";
        ram[51] = "0b00111101100000010110010010000100";
        ram[52] = "0b00111100100110001000001011100011";
        ram[53] = "0b00111101010001000011001110000110";
        ram[54] = "0b10111101111010101011011010001101";
        ram[55] = "0b10111100110000000001010011000011";
        ram[56] = "0b10111101010111101001110000111000";
        ram[57] = "0b10111110000000010000111110010101";
        ram[58] = "0b00111101101011001111011011011001";
        ram[59] = "0b10111101100111100001100100100101";
        ram[60] = "0b10111011011011001100001010001100";
        ram[61] = "0b00111101111001001110111110001001";
        ram[62] = "0b10111100111111100001011010000110";
        ram[63] = "0b10111101101111111101111101110001";
        ram[64] = "0b10111110000110001000001011110001";
        ram[65] = "0b10111100110111111000000001100011";
        ram[66] = "0b00111100010111100100101010100100";
        ram[67] = "0b10111101101000111011001000100001";
        ram[68] = "0b00111110001100011110000100001001";
        ram[69] = "0b10111011111100100001010010000101";
        ram[70] = "0b10111110000001001001110110111111";
        ram[71] = "0b00111110000111010001101001100101";
        ram[72] = "0b00111101011110000111111000010001";
        ram[73] = "0b10111101001110110011000100101110";
        ram[74] = "0b00111101011110000110011001000011";
        ram[75] = "0b00111100011101101110100111010111";
        ram[76] = "0b10111110000111100100100011101001";
        ram[77] = "0b00111101111001110111000111001001";
        ram[78] = "0b10111101010000010110011101011001";
        ram[79] = "0b10111100001110011000110011101010";
        ram[80] = "0b00111101101111000001011010000001";
        ram[81] = "0b00111101001000110000111011000011";
        ram[82] = "0b10111110010000000100111101101110";
        ram[83] = "0b00111101000101000010101010001111";
        ram[84] = "0b10111101100001101101100111001100";
        ram[85] = "0b10111110001110011110110100111001";
        ram[86] = "0b10111110010110001001000000001100";
        ram[87] = "0b00111101001000111011101100100110";
        ram[88] = "0b10111101101001100101001011011000";
        ram[89] = "0b10111100001000101100011010101001";
        ram[90] = "0b10111101010100111001100000101110";
        ram[91] = "0b10111101111100110111011101011100";
        ram[92] = "0b10111110000001111101110010111110";
        ram[93] = "0b00111101000111100101101101010000";
        ram[94] = "0b00111101110001101111001011011011";
        ram[95] = "0b10111110001101001010000010100001";
        ram[96] = "0b00111101010010001011000101111111";
        ram[97] = "0b10111101110000100011100110100100";
        ram[98] = "0b00111110000100100101001100010001";
        ram[99] = "0b00111101110000101101010000110011";
        ram[100] = "0b00111110000000010001110101111010";
        ram[101] = "0b10111100101000101111010110011001";
        ram[102] = "0b00111101111101011111011110000011";
        ram[103] = "0b00111100111000111000001100100111";
        ram[104] = "0b10111110000011000001100001110010";
        ram[105] = "0b10111101010110100101010110011100";
        ram[106] = "0b10111101000000010101101010101001";
        ram[107] = "0b10111100111011011110001100110010";
        ram[108] = "0b10111011101010110100011001010101";
        ram[109] = "0b10111101011011110001011010111111";
        ram[110] = "0b10111101111011111100001101110010";
        ram[111] = "0b00111101011000101101010011000111";
        ram[112] = "0b10111110100000100011010000100010";
        ram[113] = "0b00111100110001111001000001001101";
        ram[114] = "0b00111101101001111101100010110100";
        ram[115] = "0b00111101101010000110001110111111";
        ram[116] = "0b10111101011011110101000111111101";
        ram[117] = "0b00111100111110001001001100100100";
        ram[118] = "0b00111101001101001000011111100010";
        ram[119] = "0b10111101110001100100011101001111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_0) {
meminst = new inference_conv2d_f3_4_4_0_ram("inference_conv2d_f3_4_4_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_0() {
    delete meminst;
}


};//endmodule
#endif
