// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_14_H__
#define __inference_conv2d_f3_4_1_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_14_ram) {
        ram[0] = "0b00111110001111000110110100011110";
        ram[1] = "0b10111100111111011111010011111000";
        ram[2] = "0b00111100010001001000101110110110";
        ram[3] = "0b00111100010010110111000001000001";
        ram[4] = "0b10111101100000111001101100101011";
        ram[5] = "0b00111110000110011110011011101111";
        ram[6] = "0b10111101001110100110111100010111";
        ram[7] = "0b00111110001010110011001100010010";
        ram[8] = "0b00111101110000100011001100001000";
        ram[9] = "0b10111101000010110000101000111010";
        ram[10] = "0b10111101011101010100001100101000";
        ram[11] = "0b10111101001010011010010100010101";
        ram[12] = "0b00111101100010100100000111100101";
        ram[13] = "0b00111011000000010011110001010110";
        ram[14] = "0b10111101011100100011110011111111";
        ram[15] = "0b10111100101010010010010110010011";
        ram[16] = "0b00111101100011001101010100110000";
        ram[17] = "0b10111101001000011011011000011000";
        ram[18] = "0b10111100000110001000101100011100";
        ram[19] = "0b00111101000111101101011001001111";
        ram[20] = "0b10111100111010010101111111100000";
        ram[21] = "0b10111011111011000000110110110000";
        ram[22] = "0b10111100101100011000101000011011";
        ram[23] = "0b00111101111101011100010000100010";
        ram[24] = "0b10111100111001111000011001010111";
        ram[25] = "0b10111100111001001101010001100000";
        ram[26] = "0b00111101111110011011000000100101";
        ram[27] = "0b00111100111011111110101110000000";
        ram[28] = "0b00111100100000010011110010101100";
        ram[29] = "0b10111110001011100100101000111000";
        ram[30] = "0b10111101000010010100000001101011";
        ram[31] = "0b10111100111101100001011110110100";
        ram[32] = "0b10111100101110010100001000001011";
        ram[33] = "0b10111101111110010011111101101100";
        ram[34] = "0b10111101110101011011001111100001";
        ram[35] = "0b00111100010100000010010101000111";
        ram[36] = "0b00111101110101011101001001001010";
        ram[37] = "0b00111101011101010110010001100110";
        ram[38] = "0b00111110001000110000110011101101";
        ram[39] = "0b00111100111001100110111101101011";
        ram[40] = "0b00111101000110101110110110100111";
        ram[41] = "0b00111101010010100001010110110011";
        ram[42] = "0b00111101000001000111011100101000";
        ram[43] = "0b00111101000100110100110101101010";
        ram[44] = "0b10111011100110101110101111111111";
        ram[45] = "0b10111101101101100011000101001010";
        ram[46] = "0b00111101110001111000101100101010";
        ram[47] = "0b00111110000111001011000111001101";
        ram[48] = "0b00111010010010101111010100010111";
        ram[49] = "0b00111110000000001001001101010011";
        ram[50] = "0b10111110000010101010100001100101";
        ram[51] = "0b00111101001000101001001010011100";
        ram[52] = "0b00111101100110111010100111000101";
        ram[53] = "0b00111100011000010110011001001100";
        ram[54] = "0b10111101111001001000011000100111";
        ram[55] = "0b00111101011101010111010011000001";
        ram[56] = "0b10111100111110000001111101100001";
        ram[57] = "0b00111110010000010111011111101010";
        ram[58] = "0b00111101111101100001011101111111";
        ram[59] = "0b00111101110111011110111001111000";
        ram[60] = "0b00111100110100110110100011111110";
        ram[61] = "0b10111101000000101111001000111110";
        ram[62] = "0b00111101111011010001101101110001";
        ram[63] = "0b00111100100100101010101011111101";
        ram[64] = "0b00111101101010111001110110001101";
        ram[65] = "0b10111100010001011110001100111001";
        ram[66] = "0b10111101000010000000011000001110";
        ram[67] = "0b00111101010000011011110111000000";
        ram[68] = "0b10111101001010110100000100101100";
        ram[69] = "0b00111011101100111001110111100111";
        ram[70] = "0b10111100100111001010100100011001";
        ram[71] = "0b10111101110101100111101010010110";
        ram[72] = "0b10111101100100110011000101101011";
        ram[73] = "0b00111101010010010000110110010000";
        ram[74] = "0b00111101101010110000111011100101";
        ram[75] = "0b00111101001000110010000111110011";
        ram[76] = "0b10111100100100010001001001110111";
        ram[77] = "0b00111011100000010100101000000010";
        ram[78] = "0b10111110001001011010111101101100";
        ram[79] = "0b10111101100010001110110011001011";
        ram[80] = "0b00111101111000100110100000001010";
        ram[81] = "0b00111101100001111110101010110000";
        ram[82] = "0b10111101001000111100000110100110";
        ram[83] = "0b10111100000111101001111000110001";
        ram[84] = "0b00111110000101101101111011111100";
        ram[85] = "0b00111101010010001011001110011000";
        ram[86] = "0b10111011000001110101000001101100";
        ram[87] = "0b10111110000101111111001111001111";
        ram[88] = "0b00111110001010101010011011010010";
        ram[89] = "0b10111100110000100010111110000101";
        ram[90] = "0b10111101011000101110010000110001";
        ram[91] = "0b00111110010000100010010011101110";
        ram[92] = "0b00111110000001101101100101111011";
        ram[93] = "0b00111101000111001110010010001101";
        ram[94] = "0b10111110000001110011010001110010";
        ram[95] = "0b10111101111010001111100011101000";
        ram[96] = "0b10111110001010100011111011000000";
        ram[97] = "0b00111100110101010100001010000111";
        ram[98] = "0b10111101010110010101001011101101";
        ram[99] = "0b00111110001100100011011100000100";
        ram[100] = "0b00111101101101111000010111111001";
        ram[101] = "0b00111101100111101110110010010111";
        ram[102] = "0b10111101110111101010011100000101";
        ram[103] = "0b00111101110011110111110100110001";
        ram[104] = "0b00111101101100000000001001011100";
        ram[105] = "0b00111100110000110000010001100010";
        ram[106] = "0b10111100101001011011001101001110";
        ram[107] = "0b10111100100100111111110101000011";
        ram[108] = "0b10111100010010011000000101010011";
        ram[109] = "0b00111101100000100001111001111011";
        ram[110] = "0b10111100110101101010101100111101";
        ram[111] = "0b00111101101000100101011110000110";
        ram[112] = "0b10111011101110101100100100111111";
        ram[113] = "0b10111101000000011001110011010011";
        ram[114] = "0b10111101111000011011100001100111";
        ram[115] = "0b00111101110111000101010100000000";
        ram[116] = "0b00111110000001000110111001001100";
        ram[117] = "0b10111100011010100100101011110111";
        ram[118] = "0b10111101101010011011011101101111";
        ram[119] = "0b10111110001100010101110100101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_14) {
meminst = new inference_conv2d_f3_4_1_14_ram("inference_conv2d_f3_4_1_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_14() {
    delete meminst;
}


};//endmodule
#endif
