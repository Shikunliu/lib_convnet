// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_47_H__
#define __inference_mult_1_120_120_84_s_W4_47_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_47_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_47_ram) {
        ram[0] = "0b00111101101111001011100001011010";
        ram[1] = "0b00111110000011010110111100010001";
        ram[2] = "0b00111101011001000100010111111011";
        ram[3] = "0b00111110011110010111100001001111";
        ram[4] = "0b00111101001001010001110100100110";
        ram[5] = "0b10111100101101110001110000101100";
        ram[6] = "0b00111101110010100011110101100011";
        ram[7] = "0b10111101111101001000001111001011";
        ram[8] = "0b00111101111110011010111000001100";
        ram[9] = "0b10111100110001110001000011001011";
        ram[10] = "0b10111101110011011010000110101001";
        ram[11] = "0b10111100001011101100110111011110";
        ram[12] = "0b00111100101010000001001101111010";
        ram[13] = "0b10111101110101111111010000010011";
        ram[14] = "0b10111100001010111001110011010001";
        ram[15] = "0b10111101100101100110100010001101";
        ram[16] = "0b00111101001011101001000111100100";
        ram[17] = "0b00111101101010001001000111111101";
        ram[18] = "0b00111110001010001001101111011000";
        ram[19] = "0b00111101100010100000001011101110";
        ram[20] = "0b10111101101111011100111000101100";
        ram[21] = "0b00111101011101110111111011110010";
        ram[22] = "0b10111101000110011010101001100001";
        ram[23] = "0b00111101111111010111100100000111";
        ram[24] = "0b10111101100111011101110010100101";
        ram[25] = "0b10111101100101110111010110101011";
        ram[26] = "0b10111110001000101101110000101011";
        ram[27] = "0b00111110000101000100110000111000";
        ram[28] = "0b10111110011100101101000101101100";
        ram[29] = "0b00111101101000010001100111011011";
        ram[30] = "0b10111101010011011111011001111110";
        ram[31] = "0b10111101010111110010000111101001";
        ram[32] = "0b10111101100111110011001000011101";
        ram[33] = "0b00111101111111110010111011001111";
        ram[34] = "0b00111101010001101101100000010001";
        ram[35] = "0b10111101111001001111110000011110";
        ram[36] = "0b00111101001110100011001010010110";
        ram[37] = "0b00111101010011111000011000011010";
        ram[38] = "0b00111101011011100001101011000101";
        ram[39] = "0b10111011110000010011110110100010";
        ram[40] = "0b00111101101101100110011011000100";
        ram[41] = "0b00111110011100010111000111100011";
        ram[42] = "0b00111110001010001010010011000010";
        ram[43] = "0b00111100001111010101110111000100";
        ram[44] = "0b10111101110110100011001010110001";
        ram[45] = "0b00111110000001000100011100111101";
        ram[46] = "0b00111100000101010011010011111011";
        ram[47] = "0b00111101001111110100101100011111";
        ram[48] = "0b10111101000011110010101001011010";
        ram[49] = "0b00111101010000000110100000100000";
        ram[50] = "0b00111101110001100011001001001001";
        ram[51] = "0b10111101001111000100001011011100";
        ram[52] = "0b00111110000001001101010101010010";
        ram[53] = "0b10111101111000010100011010100010";
        ram[54] = "0b10111110010000011110000100001001";
        ram[55] = "0b00111101100011010011101010001001";
        ram[56] = "0b10111101111011001000101101000100";
        ram[57] = "0b10111101101110001000000010100010";
        ram[58] = "0b10111101010101011110110101110010";
        ram[59] = "0b00111110001111011010110000100110";
        ram[60] = "0b00111100110010001100100001011011";
        ram[61] = "0b00111101100110001101011101110101";
        ram[62] = "0b10111101110111100010110001010110";
        ram[63] = "0b00111110000111011000000111110001";
        ram[64] = "0b10111101010000000000101111110100";
        ram[65] = "0b00111100001100000001111001000000";
        ram[66] = "0b00111110000100110110100000100111";
        ram[67] = "0b00111101100111011010110110101011";
        ram[68] = "0b10111100110001001010010100010110";
        ram[69] = "0b10111100100011010000011111110001";
        ram[70] = "0b10111100000111110000101110111111";
        ram[71] = "0b10111100001111011111100010001001";
        ram[72] = "0b10111101100001001011000000001011";
        ram[73] = "0b00111100110010011111101111001101";
        ram[74] = "0b10111101000001101110101000110101";
        ram[75] = "0b10111101111100000010111001100110";
        ram[76] = "0b10111110010001111111111010001111";
        ram[77] = "0b10111101000111010111110100111001";
        ram[78] = "0b10111110001010111110001001110001";
        ram[79] = "0b10111000011111111100111101101000";
        ram[80] = "0b00111101101010100001101000000000";
        ram[81] = "0b00111101011111000101000010110011";
        ram[82] = "0b10111110000011010101101101101000";
        ram[83] = "0b00111101111110011010000101110111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_47) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_47_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_47) {
meminst = new inference_mult_1_120_120_84_s_W4_47_ram("inference_mult_1_120_120_84_s_W4_47_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_47() {
    delete meminst;
}


};//endmodule
#endif
