// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_61_H__
#define __inference_mult_1_120_120_84_s_W4_61_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_61_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_61_ram) {
        ram[0] = "0b10111100110001101111111110011001";
        ram[1] = "0b00111100001100100011000101000000";
        ram[2] = "0b00111101110001101001000101100100";
        ram[3] = "0b00111100101001011101100001101100";
        ram[4] = "0b10111101000000000100111001101111";
        ram[5] = "0b10111110001110010001111001100100";
        ram[6] = "0b10111101000100110110100010101101";
        ram[7] = "0b00111101101110011010000001000010";
        ram[8] = "0b00111011101101110011100110101000";
        ram[9] = "0b10111011101011100010100001110010";
        ram[10] = "0b00111110001100111011001101100011";
        ram[11] = "0b00111101100011000010101101000100";
        ram[12] = "0b00111101000100010000100111011110";
        ram[13] = "0b10111101101011110011100011000101";
        ram[14] = "0b10111101110001110100000111011110";
        ram[15] = "0b10111101001011000111001100100110";
        ram[16] = "0b10111101110001110111010010101100";
        ram[17] = "0b10111101100010101001011101011011";
        ram[18] = "0b10111101101011101001101100111001";
        ram[19] = "0b10111101001011000000101100111100";
        ram[20] = "0b10111101001101011000111001010111";
        ram[21] = "0b10111101111111110110011011101000";
        ram[22] = "0b00111101101000010100000001100100";
        ram[23] = "0b00111101110000101000110111110010";
        ram[24] = "0b00111100100001100010101000011011";
        ram[25] = "0b00111010010100010111100100000100";
        ram[26] = "0b10111110000101110110000110001001";
        ram[27] = "0b00111101010011011010011100111000";
        ram[28] = "0b10111100001110000000111011010000";
        ram[29] = "0b00111101100100001110000011101011";
        ram[30] = "0b10111110000000010101111110001001";
        ram[31] = "0b00111110000100100011011100000100";
        ram[32] = "0b10111101110001101100001001110111";
        ram[33] = "0b10111101101010001011011110101111";
        ram[34] = "0b10111110001000000010011001000110";
        ram[35] = "0b10111101100101100111100000000100";
        ram[36] = "0b10111101010100010010010100000110";
        ram[37] = "0b00111100011000100100000011010010";
        ram[38] = "0b10111110000001100011010100011110";
        ram[39] = "0b00111110010000100001111111110011";
        ram[40] = "0b00111100110000110010111000011101";
        ram[41] = "0b00111001010100000110100111110110";
        ram[42] = "0b00111101100110101111001010111101";
        ram[43] = "0b00111101010111011100010010111100";
        ram[44] = "0b00111110000011100000111001110011";
        ram[45] = "0b00111100110010011001101100011111";
        ram[46] = "0b10111100111000111010110011100011";
        ram[47] = "0b10111101101011100100001110111000";
        ram[48] = "0b00111101101010110010010110001011";
        ram[49] = "0b10111110011011101110100010001110";
        ram[50] = "0b10111100100110000101011101111010";
        ram[51] = "0b10111100110110000011000010101110";
        ram[52] = "0b10111101000011100110000100000111";
        ram[53] = "0b10111100101110010000001010110110";
        ram[54] = "0b00111101000101001101010011110100";
        ram[55] = "0b10111101111100001110001011000001";
        ram[56] = "0b10111100010011000000111110100011";
        ram[57] = "0b00111100100110001101000110111110";
        ram[58] = "0b00111011101100100000101011101010";
        ram[59] = "0b00111110000101111110100010001010";
        ram[60] = "0b00111011111101110000101111010000";
        ram[61] = "0b10111101110000010110101100101101";
        ram[62] = "0b10111101101010100100110111001100";
        ram[63] = "0b10111100111100111010110100001011";
        ram[64] = "0b10111101111011010101101011100010";
        ram[65] = "0b00111110000001001011101001010010";
        ram[66] = "0b10111101011001110010110101101011";
        ram[67] = "0b10111101001111001100100110011010";
        ram[68] = "0b10111101000110111101011011000000";
        ram[69] = "0b10111101011101010100101101110001";
        ram[70] = "0b10111101011011000000101100000110";
        ram[71] = "0b00111101110010111010010011110010";
        ram[72] = "0b00111101100001011011101111011001";
        ram[73] = "0b00111101101000001100101101111010";
        ram[74] = "0b00111100101110111001010101101101";
        ram[75] = "0b10111110000111011000001111000111";
        ram[76] = "0b00111101101101101110100110010100";
        ram[77] = "0b00111101100010111111001110010110";
        ram[78] = "0b10111101110011100000111000110000";
        ram[79] = "0b00111101101011110000101111100100";
        ram[80] = "0b00111101111000100100010111110110";
        ram[81] = "0b10111101101000011111011100001110";
        ram[82] = "0b00111101000111000010001001011011";
        ram[83] = "0b10111110010111010111110000101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_61) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_61_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_61) {
meminst = new inference_mult_1_120_120_84_s_W4_61_ram("inference_mult_1_120_120_84_s_W4_61_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_61() {
    delete meminst;
}


};//endmodule
#endif
