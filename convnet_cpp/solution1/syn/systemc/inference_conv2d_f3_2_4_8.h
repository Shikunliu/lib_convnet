// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_8_H__
#define __inference_conv2d_f3_2_4_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_8_ram) {
        ram[0] = "0b00111110000110100010110000100011";
        ram[1] = "0b10111101101111010101100000011010";
        ram[2] = "0b10111110000010000011011000100010";
        ram[3] = "0b10111100101001010100100000100100";
        ram[4] = "0b10111101010001100100101010111000";
        ram[5] = "0b00111101110010111110110111011111";
        ram[6] = "0b10111000000101101010001110100111";
        ram[7] = "0b10111101101101111011000001010110";
        ram[8] = "0b10111110000000100010011100000111";
        ram[9] = "0b00111110000001100101001100000000";
        ram[10] = "0b00111101010110000101001111101010";
        ram[11] = "0b00111101000011011000111011001001";
        ram[12] = "0b00111110001001110011111111111011";
        ram[13] = "0b00111100100011000101111100011110";
        ram[14] = "0b00111101011111100011011111111001";
        ram[15] = "0b00111101101101011011010000010111";
        ram[16] = "0b10111100011110100100101110001011";
        ram[17] = "0b00111101100101101100011001011000";
        ram[18] = "0b10111101010110001000000010110000";
        ram[19] = "0b10111101001100011001001000101110";
        ram[20] = "0b10111100111001001111100000000111";
        ram[21] = "0b00111100011011011101001000000000";
        ram[22] = "0b00111101111110110111100111011001";
        ram[23] = "0b00111110000110000101001000101111";
        ram[24] = "0b10111101010110010010111011000000";
        ram[25] = "0b00111100110100000100000101100001";
        ram[26] = "0b00111110001010000010101011011100";
        ram[27] = "0b10111100011010111110000101100101";
        ram[28] = "0b00111101100101100111101101000100";
        ram[29] = "0b00111101001111101011111001100111";
        ram[30] = "0b10111110001110001001110001011110";
        ram[31] = "0b00111100010000100110000110100100";
        ram[32] = "0b00111101001100001011100111110111";
        ram[33] = "0b10111101011111000100100111001000";
        ram[34] = "0b00111101001101000100101001010101";
        ram[35] = "0b10111101101101110010110001000100";
        ram[36] = "0b10111110001000001101010010011001";
        ram[37] = "0b10111101010001011000100110010010";
        ram[38] = "0b10111101000011101000110010001011";
        ram[39] = "0b00111100111101100001001111101110";
        ram[40] = "0b00111101010001001100110110101010";
        ram[41] = "0b10111100101000111100010101101101";
        ram[42] = "0b00111101010001010101110111110011";
        ram[43] = "0b10111101111111001001111001100111";
        ram[44] = "0b10111110001000011110010100111011";
        ram[45] = "0b10111101101001000111110100111101";
        ram[46] = "0b10111110000000101001000001101001";
        ram[47] = "0b00111110000110100100101111011100";
        ram[48] = "0b10111110000110110101100100010100";
        ram[49] = "0b00111101010101110010101111001011";
        ram[50] = "0b10111101010110011110010100011001";
        ram[51] = "0b00111101000110001000000000001111";
        ram[52] = "0b10111101101010011010010101110011";
        ram[53] = "0b10111100000100011101111011010000";
        ram[54] = "0b00111101110000101011100010010010";
        ram[55] = "0b10111100110000101001001000010110";
        ram[56] = "0b00111101100100001000100010111100";
        ram[57] = "0b00111101001101100001110000110111";
        ram[58] = "0b10111101000101110011101000101001";
        ram[59] = "0b10111110000011001001001010011011";
        ram[60] = "0b10111101100010100010011011110011";
        ram[61] = "0b10111100100100011101000110111010";
        ram[62] = "0b00111110000110110101010000011001";
        ram[63] = "0b10111100010010001010101111010110";
        ram[64] = "0b00111101111111100010110111101000";
        ram[65] = "0b10111110000011111110111101111100";
        ram[66] = "0b00111101001011110101000011010110";
        ram[67] = "0b00111101000011010110101001100111";
        ram[68] = "0b10111101010000011100110101111010";
        ram[69] = "0b00111101101011101111110011011000";
        ram[70] = "0b10111101011011001011001110001000";
        ram[71] = "0b00111110001101000110111100010101";
        ram[72] = "0b00111101001100010100100111010100";
        ram[73] = "0b10111101101111110100000110000111";
        ram[74] = "0b00111110001010100000101110100010";
        ram[75] = "0b00111100110001010110000010010010";
        ram[76] = "0b10111011110000111001110101001110";
        ram[77] = "0b00111101010011100100000010000101";
        ram[78] = "0b00111101110001010011000001110001";
        ram[79] = "0b10111101100001111010101100110010";
        ram[80] = "0b00111100000011010100001111101011";
        ram[81] = "0b00111101000001110110110110110011";
        ram[82] = "0b00111101101100101011111110100110";
        ram[83] = "0b00111101101000111001100000101110";
        ram[84] = "0b10111101101001111011010111001001";
        ram[85] = "0b10111100000110011101111110111011";
        ram[86] = "0b00111110010011001001001111101010";
        ram[87] = "0b00111101101011000000010100001100";
        ram[88] = "0b00111101000000111001000001011110";
        ram[89] = "0b00111101011100101101101101010100";
        ram[90] = "0b10111110000001111011111111101000";
        ram[91] = "0b00111101001000100101001110010111";
        ram[92] = "0b10111100010001100110011111000011";
        ram[93] = "0b00111101110100001001001110010110";
        ram[94] = "0b10111101110010011111111011111111";
        ram[95] = "0b10111101000100101100011001000001";
        ram[96] = "0b10111101011101010110100100011110";
        ram[97] = "0b00111101001001000101011101111110";
        ram[98] = "0b00111110001010110010110110010000";
        ram[99] = "0b10111110000101110100100000011011";
        ram[100] = "0b10111011000011110111100111011011";
        ram[101] = "0b10111101000110001101010010010011";
        ram[102] = "0b00111101010110100111101110101100";
        ram[103] = "0b00111101110001000111000100101110";
        ram[104] = "0b00111101100010111101001001100110";
        ram[105] = "0b10111100001100001011011011101101";
        ram[106] = "0b10111001000101010011101000100000";
        ram[107] = "0b00111100010110001111011101111101";
        ram[108] = "0b00111110001110001000000001010010";
        ram[109] = "0b10111101100000101001001101110011";
        ram[110] = "0b10111100110101010111010000111011";
        ram[111] = "0b00111101100011100101101011100100";
        ram[112] = "0b00111011010111000010011001011100";
        ram[113] = "0b00111110001110000001101011011111";
        ram[114] = "0b00111011011110011010011010100000";
        ram[115] = "0b10111101110010111110000111101011";
        ram[116] = "0b10111101001001011100100100011101";
        ram[117] = "0b10111011100100101001000010100110";
        ram[118] = "0b00111101001101111001010110110011";
        ram[119] = "0b10111101010000110001000110011000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_8) {
meminst = new inference_conv2d_f3_2_4_8_ram("inference_conv2d_f3_2_4_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_8() {
    delete meminst;
}


};//endmodule
#endif
