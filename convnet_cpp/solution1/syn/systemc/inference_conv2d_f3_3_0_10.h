// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_10_H__
#define __inference_conv2d_f3_3_0_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_10_ram) {
        ram[0] = "0b00111101110010010011110000111001";
        ram[1] = "0b10111011110001111100100010000001";
        ram[2] = "0b10111110001011100010101010000000";
        ram[3] = "0b10111101101000100100010010001011";
        ram[4] = "0b00111101001000010100100100001011";
        ram[5] = "0b00111101110100110110001101101111";
        ram[6] = "0b00111110000011110111111100000110";
        ram[7] = "0b10111110001001100101010001010000";
        ram[8] = "0b10111101100011100001111101111101";
        ram[9] = "0b10111101110111001111010001100010";
        ram[10] = "0b10111110001101011101111101100101";
        ram[11] = "0b10111110000011011110100010110100";
        ram[12] = "0b00111101001011000101001000000011";
        ram[13] = "0b00111101001100101010100110000110";
        ram[14] = "0b00111101110110100011011001011101";
        ram[15] = "0b10111101100011101001110110111101";
        ram[16] = "0b00111101100010110010001110011010";
        ram[17] = "0b00111100110110001000101000111011";
        ram[18] = "0b00111110001001110111101010110011";
        ram[19] = "0b00111110100100100001000000010111";
        ram[20] = "0b00111110001111001000000111010100";
        ram[21] = "0b00111100010000001000111100111100";
        ram[22] = "0b10111110001010110111001111010010";
        ram[23] = "0b10111101001111111011000110010001";
        ram[24] = "0b00111101101001110000010100011010";
        ram[25] = "0b00111101101110100001001100111100";
        ram[26] = "0b10111110001000010000101010011010";
        ram[27] = "0b00111101110111101000111001100001";
        ram[28] = "0b10111100100110011100001110001011";
        ram[29] = "0b00111101100010000111000010110010";
        ram[30] = "0b10111101100011010001110101100010";
        ram[31] = "0b10111110000110001100100101110101";
        ram[32] = "0b00111101111010111011010001001110";
        ram[33] = "0b00111101101000110011011011010001";
        ram[34] = "0b10111101110110010001100110101100";
        ram[35] = "0b10111101100111010010011101011000";
        ram[36] = "0b00111101000101000000001110101000";
        ram[37] = "0b10111101010010000111110001110001";
        ram[38] = "0b10111101001011100111100101011010";
        ram[39] = "0b00111101010101100111111100011000";
        ram[40] = "0b00111101100101111001101001101011";
        ram[41] = "0b00111100100111100001010011110100";
        ram[42] = "0b10111101000010011101100001011011";
        ram[43] = "0b00111101101011001010000000111100";
        ram[44] = "0b10111101011101011110000000100001";
        ram[45] = "0b00111101010110110010101110100000";
        ram[46] = "0b10111101000000011001100100101000";
        ram[47] = "0b00111101100111101011000110011100";
        ram[48] = "0b00111011110110010000011000010110";
        ram[49] = "0b00111100101000001000000100010100";
        ram[50] = "0b10111101001000101001010010011010";
        ram[51] = "0b00111110001100100001010011110000";
        ram[52] = "0b00111100100011011000111011111111";
        ram[53] = "0b10111101010100100001100010110111";
        ram[54] = "0b10111100110101001100101001011101";
        ram[55] = "0b00111100110101000101111000100110";
        ram[56] = "0b00111100100111111010000100011011";
        ram[57] = "0b10111110011001010101001101101001";
        ram[58] = "0b10111101000110101110001001101111";
        ram[59] = "0b10111101000110111101000001000000";
        ram[60] = "0b00111101100011000001010011111100";
        ram[61] = "0b00111110010010100100001010101111";
        ram[62] = "0b10111101111110100010000011011110";
        ram[63] = "0b10111101011011111000100100100101";
        ram[64] = "0b10111110010111101110011100111110";
        ram[65] = "0b00111101010110011010000100001011";
        ram[66] = "0b00111101100101000110100101101100";
        ram[67] = "0b10111101101011001010001010100110";
        ram[68] = "0b00111110010001011110111111101001";
        ram[69] = "0b00111101111010011101101111101100";
        ram[70] = "0b10111110000011100110011111010111";
        ram[71] = "0b00111011110100110010110010100011";
        ram[72] = "0b10111110010111010111100000111110";
        ram[73] = "0b10111101100101011100101011001011";
        ram[74] = "0b10111110000011010100111011010011";
        ram[75] = "0b00111101101001111001010001100100";
        ram[76] = "0b10111101100110111110011000000010";
        ram[77] = "0b00111101101001101100000101101011";
        ram[78] = "0b10111110010010100100001110111011";
        ram[79] = "0b00111101111000100011011111001110";
        ram[80] = "0b00111101100010000011100100000100";
        ram[81] = "0b10111100010111100101000101011010";
        ram[82] = "0b00111101101100101000101110010110";
        ram[83] = "0b10111011101110000100101011110101";
        ram[84] = "0b00111100100100110001011010010011";
        ram[85] = "0b00111101110001000110011100010000";
        ram[86] = "0b10111101110110100101101000000100";
        ram[87] = "0b00111101111111100110000000111101";
        ram[88] = "0b00111110000010110100000010110011";
        ram[89] = "0b00111110000000000000001110101100";
        ram[90] = "0b10111100110010011001101001111110";
        ram[91] = "0b00111110000001011101010001100011";
        ram[92] = "0b00111101100001101101100101100000";
        ram[93] = "0b00111101010010100101100011001111";
        ram[94] = "0b00111101001010110001001100001001";
        ram[95] = "0b10111101000101001101000101001000";
        ram[96] = "0b10111100100010011001110011001100";
        ram[97] = "0b10111101101110101000110111111000";
        ram[98] = "0b10111101100111010010011010000001";
        ram[99] = "0b00111011111111011101000100100111";
        ram[100] = "0b10111110000000001100110010111100";
        ram[101] = "0b10111101101100101011110100100001";
        ram[102] = "0b00111101000010001101101010011010";
        ram[103] = "0b00111101010011110111100000101000";
        ram[104] = "0b00111110010100001011010010011110";
        ram[105] = "0b00111110001101000010010011100110";
        ram[106] = "0b00111011000100101101001100101100";
        ram[107] = "0b00111100111100001001011001101011";
        ram[108] = "0b10111101000101101000010000100001";
        ram[109] = "0b10111101101001100100100010101100";
        ram[110] = "0b10111101110100011011100000100100";
        ram[111] = "0b00111101001100100010101001101111";
        ram[112] = "0b10111100111100100110010110101110";
        ram[113] = "0b10111101100100010000011010000011";
        ram[114] = "0b00111101100100010001110001000101";
        ram[115] = "0b10111110000101111101110101000100";
        ram[116] = "0b00111101000000101011101110000001";
        ram[117] = "0b00111100101000001010001101111001";
        ram[118] = "0b00111110010010111011100010000000";
        ram[119] = "0b00111011011110101011011101101100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_10) {
meminst = new inference_conv2d_f3_3_0_10_ram("inference_conv2d_f3_3_0_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_10() {
    delete meminst;
}


};//endmodule
#endif
