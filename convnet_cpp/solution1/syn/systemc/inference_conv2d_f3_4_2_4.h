// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_4_H__
#define __inference_conv2d_f3_4_2_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_4_ram) {
        ram[0] = "0b10111101011010011100011000011101";
        ram[1] = "0b00111100111100010101000000000100";
        ram[2] = "0b10111101110000100010111111111110";
        ram[3] = "0b00111101100111010001110000010011";
        ram[4] = "0b00111101010110001001101110111101";
        ram[5] = "0b10111101101001001001100010001110";
        ram[6] = "0b10111101110010101110000011000001";
        ram[7] = "0b10111101110110101100110101011011";
        ram[8] = "0b00111101001001001000111010100101";
        ram[9] = "0b00111101111100111000010110000011";
        ram[10] = "0b00111101100111001001000100110000";
        ram[11] = "0b10111101100100111111110101101011";
        ram[12] = "0b10111100101000010111100010001011";
        ram[13] = "0b10111110000111011111101010000111";
        ram[14] = "0b00111101000111001001101101000001";
        ram[15] = "0b10111101101111001101001101000000";
        ram[16] = "0b00111101111101111010111001011000";
        ram[17] = "0b00111101110001010011101000110001";
        ram[18] = "0b10111101111011101001011100000111";
        ram[19] = "0b10111101111101001001001110000110";
        ram[20] = "0b10111101100111101101101000010110";
        ram[21] = "0b10111101111100000100101100111100";
        ram[22] = "0b00111101100100011110101011001001";
        ram[23] = "0b00111110001110010000111100110000";
        ram[24] = "0b10111101100110111010101111011101";
        ram[25] = "0b00111110001000011010011000001101";
        ram[26] = "0b10111110000111100010111101111011";
        ram[27] = "0b10111101011110001011110110000001";
        ram[28] = "0b00111101010101010010100001010001";
        ram[29] = "0b10111110000010000111110010100110";
        ram[30] = "0b10111101000110010010001010110001";
        ram[31] = "0b10111101100100110100011001111110";
        ram[32] = "0b00111101011011111011010101001010";
        ram[33] = "0b10111101100010100100111111001010";
        ram[34] = "0b10111010111111100110110111011010";
        ram[35] = "0b00111101111000001111110010110101";
        ram[36] = "0b00111101101010001100010000110111";
        ram[37] = "0b00111101100010001110111101101011";
        ram[38] = "0b00111101111100111101010010101110";
        ram[39] = "0b10111110001000010001010100010110";
        ram[40] = "0b10111101000100111001110101010001";
        ram[41] = "0b10111101100010100111101000110100";
        ram[42] = "0b10111101101100111010101110000110";
        ram[43] = "0b00111101101111100010110111011011";
        ram[44] = "0b00111100000101010000100111101000";
        ram[45] = "0b10111101001001000000101011010111";
        ram[46] = "0b00111101101110110010000000001010";
        ram[47] = "0b00111110001011000001001001101010";
        ram[48] = "0b00111110001000111001101110001001";
        ram[49] = "0b00111110000110000101110010101011";
        ram[50] = "0b10111100110010011111010001000000";
        ram[51] = "0b10111101111100011011010110000101";
        ram[52] = "0b10111110001010011011110111000111";
        ram[53] = "0b10111101100011110011000001111101";
        ram[54] = "0b10111110000011111101001100101100";
        ram[55] = "0b00111101000101010000100101111101";
        ram[56] = "0b00111101101000110101111010000010";
        ram[57] = "0b00111100100100111000000100011100";
        ram[58] = "0b00111101101011101000111000111000";
        ram[59] = "0b10111101010100111001110001111010";
        ram[60] = "0b10111101110101110100011010001000";
        ram[61] = "0b00111101000000010100111111000001";
        ram[62] = "0b10111110100000001111101101100101";
        ram[63] = "0b00111101101011010111110010110011";
        ram[64] = "0b10111100111111111100010010100111";
        ram[65] = "0b00111101010010000001111100011110";
        ram[66] = "0b10111110000111111001011011100001";
        ram[67] = "0b10111100101001000001001101110000";
        ram[68] = "0b00111110001000001111110001110010";
        ram[69] = "0b10111101110010101110000000100000";
        ram[70] = "0b00111100110011100011011111010001";
        ram[71] = "0b00111011110001101100001011110011";
        ram[72] = "0b10111011101001001111010111011001";
        ram[73] = "0b00111110000101011010010110111001";
        ram[74] = "0b00111101101100000001001100110000";
        ram[75] = "0b10111110001101000001001000000110";
        ram[76] = "0b10111100110100100010111000110110";
        ram[77] = "0b00111110001110111010110100111010";
        ram[78] = "0b00111100110110110000110001100000";
        ram[79] = "0b10111101111111101100110011000100";
        ram[80] = "0b00111101010001111011000100111010";
        ram[81] = "0b00111101110000100111010111101111";
        ram[82] = "0b00111110010011001011100001011010";
        ram[83] = "0b10111101110000100010110010111110";
        ram[84] = "0b10111110010001000100011100111101";
        ram[85] = "0b00111101000000011011000010100100";
        ram[86] = "0b00111100010100000100001010100011";
        ram[87] = "0b10111101101011010100110001001111";
        ram[88] = "0b00111100101011000100010110100011";
        ram[89] = "0b00111100000000011110000011010110";
        ram[90] = "0b00111101001000000010111000111110";
        ram[91] = "0b00111101011111010110110011011101";
        ram[92] = "0b00111101101101110100001000100001";
        ram[93] = "0b00111101010100100011101100000001";
        ram[94] = "0b00111110000011010111000000011110";
        ram[95] = "0b10111101110001101000101011111111";
        ram[96] = "0b00111101001110010111100011001000";
        ram[97] = "0b00111100010000100110101110110101";
        ram[98] = "0b00111110001101110001010110000011";
        ram[99] = "0b10111101001010001110001010101101";
        ram[100] = "0b00111101101010110010011110100100";
        ram[101] = "0b00111110001100101100010010010011";
        ram[102] = "0b10111110000110001011110010011101";
        ram[103] = "0b10111101000000000101001110010010";
        ram[104] = "0b00111110000101001011110110111010";
        ram[105] = "0b10111101100011010111011100110010";
        ram[106] = "0b00111110000000100110110110001011";
        ram[107] = "0b10111011100001101001010001000100";
        ram[108] = "0b00111100011101101000001100010100";
        ram[109] = "0b00111100110001011000100000110101";
        ram[110] = "0b10111101101001010101111000011011";
        ram[111] = "0b10111100001000111111101010110001";
        ram[112] = "0b00111001100111110000111001001110";
        ram[113] = "0b00111101000100010100110110000000";
        ram[114] = "0b00111100110011101001010110001111";
        ram[115] = "0b10111101101000001010001010110000";
        ram[116] = "0b00111110000100111101110110011000";
        ram[117] = "0b10111101110101000100111011010111";
        ram[118] = "0b10111101111011011100111011000000";
        ram[119] = "0b00111101101001001000000010110011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_4) {
meminst = new inference_conv2d_f3_4_2_4_ram("inference_conv2d_f3_4_2_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_4() {
    delete meminst;
}


};//endmodule
#endif
