// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_4_H__
#define __inference_conv2d_f3_3_1_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_4_ram) {
        ram[0] = "0b00111101100001001010100000000101";
        ram[1] = "0b00111101110011101000010100110100";
        ram[2] = "0b00111101000111101100110011111010";
        ram[3] = "0b10111100100101010000010110000000";
        ram[4] = "0b10111101111000000001000001000001";
        ram[5] = "0b10111110000010101000011011010111";
        ram[6] = "0b10111101101101000000110001001111";
        ram[7] = "0b10111101101111010000010110111101";
        ram[8] = "0b00111101101111011010101110000100";
        ram[9] = "0b00111100101111000001001011010110";
        ram[10] = "0b00111101111101101101111000110011";
        ram[11] = "0b10111101001110011100111110110101";
        ram[12] = "0b00111100111111101001011010101001";
        ram[13] = "0b00111011001110111010100011100011";
        ram[14] = "0b00111101100011011011111010001101";
        ram[15] = "0b10111011101010101000101111000101";
        ram[16] = "0b00111100000100001000101011111101";
        ram[17] = "0b00111101100010011111000001000100";
        ram[18] = "0b00111101101010110000111011010111";
        ram[19] = "0b10111110000110111101100110001000";
        ram[20] = "0b00111011101001011010111100010001";
        ram[21] = "0b00111100110001010101000000110110";
        ram[22] = "0b00111101001101000110000100110001";
        ram[23] = "0b00111101110001111010011000001111";
        ram[24] = "0b10111101001001100100101011010011";
        ram[25] = "0b10111101101000100101001101101111";
        ram[26] = "0b10111101010011100111001111100111";
        ram[27] = "0b00111100100111101000001000000001";
        ram[28] = "0b00111101000000100100111000001001";
        ram[29] = "0b10111101101001101110011011110101";
        ram[30] = "0b00111011110100100101000101110001";
        ram[31] = "0b00111101101010110100100111000101";
        ram[32] = "0b00111100010110100011010111010110";
        ram[33] = "0b00111110000000000001101001111010";
        ram[34] = "0b10111010110000011010011101010101";
        ram[35] = "0b00111101110101100110001001111000";
        ram[36] = "0b00111110000010100011110100101110";
        ram[37] = "0b10111101110000111001111101110111";
        ram[38] = "0b00111101110100101010010010011000";
        ram[39] = "0b10111101101010001100000111000000";
        ram[40] = "0b00111100101010100101000011010111";
        ram[41] = "0b00111101011000000101111100000000";
        ram[42] = "0b10111101111011111001010011001000";
        ram[43] = "0b10111110000100110100110000011011";
        ram[44] = "0b00111101100101110001110100000010";
        ram[45] = "0b10111101101100000001111110011101";
        ram[46] = "0b00111101001110011001000100000000";
        ram[47] = "0b10111101101000110111111000101100";
        ram[48] = "0b00111101010011111100010000010011";
        ram[49] = "0b10111100111000111100111100010010";
        ram[50] = "0b10111011101111001110110001011010";
        ram[51] = "0b00111101000111111111111000000010";
        ram[52] = "0b00111101111101101001011101101100";
        ram[53] = "0b10111110001010101100000100001001";
        ram[54] = "0b10111101110110001011111011111001";
        ram[55] = "0b00111101111111111110011101011100";
        ram[56] = "0b00111110000100101110100011000000";
        ram[57] = "0b00111101011011011000110011001011";
        ram[58] = "0b00111101011011000111011101110010";
        ram[59] = "0b10111110001001000101011100111010";
        ram[60] = "0b10111101010111100010111111001100";
        ram[61] = "0b00111101010000110011110011100110";
        ram[62] = "0b10111100111000011111001010011001";
        ram[63] = "0b10111110010000000001110010010011";
        ram[64] = "0b00111101110100001001000101111101";
        ram[65] = "0b10111101111001100110000100101000";
        ram[66] = "0b10111100100110001100000101100010";
        ram[67] = "0b00111101101111010110011100100110";
        ram[68] = "0b00111110010010011101100010000100";
        ram[69] = "0b00111101010000110101001001001010";
        ram[70] = "0b00111100110000011000100110100011";
        ram[71] = "0b10111110000100100101001011001110";
        ram[72] = "0b00111101011111001001001100010011";
        ram[73] = "0b00111100101110011010010100111101";
        ram[74] = "0b10111101110111001111101010101101";
        ram[75] = "0b10111101101000101010010100000011";
        ram[76] = "0b00111101010001101111001001111101";
        ram[77] = "0b00111101010110111111100100100101";
        ram[78] = "0b00111101101101010101000000101001";
        ram[79] = "0b00111101110110101100111011101110";
        ram[80] = "0b10111110000100111001110101011110";
        ram[81] = "0b00111011110111111011000101000000";
        ram[82] = "0b00111110001110101010110111100110";
        ram[83] = "0b00111101110110000101110101110100";
        ram[84] = "0b10111110010000011110101110000101";
        ram[85] = "0b00111101011101000111110011011111";
        ram[86] = "0b10111100101100010100001000101101";
        ram[87] = "0b00111100111111101001011110110110";
        ram[88] = "0b10111101101101001111101101101111";
        ram[89] = "0b00111110000101010011001100101011";
        ram[90] = "0b00111101110000100101000111000010";
        ram[91] = "0b10111101100110100001001100010100";
        ram[92] = "0b00111101110100000110110111010111";
        ram[93] = "0b10111101001100001000100111010110";
        ram[94] = "0b10111101100011101101010000101001";
        ram[95] = "0b00111110001111111010110111110011";
        ram[96] = "0b10111101001000001011001101101001";
        ram[97] = "0b10111100111011011011101111000101";
        ram[98] = "0b10111101011000011010111011011100";
        ram[99] = "0b00111110000011111111010001110111";
        ram[100] = "0b00111101011000011101111110111001";
        ram[101] = "0b10111101011100011000101101111000";
        ram[102] = "0b10111100000000111111111010111101";
        ram[103] = "0b00111100111101011101100101101011";
        ram[104] = "0b10111101101011101000100010001111";
        ram[105] = "0b00111101100011011100011110000100";
        ram[106] = "0b10111101001110010010010011100101";
        ram[107] = "0b10111101110110110010100100011100";
        ram[108] = "0b10111101111001000000101101111000";
        ram[109] = "0b00111101010001110011111101011010";
        ram[110] = "0b10111100101100101110101101111010";
        ram[111] = "0b00111101100101010011110010110110";
        ram[112] = "0b00111101100110000010101101110000";
        ram[113] = "0b00111101101110101101100101011101";
        ram[114] = "0b10111101110101000101101001100000";
        ram[115] = "0b00111010101101111010010000011100";
        ram[116] = "0b00111100110100000100100111111010";
        ram[117] = "0b10111100100000101000010011100000";
        ram[118] = "0b10111110000010110011110000111110";
        ram[119] = "0b00111011110011110110100101011111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_4) {
meminst = new inference_conv2d_f3_3_1_4_ram("inference_conv2d_f3_3_1_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_4() {
    delete meminst;
}


};//endmodule
#endif
