// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_14_H__
#define __inference_mult_1_120_120_84_s_W4_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_14_ram) {
        ram[0] = "0b00111110000011001000110000001101";
        ram[1] = "0b10111100111011110110111000010111";
        ram[2] = "0b00111101100001010001111001000000";
        ram[3] = "0b10111110001001011110010000011101";
        ram[4] = "0b10111110010001100100111100010010";
        ram[5] = "0b00111100111010110000101101111100";
        ram[6] = "0b10111101111011001110011001111101";
        ram[7] = "0b00111110000001000000001000001000";
        ram[8] = "0b00111011101110000100011111110000";
        ram[9] = "0b10111101100010111110111110011010";
        ram[10] = "0b00111101010000011001100101000010";
        ram[11] = "0b10111110000011010011111101011011";
        ram[12] = "0b10111101101100011011100100111110";
        ram[13] = "0b10111011101101001110100111000010";
        ram[14] = "0b10111100001101000110011010100100";
        ram[15] = "0b10111100110110010011100111000011";
        ram[16] = "0b10111101011001110100111000111101";
        ram[17] = "0b10111101101110001001101101011111";
        ram[18] = "0b00111101101101001011110011100011";
        ram[19] = "0b10111101101001110111111001111010";
        ram[20] = "0b00111100011010100110110101011100";
        ram[21] = "0b10111100011110011001111010111101";
        ram[22] = "0b10111101011000101011000010011010";
        ram[23] = "0b10111110001100010001101000010001";
        ram[24] = "0b10111101010101010010100111001000";
        ram[25] = "0b10111101101100101111101111100011";
        ram[26] = "0b00111110000001111100100111011110";
        ram[27] = "0b00111101100011000001000010100010";
        ram[28] = "0b10111100100111010010011010000001";
        ram[29] = "0b00111100000000011010101011010000";
        ram[30] = "0b00111101111000000011101000110010";
        ram[31] = "0b10111101101111011011010100000010";
        ram[32] = "0b10111100100101011010111111001010";
        ram[33] = "0b00111101110101100100010000001111";
        ram[34] = "0b10111101001110110111110101101010";
        ram[35] = "0b00111100111110100110100110111110";
        ram[36] = "0b10111101101100101100001100110110";
        ram[37] = "0b10111101101111001110100001101110";
        ram[38] = "0b10111011111111100111001011100010";
        ram[39] = "0b10111100001111010001010110100000";
        ram[40] = "0b10111101111111101010000010111010";
        ram[41] = "0b10111110011100101011101011100000";
        ram[42] = "0b00111101101011011011001101111101";
        ram[43] = "0b10111101000011011001100011011010";
        ram[44] = "0b00111101010110111001001101101111";
        ram[45] = "0b00111110000000101111100100000001";
        ram[46] = "0b10111101101110100101001000100110";
        ram[47] = "0b00111101100110110101110000010001";
        ram[48] = "0b10111101110111100011101110001010";
        ram[49] = "0b00111001110010000000111111100000";
        ram[50] = "0b10111101010000010011000001001100";
        ram[51] = "0b00111101111110011101011001101011";
        ram[52] = "0b00111101110010001010110001110111";
        ram[53] = "0b00111110011001111011110101001001";
        ram[54] = "0b10111101000010011110100101110011";
        ram[55] = "0b00111101011000001111111001111101";
        ram[56] = "0b10111101110111010000111100011111";
        ram[57] = "0b10111110001101010101110110100010";
        ram[58] = "0b10111110000100011101110111100011";
        ram[59] = "0b10111101110101101100110001100000";
        ram[60] = "0b00111110000100100001111001100000";
        ram[61] = "0b10111101101010011110111111110011";
        ram[62] = "0b00111110010011011100101110011011";
        ram[63] = "0b00111101001111000001111111110001";
        ram[64] = "0b00111101100111001110100101100000";
        ram[65] = "0b00111110000010011001100001001010";
        ram[66] = "0b10111101001010110001010110101000";
        ram[67] = "0b10111100110010111111110101100100";
        ram[68] = "0b10111001000101111101001100001010";
        ram[69] = "0b10111101100111000010100001111101";
        ram[70] = "0b00111101100011000101011101000001";
        ram[71] = "0b00111101110010101111000000000011";
        ram[72] = "0b10111110000011111011101101010001";
        ram[73] = "0b10111101100010000101011010111110";
        ram[74] = "0b00111100101100110110001011001110";
        ram[75] = "0b00111110010000000100111101101110";
        ram[76] = "0b00111101001110110101011100111111";
        ram[77] = "0b10111101010000101101010110111000";
        ram[78] = "0b10111110000011100110111010101000";
        ram[79] = "0b10111100100010001010101100110101";
        ram[80] = "0b00111110001001001110011101101000";
        ram[81] = "0b10111100011011010110001101000101";
        ram[82] = "0b00111100101110110111011100000100";
        ram[83] = "0b10111110000000011101011000000110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_14_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_14) {
meminst = new inference_mult_1_120_120_84_s_W4_14_ram("inference_mult_1_120_120_84_s_W4_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_14() {
    delete meminst;
}


};//endmodule
#endif
