// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_2_H__
#define __inference_conv2d_f3_3_3_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_2_ram) {
        ram[0] = "0b00111101101110010011100110001101";
        ram[1] = "0b00111101010010111100110010111101";
        ram[2] = "0b10111101001011000101110100100000";
        ram[3] = "0b00111110010001011000110001001100";
        ram[4] = "0b10111101001101001010100111000000";
        ram[5] = "0b00111101000011111010101011101000";
        ram[6] = "0b10111100001111011100010101011101";
        ram[7] = "0b00111100111110010010111100101011";
        ram[8] = "0b00111100010100100000011110011111";
        ram[9] = "0b00111110000100101010101011100011";
        ram[10] = "0b10111011111010001100111100100001";
        ram[11] = "0b10111110000101010111101000110101";
        ram[12] = "0b10111101000110110011100111111101";
        ram[13] = "0b00111101111000010101101010001110";
        ram[14] = "0b10111101001000000101001101011101";
        ram[15] = "0b00111101001111110111000001011000";
        ram[16] = "0b00111110000001001100110111111011";
        ram[17] = "0b10111011111100100101101000111011";
        ram[18] = "0b00111101111110101111001110100001";
        ram[19] = "0b10111011101011100001111000100000";
        ram[20] = "0b00111101001110000011111101110111";
        ram[21] = "0b00111101001101010000110100001101";
        ram[22] = "0b00111101110100100011100110100100";
        ram[23] = "0b00111100101011110110100101000100";
        ram[24] = "0b00111101100110011111011111000011";
        ram[25] = "0b00111101010110111000010010001011";
        ram[26] = "0b00111101101111111110001011100111";
        ram[27] = "0b00111100010111111111100011111001";
        ram[28] = "0b00111100101011000101010010000111";
        ram[29] = "0b00111100101101000001000100010100";
        ram[30] = "0b10111101001011011010100110100001";
        ram[31] = "0b00111011101010101010000001101000";
        ram[32] = "0b10111110010000011100111111111111";
        ram[33] = "0b00111101101111010100101111111110";
        ram[34] = "0b00111101101111110000110101001111";
        ram[35] = "0b00111100101001001000110100010011";
        ram[36] = "0b10111101100001001101001011011011";
        ram[37] = "0b00111101111100110000100000110101";
        ram[38] = "0b10111100101100011001001010110101";
        ram[39] = "0b10111100101001001110111100111000";
        ram[40] = "0b00111100100011111101000100101110";
        ram[41] = "0b10111101000100111001101000010001";
        ram[42] = "0b10111101110111101001111110101110";
        ram[43] = "0b10111101100011101001001001001111";
        ram[44] = "0b00111101001100111011001001100100";
        ram[45] = "0b10111101101100101001010110100111";
        ram[46] = "0b00111110001000000100100000010111";
        ram[47] = "0b00111100010011011000101001100010";
        ram[48] = "0b10111101101111100010010101111000";
        ram[49] = "0b00111101111100110101011101100000";
        ram[50] = "0b00111110000000011000011110100101";
        ram[51] = "0b10111101001111010001111001101111";
        ram[52] = "0b10111110000000001010010001011101";
        ram[53] = "0b10111100001011101111100111101001";
        ram[54] = "0b10111100100010001010000100100100";
        ram[55] = "0b00111110001010011001110010111111";
        ram[56] = "0b10111101001000100110010000101001";
        ram[57] = "0b00111101100011111110111011001110";
        ram[58] = "0b00111100100000101010000110011011";
        ram[59] = "0b00111110000110011111011001100110";
        ram[60] = "0b00111011100110110010011100001101";
        ram[61] = "0b00111101010011010010011011011111";
        ram[62] = "0b10111101010000011010101011000101";
        ram[63] = "0b00111101110100101111110110111001";
        ram[64] = "0b00111100100101110000011000001100";
        ram[65] = "0b10111110001001100011110000110010";
        ram[66] = "0b10111100101101111110101000011100";
        ram[67] = "0b10111101110000001010011111000110";
        ram[68] = "0b10111101011100110000000100010100";
        ram[69] = "0b00111101111000011010110011011110";
        ram[70] = "0b10111011100010110101111111011011";
        ram[71] = "0b00111101100000111111010111000011";
        ram[72] = "0b10111110000100010001001000110100";
        ram[73] = "0b00111101011101010001111101001100";
        ram[74] = "0b10111110000101100011100100001101";
        ram[75] = "0b10111110001001100110110001101110";
        ram[76] = "0b10111100111001101111010100000010";
        ram[77] = "0b00111100001100001100110001010001";
        ram[78] = "0b10111010110000001011111111001110";
        ram[79] = "0b00111101110110101000000101010110";
        ram[80] = "0b10111101001000100010101100111001";
        ram[81] = "0b00111110000100000000010000110010";
        ram[82] = "0b10111101001111111000110011111001";
        ram[83] = "0b10111101101110101000000011010000";
        ram[84] = "0b00111100011000100101010011110100";
        ram[85] = "0b10111110000011110110100110001000";
        ram[86] = "0b00111101010001111111000101001011";
        ram[87] = "0b10111101110001101100011111010000";
        ram[88] = "0b00111101111101110010101101000101";
        ram[89] = "0b00111011111011111001001011100000";
        ram[90] = "0b10111101010101011101111110000000";
        ram[91] = "0b10111101111111100100001001011011";
        ram[92] = "0b10111101001011000010000001101010";
        ram[93] = "0b00111101111011111101101100001010";
        ram[94] = "0b10111110010011110011111001000111";
        ram[95] = "0b00111100111111100101001100100010";
        ram[96] = "0b10111110001011100011011100010101";
        ram[97] = "0b10111101000111011001000111111100";
        ram[98] = "0b00111010110000101110010011000010";
        ram[99] = "0b10111110000101100101111011001100";
        ram[100] = "0b10111101101011001001010110011000";
        ram[101] = "0b00111110000000001001111100011111";
        ram[102] = "0b10111101010110010101000101000000";
        ram[103] = "0b00111101000010011111010110111000";
        ram[104] = "0b00111101100010001100000011011100";
        ram[105] = "0b10111100001101010001100110111101";
        ram[106] = "0b00111101011011000000010101110111";
        ram[107] = "0b10111110010100000001110101011100";
        ram[108] = "0b10111101110110011101010101011110";
        ram[109] = "0b10111101011100011010101110001111";
        ram[110] = "0b00111101100010010011101011110111";
        ram[111] = "0b00111101110100010001110001101101";
        ram[112] = "0b00111101110010011000111011110101";
        ram[113] = "0b10111101100110010111110010001110";
        ram[114] = "0b00111101000101100010001010110111";
        ram[115] = "0b00111110001101010001101001000011";
        ram[116] = "0b00111101110100100100111110101001";
        ram[117] = "0b10111101001100000000000101010000";
        ram[118] = "0b10111110001110001010001000100011";
        ram[119] = "0b00111101101010101010100110011010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_2) {
meminst = new inference_conv2d_f3_3_3_2_ram("inference_conv2d_f3_3_3_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_2() {
    delete meminst;
}


};//endmodule
#endif
