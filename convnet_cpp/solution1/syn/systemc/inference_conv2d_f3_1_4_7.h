// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_7_H__
#define __inference_conv2d_f3_1_4_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_7_ram) {
        ram[0] = "0b00111101010001111010101000110011";
        ram[1] = "0b00111101001101110101010100110111";
        ram[2] = "0b00111101010000000100101101100101";
        ram[3] = "0b10111100110101100110110001010011";
        ram[4] = "0b10111110010100011111100110101101";
        ram[5] = "0b00111110000100110110001110110010";
        ram[6] = "0b10111101101110000011111011100011";
        ram[7] = "0b00111110001001101100110010100011";
        ram[8] = "0b00111100010001000110110110000011";
        ram[9] = "0b10111101010010111001111000010011";
        ram[10] = "0b00111101001111000101000000101101";
        ram[11] = "0b00111100101110010001110111000011";
        ram[12] = "0b10111100111001110001010001000001";
        ram[13] = "0b00111101101100011001010001100010";
        ram[14] = "0b10111110000000101001001101001011";
        ram[15] = "0b00111101101010011111011110000000";
        ram[16] = "0b00111101011011010000100100011000";
        ram[17] = "0b00111101110101001001111010001000";
        ram[18] = "0b00111101001011110010110110000000";
        ram[19] = "0b10111101000000010011010001111110";
        ram[20] = "0b10111101001100100011000110010001";
        ram[21] = "0b10111100100010110111111110010000";
        ram[22] = "0b10111101001010100011110101010110";
        ram[23] = "0b00111101001011111110101100010101";
        ram[24] = "0b10111100100011111111011111000101";
        ram[25] = "0b00111101111101111111110110000010";
        ram[26] = "0b10111100101100011111100111100011";
        ram[27] = "0b10111110001000001010011100111111";
        ram[28] = "0b10111110000111111110110111101001";
        ram[29] = "0b10111101011100000001111001110110";
        ram[30] = "0b00111100001111100110110010111000";
        ram[31] = "0b00111101100001100101001100101001";
        ram[32] = "0b10111110001001010101010001110110";
        ram[33] = "0b10111100110100110101010011011100";
        ram[34] = "0b10111101101111101111111111010101";
        ram[35] = "0b10111101110000101011011011100100";
        ram[36] = "0b00111100100010110101000100000001";
        ram[37] = "0b00111110000000111110011011000101";
        ram[38] = "0b00111110000001111100111010010110";
        ram[39] = "0b10111101111000000111100110100011";
        ram[40] = "0b10111101100010110100101111000011";
        ram[41] = "0b00111100110010011010010110011011";
        ram[42] = "0b10111101100001000000100110110000";
        ram[43] = "0b10111101000000111101101111111000";
        ram[44] = "0b00111101101001111010110101110011";
        ram[45] = "0b00111110000000010100000001010111";
        ram[46] = "0b10111101111110010011011110001111";
        ram[47] = "0b00111110001001011110011110000110";
        ram[48] = "0b00111100110010101110000010011001";
        ram[49] = "0b10111101100110110101010101011011";
        ram[50] = "0b00111110000100001011100000000110";
        ram[51] = "0b10111101001000010110010010000100";
        ram[52] = "0b00111100000110011111101000010010";
        ram[53] = "0b10111110010001101010000001010101";
        ram[54] = "0b10111101111110001100110010011010";
        ram[55] = "0b10111011110100100000110110111111";
        ram[56] = "0b10111110010010011111001011111110";
        ram[57] = "0b10111101011011110001101011010101";
        ram[58] = "0b10111101100001111110011101111101";
        ram[59] = "0b00111101100101110101000110110011";
        ram[60] = "0b10111110000110100000110101111000";
        ram[61] = "0b00111100101011110111100001011110";
        ram[62] = "0b10111101101011110111100000001101";
        ram[63] = "0b10111101110011000001001101001111";
        ram[64] = "0b00111110000101000101111110011110";
        ram[65] = "0b10111011100000100111111001001010";
        ram[66] = "0b10111100110000001000101101110110";
        ram[67] = "0b00111100100000000011010000000010";
        ram[68] = "0b00111110000001000000011000111010";
        ram[69] = "0b10111101001001111000000011100011";
        ram[70] = "0b10111110001001000111100010000101";
        ram[71] = "0b00111101001101011101110110011101";
        ram[72] = "0b10111100000010001100010100101011";
        ram[73] = "0b10111101100011001111001001100100";
        ram[74] = "0b10111100011100100000111100010001";
        ram[75] = "0b00111101101100000111101000000000";
        ram[76] = "0b10111101111000101001100001000110";
        ram[77] = "0b10111101111010100010010101010011";
        ram[78] = "0b00111101001111100010110100101101";
        ram[79] = "0b00111101100101110001001011001001";
        ram[80] = "0b00111101101000101000010001110100";
        ram[81] = "0b10111101101001100111001011000110";
        ram[82] = "0b10111101101010110011011011100101";
        ram[83] = "0b10111100100010000111111011110101";
        ram[84] = "0b10111011110000101000010100100000";
        ram[85] = "0b00111011011100111010110100001011";
        ram[86] = "0b00111101111110010100010010101010";
        ram[87] = "0b10111110001110110100001101010010";
        ram[88] = "0b10111101011001100111011000000110";
        ram[89] = "0b10111101110110000111010100001100";
        ram[90] = "0b10111101110010101000000001110010";
        ram[91] = "0b10111100111010001110111000110110";
        ram[92] = "0b10111101100010101010011001110100";
        ram[93] = "0b00111101111110100110010010000000";
        ram[94] = "0b10111101110111101000110111011010";
        ram[95] = "0b00111100011110110010110100110010";
        ram[96] = "0b00111101000111000000011010010001";
        ram[97] = "0b00111011100010001001100101101100";
        ram[98] = "0b00111110000001111011110111001111";
        ram[99] = "0b00111101110100001010001101010001";
        ram[100] = "0b00111101111010011000010111110000";
        ram[101] = "0b10111110001110000110011010100001";
        ram[102] = "0b10111101010010101110010111110010";
        ram[103] = "0b00111100110011010100110100100101";
        ram[104] = "0b00111101000011010100010110011001";
        ram[105] = "0b00111110000110100101010110001111";
        ram[106] = "0b10111101010110011000001110010100";
        ram[107] = "0b00111011110001101110101110110111";
        ram[108] = "0b00111101111100000111111110101010";
        ram[109] = "0b00111100101100010110101110110011";
        ram[110] = "0b10111100000111111100000110010001";
        ram[111] = "0b10111110000000111000000000000010";
        ram[112] = "0b00111101001101111111000110101001";
        ram[113] = "0b00111100011010001100000010110100";
        ram[114] = "0b10111100110110111100110010101111";
        ram[115] = "0b10111101011000010001110111110010";
        ram[116] = "0b10111010110001001100011001000011";
        ram[117] = "0b10111101111111000110110000010010";
        ram[118] = "0b00111101101011100101011011000000";
        ram[119] = "0b00111100111111011101000100011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_7) {
meminst = new inference_conv2d_f3_1_4_7_ram("inference_conv2d_f3_1_4_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_7() {
    delete meminst;
}


};//endmodule
#endif
