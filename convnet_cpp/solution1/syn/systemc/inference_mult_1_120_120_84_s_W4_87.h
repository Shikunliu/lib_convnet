// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_87_H__
#define __inference_mult_1_120_120_84_s_W4_87_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_87_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_87_ram) {
        ram[0] = "0b10111101001101100100010101101100";
        ram[1] = "0b10111101011010010011111111100101";
        ram[2] = "0b00111101010011111100000011101110";
        ram[3] = "0b10111011110111100110001011110111";
        ram[4] = "0b10111101100111011110010000110001";
        ram[5] = "0b00111101100011101011011001111100";
        ram[6] = "0b10111101100100000001011010001011";
        ram[7] = "0b00111101101110110000011110001110";
        ram[8] = "0b00111101010110111010111000101100";
        ram[9] = "0b00111101001111100001100011010101";
        ram[10] = "0b00111101111011101100011010111101";
        ram[11] = "0b00111101010110001010101000110110";
        ram[12] = "0b10111110001001111100100011010010";
        ram[13] = "0b00111101010010110110011111111000";
        ram[14] = "0b00111101101000100100111100111101";
        ram[15] = "0b10111101111100001000100000001110";
        ram[16] = "0b00111101010000110010000010110001";
        ram[17] = "0b10111100000100100001000101110000";
        ram[18] = "0b10111101010010010011111010111110";
        ram[19] = "0b10111110001000111011101111000111";
        ram[20] = "0b00111101010010000011110011001011";
        ram[21] = "0b10111101010101100100110100010100";
        ram[22] = "0b10111100101110111111001011000000";
        ram[23] = "0b10111110000111011100011010100000";
        ram[24] = "0b00111100101110111000100111100100";
        ram[25] = "0b00111101101001010000011010001101";
        ram[26] = "0b00111101000000111011011001101110";
        ram[27] = "0b10111101000111111001000010100100";
        ram[28] = "0b00111101111001100101101111101010";
        ram[29] = "0b10111110001011100110100010100001";
        ram[30] = "0b00111101001101001001010001011100";
        ram[31] = "0b10111110000100000110111101101001";
        ram[32] = "0b10111101101001101100000100110101";
        ram[33] = "0b10111101010110010111111100010010";
        ram[34] = "0b10111101010101010000011001110010";
        ram[35] = "0b10111011010011101100000001101101";
        ram[36] = "0b10111101100010110010100111100101";
        ram[37] = "0b10111101110111101011100101011110";
        ram[38] = "0b00111011011110001111000000010110";
        ram[39] = "0b00111101111100110110100010101101";
        ram[40] = "0b00111100000010010010110011110000";
        ram[41] = "0b10111100100100001001000010100111";
        ram[42] = "0b10111110000001111111001111001111";
        ram[43] = "0b10111101011001011000110101110011";
        ram[44] = "0b10111101101010011001101001010110";
        ram[45] = "0b10111101010010100010110110011011";
        ram[46] = "0b10111101010100011000111111111011";
        ram[47] = "0b10111100100100010101100101011001";
        ram[48] = "0b10111101011101110001010001101001";
        ram[49] = "0b10111101110001110011001101001011";
        ram[50] = "0b10111011101001001011110110111010";
        ram[51] = "0b00111101100101000000100111001011";
        ram[52] = "0b00111101101010110000110110001000";
        ram[53] = "0b00111100000010110110110000101111";
        ram[54] = "0b00111100111011100011100010001101";
        ram[55] = "0b00111101100110001000011010101010";
        ram[56] = "0b00111100111110100011111111001101";
        ram[57] = "0b00111101011101000000101011111111";
        ram[58] = "0b10111100101010010111101110001111";
        ram[59] = "0b10111101100011101000010001111000";
        ram[60] = "0b00111101111100001110001101000111";
        ram[61] = "0b10111110000000100001001000001110";
        ram[62] = "0b00111110000000111100011110010011";
        ram[63] = "0b10111110000010111000110111000101";
        ram[64] = "0b00111101000110111011110110010110";
        ram[65] = "0b00111110010000001110000011101011";
        ram[66] = "0b10111101010000101100000111001100";
        ram[67] = "0b10111101111011101101110101001000";
        ram[68] = "0b10111110000000100000010111111111";
        ram[69] = "0b10111101101000100000100110011101";
        ram[70] = "0b00111011100010101000011001000001";
        ram[71] = "0b10111011100001000011000000100110";
        ram[72] = "0b10111110000100001000110011000101";
        ram[73] = "0b10111110001001000111010110100011";
        ram[74] = "0b10111100011110111010010100100111";
        ram[75] = "0b10111101100001000011001011110011";
        ram[76] = "0b00111101101101111101000011001010";
        ram[77] = "0b00111101010110010100110010001000";
        ram[78] = "0b10111110000001100011110001110101";
        ram[79] = "0b00111101110001001010011111111000";
        ram[80] = "0b10111101001111111011101111110011";
        ram[81] = "0b00111101001011010100110111111100";
        ram[82] = "0b00111100011000000100100000111111";
        ram[83] = "0b10111101110100011011001111110010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_87) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_87_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_87) {
meminst = new inference_mult_1_120_120_84_s_W4_87_ram("inference_mult_1_120_120_84_s_W4_87_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_87() {
    delete meminst;
}


};//endmodule
#endif
