// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_83_H__
#define __inference_mult_1_120_120_84_s_W4_83_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_83_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_83_ram) {
        ram[0] = "0b10111110010010101001001111110011";
        ram[1] = "0b00111011110010001110000111110001";
        ram[2] = "0b10111101101000101101001111010101";
        ram[3] = "0b10111101010110011010010000110001";
        ram[4] = "0b10111101100111111011000100001011";
        ram[5] = "0b10111101101111101100100011001000";
        ram[6] = "0b00111110000011100000101001000010";
        ram[7] = "0b10111101100110010101101111001001";
        ram[8] = "0b00111101001100011101110011010111";
        ram[9] = "0b10111101101101011110111001110001";
        ram[10] = "0b10111101000011010011000100001011";
        ram[11] = "0b00111101110100001100010011011111";
        ram[12] = "0b10111110001000100011110111010101";
        ram[13] = "0b10111101100001010110011000111100";
        ram[14] = "0b10111101110111011011010101010010";
        ram[15] = "0b00111011111101110100010000011010";
        ram[16] = "0b00111100011000111011101100100110";
        ram[17] = "0b10111101100110000111001011011000";
        ram[18] = "0b10111101111110110101100001001011";
        ram[19] = "0b00111101100001001001101100010010";
        ram[20] = "0b00111101001001011111110101110000";
        ram[21] = "0b00111101111100001010000010110010";
        ram[22] = "0b00111100011001001110100100100011";
        ram[23] = "0b00111110001010111000101011100011";
        ram[24] = "0b00111101101101110000110010011001";
        ram[25] = "0b10111101110011011010011101101110";
        ram[26] = "0b10111101010001001010100101100010";
        ram[27] = "0b00111101100001111101010100100100";
        ram[28] = "0b00111100111001111011000001001000";
        ram[29] = "0b00111110000010100110000111100001";
        ram[30] = "0b10111110001010100101010011000101";
        ram[31] = "0b00111101101111000010110100101000";
        ram[32] = "0b10111101100100000011001001000111";
        ram[33] = "0b00111100101011101110101100000101";
        ram[34] = "0b00111110001000001111101101100101";
        ram[35] = "0b00111100101000100001011111101101";
        ram[36] = "0b00111101100101000100000001000100";
        ram[37] = "0b10111100010010110011100011100011";
        ram[38] = "0b10111110000000100100010001100011";
        ram[39] = "0b10111101100010110011000011101011";
        ram[40] = "0b10111101011001101101010000110000";
        ram[41] = "0b00111110000101100000010011100010";
        ram[42] = "0b00111110010000010111000111100011";
        ram[43] = "0b00111101100001011101100101111001";
        ram[44] = "0b00111100100101010001000100001001";
        ram[45] = "0b00111101111111101111101101101110";
        ram[46] = "0b00111101011101111010111111101010";
        ram[47] = "0b00111101111010111000000001100111";
        ram[48] = "0b00111101110101011101011001111100";
        ram[49] = "0b10111101111110101100110011010101";
        ram[50] = "0b00111101100110100010001001100011";
        ram[51] = "0b00111101101001001100010110110010";
        ram[52] = "0b10111100101000001001100000100110";
        ram[53] = "0b10111100000101001011001110110110";
        ram[54] = "0b10111101011100011100000111100100";
        ram[55] = "0b00111101011001100010010000000110";
        ram[56] = "0b10111100111101100001100111001101";
        ram[57] = "0b00111110001001001011001001110100";
        ram[58] = "0b00111101110100110101101110010010";
        ram[59] = "0b00111001001100101101100001011010";
        ram[60] = "0b10111101001010011111101110110010";
        ram[61] = "0b00111101001111111010011011111010";
        ram[62] = "0b00111100100001011011110101111001";
        ram[63] = "0b00111101000011000000110001001000";
        ram[64] = "0b10111101010011011011010010001001";
        ram[65] = "0b10111101010001101001001011110111";
        ram[66] = "0b00111101111100001011111100011010";
        ram[67] = "0b10111110001000111010100001100001";
        ram[68] = "0b10111101100001111100011111010011";
        ram[69] = "0b00111101101011100001010101111010";
        ram[70] = "0b10111101011111110000010111001111";
        ram[71] = "0b00111110001111111010110110110000";
        ram[72] = "0b10111101000101010111111000110001";
        ram[73] = "0b10111011100111011011100010001101";
        ram[74] = "0b00111101011011110110100101000100";
        ram[75] = "0b00111101001101100111101111110011";
        ram[76] = "0b00111100100101010100001101011110";
        ram[77] = "0b10111101110011010011010010011100";
        ram[78] = "0b10111101011100101011111111110110";
        ram[79] = "0b00111101101011110001010110110010";
        ram[80] = "0b00111101000001001000100111010010";
        ram[81] = "0b10111110001000101010000011101100";
        ram[82] = "0b00111101001001001001100001001011";
        ram[83] = "0b00111101000011111001101101001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_83) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_83_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_83) {
meminst = new inference_mult_1_120_120_84_s_W4_83_ram("inference_mult_1_120_120_84_s_W4_83_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_83() {
    delete meminst;
}


};//endmodule
#endif
