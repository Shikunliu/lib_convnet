// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_7_H__
#define __inference_conv2d_f3_4_0_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_7_ram) {
        ram[0] = "0b10111101111010001111101100000001";
        ram[1] = "0b00111101100011011100001101010010";
        ram[2] = "0b10111101100001101011001101010000";
        ram[3] = "0b00111110010111110101011111110111";
        ram[4] = "0b00111100100010101011100100101100";
        ram[5] = "0b10111101011000100011110100001100";
        ram[6] = "0b10111101100100101100111001100001";
        ram[7] = "0b00111100100000000000101001000111";
        ram[8] = "0b00111110000001111010111010011011";
        ram[9] = "0b00111100010110010111110011011110";
        ram[10] = "0b10111101111110001010011001010101";
        ram[11] = "0b00111101111110110001000110000100";
        ram[12] = "0b10111101000111010000100110101011";
        ram[13] = "0b10111100101110001000111000011100";
        ram[14] = "0b00111101011010000100011100010001";
        ram[15] = "0b00111101101010001001011001110010";
        ram[16] = "0b00111101100101011010011011100001";
        ram[17] = "0b00111110001110001011110101100110";
        ram[18] = "0b00111011100001100010101101111110";
        ram[19] = "0b10111100000101100110001111111010";
        ram[20] = "0b10111101010011000110110101111100";
        ram[21] = "0b10111100010000000101110001111100";
        ram[22] = "0b00111101000001010010001000010011";
        ram[23] = "0b00111101101000000011010011001100";
        ram[24] = "0b00111100100110000000111011101010";
        ram[25] = "0b00111101000100110010111110001000";
        ram[26] = "0b00111101101110000001011011111101";
        ram[27] = "0b10111101011001011011000001111001";
        ram[28] = "0b00111101001100011110010001100100";
        ram[29] = "0b00111011110011010000001101010011";
        ram[30] = "0b00111110010011001011010100110101";
        ram[31] = "0b10111101000111110000000010010001";
        ram[32] = "0b00111101101010011111001000100111";
        ram[33] = "0b10111101110011000101001100111000";
        ram[34] = "0b00111101100100011111111111000010";
        ram[35] = "0b10111101101000100011001011101110";
        ram[36] = "0b10111101101011101001101011001101";
        ram[37] = "0b10111110001101011000100011100011";
        ram[38] = "0b10111101011010111111111100010010";
        ram[39] = "0b10111101011001100101010011100100";
        ram[40] = "0b00111110000010010110010000011111";
        ram[41] = "0b00111101000001110110010111010101";
        ram[42] = "0b10111101000101110000001100011100";
        ram[43] = "0b10111101110100111010000001000000";
        ram[44] = "0b00111101100001010111101110111011";
        ram[45] = "0b10111101110111010001111101100000";
        ram[46] = "0b10111101001101010110010101010111";
        ram[47] = "0b00111101110000111000011100100011";
        ram[48] = "0b00111100001101000000000100100100";
        ram[49] = "0b10111110001100111100000011000010";
        ram[50] = "0b10111110000010001001100010110011";
        ram[51] = "0b00111110011010010001101000110011";
        ram[52] = "0b10111110000001000010010101101100";
        ram[53] = "0b10111110000101010101101101000110";
        ram[54] = "0b00111100001011001100010000011001";
        ram[55] = "0b10111101101010010000100001111010";
        ram[56] = "0b00111101010111000101101001110100";
        ram[57] = "0b00111110000100111100000100000101";
        ram[58] = "0b00111101111111100111000100000100";
        ram[59] = "0b10111101011011101110001000011011";
        ram[60] = "0b10111100111010010100010101110100";
        ram[61] = "0b10111110000001011001100011100001";
        ram[62] = "0b10111001110010000110000011001111";
        ram[63] = "0b10111110000001111100111111100110";
        ram[64] = "0b10111101101000100000101101100110";
        ram[65] = "0b00111100111100101011010010001000";
        ram[66] = "0b10111110010100000000101101000110";
        ram[67] = "0b10111101010110010100111100001100";
        ram[68] = "0b10111110000010100011101000001000";
        ram[69] = "0b10111110010001101101101000000001";
        ram[70] = "0b10111110001101100000010100100101";
        ram[71] = "0b10111110001011100110110011010011";
        ram[72] = "0b10111101011011010111000000101011";
        ram[73] = "0b00111110001110010110010100101100";
        ram[74] = "0b10111110000110110101111111100101";
        ram[75] = "0b00111100001001011001100001000000";
        ram[76] = "0b00111110000010001101101110001100";
        ram[77] = "0b00111101000001000100001110101100";
        ram[78] = "0b00111101101001111001000111111010";
        ram[79] = "0b10111101010001000100000101000011";
        ram[80] = "0b00111110001000101101111101010000";
        ram[81] = "0b00111101001000101011000101010101";
        ram[82] = "0b10111101101101011001101011011111";
        ram[83] = "0b10111100100100100000011011001000";
        ram[84] = "0b10111101111011011110000100011010";
        ram[85] = "0b00111110010001111110110000110101";
        ram[86] = "0b00111101111000011111110000001001";
        ram[87] = "0b00111101011011000101011111111101";
        ram[88] = "0b10111110001000110101110000011000";
        ram[89] = "0b10111101101111100010110101000111";
        ram[90] = "0b10111101011111110100111110000110";
        ram[91] = "0b10111100101100111110100101110001";
        ram[92] = "0b00111110011101000000110111010100";
        ram[93] = "0b10111100001101100101100010000010";
        ram[94] = "0b00111100010010100100010001011100";
        ram[95] = "0b10111101100111111101100100001100";
        ram[96] = "0b00111110000100110010001110111100";
        ram[97] = "0b10111101101101100100010000110111";
        ram[98] = "0b00111101111011011111001001100111";
        ram[99] = "0b10111110010010110111010010011011";
        ram[100] = "0b00111110000110100000010110011010";
        ram[101] = "0b10111101011010100111000100111101";
        ram[102] = "0b10111110000111011000101011011011";
        ram[103] = "0b00111101111110110101010100100110";
        ram[104] = "0b00111101000001110101010011011001";
        ram[105] = "0b00111110010100001100101001100000";
        ram[106] = "0b10111110000000101100000101101110";
        ram[107] = "0b10111100101011111011011000000110";
        ram[108] = "0b00111101011001011101010101100010";
        ram[109] = "0b10111110000100110110101100001001";
        ram[110] = "0b00111110000000001101100101010001";
        ram[111] = "0b10111110001101111001001101010111";
        ram[112] = "0b00111101001010110100010011011000";
        ram[113] = "0b00111110000010000110110101110010";
        ram[114] = "0b10111100001010010100111100011001";
        ram[115] = "0b00111110001010011010010111101100";
        ram[116] = "0b00111100110000101010111101110010";
        ram[117] = "0b00111100111110110100100111101110";
        ram[118] = "0b00111011100110101010100010111000";
        ram[119] = "0b10111101100101010111010111001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_7) {
meminst = new inference_conv2d_f3_4_0_7_ram("inference_conv2d_f3_4_0_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_7() {
    delete meminst;
}


};//endmodule
#endif
