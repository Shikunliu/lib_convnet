// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_11_H__
#define __inference_conv2d_f3_0_1_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_11_ram) {
        ram[0] = "0b00111101011001111101010001000000";
        ram[1] = "0b10111101110110001100111000101101";
        ram[2] = "0b00111101000100001011000110010100";
        ram[3] = "0b10111101010011011111110001111000";
        ram[4] = "0b00111101100110001100010010111101";
        ram[5] = "0b00111101100010010111000100101101";
        ram[6] = "0b10111101110011111100111011111011";
        ram[7] = "0b10111110000110100100010010000101";
        ram[8] = "0b10111101111100000101100101100100";
        ram[9] = "0b10111101111101101100111011111111";
        ram[10] = "0b10111100011001101010001001100001";
        ram[11] = "0b10111101110011001111011000111000";
        ram[12] = "0b00111101001011000110110110110010";
        ram[13] = "0b10111110001101010000110001011111";
        ram[14] = "0b10111011110011101001010010111001";
        ram[15] = "0b10111101101100010000110000101100";
        ram[16] = "0b10111101100011110001000000110001";
        ram[17] = "0b10111101000110000001101110000000";
        ram[18] = "0b10111101001010001010110111010100";
        ram[19] = "0b10111100010001101001101011101111";
        ram[20] = "0b10111101100100001100111010111010";
        ram[21] = "0b00111100111000001011001010010011";
        ram[22] = "0b00111100110010001001110000011011";
        ram[23] = "0b00111101011100011110010000101110";
        ram[24] = "0b10111101110111001111010101101111";
        ram[25] = "0b00111101100110101010110111100110";
        ram[26] = "0b00111100100101001000000000011111";
        ram[27] = "0b10111110000110011101011000101000";
        ram[28] = "0b10111101000100100011100110100100";
        ram[29] = "0b10111001000010100000111110001110";
        ram[30] = "0b10111100111001110000010101011101";
        ram[31] = "0b00111101001100010111010000110001";
        ram[32] = "0b10111100100100010010011001100011";
        ram[33] = "0b10111100010110110000010100001001";
        ram[34] = "0b00111100110111011110001101110110";
        ram[35] = "0b10111100110111111100111100111110";
        ram[36] = "0b10111100010010001010100001111011";
        ram[37] = "0b00111110000111111110101111010001";
        ram[38] = "0b10111101111111111001100000110001";
        ram[39] = "0b00111100101101100101110111000000";
        ram[40] = "0b00111110001110000110011101101010";
        ram[41] = "0b10111100101011110001111000110000";
        ram[42] = "0b00111011100100101010001001011010";
        ram[43] = "0b10111101111001101010001110111110";
        ram[44] = "0b00111101000110000101001011000010";
        ram[45] = "0b00111101100001010111011010100101";
        ram[46] = "0b00111110001100010001010100010110";
        ram[47] = "0b00111110010100111101001000001111";
        ram[48] = "0b00111101100101000000110111010100";
        ram[49] = "0b10111101001111001111010001111101";
        ram[50] = "0b10111101100010000101001101111110";
        ram[51] = "0b00111101000111010101010100101011";
        ram[52] = "0b00111110000011110010110111000011";
        ram[53] = "0b10111110011001001011000010011111";
        ram[54] = "0b00111101111010111011101000010011";
        ram[55] = "0b10111101100011001001011111100110";
        ram[56] = "0b00111101111110010101011001111110";
        ram[57] = "0b00111101101111000000010001000011";
        ram[58] = "0b10111110001011101110111101011111";
        ram[59] = "0b10111110010001101011101110011001";
        ram[60] = "0b10111101111010100101010100001000";
        ram[61] = "0b10111101110110100011000100011111";
        ram[62] = "0b00111100010010000101010101101111";
        ram[63] = "0b00111101001001111010111110100111";
        ram[64] = "0b00111110010011101010100111100111";
        ram[65] = "0b00111101100111100101011000010010";
        ram[66] = "0b10111110000000001100100001000111";
        ram[67] = "0b10111101010100011011010111110000";
        ram[68] = "0b10111101100011111100001000000111";
        ram[69] = "0b10111101101110001101111000101011";
        ram[70] = "0b00111101111010100110100101111011";
        ram[71] = "0b00111101010110110010110100110010";
        ram[72] = "0b10111101010000010100110100111101";
        ram[73] = "0b10111101110100101010010010011000";
        ram[74] = "0b00111101010010000011101101101110";
        ram[75] = "0b10111101100001100100011101001111";
        ram[76] = "0b00111110000101010111010010110100";
        ram[77] = "0b10111011010111101101000000000101";
        ram[78] = "0b10111011110000011100100011001101";
        ram[79] = "0b10111100011010101000100100001011";
        ram[80] = "0b00111010101011010110000001110110";
        ram[81] = "0b10111101010111101100101101001101";
        ram[82] = "0b00111110001111101101011010111011";
        ram[83] = "0b00111101101100010010100110110001";
        ram[84] = "0b00111101111101011001010111111111";
        ram[85] = "0b10111101110001101110011010110001";
        ram[86] = "0b10111100101101100110110000000011";
        ram[87] = "0b10111101100000001000110111000100";
        ram[88] = "0b10111101101010111010011000001100";
        ram[89] = "0b10111100101010011011011110001001";
        ram[90] = "0b00111101111001101011111001111011";
        ram[91] = "0b10111110001101111100101101110001";
        ram[92] = "0b00111101001100111111010100010101";
        ram[93] = "0b00111101100101011001111011000000";
        ram[94] = "0b00111110001001100100100010000100";
        ram[95] = "0b10111011101100010010011101010101";
        ram[96] = "0b00111101111011101001100010011010";
        ram[97] = "0b00111100001011001001111001011001";
        ram[98] = "0b00111101010010101111101000010100";
        ram[99] = "0b10111101100111111111101011101010";
        ram[100] = "0b00111110010100010101011101101001";
        ram[101] = "0b00111101000111001010101001110110";
        ram[102] = "0b10111101101110111100011110110100";
        ram[103] = "0b00111101111011001010010011110100";
        ram[104] = "0b00111101100110100011100110011101";
        ram[105] = "0b00111110000111101010110001000011";
        ram[106] = "0b00111101101111001101110111010111";
        ram[107] = "0b00111110001100010110011011100000";
        ram[108] = "0b10111110001110001010100001101101";
        ram[109] = "0b10111101111001000111110000110001";
        ram[110] = "0b00111011010101110001111000110100";
        ram[111] = "0b10111101100100001000101010010010";
        ram[112] = "0b00111100101000000110000111010101";
        ram[113] = "0b00111110011000000110111001011101";
        ram[114] = "0b00111100111001110010100000101101";
        ram[115] = "0b10111011110011100110101111011110";
        ram[116] = "0b00111100011010111111111110011000";
        ram[117] = "0b10111101111011001001111110110110";
        ram[118] = "0b00111101100110011101000011001111";
        ram[119] = "0b00111101100101111010000001001011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_11) {
meminst = new inference_conv2d_f3_0_1_11_ram("inference_conv2d_f3_0_1_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_11() {
    delete meminst;
}


};//endmodule
#endif
