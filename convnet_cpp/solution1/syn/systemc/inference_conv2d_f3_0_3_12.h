// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_12_H__
#define __inference_conv2d_f3_0_3_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_12_ram) {
        ram[0] = "0b00111101000011110000000010111001";
        ram[1] = "0b10111101111100010011011000011110";
        ram[2] = "0b00111101001000111001101110010110";
        ram[3] = "0b00111101011101110111000101010001";
        ram[4] = "0b10111110001011111101101110010000";
        ram[5] = "0b10111101101011111101011110100001";
        ram[6] = "0b00111101000111010000001101111100";
        ram[7] = "0b00111101101001001100011010100100";
        ram[8] = "0b10111101000100110110011011100101";
        ram[9] = "0b00111100110110011010000011110001";
        ram[10] = "0b00111100001101011101011011100111";
        ram[11] = "0b00111101010110111100000100100111";
        ram[12] = "0b10111101100100000000011100000111";
        ram[13] = "0b00111100001011111001011011000111";
        ram[14] = "0b00111110000100001001000001110001";
        ram[15] = "0b10111101001111101110110010001010";
        ram[16] = "0b00111100110101000000011011101000";
        ram[17] = "0b00111101101110111001101000010111";
        ram[18] = "0b00111101001000000010000000110001";
        ram[19] = "0b10111100010011000011110011101111";
        ram[20] = "0b00111110000010101100010001110010";
        ram[21] = "0b10111101010101110010111011010110";
        ram[22] = "0b00111101010010011111000011001010";
        ram[23] = "0b00111110000001010110100100101011";
        ram[24] = "0b10111110000010100101001100110011";
        ram[25] = "0b00111100111000100001110011000000";
        ram[26] = "0b10111100001110010010000001001000";
        ram[27] = "0b10111110000111110010001111001101";
        ram[28] = "0b10111100100111100000001001001010";
        ram[29] = "0b00111101100000100100000101001011";
        ram[30] = "0b10111101100100010100001111110101";
        ram[31] = "0b10111101101101111000111010101101";
        ram[32] = "0b10111101110000001010011010011110";
        ram[33] = "0b10111100111001001100100000110110";
        ram[34] = "0b10111100110111000010000010010010";
        ram[35] = "0b10111101000001100010001000111110";
        ram[36] = "0b10111100110011010100011000111010";
        ram[37] = "0b10111110001101010110000110010001";
        ram[38] = "0b10111010100010000110110000100000";
        ram[39] = "0b00111101100101001011000011100010";
        ram[40] = "0b00111101111110111001100011001000";
        ram[41] = "0b00111011110011000001001000010010";
        ram[42] = "0b10111101100110011000001001010010";
        ram[43] = "0b10111001011110111110100011101111";
        ram[44] = "0b10111101001110110111011111110110";
        ram[45] = "0b00111100100010101011001001110110";
        ram[46] = "0b10111101011010011101110110110100";
        ram[47] = "0b00111100011111100000010101010100";
        ram[48] = "0b00111110000101101010111110001010";
        ram[49] = "0b00111101110001010100101011010000";
        ram[50] = "0b10111101100110000010010111000110";
        ram[51] = "0b10111101110011101110010000011001";
        ram[52] = "0b10111101011010101100100111011000";
        ram[53] = "0b10111101000001010101001010111011";
        ram[54] = "0b00111110000100110101000001001100";
        ram[55] = "0b00111100110011110010000000101110";
        ram[56] = "0b00111101101110001110010100111111";
        ram[57] = "0b10111110010010000111011101101000";
        ram[58] = "0b10111110000111011010001100111100";
        ram[59] = "0b10111101100010011010001100001010";
        ram[60] = "0b10111101100111000100100111010101";
        ram[61] = "0b00111101001110010010100000001010";
        ram[62] = "0b10111101001101110100001000000110";
        ram[63] = "0b00111100111000111011010101000111";
        ram[64] = "0b10111100101000111000000001101101";
        ram[65] = "0b10111101011010101001110101100010";
        ram[66] = "0b00111100101100011010001000000100";
        ram[67] = "0b00111110000111111011100101111100";
        ram[68] = "0b10111101110110010001110101011000";
        ram[69] = "0b10111101111110011010111000001100";
        ram[70] = "0b10111101101001100101000001101111";
        ram[71] = "0b10111101101001100010011011001110";
        ram[72] = "0b10111100110111011001101000001111";
        ram[73] = "0b00111101011100001000000010011100";
        ram[74] = "0b10111110010010101000011011010111";
        ram[75] = "0b10111101110001010100101101100100";
        ram[76] = "0b00111110000001011010111011100110";
        ram[77] = "0b00111101100000011010001101000110";
        ram[78] = "0b10111100101010010111001100101011";
        ram[79] = "0b00111100010011011101110100000011";
        ram[80] = "0b00111100100011101101110011011101";
        ram[81] = "0b10111101101001001100111110011011";
        ram[82] = "0b10111101100100000110110011001010";
        ram[83] = "0b10111101111111010111110110111111";
        ram[84] = "0b10111101110111010010111010010100";
        ram[85] = "0b10111110000101100100000100101101";
        ram[86] = "0b10111101110110001110100001100100";
        ram[87] = "0b10111100101000001110000100100001";
        ram[88] = "0b00111101111010110011101010101100";
        ram[89] = "0b00111101010000010101111011011011";
        ram[90] = "0b10111101001100001001000100010010";
        ram[91] = "0b00111101100001101011011011100001";
        ram[92] = "0b10111100111010000001000011000000";
        ram[93] = "0b10111101100010110100000010011000";
        ram[94] = "0b10111101110000010111111001010000";
        ram[95] = "0b10111010011100001100101111001001";
        ram[96] = "0b00111101010101101001100000001101";
        ram[97] = "0b00111101100011101100010111011001";
        ram[98] = "0b10111110001111001001110101011010";
        ram[99] = "0b00111011110101101000100101001111";
        ram[100] = "0b10111101110100100001001001010001";
        ram[101] = "0b10111101000010110100111001111101";
        ram[102] = "0b10111101010001100010101010111100";
        ram[103] = "0b10111101111110010011110001000111";
        ram[104] = "0b10111101010110010001101110010000";
        ram[105] = "0b00111100111101000111010110001000";
        ram[106] = "0b00111010111110010101100010011100";
        ram[107] = "0b00111101110000001111011100110100";
        ram[108] = "0b00111101111000000101110001000110";
        ram[109] = "0b10111101110001111000111011010101";
        ram[110] = "0b00111011001110110001101111001010";
        ram[111] = "0b00111101011001010101000100001101";
        ram[112] = "0b10111101001000000100010001111001";
        ram[113] = "0b00111101001101101000101110101101";
        ram[114] = "0b00111101010010000001011001101010";
        ram[115] = "0b00111110001111100001001001100010";
        ram[116] = "0b10111101010011011010100100011011";
        ram[117] = "0b10111110000100101101100110001100";
        ram[118] = "0b00111100010011111111001010000111";
        ram[119] = "0b00111101100000010100101000001010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_12) {
meminst = new inference_conv2d_f3_0_3_12_ram("inference_conv2d_f3_0_3_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_12() {
    delete meminst;
}


};//endmodule
#endif
