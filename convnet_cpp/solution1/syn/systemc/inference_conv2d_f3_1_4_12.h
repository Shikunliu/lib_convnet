// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_12_H__
#define __inference_conv2d_f3_1_4_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_12_ram) {
        ram[0] = "0b00111110000110111101000101100111";
        ram[1] = "0b10111101101001001001110010001010";
        ram[2] = "0b00111101000000000100000101010100";
        ram[3] = "0b10111101011110000001101000001000";
        ram[4] = "0b10111110001110001111000001000001";
        ram[5] = "0b10111101000011011011111100100000";
        ram[6] = "0b00111101111101001001111010001000";
        ram[7] = "0b00111011100101101010110000101001";
        ram[8] = "0b00111101110100100101000000101111";
        ram[9] = "0b10111101101001000010001111110100";
        ram[10] = "0b00111101010010101101101010000100";
        ram[11] = "0b00111011111000110000001111000110";
        ram[12] = "0b10111011101101001111101101110101";
        ram[13] = "0b10111110010100001000011001111011";
        ram[14] = "0b00111011001110101000100001111101";
        ram[15] = "0b10111101101011111101011100011011";
        ram[16] = "0b00111100101000100110001010010110";
        ram[17] = "0b10111101100010010110010110100101";
        ram[18] = "0b00111101010001100000110001101111";
        ram[19] = "0b10111101101111011011000001100101";
        ram[20] = "0b00111110001000000011101110000010";
        ram[21] = "0b00111011110111101010100111101111";
        ram[22] = "0b10111101011100011100111000001110";
        ram[23] = "0b00111011000100100001000011100100";
        ram[24] = "0b00111110001010100111010111001101";
        ram[25] = "0b00111101111011000111100001100100";
        ram[26] = "0b10111100001101100001100011000001";
        ram[27] = "0b00111101011011010101100101101010";
        ram[28] = "0b00111110000010111111001000101100";
        ram[29] = "0b10111101110011010110101100100011";
        ram[30] = "0b00111110001111100000110011100001";
        ram[31] = "0b00111101100010100010011100011011";
        ram[32] = "0b00111101001110000000111100111011";
        ram[33] = "0b00111011100101010001001010100001";
        ram[34] = "0b00111100000011101010110011110111";
        ram[35] = "0b10111101110011010011101111110011";
        ram[36] = "0b10111110000011011101011000010111";
        ram[37] = "0b00111101001101000100100010001100";
        ram[38] = "0b10111100000001111101001101110100";
        ram[39] = "0b00111110010110100100101001001001";
        ram[40] = "0b10111101100100110111100010010000";
        ram[41] = "0b00111101101101110011000001101000";
        ram[42] = "0b00111011111100111000110111010111";
        ram[43] = "0b10111110001010101001111110111110";
        ram[44] = "0b00111100000111011111000011100001";
        ram[45] = "0b10111110000011110000100110010110";
        ram[46] = "0b00111101011111000000101011011110";
        ram[47] = "0b00111101100011011000001000110100";
        ram[48] = "0b10111101001010100110000010010001";
        ram[49] = "0b10111101000000111100010000010000";
        ram[50] = "0b10111010110010011011000000111000";
        ram[51] = "0b10111110000111011010000010011101";
        ram[52] = "0b00111101000000001010001000000001";
        ram[53] = "0b00111101111111010011110111001001";
        ram[54] = "0b10111110000000011110000011000110";
        ram[55] = "0b00111100010010110111100100010000";
        ram[56] = "0b00111101100000001011010011010100";
        ram[57] = "0b00111110001000000110111001011101";
        ram[58] = "0b10111110000011101001110010001000";
        ram[59] = "0b10111011110011100011110100001111";
        ram[60] = "0b10111011101001010000101111010011";
        ram[61] = "0b10111101101101100101001011100110";
        ram[62] = "0b00111110001001110001010010111010";
        ram[63] = "0b00111100011110101101010111110101";
        ram[64] = "0b00111101100110011010010010011100";
        ram[65] = "0b00111101111011001011100111101101";
        ram[66] = "0b00111101100001111111000001001100";
        ram[67] = "0b10111101000000000000110000101010";
        ram[68] = "0b00111100000010111100001011001100";
        ram[69] = "0b10111110001011010010110110001000";
        ram[70] = "0b00111100100111001001010000100000";
        ram[71] = "0b10111101101110011000000101111100";
        ram[72] = "0b10111110000111010010010010011110";
        ram[73] = "0b10111100111101000011111100110111";
        ram[74] = "0b10111101101001001110001110101111";
        ram[75] = "0b00111100111010101101100101011101";
        ram[76] = "0b00111101100010110011100111001000";
        ram[77] = "0b00111011001010110000100000101100";
        ram[78] = "0b10111101001011000011110001001110";
        ram[79] = "0b00111010100011101000100000011001";
        ram[80] = "0b10111101110001001111010100010111";
        ram[81] = "0b10111101000101010011101011100000";
        ram[82] = "0b10111100010101000111001100011111";
        ram[83] = "0b00111101010100110111011111111101";
        ram[84] = "0b00111101111001011110011110000110";
        ram[85] = "0b10111100101000000100011000100110";
        ram[86] = "0b10111110000011111001011011100001";
        ram[87] = "0b10111110000111010110111000000101";
        ram[88] = "0b10111101010000011011001111100101";
        ram[89] = "0b10111110000100011101011010001100";
        ram[90] = "0b00111011110010000100101110001001";
        ram[91] = "0b10111100001101111010000010000000";
        ram[92] = "0b10111101110001100000000110000111";
        ram[93] = "0b00111101100101111010001000000101";
        ram[94] = "0b10111101111001000101110010111100";
        ram[95] = "0b00111101111010011100110111000100";
        ram[96] = "0b00111101011100010001000001011110";
        ram[97] = "0b00111101100111100001000100010010";
        ram[98] = "0b00111101001111010110000111000000";
        ram[99] = "0b00111100100001110110000111110100";
        ram[100] = "0b00111101111100011110001000010101";
        ram[101] = "0b10111101111001000100000011110010";
        ram[102] = "0b10111101100000010111011100111100";
        ram[103] = "0b00111101001001000110101011100100";
        ram[104] = "0b00111101100000100011011100010010";
        ram[105] = "0b00111110001101110011111010101011";
        ram[106] = "0b10111100100100010110000001000101";
        ram[107] = "0b00111101010000000100111000111001";
        ram[108] = "0b00111110000000000110011011000011";
        ram[109] = "0b10111101100000000101101100111010";
        ram[110] = "0b10111101000110100111100000011100";
        ram[111] = "0b00111100010111111010000101010000";
        ram[112] = "0b00111101101011100111100111111011";
        ram[113] = "0b10111110000101001010101100011101";
        ram[114] = "0b10111110000000111111011100000110";
        ram[115] = "0b00111101111001101011110111110101";
        ram[116] = "0b10111101011010001000011011101101";
        ram[117] = "0b00111100100100010101101110101000";
        ram[118] = "0b10111101001000110110011001101100";
        ram[119] = "0b00111011111001001111011010100101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_12) {
meminst = new inference_conv2d_f3_1_4_12_ram("inference_conv2d_f3_1_4_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_12() {
    delete meminst;
}


};//endmodule
#endif
