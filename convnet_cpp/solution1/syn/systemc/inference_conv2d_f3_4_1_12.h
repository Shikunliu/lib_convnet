// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_12_H__
#define __inference_conv2d_f3_4_1_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_12_ram) {
        ram[0] = "0b10111101100010100111110110111000";
        ram[1] = "0b00111101011000011001101001101010";
        ram[2] = "0b10111100100111001000001011101110";
        ram[3] = "0b00111110001000110000010100010000";
        ram[4] = "0b00111100101011110000110010010011";
        ram[5] = "0b00111101101111001110100101101101";
        ram[6] = "0b10111101111010001101011011010100";
        ram[7] = "0b10111110001010010100100010011001";
        ram[8] = "0b00111110010000000111111001011010";
        ram[9] = "0b10111100111010100001101010000110";
        ram[10] = "0b00111101111101111000100000010010";
        ram[11] = "0b10111101010100000010101001101010";
        ram[12] = "0b00111101001100101000100101101111";
        ram[13] = "0b10111101000100000101000101101100";
        ram[14] = "0b00111100010101110100111101110010";
        ram[15] = "0b00111101010111110100101101010101";
        ram[16] = "0b00111100100100001001011110010010";
        ram[17] = "0b00111110000101101000101010010011";
        ram[18] = "0b10111101110010001101001010010101";
        ram[19] = "0b10111101001000111001000110000101";
        ram[20] = "0b00111100110000100011001111101101";
        ram[21] = "0b00111101011010000000011110100001";
        ram[22] = "0b00111101101001101110011111011001";
        ram[23] = "0b10111101100110000001001100101010";
        ram[24] = "0b10111101000010000110000011000010";
        ram[25] = "0b10111100110011010110011110010010";
        ram[26] = "0b10111101101001010011011110100000";
        ram[27] = "0b10111100111101000110011101000110";
        ram[28] = "0b00111100011000000111010001001001";
        ram[29] = "0b00111101101010100110001101110011";
        ram[30] = "0b10111110000011011110011100100001";
        ram[31] = "0b10111101001001010101010001001101";
        ram[32] = "0b00111100000101101010101010011100";
        ram[33] = "0b00111100001000011000000111100110";
        ram[34] = "0b00111101101000010011101001101010";
        ram[35] = "0b00111101001001000101101100001110";
        ram[36] = "0b00111110001101010101111011110010";
        ram[37] = "0b10111011100010101000000011001101";
        ram[38] = "0b00111110000010100011101101011000";
        ram[39] = "0b00111110000000000100100110101010";
        ram[40] = "0b00111100101000110000000100100001";
        ram[41] = "0b00111101111010001000100100111011";
        ram[42] = "0b00111100101110011011110010111010";
        ram[43] = "0b00111101110101110000011000001100";
        ram[44] = "0b10111101001111010001111010111111";
        ram[45] = "0b00111101011010110010011110010110";
        ram[46] = "0b10111101001001111001000011010011";
        ram[47] = "0b00111101100101011100111100010111";
        ram[48] = "0b10111101001100100001000000000011";
        ram[49] = "0b00111011000011100100001011111001";
        ram[50] = "0b10111110010000110010111101000101";
        ram[51] = "0b00111101001010010011100010101001";
        ram[52] = "0b00111101100001110011110111111101";
        ram[53] = "0b00111011111011001001010000010010";
        ram[54] = "0b00111101101110101111100101110011";
        ram[55] = "0b10111101101000111100100001001111";
        ram[56] = "0b10111101101000001010001001101101";
        ram[57] = "0b10111110000000101110100001111101";
        ram[58] = "0b10111100110110111100100010110011";
        ram[59] = "0b10111101100101011001000100000100";
        ram[60] = "0b10111110010000101111011111110101";
        ram[61] = "0b00111101110111100000000101011000";
        ram[62] = "0b10111101110111001011011010000101";
        ram[63] = "0b10111100000011001111100000100001";
        ram[64] = "0b00111101101110011001110001111100";
        ram[65] = "0b00111110000101101001101110011101";
        ram[66] = "0b10111101111100110111001110110000";
        ram[67] = "0b00111100110010010101001000100100";
        ram[68] = "0b10111101100101100000011111010010";
        ram[69] = "0b00111101101011010100001100010100";
        ram[70] = "0b10111100000110111101111010011000";
        ram[71] = "0b00111101100110100101111000000000";
        ram[72] = "0b10111110000100010000101110100110";
        ram[73] = "0b00111101001101101011000100110111";
        ram[74] = "0b00111101101000111001010110001110";
        ram[75] = "0b10111101110111100100101101000101";
        ram[76] = "0b10111101110001010010100011110010";
        ram[77] = "0b00111100110001011011010101001100";
        ram[78] = "0b00111100110010000000110100010101";
        ram[79] = "0b00111101100101001110100110011100";
        ram[80] = "0b00111101101000011110110101001101";
        ram[81] = "0b00111100111101000111011001011111";
        ram[82] = "0b00111101110011101100100011010110";
        ram[83] = "0b10111110010010101100101101000011";
        ram[84] = "0b00111110000000000001111111111011";
        ram[85] = "0b00111101110010100001011001101111";
        ram[86] = "0b10111101100000110011101000011111";
        ram[87] = "0b00111101110110010010100101100111";
        ram[88] = "0b00111101101010001111101010100011";
        ram[89] = "0b10111101110001100000110101100000";
        ram[90] = "0b10111101001101010111000101100110";
        ram[91] = "0b00111101111101101011001000101001";
        ram[92] = "0b00111110001001001111001011110001";
        ram[93] = "0b00111100100100101111001011101100";
        ram[94] = "0b00111100011101011010110001010101";
        ram[95] = "0b10111110000110001111110000001101";
        ram[96] = "0b00111101110110111100101010010111";
        ram[97] = "0b00111011111111101010101010010101";
        ram[98] = "0b10111101000100101101111110100001";
        ram[99] = "0b10111101100010010101011100000100";
        ram[100] = "0b00111101100011001001001010001101";
        ram[101] = "0b00111101001010111000001110100111";
        ram[102] = "0b00111101010011001110111011000110";
        ram[103] = "0b00111101100010111001101001110101";
        ram[104] = "0b00111101010011010000111110110011";
        ram[105] = "0b10111101010101000001100000000000";
        ram[106] = "0b10111100010110110010110000001011";
        ram[107] = "0b00111101001011000110010000100111";
        ram[108] = "0b00111101110001011101010110010111";
        ram[109] = "0b10111100101100000111110101000001";
        ram[110] = "0b00111101100011011110011000101111";
        ram[111] = "0b00111101110011010000100010010010";
        ram[112] = "0b00111101101110111100001111101110";
        ram[113] = "0b00111100011001100010001001110100";
        ram[114] = "0b00111101011000110100010101001010";
        ram[115] = "0b00111110000010100110011111101000";
        ram[116] = "0b10111011110001111010000000101000";
        ram[117] = "0b10111101100010000100011011110110";
        ram[118] = "0b00111101100001101001001101000111";
        ram[119] = "0b00111101001100001011010110010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_12) {
meminst = new inference_conv2d_f3_4_1_12_ram("inference_conv2d_f3_4_1_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_12() {
    delete meminst;
}


};//endmodule
#endif
