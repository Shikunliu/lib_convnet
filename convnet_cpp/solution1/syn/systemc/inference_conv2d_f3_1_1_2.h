// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_2_H__
#define __inference_conv2d_f3_1_1_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_2_ram) {
        ram[0] = "0b10111101100011110000011000111011";
        ram[1] = "0b00111110000011111101001000100000";
        ram[2] = "0b10111101001011101010110101011101";
        ram[3] = "0b00111101110011000001000111111111";
        ram[4] = "0b00111101001001001110001100101001";
        ram[5] = "0b00111101000000011111001111011011";
        ram[6] = "0b10111100000010101011101001111001";
        ram[7] = "0b10111101001111000110001010000111";
        ram[8] = "0b10111011100011011001010110010101";
        ram[9] = "0b10111101110011101000100001011001";
        ram[10] = "0b00111101011111011001001100111110";
        ram[11] = "0b10111101011011011110000011001001";
        ram[12] = "0b10111101000100010101101000010101";
        ram[13] = "0b10111110010000101111101010010100";
        ram[14] = "0b10111100100110000101011110110000";
        ram[15] = "0b00111110000011001110111001011011";
        ram[16] = "0b00111100110011000001101111001101";
        ram[17] = "0b00111101101101011001111101101111";
        ram[18] = "0b10111110000001011100111010011110";
        ram[19] = "0b10111110000101010110100101101110";
        ram[20] = "0b10111101010010101000111111000001";
        ram[21] = "0b10111101101000100111111110101111";
        ram[22] = "0b10111110000111111010001010101101";
        ram[23] = "0b10111101000001111111100011011000";
        ram[24] = "0b10111101001111001100101010001100";
        ram[25] = "0b10111110000010011100110100111110";
        ram[26] = "0b00111101111100111011000100000111";
        ram[27] = "0b10111001001001100100011100100111";
        ram[28] = "0b10111101101010011111111011111111";
        ram[29] = "0b10111110000101100101101011011110";
        ram[30] = "0b00111101100100101011011110101110";
        ram[31] = "0b00111100110000001100000000011001";
        ram[32] = "0b10111100110011010100101101111000";
        ram[33] = "0b10111011101110101001011011101010";
        ram[34] = "0b10111011101101100001011000010010";
        ram[35] = "0b00111101100100111110110101000101";
        ram[36] = "0b10111101010001011101110110010000";
        ram[37] = "0b10111101000100010101000110010111";
        ram[38] = "0b10111101011010101000001000000100";
        ram[39] = "0b00111101110101001010111101001111";
        ram[40] = "0b00111011110101011010100000101000";
        ram[41] = "0b10111110010010110101100001001011";
        ram[42] = "0b10111110001101101111011001010001";
        ram[43] = "0b00111101100011100101000110011101";
        ram[44] = "0b10111100101111011100001101000101";
        ram[45] = "0b00111100000110101000100010010111";
        ram[46] = "0b00111100001100110000000011011110";
        ram[47] = "0b00111001010111011100101001100101";
        ram[48] = "0b00111011100110101001100110110100";
        ram[49] = "0b10111101110101000001100011010111";
        ram[50] = "0b10111110000101101100001011110000";
        ram[51] = "0b00111100011100100110001111001011";
        ram[52] = "0b00111110000101001101001011110110";
        ram[53] = "0b10111110001100011111110111011111";
        ram[54] = "0b00111011000001010111100101111100";
        ram[55] = "0b00111101101100101011110101110010";
        ram[56] = "0b00111101110000011110100100000001";
        ram[57] = "0b00111110000000111000010111000110";
        ram[58] = "0b00111110000001011000001110100101";
        ram[59] = "0b10111101001111110111111110101000";
        ram[60] = "0b00111101000110011100100000101000";
        ram[61] = "0b10111110000010101110010110111101";
        ram[62] = "0b10111110001010000000000011101011";
        ram[63] = "0b00111101110000110101100100110110";
        ram[64] = "0b00111100101001100101101100010011";
        ram[65] = "0b00111101110011100001111011110111";
        ram[66] = "0b00111100111101111011101000010110";
        ram[67] = "0b10111110000010101001100011101110";
        ram[68] = "0b10111101010011111111001100101000";
        ram[69] = "0b10111101100111011111110100100110";
        ram[70] = "0b00111101001100001101001100000111";
        ram[71] = "0b00111110000011010110111101010100";
        ram[72] = "0b10111101100011011110011110110101";
        ram[73] = "0b10111101000011101011011010010111";
        ram[74] = "0b00111101010011000011101001101011";
        ram[75] = "0b00111101011000000010110100010111";
        ram[76] = "0b10111101011001100011000100000111";
        ram[77] = "0b00111100110100100111010100011000";
        ram[78] = "0b00111100101011000000111110111110";
        ram[79] = "0b10111101010111000000001001011111";
        ram[80] = "0b00111101100100010110000010010101";
        ram[81] = "0b00111100111000011010000010011001";
        ram[82] = "0b10111110000111010101010010010111";
        ram[83] = "0b00111101111010011111100101001000";
        ram[84] = "0b10111101101101100100110011101011";
        ram[85] = "0b00111101101111000011101000110110";
        ram[86] = "0b10111101011000000111110110111001";
        ram[87] = "0b10111110000111010010110110001000";
        ram[88] = "0b00111100110111000010010000100011";
        ram[89] = "0b10111011010010110110100000011110";
        ram[90] = "0b10111101011001111011111101100010";
        ram[91] = "0b00111100100111101001001011001000";
        ram[92] = "0b00111110000001101011000111100110";
        ram[93] = "0b10111101110101111001011111001100";
        ram[94] = "0b10111110010001001111110101101101";
        ram[95] = "0b00111101111100111000101111001110";
        ram[96] = "0b10111101100001011001011010000101";
        ram[97] = "0b00111110000101000001110010000010";
        ram[98] = "0b10111011110100000111001001011110";
        ram[99] = "0b00111101110010001011011101111001";
        ram[100] = "0b00111101110001110010111101001111";
        ram[101] = "0b00111101000100011101010101100101";
        ram[102] = "0b00111100110110010001111000010100";
        ram[103] = "0b00111101011010000110100001101001";
        ram[104] = "0b00111011101010011000011000100001";
        ram[105] = "0b10111101011000000101010011010100";
        ram[106] = "0b00111100110110111101011100101100";
        ram[107] = "0b10111110000010011101010000001111";
        ram[108] = "0b10111101001101000111011110111100";
        ram[109] = "0b00111110000000001000101111111100";
        ram[110] = "0b10111101100100100110011011110000";
        ram[111] = "0b00111100111100100110100000110010";
        ram[112] = "0b00111101000101000111010000101011";
        ram[113] = "0b00111101011100000001001101011001";
        ram[114] = "0b00111101010001010110101110010101";
        ram[115] = "0b10111100111010011110110000101101";
        ram[116] = "0b00111101101101010110010101110010";
        ram[117] = "0b00111110001101111111110110000010";
        ram[118] = "0b10111101111001000111011011110011";
        ram[119] = "0b00111100011111101001011011011111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_2) {
meminst = new inference_conv2d_f3_1_1_2_ram("inference_conv2d_f3_1_1_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_2() {
    delete meminst;
}


};//endmodule
#endif
