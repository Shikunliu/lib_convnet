// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_6_H__
#define __inference_conv2d_f3_3_2_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_6_ram) {
        ram[0] = "0b00111101010101101100011011101100";
        ram[1] = "0b00111100101010001011001110110011";
        ram[2] = "0b10111100110100100110011110101100";
        ram[3] = "0b00111110001100110111001101101101";
        ram[4] = "0b10111101110100100100111000010110";
        ram[5] = "0b00111101100111100110001111101001";
        ram[6] = "0b00111100100011100000101010111010";
        ram[7] = "0b10111100100011111101010010111111";
        ram[8] = "0b00111110000101110010110110100001";
        ram[9] = "0b00111110001100111011111011101100";
        ram[10] = "0b10111101100110010010010111001001";
        ram[11] = "0b10111101110001100000110011011010";
        ram[12] = "0b00111110000011001010001010011000";
        ram[13] = "0b00111101011000000001110101000001";
        ram[14] = "0b00111100001110110110110010111110";
        ram[15] = "0b10111100010100100001010101110111";
        ram[16] = "0b00111110010001011111100111011111";
        ram[17] = "0b00111100000011111111001011111101";
        ram[18] = "0b10111100100010110101011010101011";
        ram[19] = "0b10111110000111010111101001010111";
        ram[20] = "0b10111101001110010000110000100110";
        ram[21] = "0b10111101110010000000010111110011";
        ram[22] = "0b10111101111110111100001111000110";
        ram[23] = "0b10111100101001000010001001010100";
        ram[24] = "0b00111101010011111111101110001011";
        ram[25] = "0b10111100011000000111000010000011";
        ram[26] = "0b00111101111110100010010010001001";
        ram[27] = "0b00111101001101000011000000111001";
        ram[28] = "0b00111100000011010101101100110010";
        ram[29] = "0b10111101100111101111101010100100";
        ram[30] = "0b10111101011110011001001100110100";
        ram[31] = "0b10111100111001011111100100100011";
        ram[32] = "0b10111110000011101011010000100000";
        ram[33] = "0b10111101101110010100100111110110";
        ram[34] = "0b10111101111110010010110010001100";
        ram[35] = "0b10111100100010111100110111111111";
        ram[36] = "0b00111101111001110001010011111101";
        ram[37] = "0b00111110010000110011011100100010";
        ram[38] = "0b10111011100011000001111000011011";
        ram[39] = "0b10111110001011101000110000000101";
        ram[40] = "0b10111101111001000000101111111110";
        ram[41] = "0b00111110000010010100010111111010";
        ram[42] = "0b10111110001110001100010111001010";
        ram[43] = "0b00111110010101000011011010111001";
        ram[44] = "0b00111110000011110011100111010010";
        ram[45] = "0b10111100000011110110000010010000";
        ram[46] = "0b10111110010110010001000111001111";
        ram[47] = "0b10111100101011001110101011100101";
        ram[48] = "0b10111101011100000010110010111001";
        ram[49] = "0b10111100101111001001100100001110";
        ram[50] = "0b10111011111000000011111110011011";
        ram[51] = "0b00111110011001100010001111010001";
        ram[52] = "0b10111101011101001000110101110001";
        ram[53] = "0b10111101101011110100001000101000";
        ram[54] = "0b00111101001100111000011000111111";
        ram[55] = "0b00111101100010100010011100000000";
        ram[56] = "0b10111101100110001101011100111111";
        ram[57] = "0b10111110000011001111110100001001";
        ram[58] = "0b00111101100101111010000010011011";
        ram[59] = "0b00111101100010000111000011110101";
        ram[60] = "0b10111110000100111101011001000001";
        ram[61] = "0b10111100010101001101110110101000";
        ram[62] = "0b10111101111010100110001000100100";
        ram[63] = "0b10111101010010111101101010101111";
        ram[64] = "0b10111110011111000110000111011000";
        ram[65] = "0b00111110001001011101100010010101";
        ram[66] = "0b10111100110001001001110111110100";
        ram[67] = "0b00111100100100110110010100111000";
        ram[68] = "0b10111101100000000011010000000010";
        ram[69] = "0b10111101011001000000111010011101";
        ram[70] = "0b10111101110011010100011001101111";
        ram[71] = "0b10111101111101011001101010110111";
        ram[72] = "0b10111101010000001011100100010011";
        ram[73] = "0b10111101100001101111111010100111";
        ram[74] = "0b00111110000000101111111011000101";
        ram[75] = "0b00111110000000011011011001001110";
        ram[76] = "0b00111110001110010000101010111011";
        ram[77] = "0b10111101110000000011011001101100";
        ram[78] = "0b10111101000001011110000000010100";
        ram[79] = "0b00111011110100001011100100010110";
        ram[80] = "0b00111101111100011010101010000010";
        ram[81] = "0b10111101010111100111101100010101";
        ram[82] = "0b10111100100110110000110100000001";
        ram[83] = "0b10111110000101100100001001111100";
        ram[84] = "0b10111101101100110001101110110110";
        ram[85] = "0b10111110000100010011011000011110";
        ram[86] = "0b00111100001101011001101010000001";
        ram[87] = "0b00111101100110001101010110011111";
        ram[88] = "0b10111100000000111001100000100101";
        ram[89] = "0b00111101101000010101010110000101";
        ram[90] = "0b10111101100110100001111110110110";
        ram[91] = "0b10111101110010010010011001000010";
        ram[92] = "0b00111100111010001010100100110111";
        ram[93] = "0b00111011110101110100011101111010";
        ram[94] = "0b00111101111011111111110010011000";
        ram[95] = "0b00111110000001111010100100011001";
        ram[96] = "0b00111101001101001001011011000110";
        ram[97] = "0b00111101000110010100010110000001";
        ram[98] = "0b10111101100110110011100101000001";
        ram[99] = "0b00111011010101101100101000100111";
        ram[100] = "0b00111101101000000111100100110111";
        ram[101] = "0b00111101010000110010100010001111";
        ram[102] = "0b00111100100111000101100011111100";
        ram[103] = "0b10111011000111101100001111111011";
        ram[104] = "0b00111101001100111110110010010111";
        ram[105] = "0b00111101110100010001010000001010";
        ram[106] = "0b10111101101000100010111100100111";
        ram[107] = "0b10111011111110010101000000001110";
        ram[108] = "0b10111101100011100001000001001001";
        ram[109] = "0b00111110000000010111111110000100";
        ram[110] = "0b10111100110100011101010010101001";
        ram[111] = "0b10111100111101000011101101110001";
        ram[112] = "0b00111100000011101001110011010001";
        ram[113] = "0b00111101000000010000111010001000";
        ram[114] = "0b10111001001101111000110011010010";
        ram[115] = "0b00111100000110001010000001101011";
        ram[116] = "0b00111100011000011101010100000111";
        ram[117] = "0b00111101000111101101010010000111";
        ram[118] = "0b10111101101100110010110010100101";
        ram[119] = "0b00111110001011100101000100001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_6) {
meminst = new inference_conv2d_f3_3_2_6_ram("inference_conv2d_f3_3_2_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_6() {
    delete meminst;
}


};//endmodule
#endif
