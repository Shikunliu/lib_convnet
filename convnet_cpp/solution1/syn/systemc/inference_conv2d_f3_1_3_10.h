// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_10_H__
#define __inference_conv2d_f3_1_3_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_10_ram) {
        ram[0] = "0b00111101010011100100111000100111";
        ram[1] = "0b10111011010000110101110110111000";
        ram[2] = "0b00111101101000001001011000011011";
        ram[3] = "0b00111100101001011000100010000101";
        ram[4] = "0b10111101000101100011011000000010";
        ram[5] = "0b10111100101001010100000001100001";
        ram[6] = "0b00111011111010000110000001111100";
        ram[7] = "0b10111101000100101001101001010001";
        ram[8] = "0b10111110000001000001111001011000";
        ram[9] = "0b00111010111001111111000011101011";
        ram[10] = "0b10111101110010100001101001111000";
        ram[11] = "0b00111100111101100101000010111111";
        ram[12] = "0b00111110010000010100110100101111";
        ram[13] = "0b00111110010011011111011100011111";
        ram[14] = "0b10111101100000111000110010010111";
        ram[15] = "0b00111100100001100100101110101001";
        ram[16] = "0b00111011101010011001010111010001";
        ram[17] = "0b00111100110011101001110001111011";
        ram[18] = "0b10111101110001001100110011100001";
        ram[19] = "0b10111101101101110111000000110111";
        ram[20] = "0b00111101000100110101100011110011";
        ram[21] = "0b00111101111000110101111110000001";
        ram[22] = "0b10111110000000010111100000101101";
        ram[23] = "0b00111101110001111100000111110011";
        ram[24] = "0b10111101001100011001101011100010";
        ram[25] = "0b00111101111111001000111100110010";
        ram[26] = "0b00111100101110010001000101100100";
        ram[27] = "0b00111101101110010001000001100101";
        ram[28] = "0b00111100110010000010000111011000";
        ram[29] = "0b10111101111101011011010111111010";
        ram[30] = "0b00111101111001011100010111111000";
        ram[31] = "0b00111101000100111100010100101001";
        ram[32] = "0b00111100010110011101001101000110";
        ram[33] = "0b10111100001100011110111010010000";
        ram[34] = "0b10111100000100101011111110010110";
        ram[35] = "0b00111100100101100010111111101101";
        ram[36] = "0b00111100111101110011011010011000";
        ram[37] = "0b10111110000000111100111100101101";
        ram[38] = "0b00111101100001011101000010011100";
        ram[39] = "0b00111101100001011101000010000010";
        ram[40] = "0b00111011110100011010010010001101";
        ram[41] = "0b10111101000001001000101010101001";
        ram[42] = "0b10111100011111010101011101000100";
        ram[43] = "0b10111101110000111110100001001010";
        ram[44] = "0b00111101010010101110001100011101";
        ram[45] = "0b10111011000000100011000011000111";
        ram[46] = "0b10111101000000110110100101000001";
        ram[47] = "0b00111100111001100011110101001100";
        ram[48] = "0b10111100001010100101010011010011";
        ram[49] = "0b10111100101100001100000101101001";
        ram[50] = "0b10111110000011101100011101000011";
        ram[51] = "0b00111101100001011010100110101000";
        ram[52] = "0b10111101000110011100000010000001";
        ram[53] = "0b00111101111101111101001010000101";
        ram[54] = "0b00111101101111001100000110100010";
        ram[55] = "0b00111110000110001110100001100100";
        ram[56] = "0b00111101001100110110010110111110";
        ram[57] = "0b10111101100110011011011000111010";
        ram[58] = "0b00111100101110111110011000101010";
        ram[59] = "0b10111101111110011100101101101000";
        ram[60] = "0b10111101101111101010001110000001";
        ram[61] = "0b00111101100000011101010001100110";
        ram[62] = "0b10111101111001100011110110000001";
        ram[63] = "0b00111101110101110111010110111000";
        ram[64] = "0b00111110001000100001100001011001";
        ram[65] = "0b10111101110011000000101101100100";
        ram[66] = "0b10111101100101101000100011110011";
        ram[67] = "0b00111110000101100000101101110000";
        ram[68] = "0b00111110000111001110000100111111";
        ram[69] = "0b00111101101111010010010100110010";
        ram[70] = "0b10111101100110010110010000101101";
        ram[71] = "0b00111101100110100100010000100111";
        ram[72] = "0b10111110010011001100111010100011";
        ram[73] = "0b10111101010101101000100101011111";
        ram[74] = "0b00111101000010011111101001110000";
        ram[75] = "0b00111100010000101001110001011101";
        ram[76] = "0b10111101010110100101010011111011";
        ram[77] = "0b00111011010111001100001001100011";
        ram[78] = "0b00111101100010100111010001010101";
        ram[79] = "0b10111100010111101010101111110010";
        ram[80] = "0b10111100110000101100000010100101";
        ram[81] = "0b10111110001001100101000010100100";
        ram[82] = "0b00111110000010110011010110110001";
        ram[83] = "0b10111011111000100111110100100011";
        ram[84] = "0b10111011100101011110101001100011";
        ram[85] = "0b10111100011100100010110001101101";
        ram[86] = "0b00111101110111011111000010010001";
        ram[87] = "0b00111101000100101011100000110100";
        ram[88] = "0b00111101000100011011100001011001";
        ram[89] = "0b10111110000010010010100100100100";
        ram[90] = "0b10111100110101111010100110100000";
        ram[91] = "0b10111101000001001101100110111001";
        ram[92] = "0b00111101101010010011101011001111";
        ram[93] = "0b00111101001000111011000000111110";
        ram[94] = "0b10111101111100000001111000100110";
        ram[95] = "0b00111101100010100101101101000110";
        ram[96] = "0b10111101100000101011110110101000";
        ram[97] = "0b10111101100111101110100101010111";
        ram[98] = "0b10111101111101100000111000001111";
        ram[99] = "0b10111011101001100110110011010001";
        ram[100] = "0b00111110001110101110000000111011";
        ram[101] = "0b10111110000111010001101111111000";
        ram[102] = "0b00111110000011100001111101111101";
        ram[103] = "0b10111101001001001001110100011110";
        ram[104] = "0b00111110000100101100010001010000";
        ram[105] = "0b10111101010110101101100011111111";
        ram[106] = "0b10111110001011100001101100001001";
        ram[107] = "0b00111101000000100110111110010111";
        ram[108] = "0b00111100011000111001111111100011";
        ram[109] = "0b10111101111011100010111110111110";
        ram[110] = "0b00111101110110010010101011111010";
        ram[111] = "0b00111101011100010101001100001111";
        ram[112] = "0b00111100000000011011011100100101";
        ram[113] = "0b10111101000011010001011011101111";
        ram[114] = "0b00111110000000000000010011111011";
        ram[115] = "0b10111100100010110111010010101000";
        ram[116] = "0b10111001010110111010000111110100";
        ram[117] = "0b00111100101101111010000111111000";
        ram[118] = "0b00111100001101000001011111001010";
        ram[119] = "0b10111100110101001000110011101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_10) {
meminst = new inference_conv2d_f3_1_3_10_ram("inference_conv2d_f3_1_3_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_10() {
    delete meminst;
}


};//endmodule
#endif
