// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_1_10_H__
#define __inference_conv2d_f3_2_1_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_1_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_1_10_ram) {
        ram[0] = "0b00111011010111110111011101001001";
        ram[1] = "0b10111100001110100110101001011111";
        ram[2] = "0b00111101101000011111001111001110";
        ram[3] = "0b00111011100111100011110001000001";
        ram[4] = "0b00111100001010000001000011000000";
        ram[5] = "0b00111101100101111001011111110100";
        ram[6] = "0b10111110001110001011001101110000";
        ram[7] = "0b10111101100110110110001100110011";
        ram[8] = "0b00111100000010011010110101001000";
        ram[9] = "0b10111101100100110000010100101011";
        ram[10] = "0b00111100011000001010111000101011";
        ram[11] = "0b00111101101011100110010100000011";
        ram[12] = "0b00111101100110011110110110001010";
        ram[13] = "0b10111110000101001001000110110000";
        ram[14] = "0b10111101101100111100100110101100";
        ram[15] = "0b10111101110000000000010111010010";
        ram[16] = "0b10111110000000010111111000110101";
        ram[17] = "0b00111101111010001111110000001101";
        ram[18] = "0b00111101101011111100101101101010";
        ram[19] = "0b00111011100100100001010010010101";
        ram[20] = "0b10111101110010101111011100100101";
        ram[21] = "0b10111011110110101110001111100111";
        ram[22] = "0b00111110000111001001010000101101";
        ram[23] = "0b10111101111001011011100011011100";
        ram[24] = "0b00111011111101010100100101000011";
        ram[25] = "0b00111110010011100000001110110100";
        ram[26] = "0b00111110000001010001000000001010";
        ram[27] = "0b00111100001010101101101101110110";
        ram[28] = "0b10111110001010111111001100111000";
        ram[29] = "0b10111100101011010110001000111001";
        ram[30] = "0b10111110010001011001001101100000";
        ram[31] = "0b10111101101110000010101100010010";
        ram[32] = "0b10111100000110111011010110010011";
        ram[33] = "0b00111100101000001001111011011100";
        ram[34] = "0b10111101100000111010100011110101";
        ram[35] = "0b10111110000110111100101100011101";
        ram[36] = "0b10111101100101101101100000101100";
        ram[37] = "0b10111100110110001001100101010100";
        ram[38] = "0b10111101000001000010101111011111";
        ram[39] = "0b10111101101001110111000100110110";
        ram[40] = "0b00111100111111010111001111001001";
        ram[41] = "0b10111101000110001010000111101101";
        ram[42] = "0b10111000100100111011011000101110";
        ram[43] = "0b10111110001001100111000100100110";
        ram[44] = "0b10111100000111101011000000111010";
        ram[45] = "0b10111101010011011100001110111101";
        ram[46] = "0b00111100010111010111000101100000";
        ram[47] = "0b00111101111000011001000100010101";
        ram[48] = "0b00111100101110110011001001110001";
        ram[49] = "0b10111110001100110000100101000010";
        ram[50] = "0b00111100100110010100111101011100";
        ram[51] = "0b10111101111010010011100111101011";
        ram[52] = "0b10111101101001011111000011011011";
        ram[53] = "0b10111101001110011011110000011001";
        ram[54] = "0b00111110010000110011101111011010";
        ram[55] = "0b00111101010110000001100101100111";
        ram[56] = "0b00111101100101110110110100010001";
        ram[57] = "0b10111110010010110000010111111011";
        ram[58] = "0b10111100010100100010001110111001";
        ram[59] = "0b10111011111100110010110001011101";
        ram[60] = "0b10111011110110110111000110010110";
        ram[61] = "0b00111110000110100010000011011110";
        ram[62] = "0b10111101100100000101001101000010";
        ram[63] = "0b10111110011011011010111010000010";
        ram[64] = "0b00111101100010110100111111110101";
        ram[65] = "0b10111110000000101010011010110001";
        ram[66] = "0b00111011101101001100001100000000";
        ram[67] = "0b00111101110001001011001110101001";
        ram[68] = "0b10111101010011100011011001110100";
        ram[69] = "0b10111101001010110100100100111111";
        ram[70] = "0b00111110000010111011111111010111";
        ram[71] = "0b00111110000110001101101110001100";
        ram[72] = "0b00111011100100111010101011101101";
        ram[73] = "0b10111011010001101001010010100100";
        ram[74] = "0b00111101100100000000000111010110";
        ram[75] = "0b00111110001100111010110100011001";
        ram[76] = "0b00111100110111101111011100111100";
        ram[77] = "0b10111100110101111000010000010110";
        ram[78] = "0b00111101111110111010010101011101";
        ram[79] = "0b10111110000100010111000010010011";
        ram[80] = "0b00111110001110110011101101110101";
        ram[81] = "0b00111110000100101011101100100011";
        ram[82] = "0b00111100001010110001110110111011";
        ram[83] = "0b00111100100010101111111101101101";
        ram[84] = "0b00111101001100010010001100001000";
        ram[85] = "0b10111110000110101100011000000100";
        ram[86] = "0b10111110010100100101100011010110";
        ram[87] = "0b10111101011000001001100111010011";
        ram[88] = "0b10111101110000101100001111010111";
        ram[89] = "0b10111101000111111001011111100000";
        ram[90] = "0b10111110000010001100100100110010";
        ram[91] = "0b00111101001011101000000101010010";
        ram[92] = "0b00111100011101100101111000101011";
        ram[93] = "0b10111100100010101111011100111111";
        ram[94] = "0b10111110001111011111000100010111";
        ram[95] = "0b00111110001111011101111110000111";
        ram[96] = "0b10111110000010011001011111000100";
        ram[97] = "0b00111101001100000111000001000000";
        ram[98] = "0b00111110000000111001101100000010";
        ram[99] = "0b00111010111000100101000011000011";
        ram[100] = "0b00111101101010110001001001001101";
        ram[101] = "0b00111100011100101110111111100010";
        ram[102] = "0b00111101100000000111010101110001";
        ram[103] = "0b10111101111000001100100001000111";
        ram[104] = "0b00111101001100010010110010010011";
        ram[105] = "0b00111101100001000001000011101100";
        ram[106] = "0b10111101111010111001100010000101";
        ram[107] = "0b10111101110101011100110100001100";
        ram[108] = "0b00111101101010111010101100000111";
        ram[109] = "0b00111110000110011111011100101111";
        ram[110] = "0b00111101000000110111101111101011";
        ram[111] = "0b10111110000001000001111010011011";
        ram[112] = "0b10111100011011001101100101000111";
        ram[113] = "0b10111101111111110100110010110010";
        ram[114] = "0b00111011001001100011001100000101";
        ram[115] = "0b10111110001001111000010011101100";
        ram[116] = "0b10111101001111111111100011000100";
        ram[117] = "0b10111110000100100110010010100001";
        ram[118] = "0b10111100111011001011011101001110";
        ram[119] = "0b10111110000110010101011000111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_1_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_1_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_1_10) {
meminst = new inference_conv2d_f3_2_1_10_ram("inference_conv2d_f3_2_1_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_1_10() {
    delete meminst;
}


};//endmodule
#endif
