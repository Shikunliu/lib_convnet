// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_15_H__
#define __inference_conv2d_f3_3_2_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_15_ram) {
        ram[0] = "0b00111100100000000110100000000101";
        ram[1] = "0b00111101110110110010100000001111";
        ram[2] = "0b00111101100000110100000001001111";
        ram[3] = "0b00111110000110001110001001011101";
        ram[4] = "0b00111110000100101110101011011001";
        ram[5] = "0b00111101001001010001010000111100";
        ram[6] = "0b10111101000111101000110001100010";
        ram[7] = "0b10111101001101111100101101001000";
        ram[8] = "0b10111101000110011101111100011111";
        ram[9] = "0b00111101111101111011111000010010";
        ram[10] = "0b00111110001100100011110011001001";
        ram[11] = "0b10111110000101100110111110010011";
        ram[12] = "0b10111110001010011100000011101100";
        ram[13] = "0b10111110000100110001011101101010";
        ram[14] = "0b10111101001010100010101001000000";
        ram[15] = "0b10111100001110010110110000110010";
        ram[16] = "0b00111101001010100011110100111011";
        ram[17] = "0b00111011101111111001011101000101";
        ram[18] = "0b00111101100111000011011100010000";
        ram[19] = "0b00111101101101101011001000110110";
        ram[20] = "0b10111110001011111001010010000101";
        ram[21] = "0b10111110010000000100000111001100";
        ram[22] = "0b10111101010111101111101101101110";
        ram[23] = "0b00111101101101011110110001100110";
        ram[24] = "0b00111100010011111001001000001111";
        ram[25] = "0b00111110000000001110111100010011";
        ram[26] = "0b00111100101100100100010011110111";
        ram[27] = "0b00111100000000001110100001110011";
        ram[28] = "0b10111101111011101110110110001001";
        ram[29] = "0b10111101010101111110101101000100";
        ram[30] = "0b00111011101000111110101110101101";
        ram[31] = "0b00111110001010110111100111011001";
        ram[32] = "0b10111101110000001111110011101011";
        ram[33] = "0b10111101000110000001110000000110";
        ram[34] = "0b10111110000011011111101101010000";
        ram[35] = "0b10111110000110001010001001100110";
        ram[36] = "0b10111101101110000010101001001001";
        ram[37] = "0b10111101010111100000000111111001";
        ram[38] = "0b10111100100100000000011000001000";
        ram[39] = "0b00111101001110001100001111001100";
        ram[40] = "0b10111101100101111100001001011111";
        ram[41] = "0b00111100111011110101110110111100";
        ram[42] = "0b00111101001100000000010101100110";
        ram[43] = "0b10111101111000111100110000001000";
        ram[44] = "0b00111011111011111111010000000100";
        ram[45] = "0b00111101110100100011101100110110";
        ram[46] = "0b00111110001000000100010000101000";
        ram[47] = "0b00111101101111101011010000101110";
        ram[48] = "0b10111101110000001001010000001111";
        ram[49] = "0b10111101101111010000010011100110";
        ram[50] = "0b00111110011000010100010110010101";
        ram[51] = "0b00111101111001010011011011010110";
        ram[52] = "0b00111101011011001000110001010000";
        ram[53] = "0b10111101100011000100100110111010";
        ram[54] = "0b10111101110001111111111011101101";
        ram[55] = "0b00111100001000001100111001010111";
        ram[56] = "0b10111101010010110101101101111110";
        ram[57] = "0b10111101111111010100110011111101";
        ram[58] = "0b10111101110111011011001000101101";
        ram[59] = "0b10111100000111011111011101100010";
        ram[60] = "0b00111101111000011100011100010101";
        ram[61] = "0b00111101101010110100000101100010";
        ram[62] = "0b10111110001111001000101101000100";
        ram[63] = "0b00111101101010110111101001101101";
        ram[64] = "0b00111101110001011110111100100000";
        ram[65] = "0b10111101101101101011110011110110";
        ram[66] = "0b10111101111111100100111011110000";
        ram[67] = "0b00111101110111001001010011110111";
        ram[68] = "0b00111100111010111110110011101110";
        ram[69] = "0b10111110000010100000000111101111";
        ram[70] = "0b00111101001101100101110111000000";
        ram[71] = "0b00111101111110101000101011000110";
        ram[72] = "0b10111100100101111111111101100110";
        ram[73] = "0b00111101011111010000100110010001";
        ram[74] = "0b00111101110001001010100001100011";
        ram[75] = "0b10111101011101111000110000001110";
        ram[76] = "0b00111101000111100011101001111110";
        ram[77] = "0b00111011000000100110111001011010";
        ram[78] = "0b00111101001110011111011110001101";
        ram[79] = "0b10111100011001101010111011110110";
        ram[80] = "0b10111100111010010111110010011011";
        ram[81] = "0b10111101101111110011001010010101";
        ram[82] = "0b00111101111000011011000000000011";
        ram[83] = "0b00111010110110110100110101000011";
        ram[84] = "0b00111011111100011000000011110111";
        ram[85] = "0b00111100110011101011000101110100";
        ram[86] = "0b00111101100000010100001000000101";
        ram[87] = "0b00111101100001011100011010100110";
        ram[88] = "0b10111110010010100100111111001010";
        ram[89] = "0b10111100010101100010101001000100";
        ram[90] = "0b00111100111100110000011100101001";
        ram[91] = "0b10111110001110111000001011000011";
        ram[92] = "0b10111101000100110000010110110001";
        ram[93] = "0b00111101111101000110111011010010";
        ram[94] = "0b00111101011110011111101011001110";
        ram[95] = "0b00111011101100000100110010111001";
        ram[96] = "0b00111101001111101001100010001100";
        ram[97] = "0b00111110001000010010111110010000";
        ram[98] = "0b10111101101010001110010010010000";
        ram[99] = "0b10111101010010111111000110001011";
        ram[100] = "0b10111101111110101100001001011001";
        ram[101] = "0b10111110000100111100111101110000";
        ram[102] = "0b00111101000100011111111000101111";
        ram[103] = "0b00111110000000111100001010011000";
        ram[104] = "0b00111110001001111011110100000110";
        ram[105] = "0b00111100100100100111010101001110";
        ram[106] = "0b10111100100010101111110110001010";
        ram[107] = "0b10111101101101111110111101001101";
        ram[108] = "0b10111101100010010001000001110010";
        ram[109] = "0b00111101101100000000101000111001";
        ram[110] = "0b10111100110101000101100100011110";
        ram[111] = "0b00111101111011000010011000010100";
        ram[112] = "0b00111101100010010010110011101010";
        ram[113] = "0b10111101001001000101111101110110";
        ram[114] = "0b00111101110000001111001110100011";
        ram[115] = "0b00111110000110000011000100100111";
        ram[116] = "0b10111101100111001001110000001011";
        ram[117] = "0b00111101101010010011001011010111";
        ram[118] = "0b00111110000011110100110110111110";
        ram[119] = "0b10111100111010100101001010000100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_15) {
meminst = new inference_conv2d_f3_3_2_15_ram("inference_conv2d_f3_3_2_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_15() {
    delete meminst;
}


};//endmodule
#endif
