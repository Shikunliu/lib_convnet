// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_15_H__
#define __inference_conv2d_f3_3_1_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_15_ram) {
        ram[0] = "0b00111011101110100111100011001101";
        ram[1] = "0b00111101110111100101000100001001";
        ram[2] = "0b00111101110101110110101100111100";
        ram[3] = "0b10111011011111000101111101100010";
        ram[4] = "0b00111110000111011111110100100110";
        ram[5] = "0b10111100110010110010000101100111";
        ram[6] = "0b10111101110110001101010001111000";
        ram[7] = "0b00111101101000011111110111101100";
        ram[8] = "0b00111101101011110100011001001100";
        ram[9] = "0b10111110000001000001101010101100";
        ram[10] = "0b10111101000100100110011001101010";
        ram[11] = "0b10111110001111011000101000010001";
        ram[12] = "0b00111110000010000100100001111100";
        ram[13] = "0b00111100101010010001010001100001";
        ram[14] = "0b10111110000000111000100011101100";
        ram[15] = "0b10111101110101111110111001001110";
        ram[16] = "0b00111101100010011101110100101110";
        ram[17] = "0b00111101100111011001100100000011";
        ram[18] = "0b00111101111011001001010010110100";
        ram[19] = "0b00111110010011101011110101001101";
        ram[20] = "0b00111100101101001111101010110100";
        ram[21] = "0b10111101110010110100110111011100";
        ram[22] = "0b10111100100100101100001110111101";
        ram[23] = "0b10111101011001100001010100001000";
        ram[24] = "0b10111101110101010111011000000100";
        ram[25] = "0b00111101101001110010001011010100";
        ram[26] = "0b10111100111111100110110110001110";
        ram[27] = "0b10111100010001111101000101010000";
        ram[28] = "0b10111101110001110100000000111110";
        ram[29] = "0b00111101000110010011001000000000";
        ram[30] = "0b10111101000001100101110101100010";
        ram[31] = "0b10111101101011100101010010110101";
        ram[32] = "0b10111110010000110110101110010000";
        ram[33] = "0b00111101011001101100000001111001";
        ram[34] = "0b10111011100011010111110111010111";
        ram[35] = "0b00111101101010011000101011101100";
        ram[36] = "0b00111101110100100000101110000000";
        ram[37] = "0b10111011010000011111110010001111";
        ram[38] = "0b10111101101010000000110101100101";
        ram[39] = "0b10111101010000010011110101001101";
        ram[40] = "0b10111101111000100010100010011001";
        ram[41] = "0b10111101000010000011101100111000";
        ram[42] = "0b00111101101100110110001010110011";
        ram[43] = "0b10111101011100011000100000000011";
        ram[44] = "0b00111101000101101110001101010110";
        ram[45] = "0b00111100100000000011010000000010";
        ram[46] = "0b00111101111000110101001111111000";
        ram[47] = "0b10111101101000011010001100111000";
        ram[48] = "0b00111101010001110111101100000100";
        ram[49] = "0b00111101001101110011000101110101";
        ram[50] = "0b00111101001110010010111101000110";
        ram[51] = "0b00111101111010000101010101010100";
        ram[52] = "0b10111101010111110000000111101110";
        ram[53] = "0b00111101101111000100010110110001";
        ram[54] = "0b00111101101000110010011011100001";
        ram[55] = "0b00111100000100001001001000011110";
        ram[56] = "0b10111011101010011001001101110111";
        ram[57] = "0b10111101100011101011110111111011";
        ram[58] = "0b00111101110010010000010111110110";
        ram[59] = "0b10111100111010000110101111000100";
        ram[60] = "0b00111101110100100111111011011000";
        ram[61] = "0b00111100101010101011111010000101";
        ram[62] = "0b10111101010101000101010110101000";
        ram[63] = "0b10111011000101000111001010111110";
        ram[64] = "0b10111101000001110100011001111011";
        ram[65] = "0b10111110001100010110000011011001";
        ram[66] = "0b00111101101000000111000100110010";
        ram[67] = "0b00111011110100010011100001101100";
        ram[68] = "0b00111101111001000000001010001110";
        ram[69] = "0b00111101110000011011101010101000";
        ram[70] = "0b10111101100100011110100011100110";
        ram[71] = "0b10111101001001011110110000001000";
        ram[72] = "0b10111101000111100100010000100011";
        ram[73] = "0b10111100110100111001011000010101";
        ram[74] = "0b10111110001011111111011011010011";
        ram[75] = "0b00111110000110110011100000001101";
        ram[76] = "0b10111100101010010010100111000101";
        ram[77] = "0b10111101100100110001111101100010";
        ram[78] = "0b10111101100111000011010100101101";
        ram[79] = "0b00111101000110001011011101010001";
        ram[80] = "0b00111101101100100101010111011000";
        ram[81] = "0b10111101011111101110100010101001";
        ram[82] = "0b10111100110100101010011001100000";
        ram[83] = "0b00111100000000111111000011100110";
        ram[84] = "0b00111110000001000100101000011111";
        ram[85] = "0b00111101010100010010010010110110";
        ram[86] = "0b00111100001100111001110110111100";
        ram[87] = "0b10111110000110111010001001111011";
        ram[88] = "0b10111110001001010010011001010010";
        ram[89] = "0b00111101100101110110000011110101";
        ram[90] = "0b10111101010000101110100001000111";
        ram[91] = "0b10111101100000011101110110100000";
        ram[92] = "0b00111101010110001011100110000101";
        ram[93] = "0b10111101100010100011000011011011";
        ram[94] = "0b00111101010101011100001011111011";
        ram[95] = "0b00111101111101110000111101111100";
        ram[96] = "0b00111101110010111110110000001010";
        ram[97] = "0b00111101101001111101011011111001";
        ram[98] = "0b10111101001000011000011010011000";
        ram[99] = "0b10111101001100111000100101001010";
        ram[100] = "0b00111011101111101011010010011100";
        ram[101] = "0b00111101110001111010100101011101";
        ram[102] = "0b00111101100011001111100100101000";
        ram[103] = "0b00111101010011010000111010001100";
        ram[104] = "0b10111101110110100110000011010100";
        ram[105] = "0b10111101000000000011110100000111";
        ram[106] = "0b00111101100111110101011001110010";
        ram[107] = "0b00111101100110110100011100011001";
        ram[108] = "0b00111110010100101111111000111111";
        ram[109] = "0b00111101110001011011111000110101";
        ram[110] = "0b10111100100000010011110001000000";
        ram[111] = "0b10111100101010001101110000101101";
        ram[112] = "0b00111101110111110010010101011111";
        ram[113] = "0b10111100010011010110010101111001";
        ram[114] = "0b10111101000101010011100011111101";
        ram[115] = "0b10111101110111011111101010000111";
        ram[116] = "0b00111101011100111001111100110100";
        ram[117] = "0b00111101110001001010100111101001";
        ram[118] = "0b00111101001100110111001001010011";
        ram[119] = "0b00111100011101001100011000010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_15) {
meminst = new inference_conv2d_f3_3_1_15_ram("inference_conv2d_f3_3_1_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_15() {
    delete meminst;
}


};//endmodule
#endif
