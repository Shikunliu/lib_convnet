// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_6_H__
#define __inference_conv2d_f3_2_2_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_6_ram) {
        ram[0] = "0b10111100001110010001100010111011";
        ram[1] = "0b10111101010000010101101100101111";
        ram[2] = "0b00111101001000101100101110100111";
        ram[3] = "0b00111100100000010001010011010011";
        ram[4] = "0b10111101110100100001000101000101";
        ram[5] = "0b00111100111011000110111101011111";
        ram[6] = "0b00111101101100001000010101000110";
        ram[7] = "0b10111101010110001101011101100111";
        ram[8] = "0b00111101111001111011101100110000";
        ram[9] = "0b00111101101110000101010110010111";
        ram[10] = "0b10111110010000110100011101100011";
        ram[11] = "0b00111100100000000111000101110101";
        ram[12] = "0b10111101100011001011001011011001";
        ram[13] = "0b00111110000110110100001100001111";
        ram[14] = "0b10111100000101011011100010011001";
        ram[15] = "0b00111101100010111100000101011100";
        ram[16] = "0b00111100110000100111010100100101";
        ram[17] = "0b10111110001000100011111101101000";
        ram[18] = "0b00111101101111010011110010100001";
        ram[19] = "0b00111101000001011011101011000000";
        ram[20] = "0b10111101010110010001000011111000";
        ram[21] = "0b10111110000010111100010111011111";
        ram[22] = "0b10111100100000011100100001010111";
        ram[23] = "0b00111100110101010011111110011000";
        ram[24] = "0b00111011010001001111000010001010";
        ram[25] = "0b10111101010001000110100001000101";
        ram[26] = "0b00111101001000000001100101000101";
        ram[27] = "0b10111101001010010001011100000000";
        ram[28] = "0b00111101101101110000111010010111";
        ram[29] = "0b10111101001001110110110110110011";
        ram[30] = "0b00111110010010110101100101011000";
        ram[31] = "0b10111110010000111001110010010101";
        ram[32] = "0b00111110001111010100010100100000";
        ram[33] = "0b10111101101110110001000100011000";
        ram[34] = "0b00111101100011000111001010011111";
        ram[35] = "0b00111101101001011110101101011001";
        ram[36] = "0b10111101100100001011000110101110";
        ram[37] = "0b00111011101000011001010001001111";
        ram[38] = "0b00111100111000110010110000011111";
        ram[39] = "0b00111101000110100000011100101101";
        ram[40] = "0b00111101011100010100110000100011";
        ram[41] = "0b00111110000010010010000011000000";
        ram[42] = "0b00111101101000001101100110000111";
        ram[43] = "0b00111101110110001101011110011101";
        ram[44] = "0b00111100111100110011011101100101";
        ram[45] = "0b00111101111111010111111001000110";
        ram[46] = "0b10111100010011101011001000010101";
        ram[47] = "0b00111000001011101010111011000101";
        ram[48] = "0b10111101000111110101001100010111";
        ram[49] = "0b00111101111000100111110001111100";
        ram[50] = "0b00111100011011100000001101111110";
        ram[51] = "0b10111100111110101011001010111001";
        ram[52] = "0b10111100100000000111011010110011";
        ram[53] = "0b00111101101111111101000000111101";
        ram[54] = "0b00111011101010111100110111100100";
        ram[55] = "0b10111101000011010111111101000101";
        ram[56] = "0b10111100010001111101101000011111";
        ram[57] = "0b10111100101010010111111011101010";
        ram[58] = "0b10111110010000111100001010011000";
        ram[59] = "0b10111110000001011100011011000001";
        ram[60] = "0b10111100010110111111000110011000";
        ram[61] = "0b10111101011111100001001011000000";
        ram[62] = "0b00111001001100010100001111010010";
        ram[63] = "0b10111110000010010110010010100110";
        ram[64] = "0b00111101010100111011011011001100";
        ram[65] = "0b00111110001000000010011110010101";
        ram[66] = "0b00111101100100110100111011000111";
        ram[67] = "0b10111110001011111010111001111001";
        ram[68] = "0b10111101100100001001100111101110";
        ram[69] = "0b00111101100111001111010111110101";
        ram[70] = "0b00111100010001110000010101111000";
        ram[71] = "0b10111110000000001101110101000000";
        ram[72] = "0b10111010000101010011101110001000";
        ram[73] = "0b00111100101000010101011011111101";
        ram[74] = "0b10111110010100111000111001101101";
        ram[75] = "0b00111011110100110000110011000010";
        ram[76] = "0b00111101100000001010010101110111";
        ram[77] = "0b00111101110000111010101101000011";
        ram[78] = "0b10111101101011101101010100101000";
        ram[79] = "0b00111100100000101111101101011101";
        ram[80] = "0b00111110000001100110011001100110";
        ram[81] = "0b10111101010010101110101011000101";
        ram[82] = "0b00111101111101101001110100110000";
        ram[83] = "0b10111110010001110010110101011110";
        ram[84] = "0b00111100100010001010000001001101";
        ram[85] = "0b10111101011011000011010001110001";
        ram[86] = "0b10111101000000000100011100011000";
        ram[87] = "0b00111100100110110100001001000110";
        ram[88] = "0b10111101011101111011101001100111";
        ram[89] = "0b10111101110100101101101010011000";
        ram[90] = "0b10111101100101011011110110111101";
        ram[91] = "0b10111101111110100001011111110100";
        ram[92] = "0b10111100101100101110100010001011";
        ram[93] = "0b00111101011000011011100001100111";
        ram[94] = "0b10111100111000110001100000110011";
        ram[95] = "0b00111101101010011111111011111111";
        ram[96] = "0b10111101101100011001010100101011";
        ram[97] = "0b00111100101010000011000010100001";
        ram[98] = "0b00111101101001100100000001010110";
        ram[99] = "0b10111110001001110010000111010101";
        ram[100] = "0b00111101011010001010101001111001";
        ram[101] = "0b00111101001101000110100001101101";
        ram[102] = "0b10111101111011111110011010010010";
        ram[103] = "0b00111100100010110101011001110101";
        ram[104] = "0b00111101111111011110110101101100";
        ram[105] = "0b00111101111110001001001001101000";
        ram[106] = "0b00111101100101110101111111001110";
        ram[107] = "0b10111101001010001100010101101100";
        ram[108] = "0b00111101110101011101001111011101";
        ram[109] = "0b00111101010001001011111010010001";
        ram[110] = "0b10111110001100101011011101111000";
        ram[111] = "0b10111101110010010111110111000011";
        ram[112] = "0b00111110000001000111011011110011";
        ram[113] = "0b10111100001010000011001010111010";
        ram[114] = "0b00111101001110110010000011010011";
        ram[115] = "0b00111100100101011111011010101101";
        ram[116] = "0b00111011101111110111000100000100";
        ram[117] = "0b10111101110001011110001000011111";
        ram[118] = "0b00111100111110110111111000100110";
        ram[119] = "0b10111101101000011010100011010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_6) {
meminst = new inference_conv2d_f3_2_2_6_ram("inference_conv2d_f3_2_2_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_6() {
    delete meminst;
}


};//endmodule
#endif
