// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_66_H__
#define __inference_mult_1_120_120_84_s_W4_66_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_66_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_66_ram) {
        ram[0] = "0b10111110001100001011110100000001";
        ram[1] = "0b00111100111001101011101101010110";
        ram[2] = "0b10111101101010011101011111010101";
        ram[3] = "0b00111100111010101001101000000111";
        ram[4] = "0b00111011101000001100101100010001";
        ram[5] = "0b00111100100000000100100010010000";
        ram[6] = "0b10111110010000001111101111101100";
        ram[7] = "0b00111110000000010111010111010001";
        ram[8] = "0b10111101110010111011010010011111";
        ram[9] = "0b10111101110101010100001010100010";
        ram[10] = "0b10111101110010001010010010110100";
        ram[11] = "0b10111101110100100011001101011001";
        ram[12] = "0b10111101111110000001111000000100";
        ram[13] = "0b10111101100100001100010000110000";
        ram[14] = "0b10111110000000010111100010110011";
        ram[15] = "0b00111100001010110011010011001101";
        ram[16] = "0b00111010111111100101011000000111";
        ram[17] = "0b00111101100011001000011110001011";
        ram[18] = "0b10111110001011110111101100011000";
        ram[19] = "0b00111101101010110101110111110101";
        ram[20] = "0b00111101100101011101111111010001";
        ram[21] = "0b00111100011010011110011001001110";
        ram[22] = "0b10111110001001101100000111100011";
        ram[23] = "0b00111101111010110011001011001111";
        ram[24] = "0b10111101010010010011010100011000";
        ram[25] = "0b00111101110010000110000011001111";
        ram[26] = "0b00111110001101000101000011110000";
        ram[27] = "0b10111101101000001011101000011111";
        ram[28] = "0b00111101000011000111101110001001";
        ram[29] = "0b00111100000110101111100110100001";
        ram[30] = "0b10111101101001101011000111100110";
        ram[31] = "0b00111101010000101110110001000100";
        ram[32] = "0b10111110001001110001010001110111";
        ram[33] = "0b00111101100001101110001010110101";
        ram[34] = "0b10111110010100011010010100000001";
        ram[35] = "0b10111101000100100110110000101110";
        ram[36] = "0b00111100100110101100111110001111";
        ram[37] = "0b10111100111011110010011001011110";
        ram[38] = "0b10111101100000010110000101011111";
        ram[39] = "0b10111101001111010010010000110011";
        ram[40] = "0b00111101101001100001110100000000";
        ram[41] = "0b00111101101110100011100101110101";
        ram[42] = "0b00111100101111010110111011000001";
        ram[43] = "0b10111101110100101111101010010100";
        ram[44] = "0b10111101100001011010100011111010";
        ram[45] = "0b10111110010001011011010100110001";
        ram[46] = "0b00111100010111101000011111100000";
        ram[47] = "0b00111110000111111110010010111101";
        ram[48] = "0b00111100000111000010110001100110";
        ram[49] = "0b00111010110011101001111111100001";
        ram[50] = "0b00111101111011100010000010001010";
        ram[51] = "0b00111100100111111010011011111010";
        ram[52] = "0b10111110000111101001111011100100";
        ram[53] = "0b10111101101100100100111100100010";
        ram[54] = "0b10111101011101010101000001011111";
        ram[55] = "0b00111101010010000110110100000111";
        ram[56] = "0b10111100000001001001000001101000";
        ram[57] = "0b00111101101110100010110010110111";
        ram[58] = "0b10111101010001011111010010100001";
        ram[59] = "0b00111100101001011110111111101001";
        ram[60] = "0b10111100010010101100010110001100";
        ram[61] = "0b00111110001110111011100111010000";
        ram[62] = "0b10111110001010001001000010010011";
        ram[63] = "0b10111100110001001001000000011101";
        ram[64] = "0b00111110011010100001110111111100";
        ram[65] = "0b10111110000010100000110111111110";
        ram[66] = "0b00111110000000111000111000101010";
        ram[67] = "0b10111101010001101001101111000110";
        ram[68] = "0b10111101000001000000010010001100";
        ram[69] = "0b10111110000010100111100100110101";
        ram[70] = "0b00111110010000111001001110101011";
        ram[71] = "0b00111100101011010110110110001100";
        ram[72] = "0b00111011000110100101010011010101";
        ram[73] = "0b10111101011110010011110010110010";
        ram[74] = "0b10111100101000000111110001110111";
        ram[75] = "0b00111011101011010110110010001010";
        ram[76] = "0b10111110011100011001010101000110";
        ram[77] = "0b00111011111001100001100001001101";
        ram[78] = "0b10111101101111110000110110111010";
        ram[79] = "0b10111110001110110000000100000000";
        ram[80] = "0b00111101000011010000001001111101";
        ram[81] = "0b10111011011000011110100110111111";
        ram[82] = "0b10111101001011110101000111111101";
        ram[83] = "0b10111101101101101100100100101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_66) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_66_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_66) {
meminst = new inference_mult_1_120_120_84_s_W4_66_ram("inference_mult_1_120_120_84_s_W4_66_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_66() {
    delete meminst;
}


};//endmodule
#endif
