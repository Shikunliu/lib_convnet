// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_14_H__
#define __inference_conv2d_f3_1_3_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_14_ram) {
        ram[0] = "0b00111101110001111000011111101001";
        ram[1] = "0b10111110001001010010011111100101";
        ram[2] = "0b00111100000001000111100100101100";
        ram[3] = "0b00111011110001110001010100111101";
        ram[4] = "0b10111101110110100001011011101000";
        ram[5] = "0b10111101100101111011111100000100";
        ram[6] = "0b00111101110001110001110010110010";
        ram[7] = "0b00111100011001001001000000111000";
        ram[8] = "0b00111101110000100101101100010111";
        ram[9] = "0b10111110000010011110111100001111";
        ram[10] = "0b10111100100101010000010001110100";
        ram[11] = "0b00111100111001111111110011010100";
        ram[12] = "0b00111101010111001100001001000011";
        ram[13] = "0b00111101011011001011001110001000";
        ram[14] = "0b00111100001100101111110100011000";
        ram[15] = "0b00111101000000101011000100111011";
        ram[16] = "0b00111101101010011000100010010000";
        ram[17] = "0b10111110000000110011110010100011";
        ram[18] = "0b10111101011101111111110001000000";
        ram[19] = "0b10111101000011010000011011001001";
        ram[20] = "0b10111011101010001101110010011000";
        ram[21] = "0b00111101100110010001011101010000";
        ram[22] = "0b10111101110010010010001110100011";
        ram[23] = "0b00111110000101101110111001110100";
        ram[24] = "0b10111100010101101010011101000001";
        ram[25] = "0b10111100110001011010001011010111";
        ram[26] = "0b00111101111010101100000110010000";
        ram[27] = "0b00111011101101000010100011010010";
        ram[28] = "0b00111110001101000001001111011011";
        ram[29] = "0b00111110000101001101011011100100";
        ram[30] = "0b10111101110000101011000101111110";
        ram[31] = "0b10111110000010010110000000110001";
        ram[32] = "0b00111011101111100000101101101001";
        ram[33] = "0b10111101000110100010101100100100";
        ram[34] = "0b10111101000010000100000010010001";
        ram[35] = "0b10111010111100011100010011010100";
        ram[36] = "0b10111101011010001111100101010011";
        ram[37] = "0b00111011100001101011100111101110";
        ram[38] = "0b10111101100000010110010110111001";
        ram[39] = "0b00111110011000110000001111000000";
        ram[40] = "0b00111110001001100101111011001100";
        ram[41] = "0b00111101101111000100101111000110";
        ram[42] = "0b10111101010001110010000100100111";
        ram[43] = "0b10111100000110000111010001001011";
        ram[44] = "0b00111101111110011111011101110011";
        ram[45] = "0b10111101100111100111101011100000";
        ram[46] = "0b10111101101011000101100110000010";
        ram[47] = "0b10111101000111001100110101100000";
        ram[48] = "0b00111101000001101110110100111111";
        ram[49] = "0b00111101000110110010011010010111";
        ram[50] = "0b10111101101000110000000101010111";
        ram[51] = "0b00111110011010011101000100101101";
        ram[52] = "0b10111101100001111010001011101010";
        ram[53] = "0b00111101101011001100100100010100";
        ram[54] = "0b10111101010011100000100100101000";
        ram[55] = "0b00111101110101011111100110011100";
        ram[56] = "0b00111010001010000111001000010011";
        ram[57] = "0b10111100000110010001000101010100";
        ram[58] = "0b10111101010001001010100101100010";
        ram[59] = "0b10111100101100000110101100111000";
        ram[60] = "0b10111101110100000011111000100001";
        ram[61] = "0b10111101110100000011111110110011";
        ram[62] = "0b00111101010011100011110001010011";
        ram[63] = "0b10111101000111110001000100111101";
        ram[64] = "0b00111101101001110110100110101001";
        ram[65] = "0b00111101101100001100001000001010";
        ram[66] = "0b00111101000101111111110001000000";
        ram[67] = "0b10111101110010100110011001111110";
        ram[68] = "0b00111101100011001111111011101100";
        ram[69] = "0b10111101010010001011111011010001";
        ram[70] = "0b10111110000001111110100110010110";
        ram[71] = "0b00111101111100110101100011110011";
        ram[72] = "0b10111101011010000010100010101001";
        ram[73] = "0b10111101100000001011000111001001";
        ram[74] = "0b00111101100101000100011011011111";
        ram[75] = "0b00111100010011101111110010111101";
        ram[76] = "0b00111100001011010111101111001111";
        ram[77] = "0b10111110000110110100110100000101";
        ram[78] = "0b10111100101010101010111011001011";
        ram[79] = "0b10111101000111011101000011100110";
        ram[80] = "0b10111110010010111010101101100101";
        ram[81] = "0b10111110000001001010010000001001";
        ram[82] = "0b10111101011111101110110100101011";
        ram[83] = "0b10111110000010010110011000111000";
        ram[84] = "0b00111101100101110001111011100110";
        ram[85] = "0b00111101100110100100101111110110";
        ram[86] = "0b00111100111111010001000101101110";
        ram[87] = "0b00111010011010011010001011111010";
        ram[88] = "0b10111101000110101011010011101101";
        ram[89] = "0b00111101110001110001001101011101";
        ram[90] = "0b00111101100001101001010001000110";
        ram[91] = "0b00111100111011101110011001101000";
        ram[92] = "0b10111100001100111001001101000000";
        ram[93] = "0b10111101111010111100010000001001";
        ram[94] = "0b00111101001000000101011011101101";
        ram[95] = "0b00111110001110000111010001000011";
        ram[96] = "0b00111110000001100100111011001111";
        ram[97] = "0b10111110001101010111001010011011";
        ram[98] = "0b10111101000111110111001101001000";
        ram[99] = "0b00111110000110111101111100001001";
        ram[100] = "0b10111101011001111111001011011110";
        ram[101] = "0b00111101000000000100000111110101";
        ram[102] = "0b00111101100111100101110011111101";
        ram[103] = "0b10111101111101110010101101000101";
        ram[104] = "0b00111101101000001111110110110100";
        ram[105] = "0b10111110000001111001110100001010";
        ram[106] = "0b10111101111101011001010101111001";
        ram[107] = "0b10111011100001011101011001000011";
        ram[108] = "0b00111100111000110000100101001111";
        ram[109] = "0b00111100101100111110110001100001";
        ram[110] = "0b00111101010111000000000110111110";
        ram[111] = "0b10111011101100110110001100000100";
        ram[112] = "0b00111110001010010010110000000110";
        ram[113] = "0b00111110000101001001100000111101";
        ram[114] = "0b10111101111101101111101100001001";
        ram[115] = "0b10111101001000011011111111110100";
        ram[116] = "0b00111101000110010100000101001111";
        ram[117] = "0b10111101000010000011001010000100";
        ram[118] = "0b00111101110000111010011110110010";
        ram[119] = "0b10111101100101110001110001111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_14) {
meminst = new inference_conv2d_f3_1_3_14_ram("inference_conv2d_f3_1_3_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_14() {
    delete meminst;
}


};//endmodule
#endif
