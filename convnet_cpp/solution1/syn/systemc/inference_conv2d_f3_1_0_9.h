// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_0_9_H__
#define __inference_conv2d_f3_1_0_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_0_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_0_9_ram) {
        ram[0] = "0b10111101101001110111000010000111";
        ram[1] = "0b10111100100011001101101111100110";
        ram[2] = "0b10111101110111001101110011001010";
        ram[3] = "0b10111101000001011010000111001011";
        ram[4] = "0b10111101110011000111011111000011";
        ram[5] = "0b10111101111001111110000011110000";
        ram[6] = "0b10111101010111000011100101101100";
        ram[7] = "0b10111110000111111000110011101011";
        ram[8] = "0b10111101110011110100101111101000";
        ram[9] = "0b10111101111001010001111000110010";
        ram[10] = "0b00111101010011001010111000010100";
        ram[11] = "0b00111101000010111100000011001001";
        ram[12] = "0b10111101111111001111011001111011";
        ram[13] = "0b10111101100010010011110101111100";
        ram[14] = "0b10111110001000001100101110110000";
        ram[15] = "0b10111100011000100111100000110000";
        ram[16] = "0b10111011110100101101101000011000";
        ram[17] = "0b00111110010010011111110001101110";
        ram[18] = "0b10111100110001101100010111101101";
        ram[19] = "0b00111100010111010111001111100100";
        ram[20] = "0b00111101001011011101110110100100";
        ram[21] = "0b00111101100101100110101101111100";
        ram[22] = "0b10111100001101011100001110011100";
        ram[23] = "0b00111110000001111010110101001011";
        ram[24] = "0b00111100101010111000100010101111";
        ram[25] = "0b10111100111101111000101110001000";
        ram[26] = "0b00111100001000010010001111110010";
        ram[27] = "0b00111100101111000010010011011111";
        ram[28] = "0b10111110011000001101110111000110";
        ram[29] = "0b00111101001011100100010110001110";
        ram[30] = "0b10111110001010101001111000101100";
        ram[31] = "0b10111101100000111101011111101110";
        ram[32] = "0b00111110000110111110011011100110";
        ram[33] = "0b00111100010100101010111010001110";
        ram[34] = "0b00111101001000001011111100001101";
        ram[35] = "0b10111101111001010010000001001011";
        ram[36] = "0b00111100100001000100110101101101";
        ram[37] = "0b10111101011111100111011101001111";
        ram[38] = "0b00111101100100111011100100001101";
        ram[39] = "0b10111101100100011001011110110000";
        ram[40] = "0b10111100101011000001110101100000";
        ram[41] = "0b10111100110110110100001010110001";
        ram[42] = "0b00111100110001000000011011000000";
        ram[43] = "0b10111101101101010001000000011000";
        ram[44] = "0b10111101111110110100111101100001";
        ram[45] = "0b00111100010101010100000100010000";
        ram[46] = "0b10111101110001000110101011100100";
        ram[47] = "0b00111101011011011101001101011101";
        ram[48] = "0b10111101101000010010001110101001";
        ram[49] = "0b10111101110100000110001001001110";
        ram[50] = "0b10111101010101010011000100011111";
        ram[51] = "0b00111110000101100001111010010011";
        ram[52] = "0b00111101010010101011010010001111";
        ram[53] = "0b10111101110110001111000111010100";
        ram[54] = "0b00111110000010110000011000111110";
        ram[55] = "0b00111100101110100101010000100100";
        ram[56] = "0b00111101000110000111111001100001";
        ram[57] = "0b10111110001001000111010000010000";
        ram[58] = "0b10111100100100111100100001101010";
        ram[59] = "0b00111110001101011101001111011101";
        ram[60] = "0b00111101111110001110011111011110";
        ram[61] = "0b10111101000011110000010010110101";
        ram[62] = "0b00111101101111011100100101100111";
        ram[63] = "0b00111110000000000110000110000100";
        ram[64] = "0b00111101100101100101100011111010";
        ram[65] = "0b00111110010000011011110000010010";
        ram[66] = "0b00111010101111001010010010001100";
        ram[67] = "0b00111101100000110110111101001001";
        ram[68] = "0b00111110000000100011000011111101";
        ram[69] = "0b10111101110010000010101100000101";
        ram[70] = "0b10111101101011010010011111011110";
        ram[71] = "0b00111011000100000110110001001001";
        ram[72] = "0b10111110000001000101000111111100";
        ram[73] = "0b10111110000100111010110011010110";
        ram[74] = "0b10111110001111011000000101101011";
        ram[75] = "0b00111101101101001101100110000100";
        ram[76] = "0b00111110000000110001111100000100";
        ram[77] = "0b10111100000100110101011000111110";
        ram[78] = "0b10111100101100010101110010011001";
        ram[79] = "0b10111101111010110010011011000000";
        ram[80] = "0b00111011011110111100010000110001";
        ram[81] = "0b10111101010111101110111100001110";
        ram[82] = "0b00111101101001011001101100000111";
        ram[83] = "0b10111110001001010010010111001100";
        ram[84] = "0b10111101110011000011011000111001";
        ram[85] = "0b10111101100110101010010001110110";
        ram[86] = "0b10111110000011111001110111110101";
        ram[87] = "0b10111101011001011100111111010011";
        ram[88] = "0b00111100010101011101100011100101";
        ram[89] = "0b10111101111010111001101010011110";
        ram[90] = "0b00111101101000101100000010110010";
        ram[91] = "0b00111011100100001001111001110011";
        ram[92] = "0b00111101100001110010001000011000";
        ram[93] = "0b00111101101000000110110110111100";
        ram[94] = "0b00111011101001000001111110101111";
        ram[95] = "0b10111110010101100000000101111001";
        ram[96] = "0b00111100100111000000100101001011";
        ram[97] = "0b10111101001111111111000110001000";
        ram[98] = "0b10111101000110101111000010110010";
        ram[99] = "0b00111110001011100110011001000101";
        ram[100] = "0b00111101010100011000000010010001";
        ram[101] = "0b00111101011100000011111100101101";
        ram[102] = "0b10111101101100011000011101100010";
        ram[103] = "0b10111010011010001010001000100111";
        ram[104] = "0b00111110000000101111011010100101";
        ram[105] = "0b10111010010011001110101110101100";
        ram[106] = "0b10111101100011001010100111111101";
        ram[107] = "0b00111101000101100010011111011010";
        ram[108] = "0b00111101000101101110011100000010";
        ram[109] = "0b10111101101110111011110011011010";
        ram[110] = "0b00111101101011000101010101010001";
        ram[111] = "0b00111101000010011101101110000001";
        ram[112] = "0b10111101101110101011001011101111";
        ram[113] = "0b10111101001000011111010001111100";
        ram[114] = "0b10111101010000101100110000010011";
        ram[115] = "0b00111100100101001011110010000101";
        ram[116] = "0b00111100100111110111010101111100";
        ram[117] = "0b00111110000110010000111101110011";
        ram[118] = "0b00111110010001111000101101111010";
        ram[119] = "0b00111110010101110000100000100101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_0_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_0_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_0_9) {
meminst = new inference_conv2d_f3_1_0_9_ram("inference_conv2d_f3_1_0_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_0_9() {
    delete meminst;
}


};//endmodule
#endif
