// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_6_H__
#define __inference_conv2d_f3_0_2_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_6_ram) {
        ram[0] = "0b00111101010011000110010100110011";
        ram[1] = "0b10111101111000101111101111100011";
        ram[2] = "0b10111101101011011010111010110111";
        ram[3] = "0b10111011100010011010011001011100";
        ram[4] = "0b10111101101100011010001011001101";
        ram[5] = "0b00111101100000001101000001011010";
        ram[6] = "0b00111101110000001011010000110011";
        ram[7] = "0b00111101111110011111000000011100";
        ram[8] = "0b10111110001010011010001101001101";
        ram[9] = "0b00111110010000110100110011100100";
        ram[10] = "0b10111101011110011100011000101010";
        ram[11] = "0b10111101000100100011100000010001";
        ram[12] = "0b00111101111011011111110101101001";
        ram[13] = "0b10111101011011001100011000010111";
        ram[14] = "0b00111101101011010100000111111010";
        ram[15] = "0b10111110000001010110110001010001";
        ram[16] = "0b00111101110000111101010101111000";
        ram[17] = "0b00111101110011010000000100111011";
        ram[18] = "0b10111101111110010101000010111001";
        ram[19] = "0b10111110000010001011010000111001";
        ram[20] = "0b10111101001110111000001100010011";
        ram[21] = "0b10111101100001000101011000111011";
        ram[22] = "0b00111110001000100110111100011110";
        ram[23] = "0b10111110010011101101000001110000";
        ram[24] = "0b00111101001111011101110000011110";
        ram[25] = "0b10111100100010110000010011100001";
        ram[26] = "0b10111101111001010010000101010111";
        ram[27] = "0b00111101011110011111101101010100";
        ram[28] = "0b00111100111001011000100010111011";
        ram[29] = "0b10111101111011111000101111011111";
        ram[30] = "0b10111101000000001110101101101000";
        ram[31] = "0b10111100111011100001010000010000";
        ram[32] = "0b10111110000011111000110001100101";
        ram[33] = "0b10111011100111010010011010101100";
        ram[34] = "0b00111100100111000101010111010111";
        ram[35] = "0b10111101110001011000101110101011";
        ram[36] = "0b10111110010010111001010011011001";
        ram[37] = "0b00111110010100000010011010001001";
        ram[38] = "0b00111101000101000101011000010011";
        ram[39] = "0b10111110011100000001100111110100";
        ram[40] = "0b10111110000001001111111010111101";
        ram[41] = "0b10111110001010100100001000101001";
        ram[42] = "0b10111110001001010101000100001101";
        ram[43] = "0b00111101110010101010101011110111";
        ram[44] = "0b10111101100001010000010111010001";
        ram[45] = "0b00111101110100111110010011101111";
        ram[46] = "0b10111101001000100111100100100001";
        ram[47] = "0b00111101101100100100010011101001";
        ram[48] = "0b00111101110001010111101100110100";
        ram[49] = "0b00111011010110000100010001001111";
        ram[50] = "0b00111100100110001110100001100100";
        ram[51] = "0b00111011110111100111010110010111";
        ram[52] = "0b00111110000000010101100000110010";
        ram[53] = "0b00111100001011101111111101011100";
        ram[54] = "0b00111101111100111001001010011111";
        ram[55] = "0b00111101011110110101000111100110";
        ram[56] = "0b10111100001010011000101000111101";
        ram[57] = "0b00111110001100101110001111000101";
        ram[58] = "0b00111101000011010110001111001100";
        ram[59] = "0b00111101001010101100101101010000";
        ram[60] = "0b10111110010100000001001101100110";
        ram[61] = "0b00111101110011110010101001011010";
        ram[62] = "0b00111110001101101001111010000000";
        ram[63] = "0b00111100111000110100101101011111";
        ram[64] = "0b00111101010100000001010010000000";
        ram[65] = "0b10111101110001001011011110100101";
        ram[66] = "0b00111011011000010111010111111100";
        ram[67] = "0b10111110001100011011111110111110";
        ram[68] = "0b00111101101001000111100110111010";
        ram[69] = "0b10111101000111000110001100001101";
        ram[70] = "0b00111110000000011010011111100011";
        ram[71] = "0b00111011100100011111010000001001";
        ram[72] = "0b00111100000010001001010100001111";
        ram[73] = "0b10111101100011110011100101100110";
        ram[74] = "0b00111110000000110000111111010000";
        ram[75] = "0b10111011010000011111001011111111";
        ram[76] = "0b00111110010110011011110000110100";
        ram[77] = "0b00111100110001000011010010101110";
        ram[78] = "0b10111101101101001010101011101000";
        ram[79] = "0b00111101111000010011101010010011";
        ram[80] = "0b10111101100011001010001000101101";
        ram[81] = "0b10111101111010111100010100010101";
        ram[82] = "0b00111101110111001110101111111111";
        ram[83] = "0b00111101100100010011100110111100";
        ram[84] = "0b10111101000101101000000101100111";
        ram[85] = "0b00111110001100101010010110100100";
        ram[86] = "0b00111110000000100000000111001101";
        ram[87] = "0b00111110011001011000011000000001";
        ram[88] = "0b00111101000100011000100100101010";
        ram[89] = "0b10111101001100110001110010001101";
        ram[90] = "0b10111101100111110001000110101001";
        ram[91] = "0b00111101101111011000001011001000";
        ram[92] = "0b00111110000011110101100111001101";
        ram[93] = "0b00111101110110111111011010100001";
        ram[94] = "0b10111100110111110000010000111101";
        ram[95] = "0b00111110001011000001110101101101";
        ram[96] = "0b10111101110100001010110101000111";
        ram[97] = "0b00111100011100101100101101100100";
        ram[98] = "0b00111011011011010101101001100001";
        ram[99] = "0b00111101110010111000111000111110";
        ram[100] = "0b00111101100111111011010010000001";
        ram[101] = "0b10111101000101010001110000001100";
        ram[102] = "0b10111101001011111111010000110100";
        ram[103] = "0b00111101100101010011010110000111";
        ram[104] = "0b10111101110100100111100110011010";
        ram[105] = "0b10111110001101111101011010110110";
        ram[106] = "0b00111110000110010000010001110001";
        ram[107] = "0b00111101000000101010010000011111";
        ram[108] = "0b00111101011010010011001001000011";
        ram[109] = "0b10111101100101111000100000000100";
        ram[110] = "0b00111110000111000001001001101010";
        ram[111] = "0b00111101110001000100000010000111";
        ram[112] = "0b10111100101001110000101110101000";
        ram[113] = "0b00111100001001011101100110101110";
        ram[114] = "0b00111101010110000000100110010001";
        ram[115] = "0b00111011101111110101100010110000";
        ram[116] = "0b10111110000100011100110100011100";
        ram[117] = "0b10111101100010111101111100010110";
        ram[118] = "0b10111100100011010000101101001100";
        ram[119] = "0b00111100101001001010001010101100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_6) {
meminst = new inference_conv2d_f3_0_2_6_ram("inference_conv2d_f3_0_2_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_6() {
    delete meminst;
}


};//endmodule
#endif
