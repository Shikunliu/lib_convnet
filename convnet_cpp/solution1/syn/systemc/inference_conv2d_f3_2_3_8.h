// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_8_H__
#define __inference_conv2d_f3_2_3_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_8_ram) {
        ram[0] = "0b10111101111101101110101011001000";
        ram[1] = "0b10111101010010010110111000001000";
        ram[2] = "0b00111101111010001110101000111010";
        ram[3] = "0b00111110000100000111111000010111";
        ram[4] = "0b00111101101010111111110011000011";
        ram[5] = "0b00111011100001000110001001100101";
        ram[6] = "0b00111011100000111011100010000111";
        ram[7] = "0b00111101100001100100110111000010";
        ram[8] = "0b10111101000101110011100101101101";
        ram[9] = "0b00111101111101000011101001100100";
        ram[10] = "0b10111110001001100110001101000001";
        ram[11] = "0b10111101010111100100110001101100";
        ram[12] = "0b00111100101101110000101010001110";
        ram[13] = "0b10111101000010001010111011111011";
        ram[14] = "0b10111101000101000110011011110101";
        ram[15] = "0b00111110000010100101011000010101";
        ram[16] = "0b00111101100001110011000110011101";
        ram[17] = "0b00111101100111001111100001011110";
        ram[18] = "0b10111101100011100101101000000000";
        ram[19] = "0b00111101110000010001011010001110";
        ram[20] = "0b10111101100001100010101010101111";
        ram[21] = "0b00111101000110100001110000100110";
        ram[22] = "0b00111101000101001100000100001000";
        ram[23] = "0b10111101101100110011011010101001";
        ram[24] = "0b10111101111100100100010000100000";
        ram[25] = "0b00111101101011101101100010101011";
        ram[26] = "0b10111101111011101010001110011100";
        ram[27] = "0b00111110000001111001111111101101";
        ram[28] = "0b00111101111100101001010111101010";
        ram[29] = "0b10111101101000000000110010110000";
        ram[30] = "0b00111101010010101001110010100111";
        ram[31] = "0b00111100011000101100100111111010";
        ram[32] = "0b10111101111011100101101111001000";
        ram[33] = "0b00111110001010110001001110011101";
        ram[34] = "0b00111110000001101010110111110111";
        ram[35] = "0b10111100001001001111100101001001";
        ram[36] = "0b00111110001000111000100000100010";
        ram[37] = "0b00111101000110010011000111100101";
        ram[38] = "0b10111100111011011001010111010000";
        ram[39] = "0b00111100000001100010000011100001";
        ram[40] = "0b10111101010000000110000110111010";
        ram[41] = "0b10111101000101110001111100110110";
        ram[42] = "0b10111100001001101011001101011110";
        ram[43] = "0b00111110010001010100101011000011";
        ram[44] = "0b00111100111110100001000001100111";
        ram[45] = "0b00111100101001000001101010010001";
        ram[46] = "0b00111101111000111100100111101111";
        ram[47] = "0b10111100111111010101001101001000";
        ram[48] = "0b10111100000100100111101011100010";
        ram[49] = "0b00111101101001011110010000111000";
        ram[50] = "0b10111101011110011110011001011011";
        ram[51] = "0b10111101100111110100101000101101";
        ram[52] = "0b10111110000011111000000001010110";
        ram[53] = "0b10111110010111011100010010000111";
        ram[54] = "0b00111110010000101111001010110110";
        ram[55] = "0b10111110000110110001110110010011";
        ram[56] = "0b10111001101111100011100111110011";
        ram[57] = "0b10111101111000000010011001000110";
        ram[58] = "0b10111110000000100100000010111000";
        ram[59] = "0b00111101011001011111100000010111";
        ram[60] = "0b00111100011001011111100111000100";
        ram[61] = "0b00111110000000100001011100001001";
        ram[62] = "0b00111010101010010101111100001001";
        ram[63] = "0b10111110001000110000101000001011";
        ram[64] = "0b00111100011101111100101101111110";
        ram[65] = "0b10111101101100100001110100101100";
        ram[66] = "0b10111101000011100110101001000001";
        ram[67] = "0b00111101001001010100110001010101";
        ram[68] = "0b00111110000111000010111111000111";
        ram[69] = "0b00111101100100110011000010010100";
        ram[70] = "0b00111101111011010101001100000101";
        ram[71] = "0b10111110001111110010111100010010";
        ram[72] = "0b10111011001110101100100110010101";
        ram[73] = "0b00111110001010111111000011011100";
        ram[74] = "0b00111101101010100100010101101001";
        ram[75] = "0b00111110000111101010001011010011";
        ram[76] = "0b10111101000010010010110001111111";
        ram[77] = "0b10111100111011101110110110111111";
        ram[78] = "0b00111110000111101101101010101001";
        ram[79] = "0b10111101000000010100110010011100";
        ram[80] = "0b00111110000001110001010011111101";
        ram[81] = "0b10111101011110100010011010111101";
        ram[82] = "0b10111101010001101101011100011111";
        ram[83] = "0b00111101111010010111011101000010";
        ram[84] = "0b00111101100011101010111001001110";
        ram[85] = "0b10111001000001101011110110110000";
        ram[86] = "0b00111100000000001001110010001000";
        ram[87] = "0b00111101111101011111101110110101";
        ram[88] = "0b00111101100110110000011000100011";
        ram[89] = "0b10111110000010100011101101011000";
        ram[90] = "0b00111100101011000111011011101100";
        ram[91] = "0b00111110000111100010001111110010";
        ram[92] = "0b10111101100111110111010100011110";
        ram[93] = "0b00111110001010011000010110101101";
        ram[94] = "0b00111101000011011000111011100100";
        ram[95] = "0b10111101101010100000010001001011";
        ram[96] = "0b00111101011110011000001100001110";
        ram[97] = "0b10111101100010001010001101100101";
        ram[98] = "0b00111101010111101111111010010011";
        ram[99] = "0b10111110010011000111000010000110";
        ram[100] = "0b00111101001001111110010110101000";
        ram[101] = "0b00111101001111011000000010010100";
        ram[102] = "0b10111110010000000100000001111101";
        ram[103] = "0b10111100000100010110100010101000";
        ram[104] = "0b00111101010011000110110111001101";
        ram[105] = "0b00111101111101110100111101110010";
        ram[106] = "0b00111101100100011001010011101000";
        ram[107] = "0b00111100001111001101101110111110";
        ram[108] = "0b10111101110000100010010000010111";
        ram[109] = "0b00111101010111010111010010100000";
        ram[110] = "0b10111110000110111110000100100010";
        ram[111] = "0b10111101111010001010001111111001";
        ram[112] = "0b10111101000101000000010001111111";
        ram[113] = "0b10111011001100111001111010101000";
        ram[114] = "0b00111101000100011001010100011110";
        ram[115] = "0b00111101110110111100110010101111";
        ram[116] = "0b00111110000001001000000001100011";
        ram[117] = "0b00111011101100011011001111000010";
        ram[118] = "0b10111100110011001000110101110111";
        ram[119] = "0b00111100100101011001110011101011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_8) {
meminst = new inference_conv2d_f3_2_3_8_ram("inference_conv2d_f3_2_3_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_8() {
    delete meminst;
}


};//endmodule
#endif
