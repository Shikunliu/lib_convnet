// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_6_H__
#define __inference_conv2d_f3_4_4_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_6_ram) {
        ram[0] = "0b00111100110111101100011110100001";
        ram[1] = "0b10111100111001001101111000000110";
        ram[2] = "0b00111100110110110100000001100011";
        ram[3] = "0b10111101110000111101000101100001";
        ram[4] = "0b00111101101000011100111001011111";
        ram[5] = "0b10111101011001010100100001110100";
        ram[6] = "0b00111101000001001110001110010101";
        ram[7] = "0b00111110001111000101000000000101";
        ram[8] = "0b00111101001011100010000110010110";
        ram[9] = "0b10111101100100001101111111111010";
        ram[10] = "0b00111101110101100110000001011111";
        ram[11] = "0b10111110000001000101110000110110";
        ram[12] = "0b10111101010111011110011100100001";
        ram[13] = "0b10111100110110010100101010111111";
        ram[14] = "0b10111101010010011001101100011111";
        ram[15] = "0b00111101000001100111011110011001";
        ram[16] = "0b00111011100101101011111110100000";
        ram[17] = "0b10111101111110011110001110000110";
        ram[18] = "0b10111101101000001100110111010110";
        ram[19] = "0b10111110000101001011011110110011";
        ram[20] = "0b00111101110001011100000011111101";
        ram[21] = "0b10111011010100001100011110101110";
        ram[22] = "0b10111101101111111100110000110011";
        ram[23] = "0b10111100100001100000000010010101";
        ram[24] = "0b00111101100011011011111101001000";
        ram[25] = "0b00111101011010111011010010000100";
        ram[26] = "0b00111100011010111110000000100011";
        ram[27] = "0b00111101100101110111110001111011";
        ram[28] = "0b00111110000011110000100100001111";
        ram[29] = "0b10111010000011000111011010111110";
        ram[30] = "0b10111100100110011000101011101100";
        ram[31] = "0b10111100100101110110111110001000";
        ram[32] = "0b00111101001010010110011111110011";
        ram[33] = "0b00111101001000001111101101011000";
        ram[34] = "0b10111101111010010000011000000011";
        ram[35] = "0b00111101001001100110111101101011";
        ram[36] = "0b00111011100011001100101111101011";
        ram[37] = "0b10111101101101011000111010000000";
        ram[38] = "0b00111101100110011000001100011100";
        ram[39] = "0b00111011110101010110010100110111";
        ram[40] = "0b00111101110001101000110000011001";
        ram[41] = "0b10111101101000101011101100001000";
        ram[42] = "0b10111101101000101001000000001011";
        ram[43] = "0b00111101000110101100110111111100";
        ram[44] = "0b00111101111110000111000001010100";
        ram[45] = "0b10111110001000010001011000100011";
        ram[46] = "0b00111101101010011001101011110111";
        ram[47] = "0b00111100100010000001101111111001";
        ram[48] = "0b00111101001011100010100100001000";
        ram[49] = "0b10111101101101010000100101101111";
        ram[50] = "0b00111110010000111011100100101000";
        ram[51] = "0b00111101111111001000011001001001";
        ram[52] = "0b00111101100111111000111100111010";
        ram[53] = "0b10111100000100010111001000100011";
        ram[54] = "0b00111101111010100100011001011010";
        ram[55] = "0b10111110000001110010011101010111";
        ram[56] = "0b00111100110000101100001000011100";
        ram[57] = "0b00111101011011000100011100000000";
        ram[58] = "0b10111100101100111001101110100011";
        ram[59] = "0b00111101100111100111001000101100";
        ram[60] = "0b10111101000101001000111001100010";
        ram[61] = "0b10111101111011111101110100100011";
        ram[62] = "0b10111110010000001001001100010000";
        ram[63] = "0b00111101111010100001001011111001";
        ram[64] = "0b00111101100010111111001001100010";
        ram[65] = "0b10111101101101110101100100011000";
        ram[66] = "0b00111101100100000110100001110000";
        ram[67] = "0b00111100111111010011110001101100";
        ram[68] = "0b00111101110111010001101000100010";
        ram[69] = "0b00111101111010001010011110100100";
        ram[70] = "0b00111100110001001101001111011010";
        ram[71] = "0b00111110001000110000011000011100";
        ram[72] = "0b00111110011101000100001010000101";
        ram[73] = "0b00111101001001110100000010110111";
        ram[74] = "0b00111101011100100010100011011101";
        ram[75] = "0b00111101111001010001010011000010";
        ram[76] = "0b10111110001011011100001011110100";
        ram[77] = "0b00111011110000001001101010001111";
        ram[78] = "0b00111101011001000111100100001100";
        ram[79] = "0b10111101100111100011000110101111";
        ram[80] = "0b10111101100111101111100100101101";
        ram[81] = "0b10111100000010010111010011011110";
        ram[82] = "0b10111100101011001100110100011101";
        ram[83] = "0b00111110000000010100010010001001";
        ram[84] = "0b10111101001010010111011000000000";
        ram[85] = "0b00111110000000100110000010110011";
        ram[86] = "0b10111101000101001110110000000101";
        ram[87] = "0b00111100001000000010010010011000";
        ram[88] = "0b10111101111101011011110001000101";
        ram[89] = "0b00111110010011100000001101110001";
        ram[90] = "0b00111110000010101110110011010000";
        ram[91] = "0b00111101100110101001001011100110";
        ram[92] = "0b10111101110100011000110000011001";
        ram[93] = "0b00111110000010010110100110100001";
        ram[94] = "0b00111101101111000101101010101010";
        ram[95] = "0b00111101110001000111000101010111";
        ram[96] = "0b10111101011010000010111001101101";
        ram[97] = "0b00111101111111111011101101010001";
        ram[98] = "0b10111101111001111110100011001101";
        ram[99] = "0b00111101100001110010011010000000";
        ram[100] = "0b00111110001101001111010101001101";
        ram[101] = "0b10111110001111000011110111101110";
        ram[102] = "0b00111101101001111101011011111001";
        ram[103] = "0b10111101000001000001011001100000";
        ram[104] = "0b00111100111111000010100000000100";
        ram[105] = "0b10111100100110111010110001100100";
        ram[106] = "0b00111101110000101011001101010011";
        ram[107] = "0b00111110001001111100011010111001";
        ram[108] = "0b10111101100001100111101001100000";
        ram[109] = "0b00111100100000001010100001100111";
        ram[110] = "0b10111100001110010010011010010010";
        ram[111] = "0b00111100100011011011000110011001";
        ram[112] = "0b00111101010010111101000011101111";
        ram[113] = "0b10111101110101100111101000010000";
        ram[114] = "0b10111100110011111100011101010011";
        ram[115] = "0b00111101100010001000000011001011";
        ram[116] = "0b10111101110111110110110000100111";
        ram[117] = "0b00111110000111000010001100110001";
        ram[118] = "0b00111110010110011011111101011001";
        ram[119] = "0b10111101010101101011000001100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_6) {
meminst = new inference_conv2d_f3_4_4_6_ram("inference_conv2d_f3_4_4_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_6() {
    delete meminst;
}


};//endmodule
#endif
