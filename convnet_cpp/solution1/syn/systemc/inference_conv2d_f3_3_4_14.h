// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_14_H__
#define __inference_conv2d_f3_3_4_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_14_ram) {
        ram[0] = "0b00111100010110101110010100101001";
        ram[1] = "0b10111110001010001001010100000111";
        ram[2] = "0b10111100111110010000011101010011";
        ram[3] = "0b00111110000000101101000011100101";
        ram[4] = "0b00111110001000001101010010011001";
        ram[5] = "0b10111101011011011110111111100010";
        ram[6] = "0b10111011110111101001011111010000";
        ram[7] = "0b10111101101101001001001001101100";
        ram[8] = "0b10111101101100111101110110110011";
        ram[9] = "0b10111100100111001100000100110111";
        ram[10] = "0b10111101111100101010011110111101";
        ram[11] = "0b00111010011000011011100001011011";
        ram[12] = "0b10111101001111100010010001011110";
        ram[13] = "0b00111100100011011001001110011100";
        ram[14] = "0b00111110000011111000011001011101";
        ram[15] = "0b00111110010110110010110101001101";
        ram[16] = "0b10111110000110111111000111101001";
        ram[17] = "0b00111110000100101111000110101010";
        ram[18] = "0b10111101100001111000110111010110";
        ram[19] = "0b00111101101001110010001011010100";
        ram[20] = "0b00111110001011111101011000001111";
        ram[21] = "0b10111101000011110111101000001011";
        ram[22] = "0b10111101101011011101011111101101";
        ram[23] = "0b00111101101111000010101000000010";
        ram[24] = "0b00111100100011101100011011011000";
        ram[25] = "0b10111101000010011011100001100000";
        ram[26] = "0b10111101101101101010110100111011";
        ram[27] = "0b00111101110111010111110000101101";
        ram[28] = "0b10111010101101101110111101000000";
        ram[29] = "0b00111100001000101111001001010011";
        ram[30] = "0b00111100101101101011101001110010";
        ram[31] = "0b10111101110000101100001101000100";
        ram[32] = "0b10111101001110100110000011010100";
        ram[33] = "0b10111100110001100000010110011110";
        ram[34] = "0b00111100101110010100101000111001";
        ram[35] = "0b00111101010001010011011000000000";
        ram[36] = "0b10111010000000001101110001001101";
        ram[37] = "0b00111101111001011100101010110000";
        ram[38] = "0b10111101100011000111011110001101";
        ram[39] = "0b10111101111100001011011000110001";
        ram[40] = "0b10111100100101111001110011010101";
        ram[41] = "0b10111100101110000101000010101001";
        ram[42] = "0b00111101010111100000111000001000";
        ram[43] = "0b10111110001000011111010000101100";
        ram[44] = "0b00111101100001101111000011000010";
        ram[45] = "0b00111101101110110001001000110010";
        ram[46] = "0b00111110011000001101001000111101";
        ram[47] = "0b10111100110010111000110011111100";
        ram[48] = "0b00111110001001100000011000110001";
        ram[49] = "0b10111101000111111011101111011000";
        ram[50] = "0b10111101111010110110111100011010";
        ram[51] = "0b00111100101101110111000001111010";
        ram[52] = "0b10111110000001110001011111011111";
        ram[53] = "0b10111101001011101100111001111111";
        ram[54] = "0b10111101000011011101100110001101";
        ram[55] = "0b10111110000000001110111100010011";
        ram[56] = "0b10111110001101111010101101110101";
        ram[57] = "0b10111101001101100010111011111100";
        ram[58] = "0b10111101001010110011100001000010";
        ram[59] = "0b00111100011001100001011111110111";
        ram[60] = "0b00111101100001000111011100001101";
        ram[61] = "0b00111100001001101001001010100110";
        ram[62] = "0b10111101000111000111101010001010";
        ram[63] = "0b00111101101101110010110111111111";
        ram[64] = "0b10111101011111110011011101001101";
        ram[65] = "0b00111100010000011000011001001000";
        ram[66] = "0b10111101000010000100101010111101";
        ram[67] = "0b10111101000001001101111101001000";
        ram[68] = "0b00111100000001001110010001100001";
        ram[69] = "0b00111101001010001101010010100000";
        ram[70] = "0b00111110000101101101000001001110";
        ram[71] = "0b00111101111101111000000000110100";
        ram[72] = "0b00111100111010110110100100000101";
        ram[73] = "0b10111101010000100101011001101100";
        ram[74] = "0b00111101111001001110011100100101";
        ram[75] = "0b00111010111100110110000010001010";
        ram[76] = "0b10111100100011100011011110011011";
        ram[77] = "0b00111101011011111010110110001000";
        ram[78] = "0b00111101001110011110101011000011";
        ram[79] = "0b10111011101011011011000110101010";
        ram[80] = "0b10111110001100110100110000011011";
        ram[81] = "0b10111101001100101100001110000111";
        ram[82] = "0b10111101101000010011110100010111";
        ram[83] = "0b00111101001110111110111111101011";
        ram[84] = "0b00111011011110000100010111110111";
        ram[85] = "0b10111101111101110100011100001111";
        ram[86] = "0b10111110010011000101001010100100";
        ram[87] = "0b10111110000001000010101110110110";
        ram[88] = "0b10111101011001111010111011010000";
        ram[89] = "0b10111101101101101100111100001100";
        ram[90] = "0b10111101100011110010111111000001";
        ram[91] = "0b10111101111000101101010100010111";
        ram[92] = "0b10111101100100011000100001111011";
        ram[93] = "0b10111101100111110111000000001000";
        ram[94] = "0b00111101100001100111100100111001";
        ram[95] = "0b10111101100100001111110000111100";
        ram[96] = "0b10111100110011011001111001001110";
        ram[97] = "0b00111110000100101000010011100000";
        ram[98] = "0b00111101010110101111110000111010";
        ram[99] = "0b10111110000000011011110111101000";
        ram[100] = "0b10111100001110011100010111110100";
        ram[101] = "0b10111110000000001110100010000110";
        ram[102] = "0b10111100001100111110110111011001";
        ram[103] = "0b10111100111001001011100100011101";
        ram[104] = "0b10111100001100101100100010101010";
        ram[105] = "0b00111110010010101101111001100101";
        ram[106] = "0b10111101110101010001000011010100";
        ram[107] = "0b10111100101011010010100100101110";
        ram[108] = "0b00111101100011010110000001010110";
        ram[109] = "0b10111100101110011001111111001001";
        ram[110] = "0b00111101000110000100100001111100";
        ram[111] = "0b10111100010111101100011110100001";
        ram[112] = "0b10111101100001110110110000100000";
        ram[113] = "0b10111100110001000110000101011001";
        ram[114] = "0b00111100100001100010111101011010";
        ram[115] = "0b10111101001100101001100011110100";
        ram[116] = "0b00111101101101100001101010110001";
        ram[117] = "0b00111101001100110111110010011010";
        ram[118] = "0b10111011101000010100010000110011";
        ram[119] = "0b10111101111101100010011100111001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_14) {
meminst = new inference_conv2d_f3_3_4_14_ram("inference_conv2d_f3_3_4_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_14() {
    delete meminst;
}


};//endmodule
#endif
