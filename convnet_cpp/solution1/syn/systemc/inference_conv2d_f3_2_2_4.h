// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_4_H__
#define __inference_conv2d_f3_2_2_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_4_ram) {
        ram[0] = "0b00111101110010110100011101001110";
        ram[1] = "0b00111101101101000001100001011110";
        ram[2] = "0b00111101100111110001100101111000";
        ram[3] = "0b10111101101001110001101101010101";
        ram[4] = "0b10111101110100011111001001010110";
        ram[5] = "0b00111101111100110110100010101101";
        ram[6] = "0b10111100110000001101000001110101";
        ram[7] = "0b00111101111011100000001010100111";
        ram[8] = "0b10111101100000011000110000001100";
        ram[9] = "0b10111100011110101101100001111001";
        ram[10] = "0b00111101110001101011001000001110";
        ram[11] = "0b10111101110010111001110111011110";
        ram[12] = "0b10111110000010100001100110000111";
        ram[13] = "0b00111110000101111100110101000110";
        ram[14] = "0b00111101010110100100000001010011";
        ram[15] = "0b00111101111101110110000101000110";
        ram[16] = "0b00111101101101101100100111001110";
        ram[17] = "0b00111101100101000001100000101000";
        ram[18] = "0b10111101000010010010001101100000";
        ram[19] = "0b00111100110101011010100101001010";
        ram[20] = "0b00111101001111010111010111000111";
        ram[21] = "0b00111110000101011101011100000010";
        ram[22] = "0b10111100101011101110011100111110";
        ram[23] = "0b00111011110010110010000100111100";
        ram[24] = "0b10111010011000001010100011010101";
        ram[25] = "0b00111100110000010000101011111000";
        ram[26] = "0b00111101011011011001011011011100";
        ram[27] = "0b00111100011011010100110101110110";
        ram[28] = "0b10111110001101000000011000111010";
        ram[29] = "0b10111110000010110110100000000110";
        ram[30] = "0b10111101001001100000011111010010";
        ram[31] = "0b10111101000010100001010010001100";
        ram[32] = "0b00111110001110111110110100110001";
        ram[33] = "0b10111101000111110101011100101110";
        ram[34] = "0b10111110001101000000011101000110";
        ram[35] = "0b00111101001110110111000001101001";
        ram[36] = "0b10111101000000111011111001001011";
        ram[37] = "0b10111100010110011001010011000111";
        ram[38] = "0b10111101010001000110000000010111";
        ram[39] = "0b00111110000000011010011011010111";
        ram[40] = "0b10111101100100011000110010111011";
        ram[41] = "0b00111101000001110111110000101011";
        ram[42] = "0b10111101001100101010110010010000";
        ram[43] = "0b00111011101111111100111011111000";
        ram[44] = "0b00111101010101111110110101110111";
        ram[45] = "0b00111110001000100001011100001001";
        ram[46] = "0b10111011111001011000100011011011";
        ram[47] = "0b10111101101111001110100111001011";
        ram[48] = "0b10111100100001110000000000000100";
        ram[49] = "0b10111101011000101010001111101001";
        ram[50] = "0b10111011100010000111100001001010";
        ram[51] = "0b00111101110001101111100101110110";
        ram[52] = "0b00111101110001101111000000010100";
        ram[53] = "0b00111101010001001100000001011001";
        ram[54] = "0b10111101100001000011111100011100";
        ram[55] = "0b10111100100011001000011011110111";
        ram[56] = "0b00111101100100101111000011111100";
        ram[57] = "0b10111110010111100010011100011000";
        ram[58] = "0b10111101110110111100010011010010";
        ram[59] = "0b10111101101001000101010100000111";
        ram[60] = "0b10111101101010011111111111010110";
        ram[61] = "0b10111100101100010001101101100001";
        ram[62] = "0b10111110001010010001100001011101";
        ram[63] = "0b00111110000001100010011001110000";
        ram[64] = "0b10111101101110001101001001010001";
        ram[65] = "0b10111101101010010111101001110101";
        ram[66] = "0b10111110001001111110111000001011";
        ram[67] = "0b10111101100011101011010101000111";
        ram[68] = "0b10111101000010100101011110101000";
        ram[69] = "0b00111101111100111011011011001100";
        ram[70] = "0b00111101011101011001101011010010";
        ram[71] = "0b10111101010011000011100000011101";
        ram[72] = "0b00111110001101000111101101100111";
        ram[73] = "0b00111101100111010001001001000101";
        ram[74] = "0b10111110000010010110110010000011";
        ram[75] = "0b00111100110110101100011000011111";
        ram[76] = "0b00111101011111101101110111000001";
        ram[77] = "0b00111101110010111110101011001000";
        ram[78] = "0b10111110000001000000000110000010";
        ram[79] = "0b10111110001000010111101010001001";
        ram[80] = "0b00111100001110010011110011001101";
        ram[81] = "0b00111101100000011110001011101100";
        ram[82] = "0b10111101101000001110111100010011";
        ram[83] = "0b10111110000011110100100101001001";
        ram[84] = "0b00111101100101111110001001001101";
        ram[85] = "0b10111011100001100100100101110000";
        ram[86] = "0b00111101100000100111010110000011";
        ram[87] = "0b00111110010100000010110111100000";
        ram[88] = "0b10111100000011001101001111001110";
        ram[89] = "0b10111101011111111010010111101101";
        ram[90] = "0b00111101100101111101001111010100";
        ram[91] = "0b10111101100001010011110101111111";
        ram[92] = "0b10111100100111001011111111110100";
        ram[93] = "0b00111100110110111010001011110100";
        ram[94] = "0b00111110000000001011000000101001";
        ram[95] = "0b10111101001100010111110101101011";
        ram[96] = "0b10111110000010111110000100100010";
        ram[97] = "0b10111101101001011100001111111010";
        ram[98] = "0b00111101111100100101001001001000";
        ram[99] = "0b10111101011111000100000101111111";
        ram[100] = "0b10111101100110110110010110110111";
        ram[101] = "0b10111101001010111011101000010011";
        ram[102] = "0b00111101110010011000000001100010";
        ram[103] = "0b10111101100100110001100101110101";
        ram[104] = "0b10111110010010001011000000001000";
        ram[105] = "0b00111101011001010001001000111110";
        ram[106] = "0b10111101001100000100101010110110";
        ram[107] = "0b00111100000000101010111011110001";
        ram[108] = "0b10111101010100010010001101011001";
        ram[109] = "0b00111100010101101100001101011011";
        ram[110] = "0b00111101000011010110111001100011";
        ram[111] = "0b10111101110111110011011110111001";
        ram[112] = "0b00111100110110010011010111111100";
        ram[113] = "0b00111110000011100111110111011101";
        ram[114] = "0b10111100100101001011000100110010";
        ram[115] = "0b00111100101011000000101111111000";
        ram[116] = "0b00111101101001101110111110110110";
        ram[117] = "0b10111110000110101110000000111011";
        ram[118] = "0b00111100100111111010011101100101";
        ram[119] = "0b00111101101000111100011010100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_4) {
meminst = new inference_conv2d_f3_2_2_4_ram("inference_conv2d_f3_2_2_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_4() {
    delete meminst;
}


};//endmodule
#endif
