// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_14_H__
#define __inference_conv2d_f3_0_4_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_14_ram) {
        ram[0] = "0b00111110001011111000111110001010";
        ram[1] = "0b00111101000011100110101010101100";
        ram[2] = "0b10111110001000000110111011100011";
        ram[3] = "0b00111101011101110100110111111010";
        ram[4] = "0b00111110000101000111110111000011";
        ram[5] = "0b00111101100111110010001100011110";
        ram[6] = "0b00111101110001010001000001110110";
        ram[7] = "0b00111101100100111000010101011011";
        ram[8] = "0b10111101011011011110101010111111";
        ram[9] = "0b00111101011000101001011011001110";
        ram[10] = "0b10111101101000010000000010010110";
        ram[11] = "0b10111101011100111100001000111010";
        ram[12] = "0b00111101110011011010000000010111";
        ram[13] = "0b00111101011000000010001010011010";
        ram[14] = "0b10111110000000110001001001101111";
        ram[15] = "0b10111101111001001000101111101011";
        ram[16] = "0b00111110000001100001111001001111";
        ram[17] = "0b10111100100111111111111101111010";
        ram[18] = "0b10111110001100000010001101100100";
        ram[19] = "0b10111101100000110101001011000011";
        ram[20] = "0b00111110001101111011110001111111";
        ram[21] = "0b10111110001011011110000010010011";
        ram[22] = "0b10111110000111010100101001011110";
        ram[23] = "0b00111011101110110011111011110000";
        ram[24] = "0b00111100000111001011110001001110";
        ram[25] = "0b00111101011101100111011101010110";
        ram[26] = "0b10111100110101011010101111001110";
        ram[27] = "0b00111101100011101010001011111011";
        ram[28] = "0b00111101111000100000011100001100";
        ram[29] = "0b00111011000000100111111111001101";
        ram[30] = "0b10111001011011011101100011110010";
        ram[31] = "0b00111101100100101111111011010011";
        ram[32] = "0b10111110000000001110000001100101";
        ram[33] = "0b10111101011110011100010010110010";
        ram[34] = "0b00111101010110110000001101011100";
        ram[35] = "0b00111101101110110000010100001001";
        ram[36] = "0b00111010000100101111010100111011";
        ram[37] = "0b10111101000100001011100000010100";
        ram[38] = "0b00111101100100111101110000111011";
        ram[39] = "0b10111110001111010101000111111000";
        ram[40] = "0b00111101101000000001000110101011";
        ram[41] = "0b00111101011100101100111001101111";
        ram[42] = "0b00111101001111001100001111010110";
        ram[43] = "0b10111101110101010110000110010001";
        ram[44] = "0b00111101011110011011101110010011";
        ram[45] = "0b00111100010100101001010101100100";
        ram[46] = "0b00111101100011001011010110111011";
        ram[47] = "0b00111101010011101010110010000110";
        ram[48] = "0b00111011110100010011101001110000";
        ram[49] = "0b10111100000100101110010110100000";
        ram[50] = "0b10111101011010010011100011111001";
        ram[51] = "0b10111101101000101111110101110110";
        ram[52] = "0b00111101110010101111000101101110";
        ram[53] = "0b10111110000011110110000010011110";
        ram[54] = "0b10111110001001011101111011011111";
        ram[55] = "0b00111100111111101010111100110011";
        ram[56] = "0b00111101010100011111111000010100";
        ram[57] = "0b10111101001101110001010011101111";
        ram[58] = "0b00111101100010110010000001100111";
        ram[59] = "0b10111101001111101001010011000110";
        ram[60] = "0b10111100111100000001001111000100";
        ram[61] = "0b10111101111010101000011011010111";
        ram[62] = "0b00111101101010001000100011111000";
        ram[63] = "0b10111101110100001011100001001010";
        ram[64] = "0b10111101001100001000011011001011";
        ram[65] = "0b10111100111011111101101101011010";
        ram[66] = "0b10111100100010001101001101000011";
        ram[67] = "0b10111101110001001111100010110110";
        ram[68] = "0b00111100100111100101010000010011";
        ram[69] = "0b00111100001001101011110101101111";
        ram[70] = "0b00111100010111111011111100011000";
        ram[71] = "0b10111101101110101110001101100001";
        ram[72] = "0b10111101110100000100111001100010";
        ram[73] = "0b10111110001001110111100000010100";
        ram[74] = "0b00111101100111001000011100010010";
        ram[75] = "0b10111101011111111100010011011100";
        ram[76] = "0b10111101001111010111001111001001";
        ram[77] = "0b10111011100010011111011010111001";
        ram[78] = "0b10111110000000010110010110010000";
        ram[79] = "0b00111110000101100001011000101111";
        ram[80] = "0b00111101100011110111100010111100";
        ram[81] = "0b10111101100001100110110010100100";
        ram[82] = "0b10111101100110111101110010000101";
        ram[83] = "0b00111101100011000010111011010101";
        ram[84] = "0b10111110000001100101000101101110";
        ram[85] = "0b10111101101010101111000111001100";
        ram[86] = "0b10111101010000000000011111000010";
        ram[87] = "0b10111110000011011100000110100100";
        ram[88] = "0b00111101101000111010110101101001";
        ram[89] = "0b10111100110001100001100011101001";
        ram[90] = "0b00111101011101100110101000011111";
        ram[91] = "0b10111110000000110000111100000110";
        ram[92] = "0b10111101111101001110100011111011";
        ram[93] = "0b00111101011101101101001111010010";
        ram[94] = "0b00111010010111101011011100111001";
        ram[95] = "0b10111000101000000011000111011010";
        ram[96] = "0b10111101001000010000111101000100";
        ram[97] = "0b10111101000110010001010010100100";
        ram[98] = "0b00111101000000011101010011101100";
        ram[99] = "0b00111101101011111000011101001111";
        ram[100] = "0b00111110000010111011001111001000";
        ram[101] = "0b00111101001110110110001001011100";
        ram[102] = "0b10111101100000011000110011111110";
        ram[103] = "0b10111101101010111101110110011111";
        ram[104] = "0b10111101110010010101001001100111";
        ram[105] = "0b00111101100100110110001110001010";
        ram[106] = "0b00111101100101101010011011100011";
        ram[107] = "0b10111101110000111100101001110101";
        ram[108] = "0b00111110000100011001111110000000";
        ram[109] = "0b10111110000001100001101001100001";
        ram[110] = "0b10111101011000111010110110000100";
        ram[111] = "0b10111101101000100110100110001111";
        ram[112] = "0b00111101011101001101101101110100";
        ram[113] = "0b10111101111111110011101101100100";
        ram[114] = "0b00111101010010011000001100110111";
        ram[115] = "0b00111110000110010010111011101000";
        ram[116] = "0b10111101100101010111001100101111";
        ram[117] = "0b10111101111110110001101011110100";
        ram[118] = "0b10111101010111010001000110001001";
        ram[119] = "0b00111101111001110011101000110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_14) {
meminst = new inference_conv2d_f3_0_4_14_ram("inference_conv2d_f3_0_4_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_14() {
    delete meminst;
}


};//endmodule
#endif
