// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_13_H__
#define __inference_conv2d_f3_1_2_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_13_ram) {
        ram[0] = "0b00111010000110100011011011011111";
        ram[1] = "0b10111101101111010111111000011101";
        ram[2] = "0b10111101011101111100100011111010";
        ram[3] = "0b10111100011110111001101111101101";
        ram[4] = "0b10111101011011100010101001100101";
        ram[5] = "0b00111101010011110101001100001010";
        ram[6] = "0b00111100001110100001101111110000";
        ram[7] = "0b00111011010100001110111001000101";
        ram[8] = "0b10111101011101001000100111000101";
        ram[9] = "0b00111101111110011000001010001000";
        ram[10] = "0b00111110001000011101001001011011";
        ram[11] = "0b00111100110111011011111011111000";
        ram[12] = "0b10111011100100001101001001001011";
        ram[13] = "0b10111101100100011011000010100100";
        ram[14] = "0b10111110000010011010011000101111";
        ram[15] = "0b00111010101101001010011010111011";
        ram[16] = "0b00111101110011010010111101011110";
        ram[17] = "0b10111101100110010110010001100011";
        ram[18] = "0b00111100110011001110100100011101";
        ram[19] = "0b10111101111010000110100000110100";
        ram[20] = "0b00111101100100101101111101111001";
        ram[21] = "0b10111101110110011110000111110100";
        ram[22] = "0b10111101011000000101010101000000";
        ram[23] = "0b00111100001011111011001011100001";
        ram[24] = "0b10111100000101100110111101111000";
        ram[25] = "0b00111101001111111110101011010010";
        ram[26] = "0b00111110001000000011011000000000";
        ram[27] = "0b10111110001011110000011001110000";
        ram[28] = "0b00111110000000010111111110000100";
        ram[29] = "0b10111101100100101011110001100101";
        ram[30] = "0b00111100101010111101101101010000";
        ram[31] = "0b00111101101110000101001100100000";
        ram[32] = "0b10111101010010100000011000010011";
        ram[33] = "0b10111101111110111110010101010100";
        ram[34] = "0b00111100000010110100011110000111";
        ram[35] = "0b10111101100011111100010110110011";
        ram[36] = "0b00111101000010000100111001101000";
        ram[37] = "0b10111101100110100110000111101110";
        ram[38] = "0b00111101111101001000110010110101";
        ram[39] = "0b00111101000111110110001000010110";
        ram[40] = "0b10111101100111101011100000001111";
        ram[41] = "0b10111100101100111001000110010010";
        ram[42] = "0b10111101100100100001010011110000";
        ram[43] = "0b10111100001110010100101000111001";
        ram[44] = "0b10111101011011110111101110000011";
        ram[45] = "0b00111110000000101111011111110101";
        ram[46] = "0b00111110000001000001110100001000";
        ram[47] = "0b10111101001101001111010111100001";
        ram[48] = "0b00111110001111111001101110011001";
        ram[49] = "0b00111100100001101110111010011100";
        ram[50] = "0b00111110000000110101000111011111";
        ram[51] = "0b00111101001000001110011110111100";
        ram[52] = "0b10111101110101110100000000111110";
        ram[53] = "0b00111101001010000111100010101010";
        ram[54] = "0b00111110001101101101001111111010";
        ram[55] = "0b10111100111001000001000110001101";
        ram[56] = "0b00111110001001101001001111000000";
        ram[57] = "0b00111101011111001101101110100011";
        ram[58] = "0b00111101001110001101011110000010";
        ram[59] = "0b00111101010100101010101001011100";
        ram[60] = "0b10111110001010101010100001100101";
        ram[61] = "0b00111100000101100010110101101001";
        ram[62] = "0b10111100010111110110001001100110";
        ram[63] = "0b10111101011101011001001001010011";
        ram[64] = "0b10111101101001101010001100111000";
        ram[65] = "0b00111110001100101011101111101101";
        ram[66] = "0b00111110001011111011110110101101";
        ram[67] = "0b00111101000111101101100111100000";
        ram[68] = "0b10111101101000000101100011011110";
        ram[69] = "0b10111101010100000010001101111111";
        ram[70] = "0b10111110000110110010010111110110";
        ram[71] = "0b10111101010111010110100100110010";
        ram[72] = "0b00111101101100111101101101010111";
        ram[73] = "0b00111011100000000101100011101011";
        ram[74] = "0b10111101101111000001010000011000";
        ram[75] = "0b10111101100001011001011011110000";
        ram[76] = "0b10111101001100111100111110100110";
        ram[77] = "0b10111101000011100010110101110000";
        ram[78] = "0b00111101100010010001000110100111";
        ram[79] = "0b00111101110110000000001011000001";
        ram[80] = "0b10111101101000001011110110100011";
        ram[81] = "0b00111110010010101000000101010110";
        ram[82] = "0b00111100011110111111101010111000";
        ram[83] = "0b00111110010010010101111110101011";
        ram[84] = "0b10111101000010011011111100010110";
        ram[85] = "0b10111110001001011100011100000100";
        ram[86] = "0b00111100101110011100000000010101";
        ram[87] = "0b10111100001011001110001100100010";
        ram[88] = "0b00111101111100010101101101010111";
        ram[89] = "0b10111101110101011111011011111101";
        ram[90] = "0b10111101101100011010110100100001";
        ram[91] = "0b00111101100101000011111011011001";
        ram[92] = "0b00111101100010000001000011011011";
        ram[93] = "0b10111011100000000001101111011010";
        ram[94] = "0b10111101100101000101000000001100";
        ram[95] = "0b10111100000010111111010111100010";
        ram[96] = "0b00111100110100101011011110010011";
        ram[97] = "0b10111100011111100000001100111011";
        ram[98] = "0b10111110000110000000000010101000";
        ram[99] = "0b00111110010001001011110100110100";
        ram[100] = "0b10111110010001000110010111101001";
        ram[101] = "0b00111100100111110111111000010101";
        ram[102] = "0b00111101010110010110001110110100";
        ram[103] = "0b00111110000001100110010011010100";
        ram[104] = "0b10111011101101100000111011011011";
        ram[105] = "0b00111100101001110110110000100000";
        ram[106] = "0b10111110001011000001101011001110";
        ram[107] = "0b00111101101101001110001010110000";
        ram[108] = "0b00111101110010111110011010100011";
        ram[109] = "0b00111100011011010111011010010001";
        ram[110] = "0b00111101110010001110100111101001";
        ram[111] = "0b10111101100010000010110101111011";
        ram[112] = "0b10111101110100100110101111111000";
        ram[113] = "0b00111101110011101100001000000101";
        ram[114] = "0b10111110001101001100111110001101";
        ram[115] = "0b10111101110001011010111100101001";
        ram[116] = "0b00111101111001101111110111101011";
        ram[117] = "0b00111110000000100101100111100010";
        ram[118] = "0b00111110010000111100100000011001";
        ram[119] = "0b10111011100000100110100110010010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_13) {
meminst = new inference_conv2d_f3_1_2_13_ram("inference_conv2d_f3_1_2_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_13() {
    delete meminst;
}


};//endmodule
#endif
