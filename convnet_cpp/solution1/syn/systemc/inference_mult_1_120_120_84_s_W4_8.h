// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_8_H__
#define __inference_mult_1_120_120_84_s_W4_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_8_ram) {
        ram[0] = "0b00111101001100010000101001111111";
        ram[1] = "0b10111101010001110010110010010101";
        ram[2] = "0b10111110000101000100101011101000";
        ram[3] = "0b00111110001110100111101110010001";
        ram[4] = "0b10111100000001100110001111101000";
        ram[5] = "0b00111100110001111101001110011110";
        ram[6] = "0b10111101111010111011000100101001";
        ram[7] = "0b10111110000000011100111010101111";
        ram[8] = "0b00111101000011001110101111110001";
        ram[9] = "0b00111101010010010100001100100101";
        ram[10] = "0b10111101110110100100000111100101";
        ram[11] = "0b00111101001001000100101010110011";
        ram[12] = "0b00111101101111010010100111110111";
        ram[13] = "0b00111110000001000100101010100101";
        ram[14] = "0b10111101001010011010111010000101";
        ram[15] = "0b00111011111001111010001011111100";
        ram[16] = "0b00111011110110010011011001101000";
        ram[17] = "0b00111101000100111011010111011010";
        ram[18] = "0b10111101110000011010101001001100";
        ram[19] = "0b00111100101110011111111010010100";
        ram[20] = "0b10111011100100011101011010010111";
        ram[21] = "0b10111100101000011110101101000010";
        ram[22] = "0b00111110011000111101100110101001";
        ram[23] = "0b00111011100111000110010100100110";
        ram[24] = "0b10111110000011010000101111111010";
        ram[25] = "0b10111100011000101010011110010101";
        ram[26] = "0b00111101101101000111101011000110";
        ram[27] = "0b00111101100100000000010010111000";
        ram[28] = "0b00111101110001101101001100110001";
        ram[29] = "0b00111101010001001000110011000010";
        ram[30] = "0b10111101000000000111011011101001";
        ram[31] = "0b10111110000101111010010111110100";
        ram[32] = "0b00111110001001001110001011110011";
        ram[33] = "0b00111110000000110111011100011000";
        ram[34] = "0b00111100100110100010000010101000";
        ram[35] = "0b00111100000101111111001110010010";
        ram[36] = "0b10111101110001101010101111111001";
        ram[37] = "0b00111101011111110111011011110011";
        ram[38] = "0b00111110001001100111111001000001";
        ram[39] = "0b00111101010010111001110001001011";
        ram[40] = "0b10111110001101001001001110000110";
        ram[41] = "0b00111101000110011111111010101111";
        ram[42] = "0b00111101111000100100001101010111";
        ram[43] = "0b00111011110111000010011011011101";
        ram[44] = "0b10111101101011001010101101001100";
        ram[45] = "0b10111110011000010100111111001110";
        ram[46] = "0b00111100011000101010110010011110";
        ram[47] = "0b00111110010110000101000000010110";
        ram[48] = "0b10111110001101110000010110000101";
        ram[49] = "0b10111100101001111000100101111100";
        ram[50] = "0b00111110000110000110000100100000";
        ram[51] = "0b10111101001011101100011110101110";
        ram[52] = "0b00111100100100100111001011001001";
        ram[53] = "0b10111110000000011110111000100100";
        ram[54] = "0b10111010111000111000100001111011";
        ram[55] = "0b10111101110110100100001111111110";
        ram[56] = "0b00111011010100110100101111000010";
        ram[57] = "0b00111101000110010011011010011101";
        ram[58] = "0b00111101110110001001001111111011";
        ram[59] = "0b10111100101110110110110000011101";
        ram[60] = "0b00111101000100000101001111010101";
        ram[61] = "0b00111101101000000011000101100011";
        ram[62] = "0b00111100001111111111110011011011";
        ram[63] = "0b00111101101001011000001110110011";
        ram[64] = "0b10111101010010010010100100100100";
        ram[65] = "0b00111101001000101110000111000111";
        ram[66] = "0b10111101011001000110001110001101";
        ram[67] = "0b10111101111011111010011010011100";
        ram[68] = "0b10111011100010110001001110011010";
        ram[69] = "0b00111110000110100100010011001000";
        ram[70] = "0b10111110000001001010010011010011";
        ram[71] = "0b10111101111011100100011011010000";
        ram[72] = "0b10111101010110101010010000001011";
        ram[73] = "0b00111101110000101011110111011101";
        ram[74] = "0b10111101101001111001111111101101";
        ram[75] = "0b10111101111101011000010010110010";
        ram[76] = "0b10111100110010110010000110011100";
        ram[77] = "0b00111101100000110001011011100011";
        ram[78] = "0b00111101110001111101110000011101";
        ram[79] = "0b10111100110110011000010101111000";
        ram[80] = "0b10111101110000011110000000111111";
        ram[81] = "0b00111110000100001001001011001101";
        ram[82] = "0b10111100100010000000111000100001";
        ram[83] = "0b10111100001011101110100010110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_8_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_8) {
meminst = new inference_mult_1_120_120_84_s_W4_8_ram("inference_mult_1_120_120_84_s_W4_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_8() {
    delete meminst;
}


};//endmodule
#endif
