// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_60_H__
#define __inference_mult_1_120_120_84_s_W4_60_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_60_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_60_ram) {
        ram[0] = "0b00111100110010011111101001010101";
        ram[1] = "0b10111110001100111111001110011101";
        ram[2] = "0b00111011001000100101111001100100";
        ram[3] = "0b10111101100010110011001001001000";
        ram[4] = "0b10111100111011110100000111010111";
        ram[5] = "0b00111110001001011111101010101001";
        ram[6] = "0b00111101101101011001001110001000";
        ram[7] = "0b00111100110101101011101110011001";
        ram[8] = "0b00111100000000110110111010011111";
        ram[9] = "0b10111110001100111011001000010100";
        ram[10] = "0b10111110001100010101000101100001";
        ram[11] = "0b10111010101001001000101111100110";
        ram[12] = "0b00111101000000100000101011010010";
        ram[13] = "0b10111101111010111011010001001110";
        ram[14] = "0b10111110001100100001100101100101";
        ram[15] = "0b10111110000000000001101101000011";
        ram[16] = "0b00111101001110110010111111101100";
        ram[17] = "0b10111101110100001110000010101000";
        ram[18] = "0b00111101110000101111011001111101";
        ram[19] = "0b00111101111011110000011010110011";
        ram[20] = "0b10111110000111110010110111000011";
        ram[21] = "0b00111101110110011111001010111011";
        ram[22] = "0b00111101111001111100110110001010";
        ram[23] = "0b10111101011001010111001001100101";
        ram[24] = "0b00111101001000001110000100100001";
        ram[25] = "0b10111101010000101100001010001000";
        ram[26] = "0b10111010001100110001000100001111";
        ram[27] = "0b00111100010111011110001010011111";
        ram[28] = "0b10111101100101011100010100111100";
        ram[29] = "0b00111100101110000100010001001010";
        ram[30] = "0b00111100001100011100000110101111";
        ram[31] = "0b10111101100010101001011011111101";
        ram[32] = "0b00111100100011111000011110010010";
        ram[33] = "0b10111110000101101100011100100010";
        ram[34] = "0b00111100101011110100010010010001";
        ram[35] = "0b00111101001111100001010110010101";
        ram[36] = "0b10111101100100100100001010001101";
        ram[37] = "0b00111110001111110111001000101110";
        ram[38] = "0b10111101011100101001001100110000";
        ram[39] = "0b10111110001000011001101010000100";
        ram[40] = "0b10111101001010001000001010000110";
        ram[41] = "0b10111101111101010000101100001111";
        ram[42] = "0b00111101001011010100010000100001";
        ram[43] = "0b10111101000001100001010100100011";
        ram[44] = "0b00111110001111010011101001100000";
        ram[45] = "0b10111110000110100111110001011011";
        ram[46] = "0b00111101100100101111101100001100";
        ram[47] = "0b00111101110011110011100100001000";
        ram[48] = "0b00111101110010001010101011110010";
        ram[49] = "0b00111101000010000001011001001111";
        ram[50] = "0b10111101101101011000010101101110";
        ram[51] = "0b10111110000001101010101110011011";
        ram[52] = "0b10111101101000111011101000011001";
        ram[53] = "0b00111101000001110111110100011101";
        ram[54] = "0b10111101001001000100111000001110";
        ram[55] = "0b00111101011010001100000110100101";
        ram[56] = "0b10111101100001110000000101100001";
        ram[57] = "0b10111101100001100101100001110100";
        ram[58] = "0b10111110001001101011101101010110";
        ram[59] = "0b00111101011110101010000000001111";
        ram[60] = "0b10111101110100001111100011000110";
        ram[61] = "0b00111110000110000101000101100101";
        ram[62] = "0b00111101100101010001110110011110";
        ram[63] = "0b10111110001010101010111000101001";
        ram[64] = "0b10111101101001011111001011110100";
        ram[65] = "0b10111011110011001010010110001011";
        ram[66] = "0b10111101100111001010100101000001";
        ram[67] = "0b10111110000000011001100000101001";
        ram[68] = "0b10111101111101110101100011100010";
        ram[69] = "0b00111101011110011101111011001110";
        ram[70] = "0b00111101010111101010111111010100";
        ram[71] = "0b10111101011011000101110101110001";
        ram[72] = "0b00111101001111010001101110011010";
        ram[73] = "0b00111101100010011101011000110101";
        ram[74] = "0b00111110001000101001111010010000";
        ram[75] = "0b10111101111100000001011111011011";
        ram[76] = "0b00111011110000001111010100010011";
        ram[77] = "0b00111101000101000111110001011001";
        ram[78] = "0b10111011101101111011001110100001";
        ram[79] = "0b10111101100110110110000100100111";
        ram[80] = "0b00111101101010001111110010101110";
        ram[81] = "0b00111101111100000101010100110010";
        ram[82] = "0b00111101110010011100001110011000";
        ram[83] = "0b10111101111011011011100010111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_60) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_60_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_60) {
meminst = new inference_mult_1_120_120_84_s_W4_60_ram("inference_mult_1_120_120_84_s_W4_60_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_60() {
    delete meminst;
}


};//endmodule
#endif
