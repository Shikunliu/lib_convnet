// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_2_H__
#define __inference_conv2d_f3_3_4_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_2_ram) {
        ram[0] = "0b00111101011000011110100110010101";
        ram[1] = "0b00111101100111001111011001000101";
        ram[2] = "0b00111110001100000001111001101001";
        ram[3] = "0b00111101001101111000100001000111";
        ram[4] = "0b10111101110101111001011000111010";
        ram[5] = "0b10111101011010000101111011111010";
        ram[6] = "0b00111101111011111111110110100100";
        ram[7] = "0b10111100111000001011100000000110";
        ram[8] = "0b10111101110001110010110111111111";
        ram[9] = "0b10111101110111110111100101000010";
        ram[10] = "0b10111101001111011111100010111111";
        ram[11] = "0b00111011110100110101010011111100";
        ram[12] = "0b00111101111100011001110011100000";
        ram[13] = "0b00111101001110001011000110101000";
        ram[14] = "0b00111110000000010011101110011111";
        ram[15] = "0b10111100111110010000110101101000";
        ram[16] = "0b10111110000000100100001101010111";
        ram[17] = "0b00111100101100011100101110001010";
        ram[18] = "0b00111100000100000010010100110001";
        ram[19] = "0b00111110001000000111111110101010";
        ram[20] = "0b00111101110010011000101110110101";
        ram[21] = "0b10111101100000000010010111000000";
        ram[22] = "0b00111100110000101110011100111011";
        ram[23] = "0b00111101110001110010011110110100";
        ram[24] = "0b10111110010110010110011010111110";
        ram[25] = "0b00111110000101111001001011010001";
        ram[26] = "0b10111100100101000100111101111000";
        ram[27] = "0b10111101001011100111100000011000";
        ram[28] = "0b00111101001101101111110010110111";
        ram[29] = "0b00111100101000100110011000100111";
        ram[30] = "0b10111100110000000000110000101010";
        ram[31] = "0b00111101100000010101001110100010";
        ram[32] = "0b00111110000101001001111001000101";
        ram[33] = "0b00111101100011111111010001011100";
        ram[34] = "0b10111101110111001100110110010110";
        ram[35] = "0b10111101101001001111001000011010";
        ram[36] = "0b10111101010111111111111010001000";
        ram[37] = "0b10111101100001101100111011001001";
        ram[38] = "0b10111101101000100000011000011010";
        ram[39] = "0b00111101101000111110010111010011";
        ram[40] = "0b10111100101011011001111111100001";
        ram[41] = "0b10111101001110001110110110000111";
        ram[42] = "0b10111100010011001100011000010111";
        ram[43] = "0b10111100111000010101001110100010";
        ram[44] = "0b10111101011001100110011100000111";
        ram[45] = "0b10111101100001101100111110111011";
        ram[46] = "0b00111101110001110011001100111101";
        ram[47] = "0b10111101101110011110000000000011";
        ram[48] = "0b10111100001101001011111100100100";
        ram[49] = "0b10111110001011011000101111100111";
        ram[50] = "0b10111101000000001101000100110001";
        ram[51] = "0b00111101011100100010011101001010";
        ram[52] = "0b10111101111001010001100101111010";
        ram[53] = "0b00111101011101001100110110011101";
        ram[54] = "0b10111100010011010010011111010001";
        ram[55] = "0b00111101011110011010100010011000";
        ram[56] = "0b00111101100101100001001100100101";
        ram[57] = "0b00111101001110001111001001110101";
        ram[58] = "0b00111011010101111111111111011100";
        ram[59] = "0b00111101110110001000011101100110";
        ram[60] = "0b10111011101100111011000110110011";
        ram[61] = "0b00111110000011100111101100111110";
        ram[62] = "0b00111110010001011100000000110011";
        ram[63] = "0b00110111100111111101000101101110";
        ram[64] = "0b00111110010101110111000100000000";
        ram[65] = "0b00111100010010011100011011110011";
        ram[66] = "0b00111110000010111100000001011101";
        ram[67] = "0b10111110001010001011011111100101";
        ram[68] = "0b00111101000001001100000011111010";
        ram[69] = "0b10111101111000011011000000000011";
        ram[70] = "0b00111101111100100011111101101000";
        ram[71] = "0b10111110000000001010110101000111";
        ram[72] = "0b10111101110110101100100100101010";
        ram[73] = "0b10111101110111101101010100101000";
        ram[74] = "0b00111101100111000100111000111101";
        ram[75] = "0b00111100100101100111001011010011";
        ram[76] = "0b00111101000100111000000011001011";
        ram[77] = "0b10111101001100011010000000111011";
        ram[78] = "0b00111011101100000001101000001111";
        ram[79] = "0b00111101001001000100100101110001";
        ram[80] = "0b00111101001111111110110110100110";
        ram[81] = "0b10111101100011111101011010111101";
        ram[82] = "0b10111101101110010001000110110100";
        ram[83] = "0b10111110000010010011100110101000";
        ram[84] = "0b10111001111011111011010111110101";
        ram[85] = "0b00111110001100101001101010100010";
        ram[86] = "0b10111101001111100010010100110100";
        ram[87] = "0b10111101000010010100100100011111";
        ram[88] = "0b10111110000011101101000001110000";
        ram[89] = "0b00111101010110100010111111011100";
        ram[90] = "0b10111100001010010111110001100110";
        ram[91] = "0b10111101010010110100111001111101";
        ram[92] = "0b10111101101001101000111011100000";
        ram[93] = "0b10111010111100111111011100110011";
        ram[94] = "0b00111101100110000111111101010011";
        ram[95] = "0b00111101011010110100110001100100";
        ram[96] = "0b10111110000101111111100101010001";
        ram[97] = "0b00111100011111011010100010100010";
        ram[98] = "0b10111101111111110111110001100111";
        ram[99] = "0b10111110000111001001001100100001";
        ram[100] = "0b10111100000011100010010011100111";
        ram[101] = "0b10111110001011010000000011110111";
        ram[102] = "0b10111011001000110011001100100000";
        ram[103] = "0b00111101011011011000010011010011";
        ram[104] = "0b10111101000100101110110111100100";
        ram[105] = "0b10111110000000010111000000001101";
        ram[106] = "0b00111100101011110111001000010011";
        ram[107] = "0b10111101101000010111100010100110";
        ram[108] = "0b10111101101011010100010110110011";
        ram[109] = "0b10111101110000010010001011000101";
        ram[110] = "0b00111110000010110011001100010010";
        ram[111] = "0b10111101101110010111010101000100";
        ram[112] = "0b00111100111100111100101100111110";
        ram[113] = "0b10111101000101111101001010111010";
        ram[114] = "0b10111010111001101111100110011111";
        ram[115] = "0b00111011011001100111010010010100";
        ram[116] = "0b00111101111100000100001011011001";
        ram[117] = "0b00111101110111010011111101011011";
        ram[118] = "0b00111101101100011001001101110001";
        ram[119] = "0b10111100111011100011100000100010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_2) {
meminst = new inference_conv2d_f3_3_4_2_ram("inference_conv2d_f3_3_4_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_2() {
    delete meminst;
}


};//endmodule
#endif
