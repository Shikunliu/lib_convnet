// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_12_H__
#define __inference_conv2d_f3_2_4_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_12_ram) {
        ram[0] = "0b10111101001000100111101011001111";
        ram[1] = "0b10111100000011100010001100100100";
        ram[2] = "0b00111101010010001111110101001111";
        ram[3] = "0b00111101110100001010110111001101";
        ram[4] = "0b00111110000101111110011000101110";
        ram[5] = "0b00111101000001100101111101100000";
        ram[6] = "0b00111101011111000011001100000111";
        ram[7] = "0b00111100101011011010101100110100";
        ram[8] = "0b10111101100011100000010010001011";
        ram[9] = "0b10111101001111100111111010100110";
        ram[10] = "0b10111101101101000110100111110010";
        ram[11] = "0b00111100010111110010001100010001";
        ram[12] = "0b00111100110001111000111101110110";
        ram[13] = "0b00111100001000000110100000100000";
        ram[14] = "0b10111101100110100010111011101011";
        ram[15] = "0b00111101011111000011100111110010";
        ram[16] = "0b00111101011100101000011110100111";
        ram[17] = "0b10111101010110101101001111110111";
        ram[18] = "0b10111101010011001001010111110110";
        ram[19] = "0b10111101100100100011000111111100";
        ram[20] = "0b10111101100110011011000010111001";
        ram[21] = "0b00111101101010100101100000010011";
        ram[22] = "0b00111101011110000111000000111001";
        ram[23] = "0b10111101000000010100001111001101";
        ram[24] = "0b10111101101100100100101111110000";
        ram[25] = "0b00111100001110110001100110110010";
        ram[26] = "0b10111110001000000111011011000000";
        ram[27] = "0b10111100110101110110010111100011";
        ram[28] = "0b00111101111000100100111001011001";
        ram[29] = "0b00111101000110011101111001111110";
        ram[30] = "0b00111101110110010010011111010100";
        ram[31] = "0b10111110001010011100011110111101";
        ram[32] = "0b10111101000100001100000110111001";
        ram[33] = "0b00111110000010011110011101110101";
        ram[34] = "0b10111011101100110101110011111010";
        ram[35] = "0b00111101100110111111111001111110";
        ram[36] = "0b10111101110011011010100100000000";
        ram[37] = "0b10111110010001011111001000000010";
        ram[38] = "0b10111101111101011110011101000011";
        ram[39] = "0b00111101110011110000011100111010";
        ram[40] = "0b10111101010101111010110110110111";
        ram[41] = "0b00111110001000000111000001110110";
        ram[42] = "0b10111110001000111100101000110010";
        ram[43] = "0b00111100000110001010000111100010";
        ram[44] = "0b10111101011011101100111001100100";
        ram[45] = "0b00111101001110111011000111010111";
        ram[46] = "0b10111101100110111001001100111001";
        ram[47] = "0b00111100101101110111100101001001";
        ram[48] = "0b00111101111001110110101101111111";
        ram[49] = "0b00111101100110010011111110010100";
        ram[50] = "0b00111100100011011111101110100001";
        ram[51] = "0b10111110000011110110010110011001";
        ram[52] = "0b10111100000010100010000001100000";
        ram[53] = "0b10111101100111000001100101110001";
        ram[54] = "0b10111010100010111000001100000000";
        ram[55] = "0b00111101100001000000001110011011";
        ram[56] = "0b10111100110000011011101111000010";
        ram[57] = "0b00111101000011011111110110011111";
        ram[58] = "0b00111101110011110100010100010111";
        ram[59] = "0b10111011101000101110110100101010";
        ram[60] = "0b10111001001001010100011111011111";
        ram[61] = "0b00111110000101101001011000011100";
        ram[62] = "0b00111110001001010100011101011010";
        ram[63] = "0b00111100101100110011001001011100";
        ram[64] = "0b00111101001000110110010111001011";
        ram[65] = "0b00111110000111001001001001011000";
        ram[66] = "0b00111100011101011111100010101011";
        ram[67] = "0b00111101101100101110001110011101";
        ram[68] = "0b00111101100101101001010000010001";
        ram[69] = "0b10111011110001010111011110000011";
        ram[70] = "0b10111110000010100110111001110110";
        ram[71] = "0b10111101100111100110111010001101";
        ram[72] = "0b10111011110010110011010011000111";
        ram[73] = "0b00111100011001001001011111000101";
        ram[74] = "0b10111011000110001010011010000000";
        ram[75] = "0b00111101011101111100111001010011";
        ram[76] = "0b10111101111101101111001100101100";
        ram[77] = "0b10111101010000101011111001110001";
        ram[78] = "0b00111101101001100000111111110010";
        ram[79] = "0b00111101011100110111001001010011";
        ram[80] = "0b10111100101000110111101110011011";
        ram[81] = "0b00111101000110010011100110101000";
        ram[82] = "0b10111100111010110101010000001100";
        ram[83] = "0b00111011010100011111000101001111";
        ram[84] = "0b10111101100001000101000011110000";
        ram[85] = "0b10111101001010111001101111111011";
        ram[86] = "0b00111110001110010100011011000011";
        ram[87] = "0b10111101011000010010110110101101";
        ram[88] = "0b10111100100100100110011100001011";
        ram[89] = "0b10111101000111010010001100001100";
        ram[90] = "0b00111101010010100000101001111011";
        ram[91] = "0b10111101110010010101101100110110";
        ram[92] = "0b10111100000001101110101110100010";
        ram[93] = "0b00111110000100100110101110110101";
        ram[94] = "0b10111101001010001101101001001010";
        ram[95] = "0b10111101111101010001100110111101";
        ram[96] = "0b00111101000011101011101010010011";
        ram[97] = "0b10111101100000110111110101100011";
        ram[98] = "0b00111110000001000101110110000101";
        ram[99] = "0b10111101111011010001010110101101";
        ram[100] = "0b00111101010000010100000111001111";
        ram[101] = "0b10111100110001000001000000110000";
        ram[102] = "0b00111110000001010100000001000110";
        ram[103] = "0b00111100110001110101000001010110";
        ram[104] = "0b00111101000010000000001101010100";
        ram[105] = "0b00111100101001010011011010111011";
        ram[106] = "0b10111101110010011001100110001100";
        ram[107] = "0b00111100000000001100110001101110";
        ram[108] = "0b10111100100010100100000011001100";
        ram[109] = "0b00111110000110101111011110010000";
        ram[110] = "0b10111101110110110010011001111100";
        ram[111] = "0b00111101110100010110110010100100";
        ram[112] = "0b00111100111100001111111101111100";
        ram[113] = "0b10111110001100110110011101011110";
        ram[114] = "0b10111101001101111111011100000010";
        ram[115] = "0b10111101110000111011101111101111";
        ram[116] = "0b10111011101010010110011011101100";
        ram[117] = "0b10111101001111100101000101110100";
        ram[118] = "0b10111100110100010111011110001100";
        ram[119] = "0b00111101111010111001010101011111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_12) {
meminst = new inference_conv2d_f3_2_4_12_ram("inference_conv2d_f3_2_4_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_12() {
    delete meminst;
}


};//endmodule
#endif
