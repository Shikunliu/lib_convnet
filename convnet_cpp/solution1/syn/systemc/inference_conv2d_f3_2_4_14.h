// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_14_H__
#define __inference_conv2d_f3_2_4_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_14_ram) {
        ram[0] = "0b00111101001110100011110101111110";
        ram[1] = "0b10111101101010010010110000000110";
        ram[2] = "0b00111101101011011011100110000100";
        ram[3] = "0b00111011001110000000000000001100";
        ram[4] = "0b10111110000001011011100001010110";
        ram[5] = "0b10111100011111100001100101110110";
        ram[6] = "0b00111100000110111011111101011001";
        ram[7] = "0b10111110000000001100110101000010";
        ram[8] = "0b10111010100100111110010100100101";
        ram[9] = "0b10111011101001010111011000011100";
        ram[10] = "0b00111010000100100111111001010000";
        ram[11] = "0b10111100111110101001000001010100";
        ram[12] = "0b00111100010111101100101000100101";
        ram[13] = "0b00111101111011101001100110100110";
        ram[14] = "0b00111100001101110101100011000111";
        ram[15] = "0b00111101011011011101011100001001";
        ram[16] = "0b00111101111010011100000000100011";
        ram[17] = "0b00111101110111000100000100010100";
        ram[18] = "0b10111101100010011010101001111011";
        ram[19] = "0b00111101011001001100110110001111";
        ram[20] = "0b00111101011101101111010110110000";
        ram[21] = "0b10111011101010000001100010100011";
        ram[22] = "0b10111101000101001001101010001100";
        ram[23] = "0b00111100011000110110001111101000";
        ram[24] = "0b10111101110111101111011010110110";
        ram[25] = "0b00111101100000111001010011000101";
        ram[26] = "0b10111101111100101100011110111001";
        ram[27] = "0b10111101000111110111110100100011";
        ram[28] = "0b10111100101010100101110100110110";
        ram[29] = "0b00111101111110110010100100011100";
        ram[30] = "0b10111100010011001010100111111101";
        ram[31] = "0b00111100101111101010111011000111";
        ram[32] = "0b00111010100101100001001111010011";
        ram[33] = "0b00111101001000110000011110000111";
        ram[34] = "0b10111110010000111010010000101111";
        ram[35] = "0b00111101101000110111011101001110";
        ram[36] = "0b10111010000010110101010100101011";
        ram[37] = "0b10111101110101111100000010110001";
        ram[38] = "0b00111011110100011000100101110101";
        ram[39] = "0b10111101111100100011100000010001";
        ram[40] = "0b00111101111001001110101101010111";
        ram[41] = "0b10111101011110101001100010111000";
        ram[42] = "0b10111101100010110101001111110001";
        ram[43] = "0b00111110000100101110001001110110";
        ram[44] = "0b10111101101001111010110110000001";
        ram[45] = "0b10111101110011010010010001011011";
        ram[46] = "0b10111101100111110011000001010100";
        ram[47] = "0b10111101111011001100010101110110";
        ram[48] = "0b10111101110010100011011010000101";
        ram[49] = "0b10111110000000111011111001100110";
        ram[50] = "0b00111101001110001010001010101001";
        ram[51] = "0b00111011110100100011011011011010";
        ram[52] = "0b10111101010000011101010010000001";
        ram[53] = "0b10111101011100110110100001111000";
        ram[54] = "0b00111101111010011101110001110010";
        ram[55] = "0b10111101100001001110011111010100";
        ram[56] = "0b10111101011001010011010101111001";
        ram[57] = "0b00111101100111001110111000001010";
        ram[58] = "0b00111101000101111010000110001101";
        ram[59] = "0b00111101101001010100111010001001";
        ram[60] = "0b10111101110001101001101011010100";
        ram[61] = "0b00111100001100011110110101001101";
        ram[62] = "0b00111101110101100011001111001110";
        ram[63] = "0b00111101101001010011000100111010";
        ram[64] = "0b00110111110110011101000011101011";
        ram[65] = "0b10111110000111100001111100111010";
        ram[66] = "0b00111101100000101000111101000001";
        ram[67] = "0b00111110000100000000011100010100";
        ram[68] = "0b00111101011100101000101110100011";
        ram[69] = "0b00111101100111000100110011100000";
        ram[70] = "0b10111101100101110111001100100110";
        ram[71] = "0b10111110000001101110010011000001";
        ram[72] = "0b00111100100111100011111111110010";
        ram[73] = "0b00111101110111000110000000000011";
        ram[74] = "0b10111101010101011101100110100001";
        ram[75] = "0b10111101111000110000010011001101";
        ram[76] = "0b10111101001001100010001011111010";
        ram[77] = "0b00111101101110000010000111001010";
        ram[78] = "0b00111110000001000011111111100110";
        ram[79] = "0b10111110001100010011000001011001";
        ram[80] = "0b10111101010000111000010110010001";
        ram[81] = "0b10111101101111001011101110000000";
        ram[82] = "0b00111101001100001101011111110100";
        ram[83] = "0b10111101001101110100100001010001";
        ram[84] = "0b10111101000001010100001111110010";
        ram[85] = "0b00111101010111001110100010100100";
        ram[86] = "0b10111101110000010101000000111010";
        ram[87] = "0b10111100001110111100101111110100";
        ram[88] = "0b00111101001101001101001011011011";
        ram[89] = "0b00111101101110101000100011100011";
        ram[90] = "0b00111101111110100010100111000111";
        ram[91] = "0b00111100101011011100011110111001";
        ram[92] = "0b00111101110010100100100101100101";
        ram[93] = "0b10111100001010100000011011001111";
        ram[94] = "0b00111101000101110011110111010100";
        ram[95] = "0b10111101010011110110101000000000";
        ram[96] = "0b00111110001011001111101001101010";
        ram[97] = "0b00111110010110111110110001101000";
        ram[98] = "0b00111110000010101001000100010000";
        ram[99] = "0b00111101000001100100011011110001";
        ram[100] = "0b00111110000001010001100101111010";
        ram[101] = "0b10111011101010010110111010111001";
        ram[102] = "0b00111101011110111011101000111011";
        ram[103] = "0b00111101110100101011101010011101";
        ram[104] = "0b10111101011100010001011011111001";
        ram[105] = "0b10111101101100010110101001111110";
        ram[106] = "0b10111100101001000111100001010000";
        ram[107] = "0b10111110000111010100010000010011";
        ram[108] = "0b10111101011000100111100111000010";
        ram[109] = "0b00111101111000100001111110110000";
        ram[110] = "0b00111101011110011010010000010110";
        ram[111] = "0b10111101100011011110000101110111";
        ram[112] = "0b10111101001010110010010111101001";
        ram[113] = "0b10111100001010000010101011000001";
        ram[114] = "0b00111101010010001000111100011011";
        ram[115] = "0b10111101001110001111111100100101";
        ram[116] = "0b10111100000101101111001111111000";
        ram[117] = "0b00111100011010001111011011001111";
        ram[118] = "0b00111101100101010000000010101110";
        ram[119] = "0b10111101101111000011011100111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_14) {
meminst = new inference_conv2d_f3_2_4_14_ram("inference_conv2d_f3_2_4_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_14() {
    delete meminst;
}


};//endmodule
#endif
