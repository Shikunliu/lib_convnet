// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_35_H__
#define __inference_mult_1_120_120_84_s_W4_35_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_35_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_35_ram) {
        ram[0] = "0b10111011100011110110010111100100";
        ram[1] = "0b00111101111100110010000001010011";
        ram[2] = "0b00111100100101010110010111111001";
        ram[3] = "0b00111100111010011110000110110001";
        ram[4] = "0b00111011110110110100000001101110";
        ram[5] = "0b00111101001011111111110111110101";
        ram[6] = "0b00111100101011001010000101001001";
        ram[7] = "0b10111101100000011101111110011110";
        ram[8] = "0b00111100111101011010000111011000";
        ram[9] = "0b10111110001111100111111110110010";
        ram[10] = "0b00111101100100100000011001000010";
        ram[11] = "0b00111101100110110100111000101101";
        ram[12] = "0b10111100101011000111010111100000";
        ram[13] = "0b10111101000000100100011011001100";
        ram[14] = "0b00111100001000011110001110000000";
        ram[15] = "0b00111101101011101011011010001010";
        ram[16] = "0b10111101010001100001001111111011";
        ram[17] = "0b10111100000101100100011001001000";
        ram[18] = "0b00111110000010000101001001110010";
        ram[19] = "0b00111011110111100100000011010011";
        ram[20] = "0b00111101010001101100000110100000";
        ram[21] = "0b00111101110010010001001001111110";
        ram[22] = "0b00111101100110011001001111001000";
        ram[23] = "0b00111101000001111011000010110100";
        ram[24] = "0b10111100001110101110011101011101";
        ram[25] = "0b10111101111010010011000001111011";
        ram[26] = "0b00111100010011010010101110010111";
        ram[27] = "0b10111011110000111110000100000000";
        ram[28] = "0b10111100110111110010110110001101";
        ram[29] = "0b10111110001000111111101110111101";
        ram[30] = "0b10111101101100011010010100001110";
        ram[31] = "0b00111100100100100110111100000011";
        ram[32] = "0b00111110000011011101010100001011";
        ram[33] = "0b00111101100101000010111011101001";
        ram[34] = "0b10111100110000010011110110111000";
        ram[35] = "0b10111101111001101101110001011101";
        ram[36] = "0b10111110000111010010101111110101";
        ram[37] = "0b00111101011111001100110100101011";
        ram[38] = "0b00111100001000111100011001001110";
        ram[39] = "0b10111100110011011111000001001110";
        ram[40] = "0b10111101111110100001111111010001";
        ram[41] = "0b00111101000000101100110010011001";
        ram[42] = "0b00111110001110001110000101010000";
        ram[43] = "0b00111110001011100011000100001110";
        ram[44] = "0b10111100111101100000101001001000";
        ram[45] = "0b10111101110111010101010101100001";
        ram[46] = "0b10111100110111010001100110110111";
        ram[47] = "0b10111101100110010111100101000000";
        ram[48] = "0b00111101011111001010000110001100";
        ram[49] = "0b00111100101010010101101000110111";
        ram[50] = "0b00111010010000010000100100010111";
        ram[51] = "0b10111110000101110111000001111010";
        ram[52] = "0b00111101100000100110001011011001";
        ram[53] = "0b10111101101101000100000111110001";
        ram[54] = "0b00111100101001101011101100100000";
        ram[55] = "0b00111101000111100000101011111110";
        ram[56] = "0b00111101101100101101101111011011";
        ram[57] = "0b10111101111100001100011101111110";
        ram[58] = "0b10111011100010101101110011111110";
        ram[59] = "0b00111101101110011001100001100101";
        ram[60] = "0b00111101100001010111111110110111";
        ram[61] = "0b00111101000010100110010111101010";
        ram[62] = "0b10111110000101111101010010011101";
        ram[63] = "0b00111110001010101011100011101001";
        ram[64] = "0b00111101111010010011011111010010";
        ram[65] = "0b10111110000101101001001010110100";
        ram[66] = "0b00111100100101000001000100101111";
        ram[67] = "0b10111100111011001011111110110001";
        ram[68] = "0b00111110000001110000101000111101";
        ram[69] = "0b00111101100001100011111010101001";
        ram[70] = "0b10111100110100011111111011010000";
        ram[71] = "0b10111110010100000011011001000100";
        ram[72] = "0b10111101000000001110101011000111";
        ram[73] = "0b10111100000010111001001010111011";
        ram[74] = "0b00111101010001100101000110100011";
        ram[75] = "0b10111100000100110100101011010110";
        ram[76] = "0b10111101111011010101110011111011";
        ram[77] = "0b10111110000010110000101010110011";
        ram[78] = "0b00111110000101111111111010001111";
        ram[79] = "0b00111010001010101010100111010001";
        ram[80] = "0b00111011101011101000000001011100";
        ram[81] = "0b10111101100010011111100100111011";
        ram[82] = "0b00111101101111010100100010100011";
        ram[83] = "0b10111101100001000010000011101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_35) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_35_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_35) {
meminst = new inference_mult_1_120_120_84_s_W4_35_ram("inference_mult_1_120_120_84_s_W4_35_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_35() {
    delete meminst;
}


};//endmodule
#endif
