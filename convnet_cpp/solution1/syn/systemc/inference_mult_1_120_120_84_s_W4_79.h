// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_79_H__
#define __inference_mult_1_120_120_84_s_W4_79_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_79_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_79_ram) {
        ram[0] = "0b10111101110101111010000100111100";
        ram[1] = "0b00111101000100110011000000101001";
        ram[2] = "0b00111101011001001000110011111000";
        ram[3] = "0b00111101110110101110111011101001";
        ram[4] = "0b00111101111011110000111000001011";
        ram[5] = "0b10111100100101011001110010110101";
        ram[6] = "0b10111100110100101011010010100011";
        ram[7] = "0b10111110000101100111000001011101";
        ram[8] = "0b10111110000111010011100000000100";
        ram[9] = "0b10111100000110010101010111010010";
        ram[10] = "0b10111101100101011010000110010101";
        ram[11] = "0b00111110001101111010011100000001";
        ram[12] = "0b00111110001110011111100110001011";
        ram[13] = "0b00111100111000010010101101011110";
        ram[14] = "0b00111101100111010110111101100010";
        ram[15] = "0b10111100001111010011001101100111";
        ram[16] = "0b00111100010100000110110000101001";
        ram[17] = "0b00111100101110100100011010111000";
        ram[18] = "0b10111101110000101001111001001101";
        ram[19] = "0b10111101000101101111001101000111";
        ram[20] = "0b10111001110000011111110110000000";
        ram[21] = "0b10111100110000111000010010111010";
        ram[22] = "0b00111101110111011011110000100011";
        ram[23] = "0b00111110001100001011111011010111";
        ram[24] = "0b10111110000100001001110100000110";
        ram[25] = "0b10111101110010001111011011011100";
        ram[26] = "0b00111100110111110001111110000000";
        ram[27] = "0b00111101111011010100000100110001";
        ram[28] = "0b10111101100110111001101011000110";
        ram[29] = "0b00111110000000110110000011010000";
        ram[30] = "0b10111101011110101100110110101100";
        ram[31] = "0b10111101111010101101011010001000";
        ram[32] = "0b00111110001010111111111000111011";
        ram[33] = "0b00111101010100110111110100000101";
        ram[34] = "0b10111100101100100011011000010011";
        ram[35] = "0b10111101000101101010010101000011";
        ram[36] = "0b00111100101100000011000011101011";
        ram[37] = "0b10111110000000010011101010010011";
        ram[38] = "0b00111011100011110100110111111100";
        ram[39] = "0b10111110010000011111111000100010";
        ram[40] = "0b10111110000111111101000011010000";
        ram[41] = "0b00111101101000101000011011010000";
        ram[42] = "0b00111101101001111100010011100011";
        ram[43] = "0b10111101101111111011001101001100";
        ram[44] = "0b10111100101100110011011110011011";
        ram[45] = "0b10111110000111001111011110001000";
        ram[46] = "0b00111101001100100001111010110001";
        ram[47] = "0b10111110001000001011000110111100";
        ram[48] = "0b00111101000111001101010011101101";
        ram[49] = "0b00111101000011101011100100000000";
        ram[50] = "0b00111011111010100000001011111110";
        ram[51] = "0b10111110011011111010111111001001";
        ram[52] = "0b00111101110101100110100011000010";
        ram[53] = "0b10111101111110111111000111101001";
        ram[54] = "0b10111101110011010101110001110100";
        ram[55] = "0b10111101101101100101111100011101";
        ram[56] = "0b00111101111011000111010111000101";
        ram[57] = "0b00111101101010100000001100110001";
        ram[58] = "0b00111101100111100101110001011100";
        ram[59] = "0b00111101101001000101010000111101";
        ram[60] = "0b10111110000000110100111101000000";
        ram[61] = "0b00111110000101001100110101110101";
        ram[62] = "0b10111110001000000100111111110100";
        ram[63] = "0b10111101101100000111010110011001";
        ram[64] = "0b00111110000110000000100110010001";
        ram[65] = "0b10111110100001110000110011011101";
        ram[66] = "0b00111101101010100101010110101001";
        ram[67] = "0b00111110001001001010101001010100";
        ram[68] = "0b00111101111110001111011100010010";
        ram[69] = "0b00111110011001001000111001000111";
        ram[70] = "0b10111101010010011111111101111000";
        ram[71] = "0b10111101010010100010010100000010";
        ram[72] = "0b00111101001010101000110010011100";
        ram[73] = "0b00111110001000110011110100101001";
        ram[74] = "0b00111100001011111001110101111100";
        ram[75] = "0b00111101111100111110101100111010";
        ram[76] = "0b00111110000011001101100111101000";
        ram[77] = "0b10111101010101101000100001101101";
        ram[78] = "0b00111101101000001010011101011010";
        ram[79] = "0b10111110011010110110000001101011";
        ram[80] = "0b10111110010000010100000010011010";
        ram[81] = "0b00111101110011010110110010110101";
        ram[82] = "0b10111101110101110111010100110010";
        ram[83] = "0b00111101110000110111011001110111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_79) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_79_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_79) {
meminst = new inference_mult_1_120_120_84_s_W4_79_ram("inference_mult_1_120_120_84_s_W4_79_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_79() {
    delete meminst;
}


};//endmodule
#endif
