// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_12_H__
#define __inference_conv2d_f3_3_3_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_12_ram) {
        ram[0] = "0b00111100101000011010000001100100";
        ram[1] = "0b00111101110100100001001001010001";
        ram[2] = "0b10111110000110011011010001010111";
        ram[3] = "0b00111101101100001001100010010001";
        ram[4] = "0b00111101011010011011010110001011";
        ram[5] = "0b00111101101010001111110110111011";
        ram[6] = "0b00111100010101011110001000011111";
        ram[7] = "0b00111101110000010111010100100011";
        ram[8] = "0b00111100111101001011010101001001";
        ram[9] = "0b00111101100001001011001111101100";
        ram[10] = "0b10111101110010111000010000000101";
        ram[11] = "0b00111101000000000001010101100100";
        ram[12] = "0b00111110001100100101001011001110";
        ram[13] = "0b00111110000001010010001001100100";
        ram[14] = "0b10111011101100100111110001101010";
        ram[15] = "0b00111101011111101110001010010100";
        ram[16] = "0b10111100011001110111000100101000";
        ram[17] = "0b00111101011010111111011110111011";
        ram[18] = "0b10111101110010110101110100000011";
        ram[19] = "0b00111101010111111100011111001100";
        ram[20] = "0b00111101111111101010110011001001";
        ram[21] = "0b10111010111011101001100101111011";
        ram[22] = "0b00111101001110001111111110010000";
        ram[23] = "0b00111100000000010111110011001101";
        ram[24] = "0b00111100101010010110110110111000";
        ram[25] = "0b10111101100110101000010100001111";
        ram[26] = "0b00111110000111111111111000101010";
        ram[27] = "0b00111101111001101001001011110111";
        ram[28] = "0b00111110000001010011000111011011";
        ram[29] = "0b00111100100111010111010001001111";
        ram[30] = "0b10111101110101100101110100111010";
        ram[31] = "0b00111101000010110010100110010100";
        ram[32] = "0b10111101100001100110110100110111";
        ram[33] = "0b10111011101110101010111110101001";
        ram[34] = "0b00111101100110101110101011111011";
        ram[35] = "0b10111101111000001111011011110001";
        ram[36] = "0b10111101101000011111111100010011";
        ram[37] = "0b10111110000011010000101100110001";
        ram[38] = "0b00111011111111100111111011100001";
        ram[39] = "0b00111100000110011110011101011101";
        ram[40] = "0b10111110001000110101100011110011";
        ram[41] = "0b00111101010010110011010000010001";
        ram[42] = "0b00111101000000110101011011001101";
        ram[43] = "0b10111101110110011110111000000011";
        ram[44] = "0b10111101101101110011100111001011";
        ram[45] = "0b00111101111101111101110001111011";
        ram[46] = "0b00111101001000011111111000111101";
        ram[47] = "0b10111101001111111100001101111111";
        ram[48] = "0b10111101111010110010100101011111";
        ram[49] = "0b00111110000101110001001110101101";
        ram[50] = "0b10111100000111111010001000111101";
        ram[51] = "0b00111110000000001110100011001001";
        ram[52] = "0b10111110000010011100110110000001";
        ram[53] = "0b10111110001110100000011111110110";
        ram[54] = "0b00111101000100000010001100101110";
        ram[55] = "0b10111101110010011001011000001001";
        ram[56] = "0b10111100110110101100001001011001";
        ram[57] = "0b00111101010100100000010011001010";
        ram[58] = "0b10111101010011110110111011010011";
        ram[59] = "0b00111100110110000111000101000110";
        ram[60] = "0b00111101110010011010110010111101";
        ram[61] = "0b10111100110010011000110101000111";
        ram[62] = "0b00111101100101111000111100110011";
        ram[63] = "0b00111101011000100100101001000010";
        ram[64] = "0b00111100110000000011101101011001";
        ram[65] = "0b10111101110110100010101101011010";
        ram[66] = "0b00111100101101010110100101101110";
        ram[67] = "0b00111101100000110000001101001000";
        ram[68] = "0b00111100001101011101111001110100";
        ram[69] = "0b10111110001101100101001001111010";
        ram[70] = "0b10111101000100111110001011110001";
        ram[71] = "0b00111101100010010100000100001100";
        ram[72] = "0b10111110010000010011001001110010";
        ram[73] = "0b10111101011100011111000000000111";
        ram[74] = "0b00111101000010111100110110101110";
        ram[75] = "0b10111101000000010110010000011001";
        ram[76] = "0b10111101100000000101000011110011";
        ram[77] = "0b00111110010010110000001010010011";
        ram[78] = "0b00111101010010001111000010111010";
        ram[79] = "0b00111100110011001101101010100100";
        ram[80] = "0b10111101101011110000110111111101";
        ram[81] = "0b10111100101101001110001100110111";
        ram[82] = "0b10111100101010111010011110111001";
        ram[83] = "0b10111110001000111110100011011110";
        ram[84] = "0b00111101100010101100001111010001";
        ram[85] = "0b10111101011111110100100001100101";
        ram[86] = "0b00111101011010011011011101101111";
        ram[87] = "0b00111100111110111011011111010010";
        ram[88] = "0b10111101101111000110110000011111";
        ram[89] = "0b00111101110001001110011111000110";
        ram[90] = "0b10111101001111110101111011110000";
        ram[91] = "0b10111101011000110010111101111010";
        ram[92] = "0b00111100000000001111101101010011";
        ram[93] = "0b00111101011101101011100101001010";
        ram[94] = "0b00111011101100100110111101101001";
        ram[95] = "0b10111100101010001111011010011001";
        ram[96] = "0b00111110001011000010101011001100";
        ram[97] = "0b00111101100000000000000111010110";
        ram[98] = "0b10111110000101000000101110111011";
        ram[99] = "0b00111101101101100101100101110011";
        ram[100] = "0b00111101001110000110101001110101";
        ram[101] = "0b10111101010101010110001010111000";
        ram[102] = "0b10111101101000110000111010000000";
        ram[103] = "0b10111101100111010101001110100110";
        ram[104] = "0b10111101010001001100001101001001";
        ram[105] = "0b00111110001001100111010010001110";
        ram[106] = "0b10111110000100110110101011000110";
        ram[107] = "0b00111101011111111100000101001100";
        ram[108] = "0b00111101001001110101010110010101";
        ram[109] = "0b00111101010000010001001101000000";
        ram[110] = "0b00111101101011111011110011111111";
        ram[111] = "0b00111101011000111011000101100101";
        ram[112] = "0b00111101110001101000100010110000";
        ram[113] = "0b10111101011111000111010111010010";
        ram[114] = "0b10111100110000001111101111011110";
        ram[115] = "0b00111101001111011101011111101101";
        ram[116] = "0b00111110000110110011001101010101";
        ram[117] = "0b10111100100101001011111100111111";
        ram[118] = "0b10111110000110100001000000010111";
        ram[119] = "0b10111100100000010010101011011000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_12) {
meminst = new inference_conv2d_f3_3_3_12_ram("inference_conv2d_f3_3_3_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_12() {
    delete meminst;
}


};//endmodule
#endif
