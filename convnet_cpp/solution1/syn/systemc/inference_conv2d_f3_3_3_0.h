// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_0_H__
#define __inference_conv2d_f3_3_3_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_0_ram) {
        ram[0] = "0b10111100101000111100000100111011";
        ram[1] = "0b00111101101101111101111100110101";
        ram[2] = "0b10111101000011011111111101100111";
        ram[3] = "0b00111100100000100101101010000011";
        ram[4] = "0b10111101010010001010000000110010";
        ram[5] = "0b00111101110110101001000000000100";
        ram[6] = "0b00111110001110011010000011110001";
        ram[7] = "0b10111101110011100110110010001111";
        ram[8] = "0b10111101010101110110010011010110";
        ram[9] = "0b00111101100100100110110110001011";
        ram[10] = "0b00111100110001100100010100101001";
        ram[11] = "0b00111101100011110100110100011101";
        ram[12] = "0b00111100001010110010110110101011";
        ram[13] = "0b10111101000110000110010110100010";
        ram[14] = "0b10111101101011110111010011101000";
        ram[15] = "0b00111101101111100010000110010110";
        ram[16] = "0b10111101110010100011111001111101";
        ram[17] = "0b10111011101000001010011110101011";
        ram[18] = "0b10111101110111101110001101010000";
        ram[19] = "0b00111100110010111110101011110000";
        ram[20] = "0b10111110000011111001101001001010";
        ram[21] = "0b00111101011001011101111111000011";
        ram[22] = "0b00111110000010010010100001011011";
        ram[23] = "0b00111101000011110110000000100101";
        ram[24] = "0b10111110000100101011110100111100";
        ram[25] = "0b10111101100011101001101011110110";
        ram[26] = "0b00111010001101011001010001011101";
        ram[27] = "0b00111101001011100010000110110001";
        ram[28] = "0b10111101011001101111011010101111";
        ram[29] = "0b00111110000010101001110101100010";
        ram[30] = "0b00111101101111011011111000101111";
        ram[31] = "0b00111011110010010011111011100011";
        ram[32] = "0b10111101011011101101111110010111";
        ram[33] = "0b10111101100010000111001010111110";
        ram[34] = "0b00111101101001010001001001001011";
        ram[35] = "0b10111101010011001000110110010010";
        ram[36] = "0b00111110001000011011011101011010";
        ram[37] = "0b00111101001110010000010100111010";
        ram[38] = "0b00111101000110010011100010000000";
        ram[39] = "0b10111101101010011000101100010100";
        ram[40] = "0b00111101101111010010100011011101";
        ram[41] = "0b00111101100011101110010100011000";
        ram[42] = "0b00111101101010010110110100010111";
        ram[43] = "0b00111101011001111001000111000101";
        ram[44] = "0b00111101110111100111001010010111";
        ram[45] = "0b00111100011001010100000011001100";
        ram[46] = "0b00111101111001001100111010000001";
        ram[47] = "0b00111100111010110100111101101111";
        ram[48] = "0b10111110000001010110101100000001";
        ram[49] = "0b10111101000011110100101011011100";
        ram[50] = "0b10111100100011011011110010110111";
        ram[51] = "0b00111101110111001001001011011110";
        ram[52] = "0b00111101010111001010110111101011";
        ram[53] = "0b00111101000110010100111101000010";
        ram[54] = "0b00111101001001010010110100110001";
        ram[55] = "0b10111101101100100101011101010000";
        ram[56] = "0b00111101010001011000001011110111";
        ram[57] = "0b00111100101101110111100111101010";
        ram[58] = "0b10111101001111101101101011101100";
        ram[59] = "0b00111101000011100000000001110100";
        ram[60] = "0b10111100011111101110011101100111";
        ram[61] = "0b10111110000010010001111100101110";
        ram[62] = "0b00111101100111000111100010100111";
        ram[63] = "0b00111100110011010100001001110011";
        ram[64] = "0b00111101111010100111111110000000";
        ram[65] = "0b10111110000000110100111111000110";
        ram[66] = "0b10111101001111000010111111111100";
        ram[67] = "0b00111011110000011111101000100000";
        ram[68] = "0b10111100101001011111100010111000";
        ram[69] = "0b10111101101111010001100111000100";
        ram[70] = "0b10111101001101100011010111001100";
        ram[71] = "0b00111110000100010001010011010011";
        ram[72] = "0b10111101110111111000001110111110";
        ram[73] = "0b10111100111111010101101000110011";
        ram[74] = "0b00111101111111011100101101011000";
        ram[75] = "0b10111101001010110001001100100100";
        ram[76] = "0b00111101011100101110010001110100";
        ram[77] = "0b10111110001011010000101000100100";
        ram[78] = "0b10111110000010101001000000000100";
        ram[79] = "0b00111100101101001011001011111011";
        ram[80] = "0b10111011101100011011101110100100";
        ram[81] = "0b00111100101101010010100111100011";
        ram[82] = "0b10111101011110011010011001100101";
        ram[83] = "0b10111100000011000000010111110011";
        ram[84] = "0b10111101000000001001011011100100";
        ram[85] = "0b10111101001000101110011100100000";
        ram[86] = "0b00111011100101110111101110011101";
        ram[87] = "0b10111101101100011111100010000110";
        ram[88] = "0b10111101010111000011110010101100";
        ram[89] = "0b10111101111111100101100011100110";
        ram[90] = "0b10111101100000101111101100001100";
        ram[91] = "0b00111110000010100000000011100010";
        ram[92] = "0b10111011111111011011100100111110";
        ram[93] = "0b00111100000011011000000111110100";
        ram[94] = "0b00111101011001101000101110111011";
        ram[95] = "0b00111110001001000100111100011010";
        ram[96] = "0b00111101100010001000101000101101";
        ram[97] = "0b10111101110001101111110100100010";
        ram[98] = "0b10111100111001110011101000110110";
        ram[99] = "0b00111110000010111001010010010110";
        ram[100] = "0b00111110000100010100100110000100";
        ram[101] = "0b00111101111011011000101010011000";
        ram[102] = "0b00111110000101110010010011111011";
        ram[103] = "0b10111110000111101100010101101101";
        ram[104] = "0b00111101101010111110111000100011";
        ram[105] = "0b00111101011010101010011000010110";
        ram[106] = "0b00111101110110010000101011111110";
        ram[107] = "0b00111101010010010110000000110001";
        ram[108] = "0b00111100101001101111100000100111";
        ram[109] = "0b10111100110010101000100010111010";
        ram[110] = "0b00111101111000100001001100011011";
        ram[111] = "0b00111101101000000001100101000101";
        ram[112] = "0b00111101111100100111010101101000";
        ram[113] = "0b00111110001101100100111000000101";
        ram[114] = "0b10111101000001111110101101101100";
        ram[115] = "0b00111101000100110010011010111001";
        ram[116] = "0b00111011110101010100010001101011";
        ram[117] = "0b10111100101011001000100100101011";
        ram[118] = "0b10111101100000111101111011101000";
        ram[119] = "0b00111101001110101111111000000011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_0) {
meminst = new inference_conv2d_f3_3_3_0_ram("inference_conv2d_f3_3_3_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_0() {
    delete meminst;
}


};//endmodule
#endif
