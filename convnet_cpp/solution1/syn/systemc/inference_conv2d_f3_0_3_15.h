// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_15_H__
#define __inference_conv2d_f3_0_3_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_15_ram) {
        ram[0] = "0b00111101001001000011010001000010";
        ram[1] = "0b10111101100111000011101001011110";
        ram[2] = "0b10111101100001100001111011001000";
        ram[3] = "0b00111110001001001100010101010100";
        ram[4] = "0b00111110000010110100011011111110";
        ram[5] = "0b10111101101100110001100100100101";
        ram[6] = "0b10111101001100011000010001110010";
        ram[7] = "0b10111011110110010001000100010011";
        ram[8] = "0b10111101000001100110110110111101";
        ram[9] = "0b00111101101110110100110001111111";
        ram[10] = "0b00111011101001011100011010111001";
        ram[11] = "0b10111101100101011110011100101000";
        ram[12] = "0b10111101100110101011100011110110";
        ram[13] = "0b10111100100011101110111110111101";
        ram[14] = "0b10111100111011100000001101001001";
        ram[15] = "0b10111101100001101001000101001001";
        ram[16] = "0b00111110010101000011001111010111";
        ram[17] = "0b00111100111110001110110000010000";
        ram[18] = "0b00111101101011111111000000101011";
        ram[19] = "0b10111101000111111111100000001000";
        ram[20] = "0b10111100110000001001101100110000";
        ram[21] = "0b10111110001001001010011010101000";
        ram[22] = "0b10111101011011110101000101011100";
        ram[23] = "0b00111110000011110000011000101101";
        ram[24] = "0b10111101000100100111100100010100";
        ram[25] = "0b10111101101110000011001101011011";
        ram[26] = "0b00111101111110011100111110011010";
        ram[27] = "0b00111101011100111101101000100010";
        ram[28] = "0b10111110000101111001010001100100";
        ram[29] = "0b10111100111001100111011010001100";
        ram[30] = "0b00111011100101000111101000110101";
        ram[31] = "0b10111101110100111011110110011101";
        ram[32] = "0b00111101110110110101010110101100";
        ram[33] = "0b00111101101010001100010100101001";
        ram[34] = "0b10111011110110111110100101001010";
        ram[35] = "0b00111110000111100111010011110011";
        ram[36] = "0b00111110001001010000001010101100";
        ram[37] = "0b10111101100000000001111011000111";
        ram[38] = "0b10111011101010011100101101010101";
        ram[39] = "0b00111101110101010101101011000000";
        ram[40] = "0b10111101101110110101111011100110";
        ram[41] = "0b10111101000100000011110000100011";
        ram[42] = "0b10111110000011101001001110011111";
        ram[43] = "0b10111101000001100100110110100111";
        ram[44] = "0b10111110000101110111000111001001";
        ram[45] = "0b00111110001000011001011101011111";
        ram[46] = "0b10111101001010101111000111001100";
        ram[47] = "0b00111101010101011011101100111000";
        ram[48] = "0b10111101000010110011100011001001";
        ram[49] = "0b00111101101111100010100100010110";
        ram[50] = "0b00111101000111010101110010000010";
        ram[51] = "0b00111101011010001001111011110000";
        ram[52] = "0b00111101111110001110100111110111";
        ram[53] = "0b00111101001111010111010010100000";
        ram[54] = "0b00111110001111010101000000100010";
        ram[55] = "0b00111101011101111110100101000110";
        ram[56] = "0b10111100001001110000100101011001";
        ram[57] = "0b00111011100000111000101000001110";
        ram[58] = "0b00111101001001000111111011010000";
        ram[59] = "0b00111101110000010100001101101111";
        ram[60] = "0b10111100100010001110011011111010";
        ram[61] = "0b00111101011001110010111101101001";
        ram[62] = "0b00111101111010110011000100111100";
        ram[63] = "0b10111101100001001100010011110110";
        ram[64] = "0b10111101001001010111000111111010";
        ram[65] = "0b10111110000010000101111000111110";
        ram[66] = "0b00111110011000011100110111100110";
        ram[67] = "0b10111101000011100111010001101101";
        ram[68] = "0b10111100001010001011010001010100";
        ram[69] = "0b00111101001101001111010010111001";
        ram[70] = "0b10111101110011000011001000001000";
        ram[71] = "0b00111110000110111010001100000001";
        ram[72] = "0b00111101100101010001001010011100";
        ram[73] = "0b10111110000000110011000111100100";
        ram[74] = "0b10111101010110011100101000100110";
        ram[75] = "0b10111110010000111100001001010101";
        ram[76] = "0b10111101111001111111101010100000";
        ram[77] = "0b10111101001001001001111001111011";
        ram[78] = "0b10111101101010010000100011011000";
        ram[79] = "0b10111101101100000100011100011000";
        ram[80] = "0b00111110000111100000011011011001";
        ram[81] = "0b00111101100110110001100100101011";
        ram[82] = "0b00111101110000110110011111100100";
        ram[83] = "0b10111100100010100100001110111011";
        ram[84] = "0b10111101011010011001010001001110";
        ram[85] = "0b10111110010001010110100100101011";
        ram[86] = "0b00111101001110111011011100010110";
        ram[87] = "0b00111100000110110000001100000110";
        ram[88] = "0b00111101010100001001100111111100";
        ram[89] = "0b00111110000010000110110010101001";
        ram[90] = "0b00111101100010101000101000100101";
        ram[91] = "0b00111101001011011101101101110000";
        ram[92] = "0b00111100110100011110110000100110";
        ram[93] = "0b00111100111101011101011100011101";
        ram[94] = "0b00111110001110000001000011101001";
        ram[95] = "0b00111101111111000001110111110011";
        ram[96] = "0b10111101001111010001101100101110";
        ram[97] = "0b00111110001111101000110100010001";
        ram[98] = "0b00111101001010110101011101001100";
        ram[99] = "0b10111101110111101111000001101011";
        ram[100] = "0b10111101100001001000101101110011";
        ram[101] = "0b10111100000110101110000010100001";
        ram[102] = "0b00111101001001101110111000110001";
        ram[103] = "0b10111101010011010111010001011101";
        ram[104] = "0b10111100111001011101111111000011";
        ram[105] = "0b00111100101100011000010000111100";
        ram[106] = "0b10111101100001110000010000001110";
        ram[107] = "0b10111101100010011010001001011011";
        ram[108] = "0b00111101100010111001001001111101";
        ram[109] = "0b00111011100111110001100000001001";
        ram[110] = "0b10111110000110000001000000011111";
        ram[111] = "0b10111101110110101011100101101111";
        ram[112] = "0b00111100110010101100010001001001";
        ram[113] = "0b10111100011100110011100000000110";
        ram[114] = "0b00111101100111100101011011000000";
        ram[115] = "0b00111101101010111101001110000000";
        ram[116] = "0b10111101101011010111000101010010";
        ram[117] = "0b00111101100010001000000001011111";
        ram[118] = "0b00111110001110111100101101100000";
        ram[119] = "0b00111110010001111110111010010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_15) {
meminst = new inference_conv2d_f3_0_3_15_ram("inference_conv2d_f3_0_3_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_15() {
    delete meminst;
}


};//endmodule
#endif
