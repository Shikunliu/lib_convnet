// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_11_H__
#define __inference_mult_1_120_120_84_s_W4_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_11_ram) {
        ram[0] = "0b00111101100010001010001000100011";
        ram[1] = "0b00111100001111110000010111001111";
        ram[2] = "0b00111101101001110111001110011111";
        ram[3] = "0b00111100110011110011111000101100";
        ram[4] = "0b10111100001000000100111011000000";
        ram[5] = "0b10111110001100011110010111000001";
        ram[6] = "0b00111110000110011000100011010011";
        ram[7] = "0b10111101100110100111011110010101";
        ram[8] = "0b00111011100000101110100000010010";
        ram[9] = "0b00111100000111110001110100110001";
        ram[10] = "0b00111011111011001111110001101101";
        ram[11] = "0b10111011110000101010000100001111";
        ram[12] = "0b10111110001111110110100110001000";
        ram[13] = "0b00111101100010111010111010010111";
        ram[14] = "0b00111100001110110111100000010001";
        ram[15] = "0b10111101100100100100100001101101";
        ram[16] = "0b00111101001111101011110011010100";
        ram[17] = "0b10111100101111110011100011000101";
        ram[18] = "0b00111110000100101001001011000101";
        ram[19] = "0b10111100000101011100001000010100";
        ram[20] = "0b10111101010111011001111001000001";
        ram[21] = "0b10111100100110011010101100110111";
        ram[22] = "0b10111110000110001101110000010010";
        ram[23] = "0b00111101101110011111111111100011";
        ram[24] = "0b10111101000001111100010101000001";
        ram[25] = "0b10111110000010111111101001001100";
        ram[26] = "0b10111101000111000000010101001111";
        ram[27] = "0b00111101111100101000111110011111";
        ram[28] = "0b00111101000110100010011101011110";
        ram[29] = "0b00111101111001101011011110101010";
        ram[30] = "0b10111101000011111100011000010001";
        ram[31] = "0b10111100101111010101111100111100";
        ram[32] = "0b00111101100011111111101010011010";
        ram[33] = "0b10111101010111110100111100000000";
        ram[34] = "0b10111110000110010100001010010001";
        ram[35] = "0b00111110000110101101001110100110";
        ram[36] = "0b00111110000010000001010110100000";
        ram[37] = "0b00111101111011110011000110110001";
        ram[38] = "0b10111101100100011111100100100111";
        ram[39] = "0b10111101100110001110010010010000";
        ram[40] = "0b10111101101000010001110110100010";
        ram[41] = "0b00111101010011001101011000111101";
        ram[42] = "0b00111110001110011100000001100110";
        ram[43] = "0b00111100111000000010010100111001";
        ram[44] = "0b10111010011011010110101101101101";
        ram[45] = "0b00111110000101011010110100010000";
        ram[46] = "0b00111110001110010101110001000010";
        ram[47] = "0b10111100000101001000110001010100";
        ram[48] = "0b10111101001010000001011011110000";
        ram[49] = "0b10111101100110111110110001001101";
        ram[50] = "0b10111101111010111011000100101001";
        ram[51] = "0b10111100100010111110100101000010";
        ram[52] = "0b00111100001100001110100110101101";
        ram[53] = "0b00111101101000001000001101010110";
        ram[54] = "0b10111101101011111001011110101011";
        ram[55] = "0b00111101010001101111010010110001";
        ram[56] = "0b00111001001110000101100110100011";
        ram[57] = "0b10111100011011111111111100000001";
        ram[58] = "0b10111101111110100101101000000100";
        ram[59] = "0b00111110000010110010001011010001";
        ram[60] = "0b00111011011110111101000011110001";
        ram[61] = "0b10111100101001110010111110111010";
        ram[62] = "0b10111100100110000100110111010101";
        ram[63] = "0b10111011110111101001001100011110";
        ram[64] = "0b10111110000100011100000100001101";
        ram[65] = "0b10111101101011001001101100001100";
        ram[66] = "0b00111101110101111111011100111000";
        ram[67] = "0b00111101010011110111011001111011";
        ram[68] = "0b10111100101000000010010101101111";
        ram[69] = "0b10111101011001000111011010000111";
        ram[70] = "0b00111100101101110100100100001101";
        ram[71] = "0b00111101010111100011110001111100";
        ram[72] = "0b10111101111011010110101010011100";
        ram[73] = "0b10111110010100100110101011101100";
        ram[74] = "0b00111101100101011101100110010100";
        ram[75] = "0b10111101111110110111011111000000";
        ram[76] = "0b00111101110111000100000110011010";
        ram[77] = "0b00111101110000110111100111000101";
        ram[78] = "0b00111100001110000111000111001100";
        ram[79] = "0b10111101100100001001010010001000";
        ram[80] = "0b10111101010110101110001000011110";
        ram[81] = "0b10111101111111010111110100111001";
        ram[82] = "0b10111101110001111100010100001011";
        ram[83] = "0b00111010000000010110000101110010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_11_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_11) {
meminst = new inference_mult_1_120_120_84_s_W4_11_ram("inference_mult_1_120_120_84_s_W4_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_11() {
    delete meminst;
}


};//endmodule
#endif
