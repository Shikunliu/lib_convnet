// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_5_H__
#define __inference_conv2d_f3_0_2_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_5_ram) {
        ram[0] = "0b10111101101010010100110000101010";
        ram[1] = "0b10111100101011110000011110001010";
        ram[2] = "0b10111110001100001101000100110001";
        ram[3] = "0b10111100001110110011101011010100";
        ram[4] = "0b10111101010110111110101111010100";
        ram[5] = "0b10111101011001010110001011111011";
        ram[6] = "0b10111100110001101010010100000000";
        ram[7] = "0b00111110000000111011001100100000";
        ram[8] = "0b10111101100110001100111010100110";
        ram[9] = "0b00111101111100011110101001111001";
        ram[10] = "0b10111100100110010011001011010111";
        ram[11] = "0b00111101101111111011101001100000";
        ram[12] = "0b00111101001100010110111110101111";
        ram[13] = "0b10111101100000011000101100000000";
        ram[14] = "0b10111101010111100010101010101000";
        ram[15] = "0b00111110001100111001101010111111";
        ram[16] = "0b10111101000000100110011110000100";
        ram[17] = "0b00111101101011001011111011011011";
        ram[18] = "0b10111110000000101001100011001100";
        ram[19] = "0b10111101001000101011111101100011";
        ram[20] = "0b00111100100100001001001110010110";
        ram[21] = "0b10111100101101011101000110101001";
        ram[22] = "0b10111101110000111100110100111100";
        ram[23] = "0b00111101101011000010010100010101";
        ram[24] = "0b00111101000110001000000010110000";
        ram[25] = "0b00111101100010011001110111110100";
        ram[26] = "0b00111101100011110110001010000001";
        ram[27] = "0b10111101011111100011011001100111";
        ram[28] = "0b10111101100101000001100110100000";
        ram[29] = "0b10111011000110001010111100111001";
        ram[30] = "0b00111101110001100000000011110011";
        ram[31] = "0b10111101011111101001011010001110";
        ram[32] = "0b00111101010001111011100001000000";
        ram[33] = "0b00111101000110001111101111100101";
        ram[34] = "0b10111011110011101111001010010111";
        ram[35] = "0b00111011110101011101001000101111";
        ram[36] = "0b00111101110100100001001111100100";
        ram[37] = "0b00111101001011101100111100111011";
        ram[38] = "0b00111101000110100101001000100110";
        ram[39] = "0b10111100111000000000000001010001";
        ram[40] = "0b10111101100111001011100111111010";
        ram[41] = "0b10111101100101010100011000100101";
        ram[42] = "0b10111011110101111111100010001111";
        ram[43] = "0b00111101011010011001110110111110";
        ram[44] = "0b00111100000001101011101000111001";
        ram[45] = "0b10111100110010100011001000011110";
        ram[46] = "0b00111101110101001110001110111101";
        ram[47] = "0b00111100101101010100010011110001";
        ram[48] = "0b00111101010100001011000111100100";
        ram[49] = "0b00111110000001101100101100010000";
        ram[50] = "0b00111100100001000010010100101001";
        ram[51] = "0b00111101000011011011100100100110";
        ram[52] = "0b10111101010110101000010111110011";
        ram[53] = "0b00111101100110011100010001000111";
        ram[54] = "0b00111010010110110110100011111010";
        ram[55] = "0b10111100111100010011111111011110";
        ram[56] = "0b00111101010100101100101011011110";
        ram[57] = "0b00111101101110010111100010000100";
        ram[58] = "0b00111101110011100001011010010100";
        ram[59] = "0b10111110000011011011111101001000";
        ram[60] = "0b00111101011110011001101010001011";
        ram[61] = "0b00111101100111010100100010100011";
        ram[62] = "0b10111101011001100011110001011010";
        ram[63] = "0b00111101101110001101010000110101";
        ram[64] = "0b10111110000010000110000001010111";
        ram[65] = "0b10111110000010010100110101010001";
        ram[66] = "0b00111110001001000001111001011000";
        ram[67] = "0b10111101000101011001101110101000";
        ram[68] = "0b00111101001011101010100101100001";
        ram[69] = "0b00111110001011110010010111100101";
        ram[70] = "0b10111101100001000101011100000101";
        ram[71] = "0b00111110000100000000010010111000";
        ram[72] = "0b00111101101110001010010011111000";
        ram[73] = "0b00111101110100000001000010000100";
        ram[74] = "0b10111101100001100101010110011111";
        ram[75] = "0b10111100111001101100010110011100";
        ram[76] = "0b00111110000000011101111111111100";
        ram[77] = "0b00111101001000111110011100010101";
        ram[78] = "0b00111101000100001101101111010101";
        ram[79] = "0b10111101110110011100010010010111";
        ram[80] = "0b10111100100111110110000010000011";
        ram[81] = "0b00111100111110100111000110110110";
        ram[82] = "0b00111101000000100111010110010001";
        ram[83] = "0b00111101101100101100101010011011";
        ram[84] = "0b00111101110011011110111000110101";
        ram[85] = "0b10111100100000111000101001100100";
        ram[86] = "0b10111000010111010011010000010010";
        ram[87] = "0b00111101100001111100010010000101";
        ram[88] = "0b00111101100010010110011100110111";
        ram[89] = "0b10111110000111111110111000101101";
        ram[90] = "0b00111101110000100001001000110110";
        ram[91] = "0b00111101111010111100101101100000";
        ram[92] = "0b00111100110101000001000011111001";
        ram[93] = "0b00111100010110010100101101100000";
        ram[94] = "0b10111110000011001111111110101000";
        ram[95] = "0b10111101110000000111111011111100";
        ram[96] = "0b00111010011000101110011000010100";
        ram[97] = "0b00111110000000110110001011101001";
        ram[98] = "0b00111101111101100000111100011011";
        ram[99] = "0b00111101101101110101010001111011";
        ram[100] = "0b00111101101000110111001000000010";
        ram[101] = "0b10111100100000011011110100000100";
        ram[102] = "0b00111101100110101000000111000001";
        ram[103] = "0b10111101110110100011101100010101";
        ram[104] = "0b10111101000011110111101011000111";
        ram[105] = "0b00111101100111001101100100011111";
        ram[106] = "0b00111100011111111001111001000110";
        ram[107] = "0b10111101011011101101000011001110";
        ram[108] = "0b00111110001010101110110100010100";
        ram[109] = "0b10111100001100101111000111000101";
        ram[110] = "0b00111100101000010001100001001001";
        ram[111] = "0b10111101100100111011000011010010";
        ram[112] = "0b00111100111101100010111111010010";
        ram[113] = "0b10111101000001011100111111010011";
        ram[114] = "0b00111101101011110100001111010101";
        ram[115] = "0b00111101000010011101011001000011";
        ram[116] = "0b00111101100010010010111100011110";
        ram[117] = "0b10111101101110001111000101011011";
        ram[118] = "0b00111101000000101011100000001011";
        ram[119] = "0b10111101101100110010111000010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_5) {
meminst = new inference_conv2d_f3_0_2_5_ram("inference_conv2d_f3_0_2_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_5() {
    delete meminst;
}


};//endmodule
#endif
