// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_15_H__
#define __inference_conv2d_f3_3_4_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_15_ram) {
        ram[0] = "0b10111011100111101010100010100010";
        ram[1] = "0b10111101100000001110010001100001";
        ram[2] = "0b10111110000111000100001110110011";
        ram[3] = "0b00111101111111100110001111101001";
        ram[4] = "0b10111100011011100010111100011101";
        ram[5] = "0b00111101100111101101111000011111";
        ram[6] = "0b00111100010101001000111001100010";
        ram[7] = "0b00111101001001011111100111011111";
        ram[8] = "0b00111101011110001110010111000101";
        ram[9] = "0b00111110000101010010000111011110";
        ram[10] = "0b10111101011100100100000110011100";
        ram[11] = "0b10111101011110111101100100101010";
        ram[12] = "0b10111110000100010001001011111101";
        ram[13] = "0b00111100001100001101010010110100";
        ram[14] = "0b10111100110101110010000101001111";
        ram[15] = "0b10111101010011101011101100011001";
        ram[16] = "0b00111101101010110010110000011001";
        ram[17] = "0b10111101100000011001000000001000";
        ram[18] = "0b00111010100011000011001001111110";
        ram[19] = "0b10111110000000110101010100000100";
        ram[20] = "0b00111110000101111001110101001110";
        ram[21] = "0b00111101101100001111011110101100";
        ram[22] = "0b10111101100100110100111111000110";
        ram[23] = "0b10111101001001001110100001001101";
        ram[24] = "0b10111101111001111001011001111101";
        ram[25] = "0b00111101100001100000011000010111";
        ram[26] = "0b00111101111101100000000101111001";
        ram[27] = "0b10111100111111100100011011000010";
        ram[28] = "0b00111101110000011010011101001111";
        ram[29] = "0b10111110000110010011100010011011";
        ram[30] = "0b10111110001011110101000011100011";
        ram[31] = "0b10111101000110100110011111000000";
        ram[32] = "0b10111101011100111000010001011100";
        ram[33] = "0b10111101010000111111000100100110";
        ram[34] = "0b00111101110011110011101000010101";
        ram[35] = "0b10111101110010011011001111101011";
        ram[36] = "0b10111110001001011101001010001101";
        ram[37] = "0b00111101110000100011101001111010";
        ram[38] = "0b10111101011100100001001111111111";
        ram[39] = "0b00111110010101000110000010101010";
        ram[40] = "0b10111101011000110011011110001101";
        ram[41] = "0b00111100001110100100001101011101";
        ram[42] = "0b10111100110000001100001001101000";
        ram[43] = "0b10111101010100010110100110011010";
        ram[44] = "0b10111110000000100011001000001001";
        ram[45] = "0b10111100110011011111100011100111";
        ram[46] = "0b00111110000001000001100100011010";
        ram[47] = "0b10111100100010011111001101101001";
        ram[48] = "0b10111101101000100111111101010001";
        ram[49] = "0b10111010101111000110110111011010";
        ram[50] = "0b10111101001101010111001111010000";
        ram[51] = "0b00111100101100001001000111001110";
        ram[52] = "0b00111101100110001111001100110001";
        ram[53] = "0b10111101000011110100001011100100";
        ram[54] = "0b10111101110001001010011001100101";
        ram[55] = "0b00111001000010101110001111100011";
        ram[56] = "0b00111110010110101111101101111111";
        ram[57] = "0b00111110010000011101011101010110";
        ram[58] = "0b10111101000110101001010000110110";
        ram[59] = "0b10111011101010100111011010100001";
        ram[60] = "0b10111101100001010000000101101010";
        ram[61] = "0b00111101100101100000110001111100";
        ram[62] = "0b00111101000110110001111110010001";
        ram[63] = "0b10111110000110101100101101000011";
        ram[64] = "0b00111100110110011011101011110010";
        ram[65] = "0b00111101110010111010000011001101";
        ram[66] = "0b10111011111001101010000000110011";
        ram[67] = "0b00111101100000011111011111100101";
        ram[68] = "0b00111101011000111010000111000110";
        ram[69] = "0b00111100111110001010100110010101";
        ram[70] = "0b10111101001100111010111110101010";
        ram[71] = "0b00111100010110101110001101111011";
        ram[72] = "0b10111101111100010000010011010101";
        ram[73] = "0b00111101010001100101001011001011";
        ram[74] = "0b10111010111001101001101010101001";
        ram[75] = "0b10111101001101100100001110001001";
        ram[76] = "0b00111101111000010001000100100111";
        ram[77] = "0b00111101010010001101111100110111";
        ram[78] = "0b00111100111111001101110010010101";
        ram[79] = "0b00111100001101001110111000011110";
        ram[80] = "0b10111101111101111110101010100011";
        ram[81] = "0b10111101000110010110011110010101";
        ram[82] = "0b10111110001111000111110010010101";
        ram[83] = "0b10111110001101010110101000111000";
        ram[84] = "0b00111101110010110001001100001001";
        ram[85] = "0b10111100101000001000001010001100";
        ram[86] = "0b10111101001000101101011101100110";
        ram[87] = "0b10111100101011101000001001011111";
        ram[88] = "0b10111101101100101110110001000100";
        ram[89] = "0b10111101110110011101001111001100";
        ram[90] = "0b10111110001000001110111000000111";
        ram[91] = "0b00111011110110101000001101101111";
        ram[92] = "0b00111011100010110100011000101111";
        ram[93] = "0b10111101101001100010101011110010";
        ram[94] = "0b00111101000111010010101111011010";
        ram[95] = "0b00111101100010110000101010110011";
        ram[96] = "0b00111101001100011111101010111001";
        ram[97] = "0b10111101110000100001111100011100";
        ram[98] = "0b10111110000111011100011110101100";
        ram[99] = "0b00111100101110011001110100001111";
        ram[100] = "0b10111101011101010000110111111111";
        ram[101] = "0b00111101110110101011011011010000";
        ram[102] = "0b00111100100000001101101000011011";
        ram[103] = "0b00111100010001011111110110100110";
        ram[104] = "0b10111101111010100110100001101110";
        ram[105] = "0b00111101110100001100111101011011";
        ram[106] = "0b10111101100111001000001000001001";
        ram[107] = "0b00111101000101111000110100011010";
        ram[108] = "0b00111101100111010001000001000111";
        ram[109] = "0b00111101101110000000001000000101";
        ram[110] = "0b00111110001001101100110011100110";
        ram[111] = "0b00111011101001110011110111000111";
        ram[112] = "0b10111101110010000101111110110101";
        ram[113] = "0b00111101011000110010100100110000";
        ram[114] = "0b10111101011101110111000001011111";
        ram[115] = "0b00111110000011010010010000011000";
        ram[116] = "0b10111100110101101000001111010000";
        ram[117] = "0b10111100110110110001101010100011";
        ram[118] = "0b00111101000011010010101010100110";
        ram[119] = "0b10111100000101000010000000111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_15) {
meminst = new inference_conv2d_f3_3_4_15_ram("inference_conv2d_f3_3_4_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_15() {
    delete meminst;
}


};//endmodule
#endif
