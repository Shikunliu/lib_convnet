// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_107_H__
#define __inference_mult_1_120_120_84_s_W4_107_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_107_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_107_ram) {
        ram[0] = "0b00111101101100111110000101101100";
        ram[1] = "0b10111101100000111010010001110010";
        ram[2] = "0b10111110001001111000110010000111";
        ram[3] = "0b00111101110110010101110011001000";
        ram[4] = "0b10111101011110111010010110010011";
        ram[5] = "0b10111110001110110001111011100010";
        ram[6] = "0b10111101111100000011010010110001";
        ram[7] = "0b00111110000110001111011001001001";
        ram[8] = "0b10111101101110111011011100110001";
        ram[9] = "0b00111110000111000101100000100101";
        ram[10] = "0b00111101111011010111111000000010";
        ram[11] = "0b10111101011111110101000001000010";
        ram[12] = "0b00111101000010011111111001101100";
        ram[13] = "0b10111101100111111100111010001111";
        ram[14] = "0b00111101100000001010010101000001";
        ram[15] = "0b10111101000001111100010110101100";
        ram[16] = "0b00111100001111010000100111100001";
        ram[17] = "0b00111101111110100011111000111010";
        ram[18] = "0b10111101001000010101101001011000";
        ram[19] = "0b00111101101100101110111010101101";
        ram[20] = "0b10111101111000100110101110110101";
        ram[21] = "0b10111110000000100000000000111011";
        ram[22] = "0b00111100111001111010001101001000";
        ram[23] = "0b10111101110101001110001110111101";
        ram[24] = "0b00111110000010011011000011101110";
        ram[25] = "0b00111101100110110001101110100010";
        ram[26] = "0b10111110000001010011111100111010";
        ram[27] = "0b00111100010010111001101111100000";
        ram[28] = "0b10111101101111100010111100101011";
        ram[29] = "0b10111011011000111011010000011010";
        ram[30] = "0b00111100110011000010111000001100";
        ram[31] = "0b00111110001011100111101001110100";
        ram[32] = "0b00111101101011101100001111101000";
        ram[33] = "0b00111101000000111100111110110011";
        ram[34] = "0b10111110001000100110100110011100";
        ram[35] = "0b10111101100100101011101000010111";
        ram[36] = "0b00111101000011100010000110010110";
        ram[37] = "0b10111110001000100011010000100010";
        ram[38] = "0b00111110001000011101101001111011";
        ram[39] = "0b10111101010110110001101010100011";
        ram[40] = "0b10111100110010010100001111100001";
        ram[41] = "0b10111110000000010011111101001011";
        ram[42] = "0b00111101100111011001101110111101";
        ram[43] = "0b10111101111001010110010110000000";
        ram[44] = "0b00111101101001000111001010001011";
        ram[45] = "0b10111100011011010101011111110010";
        ram[46] = "0b00111100101000100010010100100100";
        ram[47] = "0b00111100010010011101011011100100";
        ram[48] = "0b10111101101001101100001111101111";
        ram[49] = "0b00111101101010110100011111110000";
        ram[50] = "0b00111100111001010110000001000010";
        ram[51] = "0b10111110001011101001110010001000";
        ram[52] = "0b00111101100100011001110011000110";
        ram[53] = "0b00111011001001100000011111100111";
        ram[54] = "0b00111101011110011010101010010110";
        ram[55] = "0b00111101101001111110011000100000";
        ram[56] = "0b10110110101111110110111000000010";
        ram[57] = "0b10111101111101100110100000111100";
        ram[58] = "0b00111100111110100111010101000111";
        ram[59] = "0b00111100111110110101101101010110";
        ram[60] = "0b10111101111000010011010101010100";
        ram[61] = "0b00111110001011101001100010011010";
        ram[62] = "0b10111101011010011110011001001110";
        ram[63] = "0b00111101101001101101111101011010";
        ram[64] = "0b00111110000011000001011110101001";
        ram[65] = "0b10111101011100001110111000010100";
        ram[66] = "0b00111101011101101101010100101111";
        ram[67] = "0b00111100100110100110110001011101";
        ram[68] = "0b00111010110000010111101101100000";
        ram[69] = "0b00111110001010011011101111110001";
        ram[70] = "0b00111101111110011111010111100000";
        ram[71] = "0b10111101110011011101010100001011";
        ram[72] = "0b10111101001000010100011010000111";
        ram[73] = "0b10111100101011001111000000100011";
        ram[74] = "0b00111110001100011011010101000010";
        ram[75] = "0b10111101100001100100111101010101";
        ram[76] = "0b00111011011000111111010111011110";
        ram[77] = "0b00111101000011000001100001010111";
        ram[78] = "0b10111101101110010000101101001111";
        ram[79] = "0b00111100110011010101001111011011";
        ram[80] = "0b00111100100011110011010000011011";
        ram[81] = "0b00111101101010100010100000100111";
        ram[82] = "0b10111101000100000001111010101100";
        ram[83] = "0b00111101100001001000101100101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_107) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_107_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_107) {
meminst = new inference_mult_1_120_120_84_s_W4_107_ram("inference_mult_1_120_120_84_s_W4_107_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_107() {
    delete meminst;
}


};//endmodule
#endif
