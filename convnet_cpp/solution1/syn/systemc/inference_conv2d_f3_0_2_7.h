// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_7_H__
#define __inference_conv2d_f3_0_2_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_7_ram) {
        ram[0] = "0b10111100001001000000100010001000";
        ram[1] = "0b10111100111001011110110011111010";
        ram[2] = "0b00111101010000110000010110111111";
        ram[3] = "0b10111101110001010010101010101100";
        ram[4] = "0b10111101111001011100001101011001";
        ram[5] = "0b00111110000010010010011100001011";
        ram[6] = "0b00111110000000100100100111100100";
        ram[7] = "0b00111110000100110001101001001100";
        ram[8] = "0b00111101011101000101011011001111";
        ram[9] = "0b10111101010101110110000001010100";
        ram[10] = "0b00111100011100011001110101100111";
        ram[11] = "0b10111101101101011110111110100110";
        ram[12] = "0b10111100011010011110001101011110";
        ram[13] = "0b10111101000001110000010111100011";
        ram[14] = "0b00111101001101001000111111110101";
        ram[15] = "0b00111101100110111000011101000101";
        ram[16] = "0b00111101010100001011111100000000";
        ram[17] = "0b10111101111001000001100010010011";
        ram[18] = "0b10111110000100100000111011101001";
        ram[19] = "0b10111101100100111001000000001101";
        ram[20] = "0b00111101001110111101101100001101";
        ram[21] = "0b10111101011110100001001001100101";
        ram[22] = "0b10111101111001010111001110101000";
        ram[23] = "0b10111101001110001010010001110001";
        ram[24] = "0b00111011110101010101000011010101";
        ram[25] = "0b10111011011000000110110010010010";
        ram[26] = "0b00111101110111100010001011100110";
        ram[27] = "0b00111101101110010111100011110000";
        ram[28] = "0b10111101001010110010110101110110";
        ram[29] = "0b00111101000000010111001101001101";
        ram[30] = "0b10111101010010101000001101111100";
        ram[31] = "0b00111101010010110101101100101101";
        ram[32] = "0b00111101101110110110000100110101";
        ram[33] = "0b10111100011001100110100000010100";
        ram[34] = "0b10111101110111111010010011000110";
        ram[35] = "0b10111010111100100001001000000001";
        ram[36] = "0b00111110000110100111010001111110";
        ram[37] = "0b00111101100000100101110010101001";
        ram[38] = "0b10111101011111010001011011000111";
        ram[39] = "0b10111101101111001110000000110011";
        ram[40] = "0b00111101110000010010001010111000";
        ram[41] = "0b00111101100010001111010001011000";
        ram[42] = "0b10111101001011000110000010110001";
        ram[43] = "0b10111101010100101011011110101110";
        ram[44] = "0b00111100010011001000000011100010";
        ram[45] = "0b00111100110100100100001000100010";
        ram[46] = "0b00111101100111111111100111000011";
        ram[47] = "0b00111100110110011001101011011100";
        ram[48] = "0b00111101110100110111011011010101";
        ram[49] = "0b10111110001100111001111000101000";
        ram[50] = "0b10111011101001101011010101100001";
        ram[51] = "0b00111101111111101110000110111101";
        ram[52] = "0b00111101110111111011001101110100";
        ram[53] = "0b00111011111001101100110010101000";
        ram[54] = "0b00111100010000001000001101111110";
        ram[55] = "0b10111100010111111100010010001100";
        ram[56] = "0b00111011110011010010000110110001";
        ram[57] = "0b10111101101100111000101011000010";
        ram[58] = "0b00111110000110101100111011101110";
        ram[59] = "0b00111100111000100010001000110100";
        ram[60] = "0b10111101110000011011000110010110";
        ram[61] = "0b10111101001101010000001000001011";
        ram[62] = "0b10111101010011101111010000100100";
        ram[63] = "0b00111101100001001100001101100100";
        ram[64] = "0b00111100111011010110111100000100";
        ram[65] = "0b10111100101100111110001000011010";
        ram[66] = "0b00111110000000000100010001101011";
        ram[67] = "0b00111101101001110010100110011000";
        ram[68] = "0b00111101010001010100011001110110";
        ram[69] = "0b00111100101001111111101010111011";
        ram[70] = "0b10111110010101010111010010110100";
        ram[71] = "0b00111101110101101110110101100111";
        ram[72] = "0b00111101101000001001011100011010";
        ram[73] = "0b00111101001111011110010110101001";
        ram[74] = "0b00111101000001110000100111000101";
        ram[75] = "0b10111101010111010010001100001100";
        ram[76] = "0b00111100001011011000000110101110";
        ram[77] = "0b00111101000011100000111010000001";
        ram[78] = "0b10111101101101100100000111000001";
        ram[79] = "0b10111110011011011111010101001001";
        ram[80] = "0b10111110001011101010011111001110";
        ram[81] = "0b10111101011100100001010101000001";
        ram[82] = "0b10111101100110011101010001011111";
        ram[83] = "0b10111101110111001001111101110011";
        ram[84] = "0b00111101101101000100111000110110";
        ram[85] = "0b00111101000001011001110010001101";
        ram[86] = "0b00111100111101100111011100100000";
        ram[87] = "0b00111110001100001011100111011100";
        ram[88] = "0b10111101011101000001010000011111";
        ram[89] = "0b00111101101001111011111100101100";
        ram[90] = "0b10111101000000000011100100100110";
        ram[91] = "0b00111101111000100111101001100011";
        ram[92] = "0b10111101010001101110110000011000";
        ram[93] = "0b00111101011111100000010001100010";
        ram[94] = "0b10111100001111011100101100111101";
        ram[95] = "0b00111100010001111010011101011110";
        ram[96] = "0b10111110000001001100000011011111";
        ram[97] = "0b10111101000010001000011001100111";
        ram[98] = "0b10111101111101010011001101101110";
        ram[99] = "0b00111100000000100001111101001010";
        ram[100] = "0b10111100101010101101100111001000";
        ram[101] = "0b10111101100011011010100111100100";
        ram[102] = "0b00111110001101100000001001000011";
        ram[103] = "0b00111101111010001001001000100101";
        ram[104] = "0b10111101011100100110010000110110";
        ram[105] = "0b00111101100101010100100111000100";
        ram[106] = "0b00111101011101101111011111001001";
        ram[107] = "0b10111110001011010000111000010011";
        ram[108] = "0b00111101001101011100001010101010";
        ram[109] = "0b00111101010111011111011001110000";
        ram[110] = "0b00111110001100011100001101101001";
        ram[111] = "0b10111101101010110000101111011010";
        ram[112] = "0b00111101101011100010011010000100";
        ram[113] = "0b00111101110111101010100100011110";
        ram[114] = "0b10111101110010000101101001101010";
        ram[115] = "0b00111110001010101001110001010110";
        ram[116] = "0b00111110001010111101000010011110";
        ram[117] = "0b00111101101000010101101111111000";
        ram[118] = "0b00111011111010110101001011110101";
        ram[119] = "0b10111110001011011101111100000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_7) {
meminst = new inference_conv2d_f3_0_2_7_ram("inference_conv2d_f3_0_2_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_7() {
    delete meminst;
}


};//endmodule
#endif
