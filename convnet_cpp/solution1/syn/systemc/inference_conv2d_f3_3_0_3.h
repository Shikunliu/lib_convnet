// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_3_H__
#define __inference_conv2d_f3_3_0_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_3_ram) {
        ram[0] = "0b00111100100000001001100110111001";
        ram[1] = "0b10111101010100001011010001101000";
        ram[2] = "0b00111110000110000100110001101010";
        ram[3] = "0b00111101011100100110100010000011";
        ram[4] = "0b10111101010011001100110110100100";
        ram[5] = "0b00111100000001111000101101001111";
        ram[6] = "0b10111110001000101111010101010110";
        ram[7] = "0b10111101110011011011010000000011";
        ram[8] = "0b10111101111100010101010110010011";
        ram[9] = "0b10111101111100110010000011011010";
        ram[10] = "0b00111110001011000110011100010111";
        ram[11] = "0b00111101101111101010101011100110";
        ram[12] = "0b10111101100000111011111111010000";
        ram[13] = "0b00111101110101001110000010011000";
        ram[14] = "0b00111101010111001011110001001001";
        ram[15] = "0b00111110001001111101110001111011";
        ram[16] = "0b00111101100111110011100101100110";
        ram[17] = "0b00111101101010010010100011111100";
        ram[18] = "0b10111011001000110010010101011111";
        ram[19] = "0b10111100011110110010101010101110";
        ram[20] = "0b00111100110011000100001110100101";
        ram[21] = "0b00111101110010011110110011011011";
        ram[22] = "0b00111100100101110010000001111000";
        ram[23] = "0b00111110000010011111001010111011";
        ram[24] = "0b10111101100100000101000101010001";
        ram[25] = "0b10111101001111110000011110110010";
        ram[26] = "0b00111110000000010111110010100010";
        ram[27] = "0b00111101110101001111011110101001";
        ram[28] = "0b00111100010001111001000001001101";
        ram[29] = "0b10111100111010001101110101101111";
        ram[30] = "0b00111100011000100001010001011101";
        ram[31] = "0b10111101001000001111010011011000";
        ram[32] = "0b00111101111100000011101110000010";
        ram[33] = "0b10111101101001010100011011000111";
        ram[34] = "0b00111101110011001010110111010001";
        ram[35] = "0b10111101111000010011001100111100";
        ram[36] = "0b10111110000100110110010111001011";
        ram[37] = "0b10111101011100100100100000110111";
        ram[38] = "0b00111100010000100100011011001100";
        ram[39] = "0b10111100011011000101110010110101";
        ram[40] = "0b00111110001011110001100011001010";
        ram[41] = "0b00111110001110110100101110110110";
        ram[42] = "0b10111100111011100110001111110110";
        ram[43] = "0b10111110010000110011001100110011";
        ram[44] = "0b00111101101010111111000110001011";
        ram[45] = "0b10111110000011000001001001101010";
        ram[46] = "0b00111100110010100110000110000011";
        ram[47] = "0b00111110001001010001101101010000";
        ram[48] = "0b10111101000000101101001010010011";
        ram[49] = "0b00111101110100001011100011010000";
        ram[50] = "0b00111101011100110101101001010000";
        ram[51] = "0b00111110000110011001100000000111";
        ram[52] = "0b00111101001110111101001110000000";
        ram[53] = "0b10111101101110011101010000001111";
        ram[54] = "0b00111101111001000111101010011110";
        ram[55] = "0b10111110000001100111110111111110";
        ram[56] = "0b00111101101001101110110110010000";
        ram[57] = "0b10111101000110011000100011010011";
        ram[58] = "0b00111101001011100110011000001111";
        ram[59] = "0b00111101101000010001110100001110";
        ram[60] = "0b00111101001111111100111011010010";
        ram[61] = "0b00111101010100000111011100010001";
        ram[62] = "0b10111101111011111010110101101101";
        ram[63] = "0b00111101001111101101100110001111";
        ram[64] = "0b10111110000101011111001100001110";
        ram[65] = "0b10111100111001110000110110001011";
        ram[66] = "0b10111110010011001101000110000101";
        ram[67] = "0b10111101011001001100011100101010";
        ram[68] = "0b00111101111001111010010000011110";
        ram[69] = "0b10111101100000010111000011001001";
        ram[70] = "0b00111101011000111100011011001001";
        ram[71] = "0b10111100101001110101000111101001";
        ram[72] = "0b00111101010110111111011101011101";
        ram[73] = "0b10111110000011101001100110100110";
        ram[74] = "0b10111100101110010011010110101100";
        ram[75] = "0b10111100010001111100111110100010";
        ram[76] = "0b10111110001100100110110011000010";
        ram[77] = "0b00111110010100100001111010100011";
        ram[78] = "0b10111100111001001000000110001010";
        ram[79] = "0b10111100110010010110110100110001";
        ram[80] = "0b10111011110000110100111011110101";
        ram[81] = "0b10111110000111101011111111101100";
        ram[82] = "0b00111011001111110011011010110111";
        ram[83] = "0b00111101101111100001000000010011";
        ram[84] = "0b10111100101111011011100000100111";
        ram[85] = "0b00111011100001010111100001111010";
        ram[86] = "0b00111101101101100111110010101111";
        ram[87] = "0b00111101101000110111011001101010";
        ram[88] = "0b00111101101100011000101010000111";
        ram[89] = "0b00111101110101100001101110110000";
        ram[90] = "0b10111101001011000011101011110001";
        ram[91] = "0b10111101010010011100000001011000";
        ram[92] = "0b00111100001011010011111010010010";
        ram[93] = "0b00111101110101100111000110101100";
        ram[94] = "0b00111110001011010011101010100011";
        ram[95] = "0b00111101101001101011101111000001";
        ram[96] = "0b10111101010010111011001100001100";
        ram[97] = "0b00111101100100000011000000100001";
        ram[98] = "0b00111110000000011011001111110010";
        ram[99] = "0b00111110001101101111011101011110";
        ram[100] = "0b00111101100101010010000111101011";
        ram[101] = "0b00111110001011111010011101100101";
        ram[102] = "0b10111100000111000000010000100010";
        ram[103] = "0b00111011110100000111001111110110";
        ram[104] = "0b10111100010111000100010010100100";
        ram[105] = "0b10111110001001011111011110000011";
        ram[106] = "0b00111100100111100011110010010111";
        ram[107] = "0b10111101110110111101000001011011";
        ram[108] = "0b00111110001011101110011001110101";
        ram[109] = "0b10111101101011100000011110010101";
        ram[110] = "0b00111110010001100010001101001011";
        ram[111] = "0b00111100110110111101101010111100";
        ram[112] = "0b00111101010111100001001101100001";
        ram[113] = "0b00111100010111000001010001101000";
        ram[114] = "0b10111101011100000000010110000001";
        ram[115] = "0b00111101111101010001100110111101";
        ram[116] = "0b10111101101101001011011101101111";
        ram[117] = "0b00111100100110100010110111011110";
        ram[118] = "0b00111101100100110110000100111100";
        ram[119] = "0b00111110000001101100110111110010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_3) {
meminst = new inference_conv2d_f3_3_0_3_ram("inference_conv2d_f3_3_0_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_3() {
    delete meminst;
}


};//endmodule
#endif
