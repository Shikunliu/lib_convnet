// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_7_H__
#define __inference_conv2d_f3_3_2_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_7_ram) {
        ram[0] = "0b00111110001001111000000111000111";
        ram[1] = "0b10111101101001111100110100011110";
        ram[2] = "0b00111101110001101110010001111110";
        ram[3] = "0b10111101100000010100110010001110";
        ram[4] = "0b10111101010101001001011111010010";
        ram[5] = "0b00111101011001010011111100111010";
        ram[6] = "0b10111101101011011100110001001001";
        ram[7] = "0b00111011100000000111010101110001";
        ram[8] = "0b10111101100111001001010100101100";
        ram[9] = "0b00111100101100101000110100011011";
        ram[10] = "0b00111101101100001111111010011000";
        ram[11] = "0b10111101010011101011000110001111";
        ram[12] = "0b10111101100011101101011010000101";
        ram[13] = "0b00111101101010100100010001011100";
        ram[14] = "0b10111100101011111010001000011010";
        ram[15] = "0b00111100110101010111110100001010";
        ram[16] = "0b00111100110111100101110000001100";
        ram[17] = "0b00111101110100100100101111111101";
        ram[18] = "0b10111100100101001011110101011100";
        ram[19] = "0b10111101101101110010011111111000";
        ram[20] = "0b10111101010000100000111000101101";
        ram[21] = "0b00111101000101100111010001001011";
        ram[22] = "0b00111101110001010110011100010010";
        ram[23] = "0b10111101110010100011111100101100";
        ram[24] = "0b10111101100110110111000001110111";
        ram[25] = "0b00111101101011101111100001100011";
        ram[26] = "0b00111101010100000111000010010001";
        ram[27] = "0b10111101000001010100000011001100";
        ram[28] = "0b10111101111100101000100011001110";
        ram[29] = "0b10111101001001110111001110010010";
        ram[30] = "0b10111101010011001111111100000111";
        ram[31] = "0b00111110001001000101111010010010";
        ram[32] = "0b00111101101010000010111111110010";
        ram[33] = "0b00111010101100010001000010101111";
        ram[34] = "0b10111110000000110100101100001110";
        ram[35] = "0b10111100011100110000101111111100";
        ram[36] = "0b10111110000110100001001111000010";
        ram[37] = "0b00111101100001011001110101110001";
        ram[38] = "0b10111100001000011110110011011010";
        ram[39] = "0b00111101110000011101110001101100";
        ram[40] = "0b10111011010101011110011100101000";
        ram[41] = "0b10111101010111000000110010001011";
        ram[42] = "0b10111110000100011001010101000110";
        ram[43] = "0b00111100101011110010111000100001";
        ram[44] = "0b00111100111000000011010100101010";
        ram[45] = "0b00111101010001001010001111010100";
        ram[46] = "0b00111100101101101100110110111101";
        ram[47] = "0b10111101101001100101010110000101";
        ram[48] = "0b10111100011111000000100000100100";
        ram[49] = "0b10111101110000010101000110110010";
        ram[50] = "0b00111110000001111111000010101010";
        ram[51] = "0b00111110000110101101100011100100";
        ram[52] = "0b00111101011000111000110011101000";
        ram[53] = "0b00111110000000101100111111011001";
        ram[54] = "0b00111101010001111110111111101110";
        ram[55] = "0b10111101100100000111011011001110";
        ram[56] = "0b10111100110010000011111001011101";
        ram[57] = "0b00111101101010100000011101111110";
        ram[58] = "0b00111100000010011001100011111011";
        ram[59] = "0b10111110000011000000101100010011";
        ram[60] = "0b00111101010110011000000011110101";
        ram[61] = "0b00111101001101000100110000011101";
        ram[62] = "0b10111101101100110101011010111111";
        ram[63] = "0b10111100111000000011111100111011";
        ram[64] = "0b00111101110111111010000110100001";
        ram[65] = "0b00111101110000001111010000001110";
        ram[66] = "0b00111101111101001101001101111100";
        ram[67] = "0b10111110000010010100100011011100";
        ram[68] = "0b10111101010101111010000100111100";
        ram[69] = "0b00111011111100011000001011111010";
        ram[70] = "0b10111110001001111110111000001011";
        ram[71] = "0b00111010111111001100110001101111";
        ram[72] = "0b10111101000010010101101010111101";
        ram[73] = "0b10111101111110100001010011001111";
        ram[74] = "0b10111100001101011110011110101110";
        ram[75] = "0b10111101100010111011100010000000";
        ram[76] = "0b10111101100110001001011000000110";
        ram[77] = "0b00111110001001110001111010110000";
        ram[78] = "0b10111101111000110100110110101101";
        ram[79] = "0b10111101000010010011011011000110";
        ram[80] = "0b00111101011110001110001100001011";
        ram[81] = "0b00111101100101011100001000111111";
        ram[82] = "0b00111101001010011110010000011010";
        ram[83] = "0b10111101100001010110101111011000";
        ram[84] = "0b00111101100011001110100111100110";
        ram[85] = "0b00111100111000011101001110001111";
        ram[86] = "0b00111100100000101110010110001110";
        ram[87] = "0b00111101000000011000000101011010";
        ram[88] = "0b00111101011000100011111011010100";
        ram[89] = "0b10111101011101001110011011000111";
        ram[90] = "0b10111101101100001001100100110010";
        ram[91] = "0b00111101110001000010001100000010";
        ram[92] = "0b10111101111110111111101001001100";
        ram[93] = "0b10111101100100110101111110000001";
        ram[94] = "0b10111101001101000010111000100000";
        ram[95] = "0b00111101000101001110000100000011";
        ram[96] = "0b10111101110001111010001011000001";
        ram[97] = "0b10111110001110001010010011000010";
        ram[98] = "0b00111101111010000010001001111001";
        ram[99] = "0b00111110001000011100000001000100";
        ram[100] = "0b00111101001001000001101001000001";
        ram[101] = "0b00111101101100110110000000111101";
        ram[102] = "0b00111110000111101011101110111010";
        ram[103] = "0b00111101001101110011101011001010";
        ram[104] = "0b10111010011001100110011001110011";
        ram[105] = "0b10111100110101001100001101110001";
        ram[106] = "0b10111100111100000010010011110110";
        ram[107] = "0b10111101100101001000010011100101";
        ram[108] = "0b00111101110001010100001010100010";
        ram[109] = "0b00111101011110011101101010011101";
        ram[110] = "0b00111101001100100100000100010101";
        ram[111] = "0b00111100111011000000000101111011";
        ram[112] = "0b00111101001111010101011011110011";
        ram[113] = "0b00111101100000101111011100101011";
        ram[114] = "0b00111101101010001111011000101110";
        ram[115] = "0b10111101001100100100010110110011";
        ram[116] = "0b10111100111110001100100011010100";
        ram[117] = "0b10111101001111100101110101001110";
        ram[118] = "0b00111101001011011110100010100110";
        ram[119] = "0b10111110000000010100000101100011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_7) {
meminst = new inference_conv2d_f3_3_2_7_ram("inference_conv2d_f3_3_2_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_7() {
    delete meminst;
}


};//endmodule
#endif
