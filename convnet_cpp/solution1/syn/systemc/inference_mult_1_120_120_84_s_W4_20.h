// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_20_H__
#define __inference_mult_1_120_120_84_s_W4_20_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_20_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_20_ram) {
        ram[0] = "0b10111101101101001111010110000011";
        ram[1] = "0b10111011000100011110001101101101";
        ram[2] = "0b10111101110011010011100111011010";
        ram[3] = "0b10111101001010100010000100100001";
        ram[4] = "0b10111101101000011000111001101000";
        ram[5] = "0b10111100001110010110110111100000";
        ram[6] = "0b10111101101010000001000110001010";
        ram[7] = "0b10111110010000010000001010111100";
        ram[8] = "0b00111101010110101100010001010111";
        ram[9] = "0b10111100110010101010110111011001";
        ram[10] = "0b10111110000010111000001111001111";
        ram[11] = "0b10111101100110010000000100111110";
        ram[12] = "0b10111110000001001110000100011110";
        ram[13] = "0b00111101111110110111100111011001";
        ram[14] = "0b10111101110010101010011110110111";
        ram[15] = "0b10111110000101011100011000111011";
        ram[16] = "0b10111100111111101111100001100011";
        ram[17] = "0b10111101101000010101100100110001";
        ram[18] = "0b00111110001001100101101100100001";
        ram[19] = "0b10111101000100010111100000010010";
        ram[20] = "0b10111100110011010010000001000100";
        ram[21] = "0b10111101101111100000110110011101";
        ram[22] = "0b00111101100100001010001101010001";
        ram[23] = "0b10111011110110010000011101000011";
        ram[24] = "0b00111100110010000010100100101111";
        ram[25] = "0b10111100011101000100000100011010";
        ram[26] = "0b00111110000001010001110000011001";
        ram[27] = "0b10111110010100000010011000000011";
        ram[28] = "0b10111100110001101011010100100110";
        ram[29] = "0b10111101000110010101101001000100";
        ram[30] = "0b10111101010001110011101000011100";
        ram[31] = "0b00111110000110011101101101100110";
        ram[32] = "0b00111101010100111010101111100100";
        ram[33] = "0b10111101100101001111010001011100";
        ram[34] = "0b10111100100101110111110001010011";
        ram[35] = "0b00111101100001110100110010111000";
        ram[36] = "0b00111110001001011100000010111010";
        ram[37] = "0b10111101110110010110100011010111";
        ram[38] = "0b00111101111010000010101101100011";
        ram[39] = "0b00111110001101101001101110011101";
        ram[40] = "0b00111110000011011101101110011000";
        ram[41] = "0b10111110001011111101011000001111";
        ram[42] = "0b10111101100000010111111011111110";
        ram[43] = "0b10111101111101110000100110110111";
        ram[44] = "0b10111110001101010101110110100010";
        ram[45] = "0b10111010101101001011101000110001";
        ram[46] = "0b10111101001110011001001011111110";
        ram[47] = "0b00111101000001000011001110000110";
        ram[48] = "0b10111100011100011010101001100111";
        ram[49] = "0b00111100010101011110001010001011";
        ram[50] = "0b10111101101010011101100100100101";
        ram[51] = "0b00111101010110100111001000000111";
        ram[52] = "0b00111100010010110101100100101111";
        ram[53] = "0b00111110000011010000011000110110";
        ram[54] = "0b00111101100011110000000100001010";
        ram[55] = "0b00111101000100111011010100000100";
        ram[56] = "0b00111101010000101011111011110111";
        ram[57] = "0b00111110001000101001101110101110";
        ram[58] = "0b00111101101111011011010100000010";
        ram[59] = "0b00111011110111000101101111001100";
        ram[60] = "0b00111101101010001000111000101001";
        ram[61] = "0b10111110010010010101010101110001";
        ram[62] = "0b00111100110100011110101010101110";
        ram[63] = "0b10111110000101010001111110000010";
        ram[64] = "0b00111101111000111111111111101111";
        ram[65] = "0b00111101101001101010111000011111";
        ram[66] = "0b10111110000011001011111000011111";
        ram[67] = "0b10111101111011000001011011011111";
        ram[68] = "0b10111110001101100111011011101010";
        ram[69] = "0b10111110000000101101110011110100";
        ram[70] = "0b00111101100000100000010011001010";
        ram[71] = "0b00111100010101101101010111010000";
        ram[72] = "0b10111101101100001111100100001001";
        ram[73] = "0b10111101100100100100001100000110";
        ram[74] = "0b10111100001011011101101101110000";
        ram[75] = "0b00111110010010110111000011101111";
        ram[76] = "0b00111101110111111000110110110101";
        ram[77] = "0b00111101110000010000101010011010";
        ram[78] = "0b00111110001001111010010011101000";
        ram[79] = "0b00111101001011001011011001110111";
        ram[80] = "0b00111101000001110101110100111100";
        ram[81] = "0b10111101110110011100101101101000";
        ram[82] = "0b10111101011011110000100100000010";
        ram[83] = "0b10111101111101010001001111111001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_20) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_20_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_20) {
meminst = new inference_mult_1_120_120_84_s_W4_20_ram("inference_mult_1_120_120_84_s_W4_20_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_20() {
    delete meminst;
}


};//endmodule
#endif
