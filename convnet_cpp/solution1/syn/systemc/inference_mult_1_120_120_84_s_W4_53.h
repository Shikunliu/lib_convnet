// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_53_H__
#define __inference_mult_1_120_120_84_s_W4_53_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_53_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_53_ram) {
        ram[0] = "0b00111011100011101010001010000101";
        ram[1] = "0b00111100100010000101101101001110";
        ram[2] = "0b10111010100101101110000000101100";
        ram[3] = "0b00111100000011001101010000000100";
        ram[4] = "0b10111101110111000000001010110000";
        ram[5] = "0b10111101100000000100010001010001";
        ram[6] = "0b00111100111101010000101111100110";
        ram[7] = "0b00111011011110100100001001010001";
        ram[8] = "0b10111101100000101110000011111110";
        ram[9] = "0b00111101100100101100100100010110";
        ram[10] = "0b00111101110100101111011011101000";
        ram[11] = "0b10111100111101110000010110000101";
        ram[12] = "0b10111101101010000000101101110101";
        ram[13] = "0b00111101111000110100101110010100";
        ram[14] = "0b00111101010000010100010001101110";
        ram[15] = "0b10111101011010000011101010110010";
        ram[16] = "0b00111101110101011100100111100110";
        ram[17] = "0b00111011100100100111000111001000";
        ram[18] = "0b10111110010100011111001001010110";
        ram[19] = "0b10111101011000100110011111101111";
        ram[20] = "0b00111110001111101010011001111111";
        ram[21] = "0b00111101101111010011010101011000";
        ram[22] = "0b00111100111111110010000111101001";
        ram[23] = "0b00111101000010001010000010111000";
        ram[24] = "0b10111101110011101110001010000110";
        ram[25] = "0b00111110001000110111101010000001";
        ram[26] = "0b00111110001111000011011110100100";
        ram[27] = "0b10111100001100111011000000110001";
        ram[28] = "0b10111100011110010011010100001011";
        ram[29] = "0b10111101011111101110001001000011";
        ram[30] = "0b10111110001101101001110101110011";
        ram[31] = "0b10111101110110010100101011110101";
        ram[32] = "0b10111101110100000001100001100001";
        ram[33] = "0b10111101110011101110110001111101";
        ram[34] = "0b10111101101000010110001001000011";
        ram[35] = "0b00111110001100111100111001100100";
        ram[36] = "0b00111101100111010011011110001100";
        ram[37] = "0b00111101001011000101100010011110";
        ram[38] = "0b00111100111001100111101100101001";
        ram[39] = "0b00111100111010100111110111101101";
        ram[40] = "0b00111101010110000001001000101011";
        ram[41] = "0b10111100100100010110101111001110";
        ram[42] = "0b10111101110101011101000010110111";
        ram[43] = "0b00111101110101010111100000011100";
        ram[44] = "0b10111110000000001011111110100001";
        ram[45] = "0b10111110000000100101111011011101";
        ram[46] = "0b10111100000010011010110101010011";
        ram[47] = "0b10111101110111000100111000101111";
        ram[48] = "0b00111101111000110110001000100000";
        ram[49] = "0b10111101110010111001111010001100";
        ram[50] = "0b00111101110101111111000001100111";
        ram[51] = "0b10111010010101010010010111110011";
        ram[52] = "0b00111100011111100100001011111100";
        ram[53] = "0b10111101101010011000111010010111";
        ram[54] = "0b00111110000001011110100011010101";
        ram[55] = "0b10111101101011100001101111000101";
        ram[56] = "0b00111110000101111110010111101011";
        ram[57] = "0b00111101110101101000000001011010";
        ram[58] = "0b10111101001110100011011000001100";
        ram[59] = "0b10111101000000000110110000110111";
        ram[60] = "0b00111110001011110011111110010110";
        ram[61] = "0b10111110000111110000111111100000";
        ram[62] = "0b10111110010000100111010010011111";
        ram[63] = "0b10111110001001001000101011011111";
        ram[64] = "0b00111101110100000101110110010110";
        ram[65] = "0b00111110000010110010011110001001";
        ram[66] = "0b00111101101110101110001011110101";
        ram[67] = "0b10111101100101011101001100000110";
        ram[68] = "0b10111101100000010010111111101110";
        ram[69] = "0b10111101100111011010101010100000";
        ram[70] = "0b00111101110001011000011111001010";
        ram[71] = "0b00111101010101011101001111110111";
        ram[72] = "0b00111101100111010101010100011101";
        ram[73] = "0b10111110011011010001011110000011";
        ram[74] = "0b00111011111101000111011101001011";
        ram[75] = "0b10111110000010001110000111010110";
        ram[76] = "0b10111011111110000111010010011011";
        ram[77] = "0b10111100101011010010010001011011";
        ram[78] = "0b10111110001010001010000010010000";
        ram[79] = "0b10111100010101011100011001110001";
        ram[80] = "0b00111110000100000111010000100001";
        ram[81] = "0b10111101001110010001101101011010";
        ram[82] = "0b00111101100110100000001110011100";
        ram[83] = "0b10111110000001011111101000100010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_53) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_53_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_53) {
meminst = new inference_mult_1_120_120_84_s_W4_53_ram("inference_mult_1_120_120_84_s_W4_53_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_53() {
    delete meminst;
}


};//endmodule
#endif
