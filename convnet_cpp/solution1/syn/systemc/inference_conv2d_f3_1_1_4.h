// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_4_H__
#define __inference_conv2d_f3_1_1_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_4_ram) {
        ram[0] = "0b10111110000100010010111101001101";
        ram[1] = "0b00111101100010111001010100001111";
        ram[2] = "0b10111110001111101011001011010001";
        ram[3] = "0b10111110000010101110110110011010";
        ram[4] = "0b00111101100001101001101010010001";
        ram[5] = "0b00111010001101111010101010101111";
        ram[6] = "0b00111110000011011110100001110001";
        ram[7] = "0b00111100011010100000101110100010";
        ram[8] = "0b10111101100000011010011011010111";
        ram[9] = "0b00111101001101111110101101111001";
        ram[10] = "0b10111101000000100101000000111100";
        ram[11] = "0b10111110010001010100000000000011";
        ram[12] = "0b10111101010110100101010001110101";
        ram[13] = "0b10111110001010010000100111110010";
        ram[14] = "0b00111100010111110100111001000100";
        ram[15] = "0b00111101101111111010000010100010";
        ram[16] = "0b10111101000101111000111100011000";
        ram[17] = "0b10111101100000011111001110011000";
        ram[18] = "0b10111101100101111001000100111111";
        ram[19] = "0b00111101101111000111011011101100";
        ram[20] = "0b00111101101100101111101001101011";
        ram[21] = "0b10111101001111000011010001001001";
        ram[22] = "0b00111101010010111001101111000101";
        ram[23] = "0b10111110000010000010100111010000";
        ram[24] = "0b10111100001010010001111011011101";
        ram[25] = "0b00111101011110111111110111011101";
        ram[26] = "0b00111101010011111010100001111111";
        ram[27] = "0b00111100001110011010000101110111";
        ram[28] = "0b10111101100101101001001000101110";
        ram[29] = "0b10111110001010111110111000111101";
        ram[30] = "0b10111101001010100010000000101111";
        ram[31] = "0b00111110000110011100101001011100";
        ram[32] = "0b00111110000011100001011110100000";
        ram[33] = "0b00111101111101111001101101111000";
        ram[34] = "0b00111110000011101011000111000100";
        ram[35] = "0b10111101010000100111101000010011";
        ram[36] = "0b00111101011100011110100000001111";
        ram[37] = "0b00111110001101010101111001101100";
        ram[38] = "0b00111101011000011110010000111011";
        ram[39] = "0b00111010111100011101000010010010";
        ram[40] = "0b10111101011010000101110000001010";
        ram[41] = "0b00111101100111000110010101101001";
        ram[42] = "0b10111101100010101111001110000110";
        ram[43] = "0b10111101111101000000000000110010";
        ram[44] = "0b00111100111110011100000000010101";
        ram[45] = "0b00111101100101100001111111111101";
        ram[46] = "0b10111101010010001001000010101101";
        ram[47] = "0b00111101100000011101100111001101";
        ram[48] = "0b10111101111011100110010110111111";
        ram[49] = "0b10111100100110101101110011000101";
        ram[50] = "0b10111101001111011000111001101011";
        ram[51] = "0b10111100111101110010000111010101";
        ram[52] = "0b10111100111010100101001011110000";
        ram[53] = "0b10111101100001111100010011001000";
        ram[54] = "0b10111101101101001001001010010100";
        ram[55] = "0b10111101101000001001110111101010";
        ram[56] = "0b10111100101000000101101000010011";
        ram[57] = "0b10111011000100010101110010110100";
        ram[58] = "0b10111101100010100001110100110010";
        ram[59] = "0b10111110000110001110100100101101";
        ram[60] = "0b10111100110001100001001111100001";
        ram[61] = "0b10111000110100100010001110001010";
        ram[62] = "0b00111100010110010001101100100100";
        ram[63] = "0b10111101011010111001111001001001";
        ram[64] = "0b10111110001001001100111010000001";
        ram[65] = "0b00111101111010101011010001110100";
        ram[66] = "0b10111011110110101111001010010101";
        ram[67] = "0b10111101000111001000110011100100";
        ram[68] = "0b00111101101111011111101001010001";
        ram[69] = "0b00111110010110011001000010110000";
        ram[70] = "0b00111010110111100110111010001011";
        ram[71] = "0b00111100011000100101010101100000";
        ram[72] = "0b00111101110001010000000111010101";
        ram[73] = "0b00111100111110001111000001000001";
        ram[74] = "0b10111101100010000111010001011110";
        ram[75] = "0b00111110000011000101000010001011";
        ram[76] = "0b10111110001000000111010011101011";
        ram[77] = "0b00111101010011101000010011100011";
        ram[78] = "0b00111101011000001001100001011100";
        ram[79] = "0b00111101111011010010110101000101";
        ram[80] = "0b10111101100011000100101110101011";
        ram[81] = "0b10111100101111101110001110100000";
        ram[82] = "0b10111101010101101110000111011111";
        ram[83] = "0b10111100101001101100100110011000";
        ram[84] = "0b00111101100000101110010100110000";
        ram[85] = "0b00111101101010011000101101010111";
        ram[86] = "0b00111100111011111011000110011110";
        ram[87] = "0b10111101110110111011100000111101";
        ram[88] = "0b10111110000000001100111111100001";
        ram[89] = "0b10111110000110010101011000111011";
        ram[90] = "0b10111110000001011101101110111010";
        ram[91] = "0b00111101010110111101100000111000";
        ram[92] = "0b00111101110111111111110111100111";
        ram[93] = "0b00111101000010101011010010101010";
        ram[94] = "0b00111011011111101110001100011111";
        ram[95] = "0b00111011011011111111010000011001";
        ram[96] = "0b00111101001000011001100100101000";
        ram[97] = "0b00111101100101101011000001000110";
        ram[98] = "0b00111110011011101001011010000001";
        ram[99] = "0b00111101000000001000100110101110";
        ram[100] = "0b00111101110111101101111100011110";
        ram[101] = "0b10111110000001000011101001100100";
        ram[102] = "0b00111101100101001110001000011101";
        ram[103] = "0b00111101110100001100011001110001";
        ram[104] = "0b10111110001110011111100101001000";
        ram[105] = "0b10111101101111100000001000111100";
        ram[106] = "0b00111101010101001011100010100100";
        ram[107] = "0b10111100111010111001010100001111";
        ram[108] = "0b10111101011110101110000000000110";
        ram[109] = "0b10111101101010011101000111110110";
        ram[110] = "0b00111101111100001011111010010100";
        ram[111] = "0b10111101001011001000110000110101";
        ram[112] = "0b00111101000000001000100101011101";
        ram[113] = "0b00111101101110101000010000000010";
        ram[114] = "0b00111101000100011000001001110100";
        ram[115] = "0b10111101100111110011110100101101";
        ram[116] = "0b10111101010000110100101000011101";
        ram[117] = "0b10111101001001010010000110001101";
        ram[118] = "0b10111110000011011111101100001101";
        ram[119] = "0b00111101000011100010100010011101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_4) {
meminst = new inference_conv2d_f3_1_1_4_ram("inference_conv2d_f3_1_1_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_4() {
    delete meminst;
}


};//endmodule
#endif
