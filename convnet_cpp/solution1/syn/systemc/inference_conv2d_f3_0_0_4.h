// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_4_H__
#define __inference_conv2d_f3_0_0_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_4_ram) {
        ram[0] = "0b10111110001010001100011110011111";
        ram[1] = "0b00111101010010110001111001110111";
        ram[2] = "0b10111101101000101100000010110010";
        ram[3] = "0b10111110000011110001111000001000";
        ram[4] = "0b10111101100010010110101100001011";
        ram[5] = "0b00111110001000000001000001000001";
        ram[6] = "0b10111101001101011010001001111001";
        ram[7] = "0b10111101110101100110010110011101";
        ram[8] = "0b00111011100101110011010101111100";
        ram[9] = "0b00111110001001000010010000011100";
        ram[10] = "0b00111101001110100001110110111000";
        ram[11] = "0b00111101111110010110010000011111";
        ram[12] = "0b10111101011111010000101110001111";
        ram[13] = "0b10111101110100110001111000111010";
        ram[14] = "0b00111100010111111000110110011010";
        ram[15] = "0b10111100100101100100110000111101";
        ram[16] = "0b10111101101101110100111001100110";
        ram[17] = "0b10111101011011101010100011011010";
        ram[18] = "0b10111101001001010000010110101001";
        ram[19] = "0b00111101010000011001100111001001";
        ram[20] = "0b10111101011110101100000111010011";
        ram[21] = "0b10111100001010110011000111011101";
        ram[22] = "0b00111011110110000001100010000101";
        ram[23] = "0b00111101001000000101100000101111";
        ram[24] = "0b10111101110101101000101101011101";
        ram[25] = "0b00111110000110010111110110001101";
        ram[26] = "0b10111101111101000010100010010001";
        ram[27] = "0b00111101000101101010001101000101";
        ram[28] = "0b00111110000010100001001001110011";
        ram[29] = "0b10111101111111010110001110001000";
        ram[30] = "0b10111100000111111000000001011001";
        ram[31] = "0b00111100000111100110101000111001";
        ram[32] = "0b00111110001100011100010010111001";
        ram[33] = "0b00111101010100111000001011001001";
        ram[34] = "0b10111110000011000011101100001100";
        ram[35] = "0b00111010011011000110001101011010";
        ram[36] = "0b10111100100100100101011011100101";
        ram[37] = "0b00111101100101101100100010110100";
        ram[38] = "0b00111100111001100011100110000101";
        ram[39] = "0b10111101100001000100100011011101";
        ram[40] = "0b00111110000010011011010101100011";
        ram[41] = "0b10111101110100000000100010100111";
        ram[42] = "0b10111101100011010001000011101000";
        ram[43] = "0b00111100111110011000100000010111";
        ram[44] = "0b00111101111001110010101110001000";
        ram[45] = "0b00111101001111100011011100100011";
        ram[46] = "0b10111110000001001000101010011100";
        ram[47] = "0b00111101101111011111101110010100";
        ram[48] = "0b10111100110110111101101001010001";
        ram[49] = "0b00111101101110100000010010101001";
        ram[50] = "0b00111101100100010111011111111000";
        ram[51] = "0b10111101101101010000110011100101";
        ram[52] = "0b10111100110011011101001111001000";
        ram[53] = "0b00111101000000011000000100111111";
        ram[54] = "0b10111101010011010111111101011111";
        ram[55] = "0b00111101100110010101101111001001";
        ram[56] = "0b00111110001001100101100000111111";
        ram[57] = "0b10111101001111010111000110110000";
        ram[58] = "0b10111101101000101111011011000000";
        ram[59] = "0b00111101010001010100101111001111";
        ram[60] = "0b10111011100110110100100011011100";
        ram[61] = "0b00111110001000110110010101000101";
        ram[62] = "0b00111101111000010101011001011100";
        ram[63] = "0b10111110000011101000001011011000";
        ram[64] = "0b00111011000110100101001011010010";
        ram[65] = "0b00111101110001110110111101100000";
        ram[66] = "0b00111110010000110100000000001100";
        ram[67] = "0b00111101100100101110101101011111";
        ram[68] = "0b10111011101111001111100110110001";
        ram[69] = "0b00111110010011011011110101110011";
        ram[70] = "0b00111101011011100101111000110010";
        ram[71] = "0b10111101101000101001110111101111";
        ram[72] = "0b00111101110000010011110111010011";
        ram[73] = "0b00111101101000001011011011010010";
        ram[74] = "0b00111101100111011101101111001110";
        ram[75] = "0b00111100110111010101000000000111";
        ram[76] = "0b00111101001101101000111110001110";
        ram[77] = "0b10111101101001110010111011001000";
        ram[78] = "0b10111110001100110010000010010110";
        ram[79] = "0b10111100100011100001111000000110";
        ram[80] = "0b00111101101011010110011100110100";
        ram[81] = "0b10111110000000111001101110001001";
        ram[82] = "0b00111101110010001111100010110010";
        ram[83] = "0b10111101111110110101010100100110";
        ram[84] = "0b00111101101100010100100100110011";
        ram[85] = "0b10111101101010000111110101111101";
        ram[86] = "0b00111101011100000000111001101011";
        ram[87] = "0b10111011111110101011110110100001";
        ram[88] = "0b00111110000110001100100110111000";
        ram[89] = "0b00111011111100000101001010111001";
        ram[90] = "0b00111101010111010101100101011101";
        ram[91] = "0b10111110010010000101101000001100";
        ram[92] = "0b10111110001010011011100011001100";
        ram[93] = "0b00111110000010100000100110001001";
        ram[94] = "0b10111101000100101011101110101010";
        ram[95] = "0b00111101111111001001111011101101";
        ram[96] = "0b10111110000001001101000111101001";
        ram[97] = "0b10111110010010101100100000011101";
        ram[98] = "0b10111101100000101000111011010110";
        ram[99] = "0b10111011111010111110100100011101";
        ram[100] = "0b00111110010101011111100000001010";
        ram[101] = "0b10111101011000100101111001001001";
        ram[102] = "0b00111101100100110000110000111111";
        ram[103] = "0b00111100101001001011100001111100";
        ram[104] = "0b10111101001111011000010110000010";
        ram[105] = "0b10111110010010000000000111110111";
        ram[106] = "0b00111101010011000101100100111111";
        ram[107] = "0b10111110001101011110010000011101";
        ram[108] = "0b00111101101010101011001000110011";
        ram[109] = "0b10111011110100101010100100110000";
        ram[110] = "0b00111110000000010001100100000101";
        ram[111] = "0b00111110010010001110010010111000";
        ram[112] = "0b10111101000000010111010101001011";
        ram[113] = "0b00111101001101011110100110101100";
        ram[114] = "0b10111100111000100010010001001101";
        ram[115] = "0b10111110010101001100101110011111";
        ram[116] = "0b10111101100101101000001101110010";
        ram[117] = "0b00111010110111001001101001110101";
        ram[118] = "0b10111100110000010100001011110110";
        ram[119] = "0b10111110000110101000001101101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_4) {
meminst = new inference_conv2d_f3_0_0_4_ram("inference_conv2d_f3_0_0_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_4() {
    delete meminst;
}


};//endmodule
#endif
