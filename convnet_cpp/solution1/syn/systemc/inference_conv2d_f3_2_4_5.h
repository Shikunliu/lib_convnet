// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_5_H__
#define __inference_conv2d_f3_2_4_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_5_ram) {
        ram[0] = "0b10111011111000011101011001001001";
        ram[1] = "0b10111100111100010111101101101101";
        ram[2] = "0b10111011111001000100010010111001";
        ram[3] = "0b00111100100000000110101001010011";
        ram[4] = "0b00111101111100100000010110111100";
        ram[5] = "0b00111101101011010010011100110000";
        ram[6] = "0b10111101110000011111001010001100";
        ram[7] = "0b10111100010000011100010110011101";
        ram[8] = "0b10111101000101010010101111100001";
        ram[9] = "0b00111101010011001011100111101101";
        ram[10] = "0b10111101100001011110111101111110";
        ram[11] = "0b00111101101010001100101001001100";
        ram[12] = "0b10111101100011101101100001000000";
        ram[13] = "0b10111101101000001011010001110110";
        ram[14] = "0b00111110000001100001000101110111";
        ram[15] = "0b00111100000111000100010010001111";
        ram[16] = "0b10111101010001110000101110001101";
        ram[17] = "0b10111101000000100010000011010111";
        ram[18] = "0b00111110000100001000100100011010";
        ram[19] = "0b00111011111100010110010110011110";
        ram[20] = "0b00111100111111000110111111110011";
        ram[21] = "0b00111010110000110001100111000110";
        ram[22] = "0b10111110001001110100100001011110";
        ram[23] = "0b10111101110101101000110001101001";
        ram[24] = "0b10111100010000100010111001111001";
        ram[25] = "0b10111110010011110001011001101110";
        ram[26] = "0b10111110001111000010111011111101";
        ram[27] = "0b00111101001101011111010110111011";
        ram[28] = "0b10111101010110110110100010001100";
        ram[29] = "0b10111101110011001001001010110101";
        ram[30] = "0b10111010000101000011111100000001";
        ram[31] = "0b10111101101000001011011101001011";
        ram[32] = "0b10111101001000011100000111110010";
        ram[33] = "0b10111101111001011110010001100000";
        ram[34] = "0b00111100101000000011111100000101";
        ram[35] = "0b10111101111000001010010110101101";
        ram[36] = "0b00111100010000010100101100100100";
        ram[37] = "0b00111100100111010101100101000010";
        ram[38] = "0b10111101100101101010110001110010";
        ram[39] = "0b10111100010111000100111110001100";
        ram[40] = "0b10111100100111010000000101100011";
        ram[41] = "0b00111101001100110111000010100110";
        ram[42] = "0b00111101100100111010100101000101";
        ram[43] = "0b10111101000100101101011100111101";
        ram[44] = "0b10111101011101111111011110100011";
        ram[45] = "0b10111101000100000011010001111011";
        ram[46] = "0b10111100101101100111101110111101";
        ram[47] = "0b00111101010110111100111100110100";
        ram[48] = "0b00111110000100011100001101101001";
        ram[49] = "0b00111100010000101011000011101010";
        ram[50] = "0b00111101100110011111100101111110";
        ram[51] = "0b00111101100111011011011001010001";
        ram[52] = "0b00111101101010000000111001110010";
        ram[53] = "0b00111110000110011001010011100010";
        ram[54] = "0b10111011111110111010011011010101";
        ram[55] = "0b00111110001001000000110101001110";
        ram[56] = "0b00111101111111101000100000010110";
        ram[57] = "0b00111101010101110000100101100111";
        ram[58] = "0b10111100110011111010001101110111";
        ram[59] = "0b10111101111010101110001100011101";
        ram[60] = "0b10111110000100000100010100110101";
        ram[61] = "0b10111100111101000011110110111111";
        ram[62] = "0b00111101100000010001000111111110";
        ram[63] = "0b00111101001111011001101110111101";
        ram[64] = "0b10111110001001001111111111001001";
        ram[65] = "0b00111101101110001100101000001001";
        ram[66] = "0b10111101111000110000000110101000";
        ram[67] = "0b00111110000100010011000001011001";
        ram[68] = "0b00111101110010011000100000001001";
        ram[69] = "0b00111101001100001010001101010001";
        ram[70] = "0b00111101101000110011101010110011";
        ram[71] = "0b10111101010011111101110110001110";
        ram[72] = "0b00111101101000100010001110111001";
        ram[73] = "0b00111101110110100100011100100100";
        ram[74] = "0b00111101111011001110100010010110";
        ram[75] = "0b00111101100110100100010110111001";
        ram[76] = "0b00111110010001000010110011000011";
        ram[77] = "0b10111101101101111001000000111111";
        ram[78] = "0b00111101111111110001110011111100";
        ram[79] = "0b00111100101101101100100110001011";
        ram[80] = "0b10111100011101011000011010010101";
        ram[81] = "0b10111101101000100000101100111101";
        ram[82] = "0b10111010011011111000001010101111";
        ram[83] = "0b10111100111000011111001000101110";
        ram[84] = "0b10111101010010010100001000011001";
        ram[85] = "0b00111101000110001110010101110100";
        ram[86] = "0b00111010111110111000010101000111";
        ram[87] = "0b10111101111100110111011111100010";
        ram[88] = "0b00111101100000010111000001010000";
        ram[89] = "0b10111101101101110010111111100010";
        ram[90] = "0b10111101000101100001101101000101";
        ram[91] = "0b00111101000111111101110000111110";
        ram[92] = "0b00111101100100110000011010001000";
        ram[93] = "0b00111101100000101000111010111011";
        ram[94] = "0b00111110000110100011101010001110";
        ram[95] = "0b00111110000110100111100100110101";
        ram[96] = "0b00111110010000101010010100011110";
        ram[97] = "0b00111110001001110101011110010011";
        ram[98] = "0b00111011110001101011111111011000";
        ram[99] = "0b10111100010101110001110110001001";
        ram[100] = "0b00111101101101010011010101000100";
        ram[101] = "0b00111101100110111110101010011111";
        ram[102] = "0b00111101010000101101001001000010";
        ram[103] = "0b00111101101010100011011010101101";
        ram[104] = "0b00111011100100000010010001100101";
        ram[105] = "0b00111100101110110001001111010010";
        ram[106] = "0b00111100111000110001111100011111";
        ram[107] = "0b10111101100111101001110110000111";
        ram[108] = "0b10111101100110101001001101101100";
        ram[109] = "0b00111101100110101101001101001000";
        ram[110] = "0b10111110010100000111110111010100";
        ram[111] = "0b10111100011011010101011100011011";
        ram[112] = "0b10111110001011011100001001101110";
        ram[113] = "0b10111101001111111011110100011010";
        ram[114] = "0b00111101000100100101001010011000";
        ram[115] = "0b10111101100100101100001001111010";
        ram[116] = "0b00111101001001001101001110111111";
        ram[117] = "0b00111101110100000111100011011001";
        ram[118] = "0b00111101101010000101000111011110";
        ram[119] = "0b10111110010001010010000011010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_5) {
meminst = new inference_conv2d_f3_2_4_5_ram("inference_conv2d_f3_2_4_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_5() {
    delete meminst;
}


};//endmodule
#endif
