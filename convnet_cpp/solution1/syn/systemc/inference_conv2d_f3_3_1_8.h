// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_8_H__
#define __inference_conv2d_f3_3_1_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_8_ram) {
        ram[0] = "0b00111101110000001111010010010101";
        ram[1] = "0b10111101001100001100000011111110";
        ram[2] = "0b10111101111101100111100110001001";
        ram[3] = "0b10111101001111010010100100111011";
        ram[4] = "0b10111101010011111101001001110000";
        ram[5] = "0b00111101101101011101011101111011";
        ram[6] = "0b00111101011111111011101111011000";
        ram[7] = "0b10111100010110101101100010010100";
        ram[8] = "0b00111101101110101100101111110001";
        ram[9] = "0b10111110010010101111001100011011";
        ram[10] = "0b00111100111011010000010010110000";
        ram[11] = "0b00111101001001011110100010101101";
        ram[12] = "0b00111101010100000010001111001111";
        ram[13] = "0b00111110000000100101001111011010";
        ram[14] = "0b10111100110001101100100110110011";
        ram[15] = "0b10111101000001111110000000110100";
        ram[16] = "0b10111101110000000111110110000100";
        ram[17] = "0b00111101000101111000101000101011";
        ram[18] = "0b10111110000101000100010000011000";
        ram[19] = "0b00111100011101110100010011011011";
        ram[20] = "0b00111100100110111110010100000011";
        ram[21] = "0b10111101101100001010101011111000";
        ram[22] = "0b00111101100100101000001101110101";
        ram[23] = "0b10111100110000010100111111000001";
        ram[24] = "0b00111011111100011110010101100000";
        ram[25] = "0b10111101011111011011111000100001";
        ram[26] = "0b10111101000110111110011111110011";
        ram[27] = "0b10111100010010110100111111110101";
        ram[28] = "0b00111110000011001001000110001110";
        ram[29] = "0b00111110000010111001010001010011";
        ram[30] = "0b00111101000011110011101100000110";
        ram[31] = "0b00111110000010000011000100100111";
        ram[32] = "0b00111101011110111011010001011100";
        ram[33] = "0b10111110001000000101100000010101";
        ram[34] = "0b10111011010110111110101100100011";
        ram[35] = "0b00111101101011111010000111100100";
        ram[36] = "0b10111110010000001001101101110100";
        ram[37] = "0b00111101111001101110110100100100";
        ram[38] = "0b00111101111100000101001000001101";
        ram[39] = "0b10111101011111001011011011110000";
        ram[40] = "0b00111101011010110000100001110010";
        ram[41] = "0b10111101101001010100100001100111";
        ram[42] = "0b00111011110111100001001010011010";
        ram[43] = "0b00111110001010111001101101100111";
        ram[44] = "0b00111101110110111000111111011110";
        ram[45] = "0b00111101101101111000010110011011";
        ram[46] = "0b10111100011011101100010101000101";
        ram[47] = "0b00111110001011100001011011010111";
        ram[48] = "0b00111101011100110011001001110111";
        ram[49] = "0b10111110001100001011010111101110";
        ram[50] = "0b00111101000100111001011100100001";
        ram[51] = "0b00111101110001101010001001010011";
        ram[52] = "0b10111100110001001101101010010000";
        ram[53] = "0b10111101001010111111101101001011";
        ram[54] = "0b10111101110000001010100011101101";
        ram[55] = "0b10111101001100000111001101100101";
        ram[56] = "0b00111101000111110110100101010010";
        ram[57] = "0b10111101101100111001000011010110";
        ram[58] = "0b10111101111101110110100110101001";
        ram[59] = "0b00111101111101011110100011010101";
        ram[60] = "0b00111101011010101100101001011110";
        ram[61] = "0b10111101000100010010101101010001";
        ram[62] = "0b00111101011011010011101010110001";
        ram[63] = "0b10111100110111010001100110000001";
        ram[64] = "0b00111110000001011001000110001010";
        ram[65] = "0b10111100101001011110010011001100";
        ram[66] = "0b00111110010001001111100010110110";
        ram[67] = "0b10111101110010010100010111011111";
        ram[68] = "0b00111110001011000001011100100010";
        ram[69] = "0b10111100110000101011011110100000";
        ram[70] = "0b00111100110000001101000100010110";
        ram[71] = "0b10111101010100011101010011011111";
        ram[72] = "0b00111110001000001101110111000110";
        ram[73] = "0b10111101100000011010011001011110";
        ram[74] = "0b10111101101010010101110111010101";
        ram[75] = "0b00111101111111011111011001010101";
        ram[76] = "0b10111101100010111000111100111101";
        ram[77] = "0b00111101101011010010010011010100";
        ram[78] = "0b00111101000011100011101100010001";
        ram[79] = "0b00111101101011100000100101101011";
        ram[80] = "0b00111101011110000010000101111010";
        ram[81] = "0b10111101101100101110101100001111";
        ram[82] = "0b00111101111100010100100110000100";
        ram[83] = "0b10111101001010101011010011111010";
        ram[84] = "0b10111101100001001001011110011100";
        ram[85] = "0b00111101101101110010110000001110";
        ram[86] = "0b00111101010110100011100110011101";
        ram[87] = "0b10111101011011101100000011000011";
        ram[88] = "0b10111110001001110000110110100110";
        ram[89] = "0b10111101100011010111100101110011";
        ram[90] = "0b00111011000011000101000011011100";
        ram[91] = "0b10111101101001010011010100000001";
        ram[92] = "0b10111101001010000000010100110111";
        ram[93] = "0b00111110000001011100110101001111";
        ram[94] = "0b00111101000011001111000111101011";
        ram[95] = "0b10111101110110111111110011101011";
        ram[96] = "0b10111110001000101010111011010001";
        ram[97] = "0b10111101110011010110011011110001";
        ram[98] = "0b10111101111011011001011010100111";
        ram[99] = "0b10111101100100100010111010101110";
        ram[100] = "0b00111101101011010101111000100010";
        ram[101] = "0b00111101001100010100101110011101";
        ram[102] = "0b10111100111111011011111000111100";
        ram[103] = "0b10111101111100101011100010000100";
        ram[104] = "0b10111101001100111010111100111111";
        ram[105] = "0b00111101100001100010100010010110";
        ram[106] = "0b10111101110100111000111001101101";
        ram[107] = "0b00111101010101011000111011000011";
        ram[108] = "0b00111101100111100001110010000000";
        ram[109] = "0b00111101100011100010110111101000";
        ram[110] = "0b10111101100001000000110110000011";
        ram[111] = "0b10111110000001110010101110001000";
        ram[112] = "0b00111100110111010011100011000000";
        ram[113] = "0b00111101100101000010010000101010";
        ram[114] = "0b10111110000100001000010110110010";
        ram[115] = "0b00111000011101111010101000011000";
        ram[116] = "0b00111101011010010010010010000111";
        ram[117] = "0b10111110000100001010111000010000";
        ram[118] = "0b10111101100100100101100101110111";
        ram[119] = "0b10111101111101000010111011011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_8) {
meminst = new inference_conv2d_f3_3_1_8_ram("inference_conv2d_f3_3_1_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_8() {
    delete meminst;
}


};//endmodule
#endif
