// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_10_H__
#define __inference_conv2d_f3_4_4_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_10_ram) {
        ram[0] = "0b10111110011010100100111001111011";
        ram[1] = "0b10111110010111101111010011100000";
        ram[2] = "0b10111101111001000100111110100000";
        ram[3] = "0b00111101100111101111101100111000";
        ram[4] = "0b10111101100000010000000001100000";
        ram[5] = "0b00111101010111100010110001110001";
        ram[6] = "0b00111100000010101110110010111000";
        ram[7] = "0b00111110000010100001110110111000";
        ram[8] = "0b00111101001100010110111010100010";
        ram[9] = "0b10111110001011001010100101101001";
        ram[10] = "0b00111011111111111101001111001011";
        ram[11] = "0b10111101010100111110000110010100";
        ram[12] = "0b00111100000100011000001000001001";
        ram[13] = "0b00111100100100100110100000010111";
        ram[14] = "0b00111011110000110010010111101111";
        ram[15] = "0b10111110000000011001010111001101";
        ram[16] = "0b00111110010010100111011111100110";
        ram[17] = "0b10111110011011101110101011101010";
        ram[18] = "0b00111100100010100011010101111001";
        ram[19] = "0b10111101011011001111111010000001";
        ram[20] = "0b00111100101001101101100110111110";
        ram[21] = "0b00111110001010001001011000010100";
        ram[22] = "0b00111100110101100010110111010100";
        ram[23] = "0b10111110001101110111001001010000";
        ram[24] = "0b00111100110011111000110111011101";
        ram[25] = "0b10111100101100101100110101111101";
        ram[26] = "0b10111110000001011001111001100010";
        ram[27] = "0b00111101100110110110100101100011";
        ram[28] = "0b00111110000100011011011011010100";
        ram[29] = "0b10111100000011010000010111001101";
        ram[30] = "0b00111101001001110010001101000000";
        ram[31] = "0b00111100001010010001011011100101";
        ram[32] = "0b00111101000101101000101011010111";
        ram[33] = "0b00111101111110001101111101111010";
        ram[34] = "0b00111101011010111000000111011111";
        ram[35] = "0b00111101110011100111101000110001";
        ram[36] = "0b00111101100111000100001101000111";
        ram[37] = "0b00111101111010100100110110110001";
        ram[38] = "0b10111110000001011000001011011100";
        ram[39] = "0b10111101110101100000111010010101";
        ram[40] = "0b00111101010100001010000100011101";
        ram[41] = "0b00111101000000011010100011000111";
        ram[42] = "0b00111100111001110010100101101111";
        ram[43] = "0b00111101100110101100100000111000";
        ram[44] = "0b00111110001010001111110110100000";
        ram[45] = "0b10111101101110001001100001001000";
        ram[46] = "0b10111110000011000111100100101101";
        ram[47] = "0b00111100010100110101100110101111";
        ram[48] = "0b00111100000001011011001001010001";
        ram[49] = "0b10111110000010100100100110000000";
        ram[50] = "0b00111101101100000011100011001000";
        ram[51] = "0b00111100101100000001111110000010";
        ram[52] = "0b10111101100101101111101001001101";
        ram[53] = "0b00111101111101111111001010000000";
        ram[54] = "0b00111101000010101011010110000000";
        ram[55] = "0b00111101010111011100000011110110";
        ram[56] = "0b10111110010101101101110001011101";
        ram[57] = "0b00111101010001010001010000000110";
        ram[58] = "0b10111101111100011111011000000001";
        ram[59] = "0b00111100110011011101000101000100";
        ram[60] = "0b10111100100001011001010010010100";
        ram[61] = "0b10111110000011000011000000001010";
        ram[62] = "0b10111101010011001011001111011000";
        ram[63] = "0b00111101010011100001111011000010";
        ram[64] = "0b00111100010100100000100000001011";
        ram[65] = "0b10111011101000111000000010100011";
        ram[66] = "0b00111101110000110110111110100111";
        ram[67] = "0b00111100101111010111011000011000";
        ram[68] = "0b10111101001100000011001111011010";
        ram[69] = "0b00111101110001110100111011101100";
        ram[70] = "0b10111100101010011110110001100011";
        ram[71] = "0b00111101001110010101100101101101";
        ram[72] = "0b00111110011001001110000101100001";
        ram[73] = "0b00111101001101011111111000000100";
        ram[74] = "0b00111100111010001101111000010000";
        ram[75] = "0b00111110000000001111010101011110";
        ram[76] = "0b10111100000111000001110101100010";
        ram[77] = "0b10111100111001011010011111111011";
        ram[78] = "0b10111101110111100111110110011010";
        ram[79] = "0b10111010101111110111001010011100";
        ram[80] = "0b10111101110101001001011010101011";
        ram[81] = "0b00111101100101001010111110100000";
        ram[82] = "0b00111110000100101010111111011110";
        ram[83] = "0b00111101100001010110110110100000";
        ram[84] = "0b10111100111101010110000001101010";
        ram[85] = "0b10111101111101001101100010111010";
        ram[86] = "0b10111100101011100011111000000001";
        ram[87] = "0b00111110001001101000100111001010";
        ram[88] = "0b10111101101110100001111110101001";
        ram[89] = "0b00111101110110011010110110000110";
        ram[90] = "0b00111101110100011111011100001110";
        ram[91] = "0b10111101000100110110000100000110";
        ram[92] = "0b00111100111100011101110010111100";
        ram[93] = "0b00111101110011100000011101011111";
        ram[94] = "0b00111110010000001110000101110010";
        ram[95] = "0b00111100111010010010001001101110";
        ram[96] = "0b00111110001010010110101001101010";
        ram[97] = "0b00111101011000110000010010010111";
        ram[98] = "0b00111101111011111001100001110100";
        ram[99] = "0b00111100100001000110000010000010";
        ram[100] = "0b10111101001000010110111100000000";
        ram[101] = "0b00111101000101001011011100010001";
        ram[102] = "0b00111100100110010110100110010011";
        ram[103] = "0b10111100111001010101010011101110";
        ram[104] = "0b00111101010111000110101111110111";
        ram[105] = "0b10111110001111101010100010010111";
        ram[106] = "0b00111100011001011000111110100111";
        ram[107] = "0b00111011100000110101100100010000";
        ram[108] = "0b00111101010001000010010010001000";
        ram[109] = "0b10111101110001010011000000111011";
        ram[110] = "0b10111110000000110011011001011001";
        ram[111] = "0b00111100110000100101111010110101";
        ram[112] = "0b10111110010001011101101100110100";
        ram[113] = "0b10111101100011100010110101010101";
        ram[114] = "0b10111101011101001100010001111101";
        ram[115] = "0b00111101011000100111111111010111";
        ram[116] = "0b10111101100011100111000110001011";
        ram[117] = "0b00111101001011111100100110111100";
        ram[118] = "0b10111101101110101100011111110101";
        ram[119] = "0b00111110000000011111011111010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_10) {
meminst = new inference_conv2d_f3_4_4_10_ram("inference_conv2d_f3_4_4_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_10() {
    delete meminst;
}


};//endmodule
#endif
