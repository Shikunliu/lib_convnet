// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_2_H__
#define __inference_conv2d_f3_2_0_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_2_ram) {
        ram[0] = "0b00111101010001101101010101110010";
        ram[1] = "0b00111101100110000000111101010110";
        ram[2] = "0b00111101010000000000001000011001";
        ram[3] = "0b00111101101000110100110101000010";
        ram[4] = "0b10111101101111000000111110111110";
        ram[5] = "0b10111101010001111010001001010110";
        ram[6] = "0b00111100100100000110110100110110";
        ram[7] = "0b10111101100100010100100010100000";
        ram[8] = "0b00111101100010011101001001100001";
        ram[9] = "0b00111100001110110010111111101100";
        ram[10] = "0b00111110000110110110010101100111";
        ram[11] = "0b00111101010001110111100001001010";
        ram[12] = "0b00111101110110000111111001111100";
        ram[13] = "0b00111100111001001100010100010001";
        ram[14] = "0b00111100000101100101101011000000";
        ram[15] = "0b00111100110111101001100000111100";
        ram[16] = "0b00111101000110110010110011111101";
        ram[17] = "0b00111101100110011101101100111110";
        ram[18] = "0b10111100001011001000001100010110";
        ram[19] = "0b00111101111100000011111000100001";
        ram[20] = "0b00111101010110100011100010101011";
        ram[21] = "0b00111101101000011011101001110010";
        ram[22] = "0b10111100010011110000001101110011";
        ram[23] = "0b00111101111000001110110001110100";
        ram[24] = "0b10111101011111111111000101101101";
        ram[25] = "0b10111110000110011100100111010110";
        ram[26] = "0b10111110000000101000101111110100";
        ram[27] = "0b10111110000001100100011110111011";
        ram[28] = "0b00111101010001011000111100000110";
        ram[29] = "0b00111110000011110110100101000100";
        ram[30] = "0b10111101101101110000110001100100";
        ram[31] = "0b10111100110011110100011100110000";
        ram[32] = "0b10111101010011010010000000001111";
        ram[33] = "0b10111101010010011010000000001100";
        ram[34] = "0b10111100110001101111110000001000";
        ram[35] = "0b10111100110101100100010100011100";
        ram[36] = "0b10111101011111001101110000001111";
        ram[37] = "0b00111101000100101111110011100010";
        ram[38] = "0b00111100101010100011100100100100";
        ram[39] = "0b00111101100000100100101011010110";
        ram[40] = "0b00111101110100000111110010000101";
        ram[41] = "0b00111101101101110001001110111011";
        ram[42] = "0b10111110000000101111010011001111";
        ram[43] = "0b00111101111111011101010001000001";
        ram[44] = "0b00111101100011010000011001000011";
        ram[45] = "0b10111100101010011100010011000000";
        ram[46] = "0b00111110000000100010101000101100";
        ram[47] = "0b00111100100111001011000000000100";
        ram[48] = "0b00111011100100000000000011101010";
        ram[49] = "0b00111101100111101111101011101000";
        ram[50] = "0b00111101101001001010001100001010";
        ram[51] = "0b00111101101000101000010001011010";
        ram[52] = "0b10111110010001100100000001100100";
        ram[53] = "0b10111110000011001100010110111001";
        ram[54] = "0b00111101100011001011011110101100";
        ram[55] = "0b10111101011111100100100010100110";
        ram[56] = "0b00111011100000110111011001101101";
        ram[57] = "0b10111101110100011101001011100001";
        ram[58] = "0b10111101100000010110011001100111";
        ram[59] = "0b10111100100100011100000010000111";
        ram[60] = "0b10111101100111001001000111111010";
        ram[61] = "0b10111110001000100001111111110011";
        ram[62] = "0b10111110000100010001110101111010";
        ram[63] = "0b00111110010100011001000000001000";
        ram[64] = "0b10111101101001111000010000001000";
        ram[65] = "0b10111101001101001100101001111000";
        ram[66] = "0b10111101100101010101100001010111";
        ram[67] = "0b00111101010101100101001001010010";
        ram[68] = "0b10111110000001001110010010000110";
        ram[69] = "0b10111101111010001101111100110111";
        ram[70] = "0b10111101011101110101101001110101";
        ram[71] = "0b10111101011111011111011101000111";
        ram[72] = "0b10111110000110100011100111000101";
        ram[73] = "0b10111101110111010001001011001011";
        ram[74] = "0b10111101111001011001111110110010";
        ram[75] = "0b10111101100001110001000010100011";
        ram[76] = "0b10111010110110000000100101101100";
        ram[77] = "0b10111101011110110010011101010011";
        ram[78] = "0b10111100110001111100100000010110";
        ram[79] = "0b10111101101000101101100101010110";
        ram[80] = "0b10111110001101101110110010011110";
        ram[81] = "0b10111100111000110011000101011101";
        ram[82] = "0b00111101011111001110100110110000";
        ram[83] = "0b00111100100000000110010000111110";
        ram[84] = "0b10111101010001101110011111100110";
        ram[85] = "0b00111110000111000101110110100111";
        ram[86] = "0b00111110001010001101000000000011";
        ram[87] = "0b10111101010100000001000011101111";
        ram[88] = "0b00111101000100011110111001110101";
        ram[89] = "0b10111100000110001000010110110011";
        ram[90] = "0b10111110000010010000101110000101";
        ram[91] = "0b10111101001010010011010100011000";
        ram[92] = "0b10111101111001001111011111101100";
        ram[93] = "0b00111101100010100001110001110110";
        ram[94] = "0b10111101001111011101011010101011";
        ram[95] = "0b10111110000100110111100010101011";
        ram[96] = "0b10111101111001000001010101101110";
        ram[97] = "0b10111011111101000010011110110000";
        ram[98] = "0b10111100001100100001011100111111";
        ram[99] = "0b00111101111001001000101101100101";
        ram[100] = "0b00111100011011100010001101011111";
        ram[101] = "0b00111110010000001110111110011010";
        ram[102] = "0b00111101100010111010011111111100";
        ram[103] = "0b00111100000110001100011100100001";
        ram[104] = "0b10111110000010011001010101101000";
        ram[105] = "0b00111110000111111010110101101101";
        ram[106] = "0b10111011101101010101100111101010";
        ram[107] = "0b10111100101011101010101111100101";
        ram[108] = "0b00111101001010111101001111111001";
        ram[109] = "0b00111101001000111111111010010010";
        ram[110] = "0b00111101011101001110000010011000";
        ram[111] = "0b00111101110000111110111111110010";
        ram[112] = "0b10111110000100001110011100110110";
        ram[113] = "0b00111101010010011100101111111100";
        ram[114] = "0b10111011110101000010100100001101";
        ram[115] = "0b10111110000001001111110010100100";
        ram[116] = "0b10111101101111110000010110001100";
        ram[117] = "0b00111101111010011001111100011011";
        ram[118] = "0b00111100110100101111111000111111";
        ram[119] = "0b00111110010001110110111111110100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_2) {
meminst = new inference_conv2d_f3_2_0_2_ram("inference_conv2d_f3_2_0_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_2() {
    delete meminst;
}


};//endmodule
#endif
