// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_29_H__
#define __inference_mult_1_120_120_84_s_W4_29_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_29_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_29_ram) {
        ram[0] = "0b10111110001111010000101010101010";
        ram[1] = "0b00111101100010011110111110001000";
        ram[2] = "0b10111101101001111001011100101011";
        ram[3] = "0b10111101000110111111111010110100";
        ram[4] = "0b10111100110000100010011001001011";
        ram[5] = "0b10111101010000010001010011101110";
        ram[6] = "0b00111101000100110010110110100100";
        ram[7] = "0b00111110000011001100100111101011";
        ram[8] = "0b10111100101011110000101001000100";
        ram[9] = "0b10111100000010001101010100100110";
        ram[10] = "0b00111101111111011000100111001110";
        ram[11] = "0b10111101101000101100010000000000";
        ram[12] = "0b00111110011010010000100100101001";
        ram[13] = "0b10111101001011010001010000011010";
        ram[14] = "0b10111101110010100010010111110100";
        ram[15] = "0b10111101111101001010101110100100";
        ram[16] = "0b10111101100000100111010001000001";
        ram[17] = "0b00111101110111110011011100110011";
        ram[18] = "0b10111100101111101101110111110111";
        ram[19] = "0b00111101100000011110110111101111";
        ram[20] = "0b00111110000010001000000010010101";
        ram[21] = "0b10111110001001011000111011101011";
        ram[22] = "0b10111101000110000101011010001001";
        ram[23] = "0b00111101011010100001100111100101";
        ram[24] = "0b10111101101100010101001000111000";
        ram[25] = "0b10111101000011101011100100000000";
        ram[26] = "0b00111101000110111001000110100111";
        ram[27] = "0b10111110000110111101101001010001";
        ram[28] = "0b10111011011011000111000100000010";
        ram[29] = "0b10111011110001100101101101101111";
        ram[30] = "0b10111101001000000110000010101110";
        ram[31] = "0b10111101111110010111100010010010";
        ram[32] = "0b00111101110010100110000110000011";
        ram[33] = "0b10111100111010011001010100100101";
        ram[34] = "0b00111101001011111111101110100110";
        ram[35] = "0b00111110010001111111100101010001";
        ram[36] = "0b00111101001110110010100010110000";
        ram[37] = "0b00111101000010101000111000101110";
        ram[38] = "0b00111110010101010010011100011100";
        ram[39] = "0b00111101110011110000011100111010";
        ram[40] = "0b00111110001000101001001000111110";
        ram[41] = "0b00111101011101000110000110011100";
        ram[42] = "0b00111101001000010100101000110010";
        ram[43] = "0b00111101100010101100110000001100";
        ram[44] = "0b10111101001011100000001111101010";
        ram[45] = "0b00111101001101110001100000010101";
        ram[46] = "0b10111100101000110000000111000010";
        ram[47] = "0b00111110001100110111000101010100";
        ram[48] = "0b10111110001011111101000101010111";
        ram[49] = "0b00111101100111000010110110000101";
        ram[50] = "0b10111101010100111110111100110110";
        ram[51] = "0b10111101001111010010100100100001";
        ram[52] = "0b00111011100011001010110111100011";
        ram[53] = "0b10111101111001100111110001101100";
        ram[54] = "0b10111010101010001111110001100011";
        ram[55] = "0b00111101000101111101111010101110";
        ram[56] = "0b10111101001100101110001011111100";
        ram[57] = "0b00111101011110010100101001010100";
        ram[58] = "0b10111101001100010011101010000101";
        ram[59] = "0b10111101101001100110000111010111";
        ram[60] = "0b10111100111010101000101110001111";
        ram[61] = "0b10111101111101101011101010001100";
        ram[62] = "0b10111110001110001101110000010010";
        ram[63] = "0b00111110000011111000011100100111";
        ram[64] = "0b10111100000001111111100100111110";
        ram[65] = "0b10111110001000000011111111110111";
        ram[66] = "0b00111101010111001010001000010010";
        ram[67] = "0b00111110000100111011011110010101";
        ram[68] = "0b00111101010001111100110000101101";
        ram[69] = "0b10111101001101011011110100000001";
        ram[70] = "0b00111100000000101000011100000011";
        ram[71] = "0b00111110000000010011101110011111";
        ram[72] = "0b00111101011000111001100110011000";
        ram[73] = "0b10111110000110010100111110101101";
        ram[74] = "0b00111101101001011101101110101100";
        ram[75] = "0b10111110001010111000000000100100";
        ram[76] = "0b00111101001000111100001010110011";
        ram[77] = "0b10111100100110011100000100111100";
        ram[78] = "0b00111100110000011111111101001001";
        ram[79] = "0b10111010101011010010100101101110";
        ram[80] = "0b00111100111100100100001111101010";
        ram[81] = "0b00111110000001011101100111100100";
        ram[82] = "0b00111101110010010010111111011010";
        ram[83] = "0b00111101110001000111001000000101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_29) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_29_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_29) {
meminst = new inference_mult_1_120_120_84_s_W4_29_ram("inference_mult_1_120_120_84_s_W4_29_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_29() {
    delete meminst;
}


};//endmodule
#endif
