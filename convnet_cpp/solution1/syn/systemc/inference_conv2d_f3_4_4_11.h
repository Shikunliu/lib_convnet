// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_11_H__
#define __inference_conv2d_f3_4_4_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_11_ram) {
        ram[0] = "0b10111101100001101101100110010110";
        ram[1] = "0b10111101000100000110110111110001";
        ram[2] = "0b00111101111000011010001001100010";
        ram[3] = "0b00111110000111111110010001111010";
        ram[4] = "0b00111101100011111010110111100110";
        ram[5] = "0b00111110000010100100111010111110";
        ram[6] = "0b00111110000100011110010001110001";
        ram[7] = "0b10111011001001100001111111100101";
        ram[8] = "0b00111101111101111101101001100010";
        ram[9] = "0b00111100011110000010101001001001";
        ram[10] = "0b00111101101110111011111100001110";
        ram[11] = "0b00111101101101110100010010001010";
        ram[12] = "0b10111110000001001011000101101000";
        ram[13] = "0b10111110000010001110010001110101";
        ram[14] = "0b00111100100001001011110110011111";
        ram[15] = "0b00111100010110001010101001010001";
        ram[16] = "0b00111110010010110100100001001101";
        ram[17] = "0b00111101100010000010110011101000";
        ram[18] = "0b00111101101001001110111000011110";
        ram[19] = "0b00111101111001001111111010111101";
        ram[20] = "0b10111101000000110101101100011001";
        ram[21] = "0b00111110001001000010010000011100";
        ram[22] = "0b10111100101101110110001000110111";
        ram[23] = "0b00111110010101001101101100010110";
        ram[24] = "0b10111101100101111110001000100100";
        ram[25] = "0b10111101110111000100000010001110";
        ram[26] = "0b00111101011011010110001111100110";
        ram[27] = "0b00111101110001010000001010010001";
        ram[28] = "0b10111101010111110010000001010111";
        ram[29] = "0b00111100110100110110011001000100";
        ram[30] = "0b00111100101100010100110010101001";
        ram[31] = "0b00111101111001100000111101011110";
        ram[32] = "0b00111110000010111111110001100101";
        ram[33] = "0b10111101011000000011000101111110";
        ram[34] = "0b10111101010100101011010011110100";
        ram[35] = "0b00111101111010111011010111100001";
        ram[36] = "0b10111101001011110011110010011001";
        ram[37] = "0b10111101100100010001000010000110";
        ram[38] = "0b00111101111100010111000011010110";
        ram[39] = "0b00111100111011111011110100100111";
        ram[40] = "0b10111101101110101000110101100101";
        ram[41] = "0b10111110000010000111000100011101";
        ram[42] = "0b00111101101000010101000110100100";
        ram[43] = "0b00111101100011011100111011011011";
        ram[44] = "0b10111100111100010000011011010011";
        ram[45] = "0b00111101111000111110100111101010";
        ram[46] = "0b00111100111001000000011000111010";
        ram[47] = "0b10111101011101000100010111101101";
        ram[48] = "0b00111101001100011000110111100010";
        ram[49] = "0b10111101001000111011010101100001";
        ram[50] = "0b10111101001110001101000100111000";
        ram[51] = "0b10111101111100110101100101111001";
        ram[52] = "0b00111101011001000000001111010000";
        ram[53] = "0b10111101111010011101101001011001";
        ram[54] = "0b10111101100011110001100001101100";
        ram[55] = "0b00111100100011100011111100101000";
        ram[56] = "0b00111110000010110000100111101010";
        ram[57] = "0b00111011000000011100111000100001";
        ram[58] = "0b00111100010100000011010001100000";
        ram[59] = "0b00111101101000011001011101010010";
        ram[60] = "0b00111110000011101101011101000001";
        ram[61] = "0b00111101101000100101000010101000";
        ram[62] = "0b00111101111101111100000000101011";
        ram[63] = "0b10111101110010101110000011011100";
        ram[64] = "0b00111110000010110101001111010110";
        ram[65] = "0b10111101011110010010010101101011";
        ram[66] = "0b00111101110111000100011101011110";
        ram[67] = "0b00111100101001101000111100010110";
        ram[68] = "0b00111101110010111101001111101100";
        ram[69] = "0b10111100101111000010001010010000";
        ram[70] = "0b00111101110101100010011010110011";
        ram[71] = "0b00111101110110010110111000010110";
        ram[72] = "0b10111100000111001001011011111010";
        ram[73] = "0b00111101100000000111001011101101";
        ram[74] = "0b00111101100001110100111001100110";
        ram[75] = "0b00111101110000110011101100111001";
        ram[76] = "0b10111101000010000000110011111010";
        ram[77] = "0b00111110001101111010000001110011";
        ram[78] = "0b10111101010010101111011111000110";
        ram[79] = "0b10111101000000011010111110110011";
        ram[80] = "0b10111101000111111100001011111001";
        ram[81] = "0b00111100111000000001000000001011";
        ram[82] = "0b10111101100110110000001100110100";
        ram[83] = "0b00111101010010101011010010101010";
        ram[84] = "0b10111100100101001101010010100011";
        ram[85] = "0b00111110001010001110100010100111";
        ram[86] = "0b00111101110010000011111110101101";
        ram[87] = "0b00111101100001101111010000101011";
        ram[88] = "0b10111100100110000101100010000111";
        ram[89] = "0b10111101011111101000110111011010";
        ram[90] = "0b10111101011001100000001001011110";
        ram[91] = "0b10111110000001000111101010011110";
        ram[92] = "0b00111101101011011110100011101001";
        ram[93] = "0b00111110000111101101010011100101";
        ram[94] = "0b00111110000001110011101010111101";
        ram[95] = "0b00111101001011111001011100010111";
        ram[96] = "0b10111101011011011000010000110010";
        ram[97] = "0b00111101100111011010100101000011";
        ram[98] = "0b00111100111010000011001111111100";
        ram[99] = "0b00111100111010011000110101100010";
        ram[100] = "0b00111100101011001111110010111000";
        ram[101] = "0b00111101101000111000001100110101";
        ram[102] = "0b10111101101010011110111101101101";
        ram[103] = "0b10111101100000001011101101101111";
        ram[104] = "0b00111110000011000110111011110100";
        ram[105] = "0b00111101010110101100001110110110";
        ram[106] = "0b10111101010001000010011000110101";
        ram[107] = "0b10111101100100110100111001001110";
        ram[108] = "0b00111101000110010011110110001001";
        ram[109] = "0b10111100001010100001111110001110";
        ram[110] = "0b10111110000011001111110001000000";
        ram[111] = "0b00111101101110111100101000101011";
        ram[112] = "0b10111101001110110000110101010010";
        ram[113] = "0b00111011011010100010010011001100";
        ram[114] = "0b00111101110011111101010000111001";
        ram[115] = "0b10111101110110101010111111111111";
        ram[116] = "0b10111100001000000110101011011010";
        ram[117] = "0b00111101010000011010010010010101";
        ram[118] = "0b10111101101001110001001110100000";
        ram[119] = "0b00111100111001111001011111110100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_11) {
meminst = new inference_conv2d_f3_4_4_11_ram("inference_conv2d_f3_4_4_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_11() {
    delete meminst;
}


};//endmodule
#endif
