// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_3_H__
#define __inference_conv2d_f3_0_1_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_3_ram) {
        ram[0] = "0b00111101010000111001110110010100";
        ram[1] = "0b00111101000101001000100111111011";
        ram[2] = "0b00111101000001000100001111000111";
        ram[3] = "0b00111101011011011001000010101101";
        ram[4] = "0b10111101111111110100001111001000";
        ram[5] = "0b00111110000111010111010111100010";
        ram[6] = "0b10111110000001010001111000110010";
        ram[7] = "0b00111100010111000111011000100011";
        ram[8] = "0b00111101000110000110111110110011";
        ram[9] = "0b10111101110100001000001101010110";
        ram[10] = "0b10111101100001100011000000110000";
        ram[11] = "0b00111001111001000100100101111100";
        ram[12] = "0b10111101101101111110000101000000";
        ram[13] = "0b10111101010111011111010100101110";
        ram[14] = "0b10111110000010110011100001010000";
        ram[15] = "0b10111101010100011000001110011011";
        ram[16] = "0b10111011101000111100000100100101";
        ram[17] = "0b10111100110101011000100101101010";
        ram[18] = "0b10111100101010010100001011101111";
        ram[19] = "0b10111110000100001001100001001110";
        ram[20] = "0b10111100011101001001100110011010";
        ram[21] = "0b00111101110001000001110001001100";
        ram[22] = "0b10111101100001000011111110010101";
        ram[23] = "0b10111101111001001001100100000111";
        ram[24] = "0b10111011110011011111001100010011";
        ram[25] = "0b00111100101001011000011111100100";
        ram[26] = "0b00111101001111111011100101101110";
        ram[27] = "0b00111101100110111111011011010111";
        ram[28] = "0b00111101010001011011101111001100";
        ram[29] = "0b00111101111010001110100000100001";
        ram[30] = "0b10111101010111001111111101001010";
        ram[31] = "0b10111011100101110010000000011000";
        ram[32] = "0b10111101110110011000001100001110";
        ram[33] = "0b10111100100010010000110111111011";
        ram[34] = "0b00111110000010110001001100010110";
        ram[35] = "0b10111011110001000011101000000001";
        ram[36] = "0b10111101011111101111100000010011";
        ram[37] = "0b00111101100110000100100001101110";
        ram[38] = "0b10111101101010100100100110101000";
        ram[39] = "0b00111101001111010100010110100110";
        ram[40] = "0b00111101111011000101001000011110";
        ram[41] = "0b10111101010001001001111100000001";
        ram[42] = "0b00111101110110000001011100110011";
        ram[43] = "0b00111101101011010001000101000110";
        ram[44] = "0b00111110010001000000100001010011";
        ram[45] = "0b00111101110101011111010111110001";
        ram[46] = "0b00111110010101010001001110110110";
        ram[47] = "0b10111101010000111110111110010100";
        ram[48] = "0b00111100110010001011110110101001";
        ram[49] = "0b10111101101011011010111100110000";
        ram[50] = "0b10111010100001101011010010010000";
        ram[51] = "0b00111011001110011011010111000100";
        ram[52] = "0b00111100101010000000010100000010";
        ram[53] = "0b10111101100111000100101110000011";
        ram[54] = "0b00111101010011010110000000111011";
        ram[55] = "0b10111101101011010101101001001110";
        ram[56] = "0b10111100001110011101111010110011";
        ram[57] = "0b00111101010111111010111011110010";
        ram[58] = "0b10111100110010111111011101001111";
        ram[59] = "0b10111110010010110110111000001101";
        ram[60] = "0b00111101011000111111000011010110";
        ram[61] = "0b10111101001111000110111000101011";
        ram[62] = "0b10111110000001001000001100000010";
        ram[63] = "0b10111011101011010100011001110101";
        ram[64] = "0b10111011100010100100100000000010";
        ram[65] = "0b00111010100010101100001101101000";
        ram[66] = "0b00111100111100101100011000100110";
        ram[67] = "0b00111011000001110010111100110100";
        ram[68] = "0b00111101000101010100010111111101";
        ram[69] = "0b00111101000101111101111010010100";
        ram[70] = "0b10111101101111010100010100101101";
        ram[71] = "0b10111101001001100011110000001010";
        ram[72] = "0b00111101111110011011011011110110";
        ram[73] = "0b00111101100100011100110101000101";
        ram[74] = "0b00111100110001100110010100111111";
        ram[75] = "0b10111100110111111111010111010100";
        ram[76] = "0b00111101011010011000010110100000";
        ram[77] = "0b10111100110110110001010100101111";
        ram[78] = "0b00111101100101010110000000100111";
        ram[79] = "0b10111100101111101110011000100101";
        ram[80] = "0b00111100010001001101110110000000";
        ram[81] = "0b10111101011001011001011101101001";
        ram[82] = "0b00111101100000010010011000111011";
        ram[83] = "0b00111100011111011110010000110001";
        ram[84] = "0b00111101101110010011000100110111";
        ram[85] = "0b00111101001010111110110101110100";
        ram[86] = "0b10111100110111010111010100100110";
        ram[87] = "0b10111110001001101010110110110100";
        ram[88] = "0b00111101000000010001110100011100";
        ram[89] = "0b00111101100100011101101110010101";
        ram[90] = "0b00111011111010100001000010010101";
        ram[91] = "0b10111100101111101100010100111000";
        ram[92] = "0b10111100001110010010000111110101";
        ram[93] = "0b00111101001000001011010001000000";
        ram[94] = "0b10111100111100110001011100011001";
        ram[95] = "0b10111101001010011010101101000101";
        ram[96] = "0b10111110001101100100110011111001";
        ram[97] = "0b00111101000110100010110101110011";
        ram[98] = "0b10111100000000011111000000100101";
        ram[99] = "0b00111110000100001001011011111111";
        ram[100] = "0b00111100111000111011101100100110";
        ram[101] = "0b10111100100011101101001001100001";
        ram[102] = "0b00111101000110000010111101010001";
        ram[103] = "0b00111101000001111111111100111101";
        ram[104] = "0b10111101101111101011100010100010";
        ram[105] = "0b10111101001101010000110110101110";
        ram[106] = "0b10111100000110111110001111100001";
        ram[107] = "0b10111101100010011011010010100111";
        ram[108] = "0b10111110010001110000101101001010";
        ram[109] = "0b00111100111111000000111000000011";
        ram[110] = "0b10111101100010110100001010100100";
        ram[111] = "0b00111110000001100010111010010000";
        ram[112] = "0b10111110000111000011001011101100";
        ram[113] = "0b10111101000001111110011100000101";
        ram[114] = "0b00111101110110100011001010110001";
        ram[115] = "0b00111100010001111010011010001000";
        ram[116] = "0b10111100011101101101000010101100";
        ram[117] = "0b10111101101110010001001011101001";
        ram[118] = "0b00111011110101010111011101010110";
        ram[119] = "0b00111101101001000110110001000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_3) {
meminst = new inference_conv2d_f3_0_1_3_ram("inference_conv2d_f3_0_1_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_3() {
    delete meminst;
}


};//endmodule
#endif
