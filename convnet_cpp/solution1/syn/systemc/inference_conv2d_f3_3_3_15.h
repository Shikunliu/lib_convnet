// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_15_H__
#define __inference_conv2d_f3_3_3_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_15_ram) {
        ram[0] = "0b00111101100011011000011100111101";
        ram[1] = "0b00111100100100010111110010010101";
        ram[2] = "0b10111100111011110010000010110101";
        ram[3] = "0b10111110000010010101111010011110";
        ram[4] = "0b10111101111111100001101010000010";
        ram[5] = "0b00111110000001100000101100101101";
        ram[6] = "0b10111011111110111100001101110000";
        ram[7] = "0b10111101100001101011111010100011";
        ram[8] = "0b00111101011111001001100111100100";
        ram[9] = "0b00111101110010011101000100011111";
        ram[10] = "0b10111101101001101001111101110001";
        ram[11] = "0b10111110000010110001101010110001";
        ram[12] = "0b00111110000100000011110100010100";
        ram[13] = "0b00111100100100100110001100001111";
        ram[14] = "0b10111101111000110110010111001011";
        ram[15] = "0b10111100110010001101100101011000";
        ram[16] = "0b00111101110011100001111001110001";
        ram[17] = "0b10111100110111000011010001111111";
        ram[18] = "0b10111110001110101000010001111011";
        ram[19] = "0b00111101000111100001110111011101";
        ram[20] = "0b10111100101100100110000010100101";
        ram[21] = "0b10111101110000010000010100100110";
        ram[22] = "0b00111101011011110100010111101110";
        ram[23] = "0b10111101001100001010110001110000";
        ram[24] = "0b00111100010100000011100010010010";
        ram[25] = "0b00111101110010011001010111111011";
        ram[26] = "0b00111110001110011100101001011100";
        ram[27] = "0b10111101000100001011001100100110";
        ram[28] = "0b10111101001100001111010100000000";
        ram[29] = "0b10111101011110001000010001110110";
        ram[30] = "0b00111110001010111110100111001001";
        ram[31] = "0b00111101010000001010101010011010";
        ram[32] = "0b00111101001011100011110101000101";
        ram[33] = "0b00111110001101001011010011010000";
        ram[34] = "0b00111101101000110101111101100110";
        ram[35] = "0b00111110000101110101010101111010";
        ram[36] = "0b00111101101110000000010100000010";
        ram[37] = "0b10111101011000110011011111011110";
        ram[38] = "0b10111110000111110010000101110001";
        ram[39] = "0b00111110000010000111010111010101";
        ram[40] = "0b00111010100110001000101111111101";
        ram[41] = "0b00111101100001001110011010010010";
        ram[42] = "0b10111110000100111001100001100011";
        ram[43] = "0b10111101110000111110010001101001";
        ram[44] = "0b00111101001000101010110000010111";
        ram[45] = "0b00111110000011110111000110101000";
        ram[46] = "0b00111100111111001010101001000000";
        ram[47] = "0b10111101000010001111100010010111";
        ram[48] = "0b00111101011110011110011110000010";
        ram[49] = "0b00111011010000110001001111100110";
        ram[50] = "0b10111110000010011011010011011101";
        ram[51] = "0b00111101110110100111101100001011";
        ram[52] = "0b10111110000000010101110110110011";
        ram[53] = "0b10111100101001100001100111011011";
        ram[54] = "0b10111101011110001100101111011111";
        ram[55] = "0b10111101000000001011011110000000";
        ram[56] = "0b00111011101011111101111001101010";
        ram[57] = "0b10111101000001110111010000011000";
        ram[58] = "0b10111110001001100001110001111010";
        ram[59] = "0b10111110001010011000011101000000";
        ram[60] = "0b00111010111011110010101100011100";
        ram[61] = "0b00111101100011000110111010100011";
        ram[62] = "0b10111101001110011000110111000000";
        ram[63] = "0b10111101111001101010100110000010";
        ram[64] = "0b10111101001011101001011111011110";
        ram[65] = "0b00111101100111101010001111101101";
        ram[66] = "0b10111110000001000101110001111001";
        ram[67] = "0b00111110000000111001101001111100";
        ram[68] = "0b00111101101111101101001010111110";
        ram[69] = "0b00111101111101101011001100110101";
        ram[70] = "0b00111101101010111000100100110110";
        ram[71] = "0b10111100111111110011001000001111";
        ram[72] = "0b00111110000011000101001111110100";
        ram[73] = "0b00111101101011101111000110111011";
        ram[74] = "0b00111100000000011010011010001001";
        ram[75] = "0b10111101101001010010110100001000";
        ram[76] = "0b00111101011001000110110001110110";
        ram[77] = "0b10111100111101000010011001111000";
        ram[78] = "0b00111101100110010101000110010000";
        ram[79] = "0b10111101000000100011110101011101";
        ram[80] = "0b10111110000101000001111110100111";
        ram[81] = "0b10111101111111011000100111001110";
        ram[82] = "0b00111101100010011010110110100001";
        ram[83] = "0b00111101111100000111011011000000";
        ram[84] = "0b00111110001000010110011011100000";
        ram[85] = "0b10111101011001110110010001011101";
        ram[86] = "0b00111101100010110110010000111111";
        ram[87] = "0b00111101000111100000111110011011";
        ram[88] = "0b00111101000011101000101111001111";
        ram[89] = "0b00111110000101001111100000101111";
        ram[90] = "0b00111100111010101100011011101001";
        ram[91] = "0b00111101101011110100011010101010";
        ram[92] = "0b10111110000001100100000100101101";
        ram[93] = "0b00111110000101111000100011011011";
        ram[94] = "0b00111101100100111011100111111111";
        ram[95] = "0b10111110000011000111110000001111";
        ram[96] = "0b00111100110100110101010111101000";
        ram[97] = "0b10111101001001101101010110100111";
        ram[98] = "0b00111101100100011000111011010011";
        ram[99] = "0b10111101111101011011011010000000";
        ram[100] = "0b00111100100110111011000001100000";
        ram[101] = "0b10111110010010110110010000010111";
        ram[102] = "0b00111100101011110110000001000000";
        ram[103] = "0b00111110001001000100010111101101";
        ram[104] = "0b10111101000001100001000001010000";
        ram[105] = "0b10111011110000111010101111111100";
        ram[106] = "0b10111011101101000110010110111000";
        ram[107] = "0b00111101110100110111100001101000";
        ram[108] = "0b10111101101000010100100011110000";
        ram[109] = "0b10111101010000111101001111001010";
        ram[110] = "0b00111101111010011110111001000110";
        ram[111] = "0b10111101101100011100111100101000";
        ram[112] = "0b00111100111000001011101011000000";
        ram[113] = "0b10111010000110010101111101100010";
        ram[114] = "0b00111011000101100011001100110011";
        ram[115] = "0b00111101101111100001101000111111";
        ram[116] = "0b00111011000111001101010100111000";
        ram[117] = "0b10111101111000110011010100001001";
        ram[118] = "0b00111110000000111110101111000000";
        ram[119] = "0b10111101110110011010010100100010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_15) {
meminst = new inference_conv2d_f3_3_3_15_ram("inference_conv2d_f3_3_3_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_15() {
    delete meminst;
}


};//endmodule
#endif
