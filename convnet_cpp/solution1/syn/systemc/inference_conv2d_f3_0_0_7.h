// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_7_H__
#define __inference_conv2d_f3_0_0_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_7_ram) {
        ram[0] = "0b10111100101011001101001101101000";
        ram[1] = "0b10111110000000100011101010110000";
        ram[2] = "0b00111100001100010001110011011000";
        ram[3] = "0b00111011100100010101100011000011";
        ram[4] = "0b00111101101101110100000010001110";
        ram[5] = "0b00111110000011001011101100111101";
        ram[6] = "0b00111110000100101000111010010011";
        ram[7] = "0b10111110010010011100100111010110";
        ram[8] = "0b10111101100100001001001010010111";
        ram[9] = "0b10111100110010000010001110111011";
        ram[10] = "0b00111101000101010010111010110110";
        ram[11] = "0b10111101110100111110100100100001";
        ram[12] = "0b10111100100111110111100101000010";
        ram[13] = "0b10111100010111111000010001011111";
        ram[14] = "0b00111100101111100100101000011101";
        ram[15] = "0b00111110000010101111001000001111";
        ram[16] = "0b00111100100001101101110011111110";
        ram[17] = "0b00111110001110011011001011000100";
        ram[18] = "0b00111101011011111110111011110110";
        ram[19] = "0b00111101101101010001000101110101";
        ram[20] = "0b00111101101000111100011011001001";
        ram[21] = "0b00111110001011110110110111111100";
        ram[22] = "0b00111010100101010011111001101011";
        ram[23] = "0b10111100011100101110100001010101";
        ram[24] = "0b10111100111101001110110111101001";
        ram[25] = "0b00111100100000110100110100100111";
        ram[26] = "0b00111110000111001000100111110100";
        ram[27] = "0b00111101111010101101000101001010";
        ram[28] = "0b10111101100100100111011100111110";
        ram[29] = "0b10111101101110100000011101001000";
        ram[30] = "0b00111011010101101110010011010100";
        ram[31] = "0b10111101100100000100001011001011";
        ram[32] = "0b10111101111100010010100100000010";
        ram[33] = "0b10111100100011010000111101111101";
        ram[34] = "0b10111100001011000111000101111000";
        ram[35] = "0b10111100111001001000101111010001";
        ram[36] = "0b10111101010111110001000100111101";
        ram[37] = "0b10111100000101101001100010010011";
        ram[38] = "0b10111011000010101100101101110110";
        ram[39] = "0b10111100010111111011010100000111";
        ram[40] = "0b00111001110100011000101110011011";
        ram[41] = "0b10111101110000000001101010110000";
        ram[42] = "0b00111101110101000101111000001011";
        ram[43] = "0b10111100011000010000110011110110";
        ram[44] = "0b00111110000001011100101100110110";
        ram[45] = "0b10111101110011110011001101000100";
        ram[46] = "0b00111101000100110011001011001000";
        ram[47] = "0b10111100010010001110100101111110";
        ram[48] = "0b10111101010100011101101010111110";
        ram[49] = "0b10111101100010001110001000011001";
        ram[50] = "0b00111101100100100100011101000101";
        ram[51] = "0b00111110000000010000000010100100";
        ram[52] = "0b00111100100111100110101010000100";
        ram[53] = "0b00111100110000001000000100101111";
        ram[54] = "0b00111101100011111011101011011001";
        ram[55] = "0b00111101110111010111100110001110";
        ram[56] = "0b10111101100101101110011010010111";
        ram[57] = "0b00111101100001010110000011100011";
        ram[58] = "0b10111100001011000000001001010010";
        ram[59] = "0b00111110001010011011000011101110";
        ram[60] = "0b00111101111110001001010100000111";
        ram[61] = "0b10111100101010010100100000101110";
        ram[62] = "0b00111100100010100100110010001010";
        ram[63] = "0b00111101011111000101000001001000";
        ram[64] = "0b10111101100111101001111010111100";
        ram[65] = "0b00111101011111110010110111111000";
        ram[66] = "0b00111101011000110111011111101111";
        ram[67] = "0b00111110001011011111010101001001";
        ram[68] = "0b00111011111010001011110100000011";
        ram[69] = "0b00111101110001110100101101101001";
        ram[70] = "0b00111110000011010011001110001111";
        ram[71] = "0b10111100101100000010001101111111";
        ram[72] = "0b10111101000101111100001011001010";
        ram[73] = "0b00111010111110000111010101110010";
        ram[74] = "0b10111101100100101110000010000101";
        ram[75] = "0b00111100001110010011000100001111";
        ram[76] = "0b10111100101100101000111011001001";
        ram[77] = "0b10111100111000010101111010001010";
        ram[78] = "0b00111100100001101111101100110001";
        ram[79] = "0b00111101100011100010110001111110";
        ram[80] = "0b00111100010101010100101110001100";
        ram[81] = "0b00111100110111011010111010011100";
        ram[82] = "0b00111100011001101100101100010000";
        ram[83] = "0b00111101101010110000100011000010";
        ram[84] = "0b10111101100100010111001010011111";
        ram[85] = "0b00111101101000110011010011100001";
        ram[86] = "0b10111101001110001000011111010001";
        ram[87] = "0b10111100101100010101011011110000";
        ram[88] = "0b10111101011101001100111000001000";
        ram[89] = "0b10111110001110101011011001001010";
        ram[90] = "0b00111100101001001101011000001110";
        ram[91] = "0b00111100011010000100010010001101";
        ram[92] = "0b10111101100001011111111011000000";
        ram[93] = "0b10111100010100111010011110110010";
        ram[94] = "0b10111101101010100111100000110110";
        ram[95] = "0b00111101000101110111100011011101";
        ram[96] = "0b00111110000110110101010001011100";
        ram[97] = "0b00111101100100110000001101100011";
        ram[98] = "0b10111101101111000111111101101010";
        ram[99] = "0b00111101100011010010001101110111";
        ram[100] = "0b10111100110111001111100101101011";
        ram[101] = "0b10111101001000111100010111011000";
        ram[102] = "0b10111101111001011111100111011111";
        ram[103] = "0b00111101011001010110010000111110";
        ram[104] = "0b10111101001101110000101010101001";
        ram[105] = "0b00111101100101011000011000000001";
        ram[106] = "0b10111110000101000001001111011011";
        ram[107] = "0b00111110001011110111011110101111";
        ram[108] = "0b10111110000001100111110100110101";
        ram[109] = "0b10111101000111111001001001010010";
        ram[110] = "0b00111101111011111011110110101101";
        ram[111] = "0b10111100001010111000011000101011";
        ram[112] = "0b10111101001001110101100101000000";
        ram[113] = "0b00111110000101001111011010011101";
        ram[114] = "0b00111101001100010011010000100000";
        ram[115] = "0b10111100100001100011000001100110";
        ram[116] = "0b00111101100011110011100000111111";
        ram[117] = "0b00111101100101100100111100101101";
        ram[118] = "0b00111010010101111111111011100011";
        ram[119] = "0b00111011110011100010101111011101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_7) {
meminst = new inference_conv2d_f3_0_0_7_ram("inference_conv2d_f3_0_0_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_7() {
    delete meminst;
}


};//endmodule
#endif
