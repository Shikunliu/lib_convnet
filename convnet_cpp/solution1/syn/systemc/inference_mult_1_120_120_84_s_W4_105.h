// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_105_H__
#define __inference_mult_1_120_120_84_s_W4_105_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_105_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_105_ram) {
        ram[0] = "0b00111101111010011110001000110111";
        ram[1] = "0b10111100100010110000000001000100";
        ram[2] = "0b00111101000110001110001000110100";
        ram[3] = "0b10111101010000001011100011011101";
        ram[4] = "0b00111101100101010010011110010101";
        ram[5] = "0b00111101001111000101010110100001";
        ram[6] = "0b10111100110001011101100100101000";
        ram[7] = "0b10111101100011101010111011100010";
        ram[8] = "0b00111011101001100010101101100011";
        ram[9] = "0b00111110000011111011011110100110";
        ram[10] = "0b10111110011101000010100111100001";
        ram[11] = "0b00111110001001110010110101011110";
        ram[12] = "0b10111100000111010001101010011000";
        ram[13] = "0b00111110001110001111011111011011";
        ram[14] = "0b10111100001000011011101010100101";
        ram[15] = "0b00111101110100001110111011010000";
        ram[16] = "0b00111011100110111001111010000010";
        ram[17] = "0b10111101010001010010001011001111";
        ram[18] = "0b10111101000010000110100010000100";
        ram[19] = "0b10111101011101110010101000111001";
        ram[20] = "0b00111110000011010110101101100110";
        ram[21] = "0b00111100001001100111100010100101";
        ram[22] = "0b10111101001000101000111100001100";
        ram[23] = "0b10111101010101110001001010111100";
        ram[24] = "0b00111101100100110010011100100100";
        ram[25] = "0b00111101011100110010000010100100";
        ram[26] = "0b00111110000010011000001110010100";
        ram[27] = "0b00111101000000001011001001000010";
        ram[28] = "0b00111010000010110110010110001011";
        ram[29] = "0b10111101100110111100001001110110";
        ram[30] = "0b10111110001001100100111110011000";
        ram[31] = "0b00111100010100011000100111001011";
        ram[32] = "0b00111110001100000011111011101010";
        ram[33] = "0b10111101001101100010000100111111";
        ram[34] = "0b00111101011100101101010000011000";
        ram[35] = "0b00111110000101010100000100010000";
        ram[36] = "0b10111101101011111110011110010001";
        ram[37] = "0b10111110001110111101100001111011";
        ram[38] = "0b00111101110010001100001011100111";
        ram[39] = "0b00111101100010001111110011111111";
        ram[40] = "0b00111100010001011111100010011101";
        ram[41] = "0b00111101011101110001101101010101";
        ram[42] = "0b10111101100010010100000010111100";
        ram[43] = "0b10111101101101101010110000000111";
        ram[44] = "0b00111101100000000101100001011000";
        ram[45] = "0b10111101111100001010110101000111";
        ram[46] = "0b10111110010011101111001001000001";
        ram[47] = "0b10111101000110101111110110010111";
        ram[48] = "0b00111100100000100000011001101010";
        ram[49] = "0b00111110001100000011100101101001";
        ram[50] = "0b00111110000101000110011010110010";
        ram[51] = "0b10111101011001100110111101101011";
        ram[52] = "0b10111110010101101101011100011111";
        ram[53] = "0b00111101111111111000111111001101";
        ram[54] = "0b10111101111110100100100000110000";
        ram[55] = "0b10111101111111011000100011000010";
        ram[56] = "0b00111101010100111000111000000010";
        ram[57] = "0b10111101110111000011101111010110";
        ram[58] = "0b00111100101000111010011000101101";
        ram[59] = "0b00111100010001110101000101100011";
        ram[60] = "0b10111101101010011100100110010011";
        ram[61] = "0b00111010110100000100010101010010";
        ram[62] = "0b10111101100001110000001100110111";
        ram[63] = "0b10111100101000111001010101100110";
        ram[64] = "0b10111101101111000111110010010101";
        ram[65] = "0b00111011010000111001001001100110";
        ram[66] = "0b10111101011000011001101011110000";
        ram[67] = "0b10111110010001010011001010100101";
        ram[68] = "0b10111100110000110000110011000101";
        ram[69] = "0b00111100000000110001011101001100";
        ram[70] = "0b00111101110001111101110000101010";
        ram[71] = "0b10111100000001011011110101111001";
        ram[72] = "0b10111101111101111111101101101010";
        ram[73] = "0b00111101101111100101001010001110";
        ram[74] = "0b10111110001010111000010010011001";
        ram[75] = "0b00111101101010111001100011111110";
        ram[76] = "0b00111101101100111010001100100011";
        ram[77] = "0b10111100011110010111100010010010";
        ram[78] = "0b00111101010101000001010011011011";
        ram[79] = "0b00111110001001110010110101011110";
        ram[80] = "0b10111110000111011100000111101000";
        ram[81] = "0b00111101011110010101001011010010";
        ram[82] = "0b00111110000001011000101110000010";
        ram[83] = "0b10111110000010000010111110010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_105) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_105_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_105) {
meminst = new inference_mult_1_120_120_84_s_W4_105_ram("inference_mult_1_120_120_84_s_W4_105_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_105() {
    delete meminst;
}


};//endmodule
#endif
