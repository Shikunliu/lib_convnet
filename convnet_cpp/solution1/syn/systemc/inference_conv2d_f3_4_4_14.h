// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_14_H__
#define __inference_conv2d_f3_4_4_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_14_ram) {
        ram[0] = "0b10111100011000000001001010001111";
        ram[1] = "0b10111110000111110010111111011100";
        ram[2] = "0b10111100011011001010111101010110";
        ram[3] = "0b00111100111000010111010110011100";
        ram[4] = "0b00111100111010101011101100101010";
        ram[5] = "0b00111101110100001001001010001010";
        ram[6] = "0b00111101001000011110011010001010";
        ram[7] = "0b00111011100010111011011100101110";
        ram[8] = "0b00111101001110001110011100000111";
        ram[9] = "0b00111110010000010011100010111101";
        ram[10] = "0b00111101101111010111110000111010";
        ram[11] = "0b00111101110000111010010110001100";
        ram[12] = "0b00111110001101101000011110110001";
        ram[13] = "0b00111101101110010000000010101010";
        ram[14] = "0b10111101010101011010110110110001";
        ram[15] = "0b00111101001110100011100000100101";
        ram[16] = "0b10111101100100011010101101110100";
        ram[17] = "0b10111110001110010011101001110001";
        ram[18] = "0b00111011110110100001101001010011";
        ram[19] = "0b10111101100001110100000101001010";
        ram[20] = "0b10111110001110010010001101100000";
        ram[21] = "0b00111101011111111110101111011110";
        ram[22] = "0b10111110000100110000000111101011";
        ram[23] = "0b00111101100000100000011000011010";
        ram[24] = "0b10111101111110000101010110010111";
        ram[25] = "0b10111101101011000001101001111101";
        ram[26] = "0b00111110000100011100100010101000";
        ram[27] = "0b00111101010001000011001001011111";
        ram[28] = "0b10111100000000001111010110010100";
        ram[29] = "0b10111101010011010000101110110111";
        ram[30] = "0b00111101000010110011001000101101";
        ram[31] = "0b10111101110100111011101001110111";
        ram[32] = "0b10111101000100011111001000100000";
        ram[33] = "0b00111100101110111110000110001101";
        ram[34] = "0b10111101010011001110100110111110";
        ram[35] = "0b00111101001000100000001001101110";
        ram[36] = "0b00111101011010001101000100101010";
        ram[37] = "0b00111101001010110000110110110000";
        ram[38] = "0b10111101101100011101000101011100";
        ram[39] = "0b00111011011101000101000110100001";
        ram[40] = "0b10111100100110000011110100001110";
        ram[41] = "0b10111101110110010010111110110010";
        ram[42] = "0b00111011001011110111011010100110";
        ram[43] = "0b10111101110100101100110011110111";
        ram[44] = "0b10111101011001001000101101100101";
        ram[45] = "0b10111101110101110011011111011010";
        ram[46] = "0b00111101101101101010111101100010";
        ram[47] = "0b10111110000101100011010010011000";
        ram[48] = "0b10111100001001010111110111010011";
        ram[49] = "0b00111101000011011011011111001001";
        ram[50] = "0b10111100110000110010100110110110";
        ram[51] = "0b00111101001011111000111000010010";
        ram[52] = "0b10111100000110000111100111010100";
        ram[53] = "0b10111101101001110001110010111111";
        ram[54] = "0b00111101011111110000100100001111";
        ram[55] = "0b10111100111101011110110111000011";
        ram[56] = "0b10111110001000110010010011001000";
        ram[57] = "0b10111110010010100000000111101111";
        ram[58] = "0b10111011010111011010001111100000";
        ram[59] = "0b00111100110010011001100011010000";
        ram[60] = "0b10111110000101111100010110101100";
        ram[61] = "0b00111100101000010010100101000101";
        ram[62] = "0b00111110010100110010101011010000";
        ram[63] = "0b00111110000011111001001110111100";
        ram[64] = "0b10111100111010011101011010010011";
        ram[65] = "0b00111110000011010000100011010101";
        ram[66] = "0b00111110001010011011110010111010";
        ram[67] = "0b00111101000101100111010100000111";
        ram[68] = "0b00111101101111001110111111100000";
        ram[69] = "0b10111011111010101111111111101001";
        ram[70] = "0b00111101110110110001011101001000";
        ram[71] = "0b10111100100011001111111111111000";
        ram[72] = "0b00111011111001100000011110110001";
        ram[73] = "0b10111110000111101011011110001001";
        ram[74] = "0b00111101100011100110111111010000";
        ram[75] = "0b00111101001010000111100001110101";
        ram[76] = "0b10111101101000111010110111010101";
        ram[77] = "0b00111110010001110100110001001101";
        ram[78] = "0b10111101110101110001010111000110";
        ram[79] = "0b00111110001100010101000010011000";
        ram[80] = "0b00111010011001101111111000011110";
        ram[81] = "0b00111100100111001011111010110010";
        ram[82] = "0b10111101100101001010100011000001";
        ram[83] = "0b00111101001110110001010111010000";
        ram[84] = "0b00111101100000010010000110000011";
        ram[85] = "0b00111011010100111110010110011011";
        ram[86] = "0b10111101010011010110100010111001";
        ram[87] = "0b00111110000101010101111010101111";
        ram[88] = "0b00111101001100101101111011001010";
        ram[89] = "0b00111101110110001111100010100101";
        ram[90] = "0b00111100100111100010111111001100";
        ram[91] = "0b10111100001010110011010100111000";
        ram[92] = "0b00111101010110111011100010101000";
        ram[93] = "0b10111101100101001011101100110110";
        ram[94] = "0b00111101000010011010100100010001";
        ram[95] = "0b10111101011101111010100111110000";
        ram[96] = "0b10111110001001001000100011000110";
        ram[97] = "0b10111100111101110011011011001110";
        ram[98] = "0b00111110000010100101111001111000";
        ram[99] = "0b00111101010011110010111000100001";
        ram[100] = "0b10111101110110111001010100011100";
        ram[101] = "0b10111100011101010001100100011100";
        ram[102] = "0b00111101010100011100100100100000";
        ram[103] = "0b00111110000110111001111011001111";
        ram[104] = "0b00111110000110111011001001111001";
        ram[105] = "0b10111101000001011000011011011000";
        ram[106] = "0b10111110000110000110010000000010";
        ram[107] = "0b00111101001010000001001011011001";
        ram[108] = "0b00111011001011111101000010010011";
        ram[109] = "0b00111100111000011001111001001011";
        ram[110] = "0b10111101011000010011000110001110";
        ram[111] = "0b10111001001100100010110101011100";
        ram[112] = "0b00111110001111111011011011011101";
        ram[113] = "0b00111011110111111111111100000100";
        ram[114] = "0b10111101101001010010100111010110";
        ram[115] = "0b00111100101001011101010010100110";
        ram[116] = "0b00111101010110010110011111100110";
        ram[117] = "0b10111101110011000001001110010010";
        ram[118] = "0b00111100110110101111110100010001";
        ram[119] = "0b10111101011001001100011000111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_14) {
meminst = new inference_conv2d_f3_4_4_14_ram("inference_conv2d_f3_4_4_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_14() {
    delete meminst;
}


};//endmodule
#endif
