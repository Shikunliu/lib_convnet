// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_8_H__
#define __inference_conv2d_f3_1_1_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_8_ram) {
        ram[0] = "0b00111100101101110001000001101101";
        ram[1] = "0b00111101011000100010010111100000";
        ram[2] = "0b10111100111110101111100010001111";
        ram[3] = "0b10111101110001110110111000010000";
        ram[4] = "0b10111101001000101000111111001000";
        ram[5] = "0b10111110000011000101001101101101";
        ram[6] = "0b10111100111101000111011101101011";
        ram[7] = "0b10111101001100001101000000010111";
        ram[8] = "0b10111110011101110111011010000001";
        ram[9] = "0b00111110001110101011110010010100";
        ram[10] = "0b10111101101110111101011110001010";
        ram[11] = "0b10111101000111110000001001011001";
        ram[12] = "0b10111100000101101011111100011111";
        ram[13] = "0b00111101011110101011101010010110";
        ram[14] = "0b00111100010101101001101010101100";
        ram[15] = "0b00111110010000110100100100111000";
        ram[16] = "0b00111101110111001010011111010110";
        ram[17] = "0b00111101010011010011011010011010";
        ram[18] = "0b10111110000001011010101000101110";
        ram[19] = "0b10111100101000000110101001101110";
        ram[20] = "0b00111101010110100100011100100100";
        ram[21] = "0b10111101010001111001010111011100";
        ram[22] = "0b10111101100110110101100111111001";
        ram[23] = "0b00111110010100011100110100011100";
        ram[24] = "0b00111101001111001000000001101001";
        ram[25] = "0b00111100110101011000111101001001";
        ram[26] = "0b00111101000000110011000100101000";
        ram[27] = "0b00111110000111100000110010011110";
        ram[28] = "0b00111110001111011000110010110000";
        ram[29] = "0b00111101010011110011110001100011";
        ram[30] = "0b00111101100101101001101110011101";
        ram[31] = "0b10111110001111100000001110110100";
        ram[32] = "0b00111110001110100111000101011000";
        ram[33] = "0b10111101001000100011000011111101";
        ram[34] = "0b00111101101101110001000001000101";
        ram[35] = "0b00111100010100000110111100011001";
        ram[36] = "0b00111101111100110111100101110100";
        ram[37] = "0b10111101000000011110110111000110";
        ram[38] = "0b10111100111100111100010010001000";
        ram[39] = "0b00111110001111001111011000111000";
        ram[40] = "0b00111011100100110011101100000110";
        ram[41] = "0b00111101111100110001101000001001";
        ram[42] = "0b00111110001011111010001110111010";
        ram[43] = "0b10111110010101000000100001010011";
        ram[44] = "0b00111101001110110111011100000100";
        ram[45] = "0b00111010101110001000100111110101";
        ram[46] = "0b10111101101010010001000001110010";
        ram[47] = "0b10111101100010101100000011101110";
        ram[48] = "0b00111101101011001001111110011011";
        ram[49] = "0b00111100111010010111110100111100";
        ram[50] = "0b10111101011110100001000111011111";
        ram[51] = "0b10111011101111110011010001011110";
        ram[52] = "0b10111101110001010001001101001010";
        ram[53] = "0b10111110000011010011100110010111";
        ram[54] = "0b00111101110010000000100001101010";
        ram[55] = "0b00111101110010010011100000100011";
        ram[56] = "0b00111101100000010001000110000101";
        ram[57] = "0b00111110000100110100001000100100";
        ram[58] = "0b10111101010110001000010111101110";
        ram[59] = "0b10111101101001111011011000100111";
        ram[60] = "0b00111101110001011000010010001001";
        ram[61] = "0b00111100100011110010011010101111";
        ram[62] = "0b00111110010001100011011100110111";
        ram[63] = "0b00111101110011100001000101010110";
        ram[64] = "0b00111101010000001110010001111100";
        ram[65] = "0b00111110001000111111011011000010";
        ram[66] = "0b10111110001100000110111011100011";
        ram[67] = "0b10111101101000000111111000100101";
        ram[68] = "0b10111101101111110110111010010000";
        ram[69] = "0b10111101100100101011001010001010";
        ram[70] = "0b10111100110110111000001001110010";
        ram[71] = "0b10111101101001101111100101110110";
        ram[72] = "0b00111101001110101110010010001000";
        ram[73] = "0b00111101101010110000011100110000";
        ram[74] = "0b10111101110000000101110010100100";
        ram[75] = "0b00111101000011000111000001010001";
        ram[76] = "0b10111101011011110011010000110110";
        ram[77] = "0b00111101101101111100101011010000";
        ram[78] = "0b00111100111111100011001011010110";
        ram[79] = "0b10111101101000101001001000110001";
        ram[80] = "0b10111101111011101111010001011010";
        ram[81] = "0b10111101101111000110101100010011";
        ram[82] = "0b10111110001100100100101011110001";
        ram[83] = "0b00111101000011010001110100111010";
        ram[84] = "0b10111101001000101000101111001011";
        ram[85] = "0b00111100110111000100100110101101";
        ram[86] = "0b10111110000001101110001110110100";
        ram[87] = "0b10111010110010011110110010011110";
        ram[88] = "0b10111101001100011101011101100011";
        ram[89] = "0b00111101010011101110000111001011";
        ram[90] = "0b00111101111101000101101111110010";
        ram[91] = "0b10111110000111001111011101000100";
        ram[92] = "0b00111100010111101000110101010100";
        ram[93] = "0b10111110000111011110000101011101";
        ram[94] = "0b00111101111000010101101110011010";
        ram[95] = "0b10111110100011100101000000011110";
        ram[96] = "0b10111101101101010010011001100000";
        ram[97] = "0b00111101010110101101011101101100";
        ram[98] = "0b10111100101101011100000110000011";
        ram[99] = "0b00111100101011011011111101010110";
        ram[100] = "0b00111101110011100011110101100000";
        ram[101] = "0b00111011100111111000101111001100";
        ram[102] = "0b00111101110101101010111100000100";
        ram[103] = "0b00111010111100101101111001011001";
        ram[104] = "0b10111101110011111110100000100101";
        ram[105] = "0b00111110100010000111101011110010";
        ram[106] = "0b00111100011000110010100110011011";
        ram[107] = "0b10111101100110101110110011101011";
        ram[108] = "0b00111101101111010000000010011010";
        ram[109] = "0b10111100011101100111000010100000";
        ram[110] = "0b00111101001110000010000010001000";
        ram[111] = "0b00111101010000010001000111111110";
        ram[112] = "0b10111101011101010010010100101011";
        ram[113] = "0b00111110011001010010001111110110";
        ram[114] = "0b10111101001001111010111010011011";
        ram[115] = "0b00111101010101111110101101011111";
        ram[116] = "0b00111101101011101100011101111001";
        ram[117] = "0b10111101001111011110011101010111";
        ram[118] = "0b00111101101101001111010101000000";
        ram[119] = "0b00111101101100000100011101110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_8) {
meminst = new inference_conv2d_f3_1_1_8_ram("inference_conv2d_f3_1_1_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_8() {
    delete meminst;
}


};//endmodule
#endif
