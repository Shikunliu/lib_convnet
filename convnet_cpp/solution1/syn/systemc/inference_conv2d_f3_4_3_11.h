// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_11_H__
#define __inference_conv2d_f3_4_3_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_11_ram) {
        ram[0] = "0b00111101101011010001111000010001";
        ram[1] = "0b10111011110001010001100100100100";
        ram[2] = "0b00111110000010010101011110001010";
        ram[3] = "0b00111101011010101011001011000111";
        ram[4] = "0b00111011010011100001111000000110";
        ram[5] = "0b00111101101100111111000000011010";
        ram[6] = "0b00111110001101111000010101110011";
        ram[7] = "0b00111101000110101111001110100001";
        ram[8] = "0b00111110000000010111000110011111";
        ram[9] = "0b00111101101001101000011101010011";
        ram[10] = "0b10111101001001101011000111100110";
        ram[11] = "0b10111100110010010101100001101110";
        ram[12] = "0b10111101101101000110001000100010";
        ram[13] = "0b00111110000110000111100110000001";
        ram[14] = "0b00111100111011010110100111000110";
        ram[15] = "0b10111101100001110011001011101101";
        ram[16] = "0b00111101011100101011111101110000";
        ram[17] = "0b10111101101111111100011000011110";
        ram[18] = "0b10111100111001000010101000010110";
        ram[19] = "0b00111110000010111101011100101100";
        ram[20] = "0b00111110000111001010101110000010";
        ram[21] = "0b00111100111000011101011001001001";
        ram[22] = "0b00111101001010101101110101011001";
        ram[23] = "0b10111110000000100000111100101100";
        ram[24] = "0b00111100001111101000010111100010";
        ram[25] = "0b10111101011011000101000001110000";
        ram[26] = "0b00111110000011001000001001011010";
        ram[27] = "0b00111101101110100101100010100111";
        ram[28] = "0b00111101110111100010010011111111";
        ram[29] = "0b10111101110000010011010101111101";
        ram[30] = "0b10111100111110111000111111111001";
        ram[31] = "0b00111100010111011000111111111110";
        ram[32] = "0b00111101001101110010111111000111";
        ram[33] = "0b10111101100011000000011000011000";
        ram[34] = "0b00111010101010101100011000010010";
        ram[35] = "0b10111101000111000101001000101011";
        ram[36] = "0b10111100110110000110100110111001";
        ram[37] = "0b00111101111000011110110001001110";
        ram[38] = "0b00111100100011100000011110010101";
        ram[39] = "0b10111101100100110000111100111100";
        ram[40] = "0b10111110011000010011110110111000";
        ram[41] = "0b00111101010100000010010011110110";
        ram[42] = "0b00111110001101101110110001011011";
        ram[43] = "0b00111101011000001101000100010110";
        ram[44] = "0b10111101011001100011010010110011";
        ram[45] = "0b10111100101001010110100101111100";
        ram[46] = "0b00111101100100110101011011011010";
        ram[47] = "0b10111101100101001000011010101101";
        ram[48] = "0b00111100100101010110011110100110";
        ram[49] = "0b00111101000001000010110111000010";
        ram[50] = "0b00111110001110001111000100001011";
        ram[51] = "0b00111100100001001101010001000101";
        ram[52] = "0b00111110000011100111111100101100";
        ram[53] = "0b00111011011011111010001000111010";
        ram[54] = "0b10111101111100111110110111011001";
        ram[55] = "0b00111110000000010000110011110110";
        ram[56] = "0b10111101010101001111000101011110";
        ram[57] = "0b10111100110010000101011000010000";
        ram[58] = "0b00111101010110011000001111100101";
        ram[59] = "0b10111101110001111010001001001001";
        ram[60] = "0b10111100100001001110011010111010";
        ram[61] = "0b00111101010110001001101001111011";
        ram[62] = "0b00111101010100010000001100101000";
        ram[63] = "0b10111101110011001000011010110100";
        ram[64] = "0b10111110001000110100011100011111";
        ram[65] = "0b00111101101001111001001100100010";
        ram[66] = "0b10111100000100001110101000011110";
        ram[67] = "0b00111101000010110101010011111110";
        ram[68] = "0b00111100100110100100101100111011";
        ram[69] = "0b10111100110001110010011101110001";
        ram[70] = "0b00111101101110100110100001111100";
        ram[71] = "0b10111110000110011000111110100011";
        ram[72] = "0b00111101110111000100000100010100";
        ram[73] = "0b00111110000110111000000010101010";
        ram[74] = "0b00111101111001000100100111011100";
        ram[75] = "0b10111100000100001011000010100111";
        ram[76] = "0b10111101110000010100111111001110";
        ram[77] = "0b00111110001000101001100000000011";
        ram[78] = "0b10111101001100111110000011110011";
        ram[79] = "0b00111101011001100001111101101001";
        ram[80] = "0b10111101101011101111011110110101";
        ram[81] = "0b00111110000001000101010000010101";
        ram[82] = "0b00111101110110101001010000110110";
        ram[83] = "0b10111101101100111100101000111111";
        ram[84] = "0b00111110000100110010110111110101";
        ram[85] = "0b00111101101000011111101010000100";
        ram[86] = "0b10111101010001011101100000011100";
        ram[87] = "0b10111100110110111111011101111000";
        ram[88] = "0b00111110000111010111000000011110";
        ram[89] = "0b10111101101010000001010111111110";
        ram[90] = "0b00111101100101110010000101000010";
        ram[91] = "0b00111101000100001111000000101101";
        ram[92] = "0b00111101100101111100111001101110";
        ram[93] = "0b00111101111101001010111011001001";
        ram[94] = "0b10111101111110111000111111011110";
        ram[95] = "0b00111101011100100100001110011010";
        ram[96] = "0b10111110001010001010100101111010";
        ram[97] = "0b00111101001001001001100100111100";
        ram[98] = "0b00111101100100011100111111110001";
        ram[99] = "0b10111100000110011010010011010111";
        ram[100] = "0b00111011101000010100011001001100";
        ram[101] = "0b00111101101111001110111001101000";
        ram[102] = "0b00111110001000010000100101001010";
        ram[103] = "0b00111100110100110111110101010110";
        ram[104] = "0b10111101010110111100011010011011";
        ram[105] = "0b00111101101001110101111000111011";
        ram[106] = "0b10111100110010110111101110010100";
        ram[107] = "0b00111110000101000101001101001100";
        ram[108] = "0b10111110010001100100111101010101";
        ram[109] = "0b00111101110110011100111110011010";
        ram[110] = "0b00111110000010111100100111001101";
        ram[111] = "0b00111011100001110111110101001101";
        ram[112] = "0b10111101010110100101011100101111";
        ram[113] = "0b00111100101001110101111001001001";
        ram[114] = "0b00111101110001011100000001001110";
        ram[115] = "0b10111101010110111111100110010000";
        ram[116] = "0b10111101101110100101000100110101";
        ram[117] = "0b00111101110000010001110000001111";
        ram[118] = "0b00111011100001110000001000111101";
        ram[119] = "0b10111011000101001101110011000110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_11) {
meminst = new inference_conv2d_f3_4_3_11_ram("inference_conv2d_f3_4_3_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_11() {
    delete meminst;
}


};//endmodule
#endif
