// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_14_H__
#define __inference_conv2d_f3_0_3_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_14_ram) {
        ram[0] = "0b00111110000110100110110101101010";
        ram[1] = "0b00111101100101011110110010000001";
        ram[2] = "0b00111101001000110100000101001110";
        ram[3] = "0b00111101011111100001001010001010";
        ram[4] = "0b10111110001110010010010100110101";
        ram[5] = "0b10111101011011000100111011011110";
        ram[6] = "0b10111100101000011101111010101101";
        ram[7] = "0b00111110001100000101111000011100";
        ram[8] = "0b00111110011000100101001101010100";
        ram[9] = "0b10111101101010010100010011111011";
        ram[10] = "0b00111110011011010110110111000010";
        ram[11] = "0b10111011110101010010100110101000";
        ram[12] = "0b00111101001100111110000001101101";
        ram[13] = "0b00111110010100000100000101000110";
        ram[14] = "0b10111110001111101100100000001100";
        ram[15] = "0b00111101011110101011000101110111";
        ram[16] = "0b00111101101000101011101001001101";
        ram[17] = "0b00111101010011111100110110011110";
        ram[18] = "0b00111100100101110011000001101000";
        ram[19] = "0b10111110100100101100111101110100";
        ram[20] = "0b10111011011001111110111001100110";
        ram[21] = "0b10111101010001110001010011000111";
        ram[22] = "0b00111110000001110110100011100000";
        ram[23] = "0b10111100111110001000110000000011";
        ram[24] = "0b00111101001111110101011001110010";
        ram[25] = "0b10111101101000010100010001111011";
        ram[26] = "0b10111110000001010111111010101010";
        ram[27] = "0b00111101100110011011110111101111";
        ram[28] = "0b10111110001100010000111111011000";
        ram[29] = "0b10111110000110010110001001001010";
        ram[30] = "0b00111110010100110101111111000100";
        ram[31] = "0b00111101010111101010000001101010";
        ram[32] = "0b00111101101001000011001111111111";
        ram[33] = "0b00111100000110100001100010010000";
        ram[34] = "0b00111110000100101011101100100011";
        ram[35] = "0b00111110001011111101000011010000";
        ram[36] = "0b10111101011101100101010101000001";
        ram[37] = "0b10111101110101000111000101110001";
        ram[38] = "0b00111110000101001101111111001110";
        ram[39] = "0b00111100111110110011101100001010";
        ram[40] = "0b00111110000101011000011001000100";
        ram[41] = "0b10111110000111110111011100101001";
        ram[42] = "0b10111101001001111100111001100000";
        ram[43] = "0b10111011100010011000011000111100";
        ram[44] = "0b10111110000110110001111000011001";
        ram[45] = "0b00111101010011011101110111110100";
        ram[46] = "0b00111100101110101001001101000100";
        ram[47] = "0b00111101110110000001100111010010";
        ram[48] = "0b10111101101011010100101111111110";
        ram[49] = "0b10111101111001010111011001000111";
        ram[50] = "0b00111110010010001010110011100010";
        ram[51] = "0b10111101001101000000101011100100";
        ram[52] = "0b10111101100001110000011111010100";
        ram[53] = "0b10111101101010110111101010010101";
        ram[54] = "0b10111101111010000110001011110110";
        ram[55] = "0b10111101100101001001011100010110";
        ram[56] = "0b10111100011011111001000110001000";
        ram[57] = "0b00111110000100101100000000011110";
        ram[58] = "0b10111101100001010100100111111001";
        ram[59] = "0b10111101001000001111010100001101";
        ram[60] = "0b10111110001110011000100010010000";
        ram[61] = "0b10111101111101010001011100011110";
        ram[62] = "0b00111100000001110101111001101110";
        ram[63] = "0b10111100101111001110000111010011";
        ram[64] = "0b10111101110010101111011110011101";
        ram[65] = "0b10111110000000111001000011001001";
        ram[66] = "0b10111100011111011010001011000011";
        ram[67] = "0b10111110011101001110001001101101";
        ram[68] = "0b10111101111010001011110110101001";
        ram[69] = "0b10111110000111111110111110111111";
        ram[70] = "0b00111101100100101111110100110011";
        ram[71] = "0b00111101100111001100100000111101";
        ram[72] = "0b00111101110110110100001111011001";
        ram[73] = "0b10111011101110100101110011011110";
        ram[74] = "0b10111100001011101010011000000110";
        ram[75] = "0b10111110000010011100010011011011";
        ram[76] = "0b10111101000100101010111001110011";
        ram[77] = "0b10111101000111101110110011000000";
        ram[78] = "0b00111101100000110001111101101111";
        ram[79] = "0b00111101100010001100001100011101";
        ram[80] = "0b10111100110111011001011110001011";
        ram[81] = "0b00111100011110010011110010010111";
        ram[82] = "0b10111101101011011100100111101101";
        ram[83] = "0b10111100110111000100111100100001";
        ram[84] = "0b00111110000100100100011000111001";
        ram[85] = "0b00111101001010111011101110100101";
        ram[86] = "0b00111110010000101000100000000101";
        ram[87] = "0b10111110100011111001001011110011";
        ram[88] = "0b00111101001100111011110100010110";
        ram[89] = "0b00111010000010001000000001010011";
        ram[90] = "0b10111101010100010100111100101101";
        ram[91] = "0b00111101000100110010100100000111";
        ram[92] = "0b10111110000000010111001111111011";
        ram[93] = "0b10111101010000101011111110011000";
        ram[94] = "0b00111101100010000111010100110100";
        ram[95] = "0b00111101011100011001111100010100";
        ram[96] = "0b00111110001100111100010010110001";
        ram[97] = "0b10111110010000110111111001101111";
        ram[98] = "0b00111101011101110010101101100000";
        ram[99] = "0b00111110000111101111001101001101";
        ram[100] = "0b10111101001101110100000110000000";
        ram[101] = "0b10111110001010001010000011010011";
        ram[102] = "0b00111101101111010111000010001001";
        ram[103] = "0b10111110000111011001010101010111";
        ram[104] = "0b00111101100111010111111111001011";
        ram[105] = "0b10111101110101100101110111000000";
        ram[106] = "0b00111101011101100011010011011011";
        ram[107] = "0b00111100110010001001100010001011";
        ram[108] = "0b00111101110101010110111010101101";
        ram[109] = "0b10111100111001000000010011000010";
        ram[110] = "0b00111100001101100111010000110000";
        ram[111] = "0b10111100111110101000110100101111";
        ram[112] = "0b00111110011101111100001100001101";
        ram[113] = "0b00111101111010100000000000011001";
        ram[114] = "0b10111101000111000000111010001001";
        ram[115] = "0b10111100111011100111101100111110";
        ram[116] = "0b00111101101001101011111111110011";
        ram[117] = "0b10111101100101101011000111100110";
        ram[118] = "0b10111101110000111010101110010100";
        ram[119] = "0b00111100111101110001110010010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_14) {
meminst = new inference_conv2d_f3_0_3_14_ram("inference_conv2d_f3_0_3_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_14() {
    delete meminst;
}


};//endmodule
#endif
