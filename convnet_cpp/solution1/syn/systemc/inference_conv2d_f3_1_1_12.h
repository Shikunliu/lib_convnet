// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_12_H__
#define __inference_conv2d_f3_1_1_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_12_ram) {
        ram[0] = "0b00111101100001101011111100000001";
        ram[1] = "0b00111101101010001110011100101111";
        ram[2] = "0b00111110000000101110011011101011";
        ram[3] = "0b00111110000011100110100010100001";
        ram[4] = "0b00111110000011000101000100010001";
        ram[5] = "0b00111101011110010100011001011000";
        ram[6] = "0b00111101010010010011001101101011";
        ram[7] = "0b10111101010110010101011100111010";
        ram[8] = "0b00111101100001100000001000011011";
        ram[9] = "0b00111110010101011011001111100001";
        ram[10] = "0b00111100001001110001011011000101";
        ram[11] = "0b10111101101010111001111010100111";
        ram[12] = "0b10111110000101000000010100101101";
        ram[13] = "0b10111110010011110011000000011111";
        ram[14] = "0b10111011101000101011110000101101";
        ram[15] = "0b00111110000011000100011101011110";
        ram[16] = "0b00111101010101101100011100111100";
        ram[17] = "0b00111011001101001110101010000011";
        ram[18] = "0b10111101101100001010110010011000";
        ram[19] = "0b00111101101111000111111001011110";
        ram[20] = "0b00111101111001111001101000101000";
        ram[21] = "0b10111101111101100001000000101000";
        ram[22] = "0b00111101000010100000111100110011";
        ram[23] = "0b00111101000010111001111001001001";
        ram[24] = "0b00111110000101100111111101001110";
        ram[25] = "0b10111101101000011101000101011100";
        ram[26] = "0b10111100011001101000110000100110";
        ram[27] = "0b00111110000111101100100110011111";
        ram[28] = "0b10111101011100010000001110101110";
        ram[29] = "0b10111101000001000011111010001001";
        ram[30] = "0b10111100100010101001011101101000";
        ram[31] = "0b00111101101000110001011000011010";
        ram[32] = "0b00111100010001010110101101000100";
        ram[33] = "0b00111101101011001001110010101100";
        ram[34] = "0b00111110001000001001101100110000";
        ram[35] = "0b00111100000110100101101000001001";
        ram[36] = "0b00111100110001110001000001100000";
        ram[37] = "0b00111101011011001010101000110010";
        ram[38] = "0b00111101100001101011000000111000";
        ram[39] = "0b10111101001011111000111001001000";
        ram[40] = "0b10111110000010011100010100011110";
        ram[41] = "0b00111101111010000001011001101010";
        ram[42] = "0b00111100110110011111101110111111";
        ram[43] = "0b10111101011101101111000001110010";
        ram[44] = "0b00111101110000001100011001110001";
        ram[45] = "0b00111101001100101101111110100001";
        ram[46] = "0b00111100000100000001000001100100";
        ram[47] = "0b10111110010010011101011000101000";
        ram[48] = "0b10111101110000110111111011101000";
        ram[49] = "0b10111100010011100011010010101100";
        ram[50] = "0b10111101110001100110000110100001";
        ram[51] = "0b00111100101010100110110000011010";
        ram[52] = "0b10111101000000010101100000111111";
        ram[53] = "0b10111101110100001110001101000111";
        ram[54] = "0b00111100100100111100100101000000";
        ram[55] = "0b00111101111010101010010010111010";
        ram[56] = "0b00111101110111010000001110010111";
        ram[57] = "0b10111101011011010110001001010100";
        ram[58] = "0b10111101101111110110011101100001";
        ram[59] = "0b10111101001001000001111010101000";
        ram[60] = "0b00111101011000101100101110100111";
        ram[61] = "0b10111010111001100100100100100000";
        ram[62] = "0b00111101000010100101000010000110";
        ram[63] = "0b10111110000111110111101111100001";
        ram[64] = "0b00111101100011010100101100110101";
        ram[65] = "0b00111101011011100011101101000111";
        ram[66] = "0b00111101100000000110101100111000";
        ram[67] = "0b10111100000010100011100100110100";
        ram[68] = "0b00111101100001001000000011110110";
        ram[69] = "0b10111110000000101101100110001100";
        ram[70] = "0b00111110000000011111000100000110";
        ram[71] = "0b00111101110001110110010010101110";
        ram[72] = "0b00111110010110101110001011011010";
        ram[73] = "0b10111100010011111101010100101010";
        ram[74] = "0b00111100000100111001010001111101";
        ram[75] = "0b00111110000101110110110001001000";
        ram[76] = "0b00111101111010101101110001001101";
        ram[77] = "0b00111100010100101010111000100011";
        ram[78] = "0b10111101010010001011110010000010";
        ram[79] = "0b00111010001010001011101000000100";
        ram[80] = "0b10111101111000100111011111000100";
        ram[81] = "0b00111101110111111011011010011010";
        ram[82] = "0b00111101101010100100111101010001";
        ram[83] = "0b00111110001000011000100010110001";
        ram[84] = "0b00111101110111011010101011010110";
        ram[85] = "0b10111110001111011010100010111101";
        ram[86] = "0b00111101110001011010101110011001";
        ram[87] = "0b10111101111111110011100111010010";
        ram[88] = "0b00111100101111111111101011000010";
        ram[89] = "0b10111101100110011100001111011100";
        ram[90] = "0b10111101101101111001100000101010";
        ram[91] = "0b10111110000110111010000011101000";
        ram[92] = "0b00111110000101000111001011000001";
        ram[93] = "0b00111110000001011001010001101100";
        ram[94] = "0b00111110000100110111101100000111";
        ram[95] = "0b00111110000000101011101010011101";
        ram[96] = "0b10111011101101101100100010101001";
        ram[97] = "0b00111101110010010010101010101001";
        ram[98] = "0b10111100100000011000011110111111";
        ram[99] = "0b00111110000010010001110110011011";
        ram[100] = "0b10111100010110011000111011101000";
        ram[101] = "0b10111101111110000100010111011101";
        ram[102] = "0b10111110010001000111000101110001";
        ram[103] = "0b10111100101100110100011001001001";
        ram[104] = "0b10111101100100000100010110010011";
        ram[105] = "0b00111110001000010110110010100100";
        ram[106] = "0b00111110010010011100000101110010";
        ram[107] = "0b00111101101011010000011101101010";
        ram[108] = "0b10111101011000001000001110110011";
        ram[109] = "0b10111101100100010010001010101010";
        ram[110] = "0b10111101001001110011000001110110";
        ram[111] = "0b00111110000110010011111011100110";
        ram[112] = "0b00111101010010111011000010001000";
        ram[113] = "0b00111101100011010111001110111100";
        ram[114] = "0b10111110000110101000000100010011";
        ram[115] = "0b10111100100100001000001100111011";
        ram[116] = "0b10111101110010010110110110000010";
        ram[117] = "0b00111101001101011100000011000111";
        ram[118] = "0b00111100110011111000010000000010";
        ram[119] = "0b10111101011010101000110101010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_12) {
meminst = new inference_conv2d_f3_1_1_12_ram("inference_conv2d_f3_1_1_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_12() {
    delete meminst;
}


};//endmodule
#endif
