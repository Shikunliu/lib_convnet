// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_68_H__
#define __inference_mult_1_120_120_84_s_W4_68_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_68_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_68_ram) {
        ram[0] = "0b10111101101011000011110010000100";
        ram[1] = "0b10111101111001110111011100001000";
        ram[2] = "0b00111100110011100110011010010101";
        ram[3] = "0b00111110000001011111000101111100";
        ram[4] = "0b10111100110101010010101110101011";
        ram[5] = "0b10111101100010010100110010010101";
        ram[6] = "0b00111110001011010110100101001101";
        ram[7] = "0b10111101101110101000111111101001";
        ram[8] = "0b10111101010101101010010010111101";
        ram[9] = "0b00111101100100001011000101000011";
        ram[10] = "0b00111101010100100001101100000101";
        ram[11] = "0b00111101010100000110001111111011";
        ram[12] = "0b00111100101110000110001001000111";
        ram[13] = "0b00111110010000110011111011111111";
        ram[14] = "0b10111100001100110000100001101011";
        ram[15] = "0b00111100110101100000101010011001";
        ram[16] = "0b10111100111011101111111010111011";
        ram[17] = "0b10111011111010110111101111001111";
        ram[18] = "0b00111101110011100110110010001111";
        ram[19] = "0b00111100010110000100111001110110";
        ram[20] = "0b00111100110001010001110001101010";
        ram[21] = "0b10111101011111001111100110000110";
        ram[22] = "0b10111101011001110010101100011101";
        ram[23] = "0b00111101101010001100011110101101";
        ram[24] = "0b00111101101010110010100110100010";
        ram[25] = "0b00111101000001101101111111101110";
        ram[26] = "0b10111101100110110000010100001001";
        ram[27] = "0b10111110000010011111010010010000";
        ram[28] = "0b00111110000010000100000010011110";
        ram[29] = "0b10111100011101001011100111100110";
        ram[30] = "0b10111101110111001000001010011101";
        ram[31] = "0b00111101110101011011101100111000";
        ram[32] = "0b00111100110000110101000001001100";
        ram[33] = "0b00111100100011101010001101100111";
        ram[34] = "0b10111110000110010101011011000001";
        ram[35] = "0b00111101101011100110110001001100";
        ram[36] = "0b10111100110011100100101010110001";
        ram[37] = "0b00111101111110010101010111111000";
        ram[38] = "0b00111101110111101111110001111010";
        ram[39] = "0b00111110001001001100101000001100";
        ram[40] = "0b00111101111011000000111110001000";
        ram[41] = "0b10111101011001111000111010011111";
        ram[42] = "0b10111101111110101000110101100101";
        ram[43] = "0b10111101110000111000010010111010";
        ram[44] = "0b10111110000010111011010110011110";
        ram[45] = "0b10111110001111100000010011000000";
        ram[46] = "0b10111101100111110100110001111100";
        ram[47] = "0b10111101011111111010011111101011";
        ram[48] = "0b00111110000000010110010110010000";
        ram[49] = "0b00111110000010110110101111110100";
        ram[50] = "0b00111101000001101001110110101001";
        ram[51] = "0b00111101110000011101010011010001";
        ram[52] = "0b10111101010010000110110100000111";
        ram[53] = "0b00111100110111010011111101000001";
        ram[54] = "0b00111101111100101101111111010111";
        ram[55] = "0b10111101001101001101010111001011";
        ram[56] = "0b00111101011110101100001000111110";
        ram[57] = "0b00111101011111111011111001011100";
        ram[58] = "0b00111101101101010100000100011101";
        ram[59] = "0b10111101100011011010111110001110";
        ram[60] = "0b10111101000001011100001010011101";
        ram[61] = "0b00111101110101001111010110010000";
        ram[62] = "0b10111101100101001000010110010011";
        ram[63] = "0b10111100101010001001000100011001";
        ram[64] = "0b00111100110110101110101101110100";
        ram[65] = "0b10111101001110001001011000010100";
        ram[66] = "0b10111101111101000100000000101001";
        ram[67] = "0b00111100001010001100101000100100";
        ram[68] = "0b10111110001101000111101001011011";
        ram[69] = "0b10111110001000111011001001010111";
        ram[70] = "0b00111100011001100101001010110000";
        ram[71] = "0b00111101101000110100000000001100";
        ram[72] = "0b00111101100111111101011010010101";
        ram[73] = "0b10111101000011001100011101110100";
        ram[74] = "0b10111101101010100010000001110010";
        ram[75] = "0b10111101101010111001010100011100";
        ram[76] = "0b10111110010111101001110111011000";
        ram[77] = "0b00111101100010011011011000111010";
        ram[78] = "0b00111100100101011010111111001010";
        ram[79] = "0b10111011101111110011001010110000";
        ram[80] = "0b10111101100000110001101100110000";
        ram[81] = "0b00111100100100111010001111101100";
        ram[82] = "0b00111101110111000001101011001110";
        ram[83] = "0b10111011110000100001000000011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_68) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_68_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_68) {
meminst = new inference_mult_1_120_120_84_s_W4_68_ram("inference_mult_1_120_120_84_s_W4_68_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_68() {
    delete meminst;
}


};//endmodule
#endif
