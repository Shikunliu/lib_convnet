// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_5_H__
#define __inference_conv2d_f3_3_4_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_5_ram) {
        ram[0] = "0b10111101100110111001100011001000";
        ram[1] = "0b10111101001110101110101111111010";
        ram[2] = "0b10111100000100110110010100100010";
        ram[3] = "0b00111101110001011110011010000111";
        ram[4] = "0b00111101001100101101000110010100";
        ram[5] = "0b10111101011011111010011100100010";
        ram[6] = "0b00111110001010100101101000000100";
        ram[7] = "0b00111110000001110110000110001001";
        ram[8] = "0b00111100111001000101101100101001";
        ram[9] = "0b10111101011111011010001001110011";
        ram[10] = "0b10111110001010000001011000100111";
        ram[11] = "0b10111101100110100111110110011101";
        ram[12] = "0b00111101111101101111100001101010";
        ram[13] = "0b10111100011110100001110010010001";
        ram[14] = "0b10111011111000000011011010100001";
        ram[15] = "0b10111110010011100010011000001011";
        ram[16] = "0b10111010010000001010001011110011";
        ram[17] = "0b10111101110000111010001101011000";
        ram[18] = "0b10111101110111100001011001010001";
        ram[19] = "0b00111100101011011000000111100100";
        ram[20] = "0b00111110001111011110011011011110";
        ram[21] = "0b10111101001000110100000111101111";
        ram[22] = "0b00111101111001000011010001011101";
        ram[23] = "0b00111101011111000101001001111100";
        ram[24] = "0b10111101000000111001101101100000";
        ram[25] = "0b00111101100110110001110011100100";
        ram[26] = "0b10111101011000100000100100001010";
        ram[27] = "0b10111101000010001100000011001111";
        ram[28] = "0b00111101001110001100010000000001";
        ram[29] = "0b10111101011001101001110011010010";
        ram[30] = "0b10111101000011000110001000001110";
        ram[31] = "0b10111110010010010111101001101000";
        ram[32] = "0b10111101110000100111110000101100";
        ram[33] = "0b10111101101111000001010111010011";
        ram[34] = "0b00111100000101000010111111101110";
        ram[35] = "0b10111100110001101110011010100100";
        ram[36] = "0b00111101101001010100001000110111";
        ram[37] = "0b00111101100101010001111110001111";
        ram[38] = "0b00111101011101001010011100111100";
        ram[39] = "0b10111101111001010001011111100111";
        ram[40] = "0b00111101101010001000110000010000";
        ram[41] = "0b00111011001000101111111101110100";
        ram[42] = "0b10111110001111001001100101101011";
        ram[43] = "0b10111101100011100101011111011010";
        ram[44] = "0b10111100000100000000001110111001";
        ram[45] = "0b10111011111101100111110101100000";
        ram[46] = "0b00111101100100111000010001001111";
        ram[47] = "0b00111011010000100010111010111001";
        ram[48] = "0b10111110000100000110011101001001";
        ram[49] = "0b00111101100110010010100111100000";
        ram[50] = "0b00111101101010010101000010111001";
        ram[51] = "0b10111101110011001011001000011101";
        ram[52] = "0b00111110001001001011000000011000";
        ram[53] = "0b10111110000011101011001100010100";
        ram[54] = "0b00111101011111111001010010111011";
        ram[55] = "0b00111101111011100001000101010110";
        ram[56] = "0b10111101100010011110110101111100";
        ram[57] = "0b00111101110111000010000010010010";
        ram[58] = "0b10111101110001001100001110001100";
        ram[59] = "0b10111110000111001001010111000000";
        ram[60] = "0b10111110000100100001011110001111";
        ram[61] = "0b10111110001100110100001011101110";
        ram[62] = "0b00111101010000001111001111100110";
        ram[63] = "0b00111100010101100100101101100110";
        ram[64] = "0b10111101000101110010110101000011";
        ram[65] = "0b10111101010101111000111001110111";
        ram[66] = "0b00111101101110010100010011111011";
        ram[67] = "0b00111101110000111111011111001111";
        ram[68] = "0b10111100100000011100000110100001";
        ram[69] = "0b10111101111001100000100100010100";
        ram[70] = "0b10111101110111111000011011100100";
        ram[71] = "0b00111110001010000010011001100111";
        ram[72] = "0b00111101011100100110110101110000";
        ram[73] = "0b10111101111011010000000100111011";
        ram[74] = "0b10111101001110001100000111001110";
        ram[75] = "0b00111110000000001011100100010011";
        ram[76] = "0b10111101110100100100100111100100";
        ram[77] = "0b00111101100000000110011011011110";
        ram[78] = "0b00111101111110110001110110010011";
        ram[79] = "0b00111011111101111011100101110101";
        ram[80] = "0b10111100110100000001101101101100";
        ram[81] = "0b10111101000010010111110110001101";
        ram[82] = "0b00111101100010111010010011111111";
        ram[83] = "0b00111101001011111010010000110010";
        ram[84] = "0b00111110001110001100111010110011";
        ram[85] = "0b00111100000011111111110110100100";
        ram[86] = "0b10111110000100100011100011011010";
        ram[87] = "0b10111101000100111100001110010111";
        ram[88] = "0b10111101111001001010100000111011";
        ram[89] = "0b10111101100011011110001011010100";
        ram[90] = "0b00111100111010000101001010011010";
        ram[91] = "0b00111100111100111000100101100101";
        ram[92] = "0b00111101100101111101111110010011";
        ram[93] = "0b00111100100111101000110100011110";
        ram[94] = "0b10111010100000101111110011110101";
        ram[95] = "0b00111100111111110100010100100101";
        ram[96] = "0b10111101101010011110110101100010";
        ram[97] = "0b00111110001011000111000100001101";
        ram[98] = "0b10111101100010010010101111000011";
        ram[99] = "0b00111101001011100001111001110001";
        ram[100] = "0b00111100110111111011001011101110";
        ram[101] = "0b10111110001001111000110110010011";
        ram[102] = "0b10111101100001110110011101101000";
        ram[103] = "0b00111100111111111100101111111110";
        ram[104] = "0b10111100110001001101101011111011";
        ram[105] = "0b10111110010010000101110110110111";
        ram[106] = "0b00111101001111000011000110001111";
        ram[107] = "0b10111100101010010011000110111101";
        ram[108] = "0b00111010000011110001110001111001";
        ram[109] = "0b00111101101010101000101111111010";
        ram[110] = "0b10111110000101011100111010011110";
        ram[111] = "0b00111101100111010001110010011001";
        ram[112] = "0b00111101100000011010011110111011";
        ram[113] = "0b00111110000111000000101010001101";
        ram[114] = "0b10111101011011011100101111010000";
        ram[115] = "0b10111101110001110101001001111101";
        ram[116] = "0b10111101100000000111101110000110";
        ram[117] = "0b00111101101111001110010011000011";
        ram[118] = "0b00111101110001001111111100000000";
        ram[119] = "0b10111101000111010111111101101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_5) {
meminst = new inference_conv2d_f3_3_4_5_ram("inference_conv2d_f3_3_4_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_5() {
    delete meminst;
}


};//endmodule
#endif
