// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_97_H__
#define __inference_mult_1_120_120_84_s_W4_97_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_97_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_97_ram) {
        ram[0] = "0b10111101100100001010111100000010";
        ram[1] = "0b10111011101110101111110110010111";
        ram[2] = "0b00111101011101100101100001100111";
        ram[3] = "0b10111110001000111001011111011101";
        ram[4] = "0b10111101011101101011111110110000";
        ram[5] = "0b10111100100000000011100000110100";
        ram[6] = "0b00111101100000011100100111001111";
        ram[7] = "0b10111110001001101101011111101001";
        ram[8] = "0b00111011101010001010110011000111";
        ram[9] = "0b00111100001100010010011101010101";
        ram[10] = "0b10111101101100011100010010101100";
        ram[11] = "0b00111110000001100000010111101110";
        ram[12] = "0b10111101100001111001011100000011";
        ram[13] = "0b00111100110100100001110111011010";
        ram[14] = "0b10111011110000111110000100000000";
        ram[15] = "0b10111101000001010001011110010111";
        ram[16] = "0b00111110000011100010100011101101";
        ram[17] = "0b10111100101001101101001011010011";
        ram[18] = "0b10111101100011010100110101001110";
        ram[19] = "0b00111101110101011110000001110010";
        ram[20] = "0b10111100101101001001111110101111";
        ram[21] = "0b10111100010010101011010100110000";
        ram[22] = "0b10111110000011010011001101001100";
        ram[23] = "0b10111101101111000011101001011110";
        ram[24] = "0b00111101001100010011001001010111";
        ram[25] = "0b00111110000010101101100100100111";
        ram[26] = "0b00111101101011110000011011101001";
        ram[27] = "0b10111100101101010101111111111110";
        ram[28] = "0b10111101111010001010010110001011";
        ram[29] = "0b00111101110011111100110011100010";
        ram[30] = "0b00111110000000101111111101001100";
        ram[31] = "0b00111101100100101111100001101101";
        ram[32] = "0b00111100000100101100010100101010";
        ram[33] = "0b10111101101111111100011100010000";
        ram[34] = "0b00111101001011000111110001111011";
        ram[35] = "0b00111101001111111011100001100010";
        ram[36] = "0b00111101110101100010010000010100";
        ram[37] = "0b10111101010011111000101111011111";
        ram[38] = "0b10111101110000011111110110110110";
        ram[39] = "0b00111101100101000110110101011010";
        ram[40] = "0b00111101101101100000111110101111";
        ram[41] = "0b10111101011111011111110111000111";
        ram[42] = "0b00111101100000111010101111010111";
        ram[43] = "0b00111101000011111110010011001010";
        ram[44] = "0b00111101100010010010100011101110";
        ram[45] = "0b00111101011101010110111001110111";
        ram[46] = "0b00111101011010000101111100010100";
        ram[47] = "0b00111101000110010111110101100101";
        ram[48] = "0b10111101101000101010110111100000";
        ram[49] = "0b10111101111110010101001001001100";
        ram[50] = "0b00111101010000100101110010011100";
        ram[51] = "0b00111110001110010001000011000011";
        ram[52] = "0b10111101101000111110001100100111";
        ram[53] = "0b10111100001111110100001101110111";
        ram[54] = "0b00111101000010011111000001111001";
        ram[55] = "0b10111110001100011001111110000000";
        ram[56] = "0b10111100100010010101011100101100";
        ram[57] = "0b10111101101110111011110111100110";
        ram[58] = "0b10111100001100000111111010111000";
        ram[59] = "0b00111101101110000010001000011011";
        ram[60] = "0b10111101000010000010010010010010";
        ram[61] = "0b10111100101111101100101000001010";
        ram[62] = "0b10111110000111011001011101110000";
        ram[63] = "0b00111101100101111010000001001011";
        ram[64] = "0b00111101001000001111100011101111";
        ram[65] = "0b00111101101011011011110111101100";
        ram[66] = "0b10111110001101100100111111011011";
        ram[67] = "0b00111011101101110111011001100100";
        ram[68] = "0b10111100010010001000110011001100";
        ram[69] = "0b00111101011001101100001111101111";
        ram[70] = "0b10111100011110011100011000101010";
        ram[71] = "0b10111101011100011111101101000000";
        ram[72] = "0b10111100101001001111100110110101";
        ram[73] = "0b10111101110010101111001011011000";
        ram[74] = "0b00111100100011111110111101100001";
        ram[75] = "0b00111101101011000111011001110011";
        ram[76] = "0b00111101110100001001100111100001";
        ram[77] = "0b10111110000111111101010110001000";
        ram[78] = "0b00111101101101000101110111010110";
        ram[79] = "0b00111101100101110000001100101010";
        ram[80] = "0b00111101100111010000110011000011";
        ram[81] = "0b10111101111001000110101011100100";
        ram[82] = "0b00111110000010101011000101001111";
        ram[83] = "0b10111101001101000010001010010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_97) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_97_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_97) {
meminst = new inference_mult_1_120_120_84_s_W4_97_ram("inference_mult_1_120_120_84_s_W4_97_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_97() {
    delete meminst;
}


};//endmodule
#endif
