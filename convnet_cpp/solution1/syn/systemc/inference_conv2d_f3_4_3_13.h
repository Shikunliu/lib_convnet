// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_13_H__
#define __inference_conv2d_f3_4_3_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_13_ram) {
        ram[0] = "0b10111110011011100000010111001101";
        ram[1] = "0b10111011000000011101001001111110";
        ram[2] = "0b10111110001101010011100011101111";
        ram[3] = "0b00111110000101101001000011011110";
        ram[4] = "0b10111110001110100011010001000100";
        ram[5] = "0b10111110000100100001011100001001";
        ram[6] = "0b10111101011101101101010100010100";
        ram[7] = "0b10111101010110000101111111011110";
        ram[8] = "0b00111101001110011001001111110000";
        ram[9] = "0b00111101100000101101011111111001";
        ram[10] = "0b10111101111000111011011110010101";
        ram[11] = "0b10111101001111001010111010001100";
        ram[12] = "0b00111110010000011000101101010000";
        ram[13] = "0b10111110000100010101011001011100";
        ram[14] = "0b10111101110101000110100000000001";
        ram[15] = "0b10111110001000111001001100100101";
        ram[16] = "0b00111101111001111011000010110100";
        ram[17] = "0b10111110001110100100111111001010";
        ram[18] = "0b10111100110111111110001011110100";
        ram[19] = "0b00111100000010100101011101000111";
        ram[20] = "0b00111101110101101010110011101011";
        ram[21] = "0b00111011011010001101101001110101";
        ram[22] = "0b00111011101001111001001001101011";
        ram[23] = "0b00111011110110011011001000100011";
        ram[24] = "0b10111110000000110000111011000011";
        ram[25] = "0b10111010100100110001100100100010";
        ram[26] = "0b10111101100010001001000110111010";
        ram[27] = "0b10111101111000001100010100100010";
        ram[28] = "0b00111101110000011011011100100101";
        ram[29] = "0b00111110000001100101110101111101";
        ram[30] = "0b00111110001111101100111101100100";
        ram[31] = "0b00111101100010101011110011011000";
        ram[32] = "0b00111101010101010101111101111000";
        ram[33] = "0b00111110000011000000110111110110";
        ram[34] = "0b00111101110111100100000101001110";
        ram[35] = "0b00111101000001010000001111111011";
        ram[36] = "0b10111101000001010110000100110011";
        ram[37] = "0b00111101000001110000101001100110";
        ram[38] = "0b10111101001000111111010010011100";
        ram[39] = "0b00111101001100000010100101111001";
        ram[40] = "0b10111110000111000010011000010100";
        ram[41] = "0b10111110000000010110001111111110";
        ram[42] = "0b00111101000001100011010011001101";
        ram[43] = "0b10111101111011010010100110011001";
        ram[44] = "0b00111110001100100000000101000111";
        ram[45] = "0b00111110001101111101111010010100";
        ram[46] = "0b00111101011101100100011101101010";
        ram[47] = "0b10111101000000111011100000110110";
        ram[48] = "0b10111010111011101001010001110011";
        ram[49] = "0b00111101110011100110110100010110";
        ram[50] = "0b00111101110101101110011010010111";
        ram[51] = "0b10111110000110100110000100010111";
        ram[52] = "0b10111011101101101110100101110110";
        ram[53] = "0b00111101101110001111110111110000";
        ram[54] = "0b00111101110110001011101001000001";
        ram[55] = "0b00111101110010100101101000101100";
        ram[56] = "0b10111101001110100010110110001110";
        ram[57] = "0b00111101011000111100100000001100";
        ram[58] = "0b00111101111101010011111101111101";
        ram[59] = "0b00111100111001110101000110110011";
        ram[60] = "0b10111110000010101001010000110110";
        ram[61] = "0b00111110000100101001011100111001";
        ram[62] = "0b00111110001101001011101110100001";
        ram[63] = "0b10111011111110110000111001010100";
        ram[64] = "0b10111101101000000001101100001110";
        ram[65] = "0b10111101100011110010010000111000";
        ram[66] = "0b10111100111011001101101100101010";
        ram[67] = "0b10111101110110000101110111111011";
        ram[68] = "0b00111101101101000110000000111111";
        ram[69] = "0b10111110000010110011100110011111";
        ram[70] = "0b10111101010010100000100100011110";
        ram[71] = "0b00111100011000110101100010010101";
        ram[72] = "0b10111110000110011110011010101100";
        ram[73] = "0b00111101101001001011100110010110";
        ram[74] = "0b00111101110010110111100101111011";
        ram[75] = "0b00111110010010110110001101001110";
        ram[76] = "0b10111100100110111000011100001111";
        ram[77] = "0b00111101101101011101101011111110";
        ram[78] = "0b00111110001000000111011100000011";
        ram[79] = "0b10111110001111010000010000011101";
        ram[80] = "0b00111100010010110110111111010101";
        ram[81] = "0b10111011100000000100111000000100";
        ram[82] = "0b00111101000110101110110010011011";
        ram[83] = "0b00111110001001010010110111101101";
        ram[84] = "0b10111101101000101001111111111011";
        ram[85] = "0b10111101001110110011011001101101";
        ram[86] = "0b00111101011101010100001101011110";
        ram[87] = "0b00111100001101010100101001100101";
        ram[88] = "0b00111101101001001010101111100111";
        ram[89] = "0b10111110000011000101101100001000";
        ram[90] = "0b00111100111000011100110111100110";
        ram[91] = "0b10111110000111000101110001010111";
        ram[92] = "0b10111101001111110001000100100010";
        ram[93] = "0b00111110001111110010000000100001";
        ram[94] = "0b10111110001000101010001011000010";
        ram[95] = "0b10111101011011101111000101001111";
        ram[96] = "0b00111101010011110111001000010011";
        ram[97] = "0b00111110000001101000100110000111";
        ram[98] = "0b00111010000001010000001000111011";
        ram[99] = "0b00111100101010100011001101111011";
        ram[100] = "0b00111101101101000111111010011010";
        ram[101] = "0b10111101010011011001110111111110";
        ram[102] = "0b10111101100000111010101001011111";
        ram[103] = "0b10111101101110111110110011111011";
        ram[104] = "0b10111100111011011110001011111101";
        ram[105] = "0b10111100011001111101101001101111";
        ram[106] = "0b10111101010000100111001110010011";
        ram[107] = "0b00111110000101101110100001101100";
        ram[108] = "0b10111101100001110000101001110011";
        ram[109] = "0b10111101100001011111101001001011";
        ram[110] = "0b10111100000010011010110010110010";
        ram[111] = "0b10111100110100001111100101001101";
        ram[112] = "0b00111101100010100011100011010100";
        ram[113] = "0b00111101010011011010111000111110";
        ram[114] = "0b00111101001111000110011110001111";
        ram[115] = "0b00111100010011000110101111101001";
        ram[116] = "0b10111110000011101010000001110111";
        ram[117] = "0b00111101001010111011001000011011";
        ram[118] = "0b00111010000101000010111000000110";
        ram[119] = "0b10111101100011011011010010100100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_13) {
meminst = new inference_conv2d_f3_4_3_13_ram("inference_conv2d_f3_4_3_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_13() {
    delete meminst;
}


};//endmodule
#endif
