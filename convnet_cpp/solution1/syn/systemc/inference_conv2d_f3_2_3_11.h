// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_11_H__
#define __inference_conv2d_f3_2_3_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_11_ram) {
        ram[0] = "0b10111101100001011000001101111101";
        ram[1] = "0b10111110000010001010111010111000";
        ram[2] = "0b10111101100000100011011011101010";
        ram[3] = "0b00111011101100001011010010010011";
        ram[4] = "0b00111100001000101111111011010011";
        ram[5] = "0b10111110000010010000000111010010";
        ram[6] = "0b10111101101111011011100110011111";
        ram[7] = "0b00111101101001101110010011101001";
        ram[8] = "0b10111101100100110111010101111000";
        ram[9] = "0b10111101110000001111011110010010";
        ram[10] = "0b00111101101001000000110100110011";
        ram[11] = "0b10111100101110111001000011010000";
        ram[12] = "0b10111101000011010000010011100110";
        ram[13] = "0b00111101010111101101111110001001";
        ram[14] = "0b00111110001000110111100111111011";
        ram[15] = "0b10111101100001010011110001100101";
        ram[16] = "0b00111110001010100100010001000001";
        ram[17] = "0b00111101001000010011000011010010";
        ram[18] = "0b10111101110000101010101001110111";
        ram[19] = "0b10111101000110011110011110111000";
        ram[20] = "0b00111101011101100001000010101110";
        ram[21] = "0b10111101001100111100011110101110";
        ram[22] = "0b00111101000010111110101101000000";
        ram[23] = "0b00111101100100100010110110111101";
        ram[24] = "0b00111100110110010111010101010010";
        ram[25] = "0b00111011110100100111111011101000";
        ram[26] = "0b00111101111110001111011100010010";
        ram[27] = "0b00111100100100000101110001101111";
        ram[28] = "0b00111100101000001100100100000011";
        ram[29] = "0b10111100111110001011011111010111";
        ram[30] = "0b00111101010000111101011100001010";
        ram[31] = "0b00111101000110000101100000000000";
        ram[32] = "0b10111100101010000010000000001111";
        ram[33] = "0b00111100100000001110110100110000";
        ram[34] = "0b10111101111100100111001011001001";
        ram[35] = "0b00111110000010000100110001101010";
        ram[36] = "0b10111101110011011000111011001001";
        ram[37] = "0b10111011110011000101010010010111";
        ram[38] = "0b00111110001101011101010001100011";
        ram[39] = "0b10111101111011010010110010111111";
        ram[40] = "0b00111110000000000011110111011110";
        ram[41] = "0b00111101111110100110101001000100";
        ram[42] = "0b00111100101111111000101111010001";
        ram[43] = "0b10111100101101110100011000011101";
        ram[44] = "0b00111101111010111111110000100010";
        ram[45] = "0b00111101010100001000101111101111";
        ram[46] = "0b10111101101100000000001011000111";
        ram[47] = "0b10111101000010010010010110101110";
        ram[48] = "0b00111101111100110010110101101111";
        ram[49] = "0b10111101010101111001110001101001";
        ram[50] = "0b00111101100001000111101001001110";
        ram[51] = "0b00111101011001100011101010010010";
        ram[52] = "0b00111110001011110101111010000101";
        ram[53] = "0b00111101101000001101010001010110";
        ram[54] = "0b00111110001011110110011000011111";
        ram[55] = "0b00111110000000110100001000100100";
        ram[56] = "0b10111110000000011000011001010101";
        ram[57] = "0b00111101011010101011000010101110";
        ram[58] = "0b00111101101010101100111010000011";
        ram[59] = "0b00111101110101111000010001100110";
        ram[60] = "0b10111101001111110000001111101100";
        ram[61] = "0b10111110000011110000001000111111";
        ram[62] = "0b10111110001001111010111110100111";
        ram[63] = "0b10111101101010101010111100110110";
        ram[64] = "0b10111100101010000100111100111111";
        ram[65] = "0b00111101111000000000011101010111";
        ram[66] = "0b10111100001011010111101000100001";
        ram[67] = "0b10111101100110000010001111111110";
        ram[68] = "0b00111100110101011010100011011111";
        ram[69] = "0b00111101111010111111010001000101";
        ram[70] = "0b10111101110010010010111110110010";
        ram[71] = "0b10111100110010010001010101010010";
        ram[72] = "0b10111110001010000110010111011000";
        ram[73] = "0b00111101010001001101010111110011";
        ram[74] = "0b00111101000010101010000100101001";
        ram[75] = "0b10111101100110111111111110100101";
        ram[76] = "0b10111101101101101001100101011100";
        ram[77] = "0b10111101010011000000101011101011";
        ram[78] = "0b10111110000100100011110010000110";
        ram[79] = "0b00111011001110111011010101111000";
        ram[80] = "0b00111101001111000001100101110001";
        ram[81] = "0b10111101111100100101100110011111";
        ram[82] = "0b00111101100000010111101000000011";
        ram[83] = "0b10111110000010101000000011010000";
        ram[84] = "0b10111110000111100000111001110011";
        ram[85] = "0b00111101001111110111110111111010";
        ram[86] = "0b00111101000100101101101001111110";
        ram[87] = "0b10111101101100010001111111100011";
        ram[88] = "0b10111100111110100000101111001010";
        ram[89] = "0b00111101110110101110001001010100";
        ram[90] = "0b10111101101101011111000100000011";
        ram[91] = "0b10111101001111110010100011010101";
        ram[92] = "0b10111101111001101101011000010011";
        ram[93] = "0b00111101101100111010110010000101";
        ram[94] = "0b10111110001010110101001011001010";
        ram[95] = "0b10111110000110011101010111100101";
        ram[96] = "0b00111101110101001011011000100000";
        ram[97] = "0b00111100110000100101000001110010";
        ram[98] = "0b10111101000100001000101001011100";
        ram[99] = "0b00111100011110010111010011001100";
        ram[100] = "0b10111101100101101101101110100001";
        ram[101] = "0b00111101110111000011000101011001";
        ram[102] = "0b00111100101001110010011100100001";
        ram[103] = "0b00111101111011110110010010001100";
        ram[104] = "0b00111101100010101011110111111111";
        ram[105] = "0b10111101110100000110000101000001";
        ram[106] = "0b10111101100011000101011111010101";
        ram[107] = "0b00111100010010100101000010000110";
        ram[108] = "0b00111101010000101101111001101100";
        ram[109] = "0b00111101000111110000010100101110";
        ram[110] = "0b10111100000001110001101111001000";
        ram[111] = "0b10111010100110111110010111111010";
        ram[112] = "0b10111101001110101001101100111100";
        ram[113] = "0b00111101000111011110101010110010";
        ram[114] = "0b10111100010000001010001000011100";
        ram[115] = "0b00111101101010101100010011101011";
        ram[116] = "0b00111110000010111001000001100100";
        ram[117] = "0b10111101000111110111011000011101";
        ram[118] = "0b10111110001010000000011110111100";
        ram[119] = "0b10111101000110010110011100101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_11) {
meminst = new inference_conv2d_f3_2_3_11_ram("inference_conv2d_f3_2_3_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_11() {
    delete meminst;
}


};//endmodule
#endif
