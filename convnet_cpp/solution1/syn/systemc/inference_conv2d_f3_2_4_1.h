// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_1_H__
#define __inference_conv2d_f3_2_4_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_1_ram) {
        ram[0] = "0b10111100001111010000100111100001";
        ram[1] = "0b00111101000011010011000110101100";
        ram[2] = "0b00111100100011100110011011001011";
        ram[3] = "0b00111101100100001010011101001101";
        ram[4] = "0b10111011010001111110100000110111";
        ram[5] = "0b00111110000110010010110000000110";
        ram[6] = "0b10111101100011110100001110000101";
        ram[7] = "0b00111110010011010101001100000101";
        ram[8] = "0b10111100100111001001000111010001";
        ram[9] = "0b00111100101111011010101001010000";
        ram[10] = "0b00111101011111011110100110100101";
        ram[11] = "0b00111101010000000010101011111110";
        ram[12] = "0b10111011010100001011111100100000";
        ram[13] = "0b00111101101100011111110110000001";
        ram[14] = "0b00111101010010101110111000000101";
        ram[15] = "0b00111101001001000010111100111010";
        ram[16] = "0b00111110001100100110001010001001";
        ram[17] = "0b10111100101000101101011011111010";
        ram[18] = "0b10111101010111111010001100110011";
        ram[19] = "0b00111110000000100100011101000101";
        ram[20] = "0b10111110001011001011100000010111";
        ram[21] = "0b00111101101110101011010001110100";
        ram[22] = "0b00111101111110101101110010010000";
        ram[23] = "0b00111110000011011011101001001101";
        ram[24] = "0b10111101100010001001101000000010";
        ram[25] = "0b10111101100110111101001000100011";
        ram[26] = "0b00111110000010100000001111000101";
        ram[27] = "0b00111101110100101110111010000101";
        ram[28] = "0b00111110001100001000101011110000";
        ram[29] = "0b00111101111010101100110000001100";
        ram[30] = "0b00111101101000000100000110001001";
        ram[31] = "0b10111100101011001111010000011111";
        ram[32] = "0b00111101010000011111010000101100";
        ram[33] = "0b00111101111101010000011001010111";
        ram[34] = "0b10111100101100110000111000010101";
        ram[35] = "0b00111101100011110110110011001000";
        ram[36] = "0b00111110000000010010101101011110";
        ram[37] = "0b10111101110000010101001111011000";
        ram[38] = "0b10111100000001011001001010100111";
        ram[39] = "0b00111110010010001000100011111000";
        ram[40] = "0b00111101011101010101110101111010";
        ram[41] = "0b10111110000110101100100011100111";
        ram[42] = "0b00111101101110111111001000011111";
        ram[43] = "0b10111101100011001111111011101100";
        ram[44] = "0b10111101100010001100000111000000";
        ram[45] = "0b00111110001010011100110000110010";
        ram[46] = "0b10111101100100101111001100111101";
        ram[47] = "0b10111110000110101001100110110111";
        ram[48] = "0b10111101000001001101001011001110";
        ram[49] = "0b00111100001100011010011000000000";
        ram[50] = "0b10111101011110000000100001101010";
        ram[51] = "0b10111101000110110001101110010101";
        ram[52] = "0b00111101000110010000011001111100";
        ram[53] = "0b00111100000000110100101000001100";
        ram[54] = "0b00111110010011001010111001100100";
        ram[55] = "0b00111100100100101011100010011111";
        ram[56] = "0b00111100100101001111011111011111";
        ram[57] = "0b00111110000011101011101000101000";
        ram[58] = "0b00111101100010110011001000010011";
        ram[59] = "0b10111110000010100001111110001110";
        ram[60] = "0b10111100111110110000000110010011";
        ram[61] = "0b00111101100010011101010100110110";
        ram[62] = "0b00111101100111100111110001010111";
        ram[63] = "0b10111101000011001110110110111010";
        ram[64] = "0b00111110000000100000010011110011";
        ram[65] = "0b00111101010111111001011001001110";
        ram[66] = "0b10111101101100000100100110110111";
        ram[67] = "0b00111101101110110011011011001011";
        ram[68] = "0b10111101111011100110011111010111";
        ram[69] = "0b00111101000000101010100010100001";
        ram[70] = "0b10111110001101001000000110110010";
        ram[71] = "0b10111101001001010011000010001100";
        ram[72] = "0b00111101110010010001101001000000";
        ram[73] = "0b10111101101001010011110011011110";
        ram[74] = "0b00111100110100110001100100010111";
        ram[75] = "0b10111101011111010101010101111011";
        ram[76] = "0b00111110001000110101001000100010";
        ram[77] = "0b00111010100111111010110000000010";
        ram[78] = "0b00111110000011010011110011111111";
        ram[79] = "0b10111101100011101110110001100010";
        ram[80] = "0b10111100101010011110111011100111";
        ram[81] = "0b10111101111000010010011000100000";
        ram[82] = "0b10111101111101110001001110101101";
        ram[83] = "0b00111101001111011010111111111001";
        ram[84] = "0b10111110000100011100010011111100";
        ram[85] = "0b00111101000001011111000000111010";
        ram[86] = "0b10111101000101110001101011001111";
        ram[87] = "0b00111101000100101100001100011011";
        ram[88] = "0b00111110001001010001011011011011";
        ram[89] = "0b10111110000101000011110100000100";
        ram[90] = "0b00111101100100110111000010011000";
        ram[91] = "0b00111101010010100100011011111011";
        ram[92] = "0b10111011100001010111111111011100";
        ram[93] = "0b00111110010101100000011000110001";
        ram[94] = "0b10111100110011101110000101111010";
        ram[95] = "0b10111101110000011000110001001111";
        ram[96] = "0b00111101100101001001110000000100";
        ram[97] = "0b00111010110111010111110101001001";
        ram[98] = "0b10111101100110111111101001100111";
        ram[99] = "0b00111101010011011110010011000101";
        ram[100] = "0b00111101100001101101000010111010";
        ram[101] = "0b00111101011001100011000000110000";
        ram[102] = "0b00111011001110101000001110011111";
        ram[103] = "0b00111011100110110010001000110000";
        ram[104] = "0b00111110000000011111001000010011";
        ram[105] = "0b00111110000000001111111101010100";
        ram[106] = "0b10111101011001111110000001101001";
        ram[107] = "0b10111101101001110110011100100101";
        ram[108] = "0b00111010010000001110101110110010";
        ram[109] = "0b00111100011011001111010000011111";
        ram[110] = "0b10111101000010010000111010110111";
        ram[111] = "0b10111101101011011000010010010000";
        ram[112] = "0b10111110000001010000111101000001";
        ram[113] = "0b00111101011000111101110011101001";
        ram[114] = "0b00111101101110100111000100010101";
        ram[115] = "0b10111110000001011000010100111000";
        ram[116] = "0b10111011111100010100100111000100";
        ram[117] = "0b00111110001010101101000111010000";
        ram[118] = "0b00111101101011111010111110111011";
        ram[119] = "0b00111101111110001001100010110011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_1) {
meminst = new inference_conv2d_f3_2_4_1_ram("inference_conv2d_f3_2_4_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_1() {
    delete meminst;
}


};//endmodule
#endif
