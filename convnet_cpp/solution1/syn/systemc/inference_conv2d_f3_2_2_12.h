// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_12_H__
#define __inference_conv2d_f3_2_2_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_12_ram) {
        ram[0] = "0b00111110000010001011010111001100";
        ram[1] = "0b00111110001111101111110111001010";
        ram[2] = "0b10111110000101000111101010011110";
        ram[3] = "0b00111100110000110011000101111000";
        ram[4] = "0b00111110001100111011010001110000";
        ram[5] = "0b00111101100010101010100110001100";
        ram[6] = "0b00111100101000010010111101011010";
        ram[7] = "0b00111101111111111000000000010011";
        ram[8] = "0b10111011101011110111110111110010";
        ram[9] = "0b00111101101000110000000011011110";
        ram[10] = "0b00111101000100010101000100101011";
        ram[11] = "0b00111100001100001010011011111100";
        ram[12] = "0b00111101000010001011001011000010";
        ram[13] = "0b10111110001101100111001011111100";
        ram[14] = "0b00111101101100111011011000010000";
        ram[15] = "0b00111100110000010001100100111010";
        ram[16] = "0b00111100100100111010010100101110";
        ram[17] = "0b10111100100011100011001101101010";
        ram[18] = "0b00111101010010000110011011010111";
        ram[19] = "0b10111101110011000110000000010000";
        ram[20] = "0b00111101111101000101100101010011";
        ram[21] = "0b00111100100001111111111010011100";
        ram[22] = "0b00111101000000000100010101010000";
        ram[23] = "0b10111101000011101101010100000000";
        ram[24] = "0b10111101100101001010101110100100";
        ram[25] = "0b10111110001111010110010111100100";
        ram[26] = "0b10111101100011100001101011101110";
        ram[27] = "0b10111100110001111001100100011100";
        ram[28] = "0b00111101000011001011100110000010";
        ram[29] = "0b00111101011101100111001110001111";
        ram[30] = "0b10111101110011100100010111000011";
        ram[31] = "0b00111011100001111000011100110011";
        ram[32] = "0b10111110000000110001000001010110";
        ram[33] = "0b10111110010010010111110011000100";
        ram[34] = "0b00111101010001110111111000001110";
        ram[35] = "0b10111101100100010001101101100001";
        ram[36] = "0b00111101000001101110111011101101";
        ram[37] = "0b00111101111100111011100101101011";
        ram[38] = "0b10111101001011101011100100110110";
        ram[39] = "0b00111101000010110010101011010110";
        ram[40] = "0b10111110000010101000110110101000";
        ram[41] = "0b10111100100000100110000100000011";
        ram[42] = "0b10111100010101101010100011101111";
        ram[43] = "0b00111110000000000100101111000010";
        ram[44] = "0b10111110000010000000011101111001";
        ram[45] = "0b00111110010010001010100011110100";
        ram[46] = "0b00111101000000010010111111111011";
        ram[47] = "0b00111100100101100110001101001111";
        ram[48] = "0b10111101000011101000111001010011";
        ram[49] = "0b10111110001111001100000100000001";
        ram[50] = "0b10111100010001111111001011011110";
        ram[51] = "0b10111101000110110000101110111111";
        ram[52] = "0b10111100101001000010000011011100";
        ram[53] = "0b00111110000011001011111111110100";
        ram[54] = "0b10111100100001111100110000010010";
        ram[55] = "0b00111100101011010101110110011100";
        ram[56] = "0b00111110000100111001000111010101";
        ram[57] = "0b10111100110000000010110111101101";
        ram[58] = "0b10111101100101100010110101011100";
        ram[59] = "0b10111101011000010000101000000110";
        ram[60] = "0b10111101001001101111100011001000";
        ram[61] = "0b10111101101000011111110110110110";
        ram[62] = "0b10111101100011010011011010100111";
        ram[63] = "0b00111101111110111010010101011101";
        ram[64] = "0b10111101000111100010001110000111";
        ram[65] = "0b00111110001100011101011100010011";
        ram[66] = "0b10111101100001111001100110100010";
        ram[67] = "0b10111101110110110100000000101101";
        ram[68] = "0b10111101011100100111000000001111";
        ram[69] = "0b10111110010000001110110010110111";
        ram[70] = "0b10111101000010101100100100011100";
        ram[71] = "0b00111101100011111110011110011111";
        ram[72] = "0b00111100101011101001101010110011";
        ram[73] = "0b10111101000100000111011100010001";
        ram[74] = "0b10111101011100111100110111000011";
        ram[75] = "0b00111110001100110100101101010001";
        ram[76] = "0b10111101111011011110010111010010";
        ram[77] = "0b00111100100001000000000011100001";
        ram[78] = "0b10111101001110001101010011111110";
        ram[79] = "0b10111100101101001001001001111001";
        ram[80] = "0b10111100110110101100110100001011";
        ram[81] = "0b10111101110000110111110001100100";
        ram[82] = "0b10111001100110101101100101111001";
        ram[83] = "0b10111101001011000101011011010110";
        ram[84] = "0b10111100110100100011011001100011";
        ram[85] = "0b00111110000001011010110011001101";
        ram[86] = "0b10111101111001110001100000100010";
        ram[87] = "0b10111101001110101011001100111111";
        ram[88] = "0b00111100110000001001110011011110";
        ram[89] = "0b10111110000001000011110110001010";
        ram[90] = "0b00111101010000111001110011011000";
        ram[91] = "0b00111101011101110101001110111111";
        ram[92] = "0b00111110010000011111100011100100";
        ram[93] = "0b10111011101000001111000010010000";
        ram[94] = "0b00111101110100001111101101100101";
        ram[95] = "0b00111101011010000110101001100111";
        ram[96] = "0b10111101111010001101000110010110";
        ram[97] = "0b10111011101100100010111111101000";
        ram[98] = "0b10111110000110111110100111001001";
        ram[99] = "0b10111101101001011111001010100011";
        ram[100] = "0b00111100000010101011111010110101";
        ram[101] = "0b00111101000101101101110100100111";
        ram[102] = "0b10111101011001010000101111011000";
        ram[103] = "0b10111101011101001010110100011011";
        ram[104] = "0b00111101110101111111011110111110";
        ram[105] = "0b00111101010111010010000101011110";
        ram[106] = "0b00111110000101000101111110011110";
        ram[107] = "0b00111101001011001101010001110100";
        ram[108] = "0b00111100100011000110101101001000";
        ram[109] = "0b10111101010011110100100011111001";
        ram[110] = "0b10111101000001001100000110000000";
        ram[111] = "0b10111100100011011011010111001011";
        ram[112] = "0b10111101111110100100001011110010";
        ram[113] = "0b10111101110000100100001000100010";
        ram[114] = "0b00111101110110011101011011110001";
        ram[115] = "0b10111010101100000111011001010101";
        ram[116] = "0b10111100100001000000110100001011";
        ram[117] = "0b00111101101100011000011011001110";
        ram[118] = "0b00111101100110011110000111011001";
        ram[119] = "0b10111011111010111101000100011111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_12) {
meminst = new inference_conv2d_f3_2_2_12_ram("inference_conv2d_f3_2_2_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_12() {
    delete meminst;
}


};//endmodule
#endif
