// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_2_H__
#define __inference_conv2d_f3_0_1_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_2_ram) {
        ram[0] = "0b00111101000011000011101111100011";
        ram[1] = "0b10111101100000110011001010111010";
        ram[2] = "0b10111101111101011001111101101111";
        ram[3] = "0b00111100111010011111110110010101";
        ram[4] = "0b00111110001111100100110111100100";
        ram[5] = "0b10111100001011001001001111011101";
        ram[6] = "0b00111011111111100110010110110111";
        ram[7] = "0b00111110000011010010000100110110";
        ram[8] = "0b00111101101000011011000001101111";
        ram[9] = "0b10111101101101101011010100011000";
        ram[10] = "0b10111100100010001010010111110111";
        ram[11] = "0b10111100110111101100100000001100";
        ram[12] = "0b10111101100100011111011000001111";
        ram[13] = "0b10111100111101010011110100101110";
        ram[14] = "0b00111110000111101111010110101001";
        ram[15] = "0b10111100000001011000001010000001";
        ram[16] = "0b00111101010111000000001001000100";
        ram[17] = "0b10111100001100110000101101011011";
        ram[18] = "0b10111101101101011101000111011111";
        ram[19] = "0b10111100000100001000011010010110";
        ram[20] = "0b00111101100011010101000010110110";
        ram[21] = "0b10111101101110111111110000111101";
        ram[22] = "0b00111101101100111111001001001110";
        ram[23] = "0b00111110001100111100101000110010";
        ram[24] = "0b00111100100000010110100010110110";
        ram[25] = "0b10111101001101000101001101110100";
        ram[26] = "0b00111101011000000100000100000011";
        ram[27] = "0b10111101100011001110010011000011";
        ram[28] = "0b00111101010001001001111100000001";
        ram[29] = "0b10111100010010101101100101000010";
        ram[30] = "0b10111110010001110101010000101010";
        ram[31] = "0b00111101111001001000010100011011";
        ram[32] = "0b00111101111010001000010010000100";
        ram[33] = "0b00111101100100010111100000000101";
        ram[34] = "0b10111101100101110010001001000001";
        ram[35] = "0b10111110001101000111110001110100";
        ram[36] = "0b00111101011100111011100101010000";
        ram[37] = "0b10111101100001101100110101111010";
        ram[38] = "0b10111011000110001000111110000011";
        ram[39] = "0b10111100011000001111101010000001";
        ram[40] = "0b00111101100111111000000101100010";
        ram[41] = "0b10111101010011111011111100001010";
        ram[42] = "0b10111101110011110111001000101110";
        ram[43] = "0b10111101100111001000100011110101";
        ram[44] = "0b10111101011001111110101101010001";
        ram[45] = "0b00111101100011001111101011110000";
        ram[46] = "0b10111101001010111101010100000110";
        ram[47] = "0b00111100100001010100001100000000";
        ram[48] = "0b10111101000110101110000110110011";
        ram[49] = "0b10111101100100010010010100101111";
        ram[50] = "0b00111100011010011011100000101010";
        ram[51] = "0b10111101100011000110101101001000";
        ram[52] = "0b10111101101101100001001110111000";
        ram[53] = "0b00111101110000010011011011011010";
        ram[54] = "0b10111101101111101000000110010110";
        ram[55] = "0b10111100101100001010101101100100";
        ram[56] = "0b00111101100110100100010111111100";
        ram[57] = "0b10111110000001010000010111010001";
        ram[58] = "0b10111100011100110111110011001111";
        ram[59] = "0b00111110000001011101010110110010";
        ram[60] = "0b10111101000010111001100010100000";
        ram[61] = "0b10111101110000000000110101011111";
        ram[62] = "0b10111101010110101101111000100010";
        ram[63] = "0b00111011010001001010110001101101";
        ram[64] = "0b00111101110100010011100000110111";
        ram[65] = "0b10111101101111100111111111000000";
        ram[66] = "0b10111101101000011100011010000001";
        ram[67] = "0b10111101001100110000101011101111";
        ram[68] = "0b10111101111001100011001100000101";
        ram[69] = "0b00111101100011101110001001111001";
        ram[70] = "0b00111101110000111101111000101100";
        ram[71] = "0b10111101101111111000001100000010";
        ram[72] = "0b00111101001101001000001000111000";
        ram[73] = "0b10111100010010011100000111101011";
        ram[74] = "0b00111101011101010101100110110100";
        ram[75] = "0b10111101000110011101011101000010";
        ram[76] = "0b00111100111000100100101001111000";
        ram[77] = "0b00111101101000011000010101111110";
        ram[78] = "0b00111011111100011110000100101110";
        ram[79] = "0b10111101011101001001001010010100";
        ram[80] = "0b00111101111111110000101100101000";
        ram[81] = "0b10111101101000011110100111100101";
        ram[82] = "0b00111110000000001010000000101100";
        ram[83] = "0b00111110010011100101110100011000";
        ram[84] = "0b00111011101010001110010000100101";
        ram[85] = "0b00111011110000011111100010011110";
        ram[86] = "0b10111100101101000001011000011101";
        ram[87] = "0b10111110000100101000010110101001";
        ram[88] = "0b10111101010001010101011101011000";
        ram[89] = "0b10111110000011100110001011011100";
        ram[90] = "0b10111110001101110010001101101000";
        ram[91] = "0b10111110001101010111000011000101";
        ram[92] = "0b00111101100110011001001101000010";
        ram[93] = "0b10111100110000011110000000111111";
        ram[94] = "0b10111100110110001100000011110111";
        ram[95] = "0b10111101111011110111110000100100";
        ram[96] = "0b10111101010111100010101011000011";
        ram[97] = "0b00111100111111110000000011000111";
        ram[98] = "0b10111000101111001111100100111001";
        ram[99] = "0b10111101111111011110100000101101";
        ram[100] = "0b10111101111010011001100111011101";
        ram[101] = "0b10111011010000101110010111000011";
        ram[102] = "0b00111100011011100001111100101101";
        ram[103] = "0b00111100111111101000001001010001";
        ram[104] = "0b00111101001101010101101011110110";
        ram[105] = "0b00111100111110011011100000011101";
        ram[106] = "0b00111101111000110100100001101111";
        ram[107] = "0b00111101111101100101111101010010";
        ram[108] = "0b00111100111101110000110101001000";
        ram[109] = "0b00111110010000001010100101011000";
        ram[110] = "0b10111011110110000101100101110011";
        ram[111] = "0b10111101100110101010000001010010";
        ram[112] = "0b10111101001011111101110010110111";
        ram[113] = "0b00111101101111001100110010010111";
        ram[114] = "0b10111101000010001010101011111111";
        ram[115] = "0b10111101010110011011111010000011";
        ram[116] = "0b00111100000000101011101011010000";
        ram[117] = "0b10111100100101010010101110101011";
        ram[118] = "0b00111101010110010101111000001010";
        ram[119] = "0b10111011011110111011010100011000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_2) {
meminst = new inference_conv2d_f3_0_1_2_ram("inference_conv2d_f3_0_1_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_2() {
    delete meminst;
}


};//endmodule
#endif
