// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_4_11_H__
#define __inference_conv2d_f3_2_4_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_4_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_4_11_ram) {
        ram[0] = "0b10111011011110111101001100100000";
        ram[1] = "0b10111101010010110010010111101001";
        ram[2] = "0b00111100101001011110010010010110";
        ram[3] = "0b00111101110000010010010001001010";
        ram[4] = "0b10111101000010010111110000110000";
        ram[5] = "0b00111011011111001110101101001110";
        ram[6] = "0b10111110001110101001100111111010";
        ram[7] = "0b10111101101110100011010100001101";
        ram[8] = "0b00111010001010111000001111101100";
        ram[9] = "0b00111100101011010110010000011100";
        ram[10] = "0b10111101111100001101011110111111";
        ram[11] = "0b10111100110001001001010010000101";
        ram[12] = "0b10111101100000101001110111010101";
        ram[13] = "0b10111100111100011111010000000011";
        ram[14] = "0b10111101100011011001100001101111";
        ram[15] = "0b10111101010110010110001000100001";
        ram[16] = "0b00111101101110100110000001000001";
        ram[17] = "0b10111110010100110110111010110101";
        ram[18] = "0b10111100101000000001000011100010";
        ram[19] = "0b00111101100010111011101111001110";
        ram[20] = "0b00111101100010001100000100000100";
        ram[21] = "0b10111101101011011101100010011011";
        ram[22] = "0b00111101100001001010111010010011";
        ram[23] = "0b10111101111001111101000110111011";
        ram[24] = "0b00111101110111101111010000010111";
        ram[25] = "0b10111101111111001100000110000111";
        ram[26] = "0b00111101111110111111111100000100";
        ram[27] = "0b00111101111111100110110011010011";
        ram[28] = "0b10111100001000011010101110000001";
        ram[29] = "0b00111100110111000110100001001011";
        ram[30] = "0b00111101101100100010000011001010";
        ram[31] = "0b00111101100001010101101001110000";
        ram[32] = "0b10111110000110011001110111001011";
        ram[33] = "0b10111100101000110010011110111000";
        ram[34] = "0b10111110001100011000011100011110";
        ram[35] = "0b10111101000010101101010001010101";
        ram[36] = "0b10111100010001010001010110110100";
        ram[37] = "0b00111101101110010111001100000011";
        ram[38] = "0b10111101011111100000011110111101";
        ram[39] = "0b00111110000001110101000110001011";
        ram[40] = "0b00111101100110101010000011001011";
        ram[41] = "0b00111100111010010110101001011101";
        ram[42] = "0b00111100111010010001001111000000";
        ram[43] = "0b10111101011010100000100101101110";
        ram[44] = "0b00111101101100110000001010011001";
        ram[45] = "0b10111101011001001101000111011100";
        ram[46] = "0b10111101100001101111010100011100";
        ram[47] = "0b00111010111001000010010011011000";
        ram[48] = "0b00111101001000000101100101010111";
        ram[49] = "0b00111101001001100100000110110011";
        ram[50] = "0b10111110001001000110000111111010";
        ram[51] = "0b00111100110001100010001101100101";
        ram[52] = "0b00111101001101100111111110111001";
        ram[53] = "0b10111010101011011111001111000100";
        ram[54] = "0b00111101001111110010100000011001";
        ram[55] = "0b00111100100010010000100000011100";
        ram[56] = "0b00111101111010000111010101001111";
        ram[57] = "0b00111100111111000011100110100010";
        ram[58] = "0b10111101100110110111001100110000";
        ram[59] = "0b10111101010011110010010100011100";
        ram[60] = "0b00111110000111111111111110111101";
        ram[61] = "0b10111011010011100111000000010000";
        ram[62] = "0b00111101100111101000111010100100";
        ram[63] = "0b00111101110000001010101110011001";
        ram[64] = "0b00111101101001100111111010101101";
        ram[65] = "0b00111100000001001001101011011010";
        ram[66] = "0b00111101101100110000100110111011";
        ram[67] = "0b00111011010100010110011010010000";
        ram[68] = "0b00111101111000000000111100110100";
        ram[69] = "0b00111011110101101101000100110011";
        ram[70] = "0b10111101111000101000100110011000";
        ram[71] = "0b00111101001100111111111000011001";
        ram[72] = "0b10111101100110000100000000011000";
        ram[73] = "0b00111101010010101010110011001100";
        ram[74] = "0b10111100111001110111110001000110";
        ram[75] = "0b00111101101000110101100010110000";
        ram[76] = "0b10111101100110001000001010000110";
        ram[77] = "0b10111101001100100011000101011011";
        ram[78] = "0b00111101000000010100100110010001";
        ram[79] = "0b00111110001110001111000100001011";
        ram[80] = "0b10111101110111111110111100111001";
        ram[81] = "0b10111101100000111100111100101101";
        ram[82] = "0b10111101111100101001010011011101";
        ram[83] = "0b10111101101100110011011010110110";
        ram[84] = "0b00111101101111011100111000101100";
        ram[85] = "0b10111101001001101100100010100111";
        ram[86] = "0b10111100101100000010001101111111";
        ram[87] = "0b10111011111101110101110110011010";
        ram[88] = "0b00111101111110010111011011111111";
        ram[89] = "0b00111101000110011111111111110001";
        ram[90] = "0b10111101111110010111011011111111";
        ram[91] = "0b00111100111000110000001111011011";
        ram[92] = "0b00111101101101000101110110101101";
        ram[93] = "0b00111101011011110000111011100001";
        ram[94] = "0b00111010111010001110010010000101";
        ram[95] = "0b10111101010101111110000011100010";
        ram[96] = "0b10111101101010001000100111110111";
        ram[97] = "0b00111011100001000101010000001101";
        ram[98] = "0b00111110001100010001000101101011";
        ram[99] = "0b00111101001010010100010000010111";
        ram[100] = "0b00111011100001000111100110110111";
        ram[101] = "0b10111110000011110001001111001111";
        ram[102] = "0b10111101000100100000010010010101";
        ram[103] = "0b10111101110000100000110011101011";
        ram[104] = "0b00111101010010011101100010101100";
        ram[105] = "0b10111011111010000001000000011111";
        ram[106] = "0b10111101110001100010111110001111";
        ram[107] = "0b10111100011101111111110010010001";
        ram[108] = "0b10111101011111101001111010100001";
        ram[109] = "0b00111110001000011000101100001101";
        ram[110] = "0b10111101101100111100011111100011";
        ram[111] = "0b00111101110111011100100111000101";
        ram[112] = "0b00111101001111000000111100001111";
        ram[113] = "0b00111100101010001110101101111100";
        ram[114] = "0b00111101101110101111101010001101";
        ram[115] = "0b10111011100000100001011000000101";
        ram[116] = "0b10111101001100011111111110001100";
        ram[117] = "0b00111011111001011000001011010001";
        ram[118] = "0b10111110000010100001110111111100";
        ram[119] = "0b10111101110000011001011000010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_4_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_4_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_4_11) {
meminst = new inference_conv2d_f3_2_4_11_ram("inference_conv2d_f3_2_4_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_4_11() {
    delete meminst;
}


};//endmodule
#endif
