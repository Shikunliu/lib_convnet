// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_2_H__
#define __inference_conv2d_f3_4_1_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_2_ram) {
        ram[0] = "0b00111101011100000000011110011010";
        ram[1] = "0b10111101001110010011000001101110";
        ram[2] = "0b00111101110110001000000110100001";
        ram[3] = "0b10111101101100011110101101111000";
        ram[4] = "0b10111101100001001010010101001011";
        ram[5] = "0b00111101111010001101110110100101";
        ram[6] = "0b10111101110011101101101100101111";
        ram[7] = "0b00111110000010101111111011100111";
        ram[8] = "0b00111101000110111110001100111011";
        ram[9] = "0b10111101001100100010100101100011";
        ram[10] = "0b10111011110111010010110100101101";
        ram[11] = "0b00111110001101111000011110001011";
        ram[12] = "0b10111101100010101101010111110101";
        ram[13] = "0b10111100110101010111110000110011";
        ram[14] = "0b10111101000010101011001000100110";
        ram[15] = "0b00111001011001001100000011001110";
        ram[16] = "0b10111101100010100010010011011010";
        ram[17] = "0b10111100000011000001110000111000";
        ram[18] = "0b10111110001001010010001111110110";
        ram[19] = "0b00111110000000001111101001011001";
        ram[20] = "0b00111101000001100011111011111001";
        ram[21] = "0b00111100101101110010110011110011";
        ram[22] = "0b00111100001101010011111100010010";
        ram[23] = "0b10111100110110001101010111110000";
        ram[24] = "0b00111100000110001101010000001100";
        ram[25] = "0b10111110010010111100101110100011";
        ram[26] = "0b00111110000110100100010110010001";
        ram[27] = "0b00111010011110101111110100001100";
        ram[28] = "0b00111110001011110111111010000000";
        ram[29] = "0b10111110000100111101100010011101";
        ram[30] = "0b00111101111111000010111111000111";
        ram[31] = "0b00111101100101010010000110000000";
        ram[32] = "0b00111110010010100110001001100111";
        ram[33] = "0b00111010101011110111010001001100";
        ram[34] = "0b00111101111011111001111101000101";
        ram[35] = "0b00111101001000011110110010111010";
        ram[36] = "0b10111101101001011111101111101011";
        ram[37] = "0b10111101001010001101110110100101";
        ram[38] = "0b10111101011000010111101101111011";
        ram[39] = "0b00111110001110001011001000100000";
        ram[40] = "0b10111110001001010011100100110010";
        ram[41] = "0b10111101010000111111001010111001";
        ram[42] = "0b00111101111111011101111000110111";
        ram[43] = "0b10111101101011111010101110110010";
        ram[44] = "0b10111101011110101110100101110101";
        ram[45] = "0b10111101101000011000100001010011";
        ram[46] = "0b10111101001100011000100011011001";
        ram[47] = "0b10111101101011011000100001111111";
        ram[48] = "0b00111110001111010000111101100010";
        ram[49] = "0b00111100110011101001000111001001";
        ram[50] = "0b00111101100110100101001100001010";
        ram[51] = "0b10111110001101001001101111101001";
        ram[52] = "0b10111101001110110000001011010110";
        ram[53] = "0b10111100100111101111101011001101";
        ram[54] = "0b10111101100000010000111011110100";
        ram[55] = "0b00111101000110100110000101110101";
        ram[56] = "0b00111101011111111100000100010110";
        ram[57] = "0b00111101100110111101101110000110";
        ram[58] = "0b00111101000101000100001111010100";
        ram[59] = "0b00111101000100011010100110010001";
        ram[60] = "0b00111110001000010101000010011000";
        ram[61] = "0b00111011101111100110101001110100";
        ram[62] = "0b00111011100010100010111011000011";
        ram[63] = "0b10111101100110100111011100011101";
        ram[64] = "0b00111110001010100001001001110011";
        ram[65] = "0b10111110001101100111001010111001";
        ram[66] = "0b00111011010011011010010100001111";
        ram[67] = "0b10111101110010111110110101011001";
        ram[68] = "0b10111101000111010011110110010011";
        ram[69] = "0b00111101001011001110101111010110";
        ram[70] = "0b00111100010111101110001101010000";
        ram[71] = "0b10111101100110101110101110110111";
        ram[72] = "0b10111100111001010101010010000011";
        ram[73] = "0b00111100100110000000001100101100";
        ram[74] = "0b00111100101011111111111101101100";
        ram[75] = "0b00111101100010111110001010100111";
        ram[76] = "0b10111101111000010000011110111000";
        ram[77] = "0b00111110001001111001110110010001";
        ram[78] = "0b10111101111010011100010111100111";
        ram[79] = "0b10111100100110101000110110000000";
        ram[80] = "0b10111101010000110111010111110001";
        ram[81] = "0b10111101000100001010010001011101";
        ram[82] = "0b00111100010101111100011111010011";
        ram[83] = "0b00111100000000011000011101001001";
        ram[84] = "0b00111110000011000010010000111110";
        ram[85] = "0b00111101110000101100000011001101";
        ram[86] = "0b10111110001110111001000100101110";
        ram[87] = "0b00111110000001011110100100011000";
        ram[88] = "0b10111101010000001100010010000001";
        ram[89] = "0b00111110001100011010111010110100";
        ram[90] = "0b10111110001000010100110101110010";
        ram[91] = "0b10111100111110110000110001000110";
        ram[92] = "0b10111101011110110010111011100000";
        ram[93] = "0b10111110000111110001100001000100";
        ram[94] = "0b00111101100010100111101100011001";
        ram[95] = "0b10111001110101110100011111010000";
        ram[96] = "0b10111100000101100110111110000011";
        ram[97] = "0b00111101101101100101000100000010";
        ram[98] = "0b10111110001010111011110011110101";
        ram[99] = "0b00111110000000000010011001000110";
        ram[100] = "0b00111110010010010010000111001101";
        ram[101] = "0b00111100111000011001011000011101";
        ram[102] = "0b10111101011101011010110101000110";
        ram[103] = "0b10111101011110011000010101000010";
        ram[104] = "0b00111101111101111100100000001000";
        ram[105] = "0b10111110000000001110010111100110";
        ram[106] = "0b10111101111010000010100101001010";
        ram[107] = "0b10111101011100010001000001000011";
        ram[108] = "0b00111100100111111110111110001010";
        ram[109] = "0b00111101001011111000010111100101";
        ram[110] = "0b00111101110111000000101010001101";
        ram[111] = "0b00111101001100111111100111101000";
        ram[112] = "0b00111101000100010111001100001010";
        ram[113] = "0b00111110000000011010011101011101";
        ram[114] = "0b00111101000100011100001111111101";
        ram[115] = "0b00111101110101011111111101100001";
        ram[116] = "0b10111100000000010000001001111111";
        ram[117] = "0b10111101111100101100000001100010";
        ram[118] = "0b00111010111101101111011010010111";
        ram[119] = "0b10111110010100101100100010000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_2) {
meminst = new inference_conv2d_f3_4_1_2_ram("inference_conv2d_f3_4_1_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_2() {
    delete meminst;
}


};//endmodule
#endif
