// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_0_H__
#define __inference_conv2d_f3_1_3_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_0_ram) {
        ram[0] = "0b00111101110111001100110110010110";
        ram[1] = "0b10111101100110011011000111100000";
        ram[2] = "0b00111100000000010010101111101111";
        ram[3] = "0b10111101011111110010101110101010";
        ram[4] = "0b00111101011000111101111100011101";
        ram[5] = "0b00111101010011111011011101001000";
        ram[6] = "0b00111101000011010101110000001001";
        ram[7] = "0b10111101011000000101111010010101";
        ram[8] = "0b00111011100000101111110100001011";
        ram[9] = "0b00111100011100000100001010001000";
        ram[10] = "0b10111101111011111101000010001101";
        ram[11] = "0b10111100000101110100001011011101";
        ram[12] = "0b00111101101101111001111010101010";
        ram[13] = "0b00111101100010100111111101100101";
        ram[14] = "0b00111101001101100000001111001000";
        ram[15] = "0b10111101001010011010110010111101";
        ram[16] = "0b00111101000110010011001011110010";
        ram[17] = "0b10111101100011010011011110001100";
        ram[18] = "0b10111101011000010110110101010011";
        ram[19] = "0b00111110000111110100110110111110";
        ram[20] = "0b10111100110010000000110010101001";
        ram[21] = "0b00111100000110000001110000001011";
        ram[22] = "0b10111110000011110000010011011110";
        ram[23] = "0b10111101000111000101010000101001";
        ram[24] = "0b00111101001010011010000111010101";
        ram[25] = "0b00111100101010011011101010101111";
        ram[26] = "0b00111101110010100100010000011001";
        ram[27] = "0b00111100000100001000001001001110";
        ram[28] = "0b00111100100001010111101010010011";
        ram[29] = "0b00111101000101101100100110100110";
        ram[30] = "0b10111101110101100000110100000010";
        ram[31] = "0b00111101100000101001100110111110";
        ram[32] = "0b10111101011001101110000101100110";
        ram[33] = "0b00111101001101101011111100001111";
        ram[34] = "0b10111101111000000011000101001000";
        ram[35] = "0b00111100010111100010110001110001";
        ram[36] = "0b00111101100110010011111001000101";
        ram[37] = "0b00111100001000101111111101110100";
        ram[38] = "0b00111101101100111011011010100100";
        ram[39] = "0b10111101101111111000001001101111";
        ram[40] = "0b00111101100100011000011110100101";
        ram[41] = "0b00111110001000011101101001111011";
        ram[42] = "0b00111101011110000111001111001010";
        ram[43] = "0b00111101010000011111011111010111";
        ram[44] = "0b00111100011101111011000111101000";
        ram[45] = "0b00111101000111000101000101101111";
        ram[46] = "0b10111101000010011110001101011110";
        ram[47] = "0b10111100110010110001001000010111";
        ram[48] = "0b10111101101010110010111011100000";
        ram[49] = "0b00111100100010011010011100010011";
        ram[50] = "0b00111101110111000001001011110001";
        ram[51] = "0b00111101110111110011001110000111";
        ram[52] = "0b10111101100001110000101010101001";
        ram[53] = "0b10111101000000011111000111011101";
        ram[54] = "0b00111101101101111010110100010101";
        ram[55] = "0b00111101101101011011010110011100";
        ram[56] = "0b10111101110001100101001111001010";
        ram[57] = "0b00111110000101001011011110110011";
        ram[58] = "0b00111101000011101000110000011111";
        ram[59] = "0b10111100100000110110101011101111";
        ram[60] = "0b00111101100101101010010000000001";
        ram[61] = "0b00111101100010111111111010011001";
        ram[62] = "0b10111101001010101101000111101011";
        ram[63] = "0b00111110000101100111010100010100";
        ram[64] = "0b10111101101111101101101000111110";
        ram[65] = "0b00111100101101001000001110010101";
        ram[66] = "0b10111011110101111000010001110110";
        ram[67] = "0b10111101110010011011011110010111";
        ram[68] = "0b10111101101110101000000100010011";
        ram[69] = "0b10111110000100111001011000000111";
        ram[70] = "0b00111110001110000000100111010101";
        ram[71] = "0b10111110000110011000100001001100";
        ram[72] = "0b00111101010110011000011001101001";
        ram[73] = "0b10111101010101010111011011110101";
        ram[74] = "0b00111101101000011110001001110011";
        ram[75] = "0b10111101101100001001111001001000";
        ram[76] = "0b10111110000100111101111010100100";
        ram[77] = "0b00111110001110111101001010110111";
        ram[78] = "0b00111110001101000110000101110100";
        ram[79] = "0b10111010111110100101110011111110";
        ram[80] = "0b10111110000101000001110101001011";
        ram[81] = "0b00111100010001000000001010001110";
        ram[82] = "0b00111110001110110111001111010010";
        ram[83] = "0b00111101000001011111011111100001";
        ram[84] = "0b00111100111010100011000001010101";
        ram[85] = "0b00111110000111101110001111010110";
        ram[86] = "0b00111101110011011011010100001111";
        ram[87] = "0b10111100111011110001111010011100";
        ram[88] = "0b00111110001101110010111010101110";
        ram[89] = "0b00111110000101001001010110011110";
        ram[90] = "0b00111101110010010001010001101110";
        ram[91] = "0b10111110001010101110001101100001";
        ram[92] = "0b10111101111100011110111110110111";
        ram[93] = "0b00111110010001001011101101011110";
        ram[94] = "0b10111100010100010101000110010111";
        ram[95] = "0b00111101101010111001010100101010";
        ram[96] = "0b00111101001000100001000110100011";
        ram[97] = "0b00111101110001111001011100010000";
        ram[98] = "0b00111110010000001011010001011011";
        ram[99] = "0b00111101010011100000000011011111";
        ram[100] = "0b10111011100010110010010011001100";
        ram[101] = "0b00111110010101000101100101010011";
        ram[102] = "0b00111101100000110010110111110101";
        ram[103] = "0b00111100000000110100001000010100";
        ram[104] = "0b10111100111110001011010110001001";
        ram[105] = "0b00111100010110001010001110011011";
        ram[106] = "0b10111110001000011001001011101010";
        ram[107] = "0b10111101010110110100110111101010";
        ram[108] = "0b10111101110001110000000110111111";
        ram[109] = "0b10111101110101100000010100100101";
        ram[110] = "0b00111100001111100001011010111100";
        ram[111] = "0b00111101100011100111000001100011";
        ram[112] = "0b10111110000000111000100111111000";
        ram[113] = "0b00111100011101100100101110110111";
        ram[114] = "0b10111100011101011010000000101011";
        ram[115] = "0b00111101110001100000100100111100";
        ram[116] = "0b10111100111101101010111101010100";
        ram[117] = "0b10111101100100000100111100111000";
        ram[118] = "0b00111101100011011111000000110011";
        ram[119] = "0b10111101100011010110000110001010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_0) {
meminst = new inference_conv2d_f3_1_3_0_ram("inference_conv2d_f3_1_3_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_0() {
    delete meminst;
}


};//endmodule
#endif
