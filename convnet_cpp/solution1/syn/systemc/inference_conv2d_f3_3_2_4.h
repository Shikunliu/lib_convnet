// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_4_H__
#define __inference_conv2d_f3_3_2_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_4_ram) {
        ram[0] = "0b10111100111100111010001110011011";
        ram[1] = "0b10111101110011001111111100100010";
        ram[2] = "0b10111101011011110000101100000000";
        ram[3] = "0b10111101100100010100000100010011";
        ram[4] = "0b00111101011010001110011110011011";
        ram[5] = "0b00111110000000010111001101110101";
        ram[6] = "0b10111101000111100111011101001111";
        ram[7] = "0b10111110001010010110111100100010";
        ram[8] = "0b10111101100001100100001000111001";
        ram[9] = "0b10111101010000110000101001110110";
        ram[10] = "0b00111101100111011010010110001010";
        ram[11] = "0b10111101110111010100001010000001";
        ram[12] = "0b10111101001110000011001100110010";
        ram[13] = "0b00111110000000110111011001001111";
        ram[14] = "0b10111110000111100111001001010100";
        ram[15] = "0b10111101100111000110001101111000";
        ram[16] = "0b10111100010010100111100100110101";
        ram[17] = "0b10111101000000100011010100101111";
        ram[18] = "0b10111101010111100111011101101010";
        ram[19] = "0b00111101011001001011011011001110";
        ram[20] = "0b10111011010100101001110011110000";
        ram[21] = "0b10111101000001000110001010110110";
        ram[22] = "0b10111011101110001111101001110010";
        ram[23] = "0b00111101100001101011111101111010";
        ram[24] = "0b00111101100000111000100010000000";
        ram[25] = "0b00111101101111110101101111100110";
        ram[26] = "0b10111011000011101001110010010000";
        ram[27] = "0b10111101010010110110110111010111";
        ram[28] = "0b10111110000101011100111011100001";
        ram[29] = "0b10111101100111100111010110000111";
        ram[30] = "0b00111101110100111011010110111111";
        ram[31] = "0b10111101000001110011000111010011";
        ram[32] = "0b00111101111111100100110011010111";
        ram[33] = "0b10111101000101000000010010110101";
        ram[34] = "0b10111100111100110110011001011111";
        ram[35] = "0b00111101000010001100000001100011";
        ram[36] = "0b00111101110011111001111111001011";
        ram[37] = "0b00111101011100011011110001010110";
        ram[38] = "0b00111101011101000010100100110010";
        ram[39] = "0b00111101001011111101100101110111";
        ram[40] = "0b00111101011000111000101001001001";
        ram[41] = "0b10111101001110110101011110101010";
        ram[42] = "0b10111101110001110100101101000000";
        ram[43] = "0b00111100100110111010110100111010";
        ram[44] = "0b00111010101011111011000100001000";
        ram[45] = "0b10111101100000111100100100011000";
        ram[46] = "0b10111011111111101011100001000010";
        ram[47] = "0b10111100111000011111101011111101";
        ram[48] = "0b10111100100001101010111011011011";
        ram[49] = "0b00111101100010011000110100101101";
        ram[50] = "0b10111110001000110000010000000100";
        ram[51] = "0b00111101011011100001101101100111";
        ram[52] = "0b00111101000110110111000100001010";
        ram[53] = "0b00111100000010101110100111011110";
        ram[54] = "0b00111110001001111001011101000110";
        ram[55] = "0b10111100110000011000101010101111";
        ram[56] = "0b10111110000010100110000010010001";
        ram[57] = "0b00111101011100001111000100000100";
        ram[58] = "0b10111110001001000111011010110000";
        ram[59] = "0b10111101000011111011101010001000";
        ram[60] = "0b00111101100100010001111001101011";
        ram[61] = "0b10111101110001001111100000101111";
        ram[62] = "0b00111101010111110010010110110000";
        ram[63] = "0b00111101100010101001111101010011";
        ram[64] = "0b00111101001100011101100110110010";
        ram[65] = "0b10111101111100011110000010000011";
        ram[66] = "0b10111101101010000011101100011101";
        ram[67] = "0b10111110010010001010101101010000";
        ram[68] = "0b10111101101100110010001110010100";
        ram[69] = "0b00111101000010110110001011110000";
        ram[70] = "0b00111101111000100010100100100000";
        ram[71] = "0b10111100111010100100100001110011";
        ram[72] = "0b10111101111110100001000000010111";
        ram[73] = "0b10111010111111001111000100000010";
        ram[74] = "0b10111101111000110101010100000100";
        ram[75] = "0b10111101100011010101111010110110";
        ram[76] = "0b00111101111011000101001000011110";
        ram[77] = "0b00111011101100001001001101011011";
        ram[78] = "0b10111100001000111100010101001100";
        ram[79] = "0b00111101110100111010001001011001";
        ram[80] = "0b10111110001001010010101100001010";
        ram[81] = "0b00111101110000011100010101001101";
        ram[82] = "0b10111100001001001001110100000011";
        ram[83] = "0b00111100101110101100001001110100";
        ram[84] = "0b10111011110111011100011000000100";
        ram[85] = "0b00111101101001101100101110001001";
        ram[86] = "0b00111100111010101100111000001010";
        ram[87] = "0b00111100110110100101100000000101";
        ram[88] = "0b00111100101010011010110101111000";
        ram[89] = "0b00111110000111001101010000100100";
        ram[90] = "0b10111101110111011000011010101001";
        ram[91] = "0b00111101101011110010000111101001";
        ram[92] = "0b10111011100000101000111111101000";
        ram[93] = "0b00111101111010011000101100101111";
        ram[94] = "0b00111101010100101010100000101001";
        ram[95] = "0b00111100001101100010010011101011";
        ram[96] = "0b10111101101001100011010110100100";
        ram[97] = "0b00111101010110010101011011001110";
        ram[98] = "0b00111110000011000000011001011011";
        ram[99] = "0b10111101101110010110000110011011";
        ram[100] = "0b00111011110011100000010001011010";
        ram[101] = "0b00111101100100000001101111100100";
        ram[102] = "0b00111110010000101001110011111110";
        ram[103] = "0b10111100101101000110001001110011";
        ram[104] = "0b00111101001111110000000010010001";
        ram[105] = "0b10111101011110000010010000011001";
        ram[106] = "0b10111100111010100100100110000000";
        ram[107] = "0b10111101110001100001111101011100";
        ram[108] = "0b10111110000110000011010011010010";
        ram[109] = "0b10111100101001100111011111001110";
        ram[110] = "0b10111101101011111101100111001000";
        ram[111] = "0b00111100110010010101000100010111";
        ram[112] = "0b10111101100011010100101000011011";
        ram[113] = "0b10111100100100000111110100100110";
        ram[114] = "0b10111101010101100101001110101111";
        ram[115] = "0b10111101010000101101100101001001";
        ram[116] = "0b00111110000001011010010101110110";
        ram[117] = "0b00111110010001000000011101000110";
        ram[118] = "0b10111100010110100110010001100101";
        ram[119] = "0b10111101100101111110001101001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_4) {
meminst = new inference_conv2d_f3_3_2_4_ram("inference_conv2d_f3_3_2_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_4() {
    delete meminst;
}


};//endmodule
#endif
