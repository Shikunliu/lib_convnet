// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_0_H__
#define __inference_conv2d_f3_2_2_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_0_ram) {
        ram[0] = "0b00111110001100100011001101011001";
        ram[1] = "0b00111101000011011111010101010110";
        ram[2] = "0b10111100011111011100110111110111";
        ram[3] = "0b00111110000100001010100010001111";
        ram[4] = "0b00111101111000111010000100001010";
        ram[5] = "0b00111101000000111101000011000000";
        ram[6] = "0b10111100010011111011111011110000";
        ram[7] = "0b00111101011111111111110001101111";
        ram[8] = "0b10111100010100011110111110110111";
        ram[9] = "0b00111101111000100011011111001110";
        ram[10] = "0b00111100110101110001100010000000";
        ram[11] = "0b10111101001000111001001100011000";
        ram[12] = "0b10111100110100010100011110111100";
        ram[13] = "0b00111101011111100111111100101100";
        ram[14] = "0b00111101111000111010100111110100";
        ram[15] = "0b00111101100100111110011111111001";
        ram[16] = "0b10111110000011011100010111010110";
        ram[17] = "0b00111110001000010000010100011000";
        ram[18] = "0b10111101100110001011101100001010";
        ram[19] = "0b00111101101000111111000011110001";
        ram[20] = "0b10111110010011111000011100100111";
        ram[21] = "0b10111110000101101111011011010111";
        ram[22] = "0b10111101000011011000101100000011";
        ram[23] = "0b10111101000011010110011010100000";
        ram[24] = "0b10111101000100111011011110001000";
        ram[25] = "0b10111110000011110100010111100001";
        ram[26] = "0b10111101101001000101001001011010";
        ram[27] = "0b00111101111101100111010101011000";
        ram[28] = "0b00111011100101110101000010101010";
        ram[29] = "0b00111101111101001001010000001100";
        ram[30] = "0b10111110010101011111011110000011";
        ram[31] = "0b00111110010011111110001010100100";
        ram[32] = "0b10111110000010101011101110001000";
        ram[33] = "0b10111110000010000001000100101100";
        ram[34] = "0b10111101101000010010110110101101";
        ram[35] = "0b10111101100100100000001011001100";
        ram[36] = "0b00111101000001111010011010111101";
        ram[37] = "0b00111101011001100000101101000111";
        ram[38] = "0b00111101000111010101010010001010";
        ram[39] = "0b00111101011111001110000011000110";
        ram[40] = "0b00111101101111111111010000001100";
        ram[41] = "0b00111100110010011001010110101011";
        ram[42] = "0b10111101010010100100111111100101";
        ram[43] = "0b00111100011011111010011010000001";
        ram[44] = "0b10111101000100011010111011001111";
        ram[45] = "0b10111011100001001000110101011000";
        ram[46] = "0b00111101100101111011011000001101";
        ram[47] = "0b00111100000011010111010100111110";
        ram[48] = "0b10111100011001100110110111110011";
        ram[49] = "0b00111100000010010000000011110000";
        ram[50] = "0b00111100110100100100010010100110";
        ram[51] = "0b10111101101110101000000110011001";
        ram[52] = "0b10111101110011000110001110010011";
        ram[53] = "0b00111101111000011101111000100111";
        ram[54] = "0b10111101000001111110100100111000";
        ram[55] = "0b00111010000010110111010110000011";
        ram[56] = "0b10111101101001100001011010001101";
        ram[57] = "0b00111101000100111111100110110010";
        ram[58] = "0b00111101101110010010101111000011";
        ram[59] = "0b10111101101111001011110001110001";
        ram[60] = "0b10111101000110010101110110011111";
        ram[61] = "0b00111101010100110100100101010011";
        ram[62] = "0b00111101100101011000100011010110";
        ram[63] = "0b00111101101011111100111011000101";
        ram[64] = "0b00111110010000101001110011111110";
        ram[65] = "0b10111101001111110011010110111011";
        ram[66] = "0b00111101011110011000110100011111";
        ram[67] = "0b10111101100010101001010111110001";
        ram[68] = "0b10111110000101001111011010011101";
        ram[69] = "0b00111101000000010001000101011101";
        ram[70] = "0b10111100101000101111011011011011";
        ram[71] = "0b00111101000001101010001100000010";
        ram[72] = "0b00111110000001101101011001010110";
        ram[73] = "0b10111101100111000001010101011010";
        ram[74] = "0b10111100111101010110101001000101";
        ram[75] = "0b10111100111010011011010000101110";
        ram[76] = "0b10111100001001001001101011101010";
        ram[77] = "0b00111101110001111100111100000001";
        ram[78] = "0b00111110001001010111001100100001";
        ram[79] = "0b00111110010101001011110111111101";
        ram[80] = "0b10111101101110001011100100011010";
        ram[81] = "0b00111101010000001100011101110000";
        ram[82] = "0b10111101110100111011010010110011";
        ram[83] = "0b00111101111010010000110001001110";
        ram[84] = "0b00111110000101011011111010100001";
        ram[85] = "0b10111101101010000000101001001101";
        ram[86] = "0b00111101101110000110011100011010";
        ram[87] = "0b10111101001010001110001111010100";
        ram[88] = "0b10111110000100011010100000100110";
        ram[89] = "0b10111101100100011011001000011100";
        ram[90] = "0b10111101001010100110111011010100";
        ram[91] = "0b00111101010110110101100111111001";
        ram[92] = "0b00111101100110000110100100100101";
        ram[93] = "0b00111101101010100000011011101010";
        ram[94] = "0b10111011110010110101111010100011";
        ram[95] = "0b10111101011011010101000100000111";
        ram[96] = "0b10111101011001001010001101101000";
        ram[97] = "0b00111101000111101110101000000110";
        ram[98] = "0b00111101011011111111010100100110";
        ram[99] = "0b10111100000010111001111011011010";
        ram[100] = "0b10111110001111000001100101111110";
        ram[101] = "0b00111100011011000010000111111101";
        ram[102] = "0b10111100100000011110010100010010";
        ram[103] = "0b00111100111001011001011111010101";
        ram[104] = "0b10111010000000100110000001100100";
        ram[105] = "0b10111011100100110101100011001101";
        ram[106] = "0b10111101110100010110010001000001";
        ram[107] = "0b10111110000011111111010011111101";
        ram[108] = "0b10111110001010000110011110101110";
        ram[109] = "0b10111011100101100101000010111010";
        ram[110] = "0b00111100011101111111111000111110";
        ram[111] = "0b00111110010111111110111110111111";
        ram[112] = "0b10111110000101010100011101011010";
        ram[113] = "0b10111101101011001101010100001000";
        ram[114] = "0b10111011111111010101001001100110";
        ram[115] = "0b10111110010010010001010011110101";
        ram[116] = "0b10111101000010100000100110001001";
        ram[117] = "0b00111100101001101111110010001110";
        ram[118] = "0b00111110010110000101110000100101";
        ram[119] = "0b00111101110000110110011101111001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_0) {
meminst = new inference_conv2d_f3_2_2_0_ram("inference_conv2d_f3_2_2_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_0() {
    delete meminst;
}


};//endmodule
#endif
