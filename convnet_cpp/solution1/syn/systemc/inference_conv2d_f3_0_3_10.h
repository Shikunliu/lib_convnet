// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_10_H__
#define __inference_conv2d_f3_0_3_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_10_ram) {
        ram[0] = "0b00111101110100100101101110111000";
        ram[1] = "0b00111100111101100100110101100100";
        ram[2] = "0b00111110001100011001000110011011";
        ram[3] = "0b00111010101000110000111110111010";
        ram[4] = "0b10111101001010000110111110100110";
        ram[5] = "0b10111010110010110011011100100000";
        ram[6] = "0b10111110010100101101111001000100";
        ram[7] = "0b10111101000010111000010001100011";
        ram[8] = "0b10111100110000010011010101010100";
        ram[9] = "0b10111101101001101011110101111100";
        ram[10] = "0b00111101110000000111111111000101";
        ram[11] = "0b10111110001000110100010110001101";
        ram[12] = "0b10111101011111010000001111001100";
        ram[13] = "0b10111101100100110001100011111100";
        ram[14] = "0b10111101111010001110100000100001";
        ram[15] = "0b10111100000101011010000000000101";
        ram[16] = "0b00111101010000101000110001101101";
        ram[17] = "0b00111101011011111110010011001010";
        ram[18] = "0b10111001100000110010110000110100";
        ram[19] = "0b10111110000001110010011110011010";
        ram[20] = "0b10111110010010011111011101110011";
        ram[21] = "0b10111101101010000110011101101010";
        ram[22] = "0b00111101001101110000000010011000";
        ram[23] = "0b00111101101110000100001111101100";
        ram[24] = "0b00111101100110110111100101101110";
        ram[25] = "0b10111110000010100101011110101000";
        ram[26] = "0b00111101010111011010110010000100";
        ram[27] = "0b10111101100111111000101101100110";
        ram[28] = "0b10111101010111010100100001111011";
        ram[29] = "0b10111101110001110011010100000110";
        ram[30] = "0b10111101100100100100101100011001";
        ram[31] = "0b10111101101011101001011100100010";
        ram[32] = "0b10111101010011100000001111101010";
        ram[33] = "0b00111101101100110010001011100101";
        ram[34] = "0b00111110001010000110100010111010";
        ram[35] = "0b10111110001100010010001001110101";
        ram[36] = "0b10111100100111010110000111011011";
        ram[37] = "0b10111101001110110100110000111100";
        ram[38] = "0b10111100111011000011100110101111";
        ram[39] = "0b00111101111111110000010111101010";
        ram[40] = "0b00111100110110100010110001100111";
        ram[41] = "0b00111101010010101100101110111011";
        ram[42] = "0b10111100111101011011001100001011";
        ram[43] = "0b10111100110000110110110011010010";
        ram[44] = "0b10111101001011111101000011011110";
        ram[45] = "0b10111101100100101101011011101101";
        ram[46] = "0b00111101111001111001010001100100";
        ram[47] = "0b00111101111101111010110011000101";
        ram[48] = "0b00111101000110011110100011111010";
        ram[49] = "0b00111110000110111100110010101111";
        ram[50] = "0b00111110001111100100011111011100";
        ram[51] = "0b00111010001001010111111110000001";
        ram[52] = "0b00111100111110001111000000001100";
        ram[53] = "0b10111101110100100110001010001001";
        ram[54] = "0b00111101010100111100010110010101";
        ram[55] = "0b10111101011001100110011100100010";
        ram[56] = "0b00111110000000100101100001001111";
        ram[57] = "0b00111110000010010111011101000010";
        ram[58] = "0b00111101001000110111110100010010";
        ram[59] = "0b10111101000101100011110100111110";
        ram[60] = "0b10111101100110111101110000100111";
        ram[61] = "0b00111100110011000101100100001010";
        ram[62] = "0b10111100001000010100011001110111";
        ram[63] = "0b00111110000010111101110000100111";
        ram[64] = "0b00111101001101111111110101001101";
        ram[65] = "0b10111100101010011110011110010000";
        ram[66] = "0b00111101111111101011010000100000";
        ram[67] = "0b10111110000011010101110110000001";
        ram[68] = "0b10111100111101000010011001000011";
        ram[69] = "0b10111110100000001111101001011001";
        ram[70] = "0b10111100101000111001100101100010";
        ram[71] = "0b00111100011010110000011011011111";
        ram[72] = "0b10111110010001011001011001000010";
        ram[73] = "0b00111101101001001101010100110111";
        ram[74] = "0b00111101100001111101000110000110";
        ram[75] = "0b00111100000000111100010011111100";
        ram[76] = "0b10111101001101001000111111011010";
        ram[77] = "0b10111110000101100000101100101101";
        ram[78] = "0b10111101010111010111011100100100";
        ram[79] = "0b10111100111111000001100110001100";
        ram[80] = "0b10111110000111011001011011101010";
        ram[81] = "0b00111100101101100110110101111010";
        ram[82] = "0b10111100100100011000010011000010";
        ram[83] = "0b10111011101101100110111011010010";
        ram[84] = "0b00111100011011100101100111100101";
        ram[85] = "0b10111101101101110101010100001110";
        ram[86] = "0b10111101001010100101010010000010";
        ram[87] = "0b10111101110100011011100010101010";
        ram[88] = "0b10111101111011111001111101000101";
        ram[89] = "0b00111101010100100110011100001011";
        ram[90] = "0b00111101100010100010000000111101";
        ram[91] = "0b10111101101111011011000001110010";
        ram[92] = "0b10111101011001011111000101111100";
        ram[93] = "0b00111101000000011100010101100111";
        ram[94] = "0b10111101011100101011100010000100";
        ram[95] = "0b10111101000100010101101000110000";
        ram[96] = "0b10111101001100001101001100111100";
        ram[97] = "0b00111110000001000111100100001100";
        ram[98] = "0b10111101100101001000110111001111";
        ram[99] = "0b00111110000100010010010101010111";
        ram[100] = "0b00111110010010100100011011100001";
        ram[101] = "0b10111100101000010001010111111010";
        ram[102] = "0b00111100100011011111010010110101";
        ram[103] = "0b10111101110010011011100100101010";
        ram[104] = "0b00111011111001101000100011110110";
        ram[105] = "0b10111100110010100010101110011101";
        ram[106] = "0b00111101101001011101110111000101";
        ram[107] = "0b00111101111100000000011110011010";
        ram[108] = "0b10111100110111000001010101110101";
        ram[109] = "0b00111101000101000100111001101100";
        ram[110] = "0b10111110010100100101101000100101";
        ram[111] = "0b10111101001110111010010101000010";
        ram[112] = "0b00111101010000011110111111111010";
        ram[113] = "0b00111110001001101110101101001111";
        ram[114] = "0b10111100101111001000110100011001";
        ram[115] = "0b00111101001000011011000101000110";
        ram[116] = "0b00111110010000101010010101100001";
        ram[117] = "0b10111101110100100010011111010000";
        ram[118] = "0b00111100101001000101110101111000";
        ram[119] = "0b10111110001110110001110101010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_10) {
meminst = new inference_conv2d_f3_0_3_10_ram("inference_conv2d_f3_0_3_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_10() {
    delete meminst;
}


};//endmodule
#endif
