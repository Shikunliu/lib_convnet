// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_9_H__
#define __inference_conv2d_f3_3_0_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_9_ram) {
        ram[0] = "0b10111101110001011011001011000111";
        ram[1] = "0b00111100111011001110111110111000";
        ram[2] = "0b00111100100110000100101101010000";
        ram[3] = "0b10111110000000101100110101111101";
        ram[4] = "0b10111110001011010001101110110101";
        ram[5] = "0b00111101001000001111011010100000";
        ram[6] = "0b10111101011101000111001110001010";
        ram[7] = "0b10111101010010010101001110110110";
        ram[8] = "0b10111110000100110001100011111100";
        ram[9] = "0b10111110000110011001010101101000";
        ram[10] = "0b00111101000100101011101001100111";
        ram[11] = "0b10111101000001010100110101000111";
        ram[12] = "0b00111101010101001111111101010001";
        ram[13] = "0b00111101110110000101101111100010";
        ram[14] = "0b00111101011100101111110010010010";
        ram[15] = "0b10111100100010011110110011101001";
        ram[16] = "0b10111101101110011100100001101011";
        ram[17] = "0b00111110010000111101101001110011";
        ram[18] = "0b00111101100011100100000110010010";
        ram[19] = "0b00111101101100011110011000111010";
        ram[20] = "0b00111101100101001110011111100001";
        ram[21] = "0b00111101100101011001110100111011";
        ram[22] = "0b10111101110101100011110000110010";
        ram[23] = "0b00111101100110001101111111100110";
        ram[24] = "0b10111101011011101001011110101000";
        ram[25] = "0b10111101100011000110001011110010";
        ram[26] = "0b10111101101011010100001110001101";
        ram[27] = "0b00111101101111110000001110011100";
        ram[28] = "0b10111101111011000001101010001011";
        ram[29] = "0b00111101011000100000001111001011";
        ram[30] = "0b10111110000100110100110111110000";
        ram[31] = "0b10111101110100101110010110011011";
        ram[32] = "0b10111100101011011001111001101001";
        ram[33] = "0b10111101111111111011011110100110";
        ram[34] = "0b10111101110100000110101100111000";
        ram[35] = "0b00111110000111001101111101101010";
        ram[36] = "0b00111101100000000110010000110001";
        ram[37] = "0b00111110001010101111011010000011";
        ram[38] = "0b10111100100011010000101011100000";
        ram[39] = "0b10111011100000001011011001110100";
        ram[40] = "0b10111011010000110000000011000110";
        ram[41] = "0b10111100000000111010000100101010";
        ram[42] = "0b10111101101011111001011110010000";
        ram[43] = "0b00111101001011110000010101110001";
        ram[44] = "0b10111100101001010001011100010001";
        ram[45] = "0b00111101000111001010110101001010";
        ram[46] = "0b10111100101010111000011111011001";
        ram[47] = "0b10111011100001011110101011100110";
        ram[48] = "0b00111101001011100101110101110110";
        ram[49] = "0b10111101110101011110100111100010";
        ram[50] = "0b10111101010110101001111101010011";
        ram[51] = "0b00111110000010110111111111100001";
        ram[52] = "0b10111101010001011001000010011000";
        ram[53] = "0b10111010011100010000011110100110";
        ram[54] = "0b10111100011100010101111101010011";
        ram[55] = "0b10111110000000101101000100101000";
        ram[56] = "0b00111100101000000101011111000100";
        ram[57] = "0b10111110000001011100110010000101";
        ram[58] = "0b10111101111100011010001110110001";
        ram[59] = "0b10111101010001110010011000101111";
        ram[60] = "0b10111101000111110100000011011000";
        ram[61] = "0b10111101100110010110011010111110";
        ram[62] = "0b10111101100110010110100000000001";
        ram[63] = "0b00111110000010010000100101101100";
        ram[64] = "0b00111101101110010011000110000111";
        ram[65] = "0b10111101100111011110011011010001";
        ram[66] = "0b10111100111010000001100010000011";
        ram[67] = "0b10111011101110110110100110100011";
        ram[68] = "0b10111100000000010100000000100111";
        ram[69] = "0b10111101100101011011101100010000";
        ram[70] = "0b10111011100101011110011100011101";
        ram[71] = "0b00111101101111000010101111001011";
        ram[72] = "0b10111110010010000101011101101101";
        ram[73] = "0b10111101000111100101100110111101";
        ram[74] = "0b00111101111010100111101111010101";
        ram[75] = "0b00111100101000101001010111110111";
        ram[76] = "0b10111011001010010100000111011000";
        ram[77] = "0b10111100000111111011010100111101";
        ram[78] = "0b00111101101000110100110011100100";
        ram[79] = "0b10111110011000010000101111101001";
        ram[80] = "0b00111101110001101101001010101010";
        ram[81] = "0b10111100110000010111101010001001";
        ram[82] = "0b00111101000100011100100100100000";
        ram[83] = "0b10111101111010001001101000000010";
        ram[84] = "0b00111110010001001000101111101011";
        ram[85] = "0b10111110010010011100101101101000";
        ram[86] = "0b10111101000001010111100010010101";
        ram[87] = "0b00111101001101100010011101010100";
        ram[88] = "0b00111100101010010010001101000101";
        ram[89] = "0b00111101100000100111101101100010";
        ram[90] = "0b10111101011000000010111011000100";
        ram[91] = "0b00111101011010001011100101000010";
        ram[92] = "0b00111101000011110000100010010111";
        ram[93] = "0b10111101100010101011000000100111";
        ram[94] = "0b00111101110110000111000101100001";
        ram[95] = "0b00111110000000111010101110000110";
        ram[96] = "0b10111110000001010001010101001000";
        ram[97] = "0b00111101101001110010011001110010";
        ram[98] = "0b10111101110111011011011011100101";
        ram[99] = "0b10111011101110100011100100110111";
        ram[100] = "0b10111110001101100000011011111011";
        ram[101] = "0b00111101101000100100100010010101";
        ram[102] = "0b00111110001001001101011011100100";
        ram[103] = "0b00111101110111000100011101011110";
        ram[104] = "0b10111101011110111000011101000101";
        ram[105] = "0b00111110000100000100100100100011";
        ram[106] = "0b00111110001000100110011111000111";
        ram[107] = "0b00111100100101011101100001000100";
        ram[108] = "0b00111100001001010011000111101001";
        ram[109] = "0b10111110001011001001001010011011";
        ram[110] = "0b10111100110111100011101001111110";
        ram[111] = "0b10111110000010001110000000000001";
        ram[112] = "0b00111101011110011001100111001111";
        ram[113] = "0b00111100100011100001011011100100";
        ram[114] = "0b10111101111011011101101101010101";
        ram[115] = "0b00111010100110010000101111010101";
        ram[116] = "0b00111110000111110010011011110010";
        ram[117] = "0b00111100011100110111101010110110";
        ram[118] = "0b00111110000110001001111101000001";
        ram[119] = "0b00111110000011111001000100011101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_9) {
meminst = new inference_conv2d_f3_3_0_9_ram("inference_conv2d_f3_3_0_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_9() {
    delete meminst;
}


};//endmodule
#endif
