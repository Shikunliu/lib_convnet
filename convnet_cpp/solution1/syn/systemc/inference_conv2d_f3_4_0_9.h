// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_0_9_H__
#define __inference_conv2d_f3_4_0_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_0_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_0_9_ram) {
        ram[0] = "0b00111101101010100100011100110001";
        ram[1] = "0b00111110001101000010100111100001";
        ram[2] = "0b10111101101111110011101000100010";
        ram[3] = "0b00111101000100110010100010011100";
        ram[4] = "0b00111101000100010101010100001101";
        ram[5] = "0b10111101100000111101010001011110";
        ram[6] = "0b00111101100101011000011110010100";
        ram[7] = "0b10111110000001110011101000110110";
        ram[8] = "0b00111101100111111011011101110000";
        ram[9] = "0b10111101101001111011011001101011";
        ram[10] = "0b10111110010110111110101100011000";
        ram[11] = "0b00111101101110010100100001111110";
        ram[12] = "0b00111101100111010101001101111101";
        ram[13] = "0b00111110000111111001101110011001";
        ram[14] = "0b10111101100111111111010000110100";
        ram[15] = "0b10111101111001100111000011100011";
        ram[16] = "0b00111101110011000111111011110001";
        ram[17] = "0b10111100001011100111001011011010";
        ram[18] = "0b00111110000101111000100000010010";
        ram[19] = "0b00111110010000001001110000111101";
        ram[20] = "0b10111101001011000100101100110010";
        ram[21] = "0b10111101001100010000110010011000";
        ram[22] = "0b00111101001111110001101111101111";
        ram[23] = "0b10111101101110010100011110001101";
        ram[24] = "0b00111101100011100001010111011000";
        ram[25] = "0b00111101111000111111010011101101";
        ram[26] = "0b00111110001001001110010101001111";
        ram[27] = "0b00111011111100010101000011100110";
        ram[28] = "0b10111101100111001110000010000011";
        ram[29] = "0b10111011110111111110011001011010";
        ram[30] = "0b10111100110101111011111001100011";
        ram[31] = "0b10111100110101001110011110111001";
        ram[32] = "0b00111110001111010001001010001000";
        ram[33] = "0b10111100100110010011010011110000";
        ram[34] = "0b10111101001001001101100001110111";
        ram[35] = "0b00111101011111100011111001011111";
        ram[36] = "0b00111100011011110110010010100111";
        ram[37] = "0b10111101100001111010111111011101";
        ram[38] = "0b10111101101000010111001001000001";
        ram[39] = "0b00111110000101111000001101011010";
        ram[40] = "0b00111101110101101011010101001110";
        ram[41] = "0b10111101000010000101101001011100";
        ram[42] = "0b00111100010011010100100010001000";
        ram[43] = "0b00111101001101110010110110010100";
        ram[44] = "0b10111100100100011101010101001010";
        ram[45] = "0b10111100100001111001100000001111";
        ram[46] = "0b00111110001000101110101000010000";
        ram[47] = "0b10111101111100001100001101001100";
        ram[48] = "0b10111101110001111110110001111000";
        ram[49] = "0b00111101000011110101010101011000";
        ram[50] = "0b00111101100010111001100001101010";
        ram[51] = "0b00111100001011111011101001101101";
        ram[52] = "0b10111101111101111111100101010001";
        ram[53] = "0b00111110001101111001010001100100";
        ram[54] = "0b00111101011101001010101010010111";
        ram[55] = "0b00111110001110010011100110101000";
        ram[56] = "0b00111110000110010000101011111110";
        ram[57] = "0b10111101101100110011110010001000";
        ram[58] = "0b00111101010010100010001000010010";
        ram[59] = "0b00111101110010111110001111101001";
        ram[60] = "0b10111101110100000001000100001010";
        ram[61] = "0b00111100111011001001001111011101";
        ram[62] = "0b00111100110000101000101001010100";
        ram[63] = "0b00111101010100000111000111010011";
        ram[64] = "0b00111100100000110000100001011110";
        ram[65] = "0b10111110000111111011010011000100";
        ram[66] = "0b00111101100111110111001010011001";
        ram[67] = "0b10111101101010001010001000010101";
        ram[68] = "0b10111101000011101111011001110011";
        ram[69] = "0b00111110000000101111100110000111";
        ram[70] = "0b00111101100011010110100111010011";
        ram[71] = "0b00111101101011111111000011001100";
        ram[72] = "0b10111101010101101011010010010010";
        ram[73] = "0b00111101110000110111110000101110";
        ram[74] = "0b00111101100001010011010000001111";
        ram[75] = "0b10111101100101011010100110001101";
        ram[76] = "0b10111110000100110011101001000111";
        ram[77] = "0b00111101100010010010100011000110";
        ram[78] = "0b10111101011101111000101110001000";
        ram[79] = "0b10111101111001101111100010101101";
        ram[80] = "0b00111110000010111000101101101001";
        ram[81] = "0b00111101000100010000111101101101";
        ram[82] = "0b00111101101000011111110100100011";
        ram[83] = "0b10111101100110011101011011010110";
        ram[84] = "0b00111110000110111000011010110001";
        ram[85] = "0b00111101001111100111110111101010";
        ram[86] = "0b00111110001011110110011100101100";
        ram[87] = "0b10111101101001011111000111011010";
        ram[88] = "0b00111101110011001010100101001110";
        ram[89] = "0b00111110000100100110111101100001";
        ram[90] = "0b10111101000010111011110001111100";
        ram[91] = "0b10111100111000001011011111010001";
        ram[92] = "0b00111110001000111001100011101001";
        ram[93] = "0b10111100000100011010110101000111";
        ram[94] = "0b10111100010011101000101100010011";
        ram[95] = "0b00111101100110101010110110001000";
        ram[96] = "0b00111100100101000100110010111110";
        ram[97] = "0b10111100101000110111111111001100";
        ram[98] = "0b00111110001100000011110001001011";
        ram[99] = "0b10111101000100011110000111100000";
        ram[100] = "0b00111101101011000111000111100011";
        ram[101] = "0b10111110001101001011101100011011";
        ram[102] = "0b00111101100110110111110100110100";
        ram[103] = "0b00111100100111100010100000111111";
        ram[104] = "0b10111100110000101111010000111100";
        ram[105] = "0b00111101001100011001010110100100";
        ram[106] = "0b10111110000111100110101101000000";
        ram[107] = "0b00111110001010011000011000110100";
        ram[108] = "0b10111101100011011001101001010010";
        ram[109] = "0b00111110000001111001101011110010";
        ram[110] = "0b10111101010010111010010110111011";
        ram[111] = "0b10111101010010101100111101001100";
        ram[112] = "0b00111101000100101111101100110101";
        ram[113] = "0b10111101110000111101100001001100";
        ram[114] = "0b00111010010100101111101101101110";
        ram[115] = "0b00111110000001001010100001111110";
        ram[116] = "0b10111101011000001111110100100000";
        ram[117] = "0b00111011110010001000111000100100";
        ram[118] = "0b10111100111111110110101111110001";
        ram[119] = "0b10111100100000001000010011110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_0_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_0_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_0_9) {
meminst = new inference_conv2d_f3_4_0_9_ram("inference_conv2d_f3_4_0_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_0_9() {
    delete meminst;
}


};//endmodule
#endif
