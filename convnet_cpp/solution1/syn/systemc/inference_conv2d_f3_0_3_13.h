// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_13_H__
#define __inference_conv2d_f3_0_3_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_13_ram) {
        ram[0] = "0b10111100100001111010000111101011";
        ram[1] = "0b00111101100111011010000011101101";
        ram[2] = "0b10111101011110101101111000100010";
        ram[3] = "0b10111101010110111001101110011101";
        ram[4] = "0b00111110001111011100011000011001";
        ram[5] = "0b10111101001111100000101011100011";
        ram[6] = "0b10111101010001111111001111101010";
        ram[7] = "0b00111101100111000100111100101110";
        ram[8] = "0b00111100111000111010000010000100";
        ram[9] = "0b10111100001101000110001011011110";
        ram[10] = "0b10111101000100100101000110100111";
        ram[11] = "0b10111101100101010011111110100101";
        ram[12] = "0b00111011110000100111010010011010";
        ram[13] = "0b00111101011101010110010110001101";
        ram[14] = "0b00111101010110111111010110010100";
        ram[15] = "0b00111100001001111000111010111010";
        ram[16] = "0b10111101011101110100001000100001";
        ram[17] = "0b10111101010000110011011001100110";
        ram[18] = "0b10111101111011010101001110001011";
        ram[19] = "0b10111101110010110010011001101111";
        ram[20] = "0b10111101100001000010101101001011";
        ram[21] = "0b10111101101001001111101110100101";
        ram[22] = "0b00111101011010100010101000100101";
        ram[23] = "0b10111101100010101100100000111000";
        ram[24] = "0b00111101101010000000111100100000";
        ram[25] = "0b00111011111010001000010010100100";
        ram[26] = "0b10111100110111010011001110000010";
        ram[27] = "0b00111100000111011001101111000111";
        ram[28] = "0b00111110000010110101000100110111";
        ram[29] = "0b10111100010101100101111110001000";
        ram[30] = "0b00111101000111001010001011001110";
        ram[31] = "0b10111101111010010000011010001010";
        ram[32] = "0b00111110001001111100101011101010";
        ram[33] = "0b10111110001010111100010010001111";
        ram[34] = "0b10111110000000111000000010001000";
        ram[35] = "0b10111101111100011010000010001100";
        ram[36] = "0b10111110001111001001001000010100";
        ram[37] = "0b10111101001001110011100001101110";
        ram[38] = "0b10111101100110001000101001111110";
        ram[39] = "0b00111110001111110110001011111010";
        ram[40] = "0b00111101101001010010110110001111";
        ram[41] = "0b00111101011010010100101100000010";
        ram[42] = "0b10111101111110010000101110000101";
        ram[43] = "0b10111100001001100010101100001101";
        ram[44] = "0b00111110001010101010011100010110";
        ram[45] = "0b10111110000101111100111010010110";
        ram[46] = "0b10111101110000011011010000011010";
        ram[47] = "0b10111110000010010000110100010111";
        ram[48] = "0b00111101011110000011100100010010";
        ram[49] = "0b00111100111000111000101100100000";
        ram[50] = "0b00111101111110101111011011000111";
        ram[51] = "0b00111011010111001101101011100010";
        ram[52] = "0b00111101100101101001001111011011";
        ram[53] = "0b00111101110001011011101000011110";
        ram[54] = "0b00111011111100011000100010011001";
        ram[55] = "0b10111101010110001001110101101011";
        ram[56] = "0b10111011110011000100011101000001";
        ram[57] = "0b00111101100100010111101010110001";
        ram[58] = "0b00111110001111011100100100111111";
        ram[59] = "0b10111011001010100001010101101000";
        ram[60] = "0b00111100100111010100111111010010";
        ram[61] = "0b10111100101101110101010101101100";
        ram[62] = "0b10111101011000010000100110011011";
        ram[63] = "0b00111101101000100111010101101000";
        ram[64] = "0b10111100110011111101110010000001";
        ram[65] = "0b00111110000101000110100001000101";
        ram[66] = "0b10111100110010011101100110011110";
        ram[67] = "0b10111101101000101111010010110100";
        ram[68] = "0b10111101101000110000101001101001";
        ram[69] = "0b10111110000101110101100000011001";
        ram[70] = "0b00111101001000110000110100110000";
        ram[71] = "0b10111101001110011000100101011001";
        ram[72] = "0b10111101101111100010011111111100";
        ram[73] = "0b10111101001000000110000001111000";
        ram[74] = "0b10111101110011001111100011010111";
        ram[75] = "0b10111101010010001111110110111011";
        ram[76] = "0b00111110000100111000001001011110";
        ram[77] = "0b10111011111101000011110100101001";
        ram[78] = "0b10111101001000101010110010111000";
        ram[79] = "0b10111101100010010010110110110100";
        ram[80] = "0b00111101110011101101111011011011";
        ram[81] = "0b00111110010010000000101110101010";
        ram[82] = "0b10111101001001100011000010011100";
        ram[83] = "0b10111011000101101011011101100111";
        ram[84] = "0b00111110000110001100111111000000";
        ram[85] = "0b10111101101100001101001100010100";
        ram[86] = "0b10111110001000010010111110010000";
        ram[87] = "0b00111101110101011110011000110110";
        ram[88] = "0b10111101111011111010110001100000";
        ram[89] = "0b00111100111011001101101011110101";
        ram[90] = "0b00111101110100010100110010101001";
        ram[91] = "0b10111100111101000011111010010110";
        ram[92] = "0b10111110000000011111001100011111";
        ram[93] = "0b00111100011001001000100001000000";
        ram[94] = "0b10111100111000111100011000001110";
        ram[95] = "0b10111110010110010111111101100011";
        ram[96] = "0b10111101111000100010011100000111";
        ram[97] = "0b10111101101000100011101000000010";
        ram[98] = "0b10111101100101100001100000111011";
        ram[99] = "0b00111110000000101011111101010101";
        ram[100] = "0b10111011010011011111100111110011";
        ram[101] = "0b10111101110010111101010000111100";
        ram[102] = "0b10111101011011110011011101011011";
        ram[103] = "0b00111011110000110001110100001011";
        ram[104] = "0b10111101111010001001001000100101";
        ram[105] = "0b10111101101000010110101011000001";
        ram[106] = "0b00111110001101111101111111100011";
        ram[107] = "0b10111101011100110010011001101000";
        ram[108] = "0b00111101111010000101000000010110";
        ram[109] = "0b10111110001000111100101100111110";
        ram[110] = "0b00111100101010101001111000111001";
        ram[111] = "0b00111110000001001000100001000000";
        ram[112] = "0b10111110000101110001100010101000";
        ram[113] = "0b00111101111010000010110011110101";
        ram[114] = "0b10111110000000010111001001101001";
        ram[115] = "0b10111000111010101101000101110000";
        ram[116] = "0b00111101000011110101111101001110";
        ram[117] = "0b10111101110001101101011111101001";
        ram[118] = "0b00111101010011100010001011110011";
        ram[119] = "0b10111010111111011111001101100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_13) {
meminst = new inference_conv2d_f3_0_3_13_ram("inference_conv2d_f3_0_3_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_13() {
    delete meminst;
}


};//endmodule
#endif
