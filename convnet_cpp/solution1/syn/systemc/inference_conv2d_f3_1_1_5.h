// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_1_5_H__
#define __inference_conv2d_f3_1_1_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_1_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_1_5_ram) {
        ram[0] = "0b10111110000010110011001011001111";
        ram[1] = "0b00111101001010110011011100000000";
        ram[2] = "0b00111101001110101001101001001011";
        ram[3] = "0b00111110000100111111101010110001";
        ram[4] = "0b10111100111110111110000000010101";
        ram[5] = "0b00111110000100010100000001010111";
        ram[6] = "0b00111101001011001000101000000001";
        ram[7] = "0b00111101001100011011111011110101";
        ram[8] = "0b00111101000011000111101010010111";
        ram[9] = "0b00111101000111100101000010000011";
        ram[10] = "0b00111100001100001110010100010000";
        ram[11] = "0b00111010100100111100110110101000";
        ram[12] = "0b10111100100010111111010111011000";
        ram[13] = "0b10111110001011011011110101110011";
        ram[14] = "0b00111101100000100110111100111001";
        ram[15] = "0b10111110000110011000110110001011";
        ram[16] = "0b10111101001110010111111001010110";
        ram[17] = "0b10111100100000100101010000111000";
        ram[18] = "0b00111011101000101111010011001101";
        ram[19] = "0b00111101110010001100111101010100";
        ram[20] = "0b10111101110001110011011100111001";
        ram[21] = "0b00111110000101011100011001111110";
        ram[22] = "0b10111101111011000111000000000000";
        ram[23] = "0b00111100110001001101011001011110";
        ram[24] = "0b00111101001001100100010111001010";
        ram[25] = "0b00111101011010010000010101100010";
        ram[26] = "0b10111101000000011110011010100101";
        ram[27] = "0b10111101111010100000000100100110";
        ram[28] = "0b10111110001010011100100001000011";
        ram[29] = "0b10111100101001101011001101011110";
        ram[30] = "0b00111101100101111101101110001001";
        ram[31] = "0b00111101011001110101000001110001";
        ram[32] = "0b00111101101011011101011100100011";
        ram[33] = "0b00111100111000000111001011010010";
        ram[34] = "0b00111100100100110000101111100001";
        ram[35] = "0b10111101011001101100100100010010";
        ram[36] = "0b00111101000110111101110000110100";
        ram[37] = "0b00111110011000001010000010110010";
        ram[38] = "0b10111100100010011001001010111011";
        ram[39] = "0b10111101110111011001100110001001";
        ram[40] = "0b00111110001001001100100001111010";
        ram[41] = "0b00111101000011001110001010110111";
        ram[42] = "0b00111101000111010110001001100001";
        ram[43] = "0b10111100000000111010001110000011";
        ram[44] = "0b10111101100010101110010010100011";
        ram[45] = "0b00111101011000110000110110011100";
        ram[46] = "0b10111110001000001000111111101011";
        ram[47] = "0b10111101100110100100010100110011";
        ram[48] = "0b00111101011000110011010101110100";
        ram[49] = "0b00111110000001111011011010111011";
        ram[50] = "0b10111100001101101011111000000010";
        ram[51] = "0b10111110000110100111010000111010";
        ram[52] = "0b10111101010100010010010110100111";
        ram[53] = "0b10111110000001101100100010110100";
        ram[54] = "0b00111101000100000111111011101110";
        ram[55] = "0b10111110000011111011110010100001";
        ram[56] = "0b00111101101000010110101011001111";
        ram[57] = "0b00111101110001101100100011101010";
        ram[58] = "0b10111101111011110000100001000110";
        ram[59] = "0b10111110001110100110100000101011";
        ram[60] = "0b10111101010101001011001111010001";
        ram[61] = "0b10111101010101010100010110101101";
        ram[62] = "0b10111100110010110000001001011101";
        ram[63] = "0b00111110000111000110111101111010";
        ram[64] = "0b00111101100010001010001100000111";
        ram[65] = "0b10111011111001001000011100101001";
        ram[66] = "0b00111110010010101001011111100001";
        ram[67] = "0b00111110010011110111010001000111";
        ram[68] = "0b00111101101001100001000101110111";
        ram[69] = "0b00111100111111110101101110010101";
        ram[70] = "0b10111101111011110011011011110000";
        ram[71] = "0b00111101000011010011101100000001";
        ram[72] = "0b00111110010101001101001011110110";
        ram[73] = "0b10111101111101101101000110011110";
        ram[74] = "0b10111110000100000011101100111111";
        ram[75] = "0b10111101100001111011001101101110";
        ram[76] = "0b00111101011001100001100010011000";
        ram[77] = "0b00111101000101111110101111100101";
        ram[78] = "0b10111101100001010011111100101100";
        ram[79] = "0b10111101101001111110010100111100";
        ram[80] = "0b10111110010000101111111101001100";
        ram[81] = "0b10111101101111110110101011001010";
        ram[82] = "0b10111101110000000101001001010000";
        ram[83] = "0b10111101001001100111110110101110";
        ram[84] = "0b00111110001001001110010000000000";
        ram[85] = "0b10111100101011110000111110111000";
        ram[86] = "0b00111110001000011010011110100000";
        ram[87] = "0b00111101010001101100110111100101";
        ram[88] = "0b00111101000110001101001110100001";
        ram[89] = "0b00111100100110000011101000011110";
        ram[90] = "0b10111101011001101000111100010110";
        ram[91] = "0b10111101110010101110100100110010";
        ram[92] = "0b00111101101111000101101110110110";
        ram[93] = "0b00111011100110001111110001100110";
        ram[94] = "0b00111101100111110110110001101010";
        ram[95] = "0b10111101111010001100101101001011";
        ram[96] = "0b10111100001011001000101101111001";
        ram[97] = "0b10111101011010111100111000011010";
        ram[98] = "0b00111110000011010101000001100101";
        ram[99] = "0b10111101001001100100111110001011";
        ram[100] = "0b00111100011011101001100100111011";
        ram[101] = "0b00111010101000101111101110011000";
        ram[102] = "0b10111100100110100100101000101110";
        ram[103] = "0b00111101110001000101100001010100";
        ram[104] = "0b00111100011001010010010111110101";
        ram[105] = "0b10111101111110010000111010101010";
        ram[106] = "0b00111101000010101011000100110100";
        ram[107] = "0b10111100101101011100101000011100";
        ram[108] = "0b00111100101011110111011110111101";
        ram[109] = "0b00111101001101100011100000000000";
        ram[110] = "0b00111101100111010011001111101101";
        ram[111] = "0b00111100010011010110001111001100";
        ram[112] = "0b10111101010000011101000000011010";
        ram[113] = "0b10111110000111011101110110110001";
        ram[114] = "0b00111100101001001010100011000001";
        ram[115] = "0b00111101001110111110010111011010";
        ram[116] = "0b10111100110101011010011000100101";
        ram[117] = "0b10111101100100111101111101111011";
        ram[118] = "0b10111101111000011110110001001110";
        ram[119] = "0b10111101011000110111101111101011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_1_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_1_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_1_5) {
meminst = new inference_conv2d_f3_1_1_5_ram("inference_conv2d_f3_1_1_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_1_5() {
    delete meminst;
}


};//endmodule
#endif
