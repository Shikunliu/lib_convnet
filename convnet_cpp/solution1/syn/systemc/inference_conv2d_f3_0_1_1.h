// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_1_H__
#define __inference_conv2d_f3_0_1_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_1_ram) {
        ram[0] = "0b10111011000010101101011001011101";
        ram[1] = "0b10111101111000101001101111110001";
        ram[2] = "0b10111101110001101101010010011011";
        ram[3] = "0b10111101100111001011101001001011";
        ram[4] = "0b10111110000010000100001010110111";
        ram[5] = "0b00111101010101111110001101001100";
        ram[6] = "0b10111100111110010001111101110001";
        ram[7] = "0b10111110000010001111100001100010";
        ram[8] = "0b10111101100111011111001010110111";
        ram[9] = "0b10111110010000100010100101100011";
        ram[10] = "0b10111100111111010101100100100111";
        ram[11] = "0b00111101001010000101111001110011";
        ram[12] = "0b00111101111101110111000100000000";
        ram[13] = "0b00111100100100011110100000101010";
        ram[14] = "0b00111101100000110000000001001011";
        ram[15] = "0b00111101011101100111111100110011";
        ram[16] = "0b10111101100110001001111011100011";
        ram[17] = "0b00111101110000000010010100000100";
        ram[18] = "0b10111110001000000011100101101001";
        ram[19] = "0b00111011110111110100011111111010";
        ram[20] = "0b00111100100100000111110010000101";
        ram[21] = "0b10111101011001110100100010010100";
        ram[22] = "0b00111101110101011010010100110011";
        ram[23] = "0b10111101000101001001101111101001";
        ram[24] = "0b00111101010111011000001110000100";
        ram[25] = "0b00111101100011111101011000101001";
        ram[26] = "0b00111101010010100000100000101100";
        ram[27] = "0b10111101101010110011011101010001";
        ram[28] = "0b00111101101110010001110011111010";
        ram[29] = "0b00111110000001001011110111111101";
        ram[30] = "0b00111101101001010100100011111010";
        ram[31] = "0b10111110000101101110001011101011";
        ram[32] = "0b00111100101101001111100001100101";
        ram[33] = "0b10111110000010100100111110000111";
        ram[34] = "0b10111100111101000100010111101101";
        ram[35] = "0b10111100011011100110100010010011";
        ram[36] = "0b00111101100011110111010110010111";
        ram[37] = "0b00111101111100001010000000101100";
        ram[38] = "0b10111100110111100000110011000110";
        ram[39] = "0b00111101010101110001100111000010";
        ram[40] = "0b10111110001000001100000111111101";
        ram[41] = "0b10111101000000110000010110100100";
        ram[42] = "0b10111100001111001011010111111110";
        ram[43] = "0b10111100110001100100001001101111";
        ram[44] = "0b10111101101111001100100111010000";
        ram[45] = "0b00111101100111110010100010000101";
        ram[46] = "0b00111100111000001111001111001011";
        ram[47] = "0b10111101010001110101001000111010";
        ram[48] = "0b10111101001111101010001100111110";
        ram[49] = "0b10111101001110101100001100010101";
        ram[50] = "0b00111101010010100010001110100101";
        ram[51] = "0b10111110000101101110110001011011";
        ram[52] = "0b10111101011000100000000110011000";
        ram[53] = "0b10111101010011101111100111001110";
        ram[54] = "0b00111101101010001011111100101110";
        ram[55] = "0b10111101100100001010101011000011";
        ram[56] = "0b00111101011101010110110101010000";
        ram[57] = "0b10111101001100110110011111010111";
        ram[58] = "0b00111101000100110000000000100010";
        ram[59] = "0b10111110001001110100101101000000";
        ram[60] = "0b00111101010101011010111001010011";
        ram[61] = "0b10111101100010101110101011111011";
        ram[62] = "0b10111101011000110001101001100111";
        ram[63] = "0b00111101111011100111111011101001";
        ram[64] = "0b10111100111111011101000100011100";
        ram[65] = "0b00111110010000000011011001000100";
        ram[66] = "0b10111101111100101000001010000100";
        ram[67] = "0b00111100110111000010100110010111";
        ram[68] = "0b10111100111101010101010101001100";
        ram[69] = "0b00111100111011100001101111010010";
        ram[70] = "0b10111101010011010011111010101101";
        ram[71] = "0b10111110001011000111111111111110";
        ram[72] = "0b10111110010100101011110101111111";
        ram[73] = "0b10111101101101010011000100101101";
        ram[74] = "0b00111101110100101101001111001000";
        ram[75] = "0b00111101111111100110000000111101";
        ram[76] = "0b10111100000100111101010101101010";
        ram[77] = "0b00111101000000001010010101110111";
        ram[78] = "0b10111011111101011101000000100110";
        ram[79] = "0b00111100111000111001111000110101";
        ram[80] = "0b10111011000100010110101001001011";
        ram[81] = "0b10111101100000011010010100011100";
        ram[82] = "0b10111101110111101101110110001011";
        ram[83] = "0b10111101011001011100100100011101";
        ram[84] = "0b10111110000101111100000011110100";
        ram[85] = "0b10111101111011001010011010000111";
        ram[86] = "0b10111101100100011010110111000010";
        ram[87] = "0b00111101000011100110111000100010";
        ram[88] = "0b10111101000001111011001101101110";
        ram[89] = "0b00111110001011110101110110111100";
        ram[90] = "0b00111101011101100000101111011011";
        ram[91] = "0b00111101100110101111001100001110";
        ram[92] = "0b00111101001000111001011111010000";
        ram[93] = "0b10111011111110011101101000110111";
        ram[94] = "0b00111110000010100000011100101101";
        ram[95] = "0b10111101011110111010100010011101";
        ram[96] = "0b10111110000100001100001011000110";
        ram[97] = "0b00111100110101011000000100111100";
        ram[98] = "0b00111101101010110011101101011010";
        ram[99] = "0b10111101110001110111101011011011";
        ram[100] = "0b00111100110001000011010110000100";
        ram[101] = "0b10111100101011011000111011100100";
        ram[102] = "0b10111110000001011111111101100001";
        ram[103] = "0b10111101000101011110111011101010";
        ram[104] = "0b10111100011111110000000010010001";
        ram[105] = "0b10111101011010011011101010010100";
        ram[106] = "0b10111100001010011110100111011110";
        ram[107] = "0b10111100000011000000101100111100";
        ram[108] = "0b10111011111111000001001011100001";
        ram[109] = "0b00111011101000101000000000110011";
        ram[110] = "0b00111100011000000011011100001101";
        ram[111] = "0b10111101100000111001110001011111";
        ram[112] = "0b10111101001100100101011011001010";
        ram[113] = "0b10111100111111111001011010000011";
        ram[114] = "0b10111101001110110010010001111110";
        ram[115] = "0b10111101101000001100101011011001";
        ram[116] = "0b00111101111101011010101011111000";
        ram[117] = "0b10111110000101010000000111100010";
        ram[118] = "0b10111100111001100010101101000011";
        ram[119] = "0b10111101100001111011101010101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_1) {
meminst = new inference_conv2d_f3_0_1_1_ram("inference_conv2d_f3_0_1_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_1() {
    delete meminst;
}


};//endmodule
#endif
