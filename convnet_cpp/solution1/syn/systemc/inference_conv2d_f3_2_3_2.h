// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_2_H__
#define __inference_conv2d_f3_2_3_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_2_ram) {
        ram[0] = "0b10111100100010111010001000101010";
        ram[1] = "0b10111100111001001100111000010110";
        ram[2] = "0b10111101101101000000011110110010";
        ram[3] = "0b00111101111100001011100001001010";
        ram[4] = "0b00111101110000110100010101100101";
        ram[5] = "0b00111100101001001000100110111000";
        ram[6] = "0b10111101000101100111001100111111";
        ram[7] = "0b00111101100011000101001100001111";
        ram[8] = "0b10111101011011011001000100011000";
        ram[9] = "0b10111100111110100001101010101110";
        ram[10] = "0b00111100101001001000011011111110";
        ram[11] = "0b10111101100001110110101010011011";
        ram[12] = "0b10111101111110101000110101100101";
        ram[13] = "0b00111100100011001111000001110100";
        ram[14] = "0b00111110000010111111111011000001";
        ram[15] = "0b10111101010011110000011011001110";
        ram[16] = "0b10111101001110011100011011001011";
        ram[17] = "0b00111110000011000010110111110001";
        ram[18] = "0b00111110010110011010001011000110";
        ram[19] = "0b00111110001100110011111111001000";
        ram[20] = "0b00111101111001000010101101110011";
        ram[21] = "0b00111100011101001010111010010011";
        ram[22] = "0b10111101101100101100001001101101";
        ram[23] = "0b10111101000011011011110101011000";
        ram[24] = "0b00111101100111110010100000110100";
        ram[25] = "0b10111100100100000010111100100010";
        ram[26] = "0b00111101111111001001100010100010";
        ram[27] = "0b10111100001111101000101101010110";
        ram[28] = "0b10111110001110100110000000001011";
        ram[29] = "0b00111110000000101000101011100111";
        ram[30] = "0b10111011000010000000000000111111";
        ram[31] = "0b10111100001111111010001111101111";
        ram[32] = "0b00111101010000101100001000011100";
        ram[33] = "0b10111110000011001001111101110011";
        ram[34] = "0b00111100111001010111101110111011";
        ram[35] = "0b00111101110111000010001010101011";
        ram[36] = "0b10111101001000111100110000111101";
        ram[37] = "0b10111101111110011000100101011001";
        ram[38] = "0b10111101011001100110101101010100";
        ram[39] = "0b00111101011110100000100110010111";
        ram[40] = "0b10111101100011111110000011000001";
        ram[41] = "0b10111101110110010110010000011111";
        ram[42] = "0b00111101111010000000111110011001";
        ram[43] = "0b10111101100000011100001011100011";
        ram[44] = "0b10111100101100010010011001111110";
        ram[45] = "0b10111100110101011101111010001111";
        ram[46] = "0b00111011100101100000111100110110";
        ram[47] = "0b00111101100010010110101101110110";
        ram[48] = "0b10111101010110110110000011001001";
        ram[49] = "0b10111101110010010100011001011000";
        ram[50] = "0b10111100100001011101110110010000";
        ram[51] = "0b00111100010101110010011001011000";
        ram[52] = "0b10111101100110110010010010011001";
        ram[53] = "0b10111101101110100001001101010111";
        ram[54] = "0b10111101110010110100001110111110";
        ram[55] = "0b10111011111001010010101000100110";
        ram[56] = "0b00111101111011001011100111101101";
        ram[57] = "0b10111101000111000110101100000101";
        ram[58] = "0b00111110000000000110001011010100";
        ram[59] = "0b00111100010100000010000100010101";
        ram[60] = "0b10111101000100110110000010110101";
        ram[61] = "0b00111101010000010101111000000100";
        ram[62] = "0b00111101000010101100000101011010";
        ram[63] = "0b10111100110101011101111000100011";
        ram[64] = "0b10111101110010101010101001100011";
        ram[65] = "0b10111101010010000011000011010110";
        ram[66] = "0b10111101101101011011011111101011";
        ram[67] = "0b10111100100010011110010000011010";
        ram[68] = "0b10111101110011000110001001101100";
        ram[69] = "0b10111101011111100011011101011000";
        ram[70] = "0b10111101101101101101010011010001";
        ram[71] = "0b00111101000000111000001001101011";
        ram[72] = "0b10111101100101101000010110001011";
        ram[73] = "0b00111101111000001011111101011101";
        ram[74] = "0b10111101110001101110000000110001";
        ram[75] = "0b10111101110011001110111101100111";
        ram[76] = "0b00111110001010010001000111001111";
        ram[77] = "0b00111100110001111100000110010101";
        ram[78] = "0b00111100100110010110000111010001";
        ram[79] = "0b00111101101111001100010010111010";
        ram[80] = "0b10111100110110011111001001001111";
        ram[81] = "0b00111011100000100110010001110100";
        ram[82] = "0b00111101110000110010111110111101";
        ram[83] = "0b00111100101101001111011111111010";
        ram[84] = "0b00111101110011010110111101010100";
        ram[85] = "0b10111101101111000101101101011000";
        ram[86] = "0b10111101101101111010000111101011";
        ram[87] = "0b00111101100011011010010001111110";
        ram[88] = "0b00111101110101101001100110000101";
        ram[89] = "0b10111101111001111101111001010001";
        ram[90] = "0b00111100101010101010101100111010";
        ram[91] = "0b00111101000100101110010011011111";
        ram[92] = "0b00111101111100101100000101101110";
        ram[93] = "0b00111100001101101011010011001000";
        ram[94] = "0b10111110000001011011101101111011";
        ram[95] = "0b00111101100001100000101011110111";
        ram[96] = "0b10111101111000110001101001001100";
        ram[97] = "0b10111110001100011011101100000110";
        ram[98] = "0b10111110000001011101000010110111";
        ram[99] = "0b10111110000101100110010110011101";
        ram[100] = "0b00111101001010101111010011110001";
        ram[101] = "0b00111101111111110000001111010001";
        ram[102] = "0b10111101010011110001100001010001";
        ram[103] = "0b10111100000101111101010001010010";
        ram[104] = "0b10111101001010001000100100100001";
        ram[105] = "0b10111100110001100100111111011011";
        ram[106] = "0b10111101000010101010010110010000";
        ram[107] = "0b00111100101101011001101100100010";
        ram[108] = "0b10111110000111100111101001110100";
        ram[109] = "0b00111100110011001010000111001111";
        ram[110] = "0b10111101100100110011001010111010";
        ram[111] = "0b10111101101001101110111011000100";
        ram[112] = "0b00111100101101111110101001010010";
        ram[113] = "0b00111101011011011101110011101000";
        ram[114] = "0b00111101011011001001010010011001";
        ram[115] = "0b10111101011011000011001110110101";
        ram[116] = "0b00111101111101011100011000111011";
        ram[117] = "0b10111101100011000100001110100101";
        ram[118] = "0b10111100000110101011111101011110";
        ram[119] = "0b00111101001000010101000110001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_2) {
meminst = new inference_conv2d_f3_2_3_2_ram("inference_conv2d_f3_2_3_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_2() {
    delete meminst;
}


};//endmodule
#endif
