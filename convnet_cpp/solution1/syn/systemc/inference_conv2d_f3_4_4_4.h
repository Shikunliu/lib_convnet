// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_4_H__
#define __inference_conv2d_f3_4_4_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_4_ram) {
        ram[0] = "0b00111101010111011011101011111100";
        ram[1] = "0b00111110000100100010110001000101";
        ram[2] = "0b00111100110010000001011000011001";
        ram[3] = "0b10111101100010000100010111110111";
        ram[4] = "0b00111101111110011010010110101001";
        ram[5] = "0b10111101001001000100011100000111";
        ram[6] = "0b10111110001101001011101000001111";
        ram[7] = "0b00111100101111010010111100110101";
        ram[8] = "0b10111101000011011100011001000010";
        ram[9] = "0b10111100111001101000000100111110";
        ram[10] = "0b00111101010010110100000100101100";
        ram[11] = "0b10111101011000000010100001111010";
        ram[12] = "0b00111110000000100110100100010110";
        ram[13] = "0b00111101101101000010010101101100";
        ram[14] = "0b10111101000010100011110001001001";
        ram[15] = "0b00111101010111110101111000110100";
        ram[16] = "0b00111101101001110010101111110100";
        ram[17] = "0b10111100110111110100000011011000";
        ram[18] = "0b00111101100101000100100110011001";
        ram[19] = "0b00111101101111001110010100000110";
        ram[20] = "0b10111110000000010001011001100110";
        ram[21] = "0b00111101010110100100000010001001";
        ram[22] = "0b10111011000101111101000110011000";
        ram[23] = "0b10111110000110001010110001011100";
        ram[24] = "0b00111101100010001011100011111111";
        ram[25] = "0b00111011111100011110101011111111";
        ram[26] = "0b10111101110000001101000100110001";
        ram[27] = "0b10111110001001101110110000011000";
        ram[28] = "0b00111101101111010001010000110101";
        ram[29] = "0b10111101100010011011100011011001";
        ram[30] = "0b00111110010011000001101010001011";
        ram[31] = "0b10111110011100110001101111011111";
        ram[32] = "0b10111101000101110111111010000111";
        ram[33] = "0b00111110001010111100111110010010";
        ram[34] = "0b10111101011101111110100000011110";
        ram[35] = "0b10111101000101010100010110010010";
        ram[36] = "0b00111101000111001100010010101100";
        ram[37] = "0b10111100010111110101100011000001";
        ram[38] = "0b00111101000010111111010111110010";
        ram[39] = "0b10111101100110110000111011100101";
        ram[40] = "0b10111101111110100110111110000010";
        ram[41] = "0b10111100101111000110011001001101";
        ram[42] = "0b10111100100110100010110101110011";
        ram[43] = "0b10111101010111101100011000101001";
        ram[44] = "0b00111110010110101101101010111010";
        ram[45] = "0b00111101100110111011011010011101";
        ram[46] = "0b10111110001110011010001101001101";
        ram[47] = "0b10111110011101011000101000110011";
        ram[48] = "0b10111101111010001001011001010111";
        ram[49] = "0b10111110000000101110111001000010";
        ram[50] = "0b10111001100011011100011111010100";
        ram[51] = "0b10111101101111000000100001100111";
        ram[52] = "0b10111100110001101100111111001000";
        ram[53] = "0b00111110000001111111011101111011";
        ram[54] = "0b00111101101011111100100110100010";
        ram[55] = "0b10111110000011010000111101100010";
        ram[56] = "0b10111101001101011011010111011111";
        ram[57] = "0b00111101100101001101000110100110";
        ram[58] = "0b10111101010101011111001001100000";
        ram[59] = "0b00111101011000101000010011000101";
        ram[60] = "0b10111110000011010010010011100001";
        ram[61] = "0b10111100101101000100101001010101";
        ram[62] = "0b00111011111000011110101100000010";
        ram[63] = "0b10111101101000000000110001100000";
        ram[64] = "0b10111110001111100101100100101001";
        ram[65] = "0b10111100010001110110110010100110";
        ram[66] = "0b00111101001110101010001101101010";
        ram[67] = "0b00111101100000000110100100111001";
        ram[68] = "0b00111101110100110000011100101001";
        ram[69] = "0b10111100101011010100011111001100";
        ram[70] = "0b10111110001011111100010011000001";
        ram[71] = "0b00111101100111000100110001011001";
        ram[72] = "0b00111110000111010110000010100110";
        ram[73] = "0b00111101100001100011101111101111";
        ram[74] = "0b00111101101000011101110101111000";
        ram[75] = "0b10111100111110110101000111100110";
        ram[76] = "0b10111110000011101100101100110010";
        ram[77] = "0b10111110010011111001110101101111";
        ram[78] = "0b10111101111000000100111010100101";
        ram[79] = "0b00111100000101000100001001010111";
        ram[80] = "0b10111100101001101101100000010001";
        ram[81] = "0b00111101001010111000011101010010";
        ram[82] = "0b10111110010100111000011001001101";
        ram[83] = "0b00111100110101101011000110111101";
        ram[84] = "0b00111100110010001001000001011101";
        ram[85] = "0b00111101111011011001000011100010";
        ram[86] = "0b00111100100101110010010100010101";
        ram[87] = "0b00111110000001100011001101001000";
        ram[88] = "0b10111110001011111100011101100000";
        ram[89] = "0b00111101110010000011010101100110";
        ram[90] = "0b00111101100111011110000111100011";
        ram[91] = "0b10111100010000101000100100010010";
        ram[92] = "0b00111100110101001100101110011111";
        ram[93] = "0b10111101101001110010110111111111";
        ram[94] = "0b10111100011011110001101001101010";
        ram[95] = "0b00111110000001110100110101011001";
        ram[96] = "0b00111101100111010110010011110011";
        ram[97] = "0b10111100110001110011011110010111";
        ram[98] = "0b00111101000000100111110100111000";
        ram[99] = "0b10111100110110101111000100011101";
        ram[100] = "0b10111100110000111110011000111111";
        ram[101] = "0b10111100100101100010010000101111";
        ram[102] = "0b10111010011010110111111001100000";
        ram[103] = "0b10111100000111101100100101111010";
        ram[104] = "0b00111101110011001101001110011110";
        ram[105] = "0b10111100100101111100111100101010";
        ram[106] = "0b10111011101001000011001010001111";
        ram[107] = "0b00111100100010000011100100011111";
        ram[108] = "0b10111101011010111101001011010010";
        ram[109] = "0b10111110001110011001111111100100";
        ram[110] = "0b10111101110110010100001000001011";
        ram[111] = "0b10111100100110010011010011110000";
        ram[112] = "0b00111101110101111101000001101100";
        ram[113] = "0b10111110001010000000100001000010";
        ram[114] = "0b00111101011111111111000111011000";
        ram[115] = "0b00111101100101110110011100001010";
        ram[116] = "0b10111101110110110000000101000011";
        ram[117] = "0b10111110001011000000011001011011";
        ram[118] = "0b10111101011011101000001010101111";
        ram[119] = "0b10111101110100000000000101010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_4) {
meminst = new inference_conv2d_f3_4_4_4_ram("inference_conv2d_f3_4_4_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_4() {
    delete meminst;
}


};//endmodule
#endif
