// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_3_H__
#define __inference_conv2d_f3_1_3_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_3_ram) {
        ram[0] = "0b00111010101101000111101100011100";
        ram[1] = "0b00111101110000111011111011000100";
        ram[2] = "0b10111110000001111110010110101000";
        ram[3] = "0b10111101110011111000001101111011";
        ram[4] = "0b00111101110111110100010101011010";
        ram[5] = "0b10111101111011101000010000100111";
        ram[6] = "0b00111101010010000100000011100001";
        ram[7] = "0b00111011100001010100110101110010";
        ram[8] = "0b10111101111000101100111111011001";
        ram[9] = "0b10111100000000011110100100001110";
        ram[10] = "0b00111110010111011100001110111101";
        ram[11] = "0b10111101100011010100100000101010";
        ram[12] = "0b10111101111000000000011111011101";
        ram[13] = "0b00111011101110111010010111011110";
        ram[14] = "0b00111101011001111101110100001110";
        ram[15] = "0b00111101111011100001101011000101";
        ram[16] = "0b10111101111011000000100010110111";
        ram[17] = "0b00111010011011110010010000100001";
        ram[18] = "0b10111100111000101110100101101111";
        ram[19] = "0b10111110010010111000111000001000";
        ram[20] = "0b10111101100101111000000100011001";
        ram[21] = "0b10111101010101110100000100101111";
        ram[22] = "0b10111101101001110100000010101001";
        ram[23] = "0b00111100101111100110100001010000";
        ram[24] = "0b00111101011101100010111001000000";
        ram[25] = "0b00111100110101111100001101101011";
        ram[26] = "0b00111101001001110111001111111101";
        ram[27] = "0b10111101110000001010101001100101";
        ram[28] = "0b00111100110110000010011100111110";
        ram[29] = "0b00111101100010010010000101010100";
        ram[30] = "0b00111101100111111100000010111000";
        ram[31] = "0b00111101111001010111000100001001";
        ram[32] = "0b10111110001001101100001111111100";
        ram[33] = "0b00111100100110101000000100100000";
        ram[34] = "0b00111100111010000110010001101101";
        ram[35] = "0b10111101101101011010111001000101";
        ram[36] = "0b00111101100111110100100101001001";
        ram[37] = "0b00111100010000011100101100010001";
        ram[38] = "0b10111101100000001011000010000111";
        ram[39] = "0b10111101011111101001011100010101";
        ram[40] = "0b00111110001101101000010111011011";
        ram[41] = "0b00111100101000001100110001011110";
        ram[42] = "0b00111101111011010110000000100000";
        ram[43] = "0b00111110001110010100001001001110";
        ram[44] = "0b00111101100000100010001110000100";
        ram[45] = "0b00111110011001010000011110100111";
        ram[46] = "0b10111101110101011010011001000000";
        ram[47] = "0b00111101110110001111011100010010";
        ram[48] = "0b00111100101100011000110000110100";
        ram[49] = "0b10111101110011010110111101010100";
        ram[50] = "0b00111101100000011001101100011000";
        ram[51] = "0b10111101001011000101111010110011";
        ram[52] = "0b10111101100001100101000010010111";
        ram[53] = "0b00111100001001001101111011011101";
        ram[54] = "0b10111101111100010000011011101110";
        ram[55] = "0b10111110000111001111001001001001";
        ram[56] = "0b10111101101110001100101110110110";
        ram[57] = "0b10111110000000101001010010011010";
        ram[58] = "0b00111101010110101100101111001001";
        ram[59] = "0b10111100101101010101001001011101";
        ram[60] = "0b10111110000010010101001101011000";
        ram[61] = "0b00111101101110011111111001101100";
        ram[62] = "0b10111101011000101011010000101010";
        ram[63] = "0b10111101001001001011001010110111";
        ram[64] = "0b10111101001001011000110110101001";
        ram[65] = "0b10111101011100000000111110010010";
        ram[66] = "0b10111110000010101001101110001101";
        ram[67] = "0b10111110000111011101101011001111";
        ram[68] = "0b00111011100010011110101101010001";
        ram[69] = "0b00111101110111110101110001101100";
        ram[70] = "0b10111101110101000010010101101100";
        ram[71] = "0b10111110000111001011100101100111";
        ram[72] = "0b10111101000011111101000100010100";
        ram[73] = "0b10111100111010110010111010111000";
        ram[74] = "0b10111110000100000110110111010111";
        ram[75] = "0b00111100111010001011100110010010";
        ram[76] = "0b00111101100101000001100111010110";
        ram[77] = "0b00111100011111011100001000111000";
        ram[78] = "0b10111110000110000000111100010011";
        ram[79] = "0b00111101111010100111110001011011";
        ram[80] = "0b00111101100011011001111000011001";
        ram[81] = "0b00111011101000011010000101100101";
        ram[82] = "0b10111101101000111110000101111001";
        ram[83] = "0b10111101110110011111011011101100";
        ram[84] = "0b10111101111011011110001010101100";
        ram[85] = "0b10111101011100010100010101101101";
        ram[86] = "0b00111101001111111011011000101110";
        ram[87] = "0b00111100110101110111000011001010";
        ram[88] = "0b10111110000011101001101100111001";
        ram[89] = "0b10111110000110111110001010110101";
        ram[90] = "0b10111101100000101011010110111101";
        ram[91] = "0b10111101001010010000011111001100";
        ram[92] = "0b10111101110101100100100101001101";
        ram[93] = "0b10111010101100111001100010011110";
        ram[94] = "0b10111100101101010111010011110111";
        ram[95] = "0b10111101110010011011001011010001";
        ram[96] = "0b00111101010010000000011010101111";
        ram[97] = "0b00111011001011100100001111110110";
        ram[98] = "0b00111101000011001111010001010101";
        ram[99] = "0b00111101110110011111001000110100";
        ram[100] = "0b00111101001110101000001111011010";
        ram[101] = "0b10111101001011110101000011110001";
        ram[102] = "0b10111110001110110001011011000010";
        ram[103] = "0b00111101101010101111111000101011";
        ram[104] = "0b10111110000000100110000110111111";
        ram[105] = "0b00111011101100010111011010011011";
        ram[106] = "0b10111110000000010100100111000111";
        ram[107] = "0b10111100100011110010011111110001";
        ram[108] = "0b00111101001001011110001001111101";
        ram[109] = "0b10111101101011111010101110110010";
        ram[110] = "0b00111110001101110010000011001001";
        ram[111] = "0b10111101111000100000001111100110";
        ram[112] = "0b00111101101000010011110011000110";
        ram[113] = "0b10111101000010111101000011101111";
        ram[114] = "0b00111101110000011000010000010100";
        ram[115] = "0b10111101100110100100110100011110";
        ram[116] = "0b00111101111100100010001100011000";
        ram[117] = "0b00111101110011011010111000111110";
        ram[118] = "0b10111101011011010100000110110111";
        ram[119] = "0b00111100010010101100010001001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_3) {
meminst = new inference_conv2d_f3_1_3_3_ram("inference_conv2d_f3_1_3_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_3() {
    delete meminst;
}


};//endmodule
#endif
