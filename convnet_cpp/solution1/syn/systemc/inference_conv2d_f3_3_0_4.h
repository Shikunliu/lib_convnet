// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_4_H__
#define __inference_conv2d_f3_3_0_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_4_ram) {
        ram[0] = "0b10111110001100100001100011011111";
        ram[1] = "0b00111101000110110001101011011001";
        ram[2] = "0b10111101101000001001010010001000";
        ram[3] = "0b00111110010110011111000001011111";
        ram[4] = "0b10111101011001011111010011110010";
        ram[5] = "0b00111100011101110100101001001111";
        ram[6] = "0b10111101011011101101010010010100";
        ram[7] = "0b00111110001000110111001110110000";
        ram[8] = "0b00111101100001110100001101010110";
        ram[9] = "0b10111110001001010010001010100111";
        ram[10] = "0b00111011100010001100100101101000";
        ram[11] = "0b00111101001110110000111111110001";
        ram[12] = "0b10111110000111000111000110010011";
        ram[13] = "0b00111100110000000101000111001010";
        ram[14] = "0b00111110000111111000000110100110";
        ram[15] = "0b10111101111010010101100001010011";
        ram[16] = "0b00111101001001100010010101111110";
        ram[17] = "0b00111100110011011101111001000101";
        ram[18] = "0b00111101001110101001011001101001";
        ram[19] = "0b00111101100101101111101001000000";
        ram[20] = "0b00111100101001011100011110100101";
        ram[21] = "0b10111101010101010000110111100100";
        ram[22] = "0b00111100110101000010010110111100";
        ram[23] = "0b10111110001000000000101100000011";
        ram[24] = "0b10111100010110011110110110110010";
        ram[25] = "0b10111110000110000000001011000001";
        ram[26] = "0b00111101001101110000010001000011";
        ram[27] = "0b10111100110101011101111010001111";
        ram[28] = "0b10111101010011101100000011011110";
        ram[29] = "0b00111100110101001001111010001000";
        ram[30] = "0b00111101101010000101110111101101";
        ram[31] = "0b00111101010110001001100110001010";
        ram[32] = "0b10111101111011101010011011000010";
        ram[33] = "0b10111101100111100000110001110101";
        ram[34] = "0b10111101000100000111101001010001";
        ram[35] = "0b10111101001011110110001000111110";
        ram[36] = "0b10111100000011000011100011001000";
        ram[37] = "0b00111101011110111101100010100100";
        ram[38] = "0b10111101010011101110100111011101";
        ram[39] = "0b00111101111110011011110000110100";
        ram[40] = "0b00111101100100101101101001110000";
        ram[41] = "0b10111101011100100100000000100100";
        ram[42] = "0b00111101100010100010111110001100";
        ram[43] = "0b10111011011000111101010111010011";
        ram[44] = "0b00111101011000111100100011111101";
        ram[45] = "0b10111101101010000010100011101100";
        ram[46] = "0b10111101101000110000100110100000";
        ram[47] = "0b00111101110010011011000111010010";
        ram[48] = "0b00111101001011011000111011001001";
        ram[49] = "0b10111101100011111011111010010010";
        ram[50] = "0b00111101111101010001000001001101";
        ram[51] = "0b10111101100100100111100100000110";
        ram[52] = "0b10111101111110111011100000111101";
        ram[53] = "0b10111101110001101001101100100101";
        ram[54] = "0b10111101111001101010011101101001";
        ram[55] = "0b10111101011010000110000000111100";
        ram[56] = "0b10111101001111101110000011100110";
        ram[57] = "0b10111101011101001000110011010000";
        ram[58] = "0b00111011101000010001011110101000";
        ram[59] = "0b00111100111011000110010110111010";
        ram[60] = "0b00111101100011001100101010110100";
        ram[61] = "0b10111011111011111111011100011110";
        ram[62] = "0b00111100111011110101100100011110";
        ram[63] = "0b00111101100101000000001000010110";
        ram[64] = "0b00111101011110010001110111111001";
        ram[65] = "0b00111101111100101010010110100100";
        ram[66] = "0b10111101000001110010011100100001";
        ram[67] = "0b10111110000001011110100000001100";
        ram[68] = "0b10111101100000001101111111101100";
        ram[69] = "0b10111101000100111001101110111110";
        ram[70] = "0b00111100110001001011010011010000";
        ram[71] = "0b00111101000110011111010001001101";
        ram[72] = "0b00111101000010100111110010010000";
        ram[73] = "0b00111101110011100101000101001100";
        ram[74] = "0b10111101111011110110011010100101";
        ram[75] = "0b10111101101100111101000011101000";
        ram[76] = "0b10111100101101010001010110001100";
        ram[77] = "0b00111101001011100100111100011000";
        ram[78] = "0b00111001111000100010101101100001";
        ram[79] = "0b00111110010001000010000101111101";
        ram[80] = "0b10111101000111010110000110001010";
        ram[81] = "0b00111101101111101100110010001111";
        ram[82] = "0b10111101101111100010110000111011";
        ram[83] = "0b10111100100001001101111101100011";
        ram[84] = "0b10111101100101001010101111011001";
        ram[85] = "0b00111101110111001101001111100001";
        ram[86] = "0b10111101101101000011101001001010";
        ram[87] = "0b10111101001101101101100000000011";
        ram[88] = "0b10111101100000111100010111100101";
        ram[89] = "0b10111101110010100101111010101110";
        ram[90] = "0b00111100100110101111110110110010";
        ram[91] = "0b00111101110011011110010000111111";
        ram[92] = "0b00111110000010100111010111001101";
        ram[93] = "0b10111110001011100100010010110111";
        ram[94] = "0b00111011100110110011111110110111";
        ram[95] = "0b00111101110010010011101011000010";
        ram[96] = "0b00111101001000110001000001110001";
        ram[97] = "0b00111100010011110010010100000001";
        ram[98] = "0b00111101000010111010001111110011";
        ram[99] = "0b00111100010000110111110001010111";
        ram[100] = "0b10111101001001110011001110011011";
        ram[101] = "0b10111101100000110011000001010001";
        ram[102] = "0b00111101100111101011110111100001";
        ram[103] = "0b00111101101111010011001110011101";
        ram[104] = "0b10111101001101010110100100011110";
        ram[105] = "0b10111100010010001001110110010011";
        ram[106] = "0b10111011000011111010111100001010";
        ram[107] = "0b00111101001101010010111100111100";
        ram[108] = "0b10111101100010011010110101010000";
        ram[109] = "0b00111110001011011001101010010101";
        ram[110] = "0b00111010111110111010010101111101";
        ram[111] = "0b10111101000001001010010011100000";
        ram[112] = "0b10111101100011001001011101100000";
        ram[113] = "0b10111101010011001111010010100101";
        ram[114] = "0b10111100010011010111100100110000";
        ram[115] = "0b00111110001001001000110101111110";
        ram[116] = "0b10111101010010000110100111000110";
        ram[117] = "0b00111100101010111000010001111110";
        ram[118] = "0b00111101111010100010100001111000";
        ram[119] = "0b10111101111001111101001111010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_4) {
meminst = new inference_conv2d_f3_3_0_4_ram("inference_conv2d_f3_3_0_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_4() {
    delete meminst;
}


};//endmodule
#endif
