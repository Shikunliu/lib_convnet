// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_6_H__
#define __inference_conv2d_f3_1_2_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_6_ram) {
        ram[0] = "0b10111100001110100000010011011111";
        ram[1] = "0b10111110000110100011100110000010";
        ram[2] = "0b10111101111011101010001010010000";
        ram[3] = "0b10111101110100100110011101000001";
        ram[4] = "0b10111110000111101011010111110110";
        ram[5] = "0b00111110000000010001011011101100";
        ram[6] = "0b00111101010111100110111010011011";
        ram[7] = "0b00111110001000010101010000000000";
        ram[8] = "0b10111110001001000001010010100101";
        ram[9] = "0b00111101111111110011001001111011";
        ram[10] = "0b00111101110000011111000101100100";
        ram[11] = "0b10111101000010100011111000101101";
        ram[12] = "0b10111101000010001000110001111100";
        ram[13] = "0b00111101101101111101110111001010";
        ram[14] = "0b10111101101101011010000101111010";
        ram[15] = "0b10111101101001110101010000001111";
        ram[16] = "0b00111101001101000100000000001110";
        ram[17] = "0b10111101011001001101101101100111";
        ram[18] = "0b10111100001111100100111010000101";
        ram[19] = "0b10111110000010000101001101111110";
        ram[20] = "0b00111100011111000101100100010111";
        ram[21] = "0b00111100111011101100011001010010";
        ram[22] = "0b10111011001111110010110101111101";
        ram[23] = "0b10111101110010001010110111111100";
        ram[24] = "0b00111101111001010101001010100000";
        ram[25] = "0b00111100100000110000000001100110";
        ram[26] = "0b10111101011110101010001001011110";
        ram[27] = "0b10111110001001001101001010110011";
        ram[28] = "0b10111100011100010100111010001100";
        ram[29] = "0b00111010001001010010110111110111";
        ram[30] = "0b10111001111000101110111010101011";
        ram[31] = "0b00111101101001010111000011010011";
        ram[32] = "0b10111101000010001111000011010101";
        ram[33] = "0b00111100001110011010111011100011";
        ram[34] = "0b10111100110001001000010111010110";
        ram[35] = "0b00111101000010101111001111111111";
        ram[36] = "0b10111100100111001100110010111111";
        ram[37] = "0b00111101111111010010001100001100";
        ram[38] = "0b10111110001101111011010011100101";
        ram[39] = "0b10111101011100100000110011111000";
        ram[40] = "0b00111101111101001111111110000110";
        ram[41] = "0b10111101110001010111100111001010";
        ram[42] = "0b00111101100010000010110111110100";
        ram[43] = "0b00111101011110011010010110001110";
        ram[44] = "0b10111011000101100000001100001100";
        ram[45] = "0b10111100111010001000111101101011";
        ram[46] = "0b10111011100110000010111101001100";
        ram[47] = "0b00111100101111111011110110000101";
        ram[48] = "0b10111011110000010011101111001010";
        ram[49] = "0b00111101111011000001010111010011";
        ram[50] = "0b00111110000001101101111111000110";
        ram[51] = "0b10111101101011010111101001010111";
        ram[52] = "0b10111110001100011100011100010101";
        ram[53] = "0b00111100110001101000010000010011";
        ram[54] = "0b10111110001110011010010101100101";
        ram[55] = "0b00111010101011001000111101101011";
        ram[56] = "0b10111101111111001011100000010111";
        ram[57] = "0b10111101000111000000001100000000";
        ram[58] = "0b00111101110111110110000000011000";
        ram[59] = "0b10111110001000110100101101010001";
        ram[60] = "0b00111101000101110000011110000100";
        ram[61] = "0b10111101110000000101011110000001";
        ram[62] = "0b10111001000011111100111110101000";
        ram[63] = "0b00111101011111010010001101011100";
        ram[64] = "0b00111011100010001001110100001000";
        ram[65] = "0b10111101111110011011110101000000";
        ram[66] = "0b00111101001011000101100111000101";
        ram[67] = "0b10111101001000110100111000011001";
        ram[68] = "0b10111101000110010101011110001010";
        ram[69] = "0b10111101100110001001110011110010";
        ram[70] = "0b10111101010100010000000111100110";
        ram[71] = "0b10111101101101111011000101111101";
        ram[72] = "0b00111110010010001011011111100101";
        ram[73] = "0b00111101010001110000001000111000";
        ram[74] = "0b00111100110110111001100000001100";
        ram[75] = "0b00111101100110100110110100110100";
        ram[76] = "0b00111101010000101111100110110000";
        ram[77] = "0b10111101100001101110001100100001";
        ram[78] = "0b00111101010011011111100011100111";
        ram[79] = "0b00111011101110110000100010010101";
        ram[80] = "0b10111110000111000011001101110010";
        ram[81] = "0b10111101110000001101110110010000";
        ram[82] = "0b10111101101010100110110000100111";
        ram[83] = "0b00111101111011011010101110011111";
        ram[84] = "0b10111101010000110011001101110110";
        ram[85] = "0b00111101011001101000110011000111";
        ram[86] = "0b00111100101101001011100000000011";
        ram[87] = "0b10111101000100111011010110001010";
        ram[88] = "0b10111101100110110101100000010101";
        ram[89] = "0b00111101010010100101010111111010";
        ram[90] = "0b00111101010101101010000010100110";
        ram[91] = "0b00111100000000110001000011100001";
        ram[92] = "0b10111101011100001110101010111001";
        ram[93] = "0b10111101110100101110011000100001";
        ram[94] = "0b10111101011101000001100000110110";
        ram[95] = "0b00111011111100111100010010110011";
        ram[96] = "0b10111101001110100001111000100100";
        ram[97] = "0b10111101000100000001001111000100";
        ram[98] = "0b10111101101010010110010000111010";
        ram[99] = "0b10111101101001111000110110000110";
        ram[100] = "0b10111101100001110111001111100010";
        ram[101] = "0b10111101010110100010101110101011";
        ram[102] = "0b10111101000100001000111000111101";
        ram[103] = "0b10111101010010101111110100011111";
        ram[104] = "0b00111101001011110000111101001101";
        ram[105] = "0b00111101110011110110101001010001";
        ram[106] = "0b00111010100010000011011000011010";
        ram[107] = "0b00111110000001110001000011001011";
        ram[108] = "0b10111101101001010100010011110001";
        ram[109] = "0b10111101000111101011001000000111";
        ram[110] = "0b00111101101010011010111000110100";
        ram[111] = "0b10111100000001001000000111111011";
        ram[112] = "0b00111101001111110010000011000010";
        ram[113] = "0b10111100111011000010111011001000";
        ram[114] = "0b10111101000110001011101110011110";
        ram[115] = "0b10111101110101000000110101001110";
        ram[116] = "0b10111101010100011011010101101010";
        ram[117] = "0b10111101100000110010011010011110";
        ram[118] = "0b00111110001001100100000011101010";
        ram[119] = "0b00111100100101111111100100011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_6) {
meminst = new inference_conv2d_f3_1_2_6_ram("inference_conv2d_f3_1_2_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_6() {
    delete meminst;
}


};//endmodule
#endif
