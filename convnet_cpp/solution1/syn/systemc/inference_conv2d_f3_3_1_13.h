// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_13_H__
#define __inference_conv2d_f3_3_1_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_13_ram) {
        ram[0] = "0b00111110001100010110010001000001";
        ram[1] = "0b00111101010110111001001111110101";
        ram[2] = "0b00111101101000100100110111000110";
        ram[3] = "0b10111100010101111110111101000000";
        ram[4] = "0b10111101110011011010000010011101";
        ram[5] = "0b10111101100010000111010110101101";
        ram[6] = "0b10111101011011101110101110001011";
        ram[7] = "0b00111101100110100111100111111111";
        ram[8] = "0b00111110000110111101000100100100";
        ram[9] = "0b10111101111110111100110000101001";
        ram[10] = "0b10111101001111010111001010000111";
        ram[11] = "0b00111110001110011101010101011110";
        ram[12] = "0b00111101010110101110011110101101";
        ram[13] = "0b00111101111010011011100001000101";
        ram[14] = "0b00111101110001010011100000110011";
        ram[15] = "0b10111101000110000010111111110010";
        ram[16] = "0b00111100010011001101000101101010";
        ram[17] = "0b10111100011101110001010000110100";
        ram[18] = "0b00111110001110010111111101100011";
        ram[19] = "0b00111100100011011011111100000101";
        ram[20] = "0b10111100001000111001001101001101";
        ram[21] = "0b10111101101100011100011010000001";
        ram[22] = "0b10111110001110011010101000011101";
        ram[23] = "0b00111101100110011111111010100001";
        ram[24] = "0b10111101101000111100110111101011";
        ram[25] = "0b00111101001001111000100111100111";
        ram[26] = "0b10111101101011000100110011010010";
        ram[27] = "0b00111101101011010011001100010111";
        ram[28] = "0b10111110001100011000100101111010";
        ram[29] = "0b10111101100000100011010110101000";
        ram[30] = "0b10111101111011110000101011100101";
        ram[31] = "0b00111101000010000100000011111100";
        ram[32] = "0b10111101100011011101101100010010";
        ram[33] = "0b00111101000010101110100100011000";
        ram[34] = "0b00111100111011011011010000111001";
        ram[35] = "0b00111100101100011111000100010100";
        ram[36] = "0b10111011110001110111100000001111";
        ram[37] = "0b00111100000010100110100001000100";
        ram[38] = "0b00111101110111011111001110110110";
        ram[39] = "0b00111101111100111010010001110010";
        ram[40] = "0b00111101100101010010101010111010";
        ram[41] = "0b10111101111000001000010000011111";
        ram[42] = "0b00111101010000101011000111011100";
        ram[43] = "0b10111101011000000010100001111010";
        ram[44] = "0b10111101100111101011001100101111";
        ram[45] = "0b00111101101100101100000100101011";
        ram[46] = "0b10111101101011100000111001011001";
        ram[47] = "0b00111101010010000000101111101101";
        ram[48] = "0b10111110000011001011101111000011";
        ram[49] = "0b10111110001011001100111111110010";
        ram[50] = "0b00111101000110111111011000110101";
        ram[51] = "0b00111101000110011101010011011000";
        ram[52] = "0b00111101001101111000000010100000";
        ram[53] = "0b00111101100010001101100101001011";
        ram[54] = "0b00111101100100001010011001000000";
        ram[55] = "0b10111101110011000111010101011001";
        ram[56] = "0b10111101100000111000000000111000";
        ram[57] = "0b10111101001011000111001001101010";
        ram[58] = "0b00111101101011100101110101011011";
        ram[59] = "0b10111101010111000000110000100000";
        ram[60] = "0b10111100101000001111100011010100";
        ram[61] = "0b10111101110100100000011001000010";
        ram[62] = "0b10111101011000100010110011001011";
        ram[63] = "0b00111101100101111110010011010001";
        ram[64] = "0b00111101101011011011101000100101";
        ram[65] = "0b00111101011111010100101110100000";
        ram[66] = "0b00111110010101101110111110000000";
        ram[67] = "0b00111101001010101110010001000101";
        ram[68] = "0b10111101111100101000111000001101";
        ram[69] = "0b00111100001111110111011100001110";
        ram[70] = "0b00111101101001110010000110100000";
        ram[71] = "0b10111101110111101001010000100101";
        ram[72] = "0b00111100101100101111000101011001";
        ram[73] = "0b10111101000111011010001010001101";
        ram[74] = "0b00111101010101000101011000010011";
        ram[75] = "0b00111101010010100110101111001001";
        ram[76] = "0b00111110001101001000000101101111";
        ram[77] = "0b10111101001000111010001001001100";
        ram[78] = "0b00111101010110101110010101000100";
        ram[79] = "0b00111110010011001100001001010000";
        ram[80] = "0b10111011110010110010110010100100";
        ram[81] = "0b10111101010110000010001001101011";
        ram[82] = "0b00111101011010101011011000100010";
        ram[83] = "0b10111100001010000101100101010000";
        ram[84] = "0b10111101101000111001000110100000";
        ram[85] = "0b10111101000100011111000101111111";
        ram[86] = "0b00111110000001011000000101001001";
        ram[87] = "0b00111001100000001011111000011010";
        ram[88] = "0b10111101100101100111111100100101";
        ram[89] = "0b00111101001100110110000100100001";
        ram[90] = "0b00111011000010010100000000110000";
        ram[91] = "0b00111011110011111000111001001000";
        ram[92] = "0b00111100000101100000101110100101";
        ram[93] = "0b10111101001001111010100010000110";
        ram[94] = "0b10111101101010101100010110110100";
        ram[95] = "0b10111101111110110010101010101110";
        ram[96] = "0b10111101000000101110111011001000";
        ram[97] = "0b00111100010001111010111011101011";
        ram[98] = "0b10111110001011111001111101000101";
        ram[99] = "0b10111101000000000111111100010110";
        ram[100] = "0b10111110001001100001110111001001";
        ram[101] = "0b00111101100010011110111011100111";
        ram[102] = "0b00111101101000010000101100101101";
        ram[103] = "0b00111100101010000000101111101101";
        ram[104] = "0b00111101001001100000101110110011";
        ram[105] = "0b00111100111001111101001101001110";
        ram[106] = "0b00111101010100111100100101000000";
        ram[107] = "0b00111101110110101011100011101001";
        ram[108] = "0b10111011011010010110111111110001";
        ram[109] = "0b00111100101100100111010101101000";
        ram[110] = "0b10111101110110111001010110100011";
        ram[111] = "0b00111101101000101001111010111001";
        ram[112] = "0b10111101111011111110101111010001";
        ram[113] = "0b00111101111110110110001111010100";
        ram[114] = "0b00111101100001000011101101110001";
        ram[115] = "0b10111101000001101001001010001100";
        ram[116] = "0b00111101110111100010000001000111";
        ram[117] = "0b00111101101001111101100010001100";
        ram[118] = "0b10111101101101101001110001001100";
        ram[119] = "0b10111101001000011011001010001000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_13) {
meminst = new inference_conv2d_f3_3_1_13_ram("inference_conv2d_f3_3_1_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_13() {
    delete meminst;
}


};//endmodule
#endif
