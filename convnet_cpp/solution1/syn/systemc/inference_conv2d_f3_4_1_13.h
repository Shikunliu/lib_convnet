// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_13_H__
#define __inference_conv2d_f3_4_1_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_13_ram) {
        ram[0] = "0b00111101000000101000011011111001";
        ram[1] = "0b00111110010110010100101011110101";
        ram[2] = "0b10111101000011110011101011010001";
        ram[3] = "0b10111101010011111010111001000011";
        ram[4] = "0b10111101010111110000001001011001";
        ram[5] = "0b10111101001101110100010011110110";
        ram[6] = "0b10111101110011011011101101011010";
        ram[7] = "0b10111101001010010101110101110111";
        ram[8] = "0b00111110010001010100111000101011";
        ram[9] = "0b10111110000101011100011111001110";
        ram[10] = "0b10111101010111001101101001100001";
        ram[11] = "0b00111011100111010101011110101010";
        ram[12] = "0b10111101010000000101001101011101";
        ram[13] = "0b10111110000100010111000000001101";
        ram[14] = "0b10111100111111111010111101000010";
        ram[15] = "0b00111101100001010000010111111001";
        ram[16] = "0b10111101100010110010011001100010";
        ram[17] = "0b00111101000101110011110001011101";
        ram[18] = "0b10111101111111100101111010101011";
        ram[19] = "0b00111101101100110011000010000111";
        ram[20] = "0b00111101010000111101111100000010";
        ram[21] = "0b00111100001100000010000001011001";
        ram[22] = "0b00111101101101000000111010000010";
        ram[23] = "0b00111110000111110010101010011101";
        ram[24] = "0b10111100011100011000010111101010";
        ram[25] = "0b10111101111111110110011011101000";
        ram[26] = "0b10111101001001001100001101111110";
        ram[27] = "0b00111101100011001100101101110000";
        ram[28] = "0b10111101000001010100101011000011";
        ram[29] = "0b00111101011101101100000101011101";
        ram[30] = "0b10111101100010111100100001001000";
        ram[31] = "0b10111101010101000000011000010010";
        ram[32] = "0b00111011100101100001100001110000";
        ram[33] = "0b00111110000110001010110001011100";
        ram[34] = "0b00111101100011000001001100001011";
        ram[35] = "0b10111101001101010101000101101011";
        ram[36] = "0b10111101101110001010101000011011";
        ram[37] = "0b10111100001000111000000001001101";
        ram[38] = "0b10111101000110100011010110111100";
        ram[39] = "0b10111110000000000000111000101000";
        ram[40] = "0b10111110001101011111110111001110";
        ram[41] = "0b00111101100100101010101001101010";
        ram[42] = "0b00111101110011000111000101011101";
        ram[43] = "0b00111110000011101100011101000011";
        ram[44] = "0b10111101100100110010110101111100";
        ram[45] = "0b00111100011110101001100100100011";
        ram[46] = "0b10111101101010010011010101110110";
        ram[47] = "0b10111110000011001001000100001000";
        ram[48] = "0b00111101011110101001010000110110";
        ram[49] = "0b10111101000110111000011000000011";
        ram[50] = "0b00111101111011111000101011010010";
        ram[51] = "0b00111101111100101110001110000010";
        ram[52] = "0b00111101100001010110101101101100";
        ram[53] = "0b00111110000110101010011111011111";
        ram[54] = "0b00111101101101110111001010010011";
        ram[55] = "0b00111101001111010111100100100010";
        ram[56] = "0b10111110000100011100110010010110";
        ram[57] = "0b00111010001011010100011010001110";
        ram[58] = "0b10111101011111001010001001001000";
        ram[59] = "0b00111100110001100111000000100111";
        ram[60] = "0b00111101111010000000111000000110";
        ram[61] = "0b00111101110111110101100101000111";
        ram[62] = "0b00111110001011001100000111001010";
        ram[63] = "0b10111101100001101011011000010111";
        ram[64] = "0b10111100100100100000001000101011";
        ram[65] = "0b00111101100010111110101011110000";
        ram[66] = "0b10111100101100101100100011100000";
        ram[67] = "0b10111110010000011100100101110001";
        ram[68] = "0b00111101111111111101001011101001";
        ram[69] = "0b10111101101110101011000101000001";
        ram[70] = "0b10111011111010001101100100011101";
        ram[71] = "0b00111110000101110010001110101011";
        ram[72] = "0b00111110000010101110100110101011";
        ram[73] = "0b10111110000011100000110110101010";
        ram[74] = "0b00111101111010011010101110110000";
        ram[75] = "0b10111110011001011010010101110110";
        ram[76] = "0b00111011011000000111101001111111";
        ram[77] = "0b00111100110010010011010011001000";
        ram[78] = "0b10111100111110011101001000011110";
        ram[79] = "0b10111101110001001100101001011101";
        ram[80] = "0b00111100111111001011001000000010";
        ram[81] = "0b10111101100101100111011101010110";
        ram[82] = "0b00111101111000110111101000111110";
        ram[83] = "0b00111101110001011001100001000000";
        ram[84] = "0b00111110001110000001001110001000";
        ram[85] = "0b00111101110001011010101101110000";
        ram[86] = "0b10111101111100101100100111010001";
        ram[87] = "0b10111100111000100000010010100010";
        ram[88] = "0b00111011011001001111110001101110";
        ram[89] = "0b10111101111110011011111001001101";
        ram[90] = "0b10111101100110111111000001110001";
        ram[91] = "0b10111101010110101011011010110101";
        ram[92] = "0b10111101111000100001001100011011";
        ram[93] = "0b00111101101101001000001110100011";
        ram[94] = "0b10111101101010001001001010011110";
        ram[95] = "0b00111101001010101001010001000011";
        ram[96] = "0b10111101011100111011101000001100";
        ram[97] = "0b00111101001100110011011111010000";
        ram[98] = "0b00111100001101110100101011110000";
        ram[99] = "0b00111110001010111100001001110110";
        ram[100] = "0b10111101100111000100101000100110";
        ram[101] = "0b10111110000010001011100101111000";
        ram[102] = "0b00111101000110100001001010011011";
        ram[103] = "0b10111101111001000001110011000101";
        ram[104] = "0b00111101101011110011100100110001";
        ram[105] = "0b10111101110100110101101100001100";
        ram[106] = "0b00111101101001101100001001110111";
        ram[107] = "0b10111101110110010100010110110111";
        ram[108] = "0b00111101010100100010001011001000";
        ram[109] = "0b10111101110001100001101001000110";
        ram[110] = "0b10111101100000101101100101010110";
        ram[111] = "0b10111101011110000000010011011010";
        ram[112] = "0b00111101101000011010000111101001";
        ram[113] = "0b00111101111011101111010101100110";
        ram[114] = "0b10111110001101101110101011001000";
        ram[115] = "0b00111110000111110001110111000101";
        ram[116] = "0b10111100101100000111010000111100";
        ram[117] = "0b10111101101000100100001100000110";
        ram[118] = "0b00111101000001100111101010100011";
        ram[119] = "0b00111100101010110011011101010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_13) {
meminst = new inference_conv2d_f3_4_1_13_ram("inference_conv2d_f3_4_1_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_13() {
    delete meminst;
}


};//endmodule
#endif
