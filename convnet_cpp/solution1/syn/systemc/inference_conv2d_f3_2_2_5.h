// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_5_H__
#define __inference_conv2d_f3_2_2_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_5_ram) {
        ram[0] = "0b10111100100100001101001001001011";
        ram[1] = "0b10111101100010110010101001101011";
        ram[2] = "0b00111110000010101010001100100111";
        ram[3] = "0b00111100111111011000110010111110";
        ram[4] = "0b00111011001010110100110101001011";
        ram[5] = "0b00111011100100101110110110000011";
        ram[6] = "0b10111100101111000101110000000111";
        ram[7] = "0b10111101101111010101111110110101";
        ram[8] = "0b00111110000000110000101011010100";
        ram[9] = "0b00111101001111100101000101011010";
        ram[10] = "0b00111101110001000111100010100000";
        ram[11] = "0b00111101000001110000010001010001";
        ram[12] = "0b00111100110110101110110101010111";
        ram[13] = "0b00111110000001010110010100111101";
        ram[14] = "0b10111100001111110110111111101101";
        ram[15] = "0b00111110010100110101100001101101";
        ram[16] = "0b10111101000001000100010100111111";
        ram[17] = "0b10111101101000111000010100110011";
        ram[18] = "0b00111101001100100011010010000000";
        ram[19] = "0b00111101111001011111011000110100";
        ram[20] = "0b10111101101001000101001010000011";
        ram[21] = "0b10111100010010111001110001001011";
        ram[22] = "0b00111101010011010001111101101110";
        ram[23] = "0b00111101100101011101100111100100";
        ram[24] = "0b00111101111110101001101100000111";
        ram[25] = "0b10111101000000000100111110010110";
        ram[26] = "0b00111101100011110100001001010000";
        ram[27] = "0b00111101100100010011100100001101";
        ram[28] = "0b10111101100101110011001010101010";
        ram[29] = "0b10111110001001100011110001110101";
        ram[30] = "0b00111110000001101000110111111100";
        ram[31] = "0b00111110001101110110111011100111";
        ram[32] = "0b10111101110100101001100000000011";
        ram[33] = "0b10111100111111001101110100110110";
        ram[34] = "0b10111100000111011100000100010001";
        ram[35] = "0b00111110000000010100010111011000";
        ram[36] = "0b10111101110000100000010101101011";
        ram[37] = "0b00111100101000101011110110011010";
        ram[38] = "0b10111101110010100110110000001101";
        ram[39] = "0b10111101101001111000000110101100";
        ram[40] = "0b00111101101110110111010011011110";
        ram[41] = "0b10111100111101000110010111001110";
        ram[42] = "0b10111101110000011010000100111010";
        ram[43] = "0b10111100110010010010011101011100";
        ram[44] = "0b00111101100010010111011010010100";
        ram[45] = "0b00111110010110110000110011001100";
        ram[46] = "0b00111110011110011110001111001001";
        ram[47] = "0b10111101001101000111010100000010";
        ram[48] = "0b00111101100111101101101100111101";
        ram[49] = "0b10111101100010100111100110010011";
        ram[50] = "0b10111101001101111110101010111101";
        ram[51] = "0b10111101111001011101111100100010";
        ram[52] = "0b10111110000110100000000010011111";
        ram[53] = "0b10111110001000001000011111001010";
        ram[54] = "0b00111110010001001001101111101001";
        ram[55] = "0b10111101110011001001101100100110";
        ram[56] = "0b00111101010010111000110011000110";
        ram[57] = "0b00111101110001100001101001100001";
        ram[58] = "0b10111101011101100100000010011001";
        ram[59] = "0b10111101100110101001100011010011";
        ram[60] = "0b10111101100100001110000010001101";
        ram[61] = "0b10111101101110011000000010010111";
        ram[62] = "0b00111101100000000010001111000010";
        ram[63] = "0b00111101101110110010110101011011";
        ram[64] = "0b00111101001010101100111111010010";
        ram[65] = "0b10111101100100111100011000001110";
        ram[66] = "0b10111011011001111111001011101110";
        ram[67] = "0b00111010010001111111100101010011";
        ram[68] = "0b00111110000000000110101011110100";
        ram[69] = "0b00111101100101101011111101010010";
        ram[70] = "0b10111110010011111100100010110000";
        ram[71] = "0b00111101101011110000010001110010";
        ram[72] = "0b00111101011011110011101100111100";
        ram[73] = "0b10111110010100010100001110111111";
        ram[74] = "0b00111110000001000001011010111110";
        ram[75] = "0b00111011110000001110110111011100";
        ram[76] = "0b10111101111000001010111010010111";
        ram[77] = "0b00111011111010000110110101111101";
        ram[78] = "0b00111110000110011010110010111101";
        ram[79] = "0b00111101000100011111000011111001";
        ram[80] = "0b00111100110100001100000101001110";
        ram[81] = "0b10111100100111100011011110001110";
        ram[82] = "0b10111101100000010000011001101000";
        ram[83] = "0b00111101011011111000000111101001";
        ram[84] = "0b10111100101011001011101111101011";
        ram[85] = "0b10111101001101100101010110101101";
        ram[86] = "0b10111110000011111011001110110111";
        ram[87] = "0b10111101001010110000010001000000";
        ram[88] = "0b00111110001111001011101111000011";
        ram[89] = "0b00111110000011000010000010010010";
        ram[90] = "0b00111101110011011001101001010010";
        ram[91] = "0b10111101010100110010001101000011";
        ram[92] = "0b00111101000011100001001110100100";
        ram[93] = "0b00111110001100000011100001011100";
        ram[94] = "0b10111110000101011000101011111100";
        ram[95] = "0b10111110000011111010011101100101";
        ram[96] = "0b00111101101101100010011001100010";
        ram[97] = "0b00111100000101011000000110100111";
        ram[98] = "0b10111101100011010001011011101111";
        ram[99] = "0b00111100100001110100111110000000";
        ram[100] = "0b00111100101010111100000101001111";
        ram[101] = "0b10111110001111010101000011101100";
        ram[102] = "0b10111101100111010011000011110000";
        ram[103] = "0b00111110001010100111100110111100";
        ram[104] = "0b10111011011001111001000011110011";
        ram[105] = "0b10111101000100000010110001001101";
        ram[106] = "0b10111101111101010001110011100011";
        ram[107] = "0b00111101100011101010000110011110";
        ram[108] = "0b00111110000000100010010001101000";
        ram[109] = "0b00111100100110001011000011010001";
        ram[110] = "0b10111101100000001100110001101011";
        ram[111] = "0b00111100111101010010111110001101";
        ram[112] = "0b10111101001010011010001010010001";
        ram[113] = "0b00111101100101010000101001101110";
        ram[114] = "0b10111101101100010100000001100100";
        ram[115] = "0b10111101111000111111110101010000";
        ram[116] = "0b00111100111001001010111111100011";
        ram[117] = "0b10111011111011100001010010110001";
        ram[118] = "0b10111101001110010011001111111110";
        ram[119] = "0b00111101111011011001001110000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_5) {
meminst = new inference_conv2d_f3_2_2_5_ram("inference_conv2d_f3_2_2_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_5() {
    delete meminst;
}


};//endmodule
#endif
