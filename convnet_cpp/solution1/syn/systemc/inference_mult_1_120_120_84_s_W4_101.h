// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_101_H__
#define __inference_mult_1_120_120_84_s_W4_101_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_101_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_101_ram) {
        ram[0] = "0b10111101001101101000101111111110";
        ram[1] = "0b10111110001001111000110100001101";
        ram[2] = "0b00111101101100001000111100111100";
        ram[3] = "0b00111101000010011101000100111010";
        ram[4] = "0b10111100111000110011100111110111";
        ram[5] = "0b00111101101010101000001111110101";
        ram[6] = "0b00111110001111011001101010010101";
        ram[7] = "0b00111101111111010000000001110001";
        ram[8] = "0b10111101101011010011110000011011";
        ram[9] = "0b10111100001010110010010101001000";
        ram[10] = "0b00111101110111000101101000111110";
        ram[11] = "0b00111101101101001011000100001010";
        ram[12] = "0b00111101111101010010111010110110";
        ram[13] = "0b00111100110111110100110111011001";
        ram[14] = "0b10111110001001011011001000001100";
        ram[15] = "0b00111101100100110111110110011001";
        ram[16] = "0b10111100111010010100001100100101";
        ram[17] = "0b00111110000011101110111010010101";
        ram[18] = "0b10111101100010111010001010111110";
        ram[19] = "0b00111100010011000001100011011101";
        ram[20] = "0b00111101000100010110000011001011";
        ram[21] = "0b00111101111100100001100100100010";
        ram[22] = "0b10111010101011111110111101110001";
        ram[23] = "0b00111101000111001001101010000101";
        ram[24] = "0b00111110010000100010100011011101";
        ram[25] = "0b00111100101101100001001010101100";
        ram[26] = "0b00111101100100101111111011010011";
        ram[27] = "0b10111101110110001011111101111111";
        ram[28] = "0b10111101100101110100000000110000";
        ram[29] = "0b10111101011011110101001000011000";
        ram[30] = "0b00111101011110000001101010101001";
        ram[31] = "0b10111101110011000001000110111100";
        ram[32] = "0b10111011101001111001101111100110";
        ram[33] = "0b10111101010010000101110011000110";
        ram[34] = "0b10111110001111111010100100111011";
        ram[35] = "0b10111110001000001101111100010110";
        ram[36] = "0b00111101101100001000111001001011";
        ram[37] = "0b10111101010010100011001000111000";
        ram[38] = "0b10111101001000010100110010000001";
        ram[39] = "0b10111101100011011010011001100001";
        ram[40] = "0b00111100011100110011100000000110";
        ram[41] = "0b00111101110001101101001101001011";
        ram[42] = "0b00111101100000011010111011101010";
        ram[43] = "0b00111101101111111111001000110110";
        ram[44] = "0b10111101101110011011101001111001";
        ram[45] = "0b10111110000000001110010101100000";
        ram[46] = "0b10111101010000101011001101101110";
        ram[47] = "0b10111100111100111111011001110010";
        ram[48] = "0b00111101110110010100101101111011";
        ram[49] = "0b00111101001110101111111001101110";
        ram[50] = "0b00111101101100111000110100101011";
        ram[51] = "0b10111110001010101110001111100111";
        ram[52] = "0b10111100011000100110100010101011";
        ram[53] = "0b10111101100001001101000110110100";
        ram[54] = "0b10111100011010101100001010000001";
        ram[55] = "0b00111101111111000110110010011000";
        ram[56] = "0b00111101000000011001001001110010";
        ram[57] = "0b10111101100001011000010001000110";
        ram[58] = "0b10111101000110110001011100101101";
        ram[59] = "0b10111101001101111011000111101000";
        ram[60] = "0b10111101101100100111001110010011";
        ram[61] = "0b00111101111000001011010001011011";
        ram[62] = "0b00111101100111100110000000010101";
        ram[63] = "0b00111101011011000011101011110001";
        ram[64] = "0b00111100000101001001111000110010";
        ram[65] = "0b00111110000011000010000011010101";
        ram[66] = "0b10111011101001101011011001001101";
        ram[67] = "0b00111101001011010101111000100010";
        ram[68] = "0b00111101001100100111011011000101";
        ram[69] = "0b00111110000011101110011010111000";
        ram[70] = "0b00111101111010011000101110110101";
        ram[71] = "0b10111100101010110000101101000111";
        ram[72] = "0b00111101111011100010000010001010";
        ram[73] = "0b00111011111111101111111111111011";
        ram[74] = "0b10111101101010100011000001001000";
        ram[75] = "0b10111100101101001000101000010110";
        ram[76] = "0b00111101100111110000000010000100";
        ram[77] = "0b00111110001011110000111101011010";
        ram[78] = "0b00111101001111101010101110111101";
        ram[79] = "0b00111101101010100101111101110111";
        ram[80] = "0b10111101101111011001001000111111";
        ram[81] = "0b10111110000011100111000110001011";
        ram[82] = "0b00111101110101010000101000000011";
        ram[83] = "0b10111011110010111100000010110011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_101) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_101_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_101) {
meminst = new inference_mult_1_120_120_84_s_W4_101_ram("inference_mult_1_120_120_84_s_W4_101_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_101() {
    delete meminst;
}


};//endmodule
#endif
