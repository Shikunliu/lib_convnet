// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_3_H__
#define __inference_mult_1_120_120_84_s_W4_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_3_ram) {
        ram[0] = "0b00111110001101110011001100100010";
        ram[1] = "0b00111101001100011010010101111010";
        ram[2] = "0b00111101001100110010011100100100";
        ram[3] = "0b10111101111011111000011100100111";
        ram[4] = "0b10111100111010101011011101100100";
        ram[5] = "0b00111101011011111110111110110010";
        ram[6] = "0b00111101011111111111011100110001";
        ram[7] = "0b10111101110001010001101101011101";
        ram[8] = "0b10111101101100001011101011001110";
        ram[9] = "0b00111101110011001111010100101100";
        ram[10] = "0b00111101110011001000100000111001";
        ram[11] = "0b00111100010010101010100111011101";
        ram[12] = "0b00111110001000001010000110111110";
        ram[13] = "0b10111101110010100110111111000110";
        ram[14] = "0b10111101111010010010001011011001";
        ram[15] = "0b00111110000101000011101001100100";
        ram[16] = "0b10111100001001110111000010000111";
        ram[17] = "0b10111101100110001111010011010001";
        ram[18] = "0b00111101110000111101010001000011";
        ram[19] = "0b00111101110011001011110000010011";
        ram[20] = "0b00111110001011010101101010011111";
        ram[21] = "0b00111101111101101010111110001010";
        ram[22] = "0b00111110010111011011011100101000";
        ram[23] = "0b10111101100111011110110110101111";
        ram[24] = "0b10111101001011100110110110110111";
        ram[25] = "0b00111101101000100001111010110001";
        ram[26] = "0b00111101111110111001000011101011";
        ram[27] = "0b00111100101111011110000000000000";
        ram[28] = "0b00111101110000010000011011000110";
        ram[29] = "0b10111101100100100110001110111101";
        ram[30] = "0b00111010100001110110101000010111";
        ram[31] = "0b10111011111100111101011010010001";
        ram[32] = "0b10111100101100111111100011110110";
        ram[33] = "0b00111011110100101110111010100101";
        ram[34] = "0b10111101010101110100000010101001";
        ram[35] = "0b10111011011110010110100100111000";
        ram[36] = "0b10111101100100110101111100111101";
        ram[37] = "0b10111101001001110111100011101011";
        ram[38] = "0b10111100010010001111100010010111";
        ram[39] = "0b10111101111100011010010111001010";
        ram[40] = "0b00111101010011010001000010001010";
        ram[41] = "0b10111101011001000101110111111110";
        ram[42] = "0b00111101011001011100011100011111";
        ram[43] = "0b00111110010110110000011100000111";
        ram[44] = "0b10111100011100111101111010001010";
        ram[45] = "0b10111101101100001101001001100110";
        ram[46] = "0b00111100101101111101100001111111";
        ram[47] = "0b10111101111000010011111000111110";
        ram[48] = "0b10111100110100111111001011000110";
        ram[49] = "0b00111101010101000110100001010010";
        ram[50] = "0b00111101110100110110100110111010";
        ram[51] = "0b00111101001110011111011000010110";
        ram[52] = "0b10111101100000110011101000111010";
        ram[53] = "0b00111100111101101110010100000100";
        ram[54] = "0b10111101000011001100110001000111";
        ram[55] = "0b00111101100100101010110001110101";
        ram[56] = "0b10111101110010100101110010110000";
        ram[57] = "0b10111101001111110111101000110100";
        ram[58] = "0b10111110001001011011111000011011";
        ram[59] = "0b10111101000101011111111101000110";
        ram[60] = "0b00111011110100100100011001001001";
        ram[61] = "0b10111101111101000101101111110010";
        ram[62] = "0b00111101001100000110100011001110";
        ram[63] = "0b00111110000000111011011001000110";
        ram[64] = "0b10111110001110010100000110000101";
        ram[65] = "0b00111100101001000101100111100111";
        ram[66] = "0b00111101111010010111101001101000";
        ram[67] = "0b10111100100111011000111010000110";
        ram[68] = "0b10111101101111010101111111011101";
        ram[69] = "0b00111101101110110011111010000000";
        ram[70] = "0b00111101011000010001011110001101";
        ram[71] = "0b10111101010001011011110000110111";
        ram[72] = "0b00111110000110001111100011101000";
        ram[73] = "0b10111100101011101001000111100100";
        ram[74] = "0b10111101011111110101111000011010";
        ram[75] = "0b00111101000000111011011110010101";
        ram[76] = "0b10111100100001111010000100010100";
        ram[77] = "0b10111101101100101101000100101000";
        ram[78] = "0b00111011010110011101100101010000";
        ram[79] = "0b00111110001010101011100110110010";
        ram[80] = "0b00111101001010011000110100010010";
        ram[81] = "0b10111100111101011001001010111111";
        ram[82] = "0b10111101100101110100101100011000";
        ram[83] = "0b00111110000011100011001100100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_3_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_3) {
meminst = new inference_mult_1_120_120_84_s_W4_3_ram("inference_mult_1_120_120_84_s_W4_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_3() {
    delete meminst;
}


};//endmodule
#endif
