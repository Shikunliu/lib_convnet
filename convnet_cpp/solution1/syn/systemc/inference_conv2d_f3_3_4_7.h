// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_4_7_H__
#define __inference_conv2d_f3_3_4_7_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_4_7_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_4_7_ram) {
        ram[0] = "0b10111101010010010110111001011001";
        ram[1] = "0b00111101100101010110100100101011";
        ram[2] = "0b00111101000001101010000101101111";
        ram[3] = "0b10111101100010010110110001110101";
        ram[4] = "0b10111100100111010110010010010101";
        ram[5] = "0b10111101010011101101010010010100";
        ram[6] = "0b00111101100101011111100001011010";
        ram[7] = "0b00111110000000101010011001101110";
        ram[8] = "0b00111101111011011001100111001100";
        ram[9] = "0b10111110000001111101000111111110";
        ram[10] = "0b10111100011101001110010111110001";
        ram[11] = "0b10111110001001111010011111001010";
        ram[12] = "0b10111101101101110000011011111101";
        ram[13] = "0b00111101010000110100000101001110";
        ram[14] = "0b00111100011100111011011100011100";
        ram[15] = "0b10111110000110110111100111011001";
        ram[16] = "0b10111100110100111101100110011100";
        ram[17] = "0b10111100101001000101110000110110";
        ram[18] = "0b10111100111101101111011101000011";
        ram[19] = "0b10111010000011001010111010000010";
        ram[20] = "0b10111101111001011011000110000101";
        ram[21] = "0b10111110001010100101100111000000";
        ram[22] = "0b10111101010111011101111110010100";
        ram[23] = "0b00111100001101101110110011111100";
        ram[24] = "0b10111100100100110100100001111100";
        ram[25] = "0b00111110001000100001010001101010";
        ram[26] = "0b00111101010011011111001001001100";
        ram[27] = "0b10111100111101110011111001011011";
        ram[28] = "0b00111101110000110010010011100011";
        ram[29] = "0b00111101001110101010011001110100";
        ram[30] = "0b00111101100110000010010111111100";
        ram[31] = "0b10111011101111011001111011011100";
        ram[32] = "0b10111110000011001000001110101001";
        ram[33] = "0b00111101011011111000000110011000";
        ram[34] = "0b10111011111101001001011000010100";
        ram[35] = "0b00111101110101001010101110100100";
        ram[36] = "0b00111110010010110000110100001111";
        ram[37] = "0b10111110000000101000111011010110";
        ram[38] = "0b10111100000111010100010111110111";
        ram[39] = "0b00111101100110011000001010001000";
        ram[40] = "0b10111101000010010000011011011010";
        ram[41] = "0b10111101101010010101100100101010";
        ram[42] = "0b10111101010101101100011010011011";
        ram[43] = "0b00111101110111001110101101111001";
        ram[44] = "0b10111101110111011101100001110011";
        ram[45] = "0b00111101011111010101111110001100";
        ram[46] = "0b10111101111001101111000001001010";
        ram[47] = "0b00111110000101001001000100101010";
        ram[48] = "0b10111100010111001011110100000101";
        ram[49] = "0b00111101000011110000101101010001";
        ram[50] = "0b00111110001001001001100011000100";
        ram[51] = "0b10111100010000000010100110111100";
        ram[52] = "0b00111100000110110011100011010110";
        ram[53] = "0b10111100110011100011010001000000";
        ram[54] = "0b10111100110110001011011001111010";
        ram[55] = "0b10111100000101000111100100011110";
        ram[56] = "0b10111101101010110010111110000001";
        ram[57] = "0b00111101101011011011110111000011";
        ram[58] = "0b00111110001000010001000100100111";
        ram[59] = "0b00111100101110000011111101110111";
        ram[60] = "0b00111101000101010011110011111001";
        ram[61] = "0b10111100100101110000110100101101";
        ram[62] = "0b10111100111001101110001100101110";
        ram[63] = "0b00111100010011110011011000110100";
        ram[64] = "0b10111101000110010101110110000100";
        ram[65] = "0b10111101111011000110110101100001";
        ram[66] = "0b10111110000111010010100000000111";
        ram[67] = "0b00111101111000100011000001110111";
        ram[68] = "0b10111101101110001010101010111100";
        ram[69] = "0b00111100100011001011000000010010";
        ram[70] = "0b00111101101110011000101001011000";
        ram[71] = "0b00111110000110000110011001011110";
        ram[72] = "0b00111100001110010111011010101111";
        ram[73] = "0b10111110000111111111010110000100";
        ram[74] = "0b00111101100000011011100000100100";
        ram[75] = "0b00111100010111000010001110000010";
        ram[76] = "0b10111101011000010010011001110001";
        ram[77] = "0b10111101000100110111100100001001";
        ram[78] = "0b00111101101010000100110001111000";
        ram[79] = "0b00111100000111110111111110101101";
        ram[80] = "0b10111101100010110100111000010010";
        ram[81] = "0b00111101101100111011001100111011";
        ram[82] = "0b00111011100100110010010010110101";
        ram[83] = "0b00111010110001011011110110001111";
        ram[84] = "0b10111101101100001101001001001011";
        ram[85] = "0b00111100110111010001010101001111";
        ram[86] = "0b10111011001110111111001010110101";
        ram[87] = "0b10111101000101110011110110011111";
        ram[88] = "0b10111100000100110111001001000011";
        ram[89] = "0b00111101111110101101011111011000";
        ram[90] = "0b10111110000010001000010111010011";
        ram[91] = "0b00111101001011110000110110111010";
        ram[92] = "0b00111101100010101100100011100111";
        ram[93] = "0b10111101100101001100011010111111";
        ram[94] = "0b00111101011110111101100110110000";
        ram[95] = "0b10111100010110010010011110111010";
        ram[96] = "0b10111110001010011000100010010000";
        ram[97] = "0b00111101101111001101101001100001";
        ram[98] = "0b00111101110001010001001110011011";
        ram[99] = "0b00111101100010011001100110011010";
        ram[100] = "0b10111100111001000011001110000110";
        ram[101] = "0b10111011110010010000111000010001";
        ram[102] = "0b10111100010111000001011011101101";
        ram[103] = "0b10111101100111010101100110100000";
        ram[104] = "0b00111110001001100110101001010101";
        ram[105] = "0b10111100111000111100011011100100";
        ram[106] = "0b00111100110100010001111010100001";
        ram[107] = "0b10111101100010101100010000101111";
        ram[108] = "0b00111101100010100010111100000110";
        ram[109] = "0b00111110001010111011111000000001";
        ram[110] = "0b00111100101110111110110110000001";
        ram[111] = "0b10111101001100001001010000000010";
        ram[112] = "0b10111110001000100011000011111101";
        ram[113] = "0b10111100111010101111001010000111";
        ram[114] = "0b10111110010001011011111101101010";
        ram[115] = "0b00111101010001001101101001011010";
        ram[116] = "0b10111101000000101011111001010110";
        ram[117] = "0b00111100111101010000011100010011";
        ram[118] = "0b00111101001000010000111100001111";
        ram[119] = "0b10111101101101100001000110101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_4_7) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_4_7_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_4_7) {
meminst = new inference_conv2d_f3_3_4_7_ram("inference_conv2d_f3_3_4_7_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_4_7() {
    delete meminst;
}


};//endmodule
#endif
