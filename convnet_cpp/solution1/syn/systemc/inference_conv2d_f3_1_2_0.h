// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_0_H__
#define __inference_conv2d_f3_1_2_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_0_ram) {
        ram[0] = "0b00111101011110101001111111011001";
        ram[1] = "0b10111100011011100000001100010011";
        ram[2] = "0b00111011011100101010011110101000";
        ram[3] = "0b00111101000010001101001010111101";
        ram[4] = "0b00111100110010111011010101000000";
        ram[5] = "0b00111101010111100001110010000000";
        ram[6] = "0b00111100011010101100010100000101";
        ram[7] = "0b00111101101011011000000101011101";
        ram[8] = "0b10111101101101011011010001100111";
        ram[9] = "0b00111100111110010000010001100011";
        ram[10] = "0b00111101101011101010101111011000";
        ram[11] = "0b10111101110011010101101111101110";
        ram[12] = "0b00111101100000101100001000001111";
        ram[13] = "0b10111101111001000001011100000001";
        ram[14] = "0b00111101100100100000100110011101";
        ram[15] = "0b10111101000101000111011110111100";
        ram[16] = "0b10111110000011100101101110000101";
        ram[17] = "0b10111100011111000011001010000001";
        ram[18] = "0b00111101110101000001100011010111";
        ram[19] = "0b00111101111000100000010111111111";
        ram[20] = "0b10111110001101000101110010111100";
        ram[21] = "0b00111100011110000001110110110011";
        ram[22] = "0b10111101100110110101101011001111";
        ram[23] = "0b00111101010110000001001100110111";
        ram[24] = "0b10111101110101011100101111111111";
        ram[25] = "0b10111101011001010000101001000110";
        ram[26] = "0b00111101001010111111110001011000";
        ram[27] = "0b10111101110110000001100001000000";
        ram[28] = "0b10111101111001100100011101111000";
        ram[29] = "0b10111101101001110010101010010111";
        ram[30] = "0b00111100100110001011011001000101";
        ram[31] = "0b00111100111000101011010110100010";
        ram[32] = "0b00111010000001111000111010111011";
        ram[33] = "0b10111100011010100010111110110100";
        ram[34] = "0b10111011100111101011010100110111";
        ram[35] = "0b10111101100101111111010010011001";
        ram[36] = "0b10111101000010100010011010110000";
        ram[37] = "0b10111101100001100001100100010001";
        ram[38] = "0b10111110000100101001011001110000";
        ram[39] = "0b00111101101101111001110111010100";
        ram[40] = "0b10111101111101011011100000010011";
        ram[41] = "0b10111101011011000000111001100001";
        ram[42] = "0b00111101100111111110011010100000";
        ram[43] = "0b10111100000000110110010111000110";
        ram[44] = "0b10111110010101110110100100100011";
        ram[45] = "0b00111110000010011100111000000111";
        ram[46] = "0b00111110001000010011100110000110";
        ram[47] = "0b00111101000111011001110110100000";
        ram[48] = "0b10111101010100010101001010001000";
        ram[49] = "0b00111011111001001100111111111001";
        ram[50] = "0b10111101110111001110110010000101";
        ram[51] = "0b10111101000010001010111101100111";
        ram[52] = "0b00111101001111001011000111001101";
        ram[53] = "0b00111101000000110100011100010010";
        ram[54] = "0b00111100111110100100111100011100";
        ram[55] = "0b00111101101111010111000101000101";
        ram[56] = "0b00111110000010100111100011110010";
        ram[57] = "0b00111100101101010101001101101001";
        ram[58] = "0b10111101101010010111001110100100";
        ram[59] = "0b10111110010010010010110001001001";
        ram[60] = "0b10111100101011101110100110001101";
        ram[61] = "0b10111110001100011100110011011001";
        ram[62] = "0b00111101101100011001001011011101";
        ram[63] = "0b10111110000011010001111110100011";
        ram[64] = "0b10111110001100000100111011101000";
        ram[65] = "0b00111101010000101011000110100110";
        ram[66] = "0b00111101100100000100101001001011";
        ram[67] = "0b10111100000101000000001001001011";
        ram[68] = "0b10111110011011100101000011000110";
        ram[69] = "0b10111110001010010001110111011110";
        ram[70] = "0b00111101110111101100000100111100";
        ram[71] = "0b10111101011000011111110011111011";
        ram[72] = "0b10111100110110110001010001011000";
        ram[73] = "0b00111101011101000010011111110000";
        ram[74] = "0b10111101001111100011100110100111";
        ram[75] = "0b10111100011010000101110000001010";
        ram[76] = "0b00111110001111011100010111010110";
        ram[77] = "0b00111110000110100001010101010101";
        ram[78] = "0b10111011001100001100011110001001";
        ram[79] = "0b00111110011101011110101000100101";
        ram[80] = "0b00111110010000010110111110000111";
        ram[81] = "0b10111101001110000100001000110001";
        ram[82] = "0b10111100101010101011100011011011";
        ram[83] = "0b10111101100010001010011111110101";
        ram[84] = "0b10111101110100100010010100110001";
        ram[85] = "0b00111110001001001100000010011100";
        ram[86] = "0b10111001101101011110000100010010";
        ram[87] = "0b10111110000010101011011001001010";
        ram[88] = "0b10111101110010010111010110100010";
        ram[89] = "0b00111101110001000001011111001010";
        ram[90] = "0b10111101101100111001100111001110";
        ram[91] = "0b10111101100001000000011110110010";
        ram[92] = "0b10111100111000101111001001110011";
        ram[93] = "0b10111011010010000011110010011010";
        ram[94] = "0b10111110010010111001000000100001";
        ram[95] = "0b00111101110010001100111010001011";
        ram[96] = "0b10111101100010011110001011100101";
        ram[97] = "0b10111100111001011010111011100110";
        ram[98] = "0b00111101101110011100111101110010";
        ram[99] = "0b10111101100100000111110100001011";
        ram[100] = "0b10111101010101001000100101011010";
        ram[101] = "0b10111011101110110001010100111111";
        ram[102] = "0b10111100100000101011101101100110";
        ram[103] = "0b10111101111100100111000100110111";
        ram[104] = "0b00111101111100011001101101001110";
        ram[105] = "0b10111101101101110011110001101010";
        ram[106] = "0b00111101110000111000000000101010";
        ram[107] = "0b00111101010100101011110010110110";
        ram[108] = "0b00111110000011111110101010000001";
        ram[109] = "0b10111101011010110111111010000100";
        ram[110] = "0b10111100111111011100111100000011";
        ram[111] = "0b10111101111100001100110000110110";
        ram[112] = "0b10111101101111001100111101000100";
        ram[113] = "0b00111110000001100001110010111101";
        ram[114] = "0b00111100100111001110010011011101";
        ram[115] = "0b00111110001000000111111110101010";
        ram[116] = "0b10111101001101110000110011000010";
        ram[117] = "0b10111101100100001110010010111111";
        ram[118] = "0b10111101100010110011100110111010";
        ram[119] = "0b00111110000110001100101010000010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_0) {
meminst = new inference_conv2d_f3_1_2_0_ram("inference_conv2d_f3_1_2_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_0() {
    delete meminst;
}


};//endmodule
#endif
