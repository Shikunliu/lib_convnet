// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _inference_softmax_1_10_s_HH_
#define _inference_softmax_1_10_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "inference_fcmp_32ns_32ns_1_1.h"

namespace ap_rtl {

struct inference_softmax_1_10_s : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > A_0_0_address0;
    sc_out< sc_logic > A_0_0_ce0;
    sc_in< sc_lv<32> > A_0_0_q0;
    sc_out< sc_lv<2> > A_1_0_address0;
    sc_out< sc_logic > A_1_0_ce0;
    sc_in< sc_lv<32> > A_1_0_q0;
    sc_out< sc_lv<1> > A_2_0_address0;
    sc_out< sc_logic > A_2_0_ce0;
    sc_in< sc_lv<32> > A_2_0_q0;
    sc_out< sc_lv<1> > A_3_0_address0;
    sc_out< sc_logic > A_3_0_ce0;
    sc_in< sc_lv<32> > A_3_0_q0;
    sc_out< sc_lv<32> > argmax_TDATA;
    sc_out< sc_logic > argmax_TVALID;
    sc_in< sc_logic > argmax_TREADY;


    // Module declarations
    inference_softmax_1_10_s(sc_module_name name);
    SC_HAS_PROCESS(inference_softmax_1_10_s);

    ~inference_softmax_1_10_s();

    sc_trace_file* mVcdFile;

    inference_fcmp_32ns_32ns_1_1<1,1,32,32,1>* inference_fcmp_32ns_32ns_1_1_U1930;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_21;
    sc_signal< sc_lv<4> > indvar_flatten_reg_131;
    sc_signal< sc_lv<1> > i_reg_142;
    sc_signal< sc_lv<4> > j_reg_153;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_173_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_382;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_66;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<1> > tmp_s_reg_441;
    sc_signal< sc_logic > ap_sig_ioackin_argmax_TREADY;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it3;
    sc_signal< sc_lv<1> > ap_reg_ppstg_exitcond_flatten_reg_382_pp0_it1;
    sc_signal< sc_lv<4> > indvar_flatten_next_fu_179_p2;
    sc_signal< sc_lv<4> > j_mid2_fu_191_p3;
    sc_signal< sc_lv<4> > j_mid2_reg_391;
    sc_signal< sc_lv<4> > ap_reg_ppstg_j_mid2_reg_391_pp0_it1;
    sc_signal< sc_lv<1> > i_mid2_fu_199_p2;
    sc_signal< sc_lv<1> > i_mid2_reg_396;
    sc_signal< sc_lv<1> > ap_reg_ppstg_i_mid2_reg_396_pp0_it1;
    sc_signal< sc_lv<2> > tmp_2_fu_205_p1;
    sc_signal< sc_lv<2> > tmp_2_reg_402;
    sc_signal< sc_lv<4> > j_1_fu_227_p2;
    sc_signal< sc_lv<32> > max_val_fu_264_p3;
    sc_signal< sc_lv<32> > max_val_reg_434;
    sc_signal< sc_lv<1> > tmp_s_fu_356_p2;
    sc_signal< sc_lv<4> > tmp_4_fu_362_p2;
    sc_signal< sc_lv<4> > tmp_4_reg_445;
    sc_signal< sc_lv<1> > i_phi_fu_146_p4;
    sc_signal< sc_lv<64> > newIndex4_fu_219_p1;
    sc_signal< sc_lv<32> > max_val_1_fu_72;
    sc_signal< sc_logic > ap_reg_ioackin_argmax_TREADY;
    sc_signal< sc_lv<1> > exitcond_fu_185_p2;
    sc_signal< sc_lv<2> > newIndex_fu_209_p4;
    sc_signal< sc_lv<1> > sel_tmp_fu_233_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_246_p2;
    sc_signal< sc_lv<32> > sel_tmp1_fu_238_p3;
    sc_signal< sc_lv<1> > sel_tmp4_fu_259_p2;
    sc_signal< sc_lv<32> > sel_tmp3_fu_251_p3;
    sc_signal< sc_lv<32> > max_val_3_to_int_fu_279_p1;
    sc_signal< sc_lv<32> > max_val_1_to_int_fu_296_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_282_p4;
    sc_signal< sc_lv<23> > tmp_5_fu_292_p1;
    sc_signal< sc_lv<1> > notrhs_fu_320_p2;
    sc_signal< sc_lv<1> > notlhs_fu_314_p2;
    sc_signal< sc_lv<8> > tmp_3_fu_300_p4;
    sc_signal< sc_lv<23> > tmp_10_fu_310_p1;
    sc_signal< sc_lv<1> > notrhs7_fu_338_p2;
    sc_signal< sc_lv<1> > notlhs6_fu_332_p2;
    sc_signal< sc_lv<1> > tmp_6_fu_326_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_344_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_350_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_164_p2;
    sc_signal< sc_lv<4> > i_cast6_fu_276_p1;
    sc_signal< sc_lv<5> > tmp_9_fu_164_opcode;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_2;
    sc_signal< bool > ap_sig_bdd_301;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_153;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st6_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_CF000000;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_0_0_address0();
    void thread_A_0_0_ce0();
    void thread_A_1_0_address0();
    void thread_A_1_0_ce0();
    void thread_A_2_0_address0();
    void thread_A_2_0_ce0();
    void thread_A_3_0_address0();
    void thread_A_3_0_ce0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_153();
    void thread_ap_sig_bdd_21();
    void thread_ap_sig_bdd_301();
    void thread_ap_sig_bdd_66();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st6_fsm_2();
    void thread_ap_sig_ioackin_argmax_TREADY();
    void thread_argmax_TDATA();
    void thread_argmax_TVALID();
    void thread_exitcond_flatten_fu_173_p2();
    void thread_exitcond_fu_185_p2();
    void thread_i_cast6_fu_276_p1();
    void thread_i_mid2_fu_199_p2();
    void thread_i_phi_fu_146_p4();
    void thread_indvar_flatten_next_fu_179_p2();
    void thread_j_1_fu_227_p2();
    void thread_j_mid2_fu_191_p3();
    void thread_max_val_1_to_int_fu_296_p1();
    void thread_max_val_3_to_int_fu_279_p1();
    void thread_max_val_fu_264_p3();
    void thread_newIndex4_fu_219_p1();
    void thread_newIndex_fu_209_p4();
    void thread_notlhs6_fu_332_p2();
    void thread_notlhs_fu_314_p2();
    void thread_notrhs7_fu_338_p2();
    void thread_notrhs_fu_320_p2();
    void thread_sel_tmp1_fu_238_p3();
    void thread_sel_tmp2_fu_246_p2();
    void thread_sel_tmp3_fu_251_p3();
    void thread_sel_tmp4_fu_259_p2();
    void thread_sel_tmp_fu_233_p2();
    void thread_tmp_10_fu_310_p1();
    void thread_tmp_1_fu_282_p4();
    void thread_tmp_2_fu_205_p1();
    void thread_tmp_3_fu_300_p4();
    void thread_tmp_4_fu_362_p2();
    void thread_tmp_5_fu_292_p1();
    void thread_tmp_6_fu_326_p2();
    void thread_tmp_7_fu_344_p2();
    void thread_tmp_8_fu_350_p2();
    void thread_tmp_9_fu_164_opcode();
    void thread_tmp_s_fu_356_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
