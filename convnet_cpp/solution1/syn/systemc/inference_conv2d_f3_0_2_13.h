// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_13_H__
#define __inference_conv2d_f3_0_2_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_13_ram) {
        ram[0] = "0b00111101000000110111101111010000";
        ram[1] = "0b10111101101010110000000100000000";
        ram[2] = "0b10111101110110010101101010101111";
        ram[3] = "0b00111010010111000011011100110100";
        ram[4] = "0b10111101010111110010110000110000";
        ram[5] = "0b10111100110110010111110010101001";
        ram[6] = "0b10111101100000110001000110110011";
        ram[7] = "0b00111101011000111011101010100000";
        ram[8] = "0b00111110000010011110011010101100";
        ram[9] = "0b00111001100101111011111110110110";
        ram[10] = "0b00111000101111100011110111011110";
        ram[11] = "0b00111110000000010000110101111100";
        ram[12] = "0b00111100110001001010011011111001";
        ram[13] = "0b00111101111001100110111101010000";
        ram[14] = "0b10111100111011110011111110001001";
        ram[15] = "0b00111100110100101001101101000011";
        ram[16] = "0b00111110000110111111111100000100";
        ram[17] = "0b10111110000011011001101100011011";
        ram[18] = "0b00111100100001011010101011001111";
        ram[19] = "0b00111101011000001010000000111001";
        ram[20] = "0b00111101001010010100001010011111";
        ram[21] = "0b10111100000011011111000111010000";
        ram[22] = "0b00111101001000100100000100100011";
        ram[23] = "0b00111110000001101001010010001010";
        ram[24] = "0b00111110001111111101100000100111";
        ram[25] = "0b10111110000011011100000000010010";
        ram[26] = "0b00111101101001001000001110001000";
        ram[27] = "0b00111101110110001011001001100100";
        ram[28] = "0b00111101011000100001101111001111";
        ram[29] = "0b10111110001111101100110011000100";
        ram[30] = "0b10111101100101001011010010101000";
        ram[31] = "0b00111101100100110010110100101100";
        ram[32] = "0b10111101001111011000110010111110";
        ram[33] = "0b00111101100110100111100001011111";
        ram[34] = "0b10111101010011101001000111001001";
        ram[35] = "0b00111101111010001111101110000111";
        ram[36] = "0b10111100110011000001110000000011";
        ram[37] = "0b10111101001000001010101010000000";
        ram[38] = "0b00111011110100010111000010001011";
        ram[39] = "0b10111110000100100110100101011001";
        ram[40] = "0b10111101010100010000011010111001";
        ram[41] = "0b10111100010100111011010001001000";
        ram[42] = "0b10111110001101101011111000111000";
        ram[43] = "0b00111101010110000011010111010001";
        ram[44] = "0b10111101111111101110110011000000";
        ram[45] = "0b10111101011100000011010000101011";
        ram[46] = "0b00111011010011000001110000100011";
        ram[47] = "0b00111100111111100100111010000101";
        ram[48] = "0b10111101000100000110111101001110";
        ram[49] = "0b00111101111000011110010101111110";
        ram[50] = "0b10111100110001010101101100011110";
        ram[51] = "0b10111101011100100110101100000111";
        ram[52] = "0b00111101100111010011111101001110";
        ram[53] = "0b10111101110101011001111111110101";
        ram[54] = "0b00111101111011101000100011011111";
        ram[55] = "0b00111110001010000010010000001011";
        ram[56] = "0b10111100110100110010011100100100";
        ram[57] = "0b10111100100010100000000101110110";
        ram[58] = "0b00111100100001111000000011001000";
        ram[59] = "0b10111110000000111101001110100010";
        ram[60] = "0b10111101010001100011010011101000";
        ram[61] = "0b10111011101000101001110111100101";
        ram[62] = "0b10111110000101011001110011010000";
        ram[63] = "0b00111101101101011101010000101101";
        ram[64] = "0b10111101010110011100100111010110";
        ram[65] = "0b10111110000101100011011001101101";
        ram[66] = "0b10111101001000010100011101111000";
        ram[67] = "0b10111100011011011011110111011110";
        ram[68] = "0b10111101110111011011101010010001";
        ram[69] = "0b00111101111000111111001001001110";
        ram[70] = "0b10111101100010010001010111011001";
        ram[71] = "0b00111100100110001001010010110111";
        ram[72] = "0b10111101110001111001010100000101";
        ram[73] = "0b10111011110001011010100100101101";
        ram[74] = "0b00111011100101011011000010010110";
        ram[75] = "0b10111110000011010100111010010000";
        ram[76] = "0b10111101010001011110010001000110";
        ram[77] = "0b10111110000011111001111110001000";
        ram[78] = "0b10111101011111110011000110001001";
        ram[79] = "0b10111101100000010011101001111000";
        ram[80] = "0b10111101000000110100100100101011";
        ram[81] = "0b00111101100111110100010001000001";
        ram[82] = "0b00111110000000010100010100001111";
        ram[83] = "0b10111101101001011001011111111101";
        ram[84] = "0b10111110001110010010011110010001";
        ram[85] = "0b00111110000000110101110011100010";
        ram[86] = "0b00111011011100010110111111101111";
        ram[87] = "0b10111011100001011110101101100111";
        ram[88] = "0b00111100101101101110100101101011";
        ram[89] = "0b00111100010111110110010001111111";
        ram[90] = "0b10111110001001100101101001010111";
        ram[91] = "0b00111100010111000011100001111011";
        ram[92] = "0b00111110001011011101000100011100";
        ram[93] = "0b10111100011010101001000111011010";
        ram[94] = "0b10111100110100110000001001110001";
        ram[95] = "0b00111101101100000000100100111010";
        ram[96] = "0b00111101100111110110001110101000";
        ram[97] = "0b10111101100000010000100101100101";
        ram[98] = "0b00111101110100110100110111110000";
        ram[99] = "0b00111101011011011000010111111011";
        ram[100] = "0b10111110010000101011111001001001";
        ram[101] = "0b00111011010011010111010100111110";
        ram[102] = "0b00111101111011110000110001111000";
        ram[103] = "0b10111100111000011101010101110011";
        ram[104] = "0b10111100001111110101001000100101";
        ram[105] = "0b00111110000000110011100111000001";
        ram[106] = "0b10111100100000100101010000111000";
        ram[107] = "0b10111101110011010001100101011001";
        ram[108] = "0b10111101101001100111001011101110";
        ram[109] = "0b00111101010101001011111100001010";
        ram[110] = "0b10111101010111110000111111000101";
        ram[111] = "0b10111101100010000000011011001010";
        ram[112] = "0b00111101110001000101111001011100";
        ram[113] = "0b10111110010010100000011010100111";
        ram[114] = "0b10111101001000011011000110010110";
        ram[115] = "0b10111011011101100110001011110011";
        ram[116] = "0b10111110000011111100001110110101";
        ram[117] = "0b10111100011100001110000111101010";
        ram[118] = "0b10111011100111010100001100110010";
        ram[119] = "0b00111110010000111001010100111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_13) {
meminst = new inference_conv2d_f3_0_2_13_ram("inference_conv2d_f3_0_2_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_13() {
    delete meminst;
}


};//endmodule
#endif
