// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_2_11_H__
#define __inference_conv2d_f3_2_2_11_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_2_11_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_2_11_ram) {
        ram[0] = "0b00111101010110111100001101000000";
        ram[1] = "0b00111110001101100101110111000000";
        ram[2] = "0b10111101100100111100110110001101";
        ram[3] = "0b10111100100110011001111110101111";
        ram[4] = "0b00111101100100111010001011111010";
        ram[5] = "0b00111100101000011111100101001111";
        ram[6] = "0b00111101111000011011111010110010";
        ram[7] = "0b00111101000101000110101100001100";
        ram[8] = "0b00111110001000001100110101000010";
        ram[9] = "0b00111101101100111010001101001011";
        ram[10] = "0b00111110000110001000110100101010";
        ram[11] = "0b00111101101111101011000110110111";
        ram[12] = "0b00111101101001011011100101001000";
        ram[13] = "0b10111101000010101011101011110100";
        ram[14] = "0b10111110000111011000000110101110";
        ram[15] = "0b10111011001010011010010011111111";
        ram[16] = "0b00111101101111011100110001111111";
        ram[17] = "0b10111101001101011000100111010101";
        ram[18] = "0b00111110000001010101000000000001";
        ram[19] = "0b10111100110011111010011010011100";
        ram[20] = "0b10111101011001001101100010101101";
        ram[21] = "0b00111100101001000001011110100010";
        ram[22] = "0b00111101100010011001000110000111";
        ram[23] = "0b10111101110011111110111001110000";
        ram[24] = "0b00111101011001000010010111111111";
        ram[25] = "0b10111101110111100000110011100001";
        ram[26] = "0b00111110010101100010001110001110";
        ram[27] = "0b00111101101011010000011100100111";
        ram[28] = "0b10111101011001110011001000001001";
        ram[29] = "0b10111100100000000101110001000110";
        ram[30] = "0b00111101110011000011000011100000";
        ram[31] = "0b00111110000001000010100010010001";
        ram[32] = "0b10111101111110000101101101011011";
        ram[33] = "0b00111101001011011111110000001100";
        ram[34] = "0b10111110001101101111110110101000";
        ram[35] = "0b00111100011101101011101101001000";
        ram[36] = "0b10111101110110111010100110001111";
        ram[37] = "0b00111100111111011111001101001011";
        ram[38] = "0b00111100100001001111110110010110";
        ram[39] = "0b10111101010100000010100011011000";
        ram[40] = "0b10111100111011001010010101000101";
        ram[41] = "0b00111101111110101011100001100011";
        ram[42] = "0b10111110001101100111110010101111";
        ram[43] = "0b10111101000001101010001100011101";
        ram[44] = "0b00111100111011001111010010001011";
        ram[45] = "0b10111101111011100010111010110010";
        ram[46] = "0b10111110000010110101010000011001";
        ram[47] = "0b00111101100010100000111011010101";
        ram[48] = "0b10111100011111001101111000001101";
        ram[49] = "0b00111101001100100010010001110101";
        ram[50] = "0b10111101100100101101101100011111";
        ram[51] = "0b00111101111110011001010001011011";
        ram[52] = "0b10111101111000011011110110100101";
        ram[53] = "0b00111100100011010010111010000111";
        ram[54] = "0b10111101000100011101000000100111";
        ram[55] = "0b00111110000110000111000110100100";
        ram[56] = "0b00111100000110111111000100100010";
        ram[57] = "0b00111100111111101110111001010010";
        ram[58] = "0b00111011100000101011000001110100";
        ram[59] = "0b00111100001001100001100111011011";
        ram[60] = "0b10111100101100001101000010000010";
        ram[61] = "0b00111110000110100100001001101100";
        ram[62] = "0b10111101101010010110010000101101";
        ram[63] = "0b00111101100100100110110011011101";
        ram[64] = "0b10111101010101101100111111010110";
        ram[65] = "0b10111100001000101100101111010010";
        ram[66] = "0b00111101011110011100000000010101";
        ram[67] = "0b10111101010011111111010000011001";
        ram[68] = "0b00111101110011001110000111000110";
        ram[69] = "0b00111110000010000000010111100110";
        ram[70] = "0b00111101010110111011110000111001";
        ram[71] = "0b00111101111011110000100011001100";
        ram[72] = "0b00111110001000000111110011001000";
        ram[73] = "0b00111101000001001001000001101110";
        ram[74] = "0b00111101111010000001100100001001";
        ram[75] = "0b10111100110001111101101100101011";
        ram[76] = "0b00111101111110011000101001100101";
        ram[77] = "0b00111110000010101110010110111101";
        ram[78] = "0b00111100000011000100000111100010";
        ram[79] = "0b10111101101011101010010110000000";
        ram[80] = "0b00111100101111101111000111100011";
        ram[81] = "0b10111101000110111111011101011101";
        ram[82] = "0b00111101110001000010000101100010";
        ram[83] = "0b00111101001000010111100011110111";
        ram[84] = "0b10111101010100101010011100110111";
        ram[85] = "0b00111101001111100111011111010101";
        ram[86] = "0b00111101101110110100001000011110";
        ram[87] = "0b10111101110001110011110001001111";
        ram[88] = "0b00111110000001111010010011101000";
        ram[89] = "0b00111101001111011101000111110011";
        ram[90] = "0b00111101011000110101010101110000";
        ram[91] = "0b00111100110111000000111001010011";
        ram[92] = "0b10111011101110011011011110110010";
        ram[93] = "0b00111100101101111110010001110011";
        ram[94] = "0b10111110000100100111000001101101";
        ram[95] = "0b10111100100110010110011100001111";
        ram[96] = "0b00111100101011010100110111100001";
        ram[97] = "0b00111100000001011011010011001011";
        ram[98] = "0b00111101000110010010100001000000";
        ram[99] = "0b00111100001000100110001111101110";
        ram[100] = "0b10111101011010110010100100001110";
        ram[101] = "0b00111101111111011110011100100001";
        ram[102] = "0b10111101000110111101110100100110";
        ram[103] = "0b00111101010111001011111000010001";
        ram[104] = "0b00111101000011101010010100010100";
        ram[105] = "0b10111101001111001011011101011011";
        ram[106] = "0b00111011001111010010010100001111";
        ram[107] = "0b00111101111100100011100100011101";
        ram[108] = "0b10111101101101101101111101101000";
        ram[109] = "0b00111110001100000110110111010111";
        ram[110] = "0b00111101001100101001100000000011";
        ram[111] = "0b10111100100010110010000011111011";
        ram[112] = "0b10111100110010010110000111011110";
        ram[113] = "0b10111101000011111101101100100100";
        ram[114] = "0b00111101100001000001011010100011";
        ram[115] = "0b10111110010001100110101111101000";
        ram[116] = "0b10111101011110110000110001100000";
        ram[117] = "0b00111110000000100000010111111111";
        ram[118] = "0b10111101011110000100100110001000";
        ram[119] = "0b00111101111001011000010011110101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_2_11) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_2_11_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_2_11) {
meminst = new inference_conv2d_f3_2_2_11_ram("inference_conv2d_f3_2_2_11_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_2_11() {
    delete meminst;
}


};//endmodule
#endif
