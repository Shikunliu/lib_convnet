// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_1_3_H__
#define __inference_conv2d_f3_4_1_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_1_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_1_3_ram) {
        ram[0] = "0b00111101101110001111010011010001";
        ram[1] = "0b10111100110101010110011000101110";
        ram[2] = "0b00111101100111110001001011111000";
        ram[3] = "0b10111101011000111001110100001110";
        ram[4] = "0b00111101100011010000111110100110";
        ram[5] = "0b10111101101110011101100100010111";
        ram[6] = "0b10111011111011010010011011001010";
        ram[7] = "0b10111101101000111100110000010101";
        ram[8] = "0b10111101111101000111110110000000";
        ram[9] = "0b10111101001111100001001011000000";
        ram[10] = "0b00111101111010110111111001001110";
        ram[11] = "0b00111101100110010111101110011100";
        ram[12] = "0b00111101010110001001001101011010";
        ram[13] = "0b00111101111011100101000101001100";
        ram[14] = "0b10111100001011100100101101101101";
        ram[15] = "0b10111011000011001110000110100101";
        ram[16] = "0b10111101001111101011000111101100";
        ram[17] = "0b10111101110101101001110010101010";
        ram[18] = "0b10111100001011100101011001010101";
        ram[19] = "0b00111110010000110101101010000110";
        ram[20] = "0b00111101101001101110100010000111";
        ram[21] = "0b00111100110100001110000010001101";
        ram[22] = "0b00111101100011101011011010001010";
        ram[23] = "0b10111101011001000000111001101000";
        ram[24] = "0b10111101100110011111101011000000";
        ram[25] = "0b10111100000001100111010000000011";
        ram[26] = "0b00111100110011011111110111110000";
        ram[27] = "0b10111110000010111110000000010101";
        ram[28] = "0b10111100001000011110011001111010";
        ram[29] = "0b00111101100011100010101000000111";
        ram[30] = "0b10111100011110010110110100111111";
        ram[31] = "0b00111100101110011101100010011111";
        ram[32] = "0b10111101110001010101111011100101";
        ram[33] = "0b00111101011010110010101001101011";
        ram[34] = "0b10111110000110001011100011110001";
        ram[35] = "0b00111100111010100011001101111011";
        ram[36] = "0b10111110000000010000110101111100";
        ram[37] = "0b00111100111111101100001100011111";
        ram[38] = "0b00111110000111000100101111010011";
        ram[39] = "0b10111101001010000011010011101101";
        ram[40] = "0b10111110001100001001000101111101";
        ram[41] = "0b00111110000000010110101100010010";
        ram[42] = "0b10111101101111101010111110000011";
        ram[43] = "0b00111101100000101111110010010010";
        ram[44] = "0b00111100111001010010101011111101";
        ram[45] = "0b00111101010110101110011000000000";
        ram[46] = "0b00111100101011101011000100100011";
        ram[47] = "0b00111100111101011100000011100010";
        ram[48] = "0b00111110010010110001111100100101";
        ram[49] = "0b10111100100111001101011010011011";
        ram[50] = "0b10111100101101000101010010011011";
        ram[51] = "0b10111101110000100000101100110000";
        ram[52] = "0b10111101010000111100100101101001";
        ram[53] = "0b00111110000110100111110101100111";
        ram[54] = "0b00111101110111100001011011010111";
        ram[55] = "0b00111101010000111010001101110011";
        ram[56] = "0b10111101111001100010011011110110";
        ram[57] = "0b10111011111010011110111001000110";
        ram[58] = "0b00111101011100010100011100110101";
        ram[59] = "0b00111101010000111000111110111101";
        ram[60] = "0b10111101100000110010000100001111";
        ram[61] = "0b10111101101001000000000111100000";
        ram[62] = "0b00111101101111101101100101100111";
        ram[63] = "0b10111101111110011100010010010111";
        ram[64] = "0b10111101100100100101010000000011";
        ram[65] = "0b10111110001001110001101111001110";
        ram[66] = "0b00111110000101111011101001100111";
        ram[67] = "0b10111101110100100100111100100010";
        ram[68] = "0b10111101010111100000111010101001";
        ram[69] = "0b00111101101001010100001001101101";
        ram[70] = "0b10111101110110111111011010100001";
        ram[71] = "0b10111110000001011010000101000101";
        ram[72] = "0b00111101110010010100000100110100";
        ram[73] = "0b10111101001110100111011110110000";
        ram[74] = "0b00111101111111011100101001001011";
        ram[75] = "0b10111100110010010001111000100001";
        ram[76] = "0b10111101011110101001111010110010";
        ram[77] = "0b00111010100001111110101101000110";
        ram[78] = "0b00111100100010100011110110100110";
        ram[79] = "0b10111101101101110110001011001011";
        ram[80] = "0b00111110000000001001000100111010";
        ram[81] = "0b00111101111100000111011101000111";
        ram[82] = "0b00111101100100100100101011111110";
        ram[83] = "0b00111110001000000000101100000011";
        ram[84] = "0b10111110001011001101000000110101";
        ram[85] = "0b00111101010101111111101101001111";
        ram[86] = "0b10111110000001110111101111000000";
        ram[87] = "0b10111101000001110001110100010000";
        ram[88] = "0b10111110010100010101111101000110";
        ram[89] = "0b00111101100011111010000100011011";
        ram[90] = "0b10111101111100111010100000011110";
        ram[91] = "0b10111101110001001001111101111010";
        ram[92] = "0b00111110001101010011111010110100";
        ram[93] = "0b00111101101010011111111100001101";
        ram[94] = "0b10111100011000010000110000011111";
        ram[95] = "0b10111101110010101000010011110100";
        ram[96] = "0b10111101111001010101001010100000";
        ram[97] = "0b00111101110110011100000001100110";
        ram[98] = "0b00111110010110100111100001101100";
        ram[99] = "0b10111101110010100111000111111001";
        ram[100] = "0b10111100100110110111100000101100";
        ram[101] = "0b10111100111001011000011001101101";
        ram[102] = "0b00111101100110100100101001111111";
        ram[103] = "0b00111101011100111010010000111101";
        ram[104] = "0b00111101011011100101011110110010";
        ram[105] = "0b00111100100000101100100010011101";
        ram[106] = "0b00111110000111101110111110100010";
        ram[107] = "0b10111101100010101001101101111111";
        ram[108] = "0b00111110000111100111001000010001";
        ram[109] = "0b00111100101101011100111100100101";
        ram[110] = "0b00111100100000100001101100101110";
        ram[111] = "0b00111110000100110001010101010001";
        ram[112] = "0b00111110001001000100101111110101";
        ram[113] = "0b00111100110110000011000110111011";
        ram[114] = "0b00111110000010111010100111010010";
        ram[115] = "0b00111101111111001101001001001110";
        ram[116] = "0b10111101101100100100001011011110";
        ram[117] = "0b10111101101100011111111100100001";
        ram[118] = "0b00111110010000001100011000101110";
        ram[119] = "0b00111100100101001100010001111101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_1_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_1_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_1_3) {
meminst = new inference_conv2d_f3_4_1_3_ram("inference_conv2d_f3_4_1_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_1_3() {
    delete meminst;
}


};//endmodule
#endif
