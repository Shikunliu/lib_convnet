// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_31_H__
#define __inference_mult_1_120_120_84_s_W4_31_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_31_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_31_ram) {
        ram[0] = "0b10111101111011000110110111100111";
        ram[1] = "0b00111101100010001010000100100100";
        ram[2] = "0b10111101010011001011001111011000";
        ram[3] = "0b00111101010010110101011100110001";
        ram[4] = "0b10111101010100110000111011010000";
        ram[5] = "0b10111101101011101111111011010110";
        ram[6] = "0b10111101010000110100101010111110";
        ram[7] = "0b10111110000101111101010000010111";
        ram[8] = "0b10111101101111111011110011010111";
        ram[9] = "0b10111100000110010010101111001011";
        ram[10] = "0b00111110001101110000111000101100";
        ram[11] = "0b00111101011011101110000111100101";
        ram[12] = "0b00111101000100011101011001010111";
        ram[13] = "0b00111100111100111000010111010100";
        ram[14] = "0b00111101100110100101100010001100";
        ram[15] = "0b10111101010100101000011000010101";
        ram[16] = "0b00111110011000100010011101001010";
        ram[17] = "0b10111101100000001011000101101011";
        ram[18] = "0b10111101000001010011011100100111";
        ram[19] = "0b10111101100010000011000000001101";
        ram[20] = "0b10111101110010010000111011010010";
        ram[21] = "0b10111100001000001101001010101001";
        ram[22] = "0b00111101101001100010010111011100";
        ram[23] = "0b10111110001010111011111001000100";
        ram[24] = "0b10111101110000000111000100100100";
        ram[25] = "0b10111101001101000010011110000101";
        ram[26] = "0b10111101010001111011101000001001";
        ram[27] = "0b10111110000000001011010110101010";
        ram[28] = "0b00111011101001111011011000111101";
        ram[29] = "0b00111011101010111001111100010101";
        ram[30] = "0b10111110001011111100000011010011";
        ram[31] = "0b00111101100110011110111000111000";
        ram[32] = "0b10111101010000011100010011100001";
        ram[33] = "0b10111101010100111011111100101111";
        ram[34] = "0b00111101100000110000000100111100";
        ram[35] = "0b10111100110111101010101011100110";
        ram[36] = "0b00111100101111000011011111110100";
        ram[37] = "0b10111101111010100010100110000100";
        ram[38] = "0b10111110000011111101100001101011";
        ram[39] = "0b00111101001010111010011110000011";
        ram[40] = "0b00111101101101010010010100010000";
        ram[41] = "0b00111011001010001011001010111100";
        ram[42] = "0b00111101101101101110100010010101";
        ram[43] = "0b10111110010000110100100101111011";
        ram[44] = "0b10111101101010100110111110111000";
        ram[45] = "0b10111101100010110000010111101101";
        ram[46] = "0b00111110001111101101111000010010";
        ram[47] = "0b10111101101010001001010111101100";
        ram[48] = "0b10111101111011101111001001000001";
        ram[49] = "0b10111101101001111001110101101000";
        ram[50] = "0b10111011011011100010110001101110";
        ram[51] = "0b00111101011011000111001101110110";
        ram[52] = "0b00111101001001001101011101010000";
        ram[53] = "0b10111101100000000111101010100010";
        ram[54] = "0b10111001100111000011011010010011";
        ram[55] = "0b00111110010001110100011100001111";
        ram[56] = "0b10111101001110010110111101110010";
        ram[57] = "0b10111110001111011010001000101111";
        ram[58] = "0b10111110001010110111111101011010";
        ram[59] = "0b00111110001000110011011101100101";
        ram[60] = "0b00111110001000101100110010110100";
        ram[61] = "0b00111100110111011100001010001001";
        ram[62] = "0b10111101100100111111100101010100";
        ram[63] = "0b10111100001010111101000011010100";
        ram[64] = "0b00111101001011000000110100000100";
        ram[65] = "0b10111101101100000010010110001010";
        ram[66] = "0b00111101100011111110010100011011";
        ram[67] = "0b10111101101101101001000010001110";
        ram[68] = "0b10111101000000011010000110001011";
        ram[69] = "0b10111101001101110110001011110011";
        ram[70] = "0b00111110100000101010010000010010";
        ram[71] = "0b00111110001110001000010101001101";
        ram[72] = "0b10111101111011001101101001101110";
        ram[73] = "0b10111110000001101011110110110010";
        ram[74] = "0b00111011001100101100000000110001";
        ram[75] = "0b10111011010000110110010110011011";
        ram[76] = "0b10111110001101000101001011000110";
        ram[77] = "0b00111101110010100110000111111100";
        ram[78] = "0b00111101101011010100010111101001";
        ram[79] = "0b00111100101000010100011111100100";
        ram[80] = "0b10111110000000111101001011011000";
        ram[81] = "0b10111100010000111010110101101001";
        ram[82] = "0b10111101011100111100100110010001";
        ram[83] = "0b00111110001010000100000001011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_31) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_31_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_31) {
meminst = new inference_mult_1_120_120_84_s_W4_31_ram("inference_mult_1_120_120_84_s_W4_31_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_31() {
    delete meminst;
}


};//endmodule
#endif
