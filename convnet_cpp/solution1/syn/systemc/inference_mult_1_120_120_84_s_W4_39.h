// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_39_H__
#define __inference_mult_1_120_120_84_s_W4_39_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_39_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_39_ram) {
        ram[0] = "0b00111101101111010011010010001110";
        ram[1] = "0b10111100101111001101010001100111";
        ram[2] = "0b00111100001011010100111010000010";
        ram[3] = "0b00111100110011111100101000001101";
        ram[4] = "0b10111101101011001110011100101100";
        ram[5] = "0b00111101100101000001001101001000";
        ram[6] = "0b00111100001101100001101001101110";
        ram[7] = "0b00111110001101000101111001001110";
        ram[8] = "0b00111100100111110010010101011111";
        ram[9] = "0b10111101111111101110010001011100";
        ram[10] = "0b00111101100001001000100010010000";
        ram[11] = "0b00111101111100101000010000010110";
        ram[12] = "0b10111110000100110011001111111101";
        ram[13] = "0b10111110011010110111101101101100";
        ram[14] = "0b00111101110011010010110111001011";
        ram[15] = "0b00111100110001101011011011010011";
        ram[16] = "0b10111101011111001111011111011000";
        ram[17] = "0b00111101101100110011000101111000";
        ram[18] = "0b00111010101100101100001110001100";
        ram[19] = "0b10111100001000011011110101011111";
        ram[20] = "0b00111100101100010101111010110010";
        ram[21] = "0b00111110000010101100001001011001";
        ram[22] = "0b10111110000011111001100001110100";
        ram[23] = "0b10111101000100101010100110100000";
        ram[24] = "0b00111101001001010100101000000111";
        ram[25] = "0b10111110010000101101111011001010";
        ram[26] = "0b10111101000000000000010110101010";
        ram[27] = "0b00111100011110011000100111000100";
        ram[28] = "0b10111110010111001101010000100100";
        ram[29] = "0b10111110001001110000011010010010";
        ram[30] = "0b00111110001001100101011111111011";
        ram[31] = "0b10111101101111100101000011010011";
        ram[32] = "0b00111101110011010110111101010100";
        ram[33] = "0b00111101110001010100000110010110";
        ram[34] = "0b10111110010010101011111010101101";
        ram[35] = "0b00111101100010010000111100010101";
        ram[36] = "0b10111101001101110111010100010111";
        ram[37] = "0b00111101011000101101100001010111";
        ram[38] = "0b00111100100001100000100010001101";
        ram[39] = "0b00111101111101000111100111010101";
        ram[40] = "0b00111101000001010001111010000011";
        ram[41] = "0b00111101101001101100001001101010";
        ram[42] = "0b10111100100110101010100000100010";
        ram[43] = "0b00111100000000110101011110001110";
        ram[44] = "0b00111110011100001000100011010111";
        ram[45] = "0b00111101111101101101110010100000";
        ram[46] = "0b00111101010010100101000111001000";
        ram[47] = "0b00111101110110100100010100001011";
        ram[48] = "0b00111101111101100100001110001001";
        ram[49] = "0b10111101001110101111010011100011";
        ram[50] = "0b10111101100000110011010110000010";
        ram[51] = "0b10111110000110101100001101100101";
        ram[52] = "0b00111101010110110000010010111001";
        ram[53] = "0b10111101000011100001011011100100";
        ram[54] = "0b00111101110001011101000110110110";
        ram[55] = "0b00111011110010100011010011010111";
        ram[56] = "0b00111101001110011001001101001111";
        ram[57] = "0b00111101011000100101010011011001";
        ram[58] = "0b10111100111101100111011010110101";
        ram[59] = "0b00111101110010110010110100011000";
        ram[60] = "0b00111101001001110001111111111111";
        ram[61] = "0b00111101101001001101111101010101";
        ram[62] = "0b10111101101100110000110111000100";
        ram[63] = "0b00111101001011110111101101101000";
        ram[64] = "0b10111101010100101010011010010110";
        ram[65] = "0b10111101010000111111000000011010";
        ram[66] = "0b10111101011100001100110101111000";
        ram[67] = "0b00111101001100100111100001110011";
        ram[68] = "0b00111011111111110100010100011010";
        ram[69] = "0b00111110001000011000011011011011";
        ram[70] = "0b10111110000100111101001101011111";
        ram[71] = "0b00111100111000001111110111011100";
        ram[72] = "0b00111110001111010111000000011110";
        ram[73] = "0b10111011101000001001000101110000";
        ram[74] = "0b10111101000110011111111100011010";
        ram[75] = "0b00111101000101100011101011010101";
        ram[76] = "0b00111101101001101011000101100000";
        ram[77] = "0b10111101101111010000011001010000";
        ram[78] = "0b10111101100000110001010100011011";
        ram[79] = "0b00111100100011101000000000101011";
        ram[80] = "0b00111110000101111011001011001100";
        ram[81] = "0b00111101001100011101010110011011";
        ram[82] = "0b00111101010110010001101111100000";
        ram[83] = "0b00111101101011110000110000011010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_39) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_39_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_39) {
meminst = new inference_mult_1_120_120_84_s_W4_39_ram("inference_mult_1_120_120_84_s_W4_39_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_39() {
    delete meminst;
}


};//endmodule
#endif
