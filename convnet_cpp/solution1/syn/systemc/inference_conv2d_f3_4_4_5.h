// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_5_H__
#define __inference_conv2d_f3_4_4_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_5_ram) {
        ram[0] = "0b10111101010010001000111101010000";
        ram[1] = "0b10111101110111000100101100001010";
        ram[2] = "0b00111101001011100001001110111111";
        ram[3] = "0b00111101001111101101111001100010";
        ram[4] = "0b10111011010000100100010100110100";
        ram[5] = "0b10111101011101101001011100110110";
        ram[6] = "0b10111110010000010000011101110100";
        ram[7] = "0b10111101100111101001010001101000";
        ram[8] = "0b10111100100010111010101110011010";
        ram[9] = "0b10111101100001110011001100110000";
        ram[10] = "0b10111101011111100111111100010001";
        ram[11] = "0b00111100111001110101011010111100";
        ram[12] = "0b00111110001100010011001011111000";
        ram[13] = "0b10111101101110011110001101010001";
        ram[14] = "0b00111110000011000101000101010101";
        ram[15] = "0b10111101100000001011000000101001";
        ram[16] = "0b00111110000100010000110001101111";
        ram[17] = "0b00111100101011010100111000010111";
        ram[18] = "0b00111101101010110110111110111011";
        ram[19] = "0b00111101001011111011010101001010";
        ram[20] = "0b00111101110101010001010001111111";
        ram[21] = "0b00111101001111011111010001010111";
        ram[22] = "0b00111101100110001110010011010011";
        ram[23] = "0b00111100000011111101101111000000";
        ram[24] = "0b10111101110001010000101101100000";
        ram[25] = "0b10111101110101001111101101010101";
        ram[26] = "0b00111100111001000000001011011111";
        ram[27] = "0b00111101101101100011111001001011";
        ram[28] = "0b00111101111001111100100101011000";
        ram[29] = "0b10111110000011100011000101010001";
        ram[30] = "0b10111101010000101111111111000100";
        ram[31] = "0b10111110010110110100101101110011";
        ram[32] = "0b10111101101000101111110001001111";
        ram[33] = "0b10111101100111010000000101001000";
        ram[34] = "0b00111100111110101001000011110110";
        ram[35] = "0b10111101111000011001010000111010";
        ram[36] = "0b00111110001001011100111111101110";
        ram[37] = "0b00111101110010000111011000011001";
        ram[38] = "0b10111101100001001000110111110111";
        ram[39] = "0b10111101100110101100110110111001";
        ram[40] = "0b10111101111101110111010000100101";
        ram[41] = "0b10111101000100101010001101110001";
        ram[42] = "0b00111101111110111101100000111000";
        ram[43] = "0b00111101111110000010010011010101";
        ram[44] = "0b00111110000010101101001100100000";
        ram[45] = "0b10111011110000110001000000001011";
        ram[46] = "0b10111101111001001011111001000000";
        ram[47] = "0b00111100100010101001000000010001";
        ram[48] = "0b10111000111110110000000110001011";
        ram[49] = "0b10111101000011000011100100001110";
        ram[50] = "0b00111101011101110111010110011101";
        ram[51] = "0b00111010000011001001110101110111";
        ram[52] = "0b10111101011101101011011101001100";
        ram[53] = "0b10111101001111111110010011110010";
        ram[54] = "0b10111100101010011101111000100000";
        ram[55] = "0b00111100000011000010100110101111";
        ram[56] = "0b00111101011111000011100110100010";
        ram[57] = "0b10111101101100010100000000101111";
        ram[58] = "0b10111110001110011001111101011110";
        ram[59] = "0b10111100001001110001101010001100";
        ram[60] = "0b10111110000001100101111110010110";
        ram[61] = "0b10111101010011101011100000001111";
        ram[62] = "0b00111110000111110010100110010001";
        ram[63] = "0b00111101111010000100101101011110";
        ram[64] = "0b10111100010010100111001001111111";
        ram[65] = "0b00111101111011110101101000010000";
        ram[66] = "0b10111101100010010110100010100010";
        ram[67] = "0b10111101001100000100110010110100";
        ram[68] = "0b00111101010001110001011000100100";
        ram[69] = "0b00111101101011110001101110010001";
        ram[70] = "0b10111101011001100100101110101001";
        ram[71] = "0b10111101100011100011011110011011";
        ram[72] = "0b00111110001101100111000000011001";
        ram[73] = "0b10111101000111111001100100100010";
        ram[74] = "0b10111101110001010111001000001000";
        ram[75] = "0b10111101001010010011000001000101";
        ram[76] = "0b00111100100011011101010000110100";
        ram[77] = "0b00111010101001001000010111011100";
        ram[78] = "0b10111110010110100111000101011000";
        ram[79] = "0b00111100001111011001100001111100";
        ram[80] = "0b00111100111000011101001001001101";
        ram[81] = "0b10111101000010001110111111111110";
        ram[82] = "0b10111101011111000100010111001100";
        ram[83] = "0b00111100011101101000000101100111";
        ram[84] = "0b10111100111100100111101011011100";
        ram[85] = "0b00111100011011001111100001010001";
        ram[86] = "0b10111101101100010101010000011011";
        ram[87] = "0b10111101000000110001001000111001";
        ram[88] = "0b10111110000111110110000000011000";
        ram[89] = "0b10111101100110011010111111111101";
        ram[90] = "0b10111101110111001110001010001111";
        ram[91] = "0b10111110000110000100100110001000";
        ram[92] = "0b10111101001100100000011101101010";
        ram[93] = "0b10111011111100110101100101010100";
        ram[94] = "0b10111101110011010100110101000000";
        ram[95] = "0b10111110001111101001110011001011";
        ram[96] = "0b10111101100010110011111010011010";
        ram[97] = "0b10111101101100001100101011110100";
        ram[98] = "0b00111101111000101001010010011010";
        ram[99] = "0b00111100110111011000011100101111";
        ram[100] = "0b00111101010111101011011111100111";
        ram[101] = "0b00111110000001010000110001011111";
        ram[102] = "0b00111100000100100010101001001111";
        ram[103] = "0b10111001101110000101111111110010";
        ram[104] = "0b10111101100101001100001010001101";
        ram[105] = "0b10111101101111111101110000100100";
        ram[106] = "0b00111110001111110100011101110011";
        ram[107] = "0b00111101100011001000000010011111";
        ram[108] = "0b10111101101100001010001000101010";
        ram[109] = "0b00111011100011101010110111011000";
        ram[110] = "0b10111110000110101011011000000111";
        ram[111] = "0b10111101000010001111000001001111";
        ram[112] = "0b10111101111110110101000101111010";
        ram[113] = "0b00111101100010111101111001011011";
        ram[114] = "0b00111000000110110100101110011101";
        ram[115] = "0b00111101010110100010001101100010";
        ram[116] = "0b10111100111010100100010001110111";
        ram[117] = "0b10111101101101000101100111110100";
        ram[118] = "0b00111101100000010010111101101000";
        ram[119] = "0b00111101010111110011011011000111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_5) {
meminst = new inference_conv2d_f3_4_4_5_ram("inference_conv2d_f3_4_4_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_5() {
    delete meminst;
}


};//endmodule
#endif
