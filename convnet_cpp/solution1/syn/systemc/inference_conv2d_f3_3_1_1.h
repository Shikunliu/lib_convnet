// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_1_H__
#define __inference_conv2d_f3_3_1_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_1_ram) {
        ram[0] = "0b10111101001110101101100011111111";
        ram[1] = "0b10111101101001111101010010010000";
        ram[2] = "0b10111101110111111111010011111101";
        ram[3] = "0b10111011011110010111010001110110";
        ram[4] = "0b10111101110011111111010101000001";
        ram[5] = "0b10111101111110010110110100001001";
        ram[6] = "0b10111110000100001001110100000110";
        ram[7] = "0b00111101001001000011011110000010";
        ram[8] = "0b10111100000011000000010011100110";
        ram[9] = "0b00111101100000010001001000100110";
        ram[10] = "0b10111101011100111101100110011100";
        ram[11] = "0b10111110010110000101010101010100";
        ram[12] = "0b00111110001010011000111011011010";
        ram[13] = "0b00111110000000010000011000100101";
        ram[14] = "0b00111101001000111000010011010101";
        ram[15] = "0b10111101111000001010100111011111";
        ram[16] = "0b00111101010001000111100110101101";
        ram[17] = "0b00111110000010000000111111011100";
        ram[18] = "0b00111101010101110111101100010001";
        ram[19] = "0b00111101011011101101011100011001";
        ram[20] = "0b00111101000111110010110011010001";
        ram[21] = "0b10111101101110100110010100111100";
        ram[22] = "0b00111101001010101010011100001000";
        ram[23] = "0b10111101010010001010100100000001";
        ram[24] = "0b00111100111011111101111010110101";
        ram[25] = "0b10111011110111011011010100100111";
        ram[26] = "0b10111101110010101000000101111110";
        ram[27] = "0b10111100100110110011000000000111";
        ram[28] = "0b10111110010101101000011001100010";
        ram[29] = "0b10111101100110000101011000111000";
        ram[30] = "0b10111101010110110010011101010011";
        ram[31] = "0b10111101010000100010011000110000";
        ram[32] = "0b10111101011011001010101100111111";
        ram[33] = "0b00111101100000001010000100010000";
        ram[34] = "0b00111100001001001100100100001101";
        ram[35] = "0b00111101111011100000011001010011";
        ram[36] = "0b10111100110011110000101110100001";
        ram[37] = "0b10111100101001001010100101100010";
        ram[38] = "0b00111101001110011000111101101110";
        ram[39] = "0b10111101000111100101000110101010";
        ram[40] = "0b00111101110101000111111100010011";
        ram[41] = "0b10111110000011101101111001010101";
        ram[42] = "0b00111101111100100100000110000001";
        ram[43] = "0b10111101110000110101111111111001";
        ram[44] = "0b00111001111101100110010101011110";
        ram[45] = "0b00111101111101011110010100101010";
        ram[46] = "0b10111110000111100000000010001111";
        ram[47] = "0b10111101100111011010000110000001";
        ram[48] = "0b00111101101010000011001111100001";
        ram[49] = "0b00111110000001011100011000111011";
        ram[50] = "0b00111101101000110001111110010111";
        ram[51] = "0b00111110000100100100001101010111";
        ram[52] = "0b10111010100010001100110011000011";
        ram[53] = "0b10111010111110111111101000001100";
        ram[54] = "0b00111101100011001000110001101011";
        ram[55] = "0b10111101111001000110111010001111";
        ram[56] = "0b00111011111101100111100001000010";
        ram[57] = "0b10111100011100000100110000101110";
        ram[58] = "0b10111100110001110110000110111110";
        ram[59] = "0b00111101110011111000011100100111";
        ram[60] = "0b00111110010000011110010111000001";
        ram[61] = "0b00111101110000000000110111100101";
        ram[62] = "0b00111101000010111000100011001010";
        ram[63] = "0b00111101101110110000111010111100";
        ram[64] = "0b10111101100000011001010011101000";
        ram[65] = "0b10111100000010101110101100001011";
        ram[66] = "0b00111100110011101001110001111011";
        ram[67] = "0b00111101110101101000110011101111";
        ram[68] = "0b10111101010100111001011111000010";
        ram[69] = "0b10111101101001000010111011011100";
        ram[70] = "0b00111101110010101010100000100010";
        ram[71] = "0b10111100010001001011111101001101";
        ram[72] = "0b00111100010110011000011010000100";
        ram[73] = "0b10111110000111010001010111110000";
        ram[74] = "0b10111110000111100100011111011100";
        ram[75] = "0b00111110010001110000011100011000";
        ram[76] = "0b00111101101000111001100101010101";
        ram[77] = "0b10111101000001000011000100111000";
        ram[78] = "0b10111101000101010010011111001010";
        ram[79] = "0b00111110001000101001000001101001";
        ram[80] = "0b00111101110100011001111001110011";
        ram[81] = "0b00111100011110000101110000110010";
        ram[82] = "0b10111110000001000001101100110011";
        ram[83] = "0b10111101101111100010000001111100";
        ram[84] = "0b00111101110000101010111010101001";
        ram[85] = "0b10111110010010011111101100011110";
        ram[86] = "0b00111100101100101011101100111110";
        ram[87] = "0b00111010001011110100000111110111";
        ram[88] = "0b10111100110101110001011000110010";
        ram[89] = "0b00111011110000011011101101100001";
        ram[90] = "0b00111101010111001000110001011101";
        ram[91] = "0b10111101110010010011101111000001";
        ram[92] = "0b00111001111110111100011110100110";
        ram[93] = "0b10111100111001111010100001010000";
        ram[94] = "0b10111101011110100100001010000111";
        ram[95] = "0b10111101101010001101000100000010";
        ram[96] = "0b10111101010001010010011001111011";
        ram[97] = "0b00111101011100100101101001000000";
        ram[98] = "0b00111110001111110101100101000111";
        ram[99] = "0b00111101100110000010100101010111";
        ram[100] = "0b10111101010101000000110000001100";
        ram[101] = "0b00111110010100001011010011100001";
        ram[102] = "0b00111101100000001110011100101001";
        ram[103] = "0b00111101101011011111101101101011";
        ram[104] = "0b10111101110111110111110011101110";
        ram[105] = "0b00111101000011101010111010111010";
        ram[106] = "0b00111101101001111011010001010010";
        ram[107] = "0b00111101110001011100000000100110";
        ram[108] = "0b00111101001101010010100101011101";
        ram[109] = "0b10111110000011010110111110010111";
        ram[110] = "0b00111101001001100110000101011110";
        ram[111] = "0b10111101100001011111100001011010";
        ram[112] = "0b00111100110101010011011001011110";
        ram[113] = "0b00111101001001101110110000110011";
        ram[114] = "0b10111101011110001100010111100100";
        ram[115] = "0b00111101000000000010011100110111";
        ram[116] = "0b10111101001001010111101110000101";
        ram[117] = "0b00111101101011111000111010110100";
        ram[118] = "0b00111101011101110111011101100110";
        ram[119] = "0b00111110010100111100110010001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_1) {
meminst = new inference_conv2d_f3_3_1_1_ram("inference_conv2d_f3_3_1_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_1() {
    delete meminst;
}


};//endmodule
#endif
