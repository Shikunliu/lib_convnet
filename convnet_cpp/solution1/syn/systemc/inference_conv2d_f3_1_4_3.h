// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_4_3_H__
#define __inference_conv2d_f3_1_4_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_4_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_4_3_ram) {
        ram[0] = "0b00111101000100001010000101101110";
        ram[1] = "0b10111101101010110110001101001110";
        ram[2] = "0b00111101100001110100010101000110";
        ram[3] = "0b10111110000001011111011010111010";
        ram[4] = "0b00111101000001000101111011010101";
        ram[5] = "0b00111100110011010000001111110101";
        ram[6] = "0b00111100000110111000101000110101";
        ram[7] = "0b00111110000001110100001001010111";
        ram[8] = "0b10111101010001010001001111101011";
        ram[9] = "0b10111110000100100100100110100001";
        ram[10] = "0b00111110001100100010011111010000";
        ram[11] = "0b10111101011001010001100110110000";
        ram[12] = "0b10111101110011001010101001110110";
        ram[13] = "0b10111101010111010011101010111110";
        ram[14] = "0b00111100010101001110111110110001";
        ram[15] = "0b10111011110111011011111110100100";
        ram[16] = "0b00111101101011100111111001110000";
        ram[17] = "0b10111100101000101010111111111001";
        ram[18] = "0b00111100001010000010101001010110";
        ram[19] = "0b10111100101010110100010101011110";
        ram[20] = "0b00111101010110111110011001111011";
        ram[21] = "0b10111101100000001010100100010101";
        ram[22] = "0b00111101001101111000110100011010";
        ram[23] = "0b00111100111111110110111011100001";
        ram[24] = "0b10111100011011110101000010000101";
        ram[25] = "0b10111110010010100001011011101000";
        ram[26] = "0b10111101100100011100011000111110";
        ram[27] = "0b10111101001111110100001011110001";
        ram[28] = "0b00111011111100011111100010000000";
        ram[29] = "0b00111110000110101101110111011111";
        ram[30] = "0b00111110000101110111100001010111";
        ram[31] = "0b10111101111100010111110101101011";
        ram[32] = "0b10111101001111001001010000000101";
        ram[33] = "0b00111110000111000100010100000010";
        ram[34] = "0b00111110000111111001111001111100";
        ram[35] = "0b00111101000100010110000101101100";
        ram[36] = "0b10111101011100111010110100100110";
        ram[37] = "0b10111101011101110100011110010101";
        ram[38] = "0b10111010101100100010010100101100";
        ram[39] = "0b00111101111100101100011000100110";
        ram[40] = "0b00111101000000100011011011110111";
        ram[41] = "0b10111101011010011011000010000011";
        ram[42] = "0b00111100010111011111001111010001";
        ram[43] = "0b00111110001101111010011100000001";
        ram[44] = "0b00111101101111101101000101010100";
        ram[45] = "0b00111101001111110001000101011000";
        ram[46] = "0b00111110010000111010110010010011";
        ram[47] = "0b00111101111100011000001010101010";
        ram[48] = "0b00111101111000111110011111010001";
        ram[49] = "0b00111101101010000011100010110100";
        ram[50] = "0b00111011010011011010010111100110";
        ram[51] = "0b10111101110110001011100100110100";
        ram[52] = "0b00111100001101000011110001001000";
        ram[53] = "0b00111101100101110000000010100101";
        ram[54] = "0b10111011001101110111110110110000";
        ram[55] = "0b10111100000101110101101001011010";
        ram[56] = "0b00111110010101011001100100100100";
        ram[57] = "0b00111110000000100111111100011011";
        ram[58] = "0b00111100110000111111000010111011";
        ram[59] = "0b10111110001111010011011011111000";
        ram[60] = "0b10111101110001100010110100011000";
        ram[61] = "0b10111101101010011010110111110001";
        ram[62] = "0b00111101110011100011001101101010";
        ram[63] = "0b00111100111110100111101111000111";
        ram[64] = "0b10111101110000011011000111001100";
        ram[65] = "0b00111101101100100011111001101001";
        ram[66] = "0b00111101111000101100111001000110";
        ram[67] = "0b10111101000111111110110111110111";
        ram[68] = "0b00111101011011011100010001111001";
        ram[69] = "0b00111101010000001000111101110010";
        ram[70] = "0b10111101100110011100010100011110";
        ram[71] = "0b00111101101111001110100101101101";
        ram[72] = "0b10111101100010000010110010111111";
        ram[73] = "0b10111101101110011001011100111110";
        ram[74] = "0b00111110001001000100100110011001";
        ram[75] = "0b10111110000100010110001011110001";
        ram[76] = "0b10111101111001011010001101011101";
        ram[77] = "0b10111110001001010011011011010110";
        ram[78] = "0b00111100100010111010000011101000";
        ram[79] = "0b00111101101000100101111011000010";
        ram[80] = "0b10111100100111111111010110011110";
        ram[81] = "0b10111101000011101000100110011011";
        ram[82] = "0b00111100001010001011010001010100";
        ram[83] = "0b00111101001111110111010101100001";
        ram[84] = "0b00111101001110111101110110101100";
        ram[85] = "0b00111101111001000011100100010101";
        ram[86] = "0b10111110000001100101111100001111";
        ram[87] = "0b10111110010110110001111110101100";
        ram[88] = "0b00111011010100100010011001010011";
        ram[89] = "0b10111011101101010100111000101011";
        ram[90] = "0b00111100011000010111011111101010";
        ram[91] = "0b10111101000010001100111010001011";
        ram[92] = "0b10111100000001010101010111110101";
        ram[93] = "0b10111101101101011000100000011010";
        ram[94] = "0b10111101111001000100001110010001";
        ram[95] = "0b00111101101111111011011010100111";
        ram[96] = "0b00111100011110011011101001101100";
        ram[97] = "0b00111101111001110010111100110100";
        ram[98] = "0b00111101111011011000110100110111";
        ram[99] = "0b00111101101001000111010111100110";
        ram[100] = "0b10111101111001100111110011110010";
        ram[101] = "0b00111100111110010001100111000111";
        ram[102] = "0b10111101011001000110110110011110";
        ram[103] = "0b10111110001001001111000111100101";
        ram[104] = "0b10111101010011010000101001110101";
        ram[105] = "0b10111101101000000110101000111001";
        ram[106] = "0b10111101000010001110011010001110";
        ram[107] = "0b00111101101011010011011101100011";
        ram[108] = "0b10111100101000111101010100100111";
        ram[109] = "0b10111101010000111100001100011110";
        ram[110] = "0b00111100110110001101101011111000";
        ram[111] = "0b00111010110111000111111101000111";
        ram[112] = "0b00111011111010001100111101001100";
        ram[113] = "0b10111110010000010101010111010110";
        ram[114] = "0b10111101101010011010101011011001";
        ram[115] = "0b10111110000010011010001100001010";
        ram[116] = "0b00111100011011111001001100110110";
        ram[117] = "0b10111110000000010010100001111100";
        ram[118] = "0b10111101100000111110110011100111";
        ram[119] = "0b00111101100000011101111011111101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_4_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_4_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_4_3) {
meminst = new inference_conv2d_f3_1_4_3_ram("inference_conv2d_f3_1_4_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_4_3() {
    delete meminst;
}


};//endmodule
#endif
