// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_4_9_H__
#define __inference_conv2d_f3_4_4_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_4_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_4_9_ram) {
        ram[0] = "0b00111110100001111100011111100111";
        ram[1] = "0b00111011110111010100010110010110";
        ram[2] = "0b00111101101000101000010111000100";
        ram[3] = "0b00111100101001101001101110101011";
        ram[4] = "0b00111110010110111111100010111010";
        ram[5] = "0b10111101110000110001101011101101";
        ram[6] = "0b10111100011001010110101001010011";
        ram[7] = "0b00111101010110101110100111111100";
        ram[8] = "0b10111110011000011011111000101011";
        ram[9] = "0b10111101100000101110001110101010";
        ram[10] = "0b00111011110010010110001011001010";
        ram[11] = "0b00111101110011010100100010001000";
        ram[12] = "0b10111101001010000010011010010000";
        ram[13] = "0b10111101101110111010111011101000";
        ram[14] = "0b00111101001100010010111100010111";
        ram[15] = "0b00111110000000101010001011000010";
        ram[16] = "0b10111101011001010100010111110000";
        ram[17] = "0b00111100001100011000001011000100";
        ram[18] = "0b10111101011100000110111001000010";
        ram[19] = "0b10111101110001101011010111100010";
        ram[20] = "0b00111101001000001010101000010100";
        ram[21] = "0b10111101001101101010111100000100";
        ram[22] = "0b10111101001001100101101111001111";
        ram[23] = "0b10111110000101111000101000101011";
        ram[24] = "0b00111100100011011011111010011010";
        ram[25] = "0b10111101000111111100011011110101";
        ram[26] = "0b00111101000000100111111000001111";
        ram[27] = "0b00111101100111100010111101111011";
        ram[28] = "0b00111101000111100101011110001001";
        ram[29] = "0b10111100011110001110101001100010";
        ram[30] = "0b00111100101110111111011111001000";
        ram[31] = "0b00111101110101101101011001010110";
        ram[32] = "0b10111101010011000001110111001011";
        ram[33] = "0b00111101101111100010110001001000";
        ram[34] = "0b10111101110010100000001101100111";
        ram[35] = "0b10111101101100110110010100011101";
        ram[36] = "0b10111110010011111101100001101011";
        ram[37] = "0b10111101110001100100011010010011";
        ram[38] = "0b10111100110101001001110011011011";
        ram[39] = "0b00111100111111011110011101010111";
        ram[40] = "0b00111110000000001010010111110000";
        ram[41] = "0b10111101001001001000010110111100";
        ram[42] = "0b10111011111101101010100000010011";
        ram[43] = "0b10111011100011011110100101111000";
        ram[44] = "0b00111101001011001100111110100010";
        ram[45] = "0b00111101111110010001101010111001";
        ram[46] = "0b00111110011100110110100111111101";
        ram[47] = "0b10111101000100001100000000001100";
        ram[48] = "0b10111110011101101000101000001101";
        ram[49] = "0b10111110000001011010110111011010";
        ram[50] = "0b00111011110110101100110000101001";
        ram[51] = "0b10111011110001100001000100011100";
        ram[52] = "0b10111110000101110010100100101100";
        ram[53] = "0b10111101010100000111011110110010";
        ram[54] = "0b00111101000011011011001100101100";
        ram[55] = "0b10111011101110001111010111010101";
        ram[56] = "0b00111110001010011000101001100101";
        ram[57] = "0b10111101000110100011111101100001";
        ram[58] = "0b10111110000001101111010001111011";
        ram[59] = "0b00111100010100101010100001000100";
        ram[60] = "0b10111101001100111100010001010011";
        ram[61] = "0b00111110001011100001010111001010";
        ram[62] = "0b10111101011110110010110111101110";
        ram[63] = "0b10111101100011111101001000111011";
        ram[64] = "0b00111101101101101111000011111000";
        ram[65] = "0b10111110001000101010101100100110";
        ram[66] = "0b00111101001101110110100011101101";
        ram[67] = "0b10111010101000010011011110011110";
        ram[68] = "0b00111100100100101100110111001101";
        ram[69] = "0b00111101011011001110011000010010";
        ram[70] = "0b00111100110101010111000010101011";
        ram[71] = "0b00111110000100001111110001110010";
        ram[72] = "0b10111100000011001001110000011011";
        ram[73] = "0b10111101001001100101101001110010";
        ram[74] = "0b00111100001011010011110001111001";
        ram[75] = "0b10111101100111010000010100000001";
        ram[76] = "0b10111101101000001100100001000111";
        ram[77] = "0b00111100110001011110010001111011";
        ram[78] = "0b00111101100100101000001101000000";
        ram[79] = "0b00111101110100101001011011110110";
        ram[80] = "0b00111110001001000110000110110111";
        ram[81] = "0b10111101101010010111100110000011";
        ram[82] = "0b00111101000100000100010111100011";
        ram[83] = "0b00111101101000010001100000111011";
        ram[84] = "0b10111101001001001110111100011101";
        ram[85] = "0b00111100101111100100100101000111";
        ram[86] = "0b10111100011001101001100001010000";
        ram[87] = "0b00111101110000101001111001000000";
        ram[88] = "0b00111100100010100100011010101011";
        ram[89] = "0b00111101111100110100100000101100";
        ram[90] = "0b10111101000111000101110010101000";
        ram[91] = "0b00111101100100111011010001111101";
        ram[92] = "0b00111101011011101101001000010000";
        ram[93] = "0b10111110000000101011000000100001";
        ram[94] = "0b10111101110111001010100111101111";
        ram[95] = "0b10111101110110011000001010001000";
        ram[96] = "0b00111101011011110010000101110001";
        ram[97] = "0b00111110001111010000000111000001";
        ram[98] = "0b00111110001000111010010101111111";
        ram[99] = "0b10111101000101010001000010000011";
        ram[100] = "0b00111000101101111000101110110010";
        ram[101] = "0b00111110010000101000111010010011";
        ram[102] = "0b10111101111011011010111000111110";
        ram[103] = "0b10111101111001011010000000111000";
        ram[104] = "0b00111101001101101110101110111010";
        ram[105] = "0b00111101101101001100100010111101";
        ram[106] = "0b10111101011000101011101011100000";
        ram[107] = "0b00111101100000100100101110111010";
        ram[108] = "0b00111101010010011110110110100101";
        ram[109] = "0b00111101111011010000101100110001";
        ram[110] = "0b00111110001010000110110100101111";
        ram[111] = "0b00111101100110001001100010110011";
        ram[112] = "0b10111110000110110010101110111011";
        ram[113] = "0b10111100101010101111110010011000";
        ram[114] = "0b10111101101110000001110000111100";
        ram[115] = "0b10111110001010000100001010110111";
        ram[116] = "0b00111101100110000001011000001100";
        ram[117] = "0b00111100100010110000011011000100";
        ram[118] = "0b00111101111011110011000100101011";
        ram[119] = "0b10111101010011100010000101100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_4_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_4_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_4_9) {
meminst = new inference_conv2d_f3_4_4_9_ram("inference_conv2d_f3_4_4_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_4_9() {
    delete meminst;
}


};//endmodule
#endif
