// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_1_H__
#define __inference_conv2d_f3_0_0_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_1_ram) {
        ram[0] = "0b10111100100101101010110001001010";
        ram[1] = "0b00111101001101000001100111001000";
        ram[2] = "0b10111110000001101110101100001011";
        ram[3] = "0b00111101110011101010111100100101";
        ram[4] = "0b00111101001001000010110100111100";
        ram[5] = "0b00111011100100011000000000110000";
        ram[6] = "0b00111100011111010111001111001001";
        ram[7] = "0b10111100010000000101110000010001";
        ram[8] = "0b00111101001000100101110001001011";
        ram[9] = "0b10111101001110011001100101001001";
        ram[10] = "0b10111101110001000011111110111110";
        ram[11] = "0b10111100110001110101010110010101";
        ram[12] = "0b10111101011100011100111110100001";
        ram[13] = "0b10111100111100110001101110110110";
        ram[14] = "0b10111100110011111100111110110111";
        ram[15] = "0b00111011101000011011000111010110";
        ram[16] = "0b00111001111101011110111000101110";
        ram[17] = "0b00111101110001101000010101100011";
        ram[18] = "0b00111101110001000110111010011101";
        ram[19] = "0b10111101111010110110001110010001";
        ram[20] = "0b10111101011001111111101010111011";
        ram[21] = "0b00111110000001110001110010010111";
        ram[22] = "0b10111101011000001011010111101110";
        ram[23] = "0b00111101110001110100110110011100";
        ram[24] = "0b00111100101010010001000010011011";
        ram[25] = "0b00111100101011110111110000100100";
        ram[26] = "0b00111110010100011110100001100000";
        ram[27] = "0b10111101100110100100000101011111";
        ram[28] = "0b00111101000000000111010101110001";
        ram[29] = "0b00111101101011010110100001011011";
        ram[30] = "0b00111110001010000110110101110010";
        ram[31] = "0b10111100010100001100100110110010";
        ram[32] = "0b10111110000011110011100010000010";
        ram[33] = "0b00111101100001100110001001101010";
        ram[34] = "0b00111101001100000001111110111000";
        ram[35] = "0b10111101000101110101111110011000";
        ram[36] = "0b10111101011110001111111010011111";
        ram[37] = "0b00111101111000001001110000111101";
        ram[38] = "0b00111101001000001101010110011000";
        ram[39] = "0b00111110001010001011000111011101";
        ram[40] = "0b00111011100100011000110110000111";
        ram[41] = "0b00111101100101011101000111011111";
        ram[42] = "0b00111110000010000100110101110111";
        ram[43] = "0b00111101001010001101111000010000";
        ram[44] = "0b10111100001100000110110100011011";
        ram[45] = "0b00111110001100010110101100010010";
        ram[46] = "0b10111100101101011001110100111011";
        ram[47] = "0b00111101101101001110111101010011";
        ram[48] = "0b10111101010110101111100110110110";
        ram[49] = "0b00111110010010001000100011111000";
        ram[50] = "0b10111101110011000000111111100110";
        ram[51] = "0b00111101111100100001110101010100";
        ram[52] = "0b00111101101000000110000001111000";
        ram[53] = "0b00111011101010111001010000011000";
        ram[54] = "0b00111101111101101011000100011100";
        ram[55] = "0b00111110000010001111100010100101";
        ram[56] = "0b10111110001111000100100111111101";
        ram[57] = "0b00111101110010001101101100100000";
        ram[58] = "0b10111101101011110010011011110010";
        ram[59] = "0b00111100111000110100111100100101";
        ram[60] = "0b00111100111110010110001000100001";
        ram[61] = "0b10111101001000001110001000101110";
        ram[62] = "0b00111110001100101010001011000010";
        ram[63] = "0b10111110001010111000111110011011";
        ram[64] = "0b00111101001000110110111100111011";
        ram[65] = "0b10111101011111011101011111101101";
        ram[66] = "0b10111101101111111110000010110011";
        ram[67] = "0b10111101010111001001011000011110";
        ram[68] = "0b10111101101010001010111001110101";
        ram[69] = "0b10111101111001011000101100111111";
        ram[70] = "0b00111101110000011001001100111011";
        ram[71] = "0b00111110000101100010010001010111";
        ram[72] = "0b10111110001101110000111101111100";
        ram[73] = "0b00111101011111100010001001111010";
        ram[74] = "0b00111110000010011101001001111100";
        ram[75] = "0b10111101111010110011010011100111";
        ram[76] = "0b00111100000011001111111001010110";
        ram[77] = "0b10111100101100110010001100001101";
        ram[78] = "0b10111101011010101000010000011101";
        ram[79] = "0b10111100011010101000100100001011";
        ram[80] = "0b00111101101010100111011110111110";
        ram[81] = "0b00111101100011111010110111110011";
        ram[82] = "0b10111101101100110000000100101111";
        ram[83] = "0b10111100101110011111100001001001";
        ram[84] = "0b10111101110010001100111100000100";
        ram[85] = "0b00111101010111010010101110001010";
        ram[86] = "0b10111101000011000001000111010111";
        ram[87] = "0b10111110010011010101110010111000";
        ram[88] = "0b10111101111011101101011001110111";
        ram[89] = "0b00111101111100000011011001000100";
        ram[90] = "0b00111110000101011011100000010011";
        ram[91] = "0b00111110001001110011101110000110";
        ram[92] = "0b00111100101010100001101100100111";
        ram[93] = "0b00111101111110111001111000000110";
        ram[94] = "0b10111101010100011100000111001001";
        ram[95] = "0b10111110000110101011011101010110";
        ram[96] = "0b00111101001110110011011111111111";
        ram[97] = "0b10111101101001011101100001010001";
        ram[98] = "0b10111011101011011010100000000100";
        ram[99] = "0b00111101101100001100110010100001";
        ram[100] = "0b10111101011101110001010000110100";
        ram[101] = "0b00111100101111101001110010001000";
        ram[102] = "0b10111110000001011010100101100101";
        ram[103] = "0b00111100110100111101111001101111";
        ram[104] = "0b00111101100010010100110001010010";
        ram[105] = "0b00111101111100111101000100000011";
        ram[106] = "0b00111101110001110111011100001000";
        ram[107] = "0b00111001110011111100000001110010";
        ram[108] = "0b10111101010011011111111010101011";
        ram[109] = "0b00111011100111010000111000101110";
        ram[110] = "0b10111101110100101110001001110110";
        ram[111] = "0b10111101100000101111010111001110";
        ram[112] = "0b00111100110111010001101101100100";
        ram[113] = "0b00111100100100110000100010111100";
        ram[114] = "0b00111101111000000111100000010000";
        ram[115] = "0b00111011111101011110011100100010";
        ram[116] = "0b00111110010100011101010100111101";
        ram[117] = "0b10111100000100111001001011101111";
        ram[118] = "0b00111101010101000011011011010100";
        ram[119] = "0b00111110001111011111011111101000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_1) {
meminst = new inference_conv2d_f3_0_0_1_ram("inference_conv2d_f3_0_0_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_1() {
    delete meminst;
}


};//endmodule
#endif
