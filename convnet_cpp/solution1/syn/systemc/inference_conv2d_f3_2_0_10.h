// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_0_10_H__
#define __inference_conv2d_f3_2_0_10_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_0_10_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_0_10_ram) {
        ram[0] = "0b10111101110111111111101101001000";
        ram[1] = "0b10111101100111011011110101001010";
        ram[2] = "0b10111101100000000110000110010010";
        ram[3] = "0b00111101010110001110010010000011";
        ram[4] = "0b00111011101100011011100100110110";
        ram[5] = "0b00111101101011101011100111100101";
        ram[6] = "0b10111101001101100110001110000100";
        ram[7] = "0b00111110000111110101010011010010";
        ram[8] = "0b10111101000110011101100101000000";
        ram[9] = "0b10111100010110011010000101011100";
        ram[10] = "0b00111101000010011101011100011001";
        ram[11] = "0b00111110000011000001010001000000";
        ram[12] = "0b00111101010110011111001111111101";
        ram[13] = "0b00111101000000100110111001101111";
        ram[14] = "0b00111101111010100101000001010000";
        ram[15] = "0b10111101001010101110110100010100";
        ram[16] = "0b10111101010101001100011000101011";
        ram[17] = "0b10111010111110011010101100100111";
        ram[18] = "0b10111101101010011001101001100011";
        ram[19] = "0b10111101011000110001110111000010";
        ram[20] = "0b00111110001010010101000110000011";
        ram[21] = "0b10111101101000110110100110010010";
        ram[22] = "0b10111011101000101011100000111100";
        ram[23] = "0b00111101111001001000100101001100";
        ram[24] = "0b00111100011111001101100010011001";
        ram[25] = "0b00111100001101101011010110011111";
        ram[26] = "0b10111101011000100111001011110010";
        ram[27] = "0b10111101111101011010011111010010";
        ram[28] = "0b00111101011110010111110111101011";
        ram[29] = "0b00111100111000001010000111001100";
        ram[30] = "0b10111110010100110100010110001101";
        ram[31] = "0b10111101111001100101111110010110";
        ram[32] = "0b10111110001001011111101000100010";
        ram[33] = "0b00111100101001000010011110010010";
        ram[34] = "0b10111101100011001111111001001011";
        ram[35] = "0b10111101111011110010010110100010";
        ram[36] = "0b00111110010100101011011101111000";
        ram[37] = "0b00111101101101100000010110011110";
        ram[38] = "0b00111101101111000111001101011011";
        ram[39] = "0b00111101111111000000100011111010";
        ram[40] = "0b10111101000000101001100111110011";
        ram[41] = "0b10111110001110011110001000110111";
        ram[42] = "0b00111101101111000011111011010011";
        ram[43] = "0b10111101101000110100000001110111";
        ram[44] = "0b00111101000000001010100100001000";
        ram[45] = "0b10111101010101010010110011010011";
        ram[46] = "0b00111100101010110110110100110110";
        ram[47] = "0b10111011000111001011010010101100";
        ram[48] = "0b00111101100111010100100000101010";
        ram[49] = "0b10111110010011000111110111100101";
        ram[50] = "0b00111101110110100000100000111010";
        ram[51] = "0b00111010111110110110011010111110";
        ram[52] = "0b00111100110010101100011100111001";
        ram[53] = "0b00111101000011111011001011000110";
        ram[54] = "0b10111101001101001110010011111111";
        ram[55] = "0b10111110000000001011010100100100";
        ram[56] = "0b00111101110111011111111010111001";
        ram[57] = "0b10111110000001001101010010001001";
        ram[58] = "0b10111101010011000000001000000001";
        ram[59] = "0b00111101111001110110101101111111";
        ram[60] = "0b00111110000000001100110101000010";
        ram[61] = "0b10111100011000000001111010111001";
        ram[62] = "0b00111100110011000001000100011011";
        ram[63] = "0b00111101000000001100000110101100";
        ram[64] = "0b10111101010100111001110100000000";
        ram[65] = "0b10111110010000010010100110001001";
        ram[66] = "0b00111110011011010101110001110100";
        ram[67] = "0b10111100111111100100010100010101";
        ram[68] = "0b00111100111110001011100001000011";
        ram[69] = "0b10111110001000100100011111001011";
        ram[70] = "0b00111101000001100000101000111011";
        ram[71] = "0b10111100010011111101101000110011";
        ram[72] = "0b10111101101111101001101010011000";
        ram[73] = "0b00111101010100011010110101110010";
        ram[74] = "0b10111101110101000011011010111001";
        ram[75] = "0b10111101110101111010101010101100";
        ram[76] = "0b00111101101111011101111011001011";
        ram[77] = "0b00111110000000011000010000111100";
        ram[78] = "0b00111101001110001110011010011100";
        ram[79] = "0b10111100101111000111110011110011";
        ram[80] = "0b00111110001110101110101110000001";
        ram[81] = "0b00111101100110111000101010010011";
        ram[82] = "0b00111101101011000101100010111001";
        ram[83] = "0b00111110000011100101011011001101";
        ram[84] = "0b00111101010101101111111111110111";
        ram[85] = "0b00111100001111011110000101110111";
        ram[86] = "0b00111100011000001001100011000111";
        ram[87] = "0b00111101100011011100111001000111";
        ram[88] = "0b10111100101011010110011101000001";
        ram[89] = "0b00111101100110101010110111011001";
        ram[90] = "0b00111011101010111111100100101101";
        ram[91] = "0b10111101000101001011011001010110";
        ram[92] = "0b10111100011011110000010010011011";
        ram[93] = "0b00111100110010100101101010010111";
        ram[94] = "0b10111101011000100011110001010000";
        ram[95] = "0b00111101111001110001000101010001";
        ram[96] = "0b00111100010100011100010101011010";
        ram[97] = "0b10111101011110011110100001110100";
        ram[98] = "0b10111101110000100010100010001100";
        ram[99] = "0b10111110010001100001010001011001";
        ram[100] = "0b00111100011101011111100010101011";
        ram[101] = "0b10111100101111100110000010001110";
        ram[102] = "0b00111100010000010000000011100111";
        ram[103] = "0b00111101000110100001011100000010";
        ram[104] = "0b10111101110011111100101011001001";
        ram[105] = "0b10111100001001001000011110011111";
        ram[106] = "0b00111101101100001101100011011000";
        ram[107] = "0b10111110000010111101011100101100";
        ram[108] = "0b10111110001111111001111111001011";
        ram[109] = "0b10111110000110011001111010010101";
        ram[110] = "0b10111101100110000100100111001011";
        ram[111] = "0b10111110000001101001000111101010";
        ram[112] = "0b10111100010100100101000111011100";
        ram[113] = "0b00111101111011011001011100101101";
        ram[114] = "0b10111101100111101101011110011111";
        ram[115] = "0b10111100000010000111010000001101";
        ram[116] = "0b00111101000000010001101110111111";
        ram[117] = "0b10111101000101100000010110101011";
        ram[118] = "0b00111101010011100000101111111101";
        ram[119] = "0b00111101101110011110011011100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_0_10) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_0_10_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_0_10) {
meminst = new inference_conv2d_f3_2_0_10_ram("inference_conv2d_f3_2_0_10_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_0_10() {
    delete meminst;
}


};//endmodule
#endif
