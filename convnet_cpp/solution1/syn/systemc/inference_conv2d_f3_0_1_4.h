// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_1_4_H__
#define __inference_conv2d_f3_0_1_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_1_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_1_4_ram) {
        ram[0] = "0b10111110100001000010011100100000";
        ram[1] = "0b10111101100001111000101011011001";
        ram[2] = "0b10111110000100101011011110111011";
        ram[3] = "0b00111101101100100100110001101001";
        ram[4] = "0b10111100101111010011001011111100";
        ram[5] = "0b00111110000110010101010110110100";
        ram[6] = "0b00111100111101101101101010111101";
        ram[7] = "0b00111110010001001101101011010011";
        ram[8] = "0b00111100101010010011101111001110";
        ram[9] = "0b00111101010001011001001101010010";
        ram[10] = "0b00111110001000001101011001101111";
        ram[11] = "0b10111101101111101011101001011101";
        ram[12] = "0b10111110011101010011011111100011";
        ram[13] = "0b00111100100010111111001001000111";
        ram[14] = "0b00111101001100001001000111101001";
        ram[15] = "0b00111101110001000100000001010001";
        ram[16] = "0b10111101110001111001111011010011";
        ram[17] = "0b10111101000101000001011111100101";
        ram[18] = "0b10111101100110000110100100110011";
        ram[19] = "0b00111101101101001100011010111111";
        ram[20] = "0b00111100111000100011010001110011";
        ram[21] = "0b10111101100011111001010101011100";
        ram[22] = "0b00111110011000011111011001000101";
        ram[23] = "0b10111101011111001000000000110100";
        ram[24] = "0b00111100110000001000001101111110";
        ram[25] = "0b10111101111001110011000101001101";
        ram[26] = "0b00111011000101011110111101000000";
        ram[27] = "0b00111101110111111000110100101110";
        ram[28] = "0b00111011110111100101111101000110";
        ram[29] = "0b10111100111110100001111000111111";
        ram[30] = "0b00111101101111011101000001000101";
        ram[31] = "0b00111101101010010110110010101011";
        ram[32] = "0b00111110001110001111000010000100";
        ram[33] = "0b10111101011110001001010100000111";
        ram[34] = "0b10111101010111000000101101001001";
        ram[35] = "0b10111101101011101000011001001110";
        ram[36] = "0b10111100101010101001101101111111";
        ram[37] = "0b00111101111100101100010110100000";
        ram[38] = "0b10111101000111111101110011111010";
        ram[39] = "0b10111110000000010100110001100110";
        ram[40] = "0b00111110001001100010100001000110";
        ram[41] = "0b00111101010011011100110110011001";
        ram[42] = "0b10111110000111010110011110111010";
        ram[43] = "0b10111101101001010100101000010100";
        ram[44] = "0b00111101111010100000001111000101";
        ram[45] = "0b00111100110111110000110101000001";
        ram[46] = "0b10111100110000111001111110010010";
        ram[47] = "0b00111110000000100100011111001011";
        ram[48] = "0b10111110010011111101011111100100";
        ram[49] = "0b10111101101000111101101001110011";
        ram[50] = "0b10111011111100100001101000001110";
        ram[51] = "0b10111110000000010001011000100011";
        ram[52] = "0b00111110000010000011110001101101";
        ram[53] = "0b00111101110100011101111011110000";
        ram[54] = "0b10111101111001011001011101001110";
        ram[55] = "0b10111101001011001100010100100101";
        ram[56] = "0b00111101101001011110001101100001";
        ram[57] = "0b00111100110000001010100110101001";
        ram[58] = "0b10111101001111000101111101111100";
        ram[59] = "0b10111100000010101101000100101010";
        ram[60] = "0b00111101000101100110110111100110";
        ram[61] = "0b00111110011010010001111100101110";
        ram[62] = "0b10111100011001000011101111101010";
        ram[63] = "0b00111101001100000010010010001011";
        ram[64] = "0b10111110001101001101111111001110";
        ram[65] = "0b00111101000101010111100010111110";
        ram[66] = "0b00111101011001100010110111100010";
        ram[67] = "0b10111100100111110010011101111000";
        ram[68] = "0b00111110000100110010000001010011";
        ram[69] = "0b00111011011100011111000010011110";
        ram[70] = "0b00111101100101110110100110101001";
        ram[71] = "0b00111100110110100001010011101010";
        ram[72] = "0b00111101111010010110001001001010";
        ram[73] = "0b00111011000111000110010000100100";
        ram[74] = "0b00111110010011100010110100011111";
        ram[75] = "0b00111100111011011110101101100000";
        ram[76] = "0b00111101101011100011011110000001";
        ram[77] = "0b10111110001000001001000011110111";
        ram[78] = "0b10111101000010111001100001001111";
        ram[79] = "0b00111100110010100111010101101111";
        ram[80] = "0b00111101110011101001011110001101";
        ram[81] = "0b00111100100101011100001001110101";
        ram[82] = "0b10111101100110011010101000101011";
        ram[83] = "0b10111100011101000010001101010011";
        ram[84] = "0b00111101100111000010000011100011";
        ram[85] = "0b00111101011110101010010011000111";
        ram[86] = "0b10111101000010111110110010000010";
        ram[87] = "0b00111110001001011000011101010001";
        ram[88] = "0b00111100100010011100001111001110";
        ram[89] = "0b00111110001001001000101101100101";
        ram[90] = "0b00111110000010010011111011100110";
        ram[91] = "0b10111100101000101011110001011000";
        ram[92] = "0b00111110000001010011110000010101";
        ram[93] = "0b00111101100100100011001010101010";
        ram[94] = "0b10111101101110011100101001000001";
        ram[95] = "0b00111110001011001010000011000011";
        ram[96] = "0b00111101010000000010101011001000";
        ram[97] = "0b10111100111110100100111001000101";
        ram[98] = "0b00111101101000001011000000101001";
        ram[99] = "0b10111110010110110111100010001001";
        ram[100] = "0b10111101101100011011110111101000";
        ram[101] = "0b10111110100001000100101101001101";
        ram[102] = "0b10111110001101001011000010011111";
        ram[103] = "0b00111110010000001111011111111101";
        ram[104] = "0b10111101101011000111111100001100";
        ram[105] = "0b00111101111101000110100000000001";
        ram[106] = "0b00111101111101010011011000001101";
        ram[107] = "0b00111101110010110110000100100111";
        ram[108] = "0b10111110000000010110010010000100";
        ram[109] = "0b10111101110101100111111111010100";
        ram[110] = "0b00111101010000010001011100100010";
        ram[111] = "0b10111100100010010110001111000001";
        ram[112] = "0b00111101010011010110010101000011";
        ram[113] = "0b00111100110101010111101100100111";
        ram[114] = "0b10111101110011101011100100011011";
        ram[115] = "0b10111110000100011100110000010000";
        ram[116] = "0b00111101011110001111101100101001";
        ram[117] = "0b00111100101100110110111100101110";
        ram[118] = "0b10111101100110111000000001001100";
        ram[119] = "0b10111101110111001011111001100010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_1_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_1_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_1_4) {
meminst = new inference_conv2d_f3_0_1_4_ram("inference_conv2d_f3_0_1_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_1_4() {
    delete meminst;
}


};//endmodule
#endif
