// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_2_12_H__
#define __inference_conv2d_f3_3_2_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_2_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_2_12_ram) {
        ram[0] = "0b10111100010001010100101101100100";
        ram[1] = "0b10111101000110101010101101000111";
        ram[2] = "0b10111011111110001101110110001100";
        ram[3] = "0b00111101110110001011011100011100";
        ram[4] = "0b00111101011101010011111110011000";
        ram[5] = "0b00111101110010101001111101111011";
        ram[6] = "0b10111101111110111001100011001000";
        ram[7] = "0b00111011110110101010111000100001";
        ram[8] = "0b00111100110110111011000100000001";
        ram[9] = "0b10111101110111111000011001011101";
        ram[10] = "0b00111100000011010010011000111001";
        ram[11] = "0b00111101011010000101110001000000";
        ram[12] = "0b10111101101010110000111000001110";
        ram[13] = "0b10111110000111001110101111111111";
        ram[14] = "0b10111101101111111100011001111100";
        ram[15] = "0b10111101111101000011011010111001";
        ram[16] = "0b10111101011111010000000011110111";
        ram[17] = "0b00111101110010100111110101001100";
        ram[18] = "0b10111100110100110001000101010101";
        ram[19] = "0b00111100000001100001010010101101";
        ram[20] = "0b10111110000100011011101000111101";
        ram[21] = "0b00111101101001010000110001101100";
        ram[22] = "0b00111101101101101100110000101010";
        ram[23] = "0b10111101011001110111111111110001";
        ram[24] = "0b10111100101011100111010101011110";
        ram[25] = "0b10111101100010110101110001100010";
        ram[26] = "0b10111101101001100101001001111010";
        ram[27] = "0b00111101111111000111100110110011";
        ram[28] = "0b00111101010101110011101000101001";
        ram[29] = "0b00111110001000101101111100001101";
        ram[30] = "0b10111101110001001000101110101000";
        ram[31] = "0b00111101011010110101000100110111";
        ram[32] = "0b10111101010110011101100111000110";
        ram[33] = "0b00111101010011000111111100011010";
        ram[34] = "0b10111101010101100111000100100110";
        ram[35] = "0b10111101110010000100001111111001";
        ram[36] = "0b00111110001001000101010001011000";
        ram[37] = "0b00111100110101110011010111011100";
        ram[38] = "0b10111010111010101001101111000000";
        ram[39] = "0b00111101100010100001010111001110";
        ram[40] = "0b00111001111111110100000110100101";
        ram[41] = "0b00111100101011001011101000001000";
        ram[42] = "0b10111100101010100011001111100110";
        ram[43] = "0b00111110000000100011111101101000";
        ram[44] = "0b10111011100111000111100001011100";
        ram[45] = "0b00111101010101110000011101001110";
        ram[46] = "0b00111110001101111001011000111010";
        ram[47] = "0b10111101010101111001100010100011";
        ram[48] = "0b00111101111100001010110101000111";
        ram[49] = "0b10111100000110111110101011001101";
        ram[50] = "0b10111101100111011011101100111111";
        ram[51] = "0b10111101010101010100110010110011";
        ram[52] = "0b10111110001011111010011100100010";
        ram[53] = "0b10111101001110000010111110111101";
        ram[54] = "0b10111101001110011111010001001101";
        ram[55] = "0b10111110000001110000011011010101";
        ram[56] = "0b10111101111110100100010110010001";
        ram[57] = "0b10111101101111111011110101010000";
        ram[58] = "0b00111101001001110011000100110010";
        ram[59] = "0b00111100001000101101110010000100";
        ram[60] = "0b00111100100100000101100011011110";
        ram[61] = "0b00111101100111001000010011010001";
        ram[62] = "0b10111101110000111101101101100100";
        ram[63] = "0b00111100011111101011001011111001";
        ram[64] = "0b00111101000110101010101100101100";
        ram[65] = "0b00111100111001101011001101011110";
        ram[66] = "0b00111101111101101001010001000110";
        ram[67] = "0b10111100101010010111110000110000";
        ram[68] = "0b00111101011010011100010010100101";
        ram[69] = "0b00111101100100011001011110010101";
        ram[70] = "0b10111101011011001010001010100110";
        ram[71] = "0b10111010001011001100101110001100";
        ram[72] = "0b00111101101000010101010001000011";
        ram[73] = "0b10111101111001010000001011101111";
        ram[74] = "0b00111101101100110110111010100111";
        ram[75] = "0b10111101101000111100001011000000";
        ram[76] = "0b10111100101101011111000101010100";
        ram[77] = "0b00111101100000101010011000111000";
        ram[78] = "0b00111110000010000000010110100011";
        ram[79] = "0b00111101111100101101010001001110";
        ram[80] = "0b10111101111000001001010111110010";
        ram[81] = "0b10111101101101100010110011010101";
        ram[82] = "0b10111100101000001110100000001101";
        ram[83] = "0b00111101110010101011111100110100";
        ram[84] = "0b10111101000111110001010100000100";
        ram[85] = "0b00111101110111101101010110101110";
        ram[86] = "0b10111101010100000010001001010111";
        ram[87] = "0b00111110000101010010000101010111";
        ram[88] = "0b10111101100100110011101010011000";
        ram[89] = "0b00111101000001111110011001100011";
        ram[90] = "0b00111101101111010111100100010101";
        ram[91] = "0b10111100010110000110110010101001";
        ram[92] = "0b10111101010000010000101010001100";
        ram[93] = "0b10111011110011100001011001001110";
        ram[94] = "0b10111100111001010011100000110011";
        ram[95] = "0b00111101110110100101110000011100";
        ram[96] = "0b00111101100011101101010111100100";
        ram[97] = "0b00111101110001111101111000110110";
        ram[98] = "0b10111101010001100101010010101110";
        ram[99] = "0b10111101001101110111010011100001";
        ram[100] = "0b00111100001101110110011111100001";
        ram[101] = "0b00111101101000000110001101011010";
        ram[102] = "0b00111101001110111011100011000011";
        ram[103] = "0b00111101100011011100000101111100";
        ram[104] = "0b10111101001100110010111111011000";
        ram[105] = "0b10111101110001110001000011011001";
        ram[106] = "0b00111101100110011000001110010100";
        ram[107] = "0b10111101100000001001111110001010";
        ram[108] = "0b00111101011111110111000110011010";
        ram[109] = "0b00111101010010000001000001110000";
        ram[110] = "0b10111110000110111000010011011100";
        ram[111] = "0b00111100011101011110000011000010";
        ram[112] = "0b00111101100000101011001101000110";
        ram[113] = "0b00111101001111000110001110010011";
        ram[114] = "0b00111101101101000110111001110100";
        ram[115] = "0b10111101101011010001000000011110";
        ram[116] = "0b10111110001010101110111100101100";
        ram[117] = "0b10111101101000101101100001001010";
        ram[118] = "0b00111101010001000011101000000111";
        ram[119] = "0b10111100000111110001101101011001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_2_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_2_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_2_12) {
meminst = new inference_conv2d_f3_3_2_12_ram("inference_conv2d_f3_3_2_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_2_12() {
    delete meminst;
}


};//endmodule
#endif
