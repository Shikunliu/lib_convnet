// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_3_H__
#define __inference_conv2d_f3_0_3_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_3_ram) {
        ram[0] = "0b10111100111000100000100100111111";
        ram[1] = "0b10111100100110110100110111001111";
        ram[2] = "0b10111110000010001011100011110001";
        ram[3] = "0b10111100010111001010101000100101";
        ram[4] = "0b00111100100110100111000011000101";
        ram[5] = "0b00111100011010001001111111111101";
        ram[6] = "0b00111101111110101001101100000111";
        ram[7] = "0b00111101110111100001110110101000";
        ram[8] = "0b10111101000101100001110110101110";
        ram[9] = "0b00111101110111010111100100000111";
        ram[10] = "0b00111101100000001111110111001111";
        ram[11] = "0b00111011101101001111110100111000";
        ram[12] = "0b10111110010001100101101010011011";
        ram[13] = "0b00111110001000101110001000110011";
        ram[14] = "0b10111101101111101110101111110110";
        ram[15] = "0b10111100111001011010010000110100";
        ram[16] = "0b10111101101011000000100010011101";
        ram[17] = "0b00111101110111001110000011111100";
        ram[18] = "0b00111101001100101011010000111000";
        ram[19] = "0b10111101100000010000111100001111";
        ram[20] = "0b00111101111101110110111111110100";
        ram[21] = "0b00111001000010110100100010001101";
        ram[22] = "0b00111110010010010111011001111001";
        ram[23] = "0b10111101100000100000011110010010";
        ram[24] = "0b00111101100011001100011001110101";
        ram[25] = "0b10111101100111101111110001011111";
        ram[26] = "0b10111101011001001001000010100011";
        ram[27] = "0b00111101111001110000011001001111";
        ram[28] = "0b10111100100111010100110000001011";
        ram[29] = "0b00111101110100110011000100011010";
        ram[30] = "0b10111100111110000010101100011111";
        ram[31] = "0b00111110000110101000110110101000";
        ram[32] = "0b10111101001001001111111101000011";
        ram[33] = "0b00111101100000111011000100110000";
        ram[34] = "0b00111110001000010111101111011001";
        ram[35] = "0b10111101110110001010101010000110";
        ram[36] = "0b10111101101011100001001000111010";
        ram[37] = "0b00111101101100111110100101100100";
        ram[38] = "0b00111101000001101011111001111011";
        ram[39] = "0b00111101111001001110000111100111";
        ram[40] = "0b10111100011110011110100010001111";
        ram[41] = "0b10111110000111010010011110000000";
        ram[42] = "0b00111011111001101010111011100001";
        ram[43] = "0b00111100010000101111001100101111";
        ram[44] = "0b00111100110001100000010011000111";
        ram[45] = "0b00111101101101011110110011000100";
        ram[46] = "0b00111101100110001111100000011111";
        ram[47] = "0b00111101101001100101010000001101";
        ram[48] = "0b00111001001110011010110101111010";
        ram[49] = "0b00111101101010101101011101101100";
        ram[50] = "0b10111101111000010111000100011001";
        ram[51] = "0b10111101011100111111001110011101";
        ram[52] = "0b10111110000011011001110010101110";
        ram[53] = "0b10111110000100000001000100001010";
        ram[54] = "0b10111101010011100100111111101111";
        ram[55] = "0b10111100101000111110000000001111";
        ram[56] = "0b00111110000010111001000110110100";
        ram[57] = "0b00111110010000001110001001111110";
        ram[58] = "0b10111101001010011101010110000111";
        ram[59] = "0b10111100100110100101010101001100";
        ram[60] = "0b00111101101000111010111011000110";
        ram[61] = "0b10111110010000111011000000111110";
        ram[62] = "0b10111101110110101110100100100101";
        ram[63] = "0b00111110001010101011110110100001";
        ram[64] = "0b10111101010001000010100100001010";
        ram[65] = "0b00111110000101011111011000110100";
        ram[66] = "0b10111101001010000100000011111100";
        ram[67] = "0b10111100111101010001001101110011";
        ram[68] = "0b00111101100000011100110011110100";
        ram[69] = "0b00111101001100011000110100100110";
        ram[70] = "0b00111101100101001001110010100101";
        ram[71] = "0b00111011111011001101101010011111";
        ram[72] = "0b10111100111011111101101000011000";
        ram[73] = "0b10111101100000000101110011110101";
        ram[74] = "0b10111101101101001110100001011010";
        ram[75] = "0b10111101010001000011101000000111";
        ram[76] = "0b00111110000110110011011110000110";
        ram[77] = "0b10111101111010001110001011100011";
        ram[78] = "0b10111101111000110000110110110111";
        ram[79] = "0b00111101110111110100010011010100";
        ram[80] = "0b00111101100111110111100110101101";
        ram[81] = "0b10111101101001010010010011001101";
        ram[82] = "0b10111100111110000101000000001000";
        ram[83] = "0b10111101110110011101111111011011";
        ram[84] = "0b00111010011000000100001001001010";
        ram[85] = "0b00111100111110011100101000100110";
        ram[86] = "0b10111110010101110100010101111100";
        ram[87] = "0b00111100100000110111100011111100";
        ram[88] = "0b00111101011101001001011011000110";
        ram[89] = "0b00111101100110101000100011100011";
        ram[90] = "0b10111100111001100000111010001000";
        ram[91] = "0b10111101000110000001110101100011";
        ram[92] = "0b10111101110000000010110011111100";
        ram[93] = "0b10111101101110100110100111001011";
        ram[94] = "0b10111101110101010011111101111101";
        ram[95] = "0b10111101011101100110111101111000";
        ram[96] = "0b00111101001111111010010011100001";
        ram[97] = "0b10111101111100110001101110011011";
        ram[98] = "0b00111101010100001000101100011000";
        ram[99] = "0b00111110000010001010000000001010";
        ram[100] = "0b00111101100010100110000001011100";
        ram[101] = "0b00111101001010101000101010000011";
        ram[102] = "0b00111110000011101011111100100011";
        ram[103] = "0b10111101111100000100101010110110";
        ram[104] = "0b00111101100111001011010011111111";
        ram[105] = "0b00111100111100010100101001011011";
        ram[106] = "0b10111110000110110000001100011001";
        ram[107] = "0b00111100011001000101110100001100";
        ram[108] = "0b10111011011111110000010100101110";
        ram[109] = "0b10111101110101110001010010111010";
        ram[110] = "0b10111101100100000110000100011001";
        ram[111] = "0b00111110000111110101111010000101";
        ram[112] = "0b10111100101010010110010111110101";
        ram[113] = "0b10111110001100000010101111000111";
        ram[114] = "0b10111110001011111110110000010100";
        ram[115] = "0b00111101011100100010100001110001";
        ram[116] = "0b10111100110010000000000001001010";
        ram[117] = "0b00111101001011110100001110100000";
        ram[118] = "0b10111101000110010110101101000001";
        ram[119] = "0b00111101001110111111001011000000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_3_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_3) {
meminst = new inference_conv2d_f3_0_3_3_ram("inference_conv2d_f3_0_3_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_3() {
    delete meminst;
}


};//endmodule
#endif
