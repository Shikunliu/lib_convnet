// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_1_H__
#define __inference_mult_1_120_120_84_s_W4_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_1_ram) {
        ram[0] = "0b00111110000011011111100000101011";
        ram[1] = "0b10111110001111011110001011101111";
        ram[2] = "0b10111101000100011101111010000101";
        ram[3] = "0b00111101010011111110011110000100";
        ram[4] = "0b00111110001111101101111000010010";
        ram[5] = "0b00111100100101000010100101001101";
        ram[6] = "0b00111101110101110110110011001110";
        ram[7] = "0b10111101100100001010111001000110";
        ram[8] = "0b00111101011010111100010101001011";
        ram[9] = "0b00111100000010001011000100101010";
        ram[10] = "0b00111100101110101111111010100100";
        ram[11] = "0b00111101010010111110110001101000";
        ram[12] = "0b00111100110100010111000010100000";
        ram[13] = "0b10111110011010100010001010110100";
        ram[14] = "0b10111101100011000010000110111010";
        ram[15] = "0b10111100001000010101111001001010";
        ram[16] = "0b00111100010110001011100111010101";
        ram[17] = "0b00111101001101000111011100000000";
        ram[18] = "0b10111101111000000100100111101101";
        ram[19] = "0b10111110001100100000001001010100";
        ram[20] = "0b10111101101011111000010110101111";
        ram[21] = "0b10111100110111111100010000100000";
        ram[22] = "0b10111100100000001000101001101001";
        ram[23] = "0b10111011001110110001011000010110";
        ram[24] = "0b10111101110000011010101101011001";
        ram[25] = "0b10111110001010111110100011111111";
        ram[26] = "0b10111110000001010010001010100111";
        ram[27] = "0b00111101010111101010011101010101";
        ram[28] = "0b00111101110110100111001100101110";
        ram[29] = "0b10111100100110000111111000010001";
        ram[30] = "0b10111101110100011100001100100110";
        ram[31] = "0b10111101000110010101110100110100";
        ram[32] = "0b00111100101111111100110100001010";
        ram[33] = "0b10111110001110111101100001111011";
        ram[34] = "0b00111100101101000100000001000100";
        ram[35] = "0b10111101111011001110000100111111";
        ram[36] = "0b10111100101011111001111101100000";
        ram[37] = "0b10111100101010101101110110001111";
        ram[38] = "0b00111101100001011110100001110111";
        ram[39] = "0b00111101000100101110010010001111";
        ram[40] = "0b10111110001111011110011100100001";
        ram[41] = "0b00111101111000101101010010010001";
        ram[42] = "0b00111100100110101010000110100010";
        ram[43] = "0b00111100101010011111000100000000";
        ram[44] = "0b10111100011001001010101101111011";
        ram[45] = "0b10111101110100100111000010110000";
        ram[46] = "0b00111101100001110110011000110011";
        ram[47] = "0b10111101011011100111010001101101";
        ram[48] = "0b00111011100101001000111011011000";
        ram[49] = "0b10111101100110001010010011011101";
        ram[50] = "0b00111101111100111110001101011100";
        ram[51] = "0b10111101100011110000101010010101";
        ram[52] = "0b10111100111111110000110010111011";
        ram[53] = "0b10111100110011110010011110000110";
        ram[54] = "0b00111100110110000010110000010001";
        ram[55] = "0b00111100100001110010101000101011";
        ram[56] = "0b10111110001001101010000101100010";
        ram[57] = "0b10111100110111100000101100011000";
        ram[58] = "0b00111101101100010111011000000111";
        ram[59] = "0b10111100000000111111010000001011";
        ram[60] = "0b00111101101100110100000110011110";
        ram[61] = "0b00111101101011010000001101100001";
        ram[62] = "0b00111101010100101001111010111001";
        ram[63] = "0b10111101110010011000111000111001";
        ram[64] = "0b10111101010001111101101011011011";
        ram[65] = "0b10111100111000101000100101100010";
        ram[66] = "0b10111101111011111010101101010100";
        ram[67] = "0b10111011111101011000011111000001";
        ram[68] = "0b10111101100000100101111001111111";
        ram[69] = "0b00111101111110010010001000010000";
        ram[70] = "0b10111100000001011101011011111010";
        ram[71] = "0b10111101110101111101000101111000";
        ram[72] = "0b00111101000111001111110100110001";
        ram[73] = "0b00111011100001101101110010101001";
        ram[74] = "0b10111110001011001001100110101111";
        ram[75] = "0b00111101100101000110010011001111";
        ram[76] = "0b00111100100101010111111001001100";
        ram[77] = "0b00111110001010011001001110010010";
        ram[78] = "0b10111101100100010010001111011111";
        ram[79] = "0b10111101001001001010011110110101";
        ram[80] = "0b00111101011111110000100010100100";
        ram[81] = "0b00111100101101010000001001110110";
        ram[82] = "0b00111101111000111001110001010010";
        ram[83] = "0b00111101010011100001000100100000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_1_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_1) {
meminst = new inference_mult_1_120_120_84_s_W4_1_ram("inference_mult_1_120_120_84_s_W4_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_1() {
    delete meminst;
}


};//endmodule
#endif
