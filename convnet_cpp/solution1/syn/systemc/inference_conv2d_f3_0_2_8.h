// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_8_H__
#define __inference_conv2d_f3_0_2_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_8_ram) {
        ram[0] = "0b10111101110010000000010011011010";
        ram[1] = "0b10111101110011100001000001001001";
        ram[2] = "0b10111101100111001110101000101001";
        ram[3] = "0b10111110000001100100010011011000";
        ram[4] = "0b10111110001101001110101110011010";
        ram[5] = "0b10111110100011111101100000000110";
        ram[6] = "0b00111101101110000000011101000011";
        ram[7] = "0b10111110001010011111001011111110";
        ram[8] = "0b10111110001011011011100010111011";
        ram[9] = "0b00111101110100000101111000011100";
        ram[10] = "0b10111101010010000110111010011001";
        ram[11] = "0b00111110001101000001011001111011";
        ram[12] = "0b00111101010001101111001111011010";
        ram[13] = "0b10111100100011100111010101000011";
        ram[14] = "0b10111100101111101110110010100101";
        ram[15] = "0b00111110000011101010001111011111";
        ram[16] = "0b00111101100001000000101001011110";
        ram[17] = "0b00111100101011110111101011100010";
        ram[18] = "0b10111110000011100101001110101000";
        ram[19] = "0b10111100110000011000100101101101";
        ram[20] = "0b10111110100011110010110111000011";
        ram[21] = "0b10111101001001110011110001001111";
        ram[22] = "0b10111101111011001010000101001001";
        ram[23] = "0b00111110001111111011100101111100";
        ram[24] = "0b10111010000010110001101001110010";
        ram[25] = "0b10111100110110000001101100010100";
        ram[26] = "0b00111101010111010111011000110011";
        ram[27] = "0b10111101110011110111000110101000";
        ram[28] = "0b00111101000001010111000101110100";
        ram[29] = "0b00111100100011101000001110111100";
        ram[30] = "0b00111101011000110001000100101100";
        ram[31] = "0b00111100111000101101000110000110";
        ram[32] = "0b00111110001110110011101101110101";
        ram[33] = "0b10111110001111110011101011011110";
        ram[34] = "0b10111110000001111000011000111100";
        ram[35] = "0b10111101101010010011110110110001";
        ram[36] = "0b00111101001000101100000111001100";
        ram[37] = "0b00111100000101111000100101011111";
        ram[38] = "0b10111101110011110110010110011001";
        ram[39] = "0b00111110001101011100110101001111";
        ram[40] = "0b00111101111011010111000111110011";
        ram[41] = "0b10111100000010110011000000101010";
        ram[42] = "0b00111110001010010010011010000101";
        ram[43] = "0b10111101001010110101010011100011";
        ram[44] = "0b00111110000000100011000101000000";
        ram[45] = "0b10111100110011101011001110001101";
        ram[46] = "0b00111110010001100101110100111010";
        ram[47] = "0b00111101011101001000110100000101";
        ram[48] = "0b00111101001000010010011111101000";
        ram[49] = "0b00111100110000110100010011111001";
        ram[50] = "0b10111110001100010011110000100101";
        ram[51] = "0b00111100000010101111001010101101";
        ram[52] = "0b00111101010011010011111111101111";
        ram[53] = "0b10111101100011110011111011110101";
        ram[54] = "0b00111110000101011111100111011111";
        ram[55] = "0b10111101100011101010101000000010";
        ram[56] = "0b00111110001111011011110011101101";
        ram[57] = "0b00111101100010010001110101100101";
        ram[58] = "0b10111101101001010001001111101011";
        ram[59] = "0b10111110001110011001101000100000";
        ram[60] = "0b10111101110011111011110110101101";
        ram[61] = "0b00111110000111100111001000010001";
        ram[62] = "0b00111101011101110110100100111110";
        ram[63] = "0b10111101010001111000101011011001";
        ram[64] = "0b00111101101101001111110000111001";
        ram[65] = "0b00111100000101010111000101010110";
        ram[66] = "0b00111101100100101111010001110001";
        ram[67] = "0b00111101000110000101101000110100";
        ram[68] = "0b00111101010001001001111110111101";
        ram[69] = "0b10111101010101000101100000010001";
        ram[70] = "0b00111110000111100110011000000010";
        ram[71] = "0b10111101011000011110100100101001";
        ram[72] = "0b10111100001010100101000100001100";
        ram[73] = "0b10111110001001001000100111010010";
        ram[74] = "0b00111101000000111010011010011001";
        ram[75] = "0b10111101010000111101111010110010";
        ram[76] = "0b10111101110010000000101111100000";
        ram[77] = "0b00111110001100100010000011111111";
        ram[78] = "0b10111100000111101010111111011001";
        ram[79] = "0b00111110000101000101101101101100";
        ram[80] = "0b10111010111000011100011111011100";
        ram[81] = "0b00111101100100100000111010100110";
        ram[82] = "0b00111110010110110110100000000110";
        ram[83] = "0b10111101101011101000000010001001";
        ram[84] = "0b10111100011111011001010000010101";
        ram[85] = "0b10111110000001110110110110011000";
        ram[86] = "0b10111100001101110000001001100000";
        ram[87] = "0b00111100110001111011010000101001";
        ram[88] = "0b00111101110011011111001011101101";
        ram[89] = "0b00111101111100001110110100111110";
        ram[90] = "0b10111101010000101001010111110111";
        ram[91] = "0b00111011011001110011001101010101";
        ram[92] = "0b10111101101001111001010011000010";
        ram[93] = "0b10111100100011101010010000001000";
        ram[94] = "0b00111110001010000011100101000111";
        ram[95] = "0b10111101100101001111000101010001";
        ram[96] = "0b10111101011000111100110111010000";
        ram[97] = "0b00111110000011011110010101001011";
        ram[98] = "0b10111101101111110110011100000011";
        ram[99] = "0b10111101110001101000111110001110";
        ram[100] = "0b00111101101001010011100110000011";
        ram[101] = "0b00111100011010101011100001110000";
        ram[102] = "0b10111110001101011000001100011111";
        ram[103] = "0b10111101001010100101011101110010";
        ram[104] = "0b10111101101010010111110111101011";
        ram[105] = "0b00111011110100110000001000000110";
        ram[106] = "0b10111100111110000101111111000011";
        ram[107] = "0b00111101001011001101101000111001";
        ram[108] = "0b00111110001011001101111001011101";
        ram[109] = "0b10111110001001110101011100001100";
        ram[110] = "0b00111101111001111000100101100001";
        ram[111] = "0b00111101001001111110000010111010";
        ram[112] = "0b10111110001000100111010000011001";
        ram[113] = "0b00111110010000001011111010010100";
        ram[114] = "0b10111100010110001001010000010110";
        ram[115] = "0b10111100110000010010110101011100";
        ram[116] = "0b00111110001100000100100110101010";
        ram[117] = "0b00111011011111101010101101000001";
        ram[118] = "0b00111110010000111111100001010101";
        ram[119] = "0b10111110000000000101010000100110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_8) {
meminst = new inference_conv2d_f3_0_2_8_ram("inference_conv2d_f3_0_2_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_8() {
    delete meminst;
}


};//endmodule
#endif
