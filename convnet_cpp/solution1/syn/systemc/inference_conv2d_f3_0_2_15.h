// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_2_15_H__
#define __inference_conv2d_f3_0_2_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_2_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_2_15_ram) {
        ram[0] = "0b10111110000001011110100010010010";
        ram[1] = "0b00111101111001101000101000001101";
        ram[2] = "0b00111101111000101110011101110001";
        ram[3] = "0b00111110000100010001100111001110";
        ram[4] = "0b00111101111001111101111001010001";
        ram[5] = "0b10111100100011101011111101001011";
        ram[6] = "0b10111101100010110010111101100110";
        ram[7] = "0b00111101100100001100111011100010";
        ram[8] = "0b00111101011010011110111001000110";
        ram[9] = "0b00111101000010100011110011101010";
        ram[10] = "0b00111101011111001000101000001111";
        ram[11] = "0b00111101101000101100001011001011";
        ram[12] = "0b10111100111101110100101011110000";
        ram[13] = "0b00111101000101100110010100110010";
        ram[14] = "0b00111101100110110001001011101110";
        ram[15] = "0b00111101100000000001110001000010";
        ram[16] = "0b10111101110100010110010101001101";
        ram[17] = "0b00111101100010000100101110000110";
        ram[18] = "0b00111101110110010110100011010111";
        ram[19] = "0b00111101101101111011011100100110";
        ram[20] = "0b10111101101010110110101000011111";
        ram[21] = "0b00111110010000100100110100001010";
        ram[22] = "0b00111101110110000011001001110110";
        ram[23] = "0b00111101110001010110000011111101";
        ram[24] = "0b10111100000010011010111010100000";
        ram[25] = "0b10111101001101011001000111101000";
        ram[26] = "0b00111101100011101110101000101110";
        ram[27] = "0b00111100100000100001001010010100";
        ram[28] = "0b00111101000110110100000010011000";
        ram[29] = "0b00111110001101011010010010101101";
        ram[30] = "0b00111101001100011000010001010111";
        ram[31] = "0b10111101011110110101010010100000";
        ram[32] = "0b00111100100001010011100000011000";
        ram[33] = "0b10111101000101011101010111110101";
        ram[34] = "0b10111011111011111000101011010010";
        ram[35] = "0b00111101001010111001111100111011";
        ram[36] = "0b10111101101000100000001101010011";
        ram[37] = "0b10111100100001001111000000101010";
        ram[38] = "0b10111101001001110011110111111101";
        ram[39] = "0b10111101010101101100101100011110";
        ram[40] = "0b10111110000110111110110110110111";
        ram[41] = "0b00111101101010001111101011110011";
        ram[42] = "0b10111011001001000010011000111010";
        ram[43] = "0b00111100100011110010100011001000";
        ram[44] = "0b10111100101100101100100111101100";
        ram[45] = "0b00111101100000001110001011001111";
        ram[46] = "0b00111011011001111101110111110101";
        ram[47] = "0b10111110000101001110010000000000";
        ram[48] = "0b00111100101111011011011110000110";
        ram[49] = "0b10111101110011010010100100010011";
        ram[50] = "0b10111101100001111001000010010000";
        ram[51] = "0b10111110010000110101010000111011";
        ram[52] = "0b10111100010011110001001111001111";
        ram[53] = "0b10111101011010011101000001001001";
        ram[54] = "0b00111100011011111101100001101011";
        ram[55] = "0b00111101110110111110100110000101";
        ram[56] = "0b00111101100110000110101011111011";
        ram[57] = "0b10111101100110001110111101101011";
        ram[58] = "0b10111011000001100000111001110111";
        ram[59] = "0b00111101100001110011110000100111";
        ram[60] = "0b10111101110001110110011010000100";
        ram[61] = "0b00111101011111011000111010111100";
        ram[62] = "0b10111101011000100101110000010110";
        ram[63] = "0b10111110000010010110111111101011";
        ram[64] = "0b10111101101010010100011000110000";
        ram[65] = "0b10111101110000101011000000100001";
        ram[66] = "0b00111101101100011010010110000111";
        ram[67] = "0b10111101010010000000111011111000";
        ram[68] = "0b00111100100100101111001010000001";
        ram[69] = "0b10111100010100111101100001011010";
        ram[70] = "0b10111011011000010000110001001010";
        ram[71] = "0b00111100011010100100111001010010";
        ram[72] = "0b10111101010001011101111001001011";
        ram[73] = "0b10111100100110000011110111100100";
        ram[74] = "0b00111110000010111010000001100010";
        ram[75] = "0b10111100111100000100101101010111";
        ram[76] = "0b00111101011110111110101110111001";
        ram[77] = "0b00111100111011101000001011001010";
        ram[78] = "0b00111101010101100001000001000010";
        ram[79] = "0b10111101111010100010110010101010";
        ram[80] = "0b00111110001001111100111000010000";
        ram[81] = "0b10111101111010000000101111101101";
        ram[82] = "0b10111101100100011001000101011000";
        ram[83] = "0b00111100001011110110100101111010";
        ram[84] = "0b10111101110110111110010001000111";
        ram[85] = "0b10111101101111100000100110101110";
        ram[86] = "0b00111100001001001111110101111011";
        ram[87] = "0b10111110001000110100101101010001";
        ram[88] = "0b00111101100001011101101010111011";
        ram[89] = "0b10111110000111000100011101011110";
        ram[90] = "0b10111110000101100110001111000111";
        ram[91] = "0b00111100110001101101001011101101";
        ram[92] = "0b00111110000111001001001001011000";
        ram[93] = "0b00111100110110100100001100001101";
        ram[94] = "0b00111101111110101100011110010111";
        ram[95] = "0b10111101110010111000100101000011";
        ram[96] = "0b10111101001111011001011001100100";
        ram[97] = "0b10111110000111100001110101100101";
        ram[98] = "0b00111100100010011000101001011000";
        ram[99] = "0b10111101000100101110001010010001";
        ram[100] = "0b10111101010101101111101110001111";
        ram[101] = "0b00111101011010101001010010101110";
        ram[102] = "0b00111100010011101111011000000111";
        ram[103] = "0b10111101001010101111011010011110";
        ram[104] = "0b10111101010110111001011001000100";
        ram[105] = "0b10111101011100001111000010011001";
        ram[106] = "0b00111101101111011011000110011001";
        ram[107] = "0b10111101100011101010000010010010";
        ram[108] = "0b00111101110101111111000001100111";
        ram[109] = "0b10111101001000100100100101101100";
        ram[110] = "0b00111110010111100110100000011011";
        ram[111] = "0b00111100111011011101011100111110";
        ram[112] = "0b00111100110010010010011100100110";
        ram[113] = "0b00111101000111001100100110011010";
        ram[114] = "0b10111101111011111010000101011110";
        ram[115] = "0b00111110000111000111100100101101";
        ram[116] = "0b00111010010001110000001110000010";
        ram[117] = "0b10111100110011000101001001010100";
        ram[118] = "0b00111100011010110110110011001011";
        ram[119] = "0b00111011101111011110111111010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_2_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_2_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_2_15) {
meminst = new inference_conv2d_f3_0_2_15_ram("inference_conv2d_f3_0_2_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_2_15() {
    delete meminst;
}


};//endmodule
#endif
