// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_3_13_H__
#define __inference_conv2d_f3_3_3_13_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_3_13_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_3_13_ram) {
        ram[0] = "0b10111101101100000110111101110111";
        ram[1] = "0b00111101100111111000110111011101";
        ram[2] = "0b00111101011011111100110000001011";
        ram[3] = "0b00111101000001001111000100011011";
        ram[4] = "0b00111101110001001011000110000011";
        ram[5] = "0b10111101111110000010101010011001";
        ram[6] = "0b10111101001001000000101110101110";
        ram[7] = "0b00111101011011100101011010001010";
        ram[8] = "0b10111101101000100110101010110110";
        ram[9] = "0b00111011000011011101111101111100";
        ram[10] = "0b10111101100000011001101111010100";
        ram[11] = "0b00111101110000100110111101101110";
        ram[12] = "0b10111011110001111000100111101101";
        ram[13] = "0b10111101001110111101100010001001";
        ram[14] = "0b00111100110101000011110100111001";
        ram[15] = "0b10111101011011011111011101101111";
        ram[16] = "0b00111101110001100111001101001100";
        ram[17] = "0b10111110000001110110111010100100";
        ram[18] = "0b00111100101000110000010110001001";
        ram[19] = "0b10111110001110010010101000110000";
        ram[20] = "0b00111101111001011101101001101010";
        ram[21] = "0b10111101011101011011111001011110";
        ram[22] = "0b10111011011011010011111010110010";
        ram[23] = "0b10111110000010110111011001110001";
        ram[24] = "0b00111101111001110111001001010000";
        ram[25] = "0b10111101100001001000000000011111";
        ram[26] = "0b00111101110011101010111110101011";
        ram[27] = "0b10111101101100001000010100111001";
        ram[28] = "0b00111101110111101000100110101001";
        ram[29] = "0b00111101101011001100010011100010";
        ram[30] = "0b00111101000011011001111100100101";
        ram[31] = "0b10111101010000110010100000100011";
        ram[32] = "0b10111101001011010111111100101010";
        ram[33] = "0b10111110000000101101000100101000";
        ram[34] = "0b10111100100110100111010101100010";
        ram[35] = "0b10111110001000010000011000100101";
        ram[36] = "0b00111101010111000110000001101110";
        ram[37] = "0b10111101011101000010100111101110";
        ram[38] = "0b10111101111000101101000001011111";
        ram[39] = "0b10111110000011010010000010110000";
        ram[40] = "0b10111101000000100000111010110011";
        ram[41] = "0b10111101101011000011001000001000";
        ram[42] = "0b00111101100000100001111011100110";
        ram[43] = "0b00111101110100100011110001000011";
        ram[44] = "0b00111101010111110111000101100101";
        ram[45] = "0b10111011101000100010011100000111";
        ram[46] = "0b10111101101000001001000000100000";
        ram[47] = "0b00111011111101101100011011011100";
        ram[48] = "0b10111110001100010010010100010100";
        ram[49] = "0b10111101101101111011100010000011";
        ram[50] = "0b00111101001111000100000011011110";
        ram[51] = "0b10111101001001010001010101111110";
        ram[52] = "0b10111101010100100011100010110010";
        ram[53] = "0b00111100111100110111101111000011";
        ram[54] = "0b10111100101101111011000100010010";
        ram[55] = "0b00111110000011110000000100110010";
        ram[56] = "0b10111110001101001011100110001000";
        ram[57] = "0b00111101011000000010001100100001";
        ram[58] = "0b00111101001000000001011011110111";
        ram[59] = "0b10111101100101100110110110110000";
        ram[60] = "0b00111110000111010000100110011110";
        ram[61] = "0b00111101110110100111011111100110";
        ram[62] = "0b10111101000000101001110011111110";
        ram[63] = "0b10111100100110011111101001000111";
        ram[64] = "0b00111100111000100100010111011011";
        ram[65] = "0b00111101000011110111000101110010";
        ram[66] = "0b00111101011000011000011110100101";
        ram[67] = "0b00111100010000111110100010001101";
        ram[68] = "0b10111101000010110010111010011101";
        ram[69] = "0b00111101101001111001101110010011";
        ram[70] = "0b00111101010001010001110111111100";
        ram[71] = "0b10111110000110111010000110110010";
        ram[72] = "0b10111101110100110000101111100001";
        ram[73] = "0b10111100101100001011111110111011";
        ram[74] = "0b10111100010101001111011001100111";
        ram[75] = "0b10111110001100010110010111010100";
        ram[76] = "0b00111100101010100110100010111111";
        ram[77] = "0b00111101101101011111001001100000";
        ram[78] = "0b10111101001100110000110111111010";
        ram[79] = "0b00111100110010100110101011110011";
        ram[80] = "0b10111101001111100001111110100110";
        ram[81] = "0b10111100101100010101110110100110";
        ram[82] = "0b00111100011111100001110011010001";
        ram[83] = "0b00111101000000010101111001010100";
        ram[84] = "0b00111101111010001001010011000100";
        ram[85] = "0b00111101000101101111100011110000";
        ram[86] = "0b10111101110100101101111101010000";
        ram[87] = "0b10111101001101011111111010001010";
        ram[88] = "0b00111011111000110000011010110101";
        ram[89] = "0b00111101000010011110000000011110";
        ram[90] = "0b10111110000000010010101000001111";
        ram[91] = "0b10111110010010111011100011000011";
        ram[92] = "0b10111101101101100010011111001101";
        ram[93] = "0b10111101101000000110110100001101";
        ram[94] = "0b00111101001010000100011101111101";
        ram[95] = "0b10111101011000011011000000000011";
        ram[96] = "0b10111110001101111010010101101110";
        ram[97] = "0b00111101011110111110110110110111";
        ram[98] = "0b10111100111000000110111101000001";
        ram[99] = "0b00111110000100110100110010100001";
        ram[100] = "0b00111101000010100111101001000010";
        ram[101] = "0b10111101001110000001110101111110";
        ram[102] = "0b00111101010100010100110101100101";
        ram[103] = "0b00111101100110011001010111111011";
        ram[104] = "0b10111101101001011010100000110000";
        ram[105] = "0b10111110000011011011100011111110";
        ram[106] = "0b00111101011101001000011111000111";
        ram[107] = "0b00111100111110100000000110111001";
        ram[108] = "0b10111100110110110110011010001110";
        ram[109] = "0b10111101001110110100111110110010";
        ram[110] = "0b10111101100101011001011101110111";
        ram[111] = "0b10111011000010111110111100001100";
        ram[112] = "0b00111110000001011000111010101000";
        ram[113] = "0b10111101101000110111001010001001";
        ram[114] = "0b10111110010001111110101011100110";
        ram[115] = "0b00111101111011100111001001010100";
        ram[116] = "0b10111100011111010001011100010111";
        ram[117] = "0b00111110000010011000101100101111";
        ram[118] = "0b10111101000001101001010001101111";
        ram[119] = "0b10111101100001100110010111111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_3_13) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_3_13_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_3_13) {
meminst = new inference_conv2d_f3_3_3_13_ram("inference_conv2d_f3_3_3_13_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_3_13() {
    delete meminst;
}


};//endmodule
#endif
