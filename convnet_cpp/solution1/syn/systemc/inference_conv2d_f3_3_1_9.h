// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_1_9_H__
#define __inference_conv2d_f3_3_1_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_1_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_1_9_ram) {
        ram[0] = "0b10111101001100001110100101110111";
        ram[1] = "0b00111110001011000101100101110101";
        ram[2] = "0b00111100100110111010001110010101";
        ram[3] = "0b00111101110011000100010111110100";
        ram[4] = "0b00111110000111111000111110001010";
        ram[5] = "0b10111101101100101011111010001100";
        ram[6] = "0b00111011100111110000111101111010";
        ram[7] = "0b10111101000011101110010110101100";
        ram[8] = "0b10111101100110110011000011101011";
        ram[9] = "0b00111101111100010010011001100011";
        ram[10] = "0b00111110001111111111111000101010";
        ram[11] = "0b00111101001110001110000100101000";
        ram[12] = "0b10111100111001001011111101101000";
        ram[13] = "0b00111101011110011000111100000010";
        ram[14] = "0b00111110010011111010100100111011";
        ram[15] = "0b10111110001010011111111101010000";
        ram[16] = "0b00111110001101111101011100111101";
        ram[17] = "0b10111100110010100001110110010000";
        ram[18] = "0b10111110010000011111101001110110";
        ram[19] = "0b00111101110010001000100101110001";
        ram[20] = "0b00111101110000100011101100000001";
        ram[21] = "0b00111101110010011001010110000011";
        ram[22] = "0b00111100101100110101011000000011";
        ram[23] = "0b00111101111010101111011100001010";
        ram[24] = "0b10111101110011001000100100010000";
        ram[25] = "0b00111101110110111111110101110010";
        ram[26] = "0b00111101001110000011110010100010";
        ram[27] = "0b00111101001100111001011010110110";
        ram[28] = "0b00111101111010011001100111011101";
        ram[29] = "0b10111101100111110001011101010010";
        ram[30] = "0b00111101111000010100101011010011";
        ram[31] = "0b00111101101100101011010100110111";
        ram[32] = "0b00111101101111010000011011110010";
        ram[33] = "0b00111110010101000001011100000001";
        ram[34] = "0b10111101111111101000000010111111";
        ram[35] = "0b10111011000001001101100011000010";
        ram[36] = "0b10111101111000011010110111101011";
        ram[37] = "0b10111101111000000101011010000010";
        ram[38] = "0b10111100100110001100101101110011";
        ram[39] = "0b00111100101011110110000101001100";
        ram[40] = "0b00111100100010001011010010100101";
        ram[41] = "0b10111100011101010100001010100010";
        ram[42] = "0b00111101001111000010000001110111";
        ram[43] = "0b10111110000111000001111111001001";
        ram[44] = "0b00111110000110111111111011000001";
        ram[45] = "0b00111100100001011111110111011011";
        ram[46] = "0b00111101100111111101001000101101";
        ram[47] = "0b10111101011001111101101100101011";
        ram[48] = "0b00111100001010100111010010110011";
        ram[49] = "0b00111101110100111010010011111000";
        ram[50] = "0b10111101011001111000000010010010";
        ram[51] = "0b10111011110010001011110110110100";
        ram[52] = "0b10111100010101001111110010110010";
        ram[53] = "0b00111101101001001110111010110010";
        ram[54] = "0b00111100010110111011110100101011";
        ram[55] = "0b00111110011001100110000101101011";
        ram[56] = "0b10111101100110101001111000111001";
        ram[57] = "0b10111101001110000100111110011101";
        ram[58] = "0b00111100100001010010000111011110";
        ram[59] = "0b00111011100100010101000111110111";
        ram[60] = "0b00111110000101111110000001101001";
        ram[61] = "0b00111110000011010011010010011100";
        ram[62] = "0b10111101011010010011011101001100";
        ram[63] = "0b00111101000110111100000011110001";
        ram[64] = "0b10111101010111000101111001010101";
        ram[65] = "0b00111101100111000001001101011100";
        ram[66] = "0b10111101100000100000111011011011";
        ram[67] = "0b10111101111000001001011001111000";
        ram[68] = "0b10111110001111001000111111111100";
        ram[69] = "0b10111100111011111011011111101001";
        ram[70] = "0b10111110000101110101111100101101";
        ram[71] = "0b10111100110100111000110110110001";
        ram[72] = "0b10111101010110011010011001001010";
        ram[73] = "0b10111101010010000111001110100010";
        ram[74] = "0b00111101100000010000001000110110";
        ram[75] = "0b00111100101001100101101101111111";
        ram[76] = "0b10111011101110101001101010110001";
        ram[77] = "0b10111101000100011010110001100101";
        ram[78] = "0b00111101100010100100100100111101";
        ram[79] = "0b10111101111010010101011000111011";
        ram[80] = "0b10111011111110001001111010100010";
        ram[81] = "0b10111100110101110010101001010100";
        ram[82] = "0b10111101000110110010110100110010";
        ram[83] = "0b10111101110111001010000110001100";
        ram[84] = "0b00111101110101111010110000111111";
        ram[85] = "0b10111101000100110111100111111011";
        ram[86] = "0b00111101001100010101110100111010";
        ram[87] = "0b00111101010111001101001110010000";
        ram[88] = "0b10111100111001010011010100001110";
        ram[89] = "0b10111110001011011101101111011011";
        ram[90] = "0b00111110000000100100111101100110";
        ram[91] = "0b10111101110100101000111110011111";
        ram[92] = "0b10111101000010001110100110110100";
        ram[93] = "0b10111101101001111101100010001100";
        ram[94] = "0b00111101101111110001110101110101";
        ram[95] = "0b10111110010010010011010011110000";
        ram[96] = "0b00111100111000000100011111010100";
        ram[97] = "0b10111101101001001001111001000101";
        ram[98] = "0b00111101111110001000110110110000";
        ram[99] = "0b00111100111101000011111100000010";
        ram[100] = "0b00111100100000110010111011110100";
        ram[101] = "0b00111101000101101001101010010001";
        ram[102] = "0b00111100101101101110011101010011";
        ram[103] = "0b10111101001001101100111000000000";
        ram[104] = "0b00111101100011001100101100010010";
        ram[105] = "0b10111101101100101010010011110110";
        ram[106] = "0b10111110001011010001000000101100";
        ram[107] = "0b10111101111010000000000011101011";
        ram[108] = "0b00111101000011000101111100000100";
        ram[109] = "0b00111101100010110001000011111101";
        ram[110] = "0b10111100000111010010000101100011";
        ram[111] = "0b10111110000000001100100000000100";
        ram[112] = "0b00111110001101111011011110000100";
        ram[113] = "0b10111101100001110100101101000000";
        ram[114] = "0b10111101110101000101000101110110";
        ram[115] = "0b00111100100110101000011110100000";
        ram[116] = "0b00111101011001101111101011000110";
        ram[117] = "0b00111100100011100001000100111011";
        ram[118] = "0b10111101100011110111110001001101";
        ram[119] = "0b10111100100001001111010110011110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_1_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_1_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_1_9) {
meminst = new inference_conv2d_f3_3_1_9_ram("inference_conv2d_f3_3_1_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_1_9() {
    delete meminst;
}


};//endmodule
#endif
