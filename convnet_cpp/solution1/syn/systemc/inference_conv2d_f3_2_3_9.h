// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_2_3_9_H__
#define __inference_conv2d_f3_2_3_9_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_2_3_9_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_2_3_9_ram) {
        ram[0] = "0b10111101111100101110110011110010";
        ram[1] = "0b00111101110011011101100100111100";
        ram[2] = "0b10111101101001001101000010011010";
        ram[3] = "0b00111101011001110011000101001101";
        ram[4] = "0b00111101011111101111010010011101";
        ram[5] = "0b10111101011010000000101001000000";
        ram[6] = "0b00111011110111000010111000101001";
        ram[7] = "0b00111101111111010000011010111100";
        ram[8] = "0b00111101101100100101110111000011";
        ram[9] = "0b10111101100001101011011011111100";
        ram[10] = "0b10111101101010000001101111111001";
        ram[11] = "0b10111101101001111100111011110100";
        ram[12] = "0b00111110000110010001100111110000";
        ram[13] = "0b00111101001101101010100101110101";
        ram[14] = "0b10111110100001110011110001110001";
        ram[15] = "0b10111110010011001111100001010001";
        ram[16] = "0b00111101111100100001111001100000";
        ram[17] = "0b00111101000110011110000010010111";
        ram[18] = "0b00111101100000100011111001000001";
        ram[19] = "0b10111110010000000101100101100100";
        ram[20] = "0b10111100101010001001000101001110";
        ram[21] = "0b00111101100101110100001011011101";
        ram[22] = "0b00111100110100001011110001000110";
        ram[23] = "0b10111100101100101110101111100110";
        ram[24] = "0b10111101100111111110110011011101";
        ram[25] = "0b00111010100111111111111010001110";
        ram[26] = "0b10111101101110000001011000110100";
        ram[27] = "0b00111110000110100100000111100101";
        ram[28] = "0b10111101100001010101010001110110";
        ram[29] = "0b00111101101000110001101010110111";
        ram[30] = "0b10111110001000011111001011011100";
        ram[31] = "0b10111101100010011100100000000000";
        ram[32] = "0b10111100101001001001100001100110";
        ram[33] = "0b00111100010000001000101100001011";
        ram[34] = "0b10111101110000001101111111010010";
        ram[35] = "0b10111101101010110101000000101011";
        ram[36] = "0b00111110001001101010001100111000";
        ram[37] = "0b10111101011111110010000001010111";
        ram[38] = "0b10111101101011001010011111111111";
        ram[39] = "0b00111110001100011100011011010010";
        ram[40] = "0b00111101101111110111100101001111";
        ram[41] = "0b10111011011010001001100001011010";
        ram[42] = "0b10111101110111001111011001111011";
        ram[43] = "0b10111010001010001000110101110101";
        ram[44] = "0b00111110000001011110110110001101";
        ram[45] = "0b00111101100000010010101111110010";
        ram[46] = "0b10111101100000001011111111110001";
        ram[47] = "0b10111101111101110001100001100101";
        ram[48] = "0b00111110000100011111100111110000";
        ram[49] = "0b10111101101110111000100111110010";
        ram[50] = "0b10111110001101011000001110100101";
        ram[51] = "0b00111101010000101101000001111010";
        ram[52] = "0b10111101110111001010110010001110";
        ram[53] = "0b00111101000100010111010010011101";
        ram[54] = "0b00111101001000010001000111001000";
        ram[55] = "0b10111101010000010101000100111001";
        ram[56] = "0b10111101110101110010011010001101";
        ram[57] = "0b10111101100000010111001101001101";
        ram[58] = "0b00111101110011111100011100011101";
        ram[59] = "0b10111011100010110111010010010011";
        ram[60] = "0b00111101000010000111101000111101";
        ram[61] = "0b10111110001001010110000101001110";
        ram[62] = "0b00111101101000011110101010010100";
        ram[63] = "0b00111011100110110100111001010000";
        ram[64] = "0b10111100110001000011000001111100";
        ram[65] = "0b00111110001001101001001100111010";
        ram[66] = "0b00111101001010110011100100110100";
        ram[67] = "0b00111101010100100010111101011101";
        ram[68] = "0b00111101101110011100001000111011";
        ram[69] = "0b00111101100111111010000100101000";
        ram[70] = "0b00111100100011111010100010110101";
        ram[71] = "0b10111101001111001000100110001001";
        ram[72] = "0b00111101100011000101101011010010";
        ram[73] = "0b00111101101011101000110110110010";
        ram[74] = "0b00111101101010000101100101101011";
        ram[75] = "0b10111101101001000110111011100000";
        ram[76] = "0b00111100110000011001100010111100";
        ram[77] = "0b10111101000110001001110110000110";
        ram[78] = "0b10111110000000001011100111011100";
        ram[79] = "0b00111110001110110111000101110110";
        ram[80] = "0b10111101100000110101001010011011";
        ram[81] = "0b10111101110100010111100010110011";
        ram[82] = "0b00111101100000111010000000110011";
        ram[83] = "0b10111101111110100001011001100001";
        ram[84] = "0b00111110010111011101001100110101";
        ram[85] = "0b00111101101100000111101110111011";
        ram[86] = "0b00111101111010101110100011100010";
        ram[87] = "0b10111101001000010100010111100110";
        ram[88] = "0b10111101000010101000001000011111";
        ram[89] = "0b00111110001010000100010011010000";
        ram[90] = "0b00111101101000101010110100100100";
        ram[91] = "0b00111100100100001010101101111111";
        ram[92] = "0b00111110011000010101001010110001";
        ram[93] = "0b10111101110011001100001011111111";
        ram[94] = "0b10111110010010100001011111110100";
        ram[95] = "0b00111110001010011001001011001001";
        ram[96] = "0b00111101101001010011101100110000";
        ram[97] = "0b00111101011010000111101100010100";
        ram[98] = "0b00111101100010111010110001111110";
        ram[99] = "0b00111110000011011011001000101101";
        ram[100] = "0b10111100011001000110000100111110";
        ram[101] = "0b00111101000101010101001111101111";
        ram[102] = "0b00111110001010111101110111111101";
        ram[103] = "0b10111110001000001000010010100101";
        ram[104] = "0b00111101001111110001101101001110";
        ram[105] = "0b00111101011000110111100011100001";
        ram[106] = "0b10111100001110101110110001100101";
        ram[107] = "0b00111101011110000001110011111000";
        ram[108] = "0b10111100000100101011110110011101";
        ram[109] = "0b00111110010101001100111010000001";
        ram[110] = "0b10111100100001110010011111011101";
        ram[111] = "0b10111101110010001001010111111001";
        ram[112] = "0b00111101010011001001010011001110";
        ram[113] = "0b10111100010000010011100110000110";
        ram[114] = "0b00111101100011001011111111100111";
        ram[115] = "0b10111101001001101011110001000111";
        ram[116] = "0b10111101010111011111010111101010";
        ram[117] = "0b00111101101100110011001100110011";
        ram[118] = "0b00111110001110100010110001100111";
        ram[119] = "0b10111101101110110111011001100011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_2_3_9) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_2_3_9_ram* meminst;


SC_CTOR(inference_conv2d_f3_2_3_9) {
meminst = new inference_conv2d_f3_2_3_9_ram("inference_conv2d_f3_2_3_9_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_2_3_9() {
    delete meminst;
}


};//endmodule
#endif
