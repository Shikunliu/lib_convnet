// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_106_H__
#define __inference_mult_1_120_120_84_s_W4_106_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_106_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_106_ram) {
        ram[0] = "0b10111101101011111000000101111101";
        ram[1] = "0b10111011100101110111110000011110";
        ram[2] = "0b10111101001001101010100110011101";
        ram[3] = "0b00111110001010100111111010110111";
        ram[4] = "0b00111110010000100101011110000110";
        ram[5] = "0b00111100011100101011000101100011";
        ram[6] = "0b00111100100101011111100110011100";
        ram[7] = "0b10111011010001100111110000100110";
        ram[8] = "0b10111101110100010000101100100000";
        ram[9] = "0b00111100010000110011111110000101";
        ram[10] = "0b10111110001110111000011100111000";
        ram[11] = "0b10111101100110011001101011001110";
        ram[12] = "0b10111101110001010001010111011100";
        ram[13] = "0b10111100011000010000111101111010";
        ram[14] = "0b00111101011000011010111110110011";
        ram[15] = "0b10111101101100011110101101111000";
        ram[16] = "0b10111101011101010001111001110101";
        ram[17] = "0b10111110000000010110011011100000";
        ram[18] = "0b00111101111001110110111000011110";
        ram[19] = "0b00111110001010010110001000000111";
        ram[20] = "0b10111110001100111100011011001001";
        ram[21] = "0b00111101001001010001001000111110";
        ram[22] = "0b10111110000000011010111000101110";
        ram[23] = "0b00111101011001111010011111001010";
        ram[24] = "0b10111110000000110011111110000101";
        ram[25] = "0b00111100101110100110011100111010";
        ram[26] = "0b10111101010000010101001100000001";
        ram[27] = "0b10111100111001001010110111001010";
        ram[28] = "0b10111101100111100011011011101101";
        ram[29] = "0b10111101011011011010110001011011";
        ram[30] = "0b00111101010000110100000000001100";
        ram[31] = "0b10111101011101101100100001100100";
        ram[32] = "0b10111101011101011010111100001110";
        ram[33] = "0b10111100100011111001001101010001";
        ram[34] = "0b00111110001001001111111000110111";
        ram[35] = "0b10111101001000111011000000100011";
        ram[36] = "0b10111110000000001100100101010100";
        ram[37] = "0b00111011111110001110110111010011";
        ram[38] = "0b10111101111001010111010010110100";
        ram[39] = "0b10111100100110101010111000110111";
        ram[40] = "0b00111100010111100001011100001101";
        ram[41] = "0b10111100111100100110010110101110";
        ram[42] = "0b00111100001001101001101000110011";
        ram[43] = "0b00111101101001110001110001111100";
        ram[44] = "0b00111100011110110010100100000001";
        ram[45] = "0b00111101100111111011100011110101";
        ram[46] = "0b00111110010001111101000000101001";
        ram[47] = "0b10111101101001000101110111001000";
        ram[48] = "0b10111101100110101000010011100111";
        ram[49] = "0b10111110000001011001110111011100";
        ram[50] = "0b10111101000011001001111110011011";
        ram[51] = "0b10111100101100011001011001000101";
        ram[52] = "0b00111101110101011001110011010000";
        ram[53] = "0b00111110001111100110011001000101";
        ram[54] = "0b00111100011110111011111110010100";
        ram[55] = "0b00111101010111110101110010100010";
        ram[56] = "0b10111101100011100011001100100111";
        ram[57] = "0b10111100111000111110111000011100";
        ram[58] = "0b10111101110010110110010001011010";
        ram[59] = "0b00111101000111001011101011010001";
        ram[60] = "0b00111100111100010101101000010101";
        ram[61] = "0b10111101011110001001000110010010";
        ram[62] = "0b00111110000011110101010101011000";
        ram[63] = "0b10111101111110000000111101010110";
        ram[64] = "0b00111100110110010100100001110001";
        ram[65] = "0b10111101110001010110101110000111";
        ram[66] = "0b00111100101100001110001110011000";
        ram[67] = "0b10111100100010000011010100100011";
        ram[68] = "0b00111110000000001010110111001101";
        ram[69] = "0b00111110000110001110110111100101";
        ram[70] = "0b10111110000100001110101110101011";
        ram[71] = "0b10111100110110010001001010001011";
        ram[72] = "0b00111101101001111100000011110100";
        ram[73] = "0b10111101101001101101111101101000";
        ram[74] = "0b00111101010110001110001011110000";
        ram[75] = "0b00111101100110000010000010110000";
        ram[76] = "0b00111101101000100111111100001110";
        ram[77] = "0b10111101101010111111010111011000";
        ram[78] = "0b00111101111011001100100010011011";
        ram[79] = "0b00111101000111100110110110101001";
        ram[80] = "0b10111101110010101100011011000000";
        ram[81] = "0b00111101101000111001011100010100";
        ram[82] = "0b10111100110111000010111101000000";
        ram[83] = "0b00111100100101001110010101101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_106) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_106_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_106) {
meminst = new inference_mult_1_120_120_84_s_W4_106_ram("inference_mult_1_120_120_84_s_W4_106_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_106() {
    delete meminst;
}


};//endmodule
#endif
