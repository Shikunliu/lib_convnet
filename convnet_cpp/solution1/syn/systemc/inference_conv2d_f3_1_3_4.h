// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_4_H__
#define __inference_conv2d_f3_1_3_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_4_ram) {
        ram[0] = "0b00111100111111101101100000011000";
        ram[1] = "0b10111101011011001100001111100011";
        ram[2] = "0b10111110000110011010111001001111";
        ram[3] = "0b10111101111001100000111111100100";
        ram[4] = "0b00111101111011110000111100010111";
        ram[5] = "0b00111100001111101000010111100010";
        ram[6] = "0b00111110001010101001001010100011";
        ram[7] = "0b10111101010000011101010001001011";
        ram[8] = "0b10111100000100000000101111110001";
        ram[9] = "0b10111110001111101011101101110111";
        ram[10] = "0b00111110001110000111010011001001";
        ram[11] = "0b00111101110010100000000011001000";
        ram[12] = "0b00111101011011001000000100110011";
        ram[13] = "0b00111101110100001000100110100000";
        ram[14] = "0b10111101010111101101110001111111";
        ram[15] = "0b10111101100110100011011001001111";
        ram[16] = "0b10111100001010001100011110011111";
        ram[17] = "0b10111101101110101001011100011000";
        ram[18] = "0b00111101111001000111001000111011";
        ram[19] = "0b10111101010101011100110101110111";
        ram[20] = "0b10111101100110100000011000100001";
        ram[21] = "0b00111100000010100011000111010010";
        ram[22] = "0b00111110000100111100110010001110";
        ram[23] = "0b00111101111110110010110101001101";
        ram[24] = "0b10111101100010101101000111011110";
        ram[25] = "0b10111101100001110100101000011001";
        ram[26] = "0b00111100100000001010100010011100";
        ram[27] = "0b00111100111010010001110010001111";
        ram[28] = "0b10111101111010010000010001110001";
        ram[29] = "0b00111100010000111001110111100101";
        ram[30] = "0b10111100101011110010000001111111";
        ram[31] = "0b00111101100011101000001110101110";
        ram[32] = "0b00111101010100110010010010100000";
        ram[33] = "0b00111101110011101101111001010101";
        ram[34] = "0b10111101011100110100001110001111";
        ram[35] = "0b10111101110100000110111011100011";
        ram[36] = "0b00111100100110011001000101101100";
        ram[37] = "0b10111101100000000110001011101111";
        ram[38] = "0b10111110001010100101111011111111";
        ram[39] = "0b00111101110111110100111111010111";
        ram[40] = "0b00111100010001000101000111010100";
        ram[41] = "0b10111101001101111001001111010000";
        ram[42] = "0b10111101100100000100000100101011";
        ram[43] = "0b00111101001011000111011000010101";
        ram[44] = "0b10111010011010100110101101111111";
        ram[45] = "0b00111101101100111001000001010000";
        ram[46] = "0b10111101111110100000010110011010";
        ram[47] = "0b10111101011100000110110110100001";
        ram[48] = "0b00111101101011111010110011100110";
        ram[49] = "0b10111101100011111100101101110111";
        ram[50] = "0b10111011010011001110001000011011";
        ram[51] = "0b00111100101111100101101000001110";
        ram[52] = "0b10111101110111111010110100101010";
        ram[53] = "0b00111101100100110010011111111011";
        ram[54] = "0b10111101110001000100110011100110";
        ram[55] = "0b10111101100010011101000101001000";
        ram[56] = "0b00111100110001111110001101011001";
        ram[57] = "0b10111101001010101010001101110111";
        ram[58] = "0b10111101010011100111011001101011";
        ram[59] = "0b10111101001110100110001111011111";
        ram[60] = "0b00111101101010101001010001101011";
        ram[61] = "0b10111101000111011111100001101110";
        ram[62] = "0b10111110000101111011010101101100";
        ram[63] = "0b00111100011010110111011001110001";
        ram[64] = "0b10111101000111110110001110001101";
        ram[65] = "0b00111100100111010111111111011000";
        ram[66] = "0b10111100110001110101011110101101";
        ram[67] = "0b00111100010100100111100000000111";
        ram[68] = "0b10111101100000001001001111001100";
        ram[69] = "0b00111101011111011010100000011100";
        ram[70] = "0b10111101111001000011101100101110";
        ram[71] = "0b10111101010110000001011110000100";
        ram[72] = "0b10111101110101000100100100010011";
        ram[73] = "0b00111101010101111100110100010001";
        ram[74] = "0b00111101001001110010101100011101";
        ram[75] = "0b10111101011010111111100110111001";
        ram[76] = "0b00111101110110011101011101110111";
        ram[77] = "0b00111100011101000010111100010001";
        ram[78] = "0b00111100100010101000001101111100";
        ram[79] = "0b00111101000110110001011001010111";
        ram[80] = "0b00111101110110000100100100000010";
        ram[81] = "0b10111100001110111000010100010001";
        ram[82] = "0b00111101011111010110001111110100";
        ram[83] = "0b00111100101100110011000011100101";
        ram[84] = "0b10111101101011111011000010111010";
        ram[85] = "0b10111100101000110110011101000011";
        ram[86] = "0b00111110000001011100110100001100";
        ram[87] = "0b00111101000010101011110010000111";
        ram[88] = "0b00111110000110110000010000100101";
        ram[89] = "0b00111110001100010101001010110001";
        ram[90] = "0b10111101101101110010110101000011";
        ram[91] = "0b10111100100100101001100100101010";
        ram[92] = "0b10111110001010001001100101111100";
        ram[93] = "0b00111110000111100101000011000110";
        ram[94] = "0b00111101111000101001100011001100";
        ram[95] = "0b10111101111110101110110001001010";
        ram[96] = "0b10111101000100100111100010101001";
        ram[97] = "0b10111101101110101010111101111001";
        ram[98] = "0b10111101101101001111000101010001";
        ram[99] = "0b00111110000100100101011100000000";
        ram[100] = "0b10111101100111011000010011101110";
        ram[101] = "0b00111101110000100111101111110110";
        ram[102] = "0b00111110000101100100110010110110";
        ram[103] = "0b00111100111110110010011110111111";
        ram[104] = "0b00111110001110000011100000111011";
        ram[105] = "0b00111101100101100110100100100000";
        ram[106] = "0b10111100011111010110000001111110";
        ram[107] = "0b00111101111110010001110001001100";
        ram[108] = "0b00111101110001011001111111001101";
        ram[109] = "0b10111101111101000100101100101011";
        ram[110] = "0b00111100110000100000110000010100";
        ram[111] = "0b00111101010110001111101101011111";
        ram[112] = "0b00111100100000110000101010101100";
        ram[113] = "0b00111100110101110011001010110111";
        ram[114] = "0b10111110010001011101100101011110";
        ram[115] = "0b00111010100101100001101010001001";
        ram[116] = "0b00111101010010010001011000001110";
        ram[117] = "0b00111011110111010110010000110100";
        ram[118] = "0b00111101101101111011011011100011";
        ram[119] = "0b00111101101111101100011011001010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_4) {
meminst = new inference_conv2d_f3_1_3_4_ram("inference_conv2d_f3_1_3_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_4() {
    delete meminst;
}


};//endmodule
#endif
