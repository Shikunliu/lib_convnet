// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_8_H__
#define __inference_conv2d_f3_4_3_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_8_ram) {
        ram[0] = "0b10111101101000010110001110101101";
        ram[1] = "0b00111101101100111011110011101110";
        ram[2] = "0b10111101100100101010111110000000";
        ram[3] = "0b00111101000010011010000100011001";
        ram[4] = "0b10111101111001111100001110010011";
        ram[5] = "0b10111101111001011111101011101100";
        ram[6] = "0b00111101010110100010000110011010";
        ram[7] = "0b00111110001001111101100101010101";
        ram[8] = "0b10111101110011000101100010111001";
        ram[9] = "0b10111101111010010110110111010010";
        ram[10] = "0b00111101111011001101010110110111";
        ram[11] = "0b00111101100010101100110111111100";
        ram[12] = "0b10111101011101110101011011111111";
        ram[13] = "0b10111100010110110111000101000000";
        ram[14] = "0b10111101100010001111100110111111";
        ram[15] = "0b10111110001010110010011110001001";
        ram[16] = "0b00111101010010001110101001010101";
        ram[17] = "0b10111101011111111010010001000000";
        ram[18] = "0b10111100001110101101010101010100";
        ram[19] = "0b10111101101111101101101011011111";
        ram[20] = "0b00111101000101000100000100011010";
        ram[21] = "0b10111110010001010100111011110100";
        ram[22] = "0b10111110001101111111111111011110";
        ram[23] = "0b00111101000001101101101001011111";
        ram[24] = "0b00111101001000101001001101110011";
        ram[25] = "0b10111110010010001100100010101100";
        ram[26] = "0b00111110010111110001110111000101";
        ram[27] = "0b00111101100011011010110100111111";
        ram[28] = "0b00111101110100110000101001001110";
        ram[29] = "0b10111101111100110111000000000100";
        ram[30] = "0b00111101101100000100001010111110";
        ram[31] = "0b00111100010001101001011001010010";
        ram[32] = "0b00111100111100010001100001110001";
        ram[33] = "0b10111101110111000111000101010000";
        ram[34] = "0b00111101100111010101100111001000";
        ram[35] = "0b10111101100110111101100110010101";
        ram[36] = "0b10111101000011101010110100100111";
        ram[37] = "0b10111100000001011001100010000110";
        ram[38] = "0b10111110000100000001100011100111";
        ram[39] = "0b00111110010110000001111110010111";
        ram[40] = "0b10111011001011010110100010101110";
        ram[41] = "0b10111011111000100101011000100001";
        ram[42] = "0b10111100010001011011101011110101";
        ram[43] = "0b10111100110110000010111010010101";
        ram[44] = "0b00111110001101101010111000111010";
        ram[45] = "0b10111011110111100011000100100011";
        ram[46] = "0b10111101110010110001001100111111";
        ram[47] = "0b00111110001100010001111010000110";
        ram[48] = "0b00111101110011001011010010111100";
        ram[49] = "0b10111100101100110000000101111111";
        ram[50] = "0b00111100110001110100001100100000";
        ram[51] = "0b00111101001101000101000010000100";
        ram[52] = "0b00111101000111000101000010011001";
        ram[53] = "0b10111101001100011000010110110100";
        ram[54] = "0b10111110000001010101110110100010";
        ram[55] = "0b10111110001000001011011001110100";
        ram[56] = "0b00111100111011000111111100011010";
        ram[57] = "0b00111101000110001101111000111000";
        ram[58] = "0b10111101000011100011110000111001";
        ram[59] = "0b00111101111101011001110011010000";
        ram[60] = "0b00111100001011100101110101110110";
        ram[61] = "0b00111101111000110000110100110000";
        ram[62] = "0b10111101111100000000001101101000";
        ram[63] = "0b00111100100111100000010101101111";
        ram[64] = "0b00111100111110100001010110100110";
        ram[65] = "0b00111100001011100000001001110010";
        ram[66] = "0b00111101110010100001111100001000";
        ram[67] = "0b00111101100001001010001111101111";
        ram[68] = "0b00111101101100101101001000001101";
        ram[69] = "0b00111101100010110010001000111101";
        ram[70] = "0b10111101110011001010101110001111";
        ram[71] = "0b10111100101010001101110110100101";
        ram[72] = "0b10111100011001110100000000010110";
        ram[73] = "0b10111101101100111001100001100011";
        ram[74] = "0b10111110010001110000001001100000";
        ram[75] = "0b10111100101001111111010000111011";
        ram[76] = "0b00111101101000100100100110100001";
        ram[77] = "0b00111101110000110111111111110101";
        ram[78] = "0b00111101010000001000100111001000";
        ram[79] = "0b10111101100101000110110011101111";
        ram[80] = "0b10111101101011111010111110101110";
        ram[81] = "0b00111110000101011110010011100111";
        ram[82] = "0b00111101011100100100110011101111";
        ram[83] = "0b00111101100110011110000000000011";
        ram[84] = "0b10111100011011011011010111100110";
        ram[85] = "0b00111110001010010000001100100001";
        ram[86] = "0b00111110001101100101101100100001";
        ram[87] = "0b00111101000010001110010100010110";
        ram[88] = "0b10111101011100000000110110010100";
        ram[89] = "0b00111101110110010111110000111101";
        ram[90] = "0b10111110001110110110001110010001";
        ram[91] = "0b00111101100101000011100010001111";
        ram[92] = "0b00111101100001101101110010111011";
        ram[93] = "0b00111101100000011000111101110100";
        ram[94] = "0b10111110001101000101110010111100";
        ram[95] = "0b10111101111100010011110001101000";
        ram[96] = "0b00111101001011000111001111111100";
        ram[97] = "0b00111110001010010100110100001110";
        ram[98] = "0b10111101001011101101000110100101";
        ram[99] = "0b10111101001100010110010111010100";
        ram[100] = "0b10111101100010010000110110000011";
        ram[101] = "0b00111101110100110110110101100101";
        ram[102] = "0b00111101100000000010010010001011";
        ram[103] = "0b00111101011101000101111001011100";
        ram[104] = "0b00111011010000011000111000101010";
        ram[105] = "0b00111011111100111110101110100000";
        ram[106] = "0b00111101101100111011100001010001";
        ram[107] = "0b00111101100011001001001010110101";
        ram[108] = "0b10111110001000010011111011000100";
        ram[109] = "0b00111101100101010101100111011100";
        ram[110] = "0b00111101010000000111000111111011";
        ram[111] = "0b00111101000000111001101101111011";
        ram[112] = "0b00111101111001001101100001110111";
        ram[113] = "0b10111101111001010011101100001000";
        ram[114] = "0b00111101111101100111111001000001";
        ram[115] = "0b10111101000110111010000101100001";
        ram[116] = "0b00111101000010000010111111100101";
        ram[117] = "0b10111110001001000111111111011100";
        ram[118] = "0b00111101000111101001000110111011";
        ram[119] = "0b00111101100010110110011111111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_8) {
meminst = new inference_conv2d_f3_4_3_8_ram("inference_conv2d_f3_4_3_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_8() {
    delete meminst;
}


};//endmodule
#endif
