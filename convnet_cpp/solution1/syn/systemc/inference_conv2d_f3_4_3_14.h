// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_3_14_H__
#define __inference_conv2d_f3_4_3_14_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_3_14_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_3_14_ram) {
        ram[0] = "0b10111101100010101101010101100001";
        ram[1] = "0b10111101011011111100001010000000";
        ram[2] = "0b10111110000110111101110110111010";
        ram[3] = "0b00111101011000011111110100110000";
        ram[4] = "0b00111100101000101100101010011011";
        ram[5] = "0b00111101101011100101011101101110";
        ram[6] = "0b00111101100010010000011000000011";
        ram[7] = "0b10111010100001100100001001111010";
        ram[8] = "0b00111110000100001000101000100110";
        ram[9] = "0b10111100110111110111100000110110";
        ram[10] = "0b10111101100011011111111111000101";
        ram[11] = "0b10111101111001101010110100101110";
        ram[12] = "0b00111101110101011010010000100111";
        ram[13] = "0b00111110000001010000111011111110";
        ram[14] = "0b00111101011100110111001101000101";
        ram[15] = "0b10111110000110011001100010001101";
        ram[16] = "0b10111110000001110011011100010001";
        ram[17] = "0b10111101101010000111110100011111";
        ram[18] = "0b00111101000100010111100101010100";
        ram[19] = "0b00111110001111010011110001111001";
        ram[20] = "0b00111101110110011111101100011110";
        ram[21] = "0b10111100110100000110111011100011";
        ram[22] = "0b10111100011111101000111110111101";
        ram[23] = "0b00111101010111011101110111100111";
        ram[24] = "0b00111110000001011100010010101000";
        ram[25] = "0b00111001111011100011110111100001";
        ram[26] = "0b10111010001110000001001011010110";
        ram[27] = "0b10111101001111011000111101000010";
        ram[28] = "0b10111100100011100100111000001100";
        ram[29] = "0b00111110000111101100111110100111";
        ram[30] = "0b10111101100101010111010010110100";
        ram[31] = "0b10111100010111111011111111101111";
        ram[32] = "0b00111100100101101111111000010100";
        ram[33] = "0b00111100001100000111110000110100";
        ram[34] = "0b00111101101101010001010101111110";
        ram[35] = "0b10111110010101110001111000101010";
        ram[36] = "0b10111101101100100110111001101111";
        ram[37] = "0b00111101011101101011101000100001";
        ram[38] = "0b10111101110001011100000110011110";
        ram[39] = "0b00111101110101010100110010011000";
        ram[40] = "0b00111110001110000010000010100011";
        ram[41] = "0b10111100101100101100110100010010";
        ram[42] = "0b10111110001110010001010001101110";
        ram[43] = "0b00111110000101110101100010011111";
        ram[44] = "0b00111110000010000111101010001101";
        ram[45] = "0b10111110010010001010110111101111";
        ram[46] = "0b00111100101101110011110100011001";
        ram[47] = "0b10111100110110011111010101110101";
        ram[48] = "0b00111110000001110001110100011101";
        ram[49] = "0b00111011011110000110100010110010";
        ram[50] = "0b00111011001001000111000000001100";
        ram[51] = "0b00111101101010100101110100000001";
        ram[52] = "0b10111101101100011101110111110001";
        ram[53] = "0b00111101101001001110100001001101";
        ram[54] = "0b10111011101011001110010111010010";
        ram[55] = "0b10111101011100110001010111110010";
        ram[56] = "0b10111101101101010110110000001101";
        ram[57] = "0b00111011111110101110000010011100";
        ram[58] = "0b00111101100100110111101000100011";
        ram[59] = "0b00111101111011011110110010100010";
        ram[60] = "0b10111101010110101111101100101110";
        ram[61] = "0b10111100011001000110001101010111";
        ram[62] = "0b00111101001110100000101101000100";
        ram[63] = "0b00111110000010011011101101101011";
        ram[64] = "0b00111101100101101110001101100100";
        ram[65] = "0b10111101001010010001001001100011";
        ram[66] = "0b10111100001111101000110101101111";
        ram[67] = "0b00111101111101011101100100011011";
        ram[68] = "0b00111110011001000001111000010101";
        ram[69] = "0b00111101010111100011010011010100";
        ram[70] = "0b00111101011101111010101101001101";
        ram[71] = "0b00111110000110011011110110000100";
        ram[72] = "0b00111110001010000010000010100011";
        ram[73] = "0b00111101100000001100001001000000";
        ram[74] = "0b00111100100000111000010110010001";
        ram[75] = "0b00111101011011011100000100011110";
        ram[76] = "0b10111110000000100100001110011010";
        ram[77] = "0b10111100101000011011100110001110";
        ram[78] = "0b00111101111100001010111111100110";
        ram[79] = "0b10111110000010110001001010010000";
        ram[80] = "0b00111101101010001010011000000100";
        ram[81] = "0b10111101110100000011001110100100";
        ram[82] = "0b10111110010101111001001100010100";
        ram[83] = "0b00111101100110010001010111100110";
        ram[84] = "0b00111110001010110100101011101101";
        ram[85] = "0b00111101010010110110000110101110";
        ram[86] = "0b10111101000000101101010110000010";
        ram[87] = "0b10111101100001010011111001001000";
        ram[88] = "0b00111101110110100111101010000101";
        ram[89] = "0b10111101111101110000101000111101";
        ram[90] = "0b00111101110110100101000000001101";
        ram[91] = "0b10111101111100011000011001010101";
        ram[92] = "0b10111101101100001110101010111001";
        ram[93] = "0b10111110000011100110100011100100";
        ram[94] = "0b00111101001011000111100101010101";
        ram[95] = "0b10111110000101110000010111001001";
        ram[96] = "0b00111101110101011111100000001010";
        ram[97] = "0b00111101000110111000110111000101";
        ram[98] = "0b10111101110010101101000000110000";
        ram[99] = "0b00111011001000100001111011001110";
        ram[100] = "0b10111110000010011111110011110100";
        ram[101] = "0b10111101100010111101110111000111";
        ram[102] = "0b10111101111110100101100011110111";
        ram[103] = "0b00111100101101000110110000011000";
        ram[104] = "0b00111100011111001100110101000110";
        ram[105] = "0b00111100110011100111001011110101";
        ram[106] = "0b10111101010011111101110000110001";
        ram[107] = "0b10111110000000001011101010100110";
        ram[108] = "0b00111110000111100101100110110000";
        ram[109] = "0b10111100001011001101101001010100";
        ram[110] = "0b00111101101110001010111010101011";
        ram[111] = "0b00111101100010000000011111010111";
        ram[112] = "0b10111101101111100111000000100000";
        ram[113] = "0b10111101111000111001110111100101";
        ram[114] = "0b10111101110010001100110010001101";
        ram[115] = "0b10111100111011111010111000001110";
        ram[116] = "0b10111101011110011010011110100111";
        ram[117] = "0b00111100000111000110101010100101";
        ram[118] = "0b00111101101100101010111011111001";
        ram[119] = "0b10111100101010111110100000011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_3_14) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_3_14_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_3_14) {
meminst = new inference_conv2d_f3_4_3_14_ram("inference_conv2d_f3_4_3_14_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_3_14() {
    delete meminst;
}


};//endmodule
#endif
