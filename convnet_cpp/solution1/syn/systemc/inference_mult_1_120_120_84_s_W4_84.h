// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_84_H__
#define __inference_mult_1_120_120_84_s_W4_84_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_84_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_84_ram) {
        ram[0] = "0b10111100110000100110010101101011";
        ram[1] = "0b10111010101100011001000100110010";
        ram[2] = "0b00111110000011110101100000111010";
        ram[3] = "0b00111110000110010101100011011010";
        ram[4] = "0b00111110000110011111110001101110";
        ram[5] = "0b10111101111100101011010101011111";
        ram[6] = "0b10111101101001011001011011010110";
        ram[7] = "0b10111101111010101011010110000000";
        ram[8] = "0b10111101000000111000110010010111";
        ram[9] = "0b10111101100101100001000011111110";
        ram[10] = "0b10111100110000010011010010110011";
        ram[11] = "0b10111101101100110000111001110011";
        ram[12] = "0b10111101000110001001011100111011";
        ram[13] = "0b10111110001101110111010111111011";
        ram[14] = "0b00111101000100011000111001001101";
        ram[15] = "0b10111110010000011011101101001001";
        ram[16] = "0b10111110001000110110000110011001";
        ram[17] = "0b00111101111001101110010101000111";
        ram[18] = "0b10111110000101010010110010011101";
        ram[19] = "0b10111110000000010110000101011111";
        ram[20] = "0b00111101000010100011001000111000";
        ram[21] = "0b00111101000111000100110010110111";
        ram[22] = "0b10111101101001111001001010011011";
        ram[23] = "0b00111110001111000011011000010001";
        ram[24] = "0b00111101001000100001110011000000";
        ram[25] = "0b00111101111010011110000000011110";
        ram[26] = "0b10111110000011101011001100010100";
        ram[27] = "0b10111110001111001110001100010101";
        ram[28] = "0b10111101110000000000110010110000";
        ram[29] = "0b10111101100000111010000111000110";
        ram[30] = "0b10111011100011010001001111111010";
        ram[31] = "0b10111101101110011001011001100111";
        ram[32] = "0b10111101100001011011110110010100";
        ram[33] = "0b00111100101001100110111100000000";
        ram[34] = "0b00111110001011110010001001111101";
        ram[35] = "0b10111101110101111100100000001000";
        ram[36] = "0b00111101011001100011111000001000";
        ram[37] = "0b10111101111001111101010101100111";
        ram[38] = "0b00111101101000101010100110101110";
        ram[39] = "0b10111101101111001110011110001010";
        ram[40] = "0b10111101101000011001100100101000";
        ram[41] = "0b10111101100111001000101000001111";
        ram[42] = "0b10111101001001101000010000101110";
        ram[43] = "0b10111101111010001111001000010111";
        ram[44] = "0b00111100011011100101011111001100";
        ram[45] = "0b00111100110001111001111111010010";
        ram[46] = "0b00111101100011100000111000010101";
        ram[47] = "0b10111101110001010010010111100111";
        ram[48] = "0b00111110000001100001110100000000";
        ram[49] = "0b10111110000000111110111110101110";
        ram[50] = "0b10111101110000010010010010000000";
        ram[51] = "0b00111100101110011010011001111111";
        ram[52] = "0b00111110000111011010010101010101";
        ram[53] = "0b10111110001001000110110101000000";
        ram[54] = "0b00111101101100010110000011001011";
        ram[55] = "0b10111100111010111011110011100111";
        ram[56] = "0b00111101100100110011100011011101";
        ram[57] = "0b00111110000001110100011000000010";
        ram[58] = "0b00111101110100110001111011000001";
        ram[59] = "0b10111101100111110011011010010010";
        ram[60] = "0b00111110001110000100101001010001";
        ram[61] = "0b10111101111001001110100100111110";
        ram[62] = "0b10111101100010011000110111011011";
        ram[63] = "0b00111101101110000110101111101101";
        ram[64] = "0b10111110010010110111011100111010";
        ram[65] = "0b10111101101101011111011011010101";
        ram[66] = "0b10111101010100011001111001011000";
        ram[67] = "0b10111110000001010110100001100010";
        ram[68] = "0b10111100110100011111000101100100";
        ram[69] = "0b10111101100100000110011011000011";
        ram[70] = "0b00111101111001000100011100111101";
        ram[71] = "0b00111110001011011101010001000001";
        ram[72] = "0b10111101100101001011010100100001";
        ram[73] = "0b00111101011110001100100100111111";
        ram[74] = "0b00111110001001101110110010011110";
        ram[75] = "0b10111110010111011011010101010010";
        ram[76] = "0b10111101110111110111011100101001";
        ram[77] = "0b00111101001001010100001010010101";
        ram[78] = "0b10111101110111001010000110001100";
        ram[79] = "0b00111001001001110100111100000110";
        ram[80] = "0b00111101100111011111111010000011";
        ram[81] = "0b00111101010011001111100010111100";
        ram[82] = "0b10111010100111001111111000101000";
        ram[83] = "0b00111101100000111011011010110001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_84) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_84_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_84) {
meminst = new inference_mult_1_120_120_84_s_W4_84_ram("inference_mult_1_120_120_84_s_W4_84_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_84() {
    delete meminst;
}


};//endmodule
#endif
