// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_3_1_H__
#define __inference_conv2d_f3_1_3_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_3_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_3_1_ram) {
        ram[0] = "0b00111110000110000001010100011010";
        ram[1] = "0b00111101001100001111110110011001";
        ram[2] = "0b00111101000001110110010100011001";
        ram[3] = "0b10111101011101010011110010001101";
        ram[4] = "0b10111100111110111011000111110010";
        ram[5] = "0b00111101110100111010010101111111";
        ram[6] = "0b00111101001000010000100011111010";
        ram[7] = "0b00111101101011010011101010001001";
        ram[8] = "0b00111101100000001000010111110101";
        ram[9] = "0b00111101000000101001000011010100";
        ram[10] = "0b10111110000111111100101110010010";
        ram[11] = "0b00111101001000011011110000010010";
        ram[12] = "0b10111101111000101001101001011111";
        ram[13] = "0b00111101100001001001100010001110";
        ram[14] = "0b10111100100000111001001100110010";
        ram[15] = "0b00111110000000001010100101011000";
        ram[16] = "0b10111101110100110111101100000111";
        ram[17] = "0b10111101001011100101110011110000";
        ram[18] = "0b00111100111001010100111010100100";
        ram[19] = "0b00111101100111011111100001100001";
        ram[20] = "0b10111101101011010111001011001010";
        ram[21] = "0b10111110000111100100010011111010";
        ram[22] = "0b00111100110100000001100001111100";
        ram[23] = "0b10111101100001111000011111110111";
        ram[24] = "0b00111101100100010011111110011011";
        ram[25] = "0b00111101010101100001011111101010";
        ram[26] = "0b00111110011010011100101111101111";
        ram[27] = "0b10111101001011000010100001000111";
        ram[28] = "0b10111101100000110111100111101101";
        ram[29] = "0b10111010011111001100010100001101";
        ram[30] = "0b10111100100011101110111011100110";
        ram[31] = "0b10111110001101111010010001100001";
        ram[32] = "0b00111110001000100100101110111010";
        ram[33] = "0b00111110001000100000010011110011";
        ram[34] = "0b10111101101000000110100010011000";
        ram[35] = "0b10111100001001011110001011101001";
        ram[36] = "0b00111100100000010000110001101111";
        ram[37] = "0b10111101100111011101001111010110";
        ram[38] = "0b10111110001110101010000010001000";
        ram[39] = "0b00111110001011111110011101011100";
        ram[40] = "0b00111101101010100111000101100110";
        ram[41] = "0b10111101110000100011110000001101";
        ram[42] = "0b00111110000110011101111010001011";
        ram[43] = "0b00111110001010110010111000010111";
        ram[44] = "0b00111100101000010011010111011011";
        ram[45] = "0b00111101101110101110010100001110";
        ram[46] = "0b10111101100010110100100001011011";
        ram[47] = "0b10111110000011010011110110000110";
        ram[48] = "0b10111101101010110010011100101011";
        ram[49] = "0b00111100100000000111001100100010";
        ram[50] = "0b10111101100010011101110110001100";
        ram[51] = "0b10111100111100100010011101100101";
        ram[52] = "0b10111101110011000001011010110111";
        ram[53] = "0b10111110001011101100110010000001";
        ram[54] = "0b00111101000010101111100011010010";
        ram[55] = "0b10111010001100010100000110111101";
        ram[56] = "0b10111101010100101100001000101010";
        ram[57] = "0b10111101100000010100001001010101";
        ram[58] = "0b00111101001001111100011011101110";
        ram[59] = "0b00111110000001111000100010011000";
        ram[60] = "0b00111110000100101011111111011011";
        ram[61] = "0b00111101100100111000100001001011";
        ram[62] = "0b00111110001100000110011010000000";
        ram[63] = "0b10111101110100011010001000011111";
        ram[64] = "0b10111101001000011110111010111000";
        ram[65] = "0b00111100011101000001100110101101";
        ram[66] = "0b00111110000110000001101101100101";
        ram[67] = "0b00111110001010100101110100101001";
        ram[68] = "0b10111110010000100011101001101101";
        ram[69] = "0b10111110001001100011110000110010";
        ram[70] = "0b00111101010001111011001000010001";
        ram[71] = "0b00111101010110001111110001010000";
        ram[72] = "0b10111110000011000111010011111011";
        ram[73] = "0b10111101100111011110001101011011";
        ram[74] = "0b00111100001101011010110101100001";
        ram[75] = "0b00111100111111000011011001111101";
        ram[76] = "0b00111100111111111001010101110111";
        ram[77] = "0b00111110000111100000001111110111";
        ram[78] = "0b10111101101001100000001000110101";
        ram[79] = "0b10111100100010011010101110110000";
        ram[80] = "0b00111110000101100011011001101101";
        ram[81] = "0b00111101111011011101100010110110";
        ram[82] = "0b00111101000011010011000110101100";
        ram[83] = "0b10111110001000011011000101010011";
        ram[84] = "0b00111110010000001110001000111011";
        ram[85] = "0b00111100111110101011110011001010";
        ram[86] = "0b10111100010110010101100100111000";
        ram[87] = "0b00111101010110001110111011100100";
        ram[88] = "0b00111101100000100110010111110001";
        ram[89] = "0b10111101110010010100000010111100";
        ram[90] = "0b10111101100100001000110011101110";
        ram[91] = "0b10111101110001000101000010000100";
        ram[92] = "0b10111101111000101010010101100001";
        ram[93] = "0b10111101100011100111111111000000";
        ram[94] = "0b00111101000110001111011011011100";
        ram[95] = "0b00111101001110111011001011111111";
        ram[96] = "0b00111101011111100010101100010100";
        ram[97] = "0b00111010001010111101001011010111";
        ram[98] = "0b10111101110100101100000101101110";
        ram[99] = "0b10111101111001011000100000011010";
        ram[100] = "0b10111110001011101011110101001101";
        ram[101] = "0b00111101101011101001111101111000";
        ram[102] = "0b00111101010111010100111111101101";
        ram[103] = "0b10111100000001011101111100010010";
        ram[104] = "0b10111101101001110110011011111101";
        ram[105] = "0b10111100100111010010111010101111";
        ram[106] = "0b10111100101010110010100001101101";
        ram[107] = "0b00111101111110100100001001101100";
        ram[108] = "0b00111011100100001100000101101110";
        ram[109] = "0b10111110000000010011111111010001";
        ram[110] = "0b00111101110101111100110111001101";
        ram[111] = "0b10111101101000000110010010001111";
        ram[112] = "0b00111110000100000000001100100101";
        ram[113] = "0b10111101000001011111001011110100";
        ram[114] = "0b10111110000110100111000100010101";
        ram[115] = "0b10111101101100011111010000101100";
        ram[116] = "0b10111100100100001011100110001100";
        ram[117] = "0b10111101000000000101111100110110";
        ram[118] = "0b10111101011100111000111010111110";
        ram[119] = "0b10111101001111110101111100100110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_3_1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_3_1_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_3_1) {
meminst = new inference_conv2d_f3_1_3_1_ram("inference_conv2d_f3_1_3_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_3_1() {
    delete meminst;
}


};//endmodule
#endif
