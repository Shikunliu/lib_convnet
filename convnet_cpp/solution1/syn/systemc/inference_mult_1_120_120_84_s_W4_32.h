// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_32_H__
#define __inference_mult_1_120_120_84_s_W4_32_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_32_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_32_ram) {
        ram[0] = "0b10111110001000001011110110001000";
        ram[1] = "0b00111101010001010101110010110001";
        ram[2] = "0b10111101111001001100111010000001";
        ram[3] = "0b10111110000010000101101101011011";
        ram[4] = "0b00111100010101111001010100010010";
        ram[5] = "0b10111101110111110011010010010100";
        ram[6] = "0b00111110000100011110111010101010";
        ram[7] = "0b10111101111010111111100001110111";
        ram[8] = "0b00111101000011001111000100010101";
        ram[9] = "0b10111100000110001010111010101101";
        ram[10] = "0b10111011000110000010101000000011";
        ram[11] = "0b10111011110101111011010011011101";
        ram[12] = "0b00111101100011111110110011101010";
        ram[13] = "0b00111101011001110110100110011100";
        ram[14] = "0b00111110000000111001110000001111";
        ram[15] = "0b10111101001001101111010100110111";
        ram[16] = "0b10111100101101100000110111011001";
        ram[17] = "0b00111100100101000011000111100110";
        ram[18] = "0b00111101011110111100011101110001";
        ram[19] = "0b10111100011110010010011100110011";
        ram[20] = "0b00111110000110000110110110110101";
        ram[21] = "0b00111110000000111101011010000100";
        ram[22] = "0b10111101000011001010111001100100";
        ram[23] = "0b10111100010101011100001111101100";
        ram[24] = "0b00111101100100000101111011011000";
        ram[25] = "0b00111101110011111110010100000000";
        ram[26] = "0b10111101010100011001011001111011";
        ram[27] = "0b00111101000001001011011111110110";
        ram[28] = "0b10111100001010101000001101100001";
        ram[29] = "0b10111100101011110011101110001101";
        ram[30] = "0b10111100010000001111000011110110";
        ram[31] = "0b00111101001011111010111001000011";
        ram[32] = "0b10111101111100110101100101111001";
        ram[33] = "0b00111101000010010101001011100000";
        ram[34] = "0b10111110001110011000111110100011";
        ram[35] = "0b10111101010110001101110011000000";
        ram[36] = "0b00111101100000000010011110111110";
        ram[37] = "0b00111101111101011000010100111000";
        ram[38] = "0b10111101101000101101100110001100";
        ram[39] = "0b10111010100000000001001110001100";
        ram[40] = "0b00111100001000000110101001111001";
        ram[41] = "0b00111100010011100000110011010011";
        ram[42] = "0b00111110001001111001011000111010";
        ram[43] = "0b00111101110010111110010110111111";
        ram[44] = "0b00111100101011111010010010011110";
        ram[45] = "0b00111011100010110000001000100111";
        ram[46] = "0b00111101011001100001011010000000";
        ram[47] = "0b00111100110000111100110001110011";
        ram[48] = "0b00111110000110000011110101111001";
        ram[49] = "0b10111101011010101000110101110010";
        ram[50] = "0b10111100100111111101001000101101";
        ram[51] = "0b00111100101001001011101110100001";
        ram[52] = "0b10111101111011101000001000001110";
        ram[53] = "0b10111101110001001111111101010001";
        ram[54] = "0b00111100111000110110100010000101";
        ram[55] = "0b00111101011111111000110010101000";
        ram[56] = "0b00111100001010100100100111101011";
        ram[57] = "0b10111011100011110010010000110101";
        ram[58] = "0b10111101001010111101101011100101";
        ram[59] = "0b10111100101111100011100100100001";
        ram[60] = "0b00111110010111100100100110110010";
        ram[61] = "0b00111101000110011000101111011101";
        ram[62] = "0b10111100010001011011100110110011";
        ram[63] = "0b10111110000001001110110001100011";
        ram[64] = "0b00111100011110101001100100100011";
        ram[65] = "0b10111101111110000011101111100110";
        ram[66] = "0b10111101010101000001001010001100";
        ram[67] = "0b10111101100100100110100001011010";
        ram[68] = "0b10111101010101111111111110110110";
        ram[69] = "0b10111101100010001011000011011110";
        ram[70] = "0b10111011100010100010101011100111";
        ram[71] = "0b10111100101010101100111110110111";
        ram[72] = "0b00111101100110010110110110001111";
        ram[73] = "0b00111100100110101111001011001011";
        ram[74] = "0b10111101010001001010100011011100";
        ram[75] = "0b00111100011111001101100111011011";
        ram[76] = "0b00111101101011111111110100000011";
        ram[77] = "0b00111110010100001101100110010100";
        ram[78] = "0b00111110000001111011111101100010";
        ram[79] = "0b00111101100011101110101100000101";
        ram[80] = "0b10111101011110110010110010010001";
        ram[81] = "0b10111100100111011011010110001000";
        ram[82] = "0b00111110000101101000111010000010";
        ram[83] = "0b00111101001001011000100111111101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_32) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_32_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_32) {
meminst = new inference_mult_1_120_120_84_s_W4_32_ram("inference_mult_1_120_120_84_s_W4_32_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_32() {
    delete meminst;
}


};//endmodule
#endif
