// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_4_5_H__
#define __inference_conv2d_f3_0_4_5_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_4_5_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_4_5_ram) {
        ram[0] = "0b10111100111000001001100100110010";
        ram[1] = "0b00111101011110101111101000000111";
        ram[2] = "0b00111101001110110100001100011101";
        ram[3] = "0b10111100100111110111010110110001";
        ram[4] = "0b10111100111011011111010011010000";
        ram[5] = "0b00111101101100011010110101001001";
        ram[6] = "0b10111101000100001101001010000000";
        ram[7] = "0b00111100010011001110101100000000";
        ram[8] = "0b00111100101111010000011100100111";
        ram[9] = "0b10111100100000100110010110100000";
        ram[10] = "0b00111011011101000110101100100001";
        ram[11] = "0b00111110001010010101100101100000";
        ram[12] = "0b10111101111101100111111011001000";
        ram[13] = "0b10111110001011100011001100100111";
        ram[14] = "0b10111100000010011000011001110001";
        ram[15] = "0b10111101010001001101001100000011";
        ram[16] = "0b00111100101111000111101010100101";
        ram[17] = "0b10111100101110010010111011000000";
        ram[18] = "0b00111101101010111001010101000101";
        ram[19] = "0b10111100110010001001111010100000";
        ram[20] = "0b10111101110010101100101010010100";
        ram[21] = "0b00111101001001100111111111111100";
        ram[22] = "0b10111100000011010010100101110100";
        ram[23] = "0b00111101100000110000100011001001";
        ram[24] = "0b00111110010001010100011001001110";
        ram[25] = "0b10111101110111110100011111111010";
        ram[26] = "0b00111101000000010100111100000101";
        ram[27] = "0b00111101001001110100101000100111";
        ram[28] = "0b00111101001110011001100011011110";
        ram[29] = "0b10111101110000111000101011000010";
        ram[30] = "0b10111110001110110110110110000111";
        ram[31] = "0b10111100110101110111011000001001";
        ram[32] = "0b00111101100110101111110100101100";
        ram[33] = "0b00111101010111000110110100011110";
        ram[34] = "0b10111100010101010101001001000010";
        ram[35] = "0b00111110000001110101101011111011";
        ram[36] = "0b00111101100110111000010001100011";
        ram[37] = "0b00111110000011101011110110010000";
        ram[38] = "0b10111110001100000001110101011100";
        ram[39] = "0b10111110000001111110101111110010";
        ram[40] = "0b00111101111000111111100010011000";
        ram[41] = "0b10111100001000000000100111101011";
        ram[42] = "0b00111100010110011101100111111100";
        ram[43] = "0b00111100110011011000011110101000";
        ram[44] = "0b00111101100101110101111111000000";
        ram[45] = "0b10111101110001011001101010101001";
        ram[46] = "0b10111100011110000100010010110101";
        ram[47] = "0b00111100100011000000010101011100";
        ram[48] = "0b00111110000101100000010111101110";
        ram[49] = "0b10111100110110000101001000111100";
        ram[50] = "0b10111100011010101101111100000111";
        ram[51] = "0b00111101100011101111110000000001";
        ram[52] = "0b00111101110010110101001010000111";
        ram[53] = "0b00111101101100100101110001001011";
        ram[54] = "0b00111101101101000110000101110100";
        ram[55] = "0b00111110001100111010001101100110";
        ram[56] = "0b10111101100001100000101010110100";
        ram[57] = "0b10111011010011101111001101101110";
        ram[58] = "0b10111101110111111000000100011111";
        ram[59] = "0b00111100100011010001010111001000";
        ram[60] = "0b10111100101110111010010111111110";
        ram[61] = "0b10111101111100111100111001100100";
        ram[62] = "0b10111101101011001001001001011000";
        ram[63] = "0b00111101111010010001010110111110";
        ram[64] = "0b10111101100110001011010011110101";
        ram[65] = "0b00111100000100101100011100001101";
        ram[66] = "0b00111101000000111000001000110110";
        ram[67] = "0b00111110010011001001101010111011";
        ram[68] = "0b00111101100100010101101111000011";
        ram[69] = "0b00111110001010110010101011110001";
        ram[70] = "0b10111100100100101011111000010011";
        ram[71] = "0b00111101100000110000000010101001";
        ram[72] = "0b10111101110110001110100001100100";
        ram[73] = "0b00111101011110100011011100110011";
        ram[74] = "0b00111101101011110011011101110110";
        ram[75] = "0b10111100011011010101010111011001";
        ram[76] = "0b00111101110001111111000101100110";
        ram[77] = "0b00111101000000010111001010101100";
        ram[78] = "0b10111101100001000011000110111110";
        ram[79] = "0b00111110000111001001110000001011";
        ram[80] = "0b10111100011111010100100010010110";
        ram[81] = "0b00111110001110010101111110101011";
        ram[82] = "0b00111101101111010110101001001100";
        ram[83] = "0b00111101110111111100010101001000";
        ram[84] = "0b10111101100101111000010110000000";
        ram[85] = "0b00111100110000100011110001010000";
        ram[86] = "0b10111101100000100011111011111101";
        ram[87] = "0b10111100110001100110011000010110";
        ram[88] = "0b10111110001011111110010000110110";
        ram[89] = "0b10111101011111011111101101011110";
        ram[90] = "0b00111100110010100101111111010101";
        ram[91] = "0b10111101010000111110110111001011";
        ram[92] = "0b10111100100111101001111111001001";
        ram[93] = "0b10111101100100111000100110101000";
        ram[94] = "0b00111110001111000111100011101010";
        ram[95] = "0b10111101010101001011011101100010";
        ram[96] = "0b10111101010100101110001010010001";
        ram[97] = "0b00111101000101100100110101001001";
        ram[98] = "0b00111101100111000111100101110000";
        ram[99] = "0b00111110001100111101111110110001";
        ram[100] = "0b00111101001101110000110000000110";
        ram[101] = "0b00111101101110001100110011101011";
        ram[102] = "0b10111100110110110111101100011011";
        ram[103] = "0b10111100101001110011111100111111";
        ram[104] = "0b00111110000000000011111111110111";
        ram[105] = "0b10111101110001010000110011110010";
        ram[106] = "0b10111101101000001110111000101111";
        ram[107] = "0b10111101111110000100000100100101";
        ram[108] = "0b00111110000001010110100011101000";
        ram[109] = "0b10111101000101010110101011001011";
        ram[110] = "0b00111100110000110101001100000110";
        ram[111] = "0b10111110000010011110010110011111";
        ram[112] = "0b10111101101011110000010101010111";
        ram[113] = "0b00111101110100111001111000101000";
        ram[114] = "0b00111101101110100110001100010101";
        ram[115] = "0b00111101000100101101101111000000";
        ram[116] = "0b10111101101011111010100010100111";
        ram[117] = "0b10111101100011111100010000100000";
        ram[118] = "0b10111110000000010011001001110010";
        ram[119] = "0b00111010010110001100110011111010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_4_5) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_4_5_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_4_5) {
meminst = new inference_conv2d_f3_0_4_5_ram("inference_conv2d_f3_0_4_5_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_4_5() {
    delete meminst;
}


};//endmodule
#endif
