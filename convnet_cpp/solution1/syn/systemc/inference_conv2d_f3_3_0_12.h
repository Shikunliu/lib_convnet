// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_12_H__
#define __inference_conv2d_f3_3_0_12_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_12_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_12_ram) {
        ram[0] = "0b00111101010101100111111001110111";
        ram[1] = "0b10111101000001111100011111000101";
        ram[2] = "0b00111110000001000011001111010111";
        ram[3] = "0b00111101000000110000110000001001";
        ram[4] = "0b10111101110101111000000111000111";
        ram[5] = "0b00111001111111110011101001100110";
        ram[6] = "0b10111110010100101011010101011111";
        ram[7] = "0b10111101001100001110110000010110";
        ram[8] = "0b00111011111011111001100100000000";
        ram[9] = "0b10111100001100011011101101100100";
        ram[10] = "0b10111101010001011100010111000010";
        ram[11] = "0b10111101011100111010101100001101";
        ram[12] = "0b10111110000010100110111000110011";
        ram[13] = "0b10111101001100110111001000111000";
        ram[14] = "0b00111011101001101111011101111011";
        ram[15] = "0b10111101010100000011110000111110";
        ram[16] = "0b00111101101000111011010011000000";
        ram[17] = "0b10111101101100111000001011110010";
        ram[18] = "0b00111110001100100000111101101111";
        ram[19] = "0b10111101110101001101010110010101";
        ram[20] = "0b00111011110011111001010111101010";
        ram[21] = "0b00111101101001111100100100111101";
        ram[22] = "0b00111110000001000110101011100100";
        ram[23] = "0b00111101011000001100000000110100";
        ram[24] = "0b00111100110111000001000010100010";
        ram[25] = "0b10111011101000000100110111101001";
        ram[26] = "0b10111101100001111111111100001000";
        ram[27] = "0b10111100110010101110001111110100";
        ram[28] = "0b10111101111011001110000111000110";
        ram[29] = "0b10111101100101001001011000001010";
        ram[30] = "0b10111101000101001111110100011101";
        ram[31] = "0b00111101001000010000000101010010";
        ram[32] = "0b10111110010011100101100011100110";
        ram[33] = "0b00111100100010111011010100001010";
        ram[34] = "0b00111110000110100111000000001001";
        ram[35] = "0b00111101001111010010110001111100";
        ram[36] = "0b10111101100010011001101001111110";
        ram[37] = "0b00111110000000011010101111010010";
        ram[38] = "0b00111110000111111001101110011001";
        ram[39] = "0b10111110010000100000100100100100";
        ram[40] = "0b10111101100000100110011111100010";
        ram[41] = "0b00111100100100110000011010100011";
        ram[42] = "0b10111101111111100110001011011100";
        ram[43] = "0b00111100111101001011111111000101";
        ram[44] = "0b00111011100101010001010011100101";
        ram[45] = "0b10111101011101111010010110111110";
        ram[46] = "0b00111100011100110001110110011001";
        ram[47] = "0b00111101101001111101011111011110";
        ram[48] = "0b10111101000011001010111000101110";
        ram[49] = "0b00111101100010011101111101010101";
        ram[50] = "0b00111001111101101000110000000101";
        ram[51] = "0b10111101100100010100101100010110";
        ram[52] = "0b10111101111001100101111100001111";
        ram[53] = "0b00111101011001001000101111101011";
        ram[54] = "0b10111010011110111111111000100100";
        ram[55] = "0b10111100000111110101000110101010";
        ram[56] = "0b00111101010000111000000101111010";
        ram[57] = "0b00111101010100000110000111111101";
        ram[58] = "0b10111101010110100110101111110010";
        ram[59] = "0b00111110000111001110111001011011";
        ram[60] = "0b10111101101011001110011011011011";
        ram[61] = "0b00111100101110010110101001001111";
        ram[62] = "0b10111110000101010100011101011010";
        ram[63] = "0b10111101000101100101011100001010";
        ram[64] = "0b10111101011011010111111101011111";
        ram[65] = "0b10111100000111011110110111000111";
        ram[66] = "0b10111110000111001011110100010010";
        ram[67] = "0b00111101000101001001010010010010";
        ram[68] = "0b10111101111111101100100000001100";
        ram[69] = "0b00111101000000111011011011110100";
        ram[70] = "0b00111110000010010010011010000101";
        ram[71] = "0b00111110000010000110011010100001";
        ram[72] = "0b10111101101010011101000110110011";
        ram[73] = "0b00111101110100000100101000110000";
        ram[74] = "0b00111110000100100010111110101101";
        ram[75] = "0b00111110001001011110100000001100";
        ram[76] = "0b10111101100101111010000110101000";
        ram[77] = "0b10111101111000101101011100110000";
        ram[78] = "0b10111101100101111001110101101000";
        ram[79] = "0b00111100110100101001011010100110";
        ram[80] = "0b00111100100100101111001111000011";
        ram[81] = "0b10111100111101111011110010011010";
        ram[82] = "0b00111101010110001111110101111000";
        ram[83] = "0b00111110011000001001011110000101";
        ram[84] = "0b10111110000001010001011011011011";
        ram[85] = "0b10111101001000010001010010111000";
        ram[86] = "0b00111110000011001010110101011000";
        ram[87] = "0b00111101011001001001000000111000";
        ram[88] = "0b10111100101110101000000010011010";
        ram[89] = "0b00111101110111011101001100110101";
        ram[90] = "0b10111101100001110011011010110011";
        ram[91] = "0b00111011100011010111111010101110";
        ram[92] = "0b00111101010100010011001011000011";
        ram[93] = "0b10111100110110110101011100001001";
        ram[94] = "0b10111100110101010100101001001010";
        ram[95] = "0b10111101010011100010101011101011";
        ram[96] = "0b10111101000010110001000110101100";
        ram[97] = "0b00111110001110101011111001101010";
        ram[98] = "0b00111101100101000010101100001000";
        ram[99] = "0b10111110000000101011111010001100";
        ram[100] = "0b00111100100000001011001001111000";
        ram[101] = "0b00111101001100011101011101001000";
        ram[102] = "0b10111011100010000101111000110011";
        ram[103] = "0b00111101100011011000011110000000";
        ram[104] = "0b00111100000100111011111111110001";
        ram[105] = "0b10111011111000100010010001111000";
        ram[106] = "0b00111110000001010100111000101011";
        ram[107] = "0b10111101110000010011010010100110";
        ram[108] = "0b10111101101001000110000111010010";
        ram[109] = "0b10111101011100111010100000111001";
        ram[110] = "0b10111101100101011110010111100110";
        ram[111] = "0b00111101111101011001001001010011";
        ram[112] = "0b10111101001101111001101100100111";
        ram[113] = "0b10111100110111010111010000011010";
        ram[114] = "0b10111101000011110000101010010101";
        ram[115] = "0b10111101001111011011111110011001";
        ram[116] = "0b10111110000110011100011000101010";
        ram[117] = "0b10111101010111010111111101101101";
        ram[118] = "0b00111101010100010001011100101111";
        ram[119] = "0b10111101101001010111000101100110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_12) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_12_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_12) {
meminst = new inference_conv2d_f3_3_0_12_ram("inference_conv2d_f3_3_0_12_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_12() {
    delete meminst;
}


};//endmodule
#endif
