// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_104_H__
#define __inference_mult_1_120_120_84_s_W4_104_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_104_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_104_ram) {
        ram[0] = "0b00111101100110111011011110001110";
        ram[1] = "0b10111101100010110001111011000111";
        ram[2] = "0b00111100101110001011011001100000";
        ram[3] = "0b10111101111001110110010010101110";
        ram[4] = "0b10111101001101110011100111110011";
        ram[5] = "0b10111100100111101110001000001110";
        ram[6] = "0b10111110010000100001100001011001";
        ram[7] = "0b00111110001001000100101100101011";
        ram[8] = "0b00111110001110110010111111101100";
        ram[9] = "0b00111110000110100101110011100110";
        ram[10] = "0b00111110000110010111110000111101";
        ram[11] = "0b00111110000100000000001111101111";
        ram[12] = "0b00111101010100010010011010110100";
        ram[13] = "0b00111101001001100111001111010010";
        ram[14] = "0b10111011111100110010001101001110";
        ram[15] = "0b10111100010011011001101001010010";
        ram[16] = "0b00111110000011001011110110011000";
        ram[17] = "0b10111101110111011011001100111001";
        ram[18] = "0b00111110000101111110011001110001";
        ram[19] = "0b00111110000111001010000000111100";
        ram[20] = "0b00111101111110000110100110000011";
        ram[21] = "0b10111101010001110000101111000011";
        ram[22] = "0b10111101100011000101011110111010";
        ram[23] = "0b00111101010111110001111011011111";
        ram[24] = "0b00111101100011110011011110000011";
        ram[25] = "0b00111101100010110010101111010101";
        ram[26] = "0b10111101100000100110100011101110";
        ram[27] = "0b00111101110001001110000000000100";
        ram[28] = "0b00111100011010011110110000101101";
        ram[29] = "0b10111101111011000011101100001100";
        ram[30] = "0b10111101101100001110100110000101";
        ram[31] = "0b00111101010001100010101000000001";
        ram[32] = "0b00111110001111110100101000010010";
        ram[33] = "0b10111101101100011010101010011101";
        ram[34] = "0b10111101111001000010101011101101";
        ram[35] = "0b10111101111110000110001010110010";
        ram[36] = "0b00111101001110100110001110101001";
        ram[37] = "0b10111100001011110101000001010000";
        ram[38] = "0b00111101011010111101110000001100";
        ram[39] = "0b00111101101110010101010001110010";
        ram[40] = "0b10111100110010110011110011100000";
        ram[41] = "0b10111101101000000111010001001001";
        ram[42] = "0b00111101010100101100110011110111";
        ram[43] = "0b00111110010010101001101000111101";
        ram[44] = "0b00111110000100010110010010000100";
        ram[45] = "0b00111110000010000010011110110111";
        ram[46] = "0b00111101010100000010110010111001";
        ram[47] = "0b00111101110110100010001001110000";
        ram[48] = "0b10111100100010111011111000001111";
        ram[49] = "0b00111101100000001100000001011100";
        ram[50] = "0b10111110001001010000110001011111";
        ram[51] = "0b10111100010101011000111101111111";
        ram[52] = "0b00111100001001000011110010001011";
        ram[53] = "0b00111101010010101000011100101000";
        ram[54] = "0b00111101000011001111111100111101";
        ram[55] = "0b00111110000001001010110101111001";
        ram[56] = "0b00111101000010010011100101001010";
        ram[57] = "0b10111101010011110101000001101010";
        ram[58] = "0b10111110010000011100111000101001";
        ram[59] = "0b00111101110011011010110110111000";
        ram[60] = "0b10111101101010100111000001110100";
        ram[61] = "0b10111101101001100111101100000001";
        ram[62] = "0b10111101011101101111101110101010";
        ram[63] = "0b00111101011001001111111010000111";
        ram[64] = "0b10111101101100111001010110101001";
        ram[65] = "0b00111101101000110011010011010011";
        ram[66] = "0b00111101010100101100110000111011";
        ram[67] = "0b10111010101001110011001010110100";
        ram[68] = "0b10111101011111110000010011011110";
        ram[69] = "0b10111100101111001110001110000000";
        ram[70] = "0b10111110001001000010000000101110";
        ram[71] = "0b00111011111100101010000000011011";
        ram[72] = "0b10111110001010000110000110100110";
        ram[73] = "0b10111101100101000011001111100100";
        ram[74] = "0b10111100111011001111011000111000";
        ram[75] = "0b00111101111111110011101111101011";
        ram[76] = "0b00111110001000100010100011011101";
        ram[77] = "0b00111101111010001111111100110010";
        ram[78] = "0b00111100000110001101010111011010";
        ram[79] = "0b10111101110001110010111111100010";
        ram[80] = "0b10111011111111010110000011010100";
        ram[81] = "0b10111110001110001111001011100000";
        ram[82] = "0b10111100011101100010010100100000";
        ram[83] = "0b00111101000001011010001101011101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_104) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_104_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_104) {
meminst = new inference_mult_1_120_120_84_s_W4_104_ram("inference_mult_1_120_120_84_s_W4_104_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_104() {
    delete meminst;
}


};//endmodule
#endif
