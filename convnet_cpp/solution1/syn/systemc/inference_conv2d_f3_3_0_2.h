// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_2_H__
#define __inference_conv2d_f3_3_0_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_2_ram) {
        ram[0] = "0b10111101001000110100011011011100";
        ram[1] = "0b00111101001001000110010101010101";
        ram[2] = "0b00111110001010011000100101011001";
        ram[3] = "0b10111110001100100111010001011100";
        ram[4] = "0b00111101011001100101101000000111";
        ram[5] = "0b00111101111001001111011011100000";
        ram[6] = "0b10111101000001010111011001111100";
        ram[7] = "0b10111100100101010001101001111001";
        ram[8] = "0b10111101010101001100100111010110";
        ram[9] = "0b00111100011001110010001001001110";
        ram[10] = "0b00111110010000101101010001001110";
        ram[11] = "0b00111101110001110101000010011001";
        ram[12] = "0b10111110000000000000100111110110";
        ram[13] = "0b10111011100000101100011000000011";
        ram[14] = "0b00111101000101101110101011001000";
        ram[15] = "0b10111110000011110110010101010110";
        ram[16] = "0b10111110001100100110010100101000";
        ram[17] = "0b10111110000001010011001100101011";
        ram[18] = "0b00111010100100111010000010110001";
        ram[19] = "0b10111100100101011010101111001110";
        ram[20] = "0b10111101111000000101100010011011";
        ram[21] = "0b00111101011101111001111111011111";
        ram[22] = "0b00111101111101000010101000100100";
        ram[23] = "0b00111100011000110101000000110001";
        ram[24] = "0b00111100011111111100100100001110";
        ram[25] = "0b10111101100101110011110000001100";
        ram[26] = "0b10111101111011111111100011101100";
        ram[27] = "0b00111101101110001011100111110000";
        ram[28] = "0b10111100110100001111011010010011";
        ram[29] = "0b10111100101100001100101011011001";
        ram[30] = "0b10111110001011100001001011101000";
        ram[31] = "0b10111101111100101000010000010110";
        ram[32] = "0b10111101111011100110000100000111";
        ram[33] = "0b00111100010100110101100110101111";
        ram[34] = "0b00111101011010100101110011001011";
        ram[35] = "0b00111011000111101111011101010010";
        ram[36] = "0b00111110001010011001010111101110";
        ram[37] = "0b00111101010011100100000011110001";
        ram[38] = "0b10111100000100100011010100001100";
        ram[39] = "0b10111101101101110010110001111010";
        ram[40] = "0b10111101000111101001110111100101";
        ram[41] = "0b00111100011001010110011011111000";
        ram[42] = "0b00111011110010100000100000110111";
        ram[43] = "0b10111101110001011100010010011011";
        ram[44] = "0b00111100101010111000111001011001";
        ram[45] = "0b10111100111101001110110010100111";
        ram[46] = "0b00111101000010000001111010011000";
        ram[47] = "0b10111100110001001001111100000001";
        ram[48] = "0b00111100010001001000110000100001";
        ram[49] = "0b10111101101110101111101100101110";
        ram[50] = "0b00111101110100101001110010111011";
        ram[51] = "0b10111110011100111010000101001101";
        ram[52] = "0b00111100001000000000100001011110";
        ram[53] = "0b00111110001010010111001011001101";
        ram[54] = "0b00111110000111000000101001001010";
        ram[55] = "0b00111011111110110111000001001110";
        ram[56] = "0b00111110000110101011101111001011";
        ram[57] = "0b00111100100001101111100101001110";
        ram[58] = "0b00111100010000100111010111000110";
        ram[59] = "0b00111101110011110011110000101110";
        ram[60] = "0b10111101010001111001110000001011";
        ram[61] = "0b00111110010000011011110010011001";
        ram[62] = "0b10111100001100010101111111110100";
        ram[63] = "0b10111100100011011000101111011010";
        ram[64] = "0b00111101011001001100111101110011";
        ram[65] = "0b10111101010110000101100101000011";
        ram[66] = "0b10111110000000011111100101101010";
        ram[67] = "0b00111101101010001100001011110101";
        ram[68] = "0b00111101100011110111101110010001";
        ram[69] = "0b10111100011011110101000111000111";
        ram[70] = "0b10111110000110010011001000001110";
        ram[71] = "0b10111101001001000110010111110110";
        ram[72] = "0b00111101011011011001010001110011";
        ram[73] = "0b10111110000011100100011011010000";
        ram[74] = "0b00111110001001100111111011001000";
        ram[75] = "0b10111100110101011001001101000101";
        ram[76] = "0b00111101011011111000111011001110";
        ram[77] = "0b10111011110000010001011011110111";
        ram[78] = "0b10111110001111000100111111000010";
        ram[79] = "0b00111101001111101111011011101100";
        ram[80] = "0b10111110000000111101011010000100";
        ram[81] = "0b10111101101001101101010010000000";
        ram[82] = "0b10111101110000000001110110000100";
        ram[83] = "0b00111101100100101011000010100111";
        ram[84] = "0b10111101001000100110100110011100";
        ram[85] = "0b10111110000001100000001000000000";
        ram[86] = "0b00111100110011011111000010111001";
        ram[87] = "0b00111101110001100101101000100010";
        ram[88] = "0b10111101101011011001110110111011";
        ram[89] = "0b10111100110100110111010111111111";
        ram[90] = "0b10111101010000100101010010100100";
        ram[91] = "0b10111110001000100110100011010011";
        ram[92] = "0b10111011000110100010010010101111";
        ram[93] = "0b00111101001101010110010111000011";
        ram[94] = "0b10111110000111010101101000011000";
        ram[95] = "0b00111101001110100001000111111010";
        ram[96] = "0b10111101100100011111011001000101";
        ram[97] = "0b10111100111010101010101001100011";
        ram[98] = "0b10111101001011000111011000010101";
        ram[99] = "0b00111101101001100010011111001101";
        ram[100] = "0b10111101111001110001110001010100";
        ram[101] = "0b10111110000001010101100110110100";
        ram[102] = "0b10111100011001110111000010111101";
        ram[103] = "0b10111101011010001111101111010111";
        ram[104] = "0b00111101000110100110010101010111";
        ram[105] = "0b10111110000000101111111101001100";
        ram[106] = "0b10111101100011001001110001000000";
        ram[107] = "0b00111100111110001100001101100000";
        ram[108] = "0b00111101111001000001101010101100";
        ram[109] = "0b10111101001000011010000100000101";
        ram[110] = "0b00111110001001010000110000011100";
        ram[111] = "0b00111101110000110100010010110110";
        ram[112] = "0b10111100101011101110110110001001";
        ram[113] = "0b10111010100101101100011000000000";
        ram[114] = "0b00111100010010111001100101011100";
        ram[115] = "0b10111101110000010011110100001001";
        ram[116] = "0b10111100100001010001100001101110";
        ram[117] = "0b10111110000100100000101001110100";
        ram[118] = "0b00111100011001100011100100011010";
        ram[119] = "0b10111010101101000100001000010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_2_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_2) {
meminst = new inference_conv2d_f3_3_0_2_ram("inference_conv2d_f3_3_0_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_2() {
    delete meminst;
}


};//endmodule
#endif
