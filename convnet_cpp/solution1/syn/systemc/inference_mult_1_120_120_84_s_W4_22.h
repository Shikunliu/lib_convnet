// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_22_H__
#define __inference_mult_1_120_120_84_s_W4_22_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_22_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_22_ram) {
        ram[0] = "0b10111110000111110001101011100011";
        ram[1] = "0b10111101100010000101100001010001";
        ram[2] = "0b10111101010111011100010101111000";
        ram[3] = "0b10111101101001001110100100001000";
        ram[4] = "0b00111101000000101000010100110000";
        ram[5] = "0b10111100101110011100010001111101";
        ram[6] = "0b10111101010110111100010110001110";
        ram[7] = "0b10111110000110001011101111010100";
        ram[8] = "0b10111101101011000100010101000110";
        ram[9] = "0b00111101101110100010110011101101";
        ram[10] = "0b00111110000110110001101010110001";
        ram[11] = "0b10111110000010111100000011100100";
        ram[12] = "0b10111101010110011101101010000010";
        ram[13] = "0b10111110001101000011010001011101";
        ram[14] = "0b10111110010111111010001011110000";
        ram[15] = "0b00111100111110001001011111000001";
        ram[16] = "0b00111101010000101011011110111011";
        ram[17] = "0b10111101111001000000011111001100";
        ram[18] = "0b00111101111111000100100111111101";
        ram[19] = "0b10111101100000111101011110011110";
        ram[20] = "0b00111100101110100000111100100101";
        ram[21] = "0b10111101111010100100001000101001";
        ram[22] = "0b10111101111001000010101011101101";
        ram[23] = "0b10111100000100011101000110001111";
        ram[24] = "0b00111101010100010010110100110100";
        ram[25] = "0b00111101010100110110001010110011";
        ram[26] = "0b10111100111101001000001111001011";
        ram[27] = "0b10111101011100001100011110011001";
        ram[28] = "0b00111110001010000001011101110110";
        ram[29] = "0b00111100011100010101000000111010";
        ram[30] = "0b00111100110001001000100001011011";
        ram[31] = "0b10111110001110011110010111100010";
        ram[32] = "0b10111100010111000001101010110011";
        ram[33] = "0b10111100101111101011010010100110";
        ram[34] = "0b00111101001110110001111101000000";
        ram[35] = "0b10111100110000110101110000001011";
        ram[36] = "0b00111110000011110011011111111100";
        ram[37] = "0b10111011101010010000110000010011";
        ram[38] = "0b00111110000000111001111100110100";
        ram[39] = "0b00111110000110101000101011000110";
        ram[40] = "0b00111101111110110101100001001011";
        ram[41] = "0b00111011001011001011111100010000";
        ram[42] = "0b10111101000111001110010101111110";
        ram[43] = "0b10111011110001000010000010010110";
        ram[44] = "0b00111101000101110110011001101001";
        ram[45] = "0b10111110010111011011111001111111";
        ram[46] = "0b00111101001010001111000101000000";
        ram[47] = "0b10111101101000010110010101011011";
        ram[48] = "0b10111101111001100011101111101111";
        ram[49] = "0b00111101110011001101011011000011";
        ram[50] = "0b10111101011010000011100011001110";
        ram[51] = "0b10111101100111101111001000100110";
        ram[52] = "0b00111101011010111110100000000000";
        ram[53] = "0b10111101111110010111111111101001";
        ram[54] = "0b10111101100010011100110111101101";
        ram[55] = "0b10111101111001110100000110001101";
        ram[56] = "0b00111101101011101011010000101110";
        ram[57] = "0b00111101100000011111110100001000";
        ram[58] = "0b10111101110001111110001001011010";
        ram[59] = "0b10111011110101010100100100011101";
        ram[60] = "0b10111101100110100101110101111001";
        ram[61] = "0b00111100000110000000101011001110";
        ram[62] = "0b00111100001111100111011110011111";
        ram[63] = "0b00111011101011111000011101101101";
        ram[64] = "0b10111011101111100001001101001100";
        ram[65] = "0b10111101101101100101010101101010";
        ram[66] = "0b00111101101111111011111000011001";
        ram[67] = "0b00111101100111011110111110101101";
        ram[68] = "0b10111101111000000100101001110011";
        ram[69] = "0b10111101010111111110011011110000";
        ram[70] = "0b00111101100000101101100000000111";
        ram[71] = "0b10111100000000101101001010000011";
        ram[72] = "0b10111100100101001101000110110100";
        ram[73] = "0b00111101000000100010000101111000";
        ram[74] = "0b10111110001110111011110001101111";
        ram[75] = "0b00111101100101100111011110001011";
        ram[76] = "0b10111101111101010001011100011110";
        ram[77] = "0b00111100110000100000100010000011";
        ram[78] = "0b10111101100111101001001011110000";
        ram[79] = "0b00111101001010100000111011111101";
        ram[80] = "0b00111101110011101100101111111011";
        ram[81] = "0b00111110000101011110100101011011";
        ram[82] = "0b10111101001001010110010110000000";
        ram[83] = "0b00111110000011011000000110101110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_22) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_22_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_22) {
meminst = new inference_mult_1_120_120_84_s_W4_22_ram("inference_mult_1_120_120_84_s_W4_22_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_22() {
    delete meminst;
}


};//endmodule
#endif
