// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_16_H__
#define __inference_mult_1_120_120_84_s_W4_16_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_16_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_16_ram) {
        ram[0] = "0b00111100111010000101000010000001";
        ram[1] = "0b10111101101110000000100001101010";
        ram[2] = "0b00111100000000001110011101000110";
        ram[3] = "0b00111100100100011111100111111110";
        ram[4] = "0b00111100101011010111010011100011";
        ram[5] = "0b10111100101101000011101000101111";
        ram[6] = "0b00111100111101000011110011101001";
        ram[7] = "0b10111101110100110110011110100001";
        ram[8] = "0b00111100111110010011111101010001";
        ram[9] = "0b10111101101101010111011101000110";
        ram[10] = "0b10111101110001011111001100101001";
        ram[11] = "0b00111101110110011101011011110001";
        ram[12] = "0b00111101101011011110101010001001";
        ram[13] = "0b00111101000100001001110111111000";
        ram[14] = "0b00111110000001010101110101011111";
        ram[15] = "0b00111011001101110110111110011000";
        ram[16] = "0b10111101110010111010111001000111";
        ram[17] = "0b10111101101011001110111011100001";
        ram[18] = "0b00111100010010110011000000010101";
        ram[19] = "0b10111101111010110110000001101011";
        ram[20] = "0b10111101011000000110101101100000";
        ram[21] = "0b00111100110110010001110101110011";
        ram[22] = "0b10111100010001001001111010010110";
        ram[23] = "0b00111101110001100110111100011010";
        ram[24] = "0b00111100111101011010101011011101";
        ram[25] = "0b00111101100110101011111111111101";
        ram[26] = "0b10111101000010011100111100000110";
        ram[27] = "0b00111100111110000110011110000101";
        ram[28] = "0b10111011111000110011111001101001";
        ram[29] = "0b00111101010101100011000100010100";
        ram[30] = "0b00111110010001000000010110110100";
        ram[31] = "0b00111101001110111110101011111101";
        ram[32] = "0b10111101110001010000101010001001";
        ram[33] = "0b10111101101001001111000110000111";
        ram[34] = "0b10111101101111000001110101010010";
        ram[35] = "0b10111110010010111111001010110010";
        ram[36] = "0b00111101100101101111111010100111";
        ram[37] = "0b10111101010000011110010011110111";
        ram[38] = "0b10111101100010000000001110010111";
        ram[39] = "0b00111110000010011100110000110010";
        ram[40] = "0b00111101101111010000100110010001";
        ram[41] = "0b00111101011111100000111000111110";
        ram[42] = "0b10111110000110101110010010110000";
        ram[43] = "0b00111110000111001000001100100011";
        ram[44] = "0b00111101111000011100111001101100";
        ram[45] = "0b00111101110000001001001101101110";
        ram[46] = "0b10111101010110100101100000100000";
        ram[47] = "0b00111110000001101001010101010011";
        ram[48] = "0b10111110001001110001100111111000";
        ram[49] = "0b10111100101100111001001010011111";
        ram[50] = "0b10111101111001100000100000000111";
        ram[51] = "0b10111100000110111101110001101010";
        ram[52] = "0b10111100011100100011011101010101";
        ram[53] = "0b00111101000111101011001011011110";
        ram[54] = "0b10111110001111010001001000000010";
        ram[55] = "0b10111101000011100101000110111000";
        ram[56] = "0b10111101100001100001111100100110";
        ram[57] = "0b00111110001001011000001011011100";
        ram[58] = "0b10111101011100101110000101101001";
        ram[59] = "0b10111101110010001111000000001100";
        ram[60] = "0b10111101001111100100000001111000";
        ram[61] = "0b00111110000010100111111110000000";
        ram[62] = "0b00111110001110001010010100000101";
        ram[63] = "0b00111101100111010111010011010110";
        ram[64] = "0b00111100100110001000001101001111";
        ram[65] = "0b00111101000110110101000100101010";
        ram[66] = "0b10111110000010010110001101010110";
        ram[67] = "0b00111100011010000110100111100001";
        ram[68] = "0b00111101100100001011110010111110";
        ram[69] = "0b00111100110000110100011100010010";
        ram[70] = "0b10111101100101000101011011000010";
        ram[71] = "0b00111101111010010000011000000011";
        ram[72] = "0b10111110000001110111010111111011";
        ram[73] = "0b00111101001110010110100010000111";
        ram[74] = "0b00111100001000011101101001010000";
        ram[75] = "0b00111011011110101110110100011100";
        ram[76] = "0b10111110000001100111101101011111";
        ram[77] = "0b00111101010000010000000100000010";
        ram[78] = "0b10111101001111011010011100101010";
        ram[79] = "0b10111011110111111011110111010110";
        ram[80] = "0b10111101110101011111100000001010";
        ram[81] = "0b10111100100000100110010010010100";
        ram[82] = "0b00111100110000000011001110010111";
        ram[83] = "0b00111100001101011011000111111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_16) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_16_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_16) {
meminst = new inference_mult_1_120_120_84_s_W4_16_ram("inference_mult_1_120_120_84_s_W4_16_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_16() {
    delete meminst;
}


};//endmodule
#endif
