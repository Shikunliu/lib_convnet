// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_1_2_4_H__
#define __inference_conv2d_f3_1_2_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_1_2_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_1_2_4_ram) {
        ram[0] = "0b00111110000100101011111001001001";
        ram[1] = "0b10111101111101111110011001110001";
        ram[2] = "0b10111101001001111100001111111111";
        ram[3] = "0b00111101111100011100011001001100";
        ram[4] = "0b00111101111000101110111011001000";
        ram[5] = "0b10111101101100010111111101011100";
        ram[6] = "0b10111101100001011100010011101011";
        ram[7] = "0b10111101101100011110101101111000";
        ram[8] = "0b10111011101000110111000001011101";
        ram[9] = "0b10111101001110001011011001000101";
        ram[10] = "0b10111101111101010010110000010111";
        ram[11] = "0b00111110001001100100001111001100";
        ram[12] = "0b00111101110011101111011001110011";
        ram[13] = "0b10111101011101101010101100001000";
        ram[14] = "0b00111110001111111000010000000010";
        ram[15] = "0b10111101100001100000110011001101";
        ram[16] = "0b10111101110100100001000101000101";
        ram[17] = "0b10111110000000010001011001100110";
        ram[18] = "0b10111110000000111101101011111001";
        ram[19] = "0b00111101001011101100101000110011";
        ram[20] = "0b00111110000110101100100111110011";
        ram[21] = "0b00111101101000110011011111011110";
        ram[22] = "0b10111101111010101001010001111001";
        ram[23] = "0b10111101100110001011000010011011";
        ram[24] = "0b00111101000100010001110001101101";
        ram[25] = "0b10111101000111001011100110101010";
        ram[26] = "0b10111011000000101011101011011011";
        ram[27] = "0b00111101001011000110001111110001";
        ram[28] = "0b10111110000000101101111100001101";
        ram[29] = "0b00111101010010111000111101001011";
        ram[30] = "0b00111101100101100000101011001111";
        ram[31] = "0b10111101100110111100010100001000";
        ram[32] = "0b10111110000101010101101101000110";
        ram[33] = "0b10111100100000001001001100111000";
        ram[34] = "0b10111101101011100001011000110110";
        ram[35] = "0b10111011100011011110011101110100";
        ram[36] = "0b10111110000101101101000011010101";
        ram[37] = "0b00111101100000110110101101100111";
        ram[38] = "0b10111101110110101100010101111110";
        ram[39] = "0b00111010100010111011010011111111";
        ram[40] = "0b10111101010000101100111111110100";
        ram[41] = "0b00111101100001110111101100011111";
        ram[42] = "0b00111100110111111001100011101101";
        ram[43] = "0b00111100111110001100011010111011";
        ram[44] = "0b10111101101111110010010110010101";
        ram[45] = "0b00111101111011101111010011100000";
        ram[46] = "0b00111101001001110111010000011000";
        ram[47] = "0b10111110010100011111110101011001";
        ram[48] = "0b00111101110101000011011000110011";
        ram[49] = "0b00111101011010000011101111110100";
        ram[50] = "0b10111101111011001011100001011010";
        ram[51] = "0b00111101000011001101011010001101";
        ram[52] = "0b10111101111010010101001110011100";
        ram[53] = "0b10111101100101000010010010100010";
        ram[54] = "0b00111011110100011000011110000111";
        ram[55] = "0b00111101110110101001000000000100";
        ram[56] = "0b00111100110010101000111010011010";
        ram[57] = "0b00111101000111000010100100010001";
        ram[58] = "0b10111101101011011101110001101111";
        ram[59] = "0b10111101000011001100000011110011";
        ram[60] = "0b00111100010001101100111111001000";
        ram[61] = "0b00111101101001010000101100110111";
        ram[62] = "0b10111100101101111100001111110001";
        ram[63] = "0b10111101011111011010010000000101";
        ram[64] = "0b10111100100011011011100110010010";
        ram[65] = "0b00111101001011101011110011111100";
        ram[66] = "0b10111110000110111010001010111110";
        ram[67] = "0b00111101111100000010000101001011";
        ram[68] = "0b00111010111101001101100001011010";
        ram[69] = "0b00111101001101011100111000011000";
        ram[70] = "0b00111101101011100111101111010001";
        ram[71] = "0b10111110000110001010000011010011";
        ram[72] = "0b00111101101110010101110001101010";
        ram[73] = "0b10111101100010101110011010100001";
        ram[74] = "0b00111100111001110101001111001100";
        ram[75] = "0b10111101110000111011010001111101";
        ram[76] = "0b00111101110010011010111100001011";
        ram[77] = "0b00111110011101101110011110100011";
        ram[78] = "0b10111011110110001110001000011001";
        ram[79] = "0b00111101000001110100011101101101";
        ram[80] = "0b10111101111100110110111101111110";
        ram[81] = "0b00111101000100111000011011000110";
        ram[82] = "0b10111100010110000010100110001101";
        ram[83] = "0b00111101110111110001010110100101";
        ram[84] = "0b10111110000010010011000100000001";
        ram[85] = "0b10111101101001101110111110101001";
        ram[86] = "0b10111010001110100001001111010001";
        ram[87] = "0b00111101111011111000011010100001";
        ram[88] = "0b10111101110001110011010111000010";
        ram[89] = "0b10111110000000000101111011100101";
        ram[90] = "0b00111101101011101011010101010101";
        ram[91] = "0b10111101011110100000001000111111";
        ram[92] = "0b10111101101101001001110000111010";
        ram[93] = "0b10111110001110011110010101011100";
        ram[94] = "0b10111101010010110111110110010010";
        ram[95] = "0b10111110010100000100001000001111";
        ram[96] = "0b10111101000101111100011111101101";
        ram[97] = "0b10111101101001010001011110110010";
        ram[98] = "0b10111101100110001000111000001110";
        ram[99] = "0b10111101010110001110001101011100";
        ram[100] = "0b10111101001110111011110010001010";
        ram[101] = "0b00111101110001110100011001100000";
        ram[102] = "0b10111110001101000001000111000011";
        ram[103] = "0b10111100110010101110110011000011";
        ram[104] = "0b00111101101110000010010010101101";
        ram[105] = "0b00111101010001100101100111101100";
        ram[106] = "0b10111100001101110100110010011101";
        ram[107] = "0b10111101111111001111111101100101";
        ram[108] = "0b00111110010001101100001011110000";
        ram[109] = "0b10111101111111011100000011011011";
        ram[110] = "0b10111100110010101011011010101000";
        ram[111] = "0b00111100111000111010101001011111";
        ram[112] = "0b10111101101010110000000111110001";
        ram[113] = "0b00111101100101100000100010000000";
        ram[114] = "0b00111101010100010110101101111101";
        ram[115] = "0b10111100111010001011101000110011";
        ram[116] = "0b00111101011100111111110111100100";
        ram[117] = "0b10111101100110001100001010100100";
        ram[118] = "0b00111101011011000110010001000010";
        ram[119] = "0b10111101001110010000110110011101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_1_2_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_1_2_4_ram* meminst;


SC_CTOR(inference_conv2d_f3_1_2_4) {
meminst = new inference_conv2d_f3_1_2_4_ram("inference_conv2d_f3_1_2_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_1_2_4() {
    delete meminst;
}


};//endmodule
#endif
