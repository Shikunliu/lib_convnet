// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_4_2_0_H__
#define __inference_conv2d_f3_4_2_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_4_2_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_4_2_0_ram) {
        ram[0] = "0b10111110011001000111110011111010";
        ram[1] = "0b00111110000010001100110110100111";
        ram[2] = "0b00111101000000111111111110111010";
        ram[3] = "0b10111101101001010011001110010110";
        ram[4] = "0b00111101011100011000110001101010";
        ram[5] = "0b10111101111010101111010011110001";
        ram[6] = "0b10111110001010000101101001001111";
        ram[7] = "0b10111110010010001011011010010101";
        ram[8] = "0b10111101111000000011010011110100";
        ram[9] = "0b10111101010001111111011010001001";
        ram[10] = "0b00111101010010110110110000001111";
        ram[11] = "0b00111101010100110000101001101001";
        ram[12] = "0b10111101100000001011111001011110";
        ram[13] = "0b10111110000011110111110001100111";
        ram[14] = "0b10111101101111011101110011101000";
        ram[15] = "0b10111101000101110110001110101111";
        ram[16] = "0b00111101011101110000001110100010";
        ram[17] = "0b00111101111011000000011000011000";
        ram[18] = "0b10111110001101010111100000011100";
        ram[19] = "0b10111110001101100011101111101111";
        ram[20] = "0b10111100110100101110001010010001";
        ram[21] = "0b00111101111110100000100011000000";
        ram[22] = "0b10111101110010001010100110110000";
        ram[23] = "0b00111101101011111011010001011000";
        ram[24] = "0b10111101010011011010001000101111";
        ram[25] = "0b10111101100000011010011101001111";
        ram[26] = "0b00111101100011000100010111100111";
        ram[27] = "0b00111101001011011100010111110001";
        ram[28] = "0b10111110000010001011100110111011";
        ram[29] = "0b00111101001100001110101111000110";
        ram[30] = "0b10111100000000111100000001010100";
        ram[31] = "0b10111101011100011010101100111110";
        ram[32] = "0b00111100101000001111001010111111";
        ram[33] = "0b00111011110110001010111111011010";
        ram[34] = "0b10111100000000011001001001110010";
        ram[35] = "0b00111101110111011000011110110101";
        ram[36] = "0b00111011110000000101001111011000";
        ram[37] = "0b10111101100101110000111000000100";
        ram[38] = "0b00111101111101100111011111110111";
        ram[39] = "0b00111110010100111111001011010100";
        ram[40] = "0b10111011111000000111110011101101";
        ram[41] = "0b00111110100111101001110111011000";
        ram[42] = "0b00111101101110000101101111100010";
        ram[43] = "0b10111110010011000001000011011000";
        ram[44] = "0b00111101100001001011110010010011";
        ram[45] = "0b00111101101000111101011010010001";
        ram[46] = "0b10111100010101011110001010001011";
        ram[47] = "0b10111101110111110011101101100100";
        ram[48] = "0b00111101101100000010100110000110";
        ram[49] = "0b10111101110111010001001111010111";
        ram[50] = "0b10111101111100111000101101001000";
        ram[51] = "0b10111101000100100011101010010101";
        ram[52] = "0b10111101100111011011000000111100";
        ram[53] = "0b10111101101100010010100100000010";
        ram[54] = "0b10111101011000011110111010011101";
        ram[55] = "0b00111101010111000111111010000110";
        ram[56] = "0b10111101110001010101011111000011";
        ram[57] = "0b10111101000100000011110010001110";
        ram[58] = "0b10111101110111101001011000111110";
        ram[59] = "0b10111101010000111101001001010010";
        ram[60] = "0b10111101001011101010001010101011";
        ram[61] = "0b00111101010110011011101000110110";
        ram[62] = "0b00111101101111011101011101110100";
        ram[63] = "0b10111110001000010100010100001111";
        ram[64] = "0b00111101001000011011011000110011";
        ram[65] = "0b10111101101011101000111100110111";
        ram[66] = "0b10111101101000101001001111000100";
        ram[67] = "0b00111110011100011101111000100111";
        ram[68] = "0b10111101110100101010001100000101";
        ram[69] = "0b00111101010010100001111001001100";
        ram[70] = "0b00111101000011000000111011100111";
        ram[71] = "0b10111110011100101110100111001101";
        ram[72] = "0b10111110001100101101001000110101";
        ram[73] = "0b00111101011110001101100000001000";
        ram[74] = "0b10111101101010110111000001101001";
        ram[75] = "0b00111100000100110101111010000010";
        ram[76] = "0b10111110001000001101011001101111";
        ram[77] = "0b10111101101100010111111111010101";
        ram[78] = "0b00111101001101111000101100011100";
        ram[79] = "0b00111101001111111011100110111111";
        ram[80] = "0b10111100000101000100000001101001";
        ram[81] = "0b10111011101001111110111111011110";
        ram[82] = "0b10111101101101111010011101111001";
        ram[83] = "0b00111101011110110000001011110000";
        ram[84] = "0b10111110000010001001100001110000";
        ram[85] = "0b00111101100000000100010101111000";
        ram[86] = "0b10111101100101101010101010000001";
        ram[87] = "0b00111101010110110010000100111110";
        ram[88] = "0b00111101101000010010011001010110";
        ram[89] = "0b00111100110011001001010001100011";
        ram[90] = "0b00111101101001111100111110010101";
        ram[91] = "0b00111101101100010101100110011100";
        ram[92] = "0b00111110010100000001101101000011";
        ram[93] = "0b10111110011110011011011110111111";
        ram[94] = "0b10111101101001001101000100111011";
        ram[95] = "0b00111101101100101010111011000100";
        ram[96] = "0b10111101111010011010000110111010";
        ram[97] = "0b00111101101110001011011100110110";
        ram[98] = "0b00111101101101011101011001000110";
        ram[99] = "0b00111100101001100100010001101101";
        ram[100] = "0b00111101110010010010101000111110";
        ram[101] = "0b10111101001101111011111010011000";
        ram[102] = "0b10111100110010111100011000111101";
        ram[103] = "0b10111101101111110100110111110100";
        ram[104] = "0b10111101000011001011010001000011";
        ram[105] = "0b10111100110100001001010001101101";
        ram[106] = "0b00111101011111100111101010001111";
        ram[107] = "0b10111110000011000110100111111001";
        ram[108] = "0b00111101110011110101101110100011";
        ram[109] = "0b10111101110111111001000001010100";
        ram[110] = "0b00111101100111100010001010100011";
        ram[111] = "0b10111101011011101101111101100001";
        ram[112] = "0b10111100100101011111111110110001";
        ram[113] = "0b00111100011001110101001010001010";
        ram[114] = "0b00111101111110011001110101000101";
        ram[115] = "0b00111110001010000011010110011100";
        ram[116] = "0b00111110001110010001111100101110";
        ram[117] = "0b00111110001100011011110000010010";
        ram[118] = "0b00111101100111101011110001000001";
        ram[119] = "0b00111110001010111010010111100011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_4_2_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_4_2_0_ram* meminst;


SC_CTOR(inference_conv2d_f3_4_2_0) {
meminst = new inference_conv2d_f3_4_2_0_ram("inference_conv2d_f3_4_2_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_4_2_0() {
    delete meminst;
}


};//endmodule
#endif
