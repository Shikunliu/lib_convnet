// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_0_8_H__
#define __inference_conv2d_f3_0_0_8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_0_8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_0_8_ram) {
        ram[0] = "0b00111101011101011101000011101101";
        ram[1] = "0b00111101111000001100100101010100";
        ram[2] = "0b10111101010010110011000010110110";
        ram[3] = "0b10111101100111001001111001011001";
        ram[4] = "0b00111101100011110111010001100010";
        ram[5] = "0b10111110010000101101011111111001";
        ram[6] = "0b10111100101010110101111100101001";
        ram[7] = "0b10111110100000000010011110110111";
        ram[8] = "0b10111110011100001101101101101010";
        ram[9] = "0b10111100100000110101110001110110";
        ram[10] = "0b10111011001111011101011101100111";
        ram[11] = "0b00111101010101110111100011111000";
        ram[12] = "0b00111101100110111000100001000100";
        ram[13] = "0b00111101110000111101101000010101";
        ram[14] = "0b00111101111100100001111111110011";
        ram[15] = "0b10111011011011010111110101000110";
        ram[16] = "0b00111110001001000101111101011011";
        ram[17] = "0b00111110010110001000000000001111";
        ram[18] = "0b10111110100111110100101010011001";
        ram[19] = "0b00111100110000110111010101101011";
        ram[20] = "0b10111101101111001100010101101000";
        ram[21] = "0b10111110001011101001001001001111";
        ram[22] = "0b10111110011111100101001011011111";
        ram[23] = "0b00111100101001001000110110110100";
        ram[24] = "0b10111101001011000000010010000110";
        ram[25] = "0b00111101101011001100111111100101";
        ram[26] = "0b10111110000101010101100110110100";
        ram[27] = "0b10111101110111000000110010100110";
        ram[28] = "0b00111101001111101011100011110011";
        ram[29] = "0b10111101111110100001000110101001";
        ram[30] = "0b00111011000110110010001000110000";
        ram[31] = "0b10111110000000001011011001110100";
        ram[32] = "0b10111110000000010011000011100000";
        ram[33] = "0b00111101011001110100010011001110";
        ram[34] = "0b00111011101011000000000001100100";
        ram[35] = "0b00111101101001000000111010010000";
        ram[36] = "0b00111101110010100111101101110111";
        ram[37] = "0b10111100011001011110100111010100";
        ram[38] = "0b00111101010101100110101110110010";
        ram[39] = "0b10111101000111011100100100111111";
        ram[40] = "0b10111101100011101001011011101100";
        ram[41] = "0b00111110001000001001000101111101";
        ram[42] = "0b00111100101101111100111000000010";
        ram[43] = "0b10111101110011110001110111000101";
        ram[44] = "0b00111011110110001000111100111000";
        ram[45] = "0b10111101111001101000111111010010";
        ram[46] = "0b10111101110110110011110100001000";
        ram[47] = "0b10111101111110100000111110010001";
        ram[48] = "0b10111110000101000011011000110011";
        ram[49] = "0b10111101011010010100111010010011";
        ram[50] = "0b10111101011101101000001010101001";
        ram[51] = "0b00111101101110010000000100110001";
        ram[52] = "0b10111100110000110100011001110001";
        ram[53] = "0b10111101110001010110001111100000";
        ram[54] = "0b00111110001000010000101000010011";
        ram[55] = "0b00111100111010100101010111011111";
        ram[56] = "0b00111101100000111001110111010111";
        ram[57] = "0b00111101010111000100111001001010";
        ram[58] = "0b00111101010010110001100010110010";
        ram[59] = "0b00111110000001111111011100111000";
        ram[60] = "0b10111100101000001000010100010000";
        ram[61] = "0b10111101010100110101001000000111";
        ram[62] = "0b10111101100111001110001000110001";
        ram[63] = "0b00111101001001100000011011000101";
        ram[64] = "0b00111110000000101110111010000101";
        ram[65] = "0b10111101011110011001001011111110";
        ram[66] = "0b10111110000011111110100111111011";
        ram[67] = "0b10111110001011011101010110010001";
        ram[68] = "0b10111011101101110011101101101011";
        ram[69] = "0b00111101001100100110101010011011";
        ram[70] = "0b00111110001011111111001000011011";
        ram[71] = "0b10111110001011000001000001010010";
        ram[72] = "0b10111110000000010011110000100101";
        ram[73] = "0b10111100111110111110111100101111";
        ram[74] = "0b10111110000100010101100001110101";
        ram[75] = "0b00111100100000010100011101011110";
        ram[76] = "0b10111110100001001111010010000100";
        ram[77] = "0b00111101011000100110111010100101";
        ram[78] = "0b10111101011001110001111001010010";
        ram[79] = "0b00111101111011101110011010111000";
        ram[80] = "0b00111100010110101000110010101001";
        ram[81] = "0b10111001000000110011111010111001";
        ram[82] = "0b00111101110011010011111100011000";
        ram[83] = "0b00111100000101110000110110101110";
        ram[84] = "0b00111101100001001010111011100100";
        ram[85] = "0b10111101110001001111101001111110";
        ram[86] = "0b10111100100111111010000101010000";
        ram[87] = "0b00111011010001011010100001101011";
        ram[88] = "0b10111100111001010110011011000010";
        ram[89] = "0b00111101111101000111101011100001";
        ram[90] = "0b10111100001001101100101000000100";
        ram[91] = "0b00111011000011001010000000001100";
        ram[92] = "0b10111101101110011001011000100100";
        ram[93] = "0b00111100001100011111111111000010";
        ram[94] = "0b10111101101010001111111000011001";
        ram[95] = "0b10111110001111110000101101101011";
        ram[96] = "0b00111101110011011001100111001100";
        ram[97] = "0b10111011100011110000110000100010";
        ram[98] = "0b10111101111111010111001101000011";
        ram[99] = "0b10111101110001100001010111011111";
        ram[100] = "0b10111011101011101100001101110111";
        ram[101] = "0b00111100011100011011001110100010";
        ram[102] = "0b00111011011110000111101111111101";
        ram[103] = "0b00111101101000011101000111101111";
        ram[104] = "0b00111101011100011101010011011111";
        ram[105] = "0b00111110010111000011100011110011";
        ram[106] = "0b10111100011101001010011100000110";
        ram[107] = "0b10111110000001101001101001001110";
        ram[108] = "0b00111100110011001100001001010000";
        ram[109] = "0b10111101010011100111000110011000";
        ram[110] = "0b10111101010000010110110101010011";
        ram[111] = "0b10111101110001100101001001101101";
        ram[112] = "0b00111101110000100000001000010000";
        ram[113] = "0b00111110000000110011000001010001";
        ram[114] = "0b10111101110011000110010101101001";
        ram[115] = "0b00111110000010001110010001110101";
        ram[116] = "0b00111110001001111000011101001000";
        ram[117] = "0b00111101100001011111111111011001";
        ram[118] = "0b10111100000100111100010010000011";
        ram[119] = "0b00111101011100111101001100000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_0_8) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_0_8_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_0_8) {
meminst = new inference_conv2d_f3_0_0_8_ram("inference_conv2d_f3_0_0_8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_0_8() {
    delete meminst;
}


};//endmodule
#endif
