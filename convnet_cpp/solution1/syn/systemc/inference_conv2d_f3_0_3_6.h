// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_0_3_6_H__
#define __inference_conv2d_f3_0_3_6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_0_3_6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_0_3_6_ram) {
        ram[0] = "0b00111101100101000010101101001011";
        ram[1] = "0b00111100110111100110010001101111";
        ram[2] = "0b10111101100110101100111011111011";
        ram[3] = "0b10111101001000111110011011111010";
        ram[4] = "0b10111101100111100010100010000010";
        ram[5] = "0b10111011000010010100110001000100";
        ram[6] = "0b00111100111110001111100011011010";
        ram[7] = "0b00111110000110110111101001011111";
        ram[8] = "0b00111100101100001110011101011110";
        ram[9] = "0b00111100110011100100101110111101";
        ram[10] = "0b00111101010011000001001111110000";
        ram[11] = "0b10111101101000100111011011010011";
        ram[12] = "0b10111101101110010111011111001001";
        ram[13] = "0b00111101101010011001110101000101";
        ram[14] = "0b00111110001001010000110001011111";
        ram[15] = "0b00111110010011000101000010001011";
        ram[16] = "0b10111100100101110110000011011010";
        ram[17] = "0b10111101010101111011110110001100";
        ram[18] = "0b10111101101010000100100010111111";
        ram[19] = "0b10111110001100110111011110011111";
        ram[20] = "0b10111101101011000100101110111000";
        ram[21] = "0b10111011110011111010011010000110";
        ram[22] = "0b00111110000000111011010011110110";
        ram[23] = "0b00111101011001101011110010110011";
        ram[24] = "0b10111100111111110101110001101100";
        ram[25] = "0b00111100110000000100111000111001";
        ram[26] = "0b10111110000011111100111111000100";
        ram[27] = "0b10111011100011011110101001001110";
        ram[28] = "0b00111100100011000010110011111111";
        ram[29] = "0b00111101000010111100110000011100";
        ram[30] = "0b00111110000101011010111110110000";
        ram[31] = "0b10111100101100011011010001000011";
        ram[32] = "0b00111100000010101000111100100101";
        ram[33] = "0b00111101100110010110011011001100";
        ram[34] = "0b00111110011011101110000011110100";
        ram[35] = "0b00111100000100110010000110011011";
        ram[36] = "0b00111101100101100010000111000101";
        ram[37] = "0b00111100010100001111101110011011";
        ram[38] = "0b10111110000111110101001010111001";
        ram[39] = "0b10111110000101001001011101110100";
        ram[40] = "0b00111101011111011100100101011001";
        ram[41] = "0b00111101011100111110111010101111";
        ram[42] = "0b00111110000011111001000100011101";
        ram[43] = "0b10111011101110110011001111011110";
        ram[44] = "0b10111101111010000101111000111110";
        ram[45] = "0b00111101110111111010001000100111";
        ram[46] = "0b00111101001111110101110110010011";
        ram[47] = "0b00111101000101001010101010010111";
        ram[48] = "0b00111101110011011001000101101000";
        ram[49] = "0b00111101000001111101011100010100";
        ram[50] = "0b00111100110111110110001001100110";
        ram[51] = "0b00111101001011010100100000111000";
        ram[52] = "0b00111101010111011001100110100100";
        ram[53] = "0b00111101001000111101000010100101";
        ram[54] = "0b00111100101100110101010011110111";
        ram[55] = "0b00111100111100001100010001011001";
        ram[56] = "0b00111101100000010111010000001001";
        ram[57] = "0b00111101110110111010110000101110";
        ram[58] = "0b10111101111000010000010010010010";
        ram[59] = "0b00111101110111111111000011001100";
        ram[60] = "0b10111101001001101010011111010101";
        ram[61] = "0b10111101101011100011111101010000";
        ram[62] = "0b00111100110011000001011010001111";
        ram[63] = "0b00111101101010101001111000011110";
        ram[64] = "0b00111110001011011111111011111100";
        ram[65] = "0b10111100111000010000000100000010";
        ram[66] = "0b00111101110100001000010011101000";
        ram[67] = "0b10111110010110100111110101100111";
        ram[68] = "0b00111101010100100011111001110110";
        ram[69] = "0b00111101100010100000001010000011";
        ram[70] = "0b00111000111001100101010110011011";
        ram[71] = "0b00111101000011010000100110011110";
        ram[72] = "0b00111110011011110100111000000001";
        ram[73] = "0b00111101110010001001110010111100";
        ram[74] = "0b10111100111101101101101000011100";
        ram[75] = "0b00111110001001010010101001000001";
        ram[76] = "0b10111101101010011101001101101110";
        ram[77] = "0b10111110000111100110001001010110";
        ram[78] = "0b10111101101111101110000010001000";
        ram[79] = "0b00111100100001110110101100101110";
        ram[80] = "0b10111101101010110011011000000001";
        ram[81] = "0b10111101101111000111010100100100";
        ram[82] = "0b10111101001100001001101010111000";
        ram[83] = "0b10111100000100000000111100101100";
        ram[84] = "0b00111110000101001000100110001111";
        ram[85] = "0b00111101101101110100101101110110";
        ram[86] = "0b00111100100100011101010000111110";
        ram[87] = "0b10111100010100010111001001001110";
        ram[88] = "0b10111101010100110001001110001000";
        ram[89] = "0b00111101010100101101000000000001";
        ram[90] = "0b00111110010001000110001110001101";
        ram[91] = "0b10111101100001100101001100000000";
        ram[92] = "0b00111101101110011101001011110101";
        ram[93] = "0b00111110001100001100101110110000";
        ram[94] = "0b10111100001100010110000001100000";
        ram[95] = "0b10111110000110111101000110101011";
        ram[96] = "0b00111101111000000100100001011010";
        ram[97] = "0b10111100111111001011100111111010";
        ram[98] = "0b00111101100001110101010000101010";
        ram[99] = "0b00111101111000101010101000011001";
        ram[100] = "0b10111011010000111111011100111011";
        ram[101] = "0b10111101011100001001011001010000";
        ram[102] = "0b10111101100110011000001011110011";
        ram[103] = "0b10111100110001100001010111111001";
        ram[104] = "0b10111101100011001010111001010111";
        ram[105] = "0b00111101010100010111011011010000";
        ram[106] = "0b10111100011111101010111110011110";
        ram[107] = "0b00111101000100100100010111001101";
        ram[108] = "0b00111101000010011110101101110001";
        ram[109] = "0b10111101011010001110101011011011";
        ram[110] = "0b10111101001010110011100100110100";
        ram[111] = "0b00111100100111011100111100011110";
        ram[112] = "0b00111101100001000100011100000111";
        ram[113] = "0b10111110000100111001110101011110";
        ram[114] = "0b10111101000110100110001100001000";
        ram[115] = "0b10111101101001011100110010100000";
        ram[116] = "0b00111100011011100111011110101101";
        ram[117] = "0b10111101010101011001010011011000";
        ram[118] = "0b10111110000001001100110101110101";
        ram[119] = "0b10111101011001000100100001111111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_0_3_6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_0_3_6_ram* meminst;


SC_CTOR(inference_conv2d_f3_0_3_6) {
meminst = new inference_conv2d_f3_0_3_6_ram("inference_conv2d_f3_0_3_6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_0_3_6() {
    delete meminst;
}


};//endmodule
#endif
