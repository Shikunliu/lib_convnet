// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_mult_1_120_120_84_s_W4_69_H__
#define __inference_mult_1_120_120_84_s_W4_69_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_mult_1_120_120_84_s_W4_69_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_mult_1_120_120_84_s_W4_69_ram) {
        ram[0] = "0b00111101100111110001000110000000";
        ram[1] = "0b10111100100000110101110000001011";
        ram[2] = "0b10111110000110000010001001111001";
        ram[3] = "0b10111110000000011010111101111101";
        ram[4] = "0b10111110001000000110000010111011";
        ram[5] = "0b00111101111000011000001111111001";
        ram[6] = "0b00111101010001110011101101000011";
        ram[7] = "0b10111101111010010001101011111100";
        ram[8] = "0b10111101111001010000011110100111";
        ram[9] = "0b00111101110101000011011000110011";
        ram[10] = "0b00111101100100001110111111001111";
        ram[11] = "0b00111101011111010111100100000111";
        ram[12] = "0b10111110011010010101100111100110";
        ram[13] = "0b10111100001110011011110111111100";
        ram[14] = "0b10111101000001110110001010010101";
        ram[15] = "0b10111101000011000011100001010010";
        ram[16] = "0b00111100111100010111000110010010";
        ram[17] = "0b10111110000110101111101101111111";
        ram[18] = "0b00111110001010001101100001100110";
        ram[19] = "0b10111110001010111101101011010111";
        ram[20] = "0b10111101000100111110010101000000";
        ram[21] = "0b00111101110000010001100000000110";
        ram[22] = "0b00111101001001100001011111000010";
        ram[23] = "0b00111101011110010010110101111110";
        ram[24] = "0b00111101110000111010110010010011";
        ram[25] = "0b00111110001110101010011000001001";
        ram[26] = "0b00111100010110111000110010000011";
        ram[27] = "0b10111101010001010001001110110110";
        ram[28] = "0b00111110000000110011101011001101";
        ram[29] = "0b10111101110101010001011100011110";
        ram[30] = "0b00111101011011000100110000111111";
        ram[31] = "0b10111011101001100111100011100110";
        ram[32] = "0b00111110000100111111001110011101";
        ram[33] = "0b00111101010011101111000100011010";
        ram[34] = "0b00111011001000100000001001110100";
        ram[35] = "0b00111110001010111011111001000100";
        ram[36] = "0b00111110001111001011100011100001";
        ram[37] = "0b10111101000110000111101010000000";
        ram[38] = "0b00111100010111110011011100110011";
        ram[39] = "0b10111101001111000111111101000010";
        ram[40] = "0b00111101111001010111000100001001";
        ram[41] = "0b00111011101001011001111101110111";
        ram[42] = "0b10111011111010100000001010111110";
        ram[43] = "0b10111101101010010000010101111101";
        ram[44] = "0b00111101100010110001111000110100";
        ram[45] = "0b00111101001111111001111100011101";
        ram[46] = "0b10111101000010100000111101101000";
        ram[47] = "0b00111101000100111101110111001110";
        ram[48] = "0b10111101111101010111100100101001";
        ram[49] = "0b00111100110001110100000011010010";
        ram[50] = "0b00111101111010000110110101110010";
        ram[51] = "0b10111101110110011100000001100110";
        ram[52] = "0b00111010101110101101011011010110";
        ram[53] = "0b00111110001001011110101001101000";
        ram[54] = "0b00111100000111011001010010100110";
        ram[55] = "0b00111101100101110010010110110110";
        ram[56] = "0b10111101000011101100001001110000";
        ram[57] = "0b10111011100000001010010010010110";
        ram[58] = "0b00111100110010100100110110010111";
        ram[59] = "0b10111101001101011101000101110011";
        ram[60] = "0b00111101110001000001101100011000";
        ram[61] = "0b10111110011000000010010011110110";
        ram[62] = "0b10111100100011001011011000100111";
        ram[63] = "0b10111101110100110101001010101000";
        ram[64] = "0b00111101100000111010010001100101";
        ram[65] = "0b00111101111111101101110100000101";
        ram[66] = "0b10111101001000010101100110110111";
        ram[67] = "0b00111101011110001100101100100011";
        ram[68] = "0b10111100000011101110010101110110";
        ram[69] = "0b10111101100111010011110110111011";
        ram[70] = "0b00111101100110101111001010010101";
        ram[71] = "0b10111100011100110000011111001010";
        ram[72] = "0b10111101010000111100110110110101";
        ram[73] = "0b10111110000110010001011101010000";
        ram[74] = "0b00111100110101100110000000101001";
        ram[75] = "0b00111101101010000010011110101010";
        ram[76] = "0b00111100111000001000100101111000";
        ram[77] = "0b00111101101000101011110110101000";
        ram[78] = "0b10111110000011001110011101000111";
        ram[79] = "0b10111110000111100101111010101011";
        ram[80] = "0b00111110000010110101100100010100";
        ram[81] = "0b00111101011100011100100110100111";
        ram[82] = "0b00111100101111110001101110011111";
        ram[83] = "0b10111101011011110000100011100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_mult_1_120_120_84_s_W4_69) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_mult_1_120_120_84_s_W4_69_ram* meminst;


SC_CTOR(inference_mult_1_120_120_84_s_W4_69) {
meminst = new inference_mult_1_120_120_84_s_W4_69_ram("inference_mult_1_120_120_84_s_W4_69_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_mult_1_120_120_84_s_W4_69() {
    delete meminst;
}


};//endmodule
#endif
