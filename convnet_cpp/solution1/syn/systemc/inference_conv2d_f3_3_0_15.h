// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __inference_conv2d_f3_3_0_15_H__
#define __inference_conv2d_f3_3_0_15_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct inference_conv2d_f3_3_0_15_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(inference_conv2d_f3_3_0_15_ram) {
        ram[0] = "0b10111110010010001011111000101111";
        ram[1] = "0b10111110001111110101110110111100";
        ram[2] = "0b00111101011110110011000000111101";
        ram[3] = "0b00111100101000011101011000010100";
        ram[4] = "0b10111100100010100111101001000010";
        ram[5] = "0b10111110001101111010000010110110";
        ram[6] = "0b10111101000100101001111001001101";
        ram[7] = "0b00111101101100010100011011001010";
        ram[8] = "0b10111011100001010000111110001001";
        ram[9] = "0b00111110010011110011100010000010";
        ram[10] = "0b00111101110001110100111110110101";
        ram[11] = "0b00111100100001000010000011000001";
        ram[12] = "0b10111011011000010011110101000111";
        ram[13] = "0b10111101101010011000011001001110";
        ram[14] = "0b10111100111101000101100100000011";
        ram[15] = "0b10111100101000110011000001010001";
        ram[16] = "0b10111011111000111100001001110010";
        ram[17] = "0b10111101001001111101101011000000";
        ram[18] = "0b10111101001010011110001010000111";
        ram[19] = "0b10111101010001010110100010100101";
        ram[20] = "0b00111100101101100100110000100010";
        ram[21] = "0b00111110000111001100101111000000";
        ram[22] = "0b00111101010001001110100100100011";
        ram[23] = "0b10111101010000101110100110001010";
        ram[24] = "0b10111101110100111000011110011100";
        ram[25] = "0b10111101100111011111101110000110";
        ram[26] = "0b00111101000010010100001000011001";
        ram[27] = "0b10111101101000100111110010111111";
        ram[28] = "0b00111101011111010101100011010110";
        ram[29] = "0b10111101101111001010101001011011";
        ram[30] = "0b10111101101011001101010111000100";
        ram[31] = "0b00111011110110111100011000100100";
        ram[32] = "0b10111101000101110011100001000110";
        ram[33] = "0b00111101011001011111110011001111";
        ram[34] = "0b10111101010101001111001011010110";
        ram[35] = "0b00111101101110100000111110000011";
        ram[36] = "0b00111011001111101100010100100010";
        ram[37] = "0b10111101100100010110100010000000";
        ram[38] = "0b10111100000111001111111111010110";
        ram[39] = "0b10111110000100101010111000001000";
        ram[40] = "0b10111101100010010111101011000110";
        ram[41] = "0b00111101100110011111001110010001";
        ram[42] = "0b10111101011001001110001100001110";
        ram[43] = "0b00111101100110110000100001111111";
        ram[44] = "0b00111101100010110010010111000001";
        ram[45] = "0b10111101110100010010000110101011";
        ram[46] = "0b10111101100001111110110001011110";
        ram[47] = "0b00111101110110000101000101100101";
        ram[48] = "0b00111101101111000010111110010001";
        ram[49] = "0b00111100100101010100101010000000";
        ram[50] = "0b10111100001111001111110011100001";
        ram[51] = "0b10111110000011011010010001001000";
        ram[52] = "0b10111101001110000110110010001110";
        ram[53] = "0b10111101101001001001000000010000";
        ram[54] = "0b10111101100100001100011101110000";
        ram[55] = "0b10111101010011110001001110110100";
        ram[56] = "0b00111100010111101001011010001110";
        ram[57] = "0b00111101110110101111010110111010";
        ram[58] = "0b00111100100101111011011101000001";
        ram[59] = "0b10111100111101110101001101010011";
        ram[60] = "0b00111101100101010010000011111001";
        ram[61] = "0b10111101100111000010011100100000";
        ram[62] = "0b00111101111100111001101001111100";
        ram[63] = "0b00111010101110011100011100001100";
        ram[64] = "0b00111101011011001111000110011011";
        ram[65] = "0b10111101001001110000110010110100";
        ram[66] = "0b00111101001111010000010111001010";
        ram[67] = "0b10111101100110110101010100100110";
        ram[68] = "0b10111101110101000101010000010101";
        ram[69] = "0b10111110000000010110011011100000";
        ram[70] = "0b10111101111101000101001110001111";
        ram[71] = "0b00111100000111100001001001000100";
        ram[72] = "0b10111101001101110011000100111111";
        ram[73] = "0b00111100101000010110010001101001";
        ram[74] = "0b10111101010000101010110010111000";
        ram[75] = "0b10111101101000000111101110111011";
        ram[76] = "0b10111101001001011010100000010101";
        ram[77] = "0b00111101000011000011001000001000";
        ram[78] = "0b00111101011001110010101011100111";
        ram[79] = "0b00111101101000010101111100111000";
        ram[80] = "0b00111110010010110001011101001000";
        ram[81] = "0b00111101100000100100001111011101";
        ram[82] = "0b00111101010001010010010100000011";
        ram[83] = "0b10111101001101010101100101001000";
        ram[84] = "0b10111101000110001111110000110101";
        ram[85] = "0b10111100100010000101001111110111";
        ram[86] = "0b10111101110101110000001101101101";
        ram[87] = "0b00111101100001011111101111010000";
        ram[88] = "0b10111100100011011110100011000001";
        ram[89] = "0b10111010111100000111001010011001";
        ram[90] = "0b10111101110011011101110011101000";
        ram[91] = "0b10111101100010111001100111101111";
        ram[92] = "0b10111101110001100000110000101100";
        ram[93] = "0b10111101110010110010000110110111";
        ram[94] = "0b10111101111011011011101011010100";
        ram[95] = "0b00111101001101111111010101010101";
        ram[96] = "0b10111101100010010101101001101100";
        ram[97] = "0b00111100000000011000111000010101";
        ram[98] = "0b00111101111110010110100111100100";
        ram[99] = "0b10111100110000000100101101111111";
        ram[100] = "0b10111110001011010001111000010001";
        ram[101] = "0b10111101100001011000111100010011";
        ram[102] = "0b00111110001011101001101101111100";
        ram[103] = "0b00111110001010100111001110110100";
        ram[104] = "0b10111110000010010100001001001110";
        ram[105] = "0b00111101110001101100100001100100";
        ram[106] = "0b10111101100011011110101101000101";
        ram[107] = "0b10111101100111011100011110010001";
        ram[108] = "0b10111101100111100100000110111010";
        ram[109] = "0b10111100001000010101110001111100";
        ram[110] = "0b10111011011100011110011000110111";
        ram[111] = "0b00111101111010000111000100011101";
        ram[112] = "0b10111100110000101100000010100101";
        ram[113] = "0b00111101111011110001101110101100";
        ram[114] = "0b00111101010101001111100111011101";
        ram[115] = "0b00111101000100011100011011010010";
        ram[116] = "0b10111110000100000011001011011011";
        ram[117] = "0b10111101100101101111001000011111";
        ram[118] = "0b00111101001000111001100000111011";
        ram[119] = "0b10111101010111000111100000100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(inference_conv2d_f3_3_0_15) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


inference_conv2d_f3_3_0_15_ram* meminst;


SC_CTOR(inference_conv2d_f3_3_0_15) {
meminst = new inference_conv2d_f3_3_0_15_ram("inference_conv2d_f3_3_0_15_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~inference_conv2d_f3_3_0_15() {
    delete meminst;
}


};//endmodule
#endif
