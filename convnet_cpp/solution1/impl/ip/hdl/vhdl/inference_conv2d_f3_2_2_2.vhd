-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000010111010010011010111", 
    1 => "00111110000011101110101000100001", 
    2 => "10111101100001110010101100111000", 
    3 => "10111100100000111111111100110011", 
    4 => "00111100111111110111010011000000", 
    5 => "10111101010101101011011010010000", 
    6 => "00111101111001101001100000110101", 
    7 => "00111101111011111101100011110001", 
    8 => "00111100100100111010110000011010", 
    9 => "00111101001001111000110111111110", 
    10 => "00111100001000111101010000011011", 
    11 => "10111101000010111101011001100010", 
    12 => "10111011100111101100100011000011", 
    13 => "10111100101000100111000110101111", 
    14 => "00111011111110110010110111001001", 
    15 => "10111101111000100001100101100101", 
    16 => "10111101100110000111001101011111", 
    17 => "00111110000000110011110100101001", 
    18 => "00111100111001111001011001000111", 
    19 => "00111110000000011100110000010000", 
    20 => "10111101100001011101111110001110", 
    21 => "00111101110100010000111101010010", 
    22 => "00111110001100100001110100010001", 
    23 => "10111110000001101100111011111111", 
    24 => "10111100010011100010010001010000", 
    25 => "10111101100100111100000000111100", 
    26 => "00111101101110000000110000001000", 
    27 => "10111100001000000000011000011010", 
    28 => "10111100010000010101100101100111", 
    29 => "00111100010111001100100001011000", 
    30 => "00111101110010100000100011110101", 
    31 => "00111101100110010000011111001100", 
    32 => "00111101001100101011100110101100", 
    33 => "10111101011101010101101011110110", 
    34 => "00111101110101011011111011100100", 
    35 => "00111101011111110101011111001111", 
    36 => "10111101010000010001111111110000", 
    37 => "10111100101101000110111100001000", 
    38 => "10111110000000111111111001011101", 
    39 => "00111110001110000110011100100111", 
    40 => "10111110000101010110111101110110", 
    41 => "10111100001110110010110111010011", 
    42 => "10111101101110000100010110100111", 
    43 => "10111101110000011000000101110101", 
    44 => "00111101010100001000111011000011", 
    45 => "10111100101110100011101010001110", 
    46 => "10111101110000110101100110000111", 
    47 => "00111101100111101110001011001010", 
    48 => "00111101100000001110010100111000", 
    49 => "00111101100000011111101010101100", 
    50 => "00111101101010001001111011001000", 
    51 => "00111101000011001111000110011011", 
    52 => "00111100011010010110100101010000", 
    53 => "10111100010111101110101110110011", 
    54 => "10111101011100100010111101111000", 
    55 => "00111101010001101100000110100000", 
    56 => "10111101100110001111101010010101", 
    57 => "00111101110100011100111000101001", 
    58 => "00111100111100101001000010101100", 
    59 => "10111101101011001000010110001101", 
    60 => "00111101100111100010001000101010", 
    61 => "00111101110001001010101010111111", 
    62 => "10111010000010010000011010011100", 
    63 => "00111101100001010010000110011011", 
    64 => "00111110001000111111001001001110", 
    65 => "00111110001100110011011011011111", 
    66 => "10111101100100110101010111011011", 
    67 => "00111101001001011001011101101001", 
    68 => "00111100011100010100111000100001", 
    69 => "00111000010100101101101010000001", 
    70 => "00111100010111101001001001011101", 
    71 => "00111011000100100110101001010000", 
    72 => "10111101010111110110010110001011", 
    73 => "10111101001111110100011101110011", 
    74 => "10111101111101100010000001101000", 
    75 => "10111101110001111001100110101111", 
    76 => "00111100010100101010000110001110", 
    77 => "00111101010110000111001110101111", 
    78 => "10111100100001000001011101010001", 
    79 => "10111110000011011100001100110111", 
    80 => "00111010110101101101110011000110", 
    81 => "10111101000111111010111100101000", 
    82 => "10111110010100011001110101100111", 
    83 => "00111101111101010000011001010111", 
    84 => "00111100100011001100101001111110", 
    85 => "00111011110011111000110101000110", 
    86 => "00111110001000101101110011110100", 
    87 => "00111110000111110010001000111010", 
    88 => "00111100101110111000010101111101", 
    89 => "10111100111010001110010011111100", 
    90 => "10111101001101111010011000101010", 
    91 => "10111100111000011011111110100011", 
    92 => "00111101100010100011110001111111", 
    93 => "10111110000001010011000000000110", 
    94 => "10111011001001000010100000010011", 
    95 => "00111100111110101110110110100111", 
    96 => "00111101001110100100101111000001", 
    97 => "00111101110000110111000000111010", 
    98 => "10111100010110110111010010011011", 
    99 => "00111101011100100100010101100010", 
    100 => "10111100100001010101000111100100", 
    101 => "00111101100111110011101101100100", 
    102 => "00111101110000001110111010000000", 
    103 => "10111101011110110100110001010111", 
    104 => "10111100110111110010001000111010", 
    105 => "10111101110101001101001101111100", 
    106 => "00111110000011111000000110100110", 
    107 => "10111101000100100011000000011001", 
    108 => "00111101100010110001000010010010", 
    109 => "10111110001000110101101001000010", 
    110 => "10111100100010000100000111101110", 
    111 => "00111101000011001001111010101010", 
    112 => "00111100101001000010010010100010", 
    113 => "00111101101101011001010110101110", 
    114 => "10111101100110001100111110110010", 
    115 => "00111101100001101101110111010101", 
    116 => "00111110001111100100100110110010", 
    117 => "10111101101100011110110100100101", 
    118 => "10111101100000101001010001110010", 
    119 => "00111110000000010001100110001011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_2 is
    component inference_conv2d_f3_2_2_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_2_rom_U :  component inference_conv2d_f3_2_2_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


