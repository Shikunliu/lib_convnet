-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100001100000100100101110", 
    1 => "00111101110001101101010110100111", 
    2 => "10111110011110011001110000111001", 
    3 => "10111101101000011001011000011101", 
    4 => "10111110010001111111100110010100", 
    5 => "10111100001111000100110100100011", 
    6 => "00111101101001111010100101011101", 
    7 => "10111101101100100010000110100000", 
    8 => "00111101100110101100101111100100", 
    9 => "10111101000010010010000110110010", 
    10 => "10111101111000110011110001100000", 
    11 => "10111101110111101100100010010011", 
    12 => "00111101010101110101110111101011", 
    13 => "10111100100110110001111100001011", 
    14 => "10111100110110110011100011010110", 
    15 => "10111100110011011000011111011110", 
    16 => "00111101000111000001011010011100", 
    17 => "10111101100001011110000110001100", 
    18 => "10111110001100111011100010100010", 
    19 => "10111101100000010100001000101101", 
    20 => "10111101101010010111010011110100", 
    21 => "10111100110100100100011111001011", 
    22 => "10111100111010111111100110111001", 
    23 => "00111101010000101011000000010011", 
    24 => "10111101100110001011011111100101", 
    25 => "10111100100000100001011011000110", 
    26 => "10111110010110010001100001011101", 
    27 => "00111101000101010111010011011100", 
    28 => "10111100111000011001010000111010", 
    29 => "10111100001101100110110010100100", 
    30 => "10111100011000111010001011010010", 
    31 => "00111100100101001011011011011100", 
    32 => "10111110000010100111010110001010", 
    33 => "00111110001100111010100000011110", 
    34 => "10111110001010011000100001001100", 
    35 => "00111101100000000010110011100001", 
    36 => "10111101101101000110000111000100", 
    37 => "00111100111010011000101001110011", 
    38 => "10111101010101110000110101111110", 
    39 => "00111101101000100101011110100001", 
    40 => "00111101111101001011110001101010", 
    41 => "10111100101001111111100010100010", 
    42 => "00111101010110100101111000011010", 
    43 => "00111101011001001101110110000000", 
    44 => "10111101000110111010110110001011", 
    45 => "00111101101000001010111111001011", 
    46 => "10111100000001010000001111001011", 
    47 => "00111100100001111111000111010001", 
    48 => "10111110000111101010111110101011", 
    49 => "00111110001011000010101000000010", 
    50 => "00111110010110010000001000010101", 
    51 => "10111101100010111100011000100010", 
    52 => "10111100100111111100111011010010", 
    53 => "00111110001000010001110001101101", 
    54 => "00111101100111110111110001011010", 
    55 => "10111101100011000111001110000100", 
    56 => "10111110000010000111100001110101", 
    57 => "10111110001110101101011000000010", 
    58 => "10111011110000010000110010111011", 
    59 => "00111110001101111100001101010000", 
    60 => "10111101000011000101110010011010", 
    61 => "10111101000100100010111000000000", 
    62 => "10111100011000101111000011111100", 
    63 => "10111101101101010001010010001100", 
    64 => "10111011010010110001010010111100", 
    65 => "10111101000100111011110001000000", 
    66 => "00111110000110101011101001111100", 
    67 => "00111100111010111010100110011100", 
    68 => "10111101001100011111000001110011", 
    69 => "10111100000100001110011111001111", 
    70 => "10111101101010111100101000000011", 
    71 => "00111110000000101101111110010011", 
    72 => "00111101010111111001100001001100", 
    73 => "10111100100111100000000101110011", 
    74 => "00111011111110001110101110001111", 
    75 => "10111100010001001001101011001111", 
    76 => "00111100101111101101100111111011", 
    77 => "10111101100011011100110111011100", 
    78 => "00111101101000000000110010010101", 
    79 => "10111101101100100100011110110001", 
    80 => "10111101101101110100101011111101", 
    81 => "00111101000000101001001110001110", 
    82 => "10111101111100110001111101000111", 
    83 => "10111101111011001011001110100010", 
    84 => "00111100000111010110101001010100", 
    85 => "10111100100010100110010000000111", 
    86 => "00111101110101100000111000001111", 
    87 => "10111100110011111101110100100011", 
    88 => "10111101101010100110011001110000", 
    89 => "00111101110010010110101110010001", 
    90 => "00111101011010100011000011011011", 
    91 => "10111100100111000010001100010111", 
    92 => "00111101110111101010100010010111", 
    93 => "10111101110101010101010011111100", 
    94 => "10111110001010111011001010111100", 
    95 => "10111101100110000100111110101010", 
    96 => "00111101010110001010110011010101", 
    97 => "00111101111011101001010011101110", 
    98 => "10111101001101011111101110110101", 
    99 => "00111100001110110100100111101110", 
    100 => "10111100110001101000111110011100", 
    101 => "10111110010100100010110111011000", 
    102 => "10111101111111000001101111011010", 
    103 => "00111110010101110001110000010001", 
    104 => "00111101000101001111010110010000", 
    105 => "10111101001110010000001010110110", 
    106 => "10111100011111011101100110110101", 
    107 => "10111100101000101001111100110010", 
    108 => "10111101111010001101000010001001", 
    109 => "00111011110011110100001111110101", 
    110 => "10111011111111010011110010101100", 
    111 => "00111011100001000001010101001110", 
    112 => "00111110001010001111111101110110", 
    113 => "00111110001101010101001010100000", 
    114 => "10111101100000101001000110000010", 
    115 => "10111101000010110101011000100101", 
    116 => "10111101010111101100111101100100", 
    117 => "00111101010010001101010101011100", 
    118 => "00111101111111011110110001011111", 
    119 => "00111101101000110101100110000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_4 is
    component inference_conv2d_f3_4_3_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_4_rom_U :  component inference_conv2d_f3_4_3_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


