-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010101101100011011101100", 
    1 => "00111100101010001011001110110011", 
    2 => "10111100110100100110011110101100", 
    3 => "00111110001100110111001101101101", 
    4 => "10111101110100100100111000010110", 
    5 => "00111101100111100110001111101001", 
    6 => "00111100100011100000101010111010", 
    7 => "10111100100011111101010010111111", 
    8 => "00111110000101110010110110100001", 
    9 => "00111110001100111011111011101100", 
    10 => "10111101100110010010010111001001", 
    11 => "10111101110001100000110011011010", 
    12 => "00111110000011001010001010011000", 
    13 => "00111101011000000001110101000001", 
    14 => "00111100001110110110110010111110", 
    15 => "10111100010100100001010101110111", 
    16 => "00111110010001011111100111011111", 
    17 => "00111100000011111111001011111101", 
    18 => "10111100100010110101011010101011", 
    19 => "10111110000111010111101001010111", 
    20 => "10111101001110010000110000100110", 
    21 => "10111101110010000000010111110011", 
    22 => "10111101111110111100001111000110", 
    23 => "10111100101001000010001001010100", 
    24 => "00111101010011111111101110001011", 
    25 => "10111100011000000111000010000011", 
    26 => "00111101111110100010010010001001", 
    27 => "00111101001101000011000000111001", 
    28 => "00111100000011010101101100110010", 
    29 => "10111101100111101111101010100100", 
    30 => "10111101011110011001001100110100", 
    31 => "10111100111001011111100100100011", 
    32 => "10111110000011101011010000100000", 
    33 => "10111101101110010100100111110110", 
    34 => "10111101111110010010110010001100", 
    35 => "10111100100010111100110111111111", 
    36 => "00111101111001110001010011111101", 
    37 => "00111110010000110011011100100010", 
    38 => "10111011100011000001111000011011", 
    39 => "10111110001011101000110000000101", 
    40 => "10111101111001000000101111111110", 
    41 => "00111110000010010100010111111010", 
    42 => "10111110001110001100010111001010", 
    43 => "00111110010101000011011010111001", 
    44 => "00111110000011110011100111010010", 
    45 => "10111100000011110110000010010000", 
    46 => "10111110010110010001000111001111", 
    47 => "10111100101011001110101011100101", 
    48 => "10111101011100000010110010111001", 
    49 => "10111100101111001001100100001110", 
    50 => "10111011111000000011111110011011", 
    51 => "00111110011001100010001111010001", 
    52 => "10111101011101001000110101110001", 
    53 => "10111101101011110100001000101000", 
    54 => "00111101001100111000011000111111", 
    55 => "00111101100010100010011100000000", 
    56 => "10111101100110001101011100111111", 
    57 => "10111110000011001111110100001001", 
    58 => "00111101100101111010000010011011", 
    59 => "00111101100010000111000011110101", 
    60 => "10111110000100111101011001000001", 
    61 => "10111100010101001101110110101000", 
    62 => "10111101111010100110001000100100", 
    63 => "10111101010010111101101010101111", 
    64 => "10111110011111000110000111011000", 
    65 => "00111110001001011101100010010101", 
    66 => "10111100110001001001110111110100", 
    67 => "00111100100100110110010100111000", 
    68 => "10111101100000000011010000000010", 
    69 => "10111101011001000000111010011101", 
    70 => "10111101110011010100011001101111", 
    71 => "10111101111101011001101010110111", 
    72 => "10111101010000001011100100010011", 
    73 => "10111101100001101111111010100111", 
    74 => "00111110000000101111111011000101", 
    75 => "00111110000000011011011001001110", 
    76 => "00111110001110010000101010111011", 
    77 => "10111101110000000011011001101100", 
    78 => "10111101000001011110000000010100", 
    79 => "00111011110100001011100100010110", 
    80 => "00111101111100011010101010000010", 
    81 => "10111101010111100111101100010101", 
    82 => "10111100100110110000110100000001", 
    83 => "10111110000101100100001001111100", 
    84 => "10111101101100110001101110110110", 
    85 => "10111110000100010011011000011110", 
    86 => "00111100001101011001101010000001", 
    87 => "00111101100110001101010110011111", 
    88 => "10111100000000111001100000100101", 
    89 => "00111101101000010101010110000101", 
    90 => "10111101100110100001111110110110", 
    91 => "10111101110010010010011001000010", 
    92 => "00111100111010001010100100110111", 
    93 => "00111011110101110100011101111010", 
    94 => "00111101111011111111110010011000", 
    95 => "00111110000001111010100100011001", 
    96 => "00111101001101001001011011000110", 
    97 => "00111101000110010100010110000001", 
    98 => "10111101100110110011100101000001", 
    99 => "00111011010101101100101000100111", 
    100 => "00111101101000000111100100110111", 
    101 => "00111101010000110010100010001111", 
    102 => "00111100100111000101100011111100", 
    103 => "10111011000111101100001111111011", 
    104 => "00111101001100111110110010010111", 
    105 => "00111101110100010001010000001010", 
    106 => "10111101101000100010111100100111", 
    107 => "10111011111110010101000000001110", 
    108 => "10111101100011100001000001001001", 
    109 => "00111110000000010111111110000100", 
    110 => "10111100110100011101010010101001", 
    111 => "10111100111101000011101101110001", 
    112 => "00111100000011101001110011010001", 
    113 => "00111101000000010000111010001000", 
    114 => "10111001001101111000110011010010", 
    115 => "00111100000110001010000001101011", 
    116 => "00111100011000011101010100000111", 
    117 => "00111101000111101101010010000111", 
    118 => "10111101101100110010110010100101", 
    119 => "00111110001011100101000100001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_6 is
    component inference_conv2d_f3_3_2_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_6_rom_U :  component inference_conv2d_f3_3_2_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


