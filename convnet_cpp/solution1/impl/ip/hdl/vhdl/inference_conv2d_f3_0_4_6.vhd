-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110010111111100000100110", 
    1 => "10111101100001000110011110001001", 
    2 => "10111101001001100101001110000111", 
    3 => "10111101000001111101001011100011", 
    4 => "10111110010011110111011001100000", 
    5 => "10111011011100011010110001010101", 
    6 => "10111100101101010100001100001110", 
    7 => "10111101101101110001111101000100", 
    8 => "00111101000000110010011100010111", 
    9 => "00111100011101000001011010111110", 
    10 => "10111011111011101111011011000011", 
    11 => "10111101111100110111100101110100", 
    12 => "00111101001010100101011110001101", 
    13 => "00111110001110011110100000111110", 
    14 => "10111101011001100100001101100001", 
    15 => "00111101101111101111010110110111", 
    16 => "00111011100001001111110110101011", 
    17 => "00111101011111010010000111001001", 
    18 => "00111110001000011010111000101110", 
    19 => "10111110000010011110110100111001", 
    20 => "10111010001111111111110111101110", 
    21 => "10111110000100101111011011101000", 
    22 => "00111101101101101100110111011000", 
    23 => "10111101100111011001001011101110", 
    24 => "00111101011001010010011011001011", 
    25 => "10111101001100011110110111010100", 
    26 => "10111100111010010000111101011000", 
    27 => "00111100001100101001111001001101", 
    28 => "00111110011010101000001011101000", 
    29 => "00111110000010011001110101000101", 
    30 => "00111100110110110010110001110111", 
    31 => "00111100010001101101001010111000", 
    32 => "00111101110110110000010001101000", 
    33 => "00111101110001101001110001110100", 
    34 => "10111101001100111001001001101001", 
    35 => "00111100101001110011111110101010", 
    36 => "10111100110110110000000111100100", 
    37 => "00111011011001111011111110010111", 
    38 => "00111101111000111100000110001011", 
    39 => "10111101011001111011001110001000", 
    40 => "10111101100010100110000010101100", 
    41 => "00111110000000111011011100001111", 
    42 => "10111110000100100111001010000110", 
    43 => "00111101101100010001010111000101", 
    44 => "10111101101100000101110010010111", 
    45 => "00111101111100100101001011001110", 
    46 => "10111101010100000101110000000011", 
    47 => "00111100110011011010110010010001", 
    48 => "10111101110111111010001110111010", 
    49 => "10111100000100010010101010000000", 
    50 => "10111100100000000000010010011101", 
    51 => "00111110001111011011110111111001", 
    52 => "10111110001100100001010001101010", 
    53 => "00111101010101010011001110100100", 
    54 => "10111110100100001011111110100001", 
    55 => "00111110001011010011000010101101", 
    56 => "00111100111100000000111000011010", 
    57 => "00111100001111110010010000000010", 
    58 => "10111110000110000110100011111101", 
    59 => "00111101110100101101010011010100", 
    60 => "00111110000110110101101001100100", 
    61 => "10111101110100110110111101111110", 
    62 => "10111101100010011000100010111000", 
    63 => "10111101101110110000001101011100", 
    64 => "00111101111001001101100011111101", 
    65 => "10111101110011000110110101100001", 
    66 => "00111100110011001001100100110110", 
    67 => "10111110001010010000011110010110", 
    68 => "10111100011000110001101000010110", 
    69 => "00111101101001110111000101111001", 
    70 => "00111101101011000001101000010010", 
    71 => "00111101111000110001011010100000", 
    72 => "00111101100101000100001001110111", 
    73 => "00111011100011001100100001111011", 
    74 => "10111101110111001111010111110101", 
    75 => "00111101001011001100011110101001", 
    76 => "00111110000011010011111011010101", 
    77 => "10111101100010000001011100100110", 
    78 => "10111101000101010100111100011101", 
    79 => "00111011110110101101001011011111", 
    80 => "10111100000111101001101001110101", 
    81 => "10111100001010111010101010101001", 
    82 => "00111101001001100111100001010101", 
    83 => "00111101111001011011010000100100", 
    84 => "00111100110101001100001010011010", 
    85 => "00111110000100101111101111100011", 
    86 => "00111010000011010111000101010011", 
    87 => "00111101010101000010010011100110", 
    88 => "10111110000000011111110111011111", 
    89 => "10111101011011100010100111000100", 
    90 => "00111101010111010111000100001111", 
    91 => "00111100000001100110100010000101", 
    92 => "00111110000110001100000100010010", 
    93 => "00111110000110111101111010000011", 
    94 => "10111101010110011101111100011111", 
    95 => "10111011101100101000001110110110", 
    96 => "10111110010001101011010100001011", 
    97 => "10111100101011100111100010000100", 
    98 => "10111101101100101011110110110101", 
    99 => "00111100000011000011111100111110", 
    100 => "00111101100101110010110100011011", 
    101 => "00111101010101111010100100110100", 
    102 => "10111101101110011101000001001001", 
    103 => "00111101111010111100110011110011", 
    104 => "10111101101101000000111000001010", 
    105 => "10111101101111011000010100110001", 
    106 => "10111101000111000100111111000010", 
    107 => "10111101101101010100101101111111", 
    108 => "10111101000001011110011110000110", 
    109 => "10111101101000011011011011010100", 
    110 => "10111100001011010001010111100011", 
    111 => "00111101101100110000110110011100", 
    112 => "00111110010100010011101100011001", 
    113 => "10111110000100001101111001001100", 
    114 => "10111101001100100110111010110010", 
    115 => "00111100100100100111001110100000", 
    116 => "10111100100100101101010001001110", 
    117 => "10111101011010110000010011100001", 
    118 => "00111010000110010001110001111010", 
    119 => "10111110000000011111000000111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_6 is
    component inference_conv2d_f3_0_4_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_6_rom_U :  component inference_conv2d_f3_0_4_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


