-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111110101001000010001010", 
    1 => "00111101000010010111011110101110", 
    2 => "00111101100101101111100101011100", 
    3 => "10111101101010101000000100101110", 
    4 => "00111101011110010100001011000111", 
    5 => "00111101001110100001001001100101", 
    6 => "10111101001101110000110001010110", 
    7 => "10111101110001101000111110001110", 
    8 => "00111101100111101111000110101101", 
    9 => "00111101100110110000000010000111", 
    10 => "10111101110111111110100111111011", 
    11 => "10111101111011010111010010010010", 
    12 => "00111101101001000000001100010101", 
    13 => "00111101011000001001110010101000", 
    14 => "10111101100011010001110100101100", 
    15 => "00111110000110011001001100001100", 
    16 => "10111101101110001111001000010111", 
    17 => "00111101101001001111100010101000", 
    18 => "00111101011110011010000011010110", 
    19 => "00111100111100001110111111000010", 
    20 => "10111101010010011011101011001010", 
    21 => "10111101000010100001111011010010", 
    22 => "00111101100101100101001010010101", 
    23 => "10111101111010011010000010101110", 
    24 => "00111101000011101110010011110000", 
    25 => "00111101101110011010000101110111", 
    26 => "00111110001101010111110000001011", 
    27 => "00111101101001100001110101000011", 
    28 => "10111101011011110101101110111110", 
    29 => "10111101000110001001001011101111", 
    30 => "00111101100110000111001001100000", 
    31 => "10111100011110101100011101000110", 
    32 => "00111101111001101101000001001110", 
    33 => "10111101100011101111100011101010", 
    34 => "00111100110101001110011111101111", 
    35 => "00111101010011100110111011011110", 
    36 => "10111101000001101011110100011110", 
    37 => "00111101101110111111100010101100", 
    38 => "10111110001000110011010100001001", 
    39 => "10111110001001101110100010110000", 
    40 => "10111101100001111101000100110101", 
    41 => "10111100101110111111111110001011", 
    42 => "10111100111000000010111010101001", 
    43 => "00111101100111100100111010000101", 
    44 => "10111110100000011100100000100001", 
    45 => "00111100100101101110100001111010", 
    46 => "00111011001001010001110010110000", 
    47 => "10111101000110101100100010100011", 
    48 => "00111101111111000010011101100011", 
    49 => "10111010111000010111010111111100", 
    50 => "10111100100011100000101011110000", 
    51 => "00111110010000111100001111100111", 
    52 => "00111011001111100001101000101100", 
    53 => "00111101000010010011001000101000", 
    54 => "10111101010110000101100111100100", 
    55 => "10111101001110001001100001001000", 
    56 => "00111101001000011100010101100111", 
    57 => "00111101010101001111101011001110", 
    58 => "00111101111110101111111110110000", 
    59 => "00111010001011100100101000100010", 
    60 => "10111101011110100010000101001001", 
    61 => "10111100101000010011000001100111", 
    62 => "00111101100100111000110000101100", 
    63 => "00111101110011000001111011100101", 
    64 => "10111101100111100101011110001001", 
    65 => "10111100111111110000101100001101", 
    66 => "00111101100011000101110110100111", 
    67 => "10111101100110100110011100111010", 
    68 => "00111101111101111100101100101110", 
    69 => "10111101010101001011011101100010", 
    70 => "10111100101100110100100001100010", 
    71 => "10111110001100000001110110011111", 
    72 => "00111100111001001011111001011011", 
    73 => "00111101100110100011111100011110", 
    74 => "00111100100011000010111001110111", 
    75 => "10111100110110111111001000111001", 
    76 => "10111110000011011010001000101111", 
    77 => "10111101100011011011000010000000", 
    78 => "10111101110011010111010110011111", 
    79 => "10111101010001101000011110001001", 
    80 => "10111101111011010010010011100001", 
    81 => "10111101110101101110100000101001", 
    82 => "00111100111000001011111001010001", 
    83 => "10111110000010101000001001100010", 
    84 => "10111100101110000111001100001110", 
    85 => "10111101111011011101011000010111", 
    86 => "10111010010011111001100110101000", 
    87 => "10111100110111011000000010101111", 
    88 => "10111101000000101110101110001000", 
    89 => "00111101100001011101000001011001", 
    90 => "00111101101100000100100000100100", 
    91 => "10111101101011110110011011101000", 
    92 => "00111110001100100011010110110101", 
    93 => "10111101111101011111010001011110", 
    94 => "10111101101100100111110000000100", 
    95 => "00111101000011010101000011010001", 
    96 => "10111101101111101111001001101001", 
    97 => "00111101101110010000110100010111", 
    98 => "10111110010010001010100001101101", 
    99 => "10111100001001111110001010011101", 
    100 => "00111101100000100000001000101011", 
    101 => "00111101100001110110100010011101", 
    102 => "00111101000001101010100000100101", 
    103 => "10111110010010101110000110001011", 
    104 => "00111100100110100111010000100000", 
    105 => "10111101101010101000111001111111", 
    106 => "10111101000000111000100111011101", 
    107 => "10111100010100110000100001010000", 
    108 => "00111100000011000000101110111100", 
    109 => "00111101100100110100001111000100", 
    110 => "00111101100000100101110000001000", 
    111 => "10111010010010110001110010110000", 
    112 => "00111101000000001011000100011011", 
    113 => "00111101011111001000001010011101", 
    114 => "00111011011001110110111001100100", 
    115 => "10111110000110011100110110000001", 
    116 => "00111101101010110101100110001101", 
    117 => "10111101110010010110110011010011", 
    118 => "00111100101101100101001001101101", 
    119 => "10111101100001011001100110111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_10 is
    component inference_conv2d_f3_1_1_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_10_rom_U :  component inference_conv2d_f3_1_1_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


