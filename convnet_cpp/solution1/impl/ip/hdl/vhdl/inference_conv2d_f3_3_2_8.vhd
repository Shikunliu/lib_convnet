-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001011111100101000001101", 
    1 => "10111110001010001011100011110001", 
    2 => "10111101111001111011110101001001", 
    3 => "10111110000000001010110110001010", 
    4 => "00111101010100111110000001101101", 
    5 => "00111101010001101100100000111011", 
    6 => "00111110000000110110111000101111", 
    7 => "10111101110100111000111011110011", 
    8 => "10111101110100000100101000110000", 
    9 => "00111101101000010010100111011001", 
    10 => "00111101001000011111101011100010", 
    11 => "10111101011010000111000100000011", 
    12 => "00111110000111011111110001011101", 
    13 => "00111110001011111010110101101101", 
    14 => "00111110000001111101100100010010", 
    15 => "00111110001001011011011011000011", 
    16 => "10111100111111110011111001101111", 
    17 => "00111101100101111010001001001001", 
    18 => "00111101100100101101010001101001", 
    19 => "00111011111011110111100100110101", 
    20 => "00111101010101010010111101010111", 
    21 => "10111101011011001011001001111011", 
    22 => "10111100101010011010111010000101", 
    23 => "10111101011001000111100100001100", 
    24 => "10111101000101100011100011110010", 
    25 => "10111110000000100110011001110111", 
    26 => "00111011011110001100101010000010", 
    27 => "00111101000001111001011000010001", 
    28 => "10111101110111101111111000001101", 
    29 => "00111101100010101111010001011101", 
    30 => "10111101111000111011100000011011", 
    31 => "00111101111000110010011011100001", 
    32 => "00111110001111101101010100101000", 
    33 => "00111101101010111001111111110111", 
    34 => "00111101110011101011010101110000", 
    35 => "00111101000001010100110000000101", 
    36 => "10111110000111010010100111011100", 
    37 => "00111101001100000111101010000111", 
    38 => "00111011111100000111101110010011", 
    39 => "00111100100110101100110001101010", 
    40 => "00111100111100110000010010100101", 
    41 => "10111101111010010010101100111101", 
    42 => "10111110000010010101101101111001", 
    43 => "00111010111101111010111101111001", 
    44 => "10111101101011010110010001101101", 
    45 => "00111101111010010110100100011010", 
    46 => "00111101100111100101000010101011", 
    47 => "00111101110110110101001110010011", 
    48 => "10111101101000110001100111000110", 
    49 => "10111101001000000101011101011001", 
    50 => "10111100101100010110101000000101", 
    51 => "00111101000001100100111111011011", 
    52 => "10111100110100011011001110111100", 
    53 => "00111101111001010001111100111111", 
    54 => "00111101110101100100000101110000", 
    55 => "10111101110100010001100011000010", 
    56 => "10111011111111010100011100111110", 
    57 => "10111101110001110000101100100010", 
    58 => "00111110000000010100100101000001", 
    59 => "00111101001000110000111000100010", 
    60 => "10111101111010111101001010110111", 
    61 => "10111101101110111100011001110010", 
    62 => "00111101101110001100101100001000", 
    63 => "00111110000100000001101111001010", 
    64 => "00111101110101100101101100100001", 
    65 => "10111100101001100110000111111111", 
    66 => "00111101111111001001000000111111", 
    67 => "10111110000001001010000011100100", 
    68 => "00111101101011111101111010110101", 
    69 => "00111011100100110110110001101110", 
    70 => "10111100100010101001100110000001", 
    71 => "00111101110011010100011001101111", 
    72 => "10111101101001111111101101110111", 
    73 => "10111011111011100001010000000101", 
    74 => "00111101010000010000010010101101", 
    75 => "10111101110110001000011101100110", 
    76 => "10111110001110110000101110111111", 
    77 => "10111101000100010101001111100101", 
    78 => "10111100110010000011011110100111", 
    79 => "00111101100100111110111000001110", 
    80 => "00111110001100101100101111101010", 
    81 => "10111010101110101101111111100101", 
    82 => "00111101100011001001111011011111", 
    83 => "10111001101100011101011101010011", 
    84 => "10111110000111110100001001111000", 
    85 => "00111100101110010101100001111100", 
    86 => "10111110001010010010101001110011", 
    87 => "10111101110100010011000001011001", 
    88 => "10111110000010111110101110011110", 
    89 => "10111101101001011110011000101001", 
    90 => "00111100100011011010100011001011", 
    91 => "10111101010000001000100100001101", 
    92 => "10111101001000000000000101011101", 
    93 => "00111110000001011011111011100100", 
    94 => "10111110000001100100101111101100", 
    95 => "00111101011011101110110100011110", 
    96 => "10111100100000000111111001000000", 
    97 => "00111101110110011110000001100001", 
    98 => "00111101100100111111011001001010", 
    99 => "00111101000111110111101011110000", 
    100 => "00111100000010101001000100110011", 
    101 => "00111110000011111010001001101010", 
    102 => "00111101101010000111110011001111", 
    103 => "10111011100101100010011100110100", 
    104 => "00111101001110001110110101010010", 
    105 => "00111100111100101111100001111011", 
    106 => "10111100010011010000101000001001", 
    107 => "10111100110111100111100111010011", 
    108 => "10111101001000110101000100100011", 
    109 => "10111110001110011001111001010010", 
    110 => "00111101011110011011011100010001", 
    111 => "10111101110001100011100001010001", 
    112 => "10111110000011111010100011111000", 
    113 => "00111101101011100101111101110100", 
    114 => "10111101010111110010111100000101", 
    115 => "10111101011000001000010111100111", 
    116 => "00111110001010100011111001111101", 
    117 => "10111100111111101100010011001100", 
    118 => "00111110010000111011000011000100", 
    119 => "00111011111000101010001010110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_8 is
    component inference_conv2d_f3_3_2_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_8_rom_U :  component inference_conv2d_f3_3_2_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


