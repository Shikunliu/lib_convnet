-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010101111001010010001100", 
    1 => "00111101010110011000101111000010", 
    2 => "00111100101010011101010000001111", 
    3 => "10111101110011111111100011101100", 
    4 => "00111110001000001010001100001110", 
    5 => "00111101110110000100110010101101", 
    6 => "00111100100010010111111100111010", 
    7 => "00110111111010110000000010101110", 
    8 => "00111101011001011001000010011000", 
    9 => "00111101100000000110001010000100", 
    10 => "00111101110110000000010111100110", 
    11 => "00111101011101110010111001101010", 
    12 => "00111101100000100000001101100000", 
    13 => "00111011111100100011011110010101", 
    14 => "10111100000100100111111000000111", 
    15 => "10111101101110111001101100110001", 
    16 => "10111101111000110110010101000101", 
    17 => "10111110000011010101101101101000", 
    18 => "00111110001001000101111101011011", 
    19 => "00111101100000100101110110011011", 
    20 => "00111101111110100101110100101001", 
    21 => "10111101111010010101100011011010", 
    22 => "00111100101101010101110100001111", 
    23 => "00111101011001001001100010011011", 
    24 => "10111101100111011101001011110010", 
    25 => "00111101100001111011100100100100", 
    26 => "00111001110110011111100001111100", 
    27 => "10111110001010100110101000000001", 
    28 => "10111101011100100101110010101001", 
    29 => "00111100110010110000111111001001", 
    30 => "00111101001111110100000000011100", 
    31 => "00111101010100100101100101101001", 
    32 => "00111110000001011000110111011110", 
    33 => "00111101001010111010000000101100", 
    34 => "10111110001011010000001011001101", 
    35 => "00111101101111010010011111101100", 
    36 => "10111100110100001110001010100110", 
    37 => "00111101100010001001001011101111", 
    38 => "10111101001011001001010010011001", 
    39 => "00111100011101011110001011011011", 
    40 => "10111101101000000001010100100001", 
    41 => "10111101101100110110101111000101", 
    42 => "00111101011110001001010010000001", 
    43 => "00111100010101101010011101000001", 
    44 => "10111101101110111000101101001110", 
    45 => "00111101001101110100010111100111", 
    46 => "10111110000010101101110010010000", 
    47 => "10111101100010010100110101111001", 
    48 => "00111101111111011100101001001011", 
    49 => "00111101100001111101011001011000", 
    50 => "00111101101111101001100000100001", 
    51 => "00111110000000011101011100010011", 
    52 => "00111100111100110111010010100010", 
    53 => "10111101111100101110100111001101", 
    54 => "10111101011111010011101110110000", 
    55 => "10111101001001001101100100011000", 
    56 => "00111101001110011110101101111110", 
    57 => "10111101100110001011110110000001", 
    58 => "10111110001101000101100100010000", 
    59 => "10111101100000111111011000000111", 
    60 => "10111101011011111111011011010011", 
    61 => "00111110000001100110110101111010", 
    62 => "00111101100100000111101010111100", 
    63 => "00111101011011111011001100110001", 
    64 => "10111101110001010010010100011110", 
    65 => "10111101100111001010001010110011", 
    66 => "00111101110100110000100000110101", 
    67 => "10111110000001101101001011101101", 
    68 => "10111110001101101111111000101110", 
    69 => "00111110000011110011001100000001", 
    70 => "10111100011000011010100111010100", 
    71 => "00111011111000100000101110001110", 
    72 => "10111100011100001010101011111000", 
    73 => "10111100101001000011011000001010", 
    74 => "00111110001100000101001111100011", 
    75 => "10111110001011101001111111110001", 
    76 => "00111100110100010110101100101101", 
    77 => "10111101101001100111100011110110", 
    78 => "00111101111001001010111100001100", 
    79 => "10111100000100111110010101000101", 
    80 => "00111100100011011010101001000010", 
    81 => "10111101110011001110100000010000", 
    82 => "10111101001100000101101101100010", 
    83 => "10111100101010001010010100000101", 
    84 => "10111101101000001001011110100000", 
    85 => "00111100110010110010001011011110", 
    86 => "10111101000101100001101100001111", 
    87 => "00111101000001101010010101101011", 
    88 => "10111101100110101110001011110101", 
    89 => "00111101000011101101111100101011", 
    90 => "00111110000000101111001100111101", 
    91 => "00111110000010100110111001110110", 
    92 => "00111101000101111110101001101101", 
    93 => "00111110001111011100110110110011", 
    94 => "10111101110000011100101010011000", 
    95 => "00111101010101011011110010010101", 
    96 => "00111100110111001111001110001011", 
    97 => "00111100010000101111110101000000", 
    98 => "10111100100000011010000001111111", 
    99 => "10111101011100001000101111010100", 
    100 => "00111101011010110011001000010011", 
    101 => "00111001011101000001001111111101", 
    102 => "00111100101001111011010010110000", 
    103 => "10111101000110111110100001111001", 
    104 => "00111110001100011000001000100011", 
    105 => "10111011110100111000100110010101", 
    106 => "00111101101000001010111101000101", 
    107 => "10111110000000100100111110101001", 
    108 => "10111101001010100110110010100000", 
    109 => "10111101001111000000000001100001", 
    110 => "10111100001111111001111101010010", 
    111 => "10111101000101000011101010011010", 
    112 => "00111101001110011101001100101011", 
    113 => "00111110010000010111011001010111", 
    114 => "00111110001101000001111100100001", 
    115 => "00111110001110000011011111111000", 
    116 => "00111101001111001000100011001101", 
    117 => "10111100101110010101110001000010", 
    118 => "10111101111001011001100101100111", 
    119 => "00111101110001010111110101011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_12 is
    component inference_conv2d_f3_1_2_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_12_rom_U :  component inference_conv2d_f3_1_2_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


