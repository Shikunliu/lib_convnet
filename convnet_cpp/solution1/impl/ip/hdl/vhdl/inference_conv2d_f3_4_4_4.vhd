-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010111011011101011111100", 
    1 => "00111110000100100010110001000101", 
    2 => "00111100110010000001011000011001", 
    3 => "10111101100010000100010111110111", 
    4 => "00111101111110011010010110101001", 
    5 => "10111101001001000100011100000111", 
    6 => "10111110001101001011101000001111", 
    7 => "00111100101111010010111100110101", 
    8 => "10111101000011011100011001000010", 
    9 => "10111100111001101000000100111110", 
    10 => "00111101010010110100000100101100", 
    11 => "10111101011000000010100001111010", 
    12 => "00111110000000100110100100010110", 
    13 => "00111101101101000010010101101100", 
    14 => "10111101000010100011110001001001", 
    15 => "00111101010111110101111000110100", 
    16 => "00111101101001110010101111110100", 
    17 => "10111100110111110100000011011000", 
    18 => "00111101100101000100100110011001", 
    19 => "00111101101111001110010100000110", 
    20 => "10111110000000010001011001100110", 
    21 => "00111101010110100100000010001001", 
    22 => "10111011000101111101000110011000", 
    23 => "10111110000110001010110001011100", 
    24 => "00111101100010001011100011111111", 
    25 => "00111011111100011110101011111111", 
    26 => "10111101110000001101000100110001", 
    27 => "10111110001001101110110000011000", 
    28 => "00111101101111010001010000110101", 
    29 => "10111101100010011011100011011001", 
    30 => "00111110010011000001101010001011", 
    31 => "10111110011100110001101111011111", 
    32 => "10111101000101110111111010000111", 
    33 => "00111110001010111100111110010010", 
    34 => "10111101011101111110100000011110", 
    35 => "10111101000101010100010110010010", 
    36 => "00111101000111001100010010101100", 
    37 => "10111100010111110101100011000001", 
    38 => "00111101000010111111010111110010", 
    39 => "10111101100110110000111011100101", 
    40 => "10111101111110100110111110000010", 
    41 => "10111100101111000110011001001101", 
    42 => "10111100100110100010110101110011", 
    43 => "10111101010111101100011000101001", 
    44 => "00111110010110101101101010111010", 
    45 => "00111101100110111011011010011101", 
    46 => "10111110001110011010001101001101", 
    47 => "10111110011101011000101000110011", 
    48 => "10111101111010001001011001010111", 
    49 => "10111110000000101110111001000010", 
    50 => "10111001100011011100011111010100", 
    51 => "10111101101111000000100001100111", 
    52 => "10111100110001101100111111001000", 
    53 => "00111110000001111111011101111011", 
    54 => "00111101101011111100100110100010", 
    55 => "10111110000011010000111101100010", 
    56 => "10111101001101011011010111011111", 
    57 => "00111101100101001101000110100110", 
    58 => "10111101010101011111001001100000", 
    59 => "00111101011000101000010011000101", 
    60 => "10111110000011010010010011100001", 
    61 => "10111100101101000100101001010101", 
    62 => "00111011111000011110101100000010", 
    63 => "10111101101000000000110001100000", 
    64 => "10111110001111100101100100101001", 
    65 => "10111100010001110110110010100110", 
    66 => "00111101001110101010001101101010", 
    67 => "00111101100000000110100100111001", 
    68 => "00111101110100110000011100101001", 
    69 => "10111100101011010100011111001100", 
    70 => "10111110001011111100010011000001", 
    71 => "00111101100111000100110001011001", 
    72 => "00111110000111010110000010100110", 
    73 => "00111101100001100011101111101111", 
    74 => "00111101101000011101110101111000", 
    75 => "10111100111110110101000111100110", 
    76 => "10111110000011101100101100110010", 
    77 => "10111110010011111001110101101111", 
    78 => "10111101111000000100111010100101", 
    79 => "00111100000101000100001001010111", 
    80 => "10111100101001101101100000010001", 
    81 => "00111101001010111000011101010010", 
    82 => "10111110010100111000011001001101", 
    83 => "00111100110101101011000110111101", 
    84 => "00111100110010001001000001011101", 
    85 => "00111101111011011001000011100010", 
    86 => "00111100100101110010010100010101", 
    87 => "00111110000001100011001101001000", 
    88 => "10111110001011111100011101100000", 
    89 => "00111101110010000011010101100110", 
    90 => "00111101100111011110000111100011", 
    91 => "10111100010000101000100100010010", 
    92 => "00111100110101001100101110011111", 
    93 => "10111101101001110010110111111111", 
    94 => "10111100011011110001101001101010", 
    95 => "00111110000001110100110101011001", 
    96 => "00111101100111010110010011110011", 
    97 => "10111100110001110011011110010111", 
    98 => "00111101000000100111110100111000", 
    99 => "10111100110110101111000100011101", 
    100 => "10111100110000111110011000111111", 
    101 => "10111100100101100010010000101111", 
    102 => "10111010011010110111111001100000", 
    103 => "10111100000111101100100101111010", 
    104 => "00111101110011001101001110011110", 
    105 => "10111100100101111100111100101010", 
    106 => "10111011101001000011001010001111", 
    107 => "00111100100010000011100100011111", 
    108 => "10111101011010111101001011010010", 
    109 => "10111110001110011001111111100100", 
    110 => "10111101110110010100001000001011", 
    111 => "10111100100110010011010011110000", 
    112 => "00111101110101111101000001101100", 
    113 => "10111110001010000000100001000010", 
    114 => "00111101011111111111000111011000", 
    115 => "00111101100101110110011100001010", 
    116 => "10111101110110110000000101000011", 
    117 => "10111110001011000000011001011011", 
    118 => "10111101011011101000001010101111", 
    119 => "10111101110100000000000101010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_4 is
    component inference_conv2d_f3_4_4_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_4_rom_U :  component inference_conv2d_f3_4_4_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


