-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110001011011001011000111", 
    1 => "00111100111011001110111110111000", 
    2 => "00111100100110000100101101010000", 
    3 => "10111110000000101100110101111101", 
    4 => "10111110001011010001101110110101", 
    5 => "00111101001000001111011010100000", 
    6 => "10111101011101000111001110001010", 
    7 => "10111101010010010101001110110110", 
    8 => "10111110000100110001100011111100", 
    9 => "10111110000110011001010101101000", 
    10 => "00111101000100101011101001100111", 
    11 => "10111101000001010100110101000111", 
    12 => "00111101010101001111111101010001", 
    13 => "00111101110110000101101111100010", 
    14 => "00111101011100101111110010010010", 
    15 => "10111100100010011110110011101001", 
    16 => "10111101101110011100100001101011", 
    17 => "00111110010000111101101001110011", 
    18 => "00111101100011100100000110010010", 
    19 => "00111101101100011110011000111010", 
    20 => "00111101100101001110011111100001", 
    21 => "00111101100101011001110100111011", 
    22 => "10111101110101100011110000110010", 
    23 => "00111101100110001101111111100110", 
    24 => "10111101011011101001011110101000", 
    25 => "10111101100011000110001011110010", 
    26 => "10111101101011010100001110001101", 
    27 => "00111101101111110000001110011100", 
    28 => "10111101111011000001101010001011", 
    29 => "00111101011000100000001111001011", 
    30 => "10111110000100110100110111110000", 
    31 => "10111101110100101110010110011011", 
    32 => "10111100101011011001111001101001", 
    33 => "10111101111111111011011110100110", 
    34 => "10111101110100000110101100111000", 
    35 => "00111110000111001101111101101010", 
    36 => "00111101100000000110010000110001", 
    37 => "00111110001010101111011010000011", 
    38 => "10111100100011010000101011100000", 
    39 => "10111011100000001011011001110100", 
    40 => "10111011010000110000000011000110", 
    41 => "10111100000000111010000100101010", 
    42 => "10111101101011111001011110010000", 
    43 => "00111101001011110000010101110001", 
    44 => "10111100101001010001011100010001", 
    45 => "00111101000111001010110101001010", 
    46 => "10111100101010111000011111011001", 
    47 => "10111011100001011110101011100110", 
    48 => "00111101001011100101110101110110", 
    49 => "10111101110101011110100111100010", 
    50 => "10111101010110101001111101010011", 
    51 => "00111110000010110111111111100001", 
    52 => "10111101010001011001000010011000", 
    53 => "10111010011100010000011110100110", 
    54 => "10111100011100010101111101010011", 
    55 => "10111110000000101101000100101000", 
    56 => "00111100101000000101011111000100", 
    57 => "10111110000001011100110010000101", 
    58 => "10111101111100011010001110110001", 
    59 => "10111101010001110010011000101111", 
    60 => "10111101000111110100000011011000", 
    61 => "10111101100110010110011010111110", 
    62 => "10111101100110010110100000000001", 
    63 => "00111110000010010000100101101100", 
    64 => "00111101101110010011000110000111", 
    65 => "10111101100111011110011011010001", 
    66 => "10111100111010000001100010000011", 
    67 => "10111011101110110110100110100011", 
    68 => "10111100000000010100000000100111", 
    69 => "10111101100101011011101100010000", 
    70 => "10111011100101011110011100011101", 
    71 => "00111101101111000010101111001011", 
    72 => "10111110010010000101011101101101", 
    73 => "10111101000111100101100110111101", 
    74 => "00111101111010100111101111010101", 
    75 => "00111100101000101001010111110111", 
    76 => "10111011001010010100000111011000", 
    77 => "10111100000111111011010100111101", 
    78 => "00111101101000110100110011100100", 
    79 => "10111110011000010000101111101001", 
    80 => "00111101110001101101001010101010", 
    81 => "10111100110000010111101010001001", 
    82 => "00111101000100011100100100100000", 
    83 => "10111101111010001001101000000010", 
    84 => "00111110010001001000101111101011", 
    85 => "10111110010010011100101101101000", 
    86 => "10111101000001010111100010010101", 
    87 => "00111101001101100010011101010100", 
    88 => "00111100101010010010001101000101", 
    89 => "00111101100000100111101101100010", 
    90 => "10111101011000000010111011000100", 
    91 => "00111101011010001011100101000010", 
    92 => "00111101000011110000100010010111", 
    93 => "10111101100010101011000000100111", 
    94 => "00111101110110000111000101100001", 
    95 => "00111110000000111010101110000110", 
    96 => "10111110000001010001010101001000", 
    97 => "00111101101001110010011001110010", 
    98 => "10111101110111011011011011100101", 
    99 => "10111011101110100011100100110111", 
    100 => "10111110001101100000011011111011", 
    101 => "00111101101000100100100010010101", 
    102 => "00111110001001001101011011100100", 
    103 => "00111101110111000100011101011110", 
    104 => "10111101011110111000011101000101", 
    105 => "00111110000100000100100100100011", 
    106 => "00111110001000100110011111000111", 
    107 => "00111100100101011101100001000100", 
    108 => "00111100001001010011000111101001", 
    109 => "10111110001011001001001010011011", 
    110 => "10111100110111100011101001111110", 
    111 => "10111110000010001110000000000001", 
    112 => "00111101011110011001100111001111", 
    113 => "00111100100011100001011011100100", 
    114 => "10111101111011011101101101010101", 
    115 => "00111010100110010000101111010101", 
    116 => "00111110000111110010011011110010", 
    117 => "00111100011100110111101010110110", 
    118 => "00111110000110001001111101000001", 
    119 => "00111110000011111001000100011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_9 is
    component inference_conv2d_f3_3_0_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_9_rom_U :  component inference_conv2d_f3_3_0_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


