-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011111111100110010111001100", 
    1 => "00111101111101010111011000000100", 
    2 => "00111110000100101010100110010011", 
    3 => "00111100100001111110001111000100", 
    4 => "10111101110011011010011011100111", 
    5 => "10111101111011010011111010010010", 
    6 => "00111101000010011011000111100000", 
    7 => "10111101100100110010110100000011", 
    8 => "00111101110111011010100010111101", 
    9 => "00111101101110100110011111001101", 
    10 => "10111110000100000110000101000001", 
    11 => "00111101101101001010100110011000", 
    12 => "00111011110001000100010111010101", 
    13 => "00111101100010111110000110001101", 
    14 => "10111100010101010100100100001000", 
    15 => "00111101110010000110001110110010", 
    16 => "00111101100111010000111100000100", 
    17 => "00111100111001100010111110101010", 
    18 => "00111101100011110001111111000011", 
    19 => "00111101001110100001000111111010", 
    20 => "10111101010101010010000011011111", 
    21 => "00111101111000000100010100110101", 
    22 => "10111100000100011001001010111010", 
    23 => "00111110000001101110111001110100", 
    24 => "00111101110001010011010100011011", 
    25 => "10111110000000010100101110011101", 
    26 => "10111101101001011110100011010101", 
    27 => "00111101101110010111110110000000", 
    28 => "00111110001101000011110100000100", 
    29 => "00111100000010111011001001011011", 
    30 => "10111011100111110010001111110010", 
    31 => "00111110001001101001010110010110", 
    32 => "10111100101110100000101111001010", 
    33 => "10111101011110010001101110010000", 
    34 => "00111100011010000111010100110100", 
    35 => "00111101101101010111111101001011", 
    36 => "00111011011101110100101011111011", 
    37 => "10111110000010001111010111000011", 
    38 => "00111110000010111000110100111111", 
    39 => "10111110010010011000000010110010", 
    40 => "00111101110110110101110110001001", 
    41 => "10111100101010001000110010110001", 
    42 => "00111101010010000011011111000010", 
    43 => "00111110001101100000010111101110", 
    44 => "00111101011110001100000100010010", 
    45 => "10111100001010100110001100010101", 
    46 => "10111110000100010111011111101010", 
    47 => "00111101010010000101001110100110", 
    48 => "00111100010010010111110100100010", 
    49 => "10111101111110010111000111000001", 
    50 => "00111101101111111001011110101011", 
    51 => "00111101001101001100111101001010", 
    52 => "10111101100001111111110101011010", 
    53 => "10111101010110111010010011110010", 
    54 => "00111101111110010001001111101000", 
    55 => "00111100111001100110110001000110", 
    56 => "10111101011000010010110001010000", 
    57 => "00111101010101010101111010000111", 
    58 => "10111110001100000011110010001110", 
    59 => "00111100110011000110011110111000", 
    60 => "10111101100101101101101010100010", 
    61 => "00111100001000101010011100111111", 
    62 => "10111101101111001000011001111110", 
    63 => "10111101100011010110101101001011", 
    64 => "10111101101110010110010101000111", 
    65 => "10111100000011101101111111101101", 
    66 => "10111100010000000100101101001010", 
    67 => "10111101110011010111100000111110", 
    68 => "10111100111100100000010000101001", 
    69 => "10111110001101000010100011010100", 
    70 => "00111101111011000110000101010010", 
    71 => "10111110000001011000011010000111", 
    72 => "10111101111101001111001101110111", 
    73 => "10111101001100111010100100001111", 
    74 => "10111101100011001111110110110111", 
    75 => "10111101100000100000101110000000", 
    76 => "00111100000111101101010111100100", 
    77 => "10111110000011111110000101010100", 
    78 => "00111101111111010010000011110011", 
    79 => "00111101101111000000100000110001", 
    80 => "10111101001011101101000100011110", 
    81 => "10111101100000010011101111100010", 
    82 => "10111101100100110101000101011001", 
    83 => "00111101001110110001000100011000", 
    84 => "00111110010011010001011001110110", 
    85 => "00111101111011111000110011101011", 
    86 => "10111101011000001010011000110011", 
    87 => "00111011111101010000110000011100", 
    88 => "10111101110110011000000001101111", 
    89 => "00111110000000011000010011000010", 
    90 => "10111100000011110100011111100111", 
    91 => "10111011101100010110100111000101", 
    92 => "10111101000101111110100101111011", 
    93 => "00111100000011001110000010101110", 
    94 => "10111101101010000001100000010111", 
    95 => "00111101100011110000001000001001", 
    96 => "10111011011010111011000100010100", 
    97 => "10111110000101001110100100111110", 
    98 => "00111101101101010010001000101110", 
    99 => "00111011100000101101111101000011", 
    100 => "00111110001000101111101010010100", 
    101 => "10111100111001111101001000001100", 
    102 => "10111101001111100010101000000111", 
    103 => "10111101101111000001100001001010", 
    104 => "00111101010100011100011010110111", 
    105 => "00111101010011101111100101000111", 
    106 => "10111101100011100001111010100111", 
    107 => "00111100001010111000001110100111", 
    108 => "00111101001000101000101011110101", 
    109 => "10111101000111000101000010011001", 
    110 => "10111100101110011111010110001111", 
    111 => "10111100101111100111100110000011", 
    112 => "00111101001101101000001101001010", 
    113 => "10111101101111101111111111110000", 
    114 => "00111101101100100111001010000110", 
    115 => "10111110001111110100000100101001", 
    116 => "10111011010011001000100010101111", 
    117 => "00111101110100001010000010110010", 
    118 => "00111101110011110110100010111110", 
    119 => "10111101000110110011000111010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_11 is
    component inference_conv2d_f3_3_0_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_11_rom_U :  component inference_conv2d_f3_3_0_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


