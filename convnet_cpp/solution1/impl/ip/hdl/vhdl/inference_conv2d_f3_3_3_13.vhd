-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101100000110111101110111", 
    1 => "00111101100111111000110111011101", 
    2 => "00111101011011111100110000001011", 
    3 => "00111101000001001111000100011011", 
    4 => "00111101110001001011000110000011", 
    5 => "10111101111110000010101010011001", 
    6 => "10111101001001000000101110101110", 
    7 => "00111101011011100101011010001010", 
    8 => "10111101101000100110101010110110", 
    9 => "00111011000011011101111101111100", 
    10 => "10111101100000011001101111010100", 
    11 => "00111101110000100110111101101110", 
    12 => "10111011110001111000100111101101", 
    13 => "10111101001110111101100010001001", 
    14 => "00111100110101000011110100111001", 
    15 => "10111101011011011111011101101111", 
    16 => "00111101110001100111001101001100", 
    17 => "10111110000001110110111010100100", 
    18 => "00111100101000110000010110001001", 
    19 => "10111110001110010010101000110000", 
    20 => "00111101111001011101101001101010", 
    21 => "10111101011101011011111001011110", 
    22 => "10111011011011010011111010110010", 
    23 => "10111110000010110111011001110001", 
    24 => "00111101111001110111001001010000", 
    25 => "10111101100001001000000000011111", 
    26 => "00111101110011101010111110101011", 
    27 => "10111101101100001000010100111001", 
    28 => "00111101110111101000100110101001", 
    29 => "00111101101011001100010011100010", 
    30 => "00111101000011011001111100100101", 
    31 => "10111101010000110010100000100011", 
    32 => "10111101001011010111111100101010", 
    33 => "10111110000000101101000100101000", 
    34 => "10111100100110100111010101100010", 
    35 => "10111110001000010000011000100101", 
    36 => "00111101010111000110000001101110", 
    37 => "10111101011101000010100111101110", 
    38 => "10111101111000101101000001011111", 
    39 => "10111110000011010010000010110000", 
    40 => "10111101000000100000111010110011", 
    41 => "10111101101011000011001000001000", 
    42 => "00111101100000100001111011100110", 
    43 => "00111101110100100011110001000011", 
    44 => "00111101010111110111000101100101", 
    45 => "10111011101000100010011100000111", 
    46 => "10111101101000001001000000100000", 
    47 => "00111011111101101100011011011100", 
    48 => "10111110001100010010010100010100", 
    49 => "10111101101101111011100010000011", 
    50 => "00111101001111000100000011011110", 
    51 => "10111101001001010001010101111110", 
    52 => "10111101010100100011100010110010", 
    53 => "00111100111100110111101111000011", 
    54 => "10111100101101111011000100010010", 
    55 => "00111110000011110000000100110010", 
    56 => "10111110001101001011100110001000", 
    57 => "00111101011000000010001100100001", 
    58 => "00111101001000000001011011110111", 
    59 => "10111101100101100110110110110000", 
    60 => "00111110000111010000100110011110", 
    61 => "00111101110110100111011111100110", 
    62 => "10111101000000101001110011111110", 
    63 => "10111100100110011111101001000111", 
    64 => "00111100111000100100010111011011", 
    65 => "00111101000011110111000101110010", 
    66 => "00111101011000011000011110100101", 
    67 => "00111100010000111110100010001101", 
    68 => "10111101000010110010111010011101", 
    69 => "00111101101001111001101110010011", 
    70 => "00111101010001010001110111111100", 
    71 => "10111110000110111010000110110010", 
    72 => "10111101110100110000101111100001", 
    73 => "10111100101100001011111110111011", 
    74 => "10111100010101001111011001100111", 
    75 => "10111110001100010110010111010100", 
    76 => "00111100101010100110100010111111", 
    77 => "00111101101101011111001001100000", 
    78 => "10111101001100110000110111111010", 
    79 => "00111100110010100110101011110011", 
    80 => "10111101001111100001111110100110", 
    81 => "10111100101100010101110110100110", 
    82 => "00111100011111100001110011010001", 
    83 => "00111101000000010101111001010100", 
    84 => "00111101111010001001010011000100", 
    85 => "00111101000101101111100011110000", 
    86 => "10111101110100101101111101010000", 
    87 => "10111101001101011111111010001010", 
    88 => "00111011111000110000011010110101", 
    89 => "00111101000010011110000000011110", 
    90 => "10111110000000010010101000001111", 
    91 => "10111110010010111011100011000011", 
    92 => "10111101101101100010011111001101", 
    93 => "10111101101000000110110100001101", 
    94 => "00111101001010000100011101111101", 
    95 => "10111101011000011011000000000011", 
    96 => "10111110001101111010010101101110", 
    97 => "00111101011110111110110110110111", 
    98 => "10111100111000000110111101000001", 
    99 => "00111110000100110100110010100001", 
    100 => "00111101000010100111101001000010", 
    101 => "10111101001110000001110101111110", 
    102 => "00111101010100010100110101100101", 
    103 => "00111101100110011001010111111011", 
    104 => "10111101101001011010100000110000", 
    105 => "10111110000011011011100011111110", 
    106 => "00111101011101001000011111000111", 
    107 => "00111100111110100000000110111001", 
    108 => "10111100110110110110011010001110", 
    109 => "10111101001110110100111110110010", 
    110 => "10111101100101011001011101110111", 
    111 => "10111011000010111110111100001100", 
    112 => "00111110000001011000111010101000", 
    113 => "10111101101000110111001010001001", 
    114 => "10111110010001111110101011100110", 
    115 => "00111101111011100111001001010100", 
    116 => "10111100011111010001011100010111", 
    117 => "00111110000010011000101100101111", 
    118 => "10111101000001101001010001101111", 
    119 => "10111101100001100110010111111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_13 is
    component inference_conv2d_f3_3_3_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_13_rom_U :  component inference_conv2d_f3_3_3_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


