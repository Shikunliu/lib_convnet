-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101011110101100001111101", 
    1 => "00111101110100011110010000101110", 
    2 => "10111101101000000011110000111110", 
    3 => "10111101011011111100101011111111", 
    4 => "00111110010011011110101011001101", 
    5 => "10111101101101100101100101011000", 
    6 => "10111110000010111111000101100011", 
    7 => "00111101110110000001011100110011", 
    8 => "00111101111110010110110010000011", 
    9 => "00111110010000100110101010101001", 
    10 => "00111100101010100000000100100110", 
    11 => "00111110000111001001100111110010", 
    12 => "00111110000001110000010101000010", 
    13 => "00111101000100001000000111000011", 
    14 => "00111101011011001010110010011100", 
    15 => "00111101101011000001010000100101", 
    16 => "00111101100001001000000110001010", 
    17 => "00111110011101000000110111010100", 
    18 => "10111110011011001110000110000010", 
    19 => "00111101101001111111011000111001", 
    20 => "10111101010001010001001110000000", 
    21 => "10111110000110110111011101111101", 
    22 => "10111110010000011111100000011010", 
    23 => "00111101010000010010100100101011", 
    24 => "00111100110011100100100010011000", 
    25 => "10111110000000111011000010000001", 
    26 => "10111110000111110000000001101001", 
    27 => "10111101101000111100101110110111", 
    28 => "00111110000001100110101111101000", 
    29 => "10111101111000111001000101001111", 
    30 => "00111011101001011100011001100011", 
    31 => "00111100110110011001110001010100", 
    32 => "10111101100010011001011011100000", 
    33 => "10111100101000001011110101000101", 
    34 => "10111011101000100000001110100000", 
    35 => "00111100100111101101010111100100", 
    36 => "00111101110001111100111000010000", 
    37 => "10111101110011001000101010110000", 
    38 => "10111101100010101110100010010001", 
    39 => "10111100101101001000111110111111", 
    40 => "00111101100110010001011001011111", 
    41 => "00111110000110010101101101111001", 
    42 => "00111110000010111000001100000110", 
    43 => "00111100111100001101110000001011", 
    44 => "10111101101110111100100100010001", 
    45 => "00111101011111010101111111111000", 
    46 => "00111110011000010010101101011110", 
    47 => "10111100010101010000111110010001", 
    48 => "10111100010111011011100100011001", 
    49 => "10111110000000110111100111111011", 
    50 => "10111101000001001101011100110101", 
    51 => "00111101110110110000011100000111", 
    52 => "00111101100100110000100111010101", 
    53 => "10111101100000001100011100111011", 
    54 => "10111110000001111010011111001010", 
    55 => "00111101110110100001000000010111", 
    56 => "10111101010011011101111110000111", 
    57 => "10111101100000000100011010101101", 
    58 => "10111101110111000100000010001110", 
    59 => "00111110001011101010001000001010", 
    60 => "00111100001010011001100000010100", 
    61 => "00111101101010011010110110000110", 
    62 => "00111101101001010011000011110111", 
    63 => "10111101000000001000111001001011", 
    64 => "00111110000101001011110011110001", 
    65 => "00111101100101001001000100101010", 
    66 => "10111110010101100000011110000001", 
    67 => "10111101000111011000010010010000", 
    68 => "00111011001110111011001000011101", 
    69 => "10111101111011110000010010011011", 
    70 => "00111011010111101001011001111001", 
    71 => "00111100100000111011111000110000", 
    72 => "10111101111000011011100101110011", 
    73 => "10111110001101101110100011110011", 
    74 => "10111110001100011110001000010101", 
    75 => "10111101000011101110101000010011", 
    76 => "10111100101010000100111100001001", 
    77 => "00111110001100010010000010011111", 
    78 => "10111101101110011100010001010100", 
    79 => "10111110001001011111101110110101", 
    80 => "00111110010100110110101100001001", 
    81 => "10111110010001000111011001101100", 
    82 => "10111101000010110000100101001000", 
    83 => "00111101011100110001001110100011", 
    84 => "10111101010010111101001010110111", 
    85 => "10111110001110000010001000110110", 
    86 => "10111101100010100110111010101100", 
    87 => "00111101101101011101111100111101", 
    88 => "10111100001110111111111010110100", 
    89 => "10111101100101001111101101010101", 
    90 => "10111101101001001100000101001011", 
    91 => "10111101100111101011100110111100", 
    92 => "00111011101000101001101001001001", 
    93 => "00111101110010111001010111110011", 
    94 => "10111101010011110011011101110110", 
    95 => "10111101110110011010010100100010", 
    96 => "10111101100100010110111101111001", 
    97 => "10111101100010010011010110111001", 
    98 => "10111101110110001110100011101010", 
    99 => "10111110000000010101111100000011", 
    100 => "00111110000001011010111111110011", 
    101 => "00111110000001110111010011101111", 
    102 => "10111101000110111101100111001011", 
    103 => "00111101111000001001010001100000", 
    104 => "00111101101101011100011011001111", 
    105 => "10111101001100010001111010111100", 
    106 => "10111100110011010111001011100101", 
    107 => "00111100100000000001101101111001", 
    108 => "00111110000001011100010110110101", 
    109 => "00111101001011001011011010010010", 
    110 => "10111101111011001010001101100010", 
    111 => "10111100010101000110001001011000", 
    112 => "10111101010011100110011100110110", 
    113 => "00111110000100101001011101111101", 
    114 => "10111110010011011000000110101110", 
    115 => "00111100000000000011011110001000", 
    116 => "00111101011110110110000110111011", 
    117 => "00111101011000001100101101101100", 
    118 => "10111101001010110010101101011101", 
    119 => "10111101100011111100101101110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_3 is
    component inference_conv2d_f3_3_1_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_3_rom_U :  component inference_conv2d_f3_3_1_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


