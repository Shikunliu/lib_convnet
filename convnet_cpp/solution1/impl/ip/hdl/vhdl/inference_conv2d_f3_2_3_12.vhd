-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110111110011000001100010", 
    1 => "10111101110001111100110101111100", 
    2 => "00111110001000010101011001011100", 
    3 => "10111101011101110101011010101110", 
    4 => "10111101110101110100110001001101", 
    5 => "00111100110011010111001111110001", 
    6 => "00111110000011111111101001111111", 
    7 => "00111101100001000100010000011000", 
    8 => "10111101110010001011000110011010", 
    9 => "10111101101011010110011011110001", 
    10 => "00111101011000111100110011000100", 
    11 => "00111101000010110010110001101001", 
    12 => "00111100110111111111010110011110", 
    13 => "00111110000101110101111011101010", 
    14 => "10111101100100001101101011100100", 
    15 => "00111101111100111110111001011111", 
    16 => "00111101101000100000000101100010", 
    17 => "00111100111100000101001001000011", 
    18 => "00111101001111011011111000000110", 
    19 => "10111010101110010110000000001000", 
    20 => "10111101111000010001101110100100", 
    21 => "00111101101111101110001010100001", 
    22 => "00111101100100111100100100110011", 
    23 => "10111011111000001000001011001101", 
    24 => "10111101010111111001000110110001", 
    25 => "00111100101100001111111010100110", 
    26 => "00111110000000111110101101111101", 
    27 => "10111101110110010000001110100111", 
    28 => "00111110000010000001000100101100", 
    29 => "10111100111010100101010100111110", 
    30 => "10111101110001011011001100011000", 
    31 => "10111110000111110101000011100011", 
    32 => "00111101010110001110100000101110", 
    33 => "00111101010100111101110000000101", 
    34 => "10111000101101001011010010011100", 
    35 => "10111100001111100011000010111101", 
    36 => "10111101101100110001011111111101", 
    37 => "00111101100101010101101001111101", 
    38 => "00111110000110011001110111001011", 
    39 => "00111100111100011010010110010100", 
    40 => "00111101110100100010110110010101", 
    41 => "00111101000110100111101100100110", 
    42 => "10111110000010010111011000110110", 
    43 => "00111110000010110100110000111100", 
    44 => "00111101101001000100011000100011", 
    45 => "00111010110100100100000001010100", 
    46 => "00111100101101000111000010110101", 
    47 => "10111100001101011011011111011101", 
    48 => "00111100110100111010001000001001", 
    49 => "00111101011111111001110000101101", 
    50 => "10111100101010011011011001000111", 
    51 => "10111101111101011000100101101010", 
    52 => "00111110000001110010110110100001", 
    53 => "00111011110000110100111110100000", 
    54 => "10111100101110100111100011011000", 
    55 => "00111100111111101011100000000001", 
    56 => "00111101100011001000010000110000", 
    57 => "00111101001111100011011000010110", 
    58 => "00111100111101011100001011000101", 
    59 => "00111101101100100111011100111110", 
    60 => "10111100111001010001000101100111", 
    61 => "10111110001011101011110010000100", 
    62 => "00111101010001000010011010111011", 
    63 => "10111110001001101011111101000100", 
    64 => "00111101101000101001101010010100", 
    65 => "00111010101001110010001111110001", 
    66 => "00111011101111100001110000011010", 
    67 => "10111110000011010101000000100010", 
    68 => "10111101110011110000000111111100", 
    69 => "00111110000010010000010011110111", 
    70 => "00111110000000101011111011001111", 
    71 => "10111101001010001011011110101111", 
    72 => "10111100001101000101111100011000", 
    73 => "10111101111101111001011111001100", 
    74 => "00111100101101101101111110010000", 
    75 => "10111100111111001000100001000111", 
    76 => "10111100111001110001001101101010", 
    77 => "00111110001000111011101111000111", 
    78 => "10111100101111001011010110010011", 
    79 => "10111110001011001100001111100011", 
    80 => "00111101111010001011101100001010", 
    81 => "00111100011111011001001110101010", 
    82 => "10111101100000000011100100100110", 
    83 => "00111100011010000110000010100111", 
    84 => "00111101111100010110101000000101", 
    85 => "00111110000101100011000101110010", 
    86 => "10111101001011001100010011010101", 
    87 => "10111101011000000101011000010111", 
    88 => "00111101011010110001011110100110", 
    89 => "10111101001111111010110000111000", 
    90 => "00111011111101001111010011110101", 
    91 => "00111101110110000110001010110010", 
    92 => "00111110000110000010000110101111", 
    93 => "00111100011001010101101001100010", 
    94 => "00111101000110110101101111000001", 
    95 => "10111011110111110000111110011010", 
    96 => "10111101010100010101010111001001", 
    97 => "00111101101101010011111010100110", 
    98 => "10111100011010010110010111110101", 
    99 => "10111101001000000100000011101000", 
    100 => "00111110010110010011111111110010", 
    101 => "00111100000101010010111111111101", 
    102 => "10111110001000011010110001011000", 
    103 => "00111101010100101110011101100011", 
    104 => "10111100101001101010101101100101", 
    105 => "00111101001000100111011110001111", 
    106 => "10111101101011000110011001101000", 
    107 => "10111100111110010101111000100101", 
    108 => "00111101100111010111100001110100", 
    109 => "10111101001001100110111110100001", 
    110 => "10111110000011000010110111110001", 
    111 => "00111101010000011001001101111110", 
    112 => "10111101110101000011000011110101", 
    113 => "00111101101010100101011100101111", 
    114 => "00111101110100100111110101000110", 
    115 => "00111101000010000000001110001010", 
    116 => "10111101111100000111001100010101", 
    117 => "00111110000000101011000101110000", 
    118 => "10111101110100010001111100001100", 
    119 => "10111101110010010001010000010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_12 is
    component inference_conv2d_f3_2_3_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_12_rom_U :  component inference_conv2d_f3_2_3_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


