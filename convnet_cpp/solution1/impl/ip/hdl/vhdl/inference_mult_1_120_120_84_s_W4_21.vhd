-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_21_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_21_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110011001010001111101000", 
    1 => "10111101010010111110001001110001", 
    2 => "00111101110111111100011011011010", 
    3 => "10111110001111100001000010001100", 
    4 => "00111100111010011101100101001101", 
    5 => "10111101101011110100000111010111", 
    6 => "10111100111100100010100110110011", 
    7 => "00111101011110101110100100001010", 
    8 => "10111101100011001001110010111001", 
    9 => "10111110000001101111111111000001", 
    10 => "10111101011100111110011011010010", 
    11 => "10111011001001110100000100100010", 
    12 => "10111110000110010001010000101011", 
    13 => "00111110010110110110011101111111", 
    14 => "10111101100111110111011100110111", 
    15 => "10111101110110111110110100110001", 
    16 => "10111101001110010000001011101011", 
    17 => "00111100100111111110010110101110", 
    18 => "10111101100101000110101111001000", 
    19 => "10111101001101100111101100000001", 
    20 => "00111101000111100110101101110110", 
    21 => "10111101110100110101101010000110", 
    22 => "00111110000011101111001010000100", 
    23 => "10111101010011001001101000100111", 
    24 => "10111010101010011111001101011001", 
    25 => "10111011110100011011001111010010", 
    26 => "10111110010000111111110110010011", 
    27 => "00111101000111010111010011010110", 
    28 => "00111100000000000111001011101101", 
    29 => "00111101000010010000101000011010", 
    30 => "00111101001101001111001001010000", 
    31 => "10111100010101010110101000101010", 
    32 => "00111110010001101110001001100101", 
    33 => "10111101010001001011111100010111", 
    34 => "00111101100100101100111001111100", 
    35 => "10111101101001111001011110110001", 
    36 => "00111101001000110101101111010101", 
    37 => "00111101100110001000100111101010", 
    38 => "00111101000000110111101000001000", 
    39 => "10111101000111100100101101000101", 
    40 => "00111101101110101101111011011110", 
    41 => "00111110000111110110110000100111", 
    42 => "10111101101010111000101011111110", 
    43 => "10111101000001010101011010110111", 
    44 => "10111101110011000010001100100100", 
    45 => "10111100111000011100101100101100", 
    46 => "10111101010001111010100010111011", 
    47 => "00111100101110100011001011001100", 
    48 => "00111101110001101010110111110111", 
    49 => "10111101101110110100011011111110", 
    50 => "00111110001100110111001111110011", 
    51 => "00111101101001111110100011110101", 
    52 => "10111101001001110001001001011110", 
    53 => "10111101101111010000000110100110", 
    54 => "10111101000101101011101111101001", 
    55 => "10111110001111101010111101101000", 
    56 => "00111101101001000111000010110101", 
    57 => "00111101001110101011111110000100", 
    58 => "00111110000111101101001010001001", 
    59 => "00111101000001000001000010000001", 
    60 => "00111101000111000000100111101100", 
    61 => "10111101110010001010001000111110", 
    62 => "00111110000001111011001111011001", 
    63 => "00111100100110100110111110000010", 
    64 => "10111100001001011100101100000000", 
    65 => "10111100101100111100110111111000", 
    66 => "10111110010001100110101111101000", 
    67 => "10111110000100010110010011000111", 
    68 => "00111110000011100010110100011111", 
    69 => "00111100110011111111100111011110", 
    70 => "10111101110011010111001110000110", 
    71 => "00111101001011000001011011111010", 
    72 => "10111110000111111110111001110000", 
    73 => "10111101100100001110010100101011", 
    74 => "00111101110000011101011000101110", 
    75 => "00111110000000011011110110100101", 
    76 => "00111110010010000100101000001110", 
    77 => "10111101000111010100000100111111", 
    78 => "10111100100100010000110001100010", 
    79 => "00111100110100000011110100101111", 
    80 => "10111101110100000100111101101110", 
    81 => "10111101100000111100101110001111", 
    82 => "10111101100011001111011011011001", 
    83 => "00111101110110100110100110111110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_21 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_21 is
    component inference_mult_1_120_120_84_s_W4_21_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_21_rom_U :  component inference_mult_1_120_120_84_s_W4_21_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


