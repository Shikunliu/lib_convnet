-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011101001001100110011010", 
    1 => "00111110000000011010110011011110", 
    2 => "00111101001101111110100111100111", 
    3 => "10111101011110110110110101011111", 
    4 => "00111100101010010001111101001001", 
    5 => "10111101100101110110000000000011", 
    6 => "10111101110011010111101111101010", 
    7 => "10111110000100110011110101101100", 
    8 => "10111110000010101101110000001010", 
    9 => "10111110010100001101111011010011", 
    10 => "00111110000101001100111011000100", 
    11 => "00111101011100101010101011111101", 
    12 => "10111100010100110001001011001101", 
    13 => "00111101101111110110011000010010", 
    14 => "10111110000110010001111001100100", 
    15 => "10111101001110001110010111100000", 
    16 => "00111101110110000100111101001100", 
    17 => "00111101001011001111000000001000", 
    18 => "00111101010110000111011001101001", 
    19 => "00111100100010011110010010000101", 
    20 => "10111110000100110001000010011001", 
    21 => "10111100101101111100110001010101", 
    22 => "00111101111110111111010010001000", 
    23 => "00111101000111101101000010001011", 
    24 => "10111110001110001001110100101000", 
    25 => "10111101111101010101111111111110", 
    26 => "10111101100110100100010111100010", 
    27 => "00111011011111010111100111101001", 
    28 => "10111101011001111011001100000010", 
    29 => "00111011101111000010110101011000", 
    30 => "10111100000101111101011010010110", 
    31 => "10111110001000011101110110100000", 
    32 => "10111010010000000100111111101111", 
    33 => "10111100110001111001011011001101", 
    34 => "00111101101010111010100100111110", 
    35 => "10111101111001101100111111001000", 
    36 => "10111101101011111000111000100000", 
    37 => "10111100111111000100100111001000", 
    38 => "10111101111111011011010111011001", 
    39 => "10111110001101001110100111000100", 
    40 => "10111101011100111011001011010000", 
    41 => "00111100101001000000111001101000", 
    42 => "00111101100101011111001110111101", 
    43 => "00111101000011010010110001010011", 
    44 => "00111101000011000011100101000100", 
    45 => "10111101110000100000011011100011", 
    46 => "00111101101111101101101010110111", 
    47 => "10111101100010001001001110011101", 
    48 => "10111100111010101001110011110111", 
    49 => "10111101110000100111010111100001", 
    50 => "00111101100010111110101011100010", 
    51 => "00111101100110110000000010111101", 
    52 => "10111101110111010100010000010011", 
    53 => "00111101111000110111011110011111", 
    54 => "10111101000101111110011010100111", 
    55 => "10111101000100110011010111010010", 
    56 => "00111100011101000110001111101011", 
    57 => "10111100111000100110100100010110", 
    58 => "00111100101000100001100100101111", 
    59 => "00111101010011001110010000101111", 
    60 => "00111100100111000111011010001110", 
    61 => "00111101100100011110101100001100", 
    62 => "00111110001100010001011011101100", 
    63 => "00111101101101111010100100011001", 
    64 => "00111101001011110010001010011000", 
    65 => "00111101011110011111110001000101", 
    66 => "00111101101000001101110010111010", 
    67 => "10111110000000111001010111000100", 
    68 => "10111101011111110010110100100010", 
    69 => "00111110000101110001010010111010", 
    70 => "10111101101000010000110111001100", 
    71 => "10111011101110110010110111101001", 
    72 => "00111100111110011110011100010111", 
    73 => "00111110000100101000101011100111", 
    74 => "10111101110111100001011111100011", 
    75 => "10111101110100110000110111111010", 
    76 => "00111101100101000100000111100100", 
    77 => "00111110000000000100100101100110", 
    78 => "10111101001000010000001001000100", 
    79 => "00111000111111100010101000010010", 
    80 => "10111101100110101100110101000001", 
    81 => "00111110000011010000010110101111", 
    82 => "00111101110111000001001011110001", 
    83 => "10111101110000110000110000010111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_2 is
    component inference_mult_1_120_120_84_s_W4_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_2_rom_U :  component inference_mult_1_120_120_84_s_W4_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


