-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001101001001001111110001", 
    1 => "00111101000001000011011100010111", 
    2 => "00111101001001111100100000110001", 
    3 => "10111101101010000111110001010110", 
    4 => "00111101111100111011110000001010", 
    5 => "00111101101000101101001010101110", 
    6 => "00111110000110000010101111101001", 
    7 => "10111101110111101000101000101111", 
    8 => "10111101100010101001000101000110", 
    9 => "00111100111001111001110110011110", 
    10 => "00111110001101110011000100001010", 
    11 => "00111110000100110110111000101111", 
    12 => "00111101101010100010010001000110", 
    13 => "00111110000000101001010011011101", 
    14 => "10111101001110111110011110000111", 
    15 => "10111101101011001000001101001011", 
    16 => "00111101100001101000111010001111", 
    17 => "10111101100100001111010101111001", 
    18 => "00111101011010110001100100000011", 
    19 => "10111101010011010111010111010101", 
    20 => "00111101001101010011101101100110", 
    21 => "10111110010110111110001000101110", 
    22 => "00111101100100010101101000110000", 
    23 => "00111100110010000000011001011111", 
    24 => "10111101100101111010100111111110", 
    25 => "00111101111111100100011100010011", 
    26 => "00111101000101000111011011100101", 
    27 => "10111110001101111110100101010011", 
    28 => "00111101110000100101000111011100", 
    29 => "10111101111000111011001001010111", 
    30 => "10111101100011000100010100011101", 
    31 => "00111101111111110101110001101100", 
    32 => "10111101000110101110111001100011", 
    33 => "00111100101011010100010000111100", 
    34 => "10111110010010100110010011000011", 
    35 => "10111100010011011010010001100011", 
    36 => "00111101001101101000111010111000", 
    37 => "00111101011111011011000100100001", 
    38 => "10111101001100011001011111110011", 
    39 => "00111101111011010000001001000111", 
    40 => "00111101001010110011111011000011", 
    41 => "10111101010011110100100000100010", 
    42 => "10111110000111110011101110100111", 
    43 => "00111101110000011011011001011011", 
    44 => "10111101110011000000011100110010", 
    45 => "00111101110010001111100010010111", 
    46 => "00111100100100111001010001100111", 
    47 => "00111110001100011010111011110111", 
    48 => "10111101000110101110011111111110", 
    49 => "00111100100110011100000010011011", 
    50 => "10111110000010101000101100001001", 
    51 => "00111100111101011011111110100000", 
    52 => "10111101111001011001001000010000", 
    53 => "00111100101110100000110001101011", 
    54 => "10111100011100010011010101100010", 
    55 => "10111110001001100011101000011001", 
    56 => "00111101000110110111100010110010", 
    57 => "10111101010100011010011000011011", 
    58 => "00111110001101010000011011011101", 
    59 => "00111110000111111101001110110011", 
    60 => "00111101011111101100100111110000", 
    61 => "00111101011010110011110000100100", 
    62 => "10111110000010100010110001100111", 
    63 => "00111101111000111011001101100011", 
    64 => "00111101001011111000111001100011", 
    65 => "00111110001110111000010010011001", 
    66 => "10111110000100011001111010110110", 
    67 => "00111100100010011010000101101001", 
    68 => "10111100011011000011011010001010", 
    69 => "00111101110101101110110011100001", 
    70 => "00111101111111101111001010000100", 
    71 => "00111100111110111110101110011110", 
    72 => "00111101100111000100010111100111", 
    73 => "10111101100101101011110101101111", 
    74 => "00111100011000100011010000111101", 
    75 => "10111110010011100101011100010001", 
    76 => "10111101101101000100110001111011", 
    77 => "10111010000010010100101001100011", 
    78 => "10111101101001001111000001010010", 
    79 => "00111100010101000000100101101101", 
    80 => "00111100011000010111011101111111", 
    81 => "10111110000010101110111110110011", 
    82 => "00111100110010100010101010010001", 
    83 => "00111100110100010000111110111101", 
    84 => "10111101100111101001110101111010", 
    85 => "10111110000111101101101000100011", 
    86 => "00111101010011001110110111101111", 
    87 => "00111100111111000101001110100011", 
    88 => "10111110000011010111000011100111", 
    89 => "10111101111100011000000010010001", 
    90 => "00111101010111101100111111001111", 
    91 => "00111101010010111110010100101011", 
    92 => "00111100101000001101001111101011", 
    93 => "00111101100110110111110110111010", 
    94 => "10111101111111001000110000001101", 
    95 => "10111100111000000100000100011110", 
    96 => "10111100110000101110011100000101", 
    97 => "10111100110000111101001110010100", 
    98 => "00111110010000010101011011100010", 
    99 => "00111110001101100100110111000010", 
    100 => "00111101101000011000101001101100", 
    101 => "00111101101011010110000000111011", 
    102 => "10111100101110111111100010011111", 
    103 => "00111101111111101100001101010100", 
    104 => "00111101000011001010010000111000", 
    105 => "10111101000110000011110110101111", 
    106 => "10111100101001111010110110001110", 
    107 => "10111110000000101010100001000100", 
    108 => "10111101001011001111100010000111", 
    109 => "00111101000011100010110110100101", 
    110 => "10111101011111111001111010110001", 
    111 => "10111100111000100111110101101110", 
    112 => "10111101100011001000011000111011", 
    113 => "10111101111000100110100000001010", 
    114 => "00111110001010101100010111000001", 
    115 => "10111101001100001101100111010111", 
    116 => "10111101110110001110000010000111", 
    117 => "00111100101100100000011001111000", 
    118 => "00111100101001000011111111100110", 
    119 => "00111011111111111011001111101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_15 is
    component inference_conv2d_f3_2_4_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_15_rom_U :  component inference_conv2d_f3_2_4_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


