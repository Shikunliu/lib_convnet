-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111101110100001111001111", 
    1 => "00111110010000100100101100110100", 
    2 => "10111100101111011101110100010000", 
    3 => "10111101111110001011001011101010", 
    4 => "00111101101010000110000110100110", 
    5 => "10111101101110111111100010011111", 
    6 => "00111101110000100000100110000010", 
    7 => "00111100100011100000111000010101", 
    8 => "00111101110010100100110000101100", 
    9 => "10111110010110110110011100111100", 
    10 => "10111101101111100010011001001110", 
    11 => "10111101101100011100010100100100", 
    12 => "00111011001101111011100010010100", 
    13 => "10111101111001111110000111111100", 
    14 => "00111110001110001100000001001000", 
    15 => "10111101111000111000011101011001", 
    16 => "00111101110010101111000111011001", 
    17 => "10111100110010000011010001001100", 
    18 => "00111100101001010011111111000000", 
    19 => "10111100010001111100110111110101", 
    20 => "10111110000011001110100010010110", 
    21 => "10111100110010110111101110010100", 
    22 => "10111101100011110011011011100010", 
    23 => "00111101110010111101111010111001", 
    24 => "00111101110001101101110011001001", 
    25 => "10111101100100110011011001100110", 
    26 => "00111101001110011100011001111011", 
    27 => "10111101001111101101011010100000", 
    28 => "00111101000110100010011010111101", 
    29 => "00111101010000101001000010111001", 
    30 => "00111100101110010110111110001101", 
    31 => "10111101010010111010110011011100", 
    32 => "10111100110001100010100111100110", 
    33 => "00111100011011001100100010000000", 
    34 => "10111101101101000010001001101111", 
    35 => "10111101001011100001110100010100", 
    36 => "00111110000001100110000011100101", 
    37 => "00111110000011010110011011110001", 
    38 => "10111101110010111110000000100011", 
    39 => "00111101111110110011000101111111", 
    40 => "00111101111110110101001110010011", 
    41 => "10111101011000001111110110100111", 
    42 => "10111110000001101101000111100001", 
    43 => "10111101110000110001010011110011", 
    44 => "10111101111011000111100101110000", 
    45 => "00111101101001110100000011010010", 
    46 => "10111100100001010100110110110010", 
    47 => "10111101010100111010000011000111", 
    48 => "10111100101010101111010101000001", 
    49 => "00111100000011010000101000011111", 
    50 => "10111101001110111101000110011101", 
    51 => "00111101000110000010000010111110", 
    52 => "10111101101000010010101101000011", 
    53 => "10111101000001000110101001011101", 
    54 => "00111101000011110101111001011101", 
    55 => "00111110010000011001100110111011", 
    56 => "00111101010101100000001111001000", 
    57 => "10111101110001001101101010101011", 
    58 => "10111101000111101100011110111100", 
    59 => "00111101101110001111000001101010", 
    60 => "00111101001110101100001011011111", 
    61 => "10111010111100010001001111111111", 
    62 => "00111101000011101111100101100010", 
    63 => "10111101010101110101110011111001", 
    64 => "00111101001111010011110010111100", 
    65 => "10111001111010100110001110000011", 
    66 => "10111101011110100010001000100000", 
    67 => "00111100100111101111100101010101", 
    68 => "00111100000001001101110011111111", 
    69 => "00111101100011011111011010011000", 
    70 => "00111101100111001000000100001010", 
    71 => "10111101100101001100010111011010", 
    72 => "10111101101110110100110001110010", 
    73 => "00111011011110101011010100111101", 
    74 => "10111110000101110101011100001100", 
    75 => "10111100101010001110100110011001", 
    76 => "00111101100101011101100110100001", 
    77 => "10111101000111111010001110011111", 
    78 => "10111010011111000011110000110111", 
    79 => "00111101100110011001100011011110", 
    80 => "00111100100010000100100000000011", 
    81 => "10111011000001101010100011111100", 
    82 => "10111110000100111010000101001101", 
    83 => "00111101001000001000000100010100", 
    84 => "00111101010100011011111011011010", 
    85 => "00111110000000010001100110001011", 
    86 => "00111110000101001111011110101001", 
    87 => "00111101100111000110000001100001", 
    88 => "10111110000001100110001010111011", 
    89 => "10111101111001010000001111111011", 
    90 => "10111101101100010011001110011010", 
    91 => "10111100111111001111011100000001", 
    92 => "10111101011000111110100001110010", 
    93 => "10111100000100111110001101001100", 
    94 => "10111011111110110010011101010011", 
    95 => "00111100110111000010010110011011", 
    96 => "00111101000001000111010010100100", 
    97 => "10111101001011011100000110001010", 
    98 => "10111101010100010001010000111111", 
    99 => "00111101011111000001111000101001", 
    100 => "10111101101011100100001101001101", 
    101 => "00111101111110000101110011101110", 
    102 => "10111011111001100100101000001100", 
    103 => "10111110010000011111110100010101", 
    104 => "00111101101011000001101001001000", 
    105 => "10111101011101000111110110011011", 
    106 => "00111101001001001100110110001111", 
    107 => "00111110000000110101011000010001", 
    108 => "00111101011110100110011111011011", 
    109 => "10111101101101000101111101110110", 
    110 => "00111011100111111001011111110110", 
    111 => "10111110001000000000101110001001", 
    112 => "10111110000101000111101001011011", 
    113 => "00111100110101111110100010111111", 
    114 => "00111100101011100100111101101001", 
    115 => "00111101001000101010100111001001", 
    116 => "10111110000010101010100101110001", 
    117 => "00111101001101000100000011100101", 
    118 => "00111110001011001010100000011010", 
    119 => "10111101010111101010011001001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_10 is
    component inference_conv2d_f3_1_4_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_10_rom_U :  component inference_conv2d_f3_1_4_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


