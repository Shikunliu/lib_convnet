-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011010111110111011101001001", 
    1 => "10111100001110100110101001011111", 
    2 => "00111101101000011111001111001110", 
    3 => "00111011100111100011110001000001", 
    4 => "00111100001010000001000011000000", 
    5 => "00111101100101111001011111110100", 
    6 => "10111110001110001011001101110000", 
    7 => "10111101100110110110001100110011", 
    8 => "00111100000010011010110101001000", 
    9 => "10111101100100110000010100101011", 
    10 => "00111100011000001010111000101011", 
    11 => "00111101101011100110010100000011", 
    12 => "00111101100110011110110110001010", 
    13 => "10111110000101001001000110110000", 
    14 => "10111101101100111100100110101100", 
    15 => "10111101110000000000010111010010", 
    16 => "10111110000000010111111000110101", 
    17 => "00111101111010001111110000001101", 
    18 => "00111101101011111100101101101010", 
    19 => "00111011100100100001010010010101", 
    20 => "10111101110010101111011100100101", 
    21 => "10111011110110101110001111100111", 
    22 => "00111110000111001001010000101101", 
    23 => "10111101111001011011100011011100", 
    24 => "00111011111101010100100101000011", 
    25 => "00111110010011100000001110110100", 
    26 => "00111110000001010001000000001010", 
    27 => "00111100001010101101101101110110", 
    28 => "10111110001010111111001100111000", 
    29 => "10111100101011010110001000111001", 
    30 => "10111110010001011001001101100000", 
    31 => "10111101101110000010101100010010", 
    32 => "10111100000110111011010110010011", 
    33 => "00111100101000001001111011011100", 
    34 => "10111101100000111010100011110101", 
    35 => "10111110000110111100101100011101", 
    36 => "10111101100101101101100000101100", 
    37 => "10111100110110001001100101010100", 
    38 => "10111101000001000010101111011111", 
    39 => "10111101101001110111000100110110", 
    40 => "00111100111111010111001111001001", 
    41 => "10111101000110001010000111101101", 
    42 => "10111000100100111011011000101110", 
    43 => "10111110001001100111000100100110", 
    44 => "10111100000111101011000000111010", 
    45 => "10111101010011011100001110111101", 
    46 => "00111100010111010111000101100000", 
    47 => "00111101111000011001000100010101", 
    48 => "00111100101110110011001001110001", 
    49 => "10111110001100110000100101000010", 
    50 => "00111100100110010100111101011100", 
    51 => "10111101111010010011100111101011", 
    52 => "10111101101001011111000011011011", 
    53 => "10111101001110011011110000011001", 
    54 => "00111110010000110011101111011010", 
    55 => "00111101010110000001100101100111", 
    56 => "00111101100101110110110100010001", 
    57 => "10111110010010110000010111111011", 
    58 => "10111100010100100010001110111001", 
    59 => "10111011111100110010110001011101", 
    60 => "10111011110110110111000110010110", 
    61 => "00111110000110100010000011011110", 
    62 => "10111101100100000101001101000010", 
    63 => "10111110011011011010111010000010", 
    64 => "00111101100010110100111111110101", 
    65 => "10111110000000101010011010110001", 
    66 => "00111011101101001100001100000000", 
    67 => "00111101110001001011001110101001", 
    68 => "10111101010011100011011001110100", 
    69 => "10111101001010110100100100111111", 
    70 => "00111110000010111011111111010111", 
    71 => "00111110000110001101101110001100", 
    72 => "00111011100100111010101011101101", 
    73 => "10111011010001101001010010100100", 
    74 => "00111101100100000000000111010110", 
    75 => "00111110001100111010110100011001", 
    76 => "00111100110111101111011100111100", 
    77 => "10111100110101111000010000010110", 
    78 => "00111101111110111010010101011101", 
    79 => "10111110000100010111000010010011", 
    80 => "00111110001110110011101101110101", 
    81 => "00111110000100101011101100100011", 
    82 => "00111100001010110001110110111011", 
    83 => "00111100100010101111111101101101", 
    84 => "00111101001100010010001100001000", 
    85 => "10111110000110101100011000000100", 
    86 => "10111110010100100101100011010110", 
    87 => "10111101011000001001100111010011", 
    88 => "10111101110000101100001111010111", 
    89 => "10111101000111111001011111100000", 
    90 => "10111110000010001100100100110010", 
    91 => "00111101001011101000000101010010", 
    92 => "00111100011101100101111000101011", 
    93 => "10111100100010101111011100111111", 
    94 => "10111110001111011111000100010111", 
    95 => "00111110001111011101111110000111", 
    96 => "10111110000010011001011111000100", 
    97 => "00111101001100000111000001000000", 
    98 => "00111110000000111001101100000010", 
    99 => "00111010111000100101000011000011", 
    100 => "00111101101010110001001001001101", 
    101 => "00111100011100101110111111100010", 
    102 => "00111101100000000111010101110001", 
    103 => "10111101111000001100100001000111", 
    104 => "00111101001100010010110010010011", 
    105 => "00111101100001000001000011101100", 
    106 => "10111101111010111001100010000101", 
    107 => "10111101110101011100110100001100", 
    108 => "00111101101010111010101100000111", 
    109 => "00111110000110011111011100101111", 
    110 => "00111101000000110111101111101011", 
    111 => "10111110000001000001111010011011", 
    112 => "10111100011011001101100101000111", 
    113 => "10111101111111110100110010110010", 
    114 => "00111011001001100011001100000101", 
    115 => "10111110001001111000010011101100", 
    116 => "10111101001111111111100011000100", 
    117 => "10111110000100100110010010100001", 
    118 => "10111100111011001011011101001110", 
    119 => "10111110000110010101011000111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_10 is
    component inference_conv2d_f3_2_1_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_10_rom_U :  component inference_conv2d_f3_2_1_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


