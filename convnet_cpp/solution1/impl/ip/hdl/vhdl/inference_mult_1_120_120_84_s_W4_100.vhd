-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_100_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_100_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100101101100001011000111101", 
    1 => "10111101010011001000010101001010", 
    2 => "00111100110111101101010101111000", 
    3 => "00111101000111100111111110011000", 
    4 => "00111100100010101111111110100011", 
    5 => "10111011100101011010100011011111", 
    6 => "10111101000000101110010101011000", 
    7 => "00111110001000100110110001111111", 
    8 => "10111110000000111100011101010000", 
    9 => "00111110001010001000000110100001", 
    10 => "00111101101111001011100111010010", 
    11 => "00111101101100001011110000011101", 
    12 => "00111110000100000011000000111100", 
    13 => "10111101100011100011011000010110", 
    14 => "10111100110110001101010011100011", 
    15 => "10111101111010110100110001111111", 
    16 => "00111101011101011100101100001110", 
    17 => "00111101100000010111100100011111", 
    18 => "00111011100111010110011000010111", 
    19 => "00111110001001000111001011000001", 
    20 => "10111110001101001001011011101110", 
    21 => "10111101010111010010111000101001", 
    22 => "00111101100101000110001110100111", 
    23 => "10111101101110111111001010010111", 
    24 => "00111101001001100001110010101111", 
    25 => "00111100010010101011110010111101", 
    26 => "10111100111000001001011110111011", 
    27 => "10111101100111010111011010011110", 
    28 => "10111100100100101010101010010010", 
    29 => "00111110010000011101000111010100", 
    30 => "00111011111110001000001101001001", 
    31 => "10111101110010111011101000000101", 
    32 => "00111101111110101111111010100100", 
    33 => "00111110000011001101010100110000", 
    34 => "00111100010101100010101010101111", 
    35 => "00111101000011111100001000110000", 
    36 => "10111100100101100001001100110010", 
    37 => "10111101111101101101110000011010", 
    38 => "00111110000111111000101010001111", 
    39 => "10111101111011100111111101101111", 
    40 => "10111100100100110011101010100101", 
    41 => "10111101101101010000011001001010", 
    42 => "10111100111100111000111011011000", 
    43 => "00111101010000011101000101000001", 
    44 => "00111101111101001111000011011000", 
    45 => "00111011110110100001100010100101", 
    46 => "10111101100101011100010000010101", 
    47 => "10111101010001011001000111110101", 
    48 => "10111101011110101110000111101001", 
    49 => "10111110010100000100000101000110", 
    50 => "00111101100011110100110001000110", 
    51 => "10111110000011010100001111010000", 
    52 => "00111101111001010110000111010100", 
    53 => "00111110000000101000000100110100", 
    54 => "10111101101011011010110101011010", 
    55 => "00111101001110010101101011100101", 
    56 => "00111101100101010010001101010101", 
    57 => "10111101010110011111011001001011", 
    58 => "10111101100101111101011000111110", 
    59 => "10111100110000110111110011111000", 
    60 => "10111101110010010110111001011001", 
    61 => "00111101011100101001000101101000", 
    62 => "10111101011000101001000111111011", 
    63 => "00111101001010010001110010001111", 
    64 => "10111101000101100100001101010011", 
    65 => "00111011100010101010001011110001", 
    66 => "00111101101010000101111010011100", 
    67 => "00111101001101111110000100011000", 
    68 => "00111110000101110100100101101011", 
    69 => "00111100011010010111010111100101", 
    70 => "00111100100010101000111111011100", 
    71 => "00111100100101010100000001101111", 
    72 => "00111101101110011111100010100111", 
    73 => "10111100101111101001111000000000", 
    74 => "00111101110111111100010000111011", 
    75 => "00111110001000000111110110010001", 
    76 => "10111101100000010110011010011101", 
    77 => "10111100100000101010010100101100", 
    78 => "10111100001111110111101110101011", 
    79 => "00111110000001101001001000101110", 
    80 => "00111101010001110011000001000000", 
    81 => "10111110001100000110010110110110", 
    82 => "10111101111110010011011010000010", 
    83 => "10111110000001001111100001110010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_100 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_100 is
    component inference_mult_1_120_120_84_s_W4_100_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_100_rom_U :  component inference_mult_1_120_120_84_s_W4_100_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


