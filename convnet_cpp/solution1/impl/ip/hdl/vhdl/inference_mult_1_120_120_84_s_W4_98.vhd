-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_98_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_98_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010100100001101011101010", 
    1 => "00111110001111000010110111110001", 
    2 => "10111101100001110101010011011001", 
    3 => "00111101110000000110001000110011", 
    4 => "10111100111111111010111011010111", 
    5 => "10111010110000001100110100111010", 
    6 => "10111101001010001111110011100100", 
    7 => "00111101110000010011000011111010", 
    8 => "00111101111110000000011101111001", 
    9 => "10111110000010101111001111100100", 
    10 => "00111101011110010100101001010100", 
    11 => "10111101110011000011110111100001", 
    12 => "00111101001101101001001110100101", 
    13 => "00111110000111110010101100100100", 
    14 => "00111101001011110111000110001101", 
    15 => "00111100110110001100101001100111", 
    16 => "10111011110101111000011101111011", 
    17 => "10111110010000011010100011101111", 
    18 => "00111110001000000111111010011110", 
    19 => "10111101001001000110110010010001", 
    20 => "00111110001111110110101001010001", 
    21 => "00111100101000001010110100011111", 
    22 => "10111101101010000001010110111011", 
    23 => "10111110001001010110100010100101", 
    24 => "00111100000100011111010011100000", 
    25 => "00111100110100110111101100000111", 
    26 => "10111110000000001101011100111000", 
    27 => "10111110001111011000100111001110", 
    28 => "00111101100001001001110100010000", 
    29 => "10111110000111011000100101001000", 
    30 => "10111100101000101111101011010111", 
    31 => "00111110000101001110011110101011", 
    32 => "10111100110001111010111010000000", 
    33 => "00111100111011000111000010100001", 
    34 => "10111110001010000111011111101110", 
    35 => "00111101010010000011001100100101", 
    36 => "00111110001110101111110100010001", 
    37 => "00111100111110101001100111111010", 
    38 => "10111101101011100010110100011111", 
    39 => "00111101101100010111010111111010", 
    40 => "10111100001101111001010001010110", 
    41 => "00111101100000101001100010010110", 
    42 => "10111110000110010011110000000100", 
    43 => "00111100100011100000110111100000", 
    44 => "10111110001100101000100001001000", 
    45 => "10111100100011101101110010100111", 
    46 => "10111101110111111011001001101000", 
    47 => "00111101110110110011111000010100", 
    48 => "10111101001000100010101101101110", 
    49 => "10111101100101111100111010001001", 
    50 => "00111110000101000101000011110000", 
    51 => "00111101101001010110000110111001", 
    52 => "10111101110010000011000000001101", 
    53 => "10111101100101111101110011110100", 
    54 => "10111101000011111111000111001011", 
    55 => "10111101000101010010010111001100", 
    56 => "10111110011000011010000100010010", 
    57 => "10111101011001000100011010000001", 
    58 => "00111110000010100000010100010100", 
    59 => "10111101110001110000111010001010", 
    60 => "00111100100111010111011101110101", 
    61 => "10111101011110110100000100111010", 
    62 => "00111101101000110010000111011001", 
    63 => "10111100101010110101011110011101", 
    64 => "00111101100000100000000000010010", 
    65 => "00111101010010011011101011111111", 
    66 => "00111011010110110001001000001010", 
    67 => "10111110010000010000010010010010", 
    68 => "10111101100111100000000011000100", 
    69 => "10111110000011111000010001000101", 
    70 => "00111101100010011000101011011110", 
    71 => "00111100101111111111110100010000", 
    72 => "00111011110101001001010000010110", 
    73 => "00111010001100010011011000100001", 
    74 => "10111100000101000001001011100111", 
    75 => "10111101100010001011100101101010", 
    76 => "10111110001000101101000001011111", 
    77 => "10111101010011001000110010000110", 
    78 => "00111110011110111100011100101110", 
    79 => "10111101110011011110001110111001", 
    80 => "10111110001000101101010101011010", 
    81 => "00111101100010110100000100111010", 
    82 => "10111100100011111001000001100001", 
    83 => "10111101111111000110010111000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_98 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_98 is
    component inference_mult_1_120_120_84_s_W4_98_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_98_rom_U :  component inference_mult_1_120_120_84_s_W4_98_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


