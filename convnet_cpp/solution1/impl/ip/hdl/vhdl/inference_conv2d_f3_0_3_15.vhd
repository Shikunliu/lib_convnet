-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001000011010001000010", 
    1 => "10111101100111000011101001011110", 
    2 => "10111101100001100001111011001000", 
    3 => "00111110001001001100010101010100", 
    4 => "00111110000010110100011011111110", 
    5 => "10111101101100110001100100100101", 
    6 => "10111101001100011000010001110010", 
    7 => "10111011110110010001000100010011", 
    8 => "10111101000001100110110110111101", 
    9 => "00111101101110110100110001111111", 
    10 => "00111011101001011100011010111001", 
    11 => "10111101100101011110011100101000", 
    12 => "10111101100110101011100011110110", 
    13 => "10111100100011101110111110111101", 
    14 => "10111100111011100000001101001001", 
    15 => "10111101100001101001000101001001", 
    16 => "00111110010101000011001111010111", 
    17 => "00111100111110001110110000010000", 
    18 => "00111101101011111111000000101011", 
    19 => "10111101000111111111100000001000", 
    20 => "10111100110000001001101100110000", 
    21 => "10111110001001001010011010101000", 
    22 => "10111101011011110101000101011100", 
    23 => "00111110000011110000011000101101", 
    24 => "10111101000100100111100100010100", 
    25 => "10111101101110000011001101011011", 
    26 => "00111101111110011100111110011010", 
    27 => "00111101011100111101101000100010", 
    28 => "10111110000101111001010001100100", 
    29 => "10111100111001100111011010001100", 
    30 => "00111011100101000111101000110101", 
    31 => "10111101110100111011110110011101", 
    32 => "00111101110110110101010110101100", 
    33 => "00111101101010001100010100101001", 
    34 => "10111011110110111110100101001010", 
    35 => "00111110000111100111010011110011", 
    36 => "00111110001001010000001010101100", 
    37 => "10111101100000000001111011000111", 
    38 => "10111011101010011100101101010101", 
    39 => "00111101110101010101101011000000", 
    40 => "10111101101110110101111011100110", 
    41 => "10111101000100000011110000100011", 
    42 => "10111110000011101001001110011111", 
    43 => "10111101000001100100110110100111", 
    44 => "10111110000101110111000111001001", 
    45 => "00111110001000011001011101011111", 
    46 => "10111101001010101111000111001100", 
    47 => "00111101010101011011101100111000", 
    48 => "10111101000010110011100011001001", 
    49 => "00111101101111100010100100010110", 
    50 => "00111101000111010101110010000010", 
    51 => "00111101011010001001111011110000", 
    52 => "00111101111110001110100111110111", 
    53 => "00111101001111010111010010100000", 
    54 => "00111110001111010101000000100010", 
    55 => "00111101011101111110100101000110", 
    56 => "10111100001001110000100101011001", 
    57 => "00111011100000111000101000001110", 
    58 => "00111101001001000111111011010000", 
    59 => "00111101110000010100001101101111", 
    60 => "10111100100010001110011011111010", 
    61 => "00111101011001110010111101101001", 
    62 => "00111101111010110011000100111100", 
    63 => "10111101100001001100010011110110", 
    64 => "10111101001001010111000111111010", 
    65 => "10111110000010000101111000111110", 
    66 => "00111110011000011100110111100110", 
    67 => "10111101000011100111010001101101", 
    68 => "10111100001010001011010001010100", 
    69 => "00111101001101001111010010111001", 
    70 => "10111101110011000011001000001000", 
    71 => "00111110000110111010001100000001", 
    72 => "00111101100101010001001010011100", 
    73 => "10111110000000110011000111100100", 
    74 => "10111101010110011100101000100110", 
    75 => "10111110010000111100001001010101", 
    76 => "10111101111001111111101010100000", 
    77 => "10111101001001001001111001111011", 
    78 => "10111101101010010000100011011000", 
    79 => "10111101101100000100011100011000", 
    80 => "00111110000111100000011011011001", 
    81 => "00111101100110110001100100101011", 
    82 => "00111101110000110110011111100100", 
    83 => "10111100100010100100001110111011", 
    84 => "10111101011010011001010001001110", 
    85 => "10111110010001010110100100101011", 
    86 => "00111101001110111011011100010110", 
    87 => "00111100000110110000001100000110", 
    88 => "00111101010100001001100111111100", 
    89 => "00111110000010000110110010101001", 
    90 => "00111101100010101000101000100101", 
    91 => "00111101001011011101101101110000", 
    92 => "00111100110100011110110000100110", 
    93 => "00111100111101011101011100011101", 
    94 => "00111110001110000001000011101001", 
    95 => "00111101111111000001110111110011", 
    96 => "10111101001111010001101100101110", 
    97 => "00111110001111101000110100010001", 
    98 => "00111101001010110101011101001100", 
    99 => "10111101110111101111000001101011", 
    100 => "10111101100001001000101101110011", 
    101 => "10111100000110101110000010100001", 
    102 => "00111101001001101110111000110001", 
    103 => "10111101010011010111010001011101", 
    104 => "10111100111001011101111111000011", 
    105 => "00111100101100011000010000111100", 
    106 => "10111101100001110000010000001110", 
    107 => "10111101100010011010001001011011", 
    108 => "00111101100010111001001001111101", 
    109 => "00111011100111110001100000001001", 
    110 => "10111110000110000001000000011111", 
    111 => "10111101110110101011100101101111", 
    112 => "00111100110010101100010001001001", 
    113 => "10111100011100110011100000000110", 
    114 => "00111101100111100101011011000000", 
    115 => "00111101101010111101001110000000", 
    116 => "10111101101011010111000101010010", 
    117 => "00111101100010001000000001011111", 
    118 => "00111110001110111100101101100000", 
    119 => "00111110010001111110111010010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_15 is
    component inference_conv2d_f3_0_3_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_15_rom_U :  component inference_conv2d_f3_0_3_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


