-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011101011101000011101101", 
    1 => "00111101111000001100100101010100", 
    2 => "10111101010010110011000010110110", 
    3 => "10111101100111001001111001011001", 
    4 => "00111101100011110111010001100010", 
    5 => "10111110010000101101011111111001", 
    6 => "10111100101010110101111100101001", 
    7 => "10111110100000000010011110110111", 
    8 => "10111110011100001101101101101010", 
    9 => "10111100100000110101110001110110", 
    10 => "10111011001111011101011101100111", 
    11 => "00111101010101110111100011111000", 
    12 => "00111101100110111000100001000100", 
    13 => "00111101110000111101101000010101", 
    14 => "00111101111100100001111111110011", 
    15 => "10111011011011010111110101000110", 
    16 => "00111110001001000101111101011011", 
    17 => "00111110010110001000000000001111", 
    18 => "10111110100111110100101010011001", 
    19 => "00111100110000110111010101101011", 
    20 => "10111101101111001100010101101000", 
    21 => "10111110001011101001001001001111", 
    22 => "10111110011111100101001011011111", 
    23 => "00111100101001001000110110110100", 
    24 => "10111101001011000000010010000110", 
    25 => "00111101101011001100111111100101", 
    26 => "10111110000101010101100110110100", 
    27 => "10111101110111000000110010100110", 
    28 => "00111101001111101011100011110011", 
    29 => "10111101111110100001000110101001", 
    30 => "00111011000110110010001000110000", 
    31 => "10111110000000001011011001110100", 
    32 => "10111110000000010011000011100000", 
    33 => "00111101011001110100010011001110", 
    34 => "00111011101011000000000001100100", 
    35 => "00111101101001000000111010010000", 
    36 => "00111101110010100111101101110111", 
    37 => "10111100011001011110100111010100", 
    38 => "00111101010101100110101110110010", 
    39 => "10111101000111011100100100111111", 
    40 => "10111101100011101001011011101100", 
    41 => "00111110001000001001000101111101", 
    42 => "00111100101101111100111000000010", 
    43 => "10111101110011110001110111000101", 
    44 => "00111011110110001000111100111000", 
    45 => "10111101111001101000111111010010", 
    46 => "10111101110110110011110100001000", 
    47 => "10111101111110100000111110010001", 
    48 => "10111110000101000011011000110011", 
    49 => "10111101011010010100111010010011", 
    50 => "10111101011101101000001010101001", 
    51 => "00111101101110010000000100110001", 
    52 => "10111100110000110100011001110001", 
    53 => "10111101110001010110001111100000", 
    54 => "00111110001000010000101000010011", 
    55 => "00111100111010100101010111011111", 
    56 => "00111101100000111001110111010111", 
    57 => "00111101010111000100111001001010", 
    58 => "00111101010010110001100010110010", 
    59 => "00111110000001111111011100111000", 
    60 => "10111100101000001000010100010000", 
    61 => "10111101010100110101001000000111", 
    62 => "10111101100111001110001000110001", 
    63 => "00111101001001100000011011000101", 
    64 => "00111110000000101110111010000101", 
    65 => "10111101011110011001001011111110", 
    66 => "10111110000011111110100111111011", 
    67 => "10111110001011011101010110010001", 
    68 => "10111011101101110011101101101011", 
    69 => "00111101001100100110101010011011", 
    70 => "00111110001011111111001000011011", 
    71 => "10111110001011000001000001010010", 
    72 => "10111110000000010011110000100101", 
    73 => "10111100111110111110111100101111", 
    74 => "10111110000100010101100001110101", 
    75 => "00111100100000010100011101011110", 
    76 => "10111110100001001111010010000100", 
    77 => "00111101011000100110111010100101", 
    78 => "10111101011001110001111001010010", 
    79 => "00111101111011101110011010111000", 
    80 => "00111100010110101000110010101001", 
    81 => "10111001000000110011111010111001", 
    82 => "00111101110011010011111100011000", 
    83 => "00111100000101110000110110101110", 
    84 => "00111101100001001010111011100100", 
    85 => "10111101110001001111101001111110", 
    86 => "10111100100111111010000101010000", 
    87 => "00111011010001011010100001101011", 
    88 => "10111100111001010110011011000010", 
    89 => "00111101111101000111101011100001", 
    90 => "10111100001001101100101000000100", 
    91 => "00111011000011001010000000001100", 
    92 => "10111101101110011001011000100100", 
    93 => "00111100001100011111111111000010", 
    94 => "10111101101010001111111000011001", 
    95 => "10111110001111110000101101101011", 
    96 => "00111101110011011001100111001100", 
    97 => "10111011100011110000110000100010", 
    98 => "10111101111111010111001101000011", 
    99 => "10111101110001100001010111011111", 
    100 => "10111011101011101100001101110111", 
    101 => "00111100011100011011001110100010", 
    102 => "00111011011110000111101111111101", 
    103 => "00111101101000011101000111101111", 
    104 => "00111101011100011101010011011111", 
    105 => "00111110010111000011100011110011", 
    106 => "10111100011101001010011100000110", 
    107 => "10111110000001101001101001001110", 
    108 => "00111100110011001100001001010000", 
    109 => "10111101010011100111000110011000", 
    110 => "10111101010000010110110101010011", 
    111 => "10111101110001100101001001101101", 
    112 => "00111101110000100000001000010000", 
    113 => "00111110000000110011000001010001", 
    114 => "10111101110011000110010101101001", 
    115 => "00111110000010001110010001110101", 
    116 => "00111110001001111000011101001000", 
    117 => "00111101100001011111111111011001", 
    118 => "10111100000100111100010010000011", 
    119 => "00111101011100111101001100000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_8 is
    component inference_conv2d_f3_0_0_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_8_rom_U :  component inference_conv2d_f3_0_0_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


