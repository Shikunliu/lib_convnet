-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100100001101001001001011", 
    1 => "10111101100010110010101001101011", 
    2 => "00111110000010101010001100100111", 
    3 => "00111100111111011000110010111110", 
    4 => "00111011001010110100110101001011", 
    5 => "00111011100100101110110110000011", 
    6 => "10111100101111000101110000000111", 
    7 => "10111101101111010101111110110101", 
    8 => "00111110000000110000101011010100", 
    9 => "00111101001111100101000101011010", 
    10 => "00111101110001000111100010100000", 
    11 => "00111101000001110000010001010001", 
    12 => "00111100110110101110110101010111", 
    13 => "00111110000001010110010100111101", 
    14 => "10111100001111110110111111101101", 
    15 => "00111110010100110101100001101101", 
    16 => "10111101000001000100010100111111", 
    17 => "10111101101000111000010100110011", 
    18 => "00111101001100100011010010000000", 
    19 => "00111101111001011111011000110100", 
    20 => "10111101101001000101001010000011", 
    21 => "10111100010010111001110001001011", 
    22 => "00111101010011010001111101101110", 
    23 => "00111101100101011101100111100100", 
    24 => "00111101111110101001101100000111", 
    25 => "10111101000000000100111110010110", 
    26 => "00111101100011110100001001010000", 
    27 => "00111101100100010011100100001101", 
    28 => "10111101100101110011001010101010", 
    29 => "10111110001001100011110001110101", 
    30 => "00111110000001101000110111111100", 
    31 => "00111110001101110110111011100111", 
    32 => "10111101110100101001100000000011", 
    33 => "10111100111111001101110100110110", 
    34 => "10111100000111011100000100010001", 
    35 => "00111110000000010100010111011000", 
    36 => "10111101110000100000010101101011", 
    37 => "00111100101000101011110110011010", 
    38 => "10111101110010100110110000001101", 
    39 => "10111101101001111000000110101100", 
    40 => "00111101101110110111010011011110", 
    41 => "10111100111101000110010111001110", 
    42 => "10111101110000011010000100111010", 
    43 => "10111100110010010010011101011100", 
    44 => "00111101100010010111011010010100", 
    45 => "00111110010110110000110011001100", 
    46 => "00111110011110011110001111001001", 
    47 => "10111101001101000111010100000010", 
    48 => "00111101100111101101101100111101", 
    49 => "10111101100010100111100110010011", 
    50 => "10111101001101111110101010111101", 
    51 => "10111101111001011101111100100010", 
    52 => "10111110000110100000000010011111", 
    53 => "10111110001000001000011111001010", 
    54 => "00111110010001001001101111101001", 
    55 => "10111101110011001001101100100110", 
    56 => "00111101010010111000110011000110", 
    57 => "00111101110001100001101001100001", 
    58 => "10111101011101100100000010011001", 
    59 => "10111101100110101001100011010011", 
    60 => "10111101100100001110000010001101", 
    61 => "10111101101110011000000010010111", 
    62 => "00111101100000000010001111000010", 
    63 => "00111101101110110010110101011011", 
    64 => "00111101001010101100111111010010", 
    65 => "10111101100100111100011000001110", 
    66 => "10111011011001111111001011101110", 
    67 => "00111010010001111111100101010011", 
    68 => "00111110000000000110101011110100", 
    69 => "00111101100101101011111101010010", 
    70 => "10111110010011111100100010110000", 
    71 => "00111101101011110000010001110010", 
    72 => "00111101011011110011101100111100", 
    73 => "10111110010100010100001110111111", 
    74 => "00111110000001000001011010111110", 
    75 => "00111011110000001110110111011100", 
    76 => "10111101111000001010111010010111", 
    77 => "00111011111010000110110101111101", 
    78 => "00111110000110011010110010111101", 
    79 => "00111101000100011111000011111001", 
    80 => "00111100110100001100000101001110", 
    81 => "10111100100111100011011110001110", 
    82 => "10111101100000010000011001101000", 
    83 => "00111101011011111000000111101001", 
    84 => "10111100101011001011101111101011", 
    85 => "10111101001101100101010110101101", 
    86 => "10111110000011111011001110110111", 
    87 => "10111101001010110000010001000000", 
    88 => "00111110001111001011101111000011", 
    89 => "00111110000011000010000010010010", 
    90 => "00111101110011011001101001010010", 
    91 => "10111101010100110010001101000011", 
    92 => "00111101000011100001001110100100", 
    93 => "00111110001100000011100001011100", 
    94 => "10111110000101011000101011111100", 
    95 => "10111110000011111010011101100101", 
    96 => "00111101101101100010011001100010", 
    97 => "00111100000101011000000110100111", 
    98 => "10111101100011010001011011101111", 
    99 => "00111100100001110100111110000000", 
    100 => "00111100101010111100000101001111", 
    101 => "10111110001111010101000011101100", 
    102 => "10111101100111010011000011110000", 
    103 => "00111110001010100111100110111100", 
    104 => "10111011011001111001000011110011", 
    105 => "10111101000100000010110001001101", 
    106 => "10111101111101010001110011100011", 
    107 => "00111101100011101010000110011110", 
    108 => "00111110000000100010010001101000", 
    109 => "00111100100110001011000011010001", 
    110 => "10111101100000001100110001101011", 
    111 => "00111100111101010010111110001101", 
    112 => "10111101001010011010001010010001", 
    113 => "00111101100101010000101001101110", 
    114 => "10111101101100010100000001100100", 
    115 => "10111101111000111111110101010000", 
    116 => "00111100111001001010111111100011", 
    117 => "10111011111011100001010010110001", 
    118 => "10111101001110010011001111111110", 
    119 => "00111101111011011001001110000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_5 is
    component inference_conv2d_f3_2_2_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_5_rom_U :  component inference_conv2d_f3_2_2_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


