-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100001001010100000000101", 
    1 => "00111101110011101000010100110100", 
    2 => "00111101000111101100110011111010", 
    3 => "10111100100101010000010110000000", 
    4 => "10111101111000000001000001000001", 
    5 => "10111110000010101000011011010111", 
    6 => "10111101101101000000110001001111", 
    7 => "10111101101111010000010110111101", 
    8 => "00111101101111011010101110000100", 
    9 => "00111100101111000001001011010110", 
    10 => "00111101111101101101111000110011", 
    11 => "10111101001110011100111110110101", 
    12 => "00111100111111101001011010101001", 
    13 => "00111011001110111010100011100011", 
    14 => "00111101100011011011111010001101", 
    15 => "10111011101010101000101111000101", 
    16 => "00111100000100001000101011111101", 
    17 => "00111101100010011111000001000100", 
    18 => "00111101101010110000111011010111", 
    19 => "10111110000110111101100110001000", 
    20 => "00111011101001011010111100010001", 
    21 => "00111100110001010101000000110110", 
    22 => "00111101001101000110000100110001", 
    23 => "00111101110001111010011000001111", 
    24 => "10111101001001100100101011010011", 
    25 => "10111101101000100101001101101111", 
    26 => "10111101010011100111001111100111", 
    27 => "00111100100111101000001000000001", 
    28 => "00111101000000100100111000001001", 
    29 => "10111101101001101110011011110101", 
    30 => "00111011110100100101000101110001", 
    31 => "00111101101010110100100111000101", 
    32 => "00111100010110100011010111010110", 
    33 => "00111110000000000001101001111010", 
    34 => "10111010110000011010011101010101", 
    35 => "00111101110101100110001001111000", 
    36 => "00111110000010100011110100101110", 
    37 => "10111101110000111001111101110111", 
    38 => "00111101110100101010010010011000", 
    39 => "10111101101010001100000111000000", 
    40 => "00111100101010100101000011010111", 
    41 => "00111101011000000101111100000000", 
    42 => "10111101111011111001010011001000", 
    43 => "10111110000100110100110000011011", 
    44 => "00111101100101110001110100000010", 
    45 => "10111101101100000001111110011101", 
    46 => "00111101001110011001000100000000", 
    47 => "10111101101000110111111000101100", 
    48 => "00111101010011111100010000010011", 
    49 => "10111100111000111100111100010010", 
    50 => "10111011101111001110110001011010", 
    51 => "00111101000111111111111000000010", 
    52 => "00111101111101101001011101101100", 
    53 => "10111110001010101100000100001001", 
    54 => "10111101110110001011111011111001", 
    55 => "00111101111111111110011101011100", 
    56 => "00111110000100101110100011000000", 
    57 => "00111101011011011000110011001011", 
    58 => "00111101011011000111011101110010", 
    59 => "10111110001001000101011100111010", 
    60 => "10111101010111100010111111001100", 
    61 => "00111101010000110011110011100110", 
    62 => "10111100111000011111001010011001", 
    63 => "10111110010000000001110010010011", 
    64 => "00111101110100001001000101111101", 
    65 => "10111101111001100110000100101000", 
    66 => "10111100100110001100000101100010", 
    67 => "00111101101111010110011100100110", 
    68 => "00111110010010011101100010000100", 
    69 => "00111101010000110101001001001010", 
    70 => "00111100110000011000100110100011", 
    71 => "10111110000100100101001011001110", 
    72 => "00111101011111001001001100010011", 
    73 => "00111100101110011010010100111101", 
    74 => "10111101110111001111101010101101", 
    75 => "10111101101000101010010100000011", 
    76 => "00111101010001101111001001111101", 
    77 => "00111101010110111111100100100101", 
    78 => "00111101101101010101000000101001", 
    79 => "00111101110110101100111011101110", 
    80 => "10111110000100111001110101011110", 
    81 => "00111011110111111011000101000000", 
    82 => "00111110001110101010110111100110", 
    83 => "00111101110110000101110101110100", 
    84 => "10111110010000011110101110000101", 
    85 => "00111101011101000111110011011111", 
    86 => "10111100101100010100001000101101", 
    87 => "00111100111111101001011110110110", 
    88 => "10111101101101001111101101101111", 
    89 => "00111110000101010011001100101011", 
    90 => "00111101110000100101000111000010", 
    91 => "10111101100110100001001100010100", 
    92 => "00111101110100000110110111010111", 
    93 => "10111101001100001000100111010110", 
    94 => "10111101100011101101010000101001", 
    95 => "00111110001111111010110111110011", 
    96 => "10111101001000001011001101101001", 
    97 => "10111100111011011011101111000101", 
    98 => "10111101011000011010111011011100", 
    99 => "00111110000011111111010001110111", 
    100 => "00111101011000011101111110111001", 
    101 => "10111101011100011000101101111000", 
    102 => "10111100000000111111111010111101", 
    103 => "00111100111101011101100101101011", 
    104 => "10111101101011101000100010001111", 
    105 => "00111101100011011100011110000100", 
    106 => "10111101001110010010010011100101", 
    107 => "10111101110110110010100100011100", 
    108 => "10111101111001000000101101111000", 
    109 => "00111101010001110011111101011010", 
    110 => "10111100101100101110101101111010", 
    111 => "00111101100101010011110010110110", 
    112 => "00111101100110000010101101110000", 
    113 => "00111101101110101101100101011101", 
    114 => "10111101110101000101101001100000", 
    115 => "00111010101101111010010000011100", 
    116 => "00111100110100000100100111111010", 
    117 => "10111100100000101000010011100000", 
    118 => "10111110000010110011110000111110", 
    119 => "00111011110011110110100101011111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_4 is
    component inference_conv2d_f3_3_1_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_4_rom_U :  component inference_conv2d_f3_3_1_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


