-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111010100000000100100110", 
    1 => "00111100111101010111100111001010", 
    2 => "10111011110011110000100000111011", 
    3 => "10111100110010100111011110111110", 
    4 => "10111101101110100011011001011101", 
    5 => "00111100100101001001010011100010", 
    6 => "00111110001011000001110011100111", 
    7 => "10111100000011001101111111011000", 
    8 => "10111100111101010111111010011101", 
    9 => "10111101110101010110001010011110", 
    10 => "10111101001011111010000111001001", 
    11 => "10111110000010111100101101100000", 
    12 => "00111101100111101100110111010001", 
    13 => "00111110000010001100001111110100", 
    14 => "00111110000010110001011110001011", 
    15 => "00111110000011101001011010000001", 
    16 => "10111100101111011000111110101110", 
    17 => "00111101001010010101010000000111", 
    18 => "00111101110111001000111000100110", 
    19 => "00111100001111110111111100000110", 
    20 => "00111110000111111001111000111000", 
    21 => "00111100111111110111101101110110", 
    22 => "00111101101011101011101111010101", 
    23 => "10111110000000101111111101001100", 
    24 => "10111110000100100001011111010011", 
    25 => "00111101100010101100101100001101", 
    26 => "00111100101110001101100000100011", 
    27 => "10111101100010110110101011110101", 
    28 => "00111011100010100011100111010101", 
    29 => "10111110000100001100101101101100", 
    30 => "10111101100010100001101011111111", 
    31 => "00111110001111111111001001011110", 
    32 => "10111011001000101110000011000000", 
    33 => "00111101110100100100111010011100", 
    34 => "10111101101001000001010100111000", 
    35 => "00111100101001110010100010011001", 
    36 => "00111110000000000010111001100110", 
    37 => "10111011000100100100110011001001", 
    38 => "10111101000111111010011001011001", 
    39 => "00111101100001010011101110001110", 
    40 => "00111101110000100110010100101000", 
    41 => "10111101101011111000001010010111", 
    42 => "10111101000010010101011000111011", 
    43 => "10111101110001111011011101110111", 
    44 => "00111101100000101100111000111001", 
    45 => "10111110000011011001101010010101", 
    46 => "10111110000111000110000110010101", 
    47 => "00111101010110110000110111110011", 
    48 => "00111101001111001000001011010011", 
    49 => "00111110001101010111110011010100", 
    50 => "00111101101110110110011100101111", 
    51 => "00111101101011101110100110001101", 
    52 => "10111101101010111100110100001101", 
    53 => "10111101110111111011001011101110", 
    54 => "10111101010100010110101111001110", 
    55 => "10111101110100101000100101010101", 
    56 => "10111110000001101110111011111010", 
    57 => "10111100001000011001000100110101", 
    58 => "10111100100011101101000011101001", 
    59 => "00111101010011100110110110110111", 
    60 => "00111101100110010100110010100010", 
    61 => "00111101100111000001000110100001", 
    62 => "10111011101110111100100010000011", 
    63 => "10111101101000101111100100101001", 
    64 => "00111110000010101111100100100011", 
    65 => "10111101001000000010001001001010", 
    66 => "10111101110000011001101000001100", 
    67 => "10111110010001001101100010111010", 
    68 => "00111101101010011111001101001110", 
    69 => "00111110011000001000110100001001", 
    70 => "10111110000101110010000111010101", 
    71 => "10111101111101100001000100110100", 
    72 => "00111110001101101101011011011100", 
    73 => "00111101000111000110010010000101", 
    74 => "10111100101010000101011001100000", 
    75 => "10111101110011100010100111111010", 
    76 => "10111100110101010000100001110000", 
    77 => "00111100100010000111110101000111", 
    78 => "00111101111110010000100001011111", 
    79 => "00111101000011000111100111000001", 
    80 => "00111110000001000100000111111111", 
    81 => "00111101001101111101100010011010", 
    82 => "10111100000111000001110100101101", 
    83 => "10111101100100101000100000100000", 
    84 => "00111101001000100111110001100001", 
    85 => "00111101011101101001000011101011", 
    86 => "10111011001100010101001100011111", 
    87 => "10111101011100100011010101110010", 
    88 => "00111101101010110000101001110000", 
    89 => "00111010100111110101101011001111", 
    90 => "10111100101010100100110000000100", 
    91 => "10111101101110001011101001110111", 
    92 => "00111101001000101110110111010110", 
    93 => "00111101000100001111111101000111", 
    94 => "10111101100110110011011010100010", 
    95 => "10111101011100101011001111100111", 
    96 => "00111101110011110010101011100000", 
    97 => "10111110000111100000011101011111", 
    98 => "10111001001100010101110100001101", 
    99 => "10111101111011101011110111010011", 
    100 => "10111101110001111110101110000111", 
    101 => "10111101000011011110000000101000", 
    102 => "00111011010101100000010010101111", 
    103 => "00111101000000111010111010010001", 
    104 => "10111101000110111110010101010100", 
    105 => "10111101000001100100000111101001", 
    106 => "10111101110110001010001100101111", 
    107 => "10111101001110101111101011011110", 
    108 => "10111101110011101110110100000011", 
    109 => "10111100111001000000110010111010", 
    110 => "00111100110100000011001001000111", 
    111 => "00111101011001000100100111011100", 
    112 => "10111110000101001111100010110110", 
    113 => "10111101001000100010001110010001", 
    114 => "10111110000101000111011111111111", 
    115 => "00111100100111100101110001000001", 
    116 => "00111101000011101111000110111011", 
    117 => "00111100101101001101000001010111", 
    118 => "10111101100100001010011110000011", 
    119 => "00111110000001000100110001111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_4 is
    component inference_conv2d_f3_3_3_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_4_rom_U :  component inference_conv2d_f3_3_3_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


