-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010111000101001110100011", 
    1 => "00111101011010000010110111001100", 
    2 => "10111011001101101000101001101011", 
    3 => "10111101001001010001001001110100", 
    4 => "00111110010010000000010000010000", 
    5 => "10111011110110101010101000000101", 
    6 => "00111100100100010000111001111011", 
    7 => "10111101101011010110001101010011", 
    8 => "10111101001101011111001100000001", 
    9 => "00111100001101010101111101011101", 
    10 => "00111101101011100001010100001111", 
    11 => "10111101000010100111110010010000", 
    12 => "00111101010101011100000011111101", 
    13 => "00111101001001111001111111010010", 
    14 => "10111011110000110000110011000101", 
    15 => "00111101111000010001110010110000", 
    16 => "00111110001100100110111011011011", 
    17 => "10111110000111001000111110111000", 
    18 => "10111101111101001010010011010011", 
    19 => "10111110000111101000100010011100", 
    20 => "10111101100001000111110001011001", 
    21 => "10111100000011101100000100000011", 
    22 => "00111101001110011000101001001010", 
    23 => "10111100001011101000011111010011", 
    24 => "00111100111101100111000101000001", 
    25 => "00111100011010101011000110111010", 
    26 => "00111100101011101110000110010101", 
    27 => "00111011111111001001101010011011", 
    28 => "10111100001110000001101010001110", 
    29 => "10111101111110101111101101111111", 
    30 => "00111101111011010011100111011010", 
    31 => "10111101101001100110000011100101", 
    32 => "10111101011100010000100101110010", 
    33 => "10111101101010101000100011111101", 
    34 => "10111110000011101011110100001010", 
    35 => "00111101101001011001011001111000", 
    36 => "10111101010111111110110000101111", 
    37 => "10111100011010100111111111010001", 
    38 => "00111100101101010011010000101010", 
    39 => "10111101100001001101100010111010", 
    40 => "10111101110010000111000110111111", 
    41 => "00111101100111000011010001111111", 
    42 => "10111110000100111011000010000001", 
    43 => "10111110000010000000010000010000", 
    44 => "00111101101001100010101110000110", 
    45 => "10111001101111011101101011001010", 
    46 => "10111101110100111101110110011000", 
    47 => "10111101100111011110100101110000", 
    48 => "10111100000110100001010011001001", 
    49 => "00111100100100010110000111110010", 
    50 => "00111100010001011010110100011110", 
    51 => "00111100011010100011101111011110", 
    52 => "00111101010110111001010001111011", 
    53 => "00111100111010000111110011000001", 
    54 => "10111011000101011001100100000100", 
    55 => "10111110000000011110001111101011", 
    56 => "10111101001011010110101100111101", 
    57 => "10111101111111110011100111010010", 
    58 => "10111101001100101001010100101110", 
    59 => "00111100010001001111001110111010", 
    60 => "00111101101011111100101111100011", 
    61 => "00111100101000110100100100010000", 
    62 => "10111110011000111100001100011110", 
    63 => "00111101100010011110101001001010", 
    64 => "10111101111110111010101100100010", 
    65 => "00111101111101111010011001111010", 
    66 => "00111101000001101111010010010110", 
    67 => "00111101100100101100000111110100", 
    68 => "10111101110110010111001011001101", 
    69 => "00111101011011010010101000111010", 
    70 => "10111101001101110100101100100110", 
    71 => "00111101110110111100001101000000", 
    72 => "10111110000100110001000010011001", 
    73 => "00111101011010100001110111111100", 
    74 => "10111101101110011111101001110000", 
    75 => "00111100111001100001111110000100", 
    76 => "10111011101010001011000111100101", 
    77 => "10111101101101110011010001100101", 
    78 => "00111100110101000111101000001011", 
    79 => "10111110010001011100010111111000", 
    80 => "00111110010010001011110101100110", 
    81 => "10111101011011111011101111001010", 
    82 => "10111100011110100101111000000000", 
    83 => "10111100001110000110110100101111", 
    84 => "10111101110101110011010000101111", 
    85 => "10111101100100110110000011010000", 
    86 => "00111101011100110010110101010100", 
    87 => "00111101100011100110100101111000", 
    88 => "00111110001011101100011010111101", 
    89 => "10111110000100111011111011101100", 
    90 => "10111101101100101011000010110100", 
    91 => "00111011101101100101000101110110", 
    92 => "00111101111001110101100110101011", 
    93 => "00111100011100110001010100110110", 
    94 => "10111110001111100011111011110011", 
    95 => "10111100000110111001011111100001", 
    96 => "10111101100000111100101101001100", 
    97 => "00111101101011000100011000011100", 
    98 => "00111101010000100011110010100001", 
    99 => "00111101101001111011000110011000", 
    100 => "00111100111110101111011100010111", 
    101 => "00111100111101110010101110110001", 
    102 => "00111011100101101111011101010011", 
    103 => "00111110001101010101100101110001", 
    104 => "10111101100011100001100010101101", 
    105 => "00111100111110110011100111001000", 
    106 => "00111100111101001100111101001010", 
    107 => "10111101110010101011110010010100", 
    108 => "00111110001111111101111001110010", 
    109 => "10111101001101110111000101101011", 
    110 => "10111011100110000010111011001011", 
    111 => "10111101011111100100110011010111", 
    112 => "10111100001011111101010110110001", 
    113 => "10111101010001000111011011110011", 
    114 => "10111110001101010100001001011111", 
    115 => "00111110000000010011000001011001", 
    116 => "10111101011111100101001010011100", 
    117 => "10111101101000010110010110111001", 
    118 => "10111110000101010110011100010010", 
    119 => "00111110001110111110010100010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_14 is
    component inference_conv2d_f3_2_1_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_14_rom_U :  component inference_conv2d_f3_2_1_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


