-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000010110010001001110011", 
    1 => "10111110010001000001000000110000", 
    2 => "10111101010000010100011100101000", 
    3 => "00111110000101100111010111011110", 
    4 => "10111101111111000010111010111010", 
    5 => "00111110010101001010011101110010", 
    6 => "00111110000000000111011101000111", 
    7 => "10111101011010010111110011010001", 
    8 => "10111100111101011101010010011000", 
    9 => "00111101001001000000010001110001", 
    10 => "00111110000001110101111100101101", 
    11 => "00111101001100010111001000011000", 
    12 => "10111101111101100111110110111011", 
    13 => "00111110010101010100100101110011", 
    14 => "00111101101010010111000111000001", 
    15 => "00111101011000000110110011110010", 
    16 => "10111100110100001000011111011000", 
    17 => "00111110000001110111101101111100", 
    18 => "00111110000111011010101111100010", 
    19 => "00111110001100110100100101111011", 
    20 => "00111110011010010001011100001101", 
    21 => "10111100010011011011100111000111", 
    22 => "10111101101011010100010110110011", 
    23 => "00111101001110010100011110011010", 
    24 => "10111101000011000000100111000100", 
    25 => "00111101000010101110111010100110", 
    26 => "00111100001000101001010010010101", 
    27 => "00111101000100110000101010011111", 
    28 => "00111110010101001100100010111101", 
    29 => "10111101111110111100111001000010", 
    30 => "00111101011001110001011000100100", 
    31 => "00111101011101011100111010000100", 
    32 => "00111011101000010010101001000111", 
    33 => "00111110000101111001100110100010", 
    34 => "10111101001010101101011001101101", 
    35 => "10111011100100100111011000001111", 
    36 => "00111101001101110000101111101011", 
    37 => "00111101011011010100111100001000", 
    38 => "00111100110001000111001111001101", 
    39 => "10111101101101111000111011001000", 
    40 => "10111101111001100000111101011110", 
    41 => "10111100110011010101000100100001", 
    42 => "00111101011110001110110101010010", 
    43 => "00111011100101100000001010110110", 
    44 => "10111011111100010100111011100010", 
    45 => "00111101001010010110001110100111", 
    46 => "10111101111101101100000111100011", 
    47 => "10111101010110000001110000111100", 
    48 => "00111110000101011100001001001100", 
    49 => "10111100110111011010110010000100", 
    50 => "00111101101000110110101101011010", 
    51 => "10111110000111110100100111001111", 
    52 => "10111110000100100001100110101000", 
    53 => "00111101101111000110000011100111", 
    54 => "00111010100001010100010101111010", 
    55 => "10111110000110011001100010001101", 
    56 => "10111101110101101011001000101001", 
    57 => "10111101011110100011101100010101", 
    58 => "10111011001010011001110000011011", 
    59 => "00111001011000110000000001000000", 
    60 => "00111010100111010100010101001011", 
    61 => "10111100110000110100010011000011", 
    62 => "10111110010110001010101101010000", 
    63 => "00111100111011010111010011100011", 
    64 => "00111101111000111010001010011100", 
    65 => "00111101111111001010011111010110", 
    66 => "00111100001000010000111000111000", 
    67 => "00111101111000000100101011111001", 
    68 => "00111100101101100110100100010011", 
    69 => "00111101101100010110101100111010", 
    70 => "10111101110111101011111000010110", 
    71 => "10111101100011110010111010001100", 
    72 => "10111101101110111010100000110010", 
    73 => "10111110000100000010100110101110", 
    74 => "10111101110010100010001000111011", 
    75 => "10111110001010010101000110000011", 
    76 => "00111101110001111101010101100111", 
    77 => "10111100111111111001111000010000", 
    78 => "00111101100001011110111111110111", 
    79 => "10111110000110111110110100110001", 
    80 => "10111101000001101001011100101001", 
    81 => "00111100111100110111011010111010", 
    82 => "00111110000011101111101010100100", 
    83 => "00111101101011111010000000011100", 
    84 => "10111110000101100000101101110000", 
    85 => "00111110000101000100011000110000", 
    86 => "00111011101010110111000010110010", 
    87 => "00111101000110000010010000110100", 
    88 => "10111110000001010010001100101101", 
    89 => "00111100100000101010101101110110", 
    90 => "10111101010100101101000110010100", 
    91 => "10111101101001001101110001011000", 
    92 => "10111110000110111001100110010001", 
    93 => "10111100100110010001011100101000", 
    94 => "00111101011000011011110101010101", 
    95 => "00111100100101110101011011111111", 
    96 => "00111101110100011111010011110101", 
    97 => "10111110000000100100010111110110", 
    98 => "00111110000110000101110110110111", 
    99 => "10111101111101011011101100111000", 
    100 => "10111100001101010110101010110000", 
    101 => "10111100100000111101000011011010", 
    102 => "00111101011001100000100100010100", 
    103 => "00111101110000111110011011111010", 
    104 => "10111110000000100101101100110001", 
    105 => "00111101001010001010100010010110", 
    106 => "10111101000011011001110010100001", 
    107 => "10111101110000101100100100111110", 
    108 => "00111101100111011010101011111110", 
    109 => "10111110000110000011000010100001", 
    110 => "00111100110100011100101100000100", 
    111 => "10111110001011101010000010111010", 
    112 => "00111101001010001001110100001101", 
    113 => "10111110001100101111100100000001", 
    114 => "10111101101011000010100010001010", 
    115 => "10111101111111100111110110011010", 
    116 => "00111101101101111100010001101010", 
    117 => "00111101100000000000111111100011", 
    118 => "00111100110000100101000000111100", 
    119 => "10111100010010101001000010110010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_7 is
    component inference_conv2d_f3_4_3_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_7_rom_U :  component inference_conv2d_f3_4_3_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


