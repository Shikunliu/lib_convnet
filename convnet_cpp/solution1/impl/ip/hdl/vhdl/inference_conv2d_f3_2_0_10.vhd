-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110111111111101101001000", 
    1 => "10111101100111011011110101001010", 
    2 => "10111101100000000110000110010010", 
    3 => "00111101010110001110010010000011", 
    4 => "00111011101100011011100100110110", 
    5 => "00111101101011101011100111100101", 
    6 => "10111101001101100110001110000100", 
    7 => "00111110000111110101010011010010", 
    8 => "10111101000110011101100101000000", 
    9 => "10111100010110011010000101011100", 
    10 => "00111101000010011101011100011001", 
    11 => "00111110000011000001010001000000", 
    12 => "00111101010110011111001111111101", 
    13 => "00111101000000100110111001101111", 
    14 => "00111101111010100101000001010000", 
    15 => "10111101001010101110110100010100", 
    16 => "10111101010101001100011000101011", 
    17 => "10111010111110011010101100100111", 
    18 => "10111101101010011001101001100011", 
    19 => "10111101011000110001110111000010", 
    20 => "00111110001010010101000110000011", 
    21 => "10111101101000110110100110010010", 
    22 => "10111011101000101011100000111100", 
    23 => "00111101111001001000100101001100", 
    24 => "00111100011111001101100010011001", 
    25 => "00111100001101101011010110011111", 
    26 => "10111101011000100111001011110010", 
    27 => "10111101111101011010011111010010", 
    28 => "00111101011110010111110111101011", 
    29 => "00111100111000001010000111001100", 
    30 => "10111110010100110100010110001101", 
    31 => "10111101111001100101111110010110", 
    32 => "10111110001001011111101000100010", 
    33 => "00111100101001000010011110010010", 
    34 => "10111101100011001111111001001011", 
    35 => "10111101111011110010010110100010", 
    36 => "00111110010100101011011101111000", 
    37 => "00111101101101100000010110011110", 
    38 => "00111101101111000111001101011011", 
    39 => "00111101111111000000100011111010", 
    40 => "10111101000000101001100111110011", 
    41 => "10111110001110011110001000110111", 
    42 => "00111101101111000011111011010011", 
    43 => "10111101101000110100000001110111", 
    44 => "00111101000000001010100100001000", 
    45 => "10111101010101010010110011010011", 
    46 => "00111100101010110110110100110110", 
    47 => "10111011000111001011010010101100", 
    48 => "00111101100111010100100000101010", 
    49 => "10111110010011000111110111100101", 
    50 => "00111101110110100000100000111010", 
    51 => "00111010111110110110011010111110", 
    52 => "00111100110010101100011100111001", 
    53 => "00111101000011111011001011000110", 
    54 => "10111101001101001110010011111111", 
    55 => "10111110000000001011010100100100", 
    56 => "00111101110111011111111010111001", 
    57 => "10111110000001001101010010001001", 
    58 => "10111101010011000000001000000001", 
    59 => "00111101111001110110101101111111", 
    60 => "00111110000000001100110101000010", 
    61 => "10111100011000000001111010111001", 
    62 => "00111100110011000001000100011011", 
    63 => "00111101000000001100000110101100", 
    64 => "10111101010100111001110100000000", 
    65 => "10111110010000010010100110001001", 
    66 => "00111110011011010101110001110100", 
    67 => "10111100111111100100010100010101", 
    68 => "00111100111110001011100001000011", 
    69 => "10111110001000100100011111001011", 
    70 => "00111101000001100000101000111011", 
    71 => "10111100010011111101101000110011", 
    72 => "10111101101111101001101010011000", 
    73 => "00111101010100011010110101110010", 
    74 => "10111101110101000011011010111001", 
    75 => "10111101110101111010101010101100", 
    76 => "00111101101111011101111011001011", 
    77 => "00111110000000011000010000111100", 
    78 => "00111101001110001110011010011100", 
    79 => "10111100101111000111110011110011", 
    80 => "00111110001110101110101110000001", 
    81 => "00111101100110111000101010010011", 
    82 => "00111101101011000101100010111001", 
    83 => "00111110000011100101011011001101", 
    84 => "00111101010101101111111111110111", 
    85 => "00111100001111011110000101110111", 
    86 => "00111100011000001001100011000111", 
    87 => "00111101100011011100111001000111", 
    88 => "10111100101011010110011101000001", 
    89 => "00111101100110101010110111011001", 
    90 => "00111011101010111111100100101101", 
    91 => "10111101000101001011011001010110", 
    92 => "10111100011011110000010010011011", 
    93 => "00111100110010100101101010010111", 
    94 => "10111101011000100011110001010000", 
    95 => "00111101111001110001000101010001", 
    96 => "00111100010100011100010101011010", 
    97 => "10111101011110011110100001110100", 
    98 => "10111101110000100010100010001100", 
    99 => "10111110010001100001010001011001", 
    100 => "00111100011101011111100010101011", 
    101 => "10111100101111100110000010001110", 
    102 => "00111100010000010000000011100111", 
    103 => "00111101000110100001011100000010", 
    104 => "10111101110011111100101011001001", 
    105 => "10111100001001001000011110011111", 
    106 => "00111101101100001101100011011000", 
    107 => "10111110000010111101011100101100", 
    108 => "10111110001111111001111111001011", 
    109 => "10111110000110011001111010010101", 
    110 => "10111101100110000100100111001011", 
    111 => "10111110000001101001000111101010", 
    112 => "10111100010100100101000111011100", 
    113 => "00111101111011011001011100101101", 
    114 => "10111101100111101101011110011111", 
    115 => "10111100000010000111010000001101", 
    116 => "00111101000000010001101110111111", 
    117 => "10111101000101100000010110101011", 
    118 => "00111101010011100000101111111101", 
    119 => "00111101101110011110011011100001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_10 is
    component inference_conv2d_f3_2_0_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_10_rom_U :  component inference_conv2d_f3_2_0_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


