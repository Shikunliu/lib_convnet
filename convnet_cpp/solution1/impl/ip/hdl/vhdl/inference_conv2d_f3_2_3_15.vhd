-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000001001000110111000001", 
    1 => "00111101111010111111001000101100", 
    2 => "00111101001100010011111100100010", 
    3 => "00111110000010110100110110001100", 
    4 => "00111110000000010110010100001010", 
    5 => "00111101101100011101011000010100", 
    6 => "00111101100110110001010110011011", 
    7 => "00111101000011100100110100110101", 
    8 => "10111101011011000100110110110110", 
    9 => "00111101101000010101111101010011", 
    10 => "10111110001100100100101001101011", 
    11 => "00111101100101010001101000001110", 
    12 => "10111101001110110101010010000101", 
    13 => "10111101101011011001001100100011", 
    14 => "00111110010111101011010001100011", 
    15 => "10111101001001001001101111011100", 
    16 => "10111101111011001011110000000110", 
    17 => "00111101111010101011110101011110", 
    18 => "00111110001001000111111001001010", 
    19 => "00111101011000001110101011111100", 
    20 => "10111100110000110111000111011010", 
    21 => "00111101001011100101000011111100", 
    22 => "10111110000101010110111100110011", 
    23 => "10111101101001000110110000011000", 
    24 => "00111101101100011100010111000101", 
    25 => "00111100110010100011000011011011", 
    26 => "10111110000110001011110000010111", 
    27 => "10111101111001101111001111110101", 
    28 => "10111101111100000000101000111001", 
    29 => "10111110000011101110011011111011", 
    30 => "00111100100101010111110000110011", 
    31 => "10111101010011011001010110110101", 
    32 => "00111100110100001001111011101001", 
    33 => "00111100101001101000111001110101", 
    34 => "10111010111100111100100100111011", 
    35 => "00111100000000111101110011111010", 
    36 => "00111101011100001001010011011000", 
    37 => "10111101110111000100001100101101", 
    38 => "10111101111010101010101001111110", 
    39 => "10111101111110100011110110110100", 
    40 => "10111101111011000111011101010111", 
    41 => "10111010011111101011101010001110", 
    42 => "10111101011101111000010101110011", 
    43 => "10111101100011100111011111110000", 
    44 => "10111101110110110000001001001111", 
    45 => "10111101111100011100110100011100", 
    46 => "00111110000111011001000111101111", 
    47 => "10111100010001100101011111010011", 
    48 => "00111110001000001101110010111010", 
    49 => "00111101011101101100010100111110", 
    50 => "00111101100110100100101010110100", 
    51 => "00111101101000011110010111000001", 
    52 => "00111110000010001001010110001110", 
    53 => "00111101011001100111111011110000", 
    54 => "00111101110000010010011011000001", 
    55 => "00111100000100011001000001001011", 
    56 => "00111101000101000011100100001000", 
    57 => "00111101101011100010111011001101", 
    58 => "00111101101100100001101111101001", 
    59 => "00111101101101001111101000101101", 
    60 => "00111101011000101101001110011111", 
    61 => "00111101011000100110001101101101", 
    62 => "10111101100110000111010110101101", 
    63 => "10111101100001101100101110111111", 
    64 => "10111101000010110001001100001001", 
    65 => "00111101111000001100000001101010", 
    66 => "10111101011011010100011000011111", 
    67 => "10111110000100111010110101011100", 
    68 => "00111110000111101100001011001110", 
    69 => "00111101000010011010100010001011", 
    70 => "00111001010110010111011111100111", 
    71 => "00111110001011000111001001011100", 
    72 => "10111101101000001110101100110010", 
    73 => "10111101100010111001011110101110", 
    74 => "10111110010001000010010010100010", 
    75 => "10111101110000111101101100000110", 
    76 => "00111110001110111111111001111110", 
    77 => "00111011110010011111010010101011", 
    78 => "10111101011000101100101100111100", 
    79 => "10111110001011110000010001010111", 
    80 => "10111101100101101111100110000100", 
    81 => "10111110001000001110110110000001", 
    82 => "10111100010101100000110011100111", 
    83 => "10111101101100111111000111000111", 
    84 => "00111101100111111000000000100000", 
    85 => "00111100101100111110110100000010", 
    86 => "10111101001011000111000001010001", 
    87 => "00111100110100000100001001101101", 
    88 => "10111100011111001000101000101010", 
    89 => "10111101100110011101100001000001", 
    90 => "10111101011011100111000010100110", 
    91 => "10111101111011000010110011100100", 
    92 => "00111101111001110100100011100100", 
    93 => "10111101001111111011110101101010", 
    94 => "00111100101001100011000101011000", 
    95 => "00111101110101101110000011010010", 
    96 => "10111101111001101100110010100011", 
    97 => "00111101110100011101101101000100", 
    98 => "10111101101110011000100011100000", 
    99 => "10111110011001010010000110011011", 
    100 => "10111110000000011010011001010000", 
    101 => "10111101110010010101010111000010", 
    102 => "00111101101100001111000001110000", 
    103 => "00111100101010001100101110011011", 
    104 => "10111100010111001110011101100010", 
    105 => "00111101100001111111111110000000", 
    106 => "00111101111010111110111110001101", 
    107 => "10111101001010110011010000101100", 
    108 => "10111100101100001011010011010100", 
    109 => "10111101001000011111111001110010", 
    110 => "10111101101000110110111001110010", 
    111 => "10111101000110010000110111101110", 
    112 => "10111101110010110000100000010100", 
    113 => "00111101000000111001010011000101", 
    114 => "10111101101010110101111110110000", 
    115 => "00111100110101110110110011001110", 
    116 => "10111101101011010100011110100100", 
    117 => "10111100010000001000001100010010", 
    118 => "00111101000110011001000111010111", 
    119 => "10111110000001101010000111101000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_15 is
    component inference_conv2d_f3_2_3_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_15_rom_U :  component inference_conv2d_f3_2_3_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


