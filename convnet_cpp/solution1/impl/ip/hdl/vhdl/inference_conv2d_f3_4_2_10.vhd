-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101110001001010010011100", 
    1 => "10111110000110001010011010011000", 
    2 => "00111101011111111100001101111111", 
    3 => "10111100010111100111001110111110", 
    4 => "10111100110000000000010010011101", 
    5 => "10111101100011111011101110111101", 
    6 => "00111100101101011101110000100101", 
    7 => "00111110000110111110000111101011", 
    8 => "10111101100010110000110111100110", 
    9 => "10111101111100010111000111100011", 
    10 => "00111101000100000110110001000100", 
    11 => "00111110001110101100100011100111", 
    12 => "00111101101010010100111100110100", 
    13 => "10111101101101001111110111011001", 
    14 => "10111100110011011010110001011011", 
    15 => "00111100100010001110011101100101", 
    16 => "00111101111110101011110110100001", 
    17 => "10111101011110000100111100110010", 
    18 => "10111101010101011100110111100010", 
    19 => "00111100010101100001101110010110", 
    20 => "10111101100000100101000100100001", 
    21 => "00111101100000000110101010111111", 
    22 => "00111100111000100011101101011110", 
    23 => "10111101110101011011101000101100", 
    24 => "10111001001111101101111000111011", 
    25 => "10111101101111010110000001111110", 
    26 => "00111101000100000100011101110110", 
    27 => "10111101111101110010110001010010", 
    28 => "10111100101100011101110110010011", 
    29 => "00111100111101100010100001000110", 
    30 => "00111101111001111001010111110110", 
    31 => "10111101011111101100101001000000", 
    32 => "10111011010100100011110100100100", 
    33 => "10111101111011111100111011111011", 
    34 => "00111101001111011010100100001110", 
    35 => "00111101010111010111100110101000", 
    36 => "10111101010001111001100101101100", 
    37 => "10111011101011001101111011110001", 
    38 => "00111110001010010110100010010100", 
    39 => "00111101101001001100100000101001", 
    40 => "10111101001000101000101101000101", 
    41 => "00111110001010101110111000100000", 
    42 => "10111101110110101111000001111100", 
    43 => "00111100000001100110101100001001", 
    44 => "10111100011001000000011010100101", 
    45 => "10111110000011101010110010000110", 
    46 => "00111101011011111111001010111100", 
    47 => "10111100111111000010111001001111", 
    48 => "10111010100001001110100000110010", 
    49 => "10111100100010100000010000110000", 
    50 => "10111110000010010000100111110010", 
    51 => "10111100110110011011111011101110", 
    52 => "10111101000100110001101100110000", 
    53 => "10111110000010110101010111101111", 
    54 => "10111100010001001111101011011100", 
    55 => "00111110000101010110100011101000", 
    56 => "00111101011100010001100010001100", 
    57 => "10111101101110010111111110011000", 
    58 => "00111101101111000010001110000010", 
    59 => "10111101100001000011000001100001", 
    60 => "00111101010100101111100010010110", 
    61 => "00111101011100101000110110111100", 
    62 => "00111101010111001000001010111000", 
    63 => "10111011111110101001100100100011", 
    64 => "10111100010000000000010110101010", 
    65 => "00111110001110000001001001111011", 
    66 => "00111100101110110110100001010110", 
    67 => "00111101110110010111001011001101", 
    68 => "10111110001000111111111000011001", 
    69 => "10111001011001110110010010111010", 
    70 => "10111110010000110100011111101001", 
    71 => "10111110000100100000011001000010", 
    72 => "10111110000010010110110010000011", 
    73 => "10111101010110000100111100110010", 
    74 => "00111101101101000010110010110101", 
    75 => "10111101111111010000111110100110", 
    76 => "10111101001001000111001000000101", 
    77 => "10111101100110011110011110111000", 
    78 => "10111101111110001000010101001101", 
    79 => "10111101110011000011111000110010", 
    80 => "10111101110000000100101111111000", 
    81 => "10111101010001101001101101011010", 
    82 => "00111101000011000001101111101000", 
    83 => "00111101101100101011011001000011", 
    84 => "00111101110101101100101101010011", 
    85 => "10111101000100110000011010001000", 
    86 => "00111100100111010110101011011111", 
    87 => "10111101100111110000000100001010", 
    88 => "10111101100111100001111000000110", 
    89 => "10111100000101001011101100111000", 
    90 => "10111101010010101100011001111101", 
    91 => "00111100101110001101100110011011", 
    92 => "00111100100111111100011101000110", 
    93 => "00111100110001100111100101100001", 
    94 => "00111100101110111001111001110001", 
    95 => "00111101101101010010101010000100", 
    96 => "00111101101000111011110010000011", 
    97 => "00111110001011101010011111001110", 
    98 => "10111100110100111001111000001101", 
    99 => "00111110010111100001110010011011", 
    100 => "10111101001101001111000111100101", 
    101 => "00111110000001101111100010101101", 
    102 => "00111101000100110110110101001011", 
    103 => "00111101110011000110000100001111", 
    104 => "00111110001101000101010101100101", 
    105 => "10111101111110000110100001110111", 
    106 => "10111101001010111010000111011010", 
    107 => "10111101000010100000010011101100", 
    108 => "00111100110010101101011110010101", 
    109 => "10111100100000111110010101101000", 
    110 => "00111110001100011011110101100010", 
    111 => "00111101010001001011011001100011", 
    112 => "10111101000101100010110100011000", 
    113 => "00111101110110111100110100110110", 
    114 => "10111100111010010001000010011011", 
    115 => "00111110000101010111111010101010", 
    116 => "00111101101011001111011011001100", 
    117 => "10111101111100001001111110100101", 
    118 => "00111101010010000010100001110011", 
    119 => "10111101010101010000011101100100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_10 is
    component inference_conv2d_f3_4_2_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_10_rom_U :  component inference_conv2d_f3_4_2_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


