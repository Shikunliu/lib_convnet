-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101101000011100101011", 
    1 => "10111101110101011010001100011010", 
    2 => "00111011100001111011110111111010", 
    3 => "00111101101001111010111001011000", 
    4 => "00111100010101011110110111011110", 
    5 => "00111101110100101101100100000110", 
    6 => "00111101000110100110010000010100", 
    7 => "10111110000010110101101101110000", 
    8 => "10111101101110000100001000010110", 
    9 => "10111101001010111011101010110100", 
    10 => "00111101100011000110010110010001", 
    11 => "00111100000110100001001000111010", 
    12 => "10111101111011101010101101111010", 
    13 => "10111110000111110010010101011111", 
    14 => "00111110000011000000100111000100", 
    15 => "10111101010100100010110001010010", 
    16 => "10111100111000011011110101010101", 
    17 => "00111101101100000100100011010011", 
    18 => "10111101101101100110011010001111", 
    19 => "00111100110001111010010111100111", 
    20 => "00111110001101100111110110111011", 
    21 => "00111101010110111110010000010010", 
    22 => "00111101100101011111010101000010", 
    23 => "10111101010100110110001100011111", 
    24 => "10111010100110100001011111101111", 
    25 => "00111110000011100010001001100000", 
    26 => "00111101101000110100101010100011", 
    27 => "10111101001011011101000000111000", 
    28 => "10111110001101110011001010011100", 
    29 => "00111100100100000010000000111110", 
    30 => "00111101000110111111111111110110", 
    31 => "00111101110100011001011000010000", 
    32 => "00111010101000111011110011011110", 
    33 => "10111101101101101111000100000110", 
    34 => "10111101010101100010100111011000", 
    35 => "10111100101100111101011000100110", 
    36 => "00111110000010110001101110111101", 
    37 => "10111100110100111110101000101101", 
    38 => "00111101001010010101111001001110", 
    39 => "00111101100011110011110100011111", 
    40 => "00111101110111000000110010100110", 
    41 => "10111101111011011001010000001000", 
    42 => "10111101100001110011111010010000", 
    43 => "00111101010000101110010110101000", 
    44 => "10111101111100011001100100110101", 
    45 => "00111101000011100011100010001101", 
    46 => "00111101110111011101111010111110", 
    47 => "10111101110001011100000100001010", 
    48 => "00111101110111101010100010010111", 
    49 => "10111101010001111000001001000000", 
    50 => "10111101011000001001100011111101", 
    51 => "10111101011000101000000111010101", 
    52 => "00111101001101110000011101001110", 
    53 => "00111011111101011100000100111000", 
    54 => "10111101101011000010100011000000", 
    55 => "10111110000011001100001101011101", 
    56 => "10111100110101010101101101111100", 
    57 => "10111101011111110111110101011001", 
    58 => "10111100110001011000101110010000", 
    59 => "00111100101011101010111100001010", 
    60 => "00111100101111000000100010001111", 
    61 => "10111100110111111011011011101010", 
    62 => "10111101001111100110101100001010", 
    63 => "10111100100111001101001110101011", 
    64 => "00111000100000110000000011101110", 
    65 => "10111101111011101000001100011011", 
    66 => "00111101010010101011100010100110", 
    67 => "10111100000000101010110000000010", 
    68 => "10111011000001000101000010110010", 
    69 => "00111101001101111011010101000011", 
    70 => "00111100101110011100000111000011", 
    71 => "10111101010110111101101010100010", 
    72 => "10111101101001111111110110101011", 
    73 => "10111100111111010010100111000010", 
    74 => "00111101101001010000111000011010", 
    75 => "00111110001110111101010011010000", 
    76 => "10111011101000110101001000010101", 
    77 => "10111101111101001001100111010000", 
    78 => "10111110011010110000011110001110", 
    79 => "00111101100111011100111111110101", 
    80 => "10111101110001011110010001100000", 
    81 => "10111100011110011011001110110110", 
    82 => "00111011100100110001000101101010", 
    83 => "10111100111110110011000100101110", 
    84 => "10111100011110010111101111101101", 
    85 => "10111110000000111110100100100001", 
    86 => "10111101011101010001000100111111", 
    87 => "00111101011101101010111101010100", 
    88 => "10111011100010110100100001011110", 
    89 => "00111100010110011101001101000110", 
    90 => "00111100100100101010110001110101", 
    91 => "10111100110000000011110000110000", 
    92 => "00111110001000110000110001100111", 
    93 => "10111110000000101111100000111000", 
    94 => "10111101001110000101001101100011", 
    95 => "00111101011100111011111001110011", 
    96 => "00111101101110000110101111111010", 
    97 => "10111101010010010110011011100111", 
    98 => "00111110001011010111010010010010", 
    99 => "00111101011111011100110000101110", 
    100 => "10111101010010100010000000010100", 
    101 => "00111100100010001100101001110100", 
    102 => "10111100111111110100101110100101", 
    103 => "00111100111011100000010110010111", 
    104 => "10111100100000101010110100100100", 
    105 => "00111101101011111111110011110110", 
    106 => "00111101110010111111000000101110", 
    107 => "10111100101100000100010111100011", 
    108 => "10111011100011101001011000110000", 
    109 => "00111101101001100010111000010111", 
    110 => "00111110000000101000101110110001", 
    111 => "00111110000101010111010001110001", 
    112 => "10111101101011111110010101010000", 
    113 => "00111100011011010110111000101101", 
    114 => "10111110001111010001011011111101", 
    115 => "00111101000010111111010100110110", 
    116 => "10111100100010010001000111000010", 
    117 => "10111110000010010010011101001110", 
    118 => "10111101111000111110110100001111", 
    119 => "10111101000101001100000111111001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_4 is
    component inference_conv2d_f3_2_1_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_4_rom_U :  component inference_conv2d_f3_2_1_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


