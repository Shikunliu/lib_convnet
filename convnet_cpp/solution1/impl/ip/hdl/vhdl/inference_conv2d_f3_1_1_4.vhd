-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000100010010111101001101", 
    1 => "00111101100010111001010100001111", 
    2 => "10111110001111101011001011010001", 
    3 => "10111110000010101110110110011010", 
    4 => "00111101100001101001101010010001", 
    5 => "00111010001101111010101010101111", 
    6 => "00111110000011011110100001110001", 
    7 => "00111100011010100000101110100010", 
    8 => "10111101100000011010011011010111", 
    9 => "00111101001101111110101101111001", 
    10 => "10111101000000100101000000111100", 
    11 => "10111110010001010100000000000011", 
    12 => "10111101010110100101010001110101", 
    13 => "10111110001010010000100111110010", 
    14 => "00111100010111110100111001000100", 
    15 => "00111101101111111010000010100010", 
    16 => "10111101000101111000111100011000", 
    17 => "10111101100000011111001110011000", 
    18 => "10111101100101111001000100111111", 
    19 => "00111101101111000111011011101100", 
    20 => "00111101101100101111101001101011", 
    21 => "10111101001111000011010001001001", 
    22 => "00111101010010111001101111000101", 
    23 => "10111110000010000010100111010000", 
    24 => "10111100001010010001111011011101", 
    25 => "00111101011110111111110111011101", 
    26 => "00111101010011111010100001111111", 
    27 => "00111100001110011010000101110111", 
    28 => "10111101100101101001001000101110", 
    29 => "10111110001010111110111000111101", 
    30 => "10111101001010100010000000101111", 
    31 => "00111110000110011100101001011100", 
    32 => "00111110000011100001011110100000", 
    33 => "00111101111101111001101101111000", 
    34 => "00111110000011101011000111000100", 
    35 => "10111101010000100111101000010011", 
    36 => "00111101011100011110100000001111", 
    37 => "00111110001101010101111001101100", 
    38 => "00111101011000011110010000111011", 
    39 => "00111010111100011101000010010010", 
    40 => "10111101011010000101110000001010", 
    41 => "00111101100111000110010101101001", 
    42 => "10111101100010101111001110000110", 
    43 => "10111101111101000000000000110010", 
    44 => "00111100111110011100000000010101", 
    45 => "00111101100101100001111111111101", 
    46 => "10111101010010001001000010101101", 
    47 => "00111101100000011101100111001101", 
    48 => "10111101111011100110010110111111", 
    49 => "10111100100110101101110011000101", 
    50 => "10111101001111011000111001101011", 
    51 => "10111100111101110010000111010101", 
    52 => "10111100111010100101001011110000", 
    53 => "10111101100001111100010011001000", 
    54 => "10111101101101001001001010010100", 
    55 => "10111101101000001001110111101010", 
    56 => "10111100101000000101101000010011", 
    57 => "10111011000100010101110010110100", 
    58 => "10111101100010100001110100110010", 
    59 => "10111110000110001110100100101101", 
    60 => "10111100110001100001001111100001", 
    61 => "10111000110100100010001110001010", 
    62 => "00111100010110010001101100100100", 
    63 => "10111101011010111001111001001001", 
    64 => "10111110001001001100111010000001", 
    65 => "00111101111010101011010001110100", 
    66 => "10111011110110101111001010010101", 
    67 => "10111101000111001000110011100100", 
    68 => "00111101101111011111101001010001", 
    69 => "00111110010110011001000010110000", 
    70 => "00111010110111100110111010001011", 
    71 => "00111100011000100101010101100000", 
    72 => "00111101110001010000000111010101", 
    73 => "00111100111110001111000001000001", 
    74 => "10111101100010000111010001011110", 
    75 => "00111110000011000101000010001011", 
    76 => "10111110001000000111010011101011", 
    77 => "00111101010011101000010011100011", 
    78 => "00111101011000001001100001011100", 
    79 => "00111101111011010010110101000101", 
    80 => "10111101100011000100101110101011", 
    81 => "10111100101111101110001110100000", 
    82 => "10111101010101101110000111011111", 
    83 => "10111100101001101100100110011000", 
    84 => "00111101100000101110010100110000", 
    85 => "00111101101010011000101101010111", 
    86 => "00111100111011111011000110011110", 
    87 => "10111101110110111011100000111101", 
    88 => "10111110000000001100111111100001", 
    89 => "10111110000110010101011000111011", 
    90 => "10111110000001011101101110111010", 
    91 => "00111101010110111101100000111000", 
    92 => "00111101110111111111110111100111", 
    93 => "00111101000010101011010010101010", 
    94 => "00111011011111101110001100011111", 
    95 => "00111011011011111111010000011001", 
    96 => "00111101001000011001100100101000", 
    97 => "00111101100101101011000001000110", 
    98 => "00111110011011101001011010000001", 
    99 => "00111101000000001000100110101110", 
    100 => "00111101110111101101111100011110", 
    101 => "10111110000001000011101001100100", 
    102 => "00111101100101001110001000011101", 
    103 => "00111101110100001100011001110001", 
    104 => "10111110001110011111100101001000", 
    105 => "10111101101111100000001000111100", 
    106 => "00111101010101001011100010100100", 
    107 => "10111100111010111001010100001111", 
    108 => "10111101011110101110000000000110", 
    109 => "10111101101010011101000111110110", 
    110 => "00111101111100001011111010010100", 
    111 => "10111101001011001000110000110101", 
    112 => "00111101000000001000100101011101", 
    113 => "00111101101110101000010000000010", 
    114 => "00111101000100011000001001110100", 
    115 => "10111101100111110011110100101101", 
    116 => "10111101010000110100101000011101", 
    117 => "10111101001001010010000110001101", 
    118 => "10111110000011011111101100001101", 
    119 => "00111101000011100010100010011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_4 is
    component inference_conv2d_f3_1_1_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_4_rom_U :  component inference_conv2d_f3_1_1_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


