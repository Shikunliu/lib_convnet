-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_80_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_80_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001001011001010100110110", 
    1 => "00111110001000000111001101011000", 
    2 => "00111101111011111110100110111000", 
    3 => "00111101101101000101011001010110", 
    4 => "00111101010011110001101100001011", 
    5 => "00111101101110110101010110000100", 
    6 => "10111110001100001000110110001111", 
    7 => "10111101000100101100011001110110", 
    8 => "10111101100000101101000011001011", 
    9 => "00111101001001100010110000110100", 
    10 => "00111110001110010000101001111000", 
    11 => "00111100100100111100100000110100", 
    12 => "00111101111011001100110101010011", 
    13 => "00111101101010110001011010011010", 
    14 => "10111100101011001011011101001110", 
    15 => "10111101100110101110011001010000", 
    16 => "00111101100010110011010110110001", 
    17 => "00111101101011000011100100011100", 
    18 => "10111110000110101001101111010000", 
    19 => "00111101100011000001000100011011", 
    20 => "00111011000000001111101110111110", 
    21 => "00111101001000000101011111111010", 
    22 => "00111101100010101010010101001101", 
    23 => "00111110001111110011111000000011", 
    24 => "00111101100011110110100010100011", 
    25 => "10111110010111101000110001001000", 
    26 => "00111101011001011011011000001000", 
    27 => "00111101111110011101001010111111", 
    28 => "00111110000001110010110011011000", 
    29 => "10111101110100110110011000001110", 
    30 => "10111101111101110001011111011111", 
    31 => "00111100111101010000000100110100", 
    32 => "00111101011000011001001110011001", 
    33 => "10111100100101010100001101011110", 
    34 => "00111101000100101110111010111010", 
    35 => "10111100010011111101111011010000", 
    36 => "00111100111000000111011011001110", 
    37 => "00111101101000011000001010101010", 
    38 => "10111101001101101110101000001100", 
    39 => "10111110001111101011101000101000", 
    40 => "10111101110000101011101111000100", 
    41 => "10111110000110100001010010001100", 
    42 => "00111110001110010110001010001101", 
    43 => "00111101100010100111111000001000", 
    44 => "10111011100111110100001011111100", 
    45 => "10111101011011101110010001101010", 
    46 => "00111110010100101000010000010110", 
    47 => "10111110000100000001101110000110", 
    48 => "00111101111010111010110101111101", 
    49 => "10111100111101101010100011010100", 
    50 => "10111100110100000101000001000101", 
    51 => "00111101010111000111100010001100", 
    52 => "00111101101111001101101010110010", 
    53 => "10111101011101110100001110011001", 
    54 => "10111101100010010000111110000001", 
    55 => "10111110000110010010110110011001", 
    56 => "00111101000101110000100110000010", 
    57 => "10111101100100101010110010010000", 
    58 => "10111110001100000111111010011110", 
    59 => "10111101000101000110001001110011", 
    60 => "10111110010000111101010001101011", 
    61 => "10111100000010011010110000010001", 
    62 => "00111101100100110101100010010101", 
    63 => "10111100110010100010100100011001", 
    64 => "00111101101011011110111100001100", 
    65 => "00111110000111011011000010011010", 
    66 => "00111101100101011101100010111101", 
    67 => "00111101100010111111110010110110", 
    68 => "10111101111100000000101111001100", 
    69 => "00111110010001100000000010110000", 
    70 => "10111101010011011110111101011100", 
    71 => "00111101100111100101101001101100", 
    72 => "10111101111000100110110000111100", 
    73 => "10111101100110101011111001101010", 
    74 => "00111100011001001010100000100000", 
    75 => "10111101010011110000011001100011", 
    76 => "00111101111011010010100100010011", 
    77 => "00111101001001100010000001011011", 
    78 => "00111101100001001011100100010000", 
    79 => "10111101010100010100000001111111", 
    80 => "10111101111001011001011011001000", 
    81 => "00111100111001110101111010110100", 
    82 => "10111101010111100001110100111100", 
    83 => "10111101101111000000101000000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_80 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_80 is
    component inference_mult_1_120_120_84_s_W4_80_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_80_rom_U :  component inference_mult_1_120_120_84_s_W4_80_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


