-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011010011100011000011101", 
    1 => "00111100111100010101000000000100", 
    2 => "10111101110000100010111111111110", 
    3 => "00111101100111010001110000010011", 
    4 => "00111101010110001001101110111101", 
    5 => "10111101101001001001100010001110", 
    6 => "10111101110010101110000011000001", 
    7 => "10111101110110101100110101011011", 
    8 => "00111101001001001000111010100101", 
    9 => "00111101111100111000010110000011", 
    10 => "00111101100111001001000100110000", 
    11 => "10111101100100111111110101101011", 
    12 => "10111100101000010111100010001011", 
    13 => "10111110000111011111101010000111", 
    14 => "00111101000111001001101101000001", 
    15 => "10111101101111001101001101000000", 
    16 => "00111101111101111010111001011000", 
    17 => "00111101110001010011101000110001", 
    18 => "10111101111011101001011100000111", 
    19 => "10111101111101001001001110000110", 
    20 => "10111101100111101101101000010110", 
    21 => "10111101111100000100101100111100", 
    22 => "00111101100100011110101011001001", 
    23 => "00111110001110010000111100110000", 
    24 => "10111101100110111010101111011101", 
    25 => "00111110001000011010011000001101", 
    26 => "10111110000111100010111101111011", 
    27 => "10111101011110001011110110000001", 
    28 => "00111101010101010010100001010001", 
    29 => "10111110000010000111110010100110", 
    30 => "10111101000110010010001010110001", 
    31 => "10111101100100110100011001111110", 
    32 => "00111101011011111011010101001010", 
    33 => "10111101100010100100111111001010", 
    34 => "10111010111111100110110111011010", 
    35 => "00111101111000001111110010110101", 
    36 => "00111101101010001100010000110111", 
    37 => "00111101100010001110111101101011", 
    38 => "00111101111100111101010010101110", 
    39 => "10111110001000010001010100010110", 
    40 => "10111101000100111001110101010001", 
    41 => "10111101100010100111101000110100", 
    42 => "10111101101100111010101110000110", 
    43 => "00111101101111100010110111011011", 
    44 => "00111100000101010000100111101000", 
    45 => "10111101001001000000101011010111", 
    46 => "00111101101110110010000000001010", 
    47 => "00111110001011000001001001101010", 
    48 => "00111110001000111001101110001001", 
    49 => "00111110000110000101110010101011", 
    50 => "10111100110010011111010001000000", 
    51 => "10111101111100011011010110000101", 
    52 => "10111110001010011011110111000111", 
    53 => "10111101100011110011000001111101", 
    54 => "10111110000011111101001100101100", 
    55 => "00111101000101010000100101111101", 
    56 => "00111101101000110101111010000010", 
    57 => "00111100100100111000000100011100", 
    58 => "00111101101011101000111000111000", 
    59 => "10111101010100111001110001111010", 
    60 => "10111101110101110100011010001000", 
    61 => "00111101000000010100111111000001", 
    62 => "10111110100000001111101101100101", 
    63 => "00111101101011010111110010110011", 
    64 => "10111100111111111100010010100111", 
    65 => "00111101010010000001111100011110", 
    66 => "10111110000111111001011011100001", 
    67 => "10111100101001000001001101110000", 
    68 => "00111110001000001111110001110010", 
    69 => "10111101110010101110000000100000", 
    70 => "00111100110011100011011111010001", 
    71 => "00111011110001101100001011110011", 
    72 => "10111011101001001111010111011001", 
    73 => "00111110000101011010010110111001", 
    74 => "00111101101100000001001100110000", 
    75 => "10111110001101000001001000000110", 
    76 => "10111100110100100010111000110110", 
    77 => "00111110001110111010110100111010", 
    78 => "00111100110110110000110001100000", 
    79 => "10111101111111101100110011000100", 
    80 => "00111101010001111011000100111010", 
    81 => "00111101110000100111010111101111", 
    82 => "00111110010011001011100001011010", 
    83 => "10111101110000100010110010111110", 
    84 => "10111110010001000100011100111101", 
    85 => "00111101000000011011000010100100", 
    86 => "00111100010100000100001010100011", 
    87 => "10111101101011010100110001001111", 
    88 => "00111100101011000100010110100011", 
    89 => "00111100000000011110000011010110", 
    90 => "00111101001000000010111000111110", 
    91 => "00111101011111010110110011011101", 
    92 => "00111101101101110100001000100001", 
    93 => "00111101010100100011101100000001", 
    94 => "00111110000011010111000000011110", 
    95 => "10111101110001101000101011111111", 
    96 => "00111101001110010111100011001000", 
    97 => "00111100010000100110101110110101", 
    98 => "00111110001101110001010110000011", 
    99 => "10111101001010001110001010101101", 
    100 => "00111101101010110010011110100100", 
    101 => "00111110001100101100010010010011", 
    102 => "10111110000110001011110010011101", 
    103 => "10111101000000000101001110010010", 
    104 => "00111110000101001011110110111010", 
    105 => "10111101100011010111011100110010", 
    106 => "00111110000000100110110110001011", 
    107 => "10111011100001101001010001000100", 
    108 => "00111100011101101000001100010100", 
    109 => "00111100110001011000100000110101", 
    110 => "10111101101001010101111000011011", 
    111 => "10111100001000111111101010110001", 
    112 => "00111001100111110000111001001110", 
    113 => "00111101000100010100110110000000", 
    114 => "00111100110011101001010110001111", 
    115 => "10111101101000001010001010110000", 
    116 => "00111110000100111101110110011000", 
    117 => "10111101110101000100111011010111", 
    118 => "10111101111011011100111011000000", 
    119 => "00111101101001001000000010110011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_4 is
    component inference_conv2d_f3_4_2_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_4_rom_U :  component inference_conv2d_f3_4_2_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


