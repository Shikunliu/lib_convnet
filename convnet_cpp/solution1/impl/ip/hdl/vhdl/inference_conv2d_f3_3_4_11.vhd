-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110011101111111101011100", 
    1 => "00111110010000010100000010011010", 
    2 => "00111110001000101001101010100010", 
    3 => "10111100111011101110010011110000", 
    4 => "10111101110100110000110011101101", 
    5 => "10111101101100010010000100100101", 
    6 => "10111110001000101010101101101001", 
    7 => "10111011110100110100111001110001", 
    8 => "10111100100101100100011010010011", 
    9 => "00111101100001101010101011111010", 
    10 => "00111100001001110000000011110110", 
    11 => "00111101010101111011011101011100", 
    12 => "10111101111110010110101011110000", 
    13 => "10111101101101101011101111000001", 
    14 => "10111101010011100111111100000100", 
    15 => "10111101111101100000000101111001", 
    16 => "10111101111100111111011111001111", 
    17 => "10111101110101001101110011101100", 
    18 => "00111101000000101000001111101110", 
    19 => "00111101111000011111101011111101", 
    20 => "10111101010000010011001011101011", 
    21 => "00111100000010101100111001011010", 
    22 => "00111101111111111110110110100110", 
    23 => "00111110000111011001001110000001", 
    24 => "00111100101010010010100011101110", 
    25 => "00111101100011101011111100111110", 
    26 => "00111101010010000011100100000100", 
    27 => "10111110000100011011111101111011", 
    28 => "00111101101101001010000011111111", 
    29 => "10111101100111010011100010100101", 
    30 => "00111110000011110111010001000111", 
    31 => "00111101001111101000100100100010", 
    32 => "10111101011101101010010011011000", 
    33 => "00111101100010111010001110111101", 
    34 => "00111101100100111100000100101101", 
    35 => "10111101110111010011011011111000", 
    36 => "10111100011111010101101101110101", 
    37 => "10111101000111000110101101010110", 
    38 => "10111101101110011100001110001011", 
    39 => "00111100011011111111100110001101", 
    40 => "00111100100010000110000011000010", 
    41 => "10111101101100111011101110010001", 
    42 => "00111110001101100110101001010101", 
    43 => "10111101001100011000000010010001", 
    44 => "00111101001000001011000000101001", 
    45 => "10111100101000011000100001111011", 
    46 => "00111101001011100101110101110110", 
    47 => "10111100010111000101010101101011", 
    48 => "00111101110101111101110100000001", 
    49 => "00111101010101011000011001111010", 
    50 => "10111101110111000010000100011000", 
    51 => "10111101101100110101000101001011", 
    52 => "00111101001000011011011011101111", 
    53 => "10111110000101001100010100010001", 
    54 => "10111101010001011110100111010100", 
    55 => "00111110001001111011010110101111", 
    56 => "10111101110100001101101001011110", 
    57 => "10111101101100000010110111100000", 
    58 => "00111011011100001011011001100001", 
    59 => "00111101101011010000000100000101", 
    60 => "10111010111000000001110101100010", 
    61 => "00111101101111011001000100110011", 
    62 => "10111101001001101110011101000101", 
    63 => "00111101111000111001011110011010", 
    64 => "10111100110111010010011001001100", 
    65 => "10111100110011110110111100001001", 
    66 => "10111101110001110001011011000101", 
    67 => "10111100100101001011101101000011", 
    68 => "10111100100001001111111101000011", 
    69 => "00111100100101100011110100100011", 
    70 => "00111110000100011110001010011011", 
    71 => "10111101111000011110000111010010", 
    72 => "10111101100101001000100111101101", 
    73 => "00111110000000111011101001110111", 
    74 => "00111101001010101001000100111001", 
    75 => "00111101101011011101101011110111", 
    76 => "00111100100100010101001110110000", 
    77 => "10111101011001010000010100111101", 
    78 => "00111110000111010110000011101001", 
    79 => "10111010101010101010111101000001", 
    80 => "00111101101011110010100101000000", 
    81 => "00111101110110111001010000010000", 
    82 => "10111101011111111011010111111000", 
    83 => "10111100111100011101110001010001", 
    84 => "10111101100100111100111010001100", 
    85 => "10111110000001010001100011110100", 
    86 => "10111101011100010100011110000110", 
    87 => "00111101101100111100101011101110", 
    88 => "10111101101101101010001000010000", 
    89 => "00111110000100101010100110010011", 
    90 => "10111110000000111110001111100011", 
    91 => "00111101100011011101110101010011", 
    92 => "00111101100001101011111000010000", 
    93 => "00111101100011100001010100001111", 
    94 => "10111100111010100110001000111111", 
    95 => "00111110011000101001010000010100", 
    96 => "00111101010011001100100010000000", 
    97 => "10111110001011100100010000110001", 
    98 => "10111101101100000110010011101101", 
    99 => "10111110001100010000001111001001", 
    100 => "10111101111001101010001100111000", 
    101 => "00111101001101111001101111001000", 
    102 => "10111101111101111111011110111110", 
    103 => "10111101000110000001101000111110", 
    104 => "00111101001001100010111011010011", 
    105 => "00111110000001010110100110110001", 
    106 => "10111101000010000001110101110000", 
    107 => "00111101100111100100100101101111", 
    108 => "00111101100111101101111101000110", 
    109 => "00111100001001110011000100110010", 
    110 => "10111100110111111100100111001010", 
    111 => "10111101011011001011101111010000", 
    112 => "10111100011101111010100001000011", 
    113 => "10111100111101110101111010100110", 
    114 => "10111101001101111110100011110101", 
    115 => "10111110001000111111101010110001", 
    116 => "10111101000111111010100101100011", 
    117 => "00111110001001010001101010000111", 
    118 => "10111010011111010001111110100110", 
    119 => "10111100001000111111100010011000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_11 is
    component inference_conv2d_f3_3_4_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_11_rom_U :  component inference_conv2d_f3_3_4_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


