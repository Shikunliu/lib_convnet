-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100000000100110010001100", 
    1 => "10111100100101100110001000001100", 
    2 => "10111110010100100110010111110001", 
    3 => "00111101110000100000111100000100", 
    4 => "10111101100100011001000011111010", 
    5 => "10111101011100100100101111111101", 
    6 => "10111101001001011001111100101100", 
    7 => "00111101111001100111110001101100", 
    8 => "10111100100100011001101001011100", 
    9 => "00111101110001101100111110000101", 
    10 => "10111101101000001111011000100111", 
    11 => "10111101010111001101100110001010", 
    12 => "10111101010011011000100001111111", 
    13 => "00111101000011111011001000001010", 
    14 => "10111110000000110011000101011101", 
    15 => "10111101111101010001011000010010", 
    16 => "00111101000111101111011111011101", 
    17 => "00111100100000110100100111001100", 
    18 => "00111100110100100100110011010100", 
    19 => "00111101000100100001111101010010", 
    20 => "10111100110001101010100101100111", 
    21 => "00111110011011010101001110001011", 
    22 => "00111101111100100101111011011101", 
    23 => "00111101110100010010010101010111", 
    24 => "10111100110100001111010011100101", 
    25 => "10111100100100101100001011100110", 
    26 => "00111101011011100100110000001110", 
    27 => "00111100000110000011010001101010", 
    28 => "00111110000000111111101100110111", 
    29 => "10111100111011001010000110110100", 
    30 => "10111101110010101101000100101111", 
    31 => "10111101111010010110101110111010", 
    32 => "10111101111001111010100101011101", 
    33 => "10111101111110111111100101000000", 
    34 => "00111101000101011100101000000001", 
    35 => "10111101011001010000101001000110", 
    36 => "00111101000111011000000101101011", 
    37 => "10111110001100001010011000110011", 
    38 => "00111110001010001110011000001000", 
    39 => "10111100101111001000010000010101", 
    40 => "10111110000111000001011001011001", 
    41 => "00111100011000010001101001100010", 
    42 => "10111100111000100101111010011010", 
    43 => "00111100001101111000101110001000", 
    44 => "10111101000011101111000000001101", 
    45 => "10111101000001001101010111110011", 
    46 => "00111101111000101000000100110100", 
    47 => "10111101001000010101010001011110", 
    48 => "00111110000110011110010001010000", 
    49 => "10111101001101010111100010001000", 
    50 => "10111100110011101010010011011110", 
    51 => "00111110001110000111110100101100", 
    52 => "00111101000110110011111111011101", 
    53 => "00111101111000110011100010110100", 
    54 => "00111101100010010011111100000001", 
    55 => "10111101111000111011010011110110", 
    56 => "10111101101011100001011000000000", 
    57 => "10111101000110000100000001001110", 
    58 => "00111101100101111000011111000001", 
    59 => "00111101100001000011001001101100", 
    60 => "10111101000010001111010010000000", 
    61 => "10111101001011110111111001110011", 
    62 => "00111101011000010001100101110000", 
    63 => "00111101110011110011111111011001", 
    64 => "00111101001000000001001000100100", 
    65 => "00111110000011101000111111110011", 
    66 => "10111101100010111011110001111100", 
    67 => "00111101100111010011001110111000", 
    68 => "10111110001000010010011111110110", 
    69 => "10111100000010111010110111001001", 
    70 => "10111101001101100011101011110000", 
    71 => "00111101100100000001101100110110", 
    72 => "10111100011101110100010101000110", 
    73 => "10111101000001101111011111110001", 
    74 => "10111101101111011010011001100001", 
    75 => "10111101110001101010010100001101", 
    76 => "00111101101010111101101101000011", 
    77 => "10111100101100000100001000011101", 
    78 => "00111011000101110111110000001000", 
    79 => "10111101011100001010101011111000", 
    80 => "10111110000011000010011010011010", 
    81 => "10111101100101100001101111011001", 
    82 => "00111101011011100111100110010000", 
    83 => "00111101011110110000111101010000", 
    84 => "10111101101100010001110100110110", 
    85 => "10111101111111111011100010110010", 
    86 => "00111011101100010100001101000100", 
    87 => "00111101010101101001101100010111", 
    88 => "00111100101001100011000001001011", 
    89 => "10111101111100000000110011011000", 
    90 => "10111101101100000010100110100001", 
    91 => "00111110000000011000000011010100", 
    92 => "00111101001110000111110111000000", 
    93 => "00111101011010110100001011011010", 
    94 => "10111101000111100011010101011010", 
    95 => "00111110000111011001010010001110", 
    96 => "00111101010000111001101101100000", 
    97 => "00111110000100111101100000010111", 
    98 => "00111101001100011111100111001000", 
    99 => "00111101011011100000101111111101", 
    100 => "00111100101100010110100111010000", 
    101 => "00111100111110101011100100000100", 
    102 => "10111101010000111001010110110111", 
    103 => "00111101110010000010000100000001", 
    104 => "10111011111101000010110101100100", 
    105 => "00111100110001111001101101101010", 
    106 => "00111101011101100001101100101010", 
    107 => "10111110001101010101000111010111", 
    108 => "10111100110001101111011011001010", 
    109 => "10111101111010000000100101001110", 
    110 => "00111101001000101011010000101010", 
    111 => "00111011010000101101000101110110", 
    112 => "10111101100101000011110011011011", 
    113 => "10111100101111000111101101111100", 
    114 => "10111101110100101011001000111010", 
    115 => "00111100100011010011000100001011", 
    116 => "00111101010111101000010101011100", 
    117 => "00111101010101110111010101001101", 
    118 => "00111110010010000000010000010000", 
    119 => "00111110000010101011010111000100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_1 is
    component inference_conv2d_f3_3_2_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_1_rom_U :  component inference_conv2d_f3_3_2_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


