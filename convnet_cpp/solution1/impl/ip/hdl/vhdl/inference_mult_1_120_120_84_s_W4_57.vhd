-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_57_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_57_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111011100001100100110011", 
    1 => "00111100100011000111111100110101", 
    2 => "00111101110000110111101100101111", 
    3 => "00111110000000101001010010011010", 
    4 => "00111101110100100001101000101110", 
    5 => "10111110001000111000111011110011", 
    6 => "10111101110110111110010101010100", 
    7 => "00111101100000010000101101111110", 
    8 => "00111100100111101011100011110011", 
    9 => "10111110001101011001110010001101", 
    10 => "10111101101010101111011011000111", 
    11 => "00111101111101001100010001001000", 
    12 => "00111101110010111010011101001110", 
    13 => "00111101111100001010001011001011", 
    14 => "00111100101000001101100110010100", 
    15 => "10111110000010011100011011110011", 
    16 => "00111101001101111011010101111001", 
    17 => "00111101111000110010110010100101", 
    18 => "00111110000011011010101000001101", 
    19 => "10111101110010110011101101001101", 
    20 => "10111100100100101000111001111000", 
    21 => "10111110000110110001000101000001", 
    22 => "00111110001110000100000100100101", 
    23 => "00111101100111111010111001000011", 
    24 => "10111110000011111110111100111001", 
    25 => "10111101100110001010101101010000", 
    26 => "10111101110100000101000100000001", 
    27 => "10111101100000111101011110010000", 
    28 => "10111100011100101000110001111010", 
    29 => "10111010101100101001001000111001", 
    30 => "10111101110010011100011101011111", 
    31 => "10111101111011011010011011100111", 
    32 => "10111101110100101110101101011111", 
    33 => "10111101000111110110001110101000", 
    34 => "00111011000110000101011101001111", 
    35 => "00111101111011110111111111010000", 
    36 => "10111101010011101000010100011001", 
    37 => "00111110000111011010111000111110", 
    38 => "00111100000011100100100101101111", 
    39 => "10111101111010011110000010100100", 
    40 => "00111101101110011010010111101100", 
    41 => "00111101101001101010100011010100", 
    42 => "10111101011100101110001011100001", 
    43 => "10111101001100000011010010110001", 
    44 => "10111110010010110000010001101000", 
    45 => "10111110010000111010110110011111", 
    46 => "10111101011011010100001000100011", 
    47 => "00111101100110000000000011101011", 
    48 => "10111101110001000101110001011110", 
    49 => "00111101101010001010100101101100", 
    50 => "00111101100000110100000110101100", 
    51 => "00111110001010000100100111001011", 
    52 => "00111100001111110101101000011110", 
    53 => "10111100010110011000010001101011", 
    54 => "10111110000011100110010100111000", 
    55 => "00111110000011101011111100100011", 
    56 => "10111101011011011110110110010100", 
    57 => "10111101101000011100101001100011", 
    58 => "10111110001100001011011111000011", 
    59 => "00111100010101111010011100011011", 
    60 => "10111100100111000101100101100111", 
    61 => "00111110000010110101011111000101", 
    62 => "00111101110011111011101100001110", 
    63 => "00111101001110101101000100000111", 
    64 => "00111100100100010110011101100110", 
    65 => "00111110000100100111110110001001", 
    66 => "10111110001010110110010000010111", 
    67 => "00111101101000111111011101100011", 
    68 => "00111110000000110000010001000111", 
    69 => "10111101010000001010110000101101", 
    70 => "00111100100000110111001110111101", 
    71 => "10111101111100001100110000110110", 
    72 => "00111110001101100000000001101101", 
    73 => "10111101101101110101101110001111", 
    74 => "00111100001101101010101010110111", 
    75 => "00111101100000010010001111111010", 
    76 => "10111011000101001100100111111100", 
    77 => "00111101101011010110011101110111", 
    78 => "00111101000110111011000110111101", 
    79 => "00111101101100111100000101001000", 
    80 => "10111101111001110100100111110001", 
    81 => "00111101110110010100010000100100", 
    82 => "10111100111100111001110011100101", 
    83 => "00111110000010100000000011100010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_57 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_57 is
    component inference_mult_1_120_120_84_s_W4_57_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_57_rom_U :  component inference_mult_1_120_120_84_s_W4_57_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


