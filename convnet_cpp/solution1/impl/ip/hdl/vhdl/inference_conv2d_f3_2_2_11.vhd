-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010110111100001101000000", 
    1 => "00111110001101100101110111000000", 
    2 => "10111101100100111100110110001101", 
    3 => "10111100100110011001111110101111", 
    4 => "00111101100100111010001011111010", 
    5 => "00111100101000011111100101001111", 
    6 => "00111101111000011011111010110010", 
    7 => "00111101000101000110101100001100", 
    8 => "00111110001000001100110101000010", 
    9 => "00111101101100111010001101001011", 
    10 => "00111110000110001000110100101010", 
    11 => "00111101101111101011000110110111", 
    12 => "00111101101001011011100101001000", 
    13 => "10111101000010101011101011110100", 
    14 => "10111110000111011000000110101110", 
    15 => "10111011001010011010010011111111", 
    16 => "00111101101111011100110001111111", 
    17 => "10111101001101011000100111010101", 
    18 => "00111110000001010101000000000001", 
    19 => "10111100110011111010011010011100", 
    20 => "10111101011001001101100010101101", 
    21 => "00111100101001000001011110100010", 
    22 => "00111101100010011001000110000111", 
    23 => "10111101110011111110111001110000", 
    24 => "00111101011001000010010111111111", 
    25 => "10111101110111100000110011100001", 
    26 => "00111110010101100010001110001110", 
    27 => "00111101101011010000011100100111", 
    28 => "10111101011001110011001000001001", 
    29 => "10111100100000000101110001000110", 
    30 => "00111101110011000011000011100000", 
    31 => "00111110000001000010100010010001", 
    32 => "10111101111110000101101101011011", 
    33 => "00111101001011011111110000001100", 
    34 => "10111110001101101111110110101000", 
    35 => "00111100011101101011101101001000", 
    36 => "10111101110110111010100110001111", 
    37 => "00111100111111011111001101001011", 
    38 => "00111100100001001111110110010110", 
    39 => "10111101010100000010100011011000", 
    40 => "10111100111011001010010101000101", 
    41 => "00111101111110101011100001100011", 
    42 => "10111110001101100111110010101111", 
    43 => "10111101000001101010001100011101", 
    44 => "00111100111011001111010010001011", 
    45 => "10111101111011100010111010110010", 
    46 => "10111110000010110101010000011001", 
    47 => "00111101100010100000111011010101", 
    48 => "10111100011111001101111000001101", 
    49 => "00111101001100100010010001110101", 
    50 => "10111101100100101101101100011111", 
    51 => "00111101111110011001010001011011", 
    52 => "10111101111000011011110110100101", 
    53 => "00111100100011010010111010000111", 
    54 => "10111101000100011101000000100111", 
    55 => "00111110000110000111000110100100", 
    56 => "00111100000110111111000100100010", 
    57 => "00111100111111101110111001010010", 
    58 => "00111011100000101011000001110100", 
    59 => "00111100001001100001100111011011", 
    60 => "10111100101100001101000010000010", 
    61 => "00111110000110100100001001101100", 
    62 => "10111101101010010110010000101101", 
    63 => "00111101100100100110110011011101", 
    64 => "10111101010101101100111111010110", 
    65 => "10111100001000101100101111010010", 
    66 => "00111101011110011100000000010101", 
    67 => "10111101010011111111010000011001", 
    68 => "00111101110011001110000111000110", 
    69 => "00111110000010000000010111100110", 
    70 => "00111101010110111011110000111001", 
    71 => "00111101111011110000100011001100", 
    72 => "00111110001000000111110011001000", 
    73 => "00111101000001001001000001101110", 
    74 => "00111101111010000001100100001001", 
    75 => "10111100110001111101101100101011", 
    76 => "00111101111110011000101001100101", 
    77 => "00111110000010101110010110111101", 
    78 => "00111100000011000100000111100010", 
    79 => "10111101101011101010010110000000", 
    80 => "00111100101111101111000111100011", 
    81 => "10111101000110111111011101011101", 
    82 => "00111101110001000010000101100010", 
    83 => "00111101001000010111100011110111", 
    84 => "10111101010100101010011100110111", 
    85 => "00111101001111100111011111010101", 
    86 => "00111101101110110100001000011110", 
    87 => "10111101110001110011110001001111", 
    88 => "00111110000001111010010011101000", 
    89 => "00111101001111011101000111110011", 
    90 => "00111101011000110101010101110000", 
    91 => "00111100110111000000111001010011", 
    92 => "10111011101110011011011110110010", 
    93 => "00111100101101111110010001110011", 
    94 => "10111110000100100111000001101101", 
    95 => "10111100100110010110011100001111", 
    96 => "00111100101011010100110111100001", 
    97 => "00111100000001011011010011001011", 
    98 => "00111101000110010010100001000000", 
    99 => "00111100001000100110001111101110", 
    100 => "10111101011010110010100100001110", 
    101 => "00111101111111011110011100100001", 
    102 => "10111101000110111101110100100110", 
    103 => "00111101010111001011111000010001", 
    104 => "00111101000011101010010100010100", 
    105 => "10111101001111001011011101011011", 
    106 => "00111011001111010010010100001111", 
    107 => "00111101111100100011100100011101", 
    108 => "10111101101101101101111101101000", 
    109 => "00111110001100000110110111010111", 
    110 => "00111101001100101001100000000011", 
    111 => "10111100100010110010000011111011", 
    112 => "10111100110010010110000111011110", 
    113 => "10111101000011111101101100100100", 
    114 => "00111101100001000001011010100011", 
    115 => "10111110010001100110101111101000", 
    116 => "10111101011110110000110001100000", 
    117 => "00111110000000100000010111111111", 
    118 => "10111101011110000100100110001000", 
    119 => "00111101111001011000010011110101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_11 is
    component inference_conv2d_f3_2_2_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_11_rom_U :  component inference_conv2d_f3_2_2_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


