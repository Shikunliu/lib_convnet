-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000010001110011100010100", 
    1 => "10111101000011001000001000111111", 
    2 => "10111101100000111111000100001011", 
    3 => "00111101000011111001101100010011", 
    4 => "00111101101001100010100110001000", 
    5 => "10111101000101011000010001100001", 
    6 => "00111101101100110111100100100100", 
    7 => "10111100100011101000011010101100", 
    8 => "00111101101010010001010000101011", 
    9 => "00111101011100000100101111111000", 
    10 => "10111110011000101010011010110001", 
    11 => "00111011100011011001111010111010", 
    12 => "10111101100010100000011000000110", 
    13 => "10111011011101110000110111101001", 
    14 => "00111011000101011001100100000100", 
    15 => "10111101110111011101000000001111", 
    16 => "00111100000010000111111011101010", 
    17 => "10111101000101011001111011001110", 
    18 => "10111101010110110010100001000101", 
    19 => "10111110001101000110001011000011", 
    20 => "10111101110000110110011111110010", 
    21 => "10111101100110100111000010011100", 
    22 => "10111101010000000111100100110111", 
    23 => "00111101010111000010110111100011", 
    24 => "00111101011111010010011000010110", 
    25 => "10111101110001111110110011010110", 
    26 => "10111101000101100101101101010110", 
    27 => "10111101101101111110110001101011", 
    28 => "00111101001000001010001011110011", 
    29 => "00111101111010101110011101001111", 
    30 => "10111110000000101110001110000010", 
    31 => "00111101010001000101011010100111", 
    32 => "10111100100111001100111010100011", 
    33 => "10111100101110011110100101100110", 
    34 => "10111100111110110111010100100001", 
    35 => "10111110000111101110011111000101", 
    36 => "00111101100100100110110011101010", 
    37 => "00111101010001111110001011101110", 
    38 => "10111101011000010100001101111100", 
    39 => "10111101100010001100001101100000", 
    40 => "00111101111100001101100101010001", 
    41 => "00111101101100101100011000011000", 
    42 => "10111101110100111100010001101110", 
    43 => "10111100100111001111011001111011", 
    44 => "10111101010001000101000011100010", 
    45 => "10111110001101111011101011101101", 
    46 => "00111100110111110100011111000100", 
    47 => "00111101000101110101010000001111", 
    48 => "00111010010010010001000010110011", 
    49 => "00111100100001010111011101101110", 
    50 => "00111100101111100101000101110100", 
    51 => "10111101100100010011100000011100", 
    52 => "00111101011000011100110111001011", 
    53 => "00111101101110111000111010011100", 
    54 => "10111110010001110111000010111101", 
    55 => "00111110000111110000110000110101", 
    56 => "00111100111000001010111100000010", 
    57 => "10111101101111101000001000110111", 
    58 => "10111101100001101100010101011001", 
    59 => "10111100100111011110110001111010", 
    60 => "00111101001101011011110001111010", 
    61 => "00111101110111010101000110110101", 
    62 => "10111110010000000000111000101000", 
    63 => "00111011010111110111101001111001", 
    64 => "10111101110011011100101110011011", 
    65 => "10111110000010111001100100001011", 
    66 => "10111110010010011000101111111000", 
    67 => "00111101100110000010010101110110", 
    68 => "00111101101111000010111100011000", 
    69 => "00111101010010101100100100110111", 
    70 => "10111101101011000100111110011010", 
    71 => "00111100110101111110101000000010", 
    72 => "00111110000001011101101011110000", 
    73 => "10111011100110011000000100000101", 
    74 => "10111110001100111001010000110001", 
    75 => "00111110001001010111001101100100", 
    76 => "10111101110001111010001010110100", 
    77 => "00111100111011011000100001100100", 
    78 => "10111101101010011001101101010101", 
    79 => "00111101101111011010001010110110", 
    80 => "00111101101001010000011110100111", 
    81 => "10111101001001100010100101000101", 
    82 => "00111101110100101101101010011000", 
    83 => "00111100000010111001001111111101", 
    84 => "00111011110001011011011001101110", 
    85 => "10111101001111011100111001111101", 
    86 => "10111101101011001000110011111111", 
    87 => "00111101010101110100110010111000", 
    88 => "10111101111100111100010011110100", 
    89 => "10111101100100110011111011100100", 
    90 => "10111100111100101001100110110000", 
    91 => "00111110001011000000100000110001", 
    92 => "00111011111110100011011000010010", 
    93 => "00111101100110011001001111110000", 
    94 => "00111101100001011010011100001001", 
    95 => "10111110001001010110000100001011", 
    96 => "00111101101011000010111000110100", 
    97 => "10111101111001010101011101011000", 
    98 => "00111101100100111101111011011010", 
    99 => "00111101110000101011101000001001", 
    100 => "00111100011000001000100110101110", 
    101 => "10111110000100010010000100100101", 
    102 => "10111101110100001011101111110101", 
    103 => "00111101110010101000010010001001", 
    104 => "00111100101001101111100001011101", 
    105 => "00111101001000101111111100001001", 
    106 => "00111101111110100111011101100000", 
    107 => "00111101010001001011000001101001", 
    108 => "00111101010100010110100101001001", 
    109 => "00111100100010000110101110101010", 
    110 => "00111100100100110000010101100001", 
    111 => "00111101000011001001011010010111", 
    112 => "00111101011100011010000100101101", 
    113 => "00111101101001001100101100001011", 
    114 => "00111100000010010100100101010101", 
    115 => "10111101001000010100001010100110", 
    116 => "00111100101110111100110101101011", 
    117 => "10111100000010011110001110001110", 
    118 => "10111101100111110010010010111110", 
    119 => "10111101010010001110011100010100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_6 is
    component inference_conv2d_f3_2_4_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_6_rom_U :  component inference_conv2d_f3_2_4_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


