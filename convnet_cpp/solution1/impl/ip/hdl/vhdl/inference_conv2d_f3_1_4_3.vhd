-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000100001010000101101110", 
    1 => "10111101101010110110001101001110", 
    2 => "00111101100001110100010101000110", 
    3 => "10111110000001011111011010111010", 
    4 => "00111101000001000101111011010101", 
    5 => "00111100110011010000001111110101", 
    6 => "00111100000110111000101000110101", 
    7 => "00111110000001110100001001010111", 
    8 => "10111101010001010001001111101011", 
    9 => "10111110000100100100100110100001", 
    10 => "00111110001100100010011111010000", 
    11 => "10111101011001010001100110110000", 
    12 => "10111101110011001010101001110110", 
    13 => "10111101010111010011101010111110", 
    14 => "00111100010101001110111110110001", 
    15 => "10111011110111011011111110100100", 
    16 => "00111101101011100111111001110000", 
    17 => "10111100101000101010111111111001", 
    18 => "00111100001010000010101001010110", 
    19 => "10111100101010110100010101011110", 
    20 => "00111101010110111110011001111011", 
    21 => "10111101100000001010100100010101", 
    22 => "00111101001101111000110100011010", 
    23 => "00111100111111110110111011100001", 
    24 => "10111100011011110101000010000101", 
    25 => "10111110010010100001011011101000", 
    26 => "10111101100100011100011000111110", 
    27 => "10111101001111110100001011110001", 
    28 => "00111011111100011111100010000000", 
    29 => "00111110000110101101110111011111", 
    30 => "00111110000101110111100001010111", 
    31 => "10111101111100010111110101101011", 
    32 => "10111101001111001001010000000101", 
    33 => "00111110000111000100010100000010", 
    34 => "00111110000111111001111001111100", 
    35 => "00111101000100010110000101101100", 
    36 => "10111101011100111010110100100110", 
    37 => "10111101011101110100011110010101", 
    38 => "10111010101100100010010100101100", 
    39 => "00111101111100101100011000100110", 
    40 => "00111101000000100011011011110111", 
    41 => "10111101011010011011000010000011", 
    42 => "00111100010111011111001111010001", 
    43 => "00111110001101111010011100000001", 
    44 => "00111101101111101101000101010100", 
    45 => "00111101001111110001000101011000", 
    46 => "00111110010000111010110010010011", 
    47 => "00111101111100011000001010101010", 
    48 => "00111101111000111110011111010001", 
    49 => "00111101101010000011100010110100", 
    50 => "00111011010011011010010111100110", 
    51 => "10111101110110001011100100110100", 
    52 => "00111100001101000011110001001000", 
    53 => "00111101100101110000000010100101", 
    54 => "10111011001101110111110110110000", 
    55 => "10111100000101110101101001011010", 
    56 => "00111110010101011001100100100100", 
    57 => "00111110000000100111111100011011", 
    58 => "00111100110000111111000010111011", 
    59 => "10111110001111010011011011111000", 
    60 => "10111101110001100010110100011000", 
    61 => "10111101101010011010110111110001", 
    62 => "00111101110011100011001101101010", 
    63 => "00111100111110100111101111000111", 
    64 => "10111101110000011011000111001100", 
    65 => "00111101101100100011111001101001", 
    66 => "00111101111000101100111001000110", 
    67 => "10111101000111111110110111110111", 
    68 => "00111101011011011100010001111001", 
    69 => "00111101010000001000111101110010", 
    70 => "10111101100110011100010100011110", 
    71 => "00111101101111001110100101101101", 
    72 => "10111101100010000010110010111111", 
    73 => "10111101101110011001011100111110", 
    74 => "00111110001001000100100110011001", 
    75 => "10111110000100010110001011110001", 
    76 => "10111101111001011010001101011101", 
    77 => "10111110001001010011011011010110", 
    78 => "00111100100010111010000011101000", 
    79 => "00111101101000100101111011000010", 
    80 => "10111100100111111111010110011110", 
    81 => "10111101000011101000100110011011", 
    82 => "00111100001010001011010001010100", 
    83 => "00111101001111110111010101100001", 
    84 => "00111101001110111101110110101100", 
    85 => "00111101111001000011100100010101", 
    86 => "10111110000001100101111100001111", 
    87 => "10111110010110110001111110101100", 
    88 => "00111011010100100010011001010011", 
    89 => "10111011101101010100111000101011", 
    90 => "00111100011000010111011111101010", 
    91 => "10111101000010001100111010001011", 
    92 => "10111100000001010101010111110101", 
    93 => "10111101101101011000100000011010", 
    94 => "10111101111001000100001110010001", 
    95 => "00111101101111111011011010100111", 
    96 => "00111100011110011011101001101100", 
    97 => "00111101111001110010111100110100", 
    98 => "00111101111011011000110100110111", 
    99 => "00111101101001000111010111100110", 
    100 => "10111101111001100111110011110010", 
    101 => "00111100111110010001100111000111", 
    102 => "10111101011001000110110110011110", 
    103 => "10111110001001001111000111100101", 
    104 => "10111101010011010000101001110101", 
    105 => "10111101101000000110101000111001", 
    106 => "10111101000010001110011010001110", 
    107 => "00111101101011010011011101100011", 
    108 => "10111100101000111101010100100111", 
    109 => "10111101010000111100001100011110", 
    110 => "00111100110110001101101011111000", 
    111 => "00111010110111000111111101000111", 
    112 => "00111011111010001100111101001100", 
    113 => "10111110010000010101010111010110", 
    114 => "10111101101010011010101011011001", 
    115 => "10111110000010011010001100001010", 
    116 => "00111100011011111001001100110110", 
    117 => "10111110000000010010100001111100", 
    118 => "10111101100000111110110011100111", 
    119 => "00111101100000011101111011111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_3 is
    component inference_conv2d_f3_1_4_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_3_rom_U :  component inference_conv2d_f3_1_4_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


