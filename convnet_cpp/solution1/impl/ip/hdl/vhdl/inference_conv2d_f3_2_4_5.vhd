-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011111000011101011001001001", 
    1 => "10111100111100010111101101101101", 
    2 => "10111011111001000100010010111001", 
    3 => "00111100100000000110101001010011", 
    4 => "00111101111100100000010110111100", 
    5 => "00111101101011010010011100110000", 
    6 => "10111101110000011111001010001100", 
    7 => "10111100010000011100010110011101", 
    8 => "10111101000101010010101111100001", 
    9 => "00111101010011001011100111101101", 
    10 => "10111101100001011110111101111110", 
    11 => "00111101101010001100101001001100", 
    12 => "10111101100011101101100001000000", 
    13 => "10111101101000001011010001110110", 
    14 => "00111110000001100001000101110111", 
    15 => "00111100000111000100010010001111", 
    16 => "10111101010001110000101110001101", 
    17 => "10111101000000100010000011010111", 
    18 => "00111110000100001000100100011010", 
    19 => "00111011111100010110010110011110", 
    20 => "00111100111111000110111111110011", 
    21 => "00111010110000110001100111000110", 
    22 => "10111110001001110100100001011110", 
    23 => "10111101110101101000110001101001", 
    24 => "10111100010000100010111001111001", 
    25 => "10111110010011110001011001101110", 
    26 => "10111110001111000010111011111101", 
    27 => "00111101001101011111010110111011", 
    28 => "10111101010110110110100010001100", 
    29 => "10111101110011001001001010110101", 
    30 => "10111010000101000011111100000001", 
    31 => "10111101101000001011011101001011", 
    32 => "10111101001000011100000111110010", 
    33 => "10111101111001011110010001100000", 
    34 => "00111100101000000011111100000101", 
    35 => "10111101111000001010010110101101", 
    36 => "00111100010000010100101100100100", 
    37 => "00111100100111010101100101000010", 
    38 => "10111101100101101010110001110010", 
    39 => "10111100010111000100111110001100", 
    40 => "10111100100111010000000101100011", 
    41 => "00111101001100110111000010100110", 
    42 => "00111101100100111010100101000101", 
    43 => "10111101000100101101011100111101", 
    44 => "10111101011101111111011110100011", 
    45 => "10111101000100000011010001111011", 
    46 => "10111100101101100111101110111101", 
    47 => "00111101010110111100111100110100", 
    48 => "00111110000100011100001101101001", 
    49 => "00111100010000101011000011101010", 
    50 => "00111101100110011111100101111110", 
    51 => "00111101100111011011011001010001", 
    52 => "00111101101010000000111001110010", 
    53 => "00111110000110011001010011100010", 
    54 => "10111011111110111010011011010101", 
    55 => "00111110001001000000110101001110", 
    56 => "00111101111111101000100000010110", 
    57 => "00111101010101110000100101100111", 
    58 => "10111100110011111010001101110111", 
    59 => "10111101111010101110001100011101", 
    60 => "10111110000100000100010100110101", 
    61 => "10111100111101000011110110111111", 
    62 => "00111101100000010001000111111110", 
    63 => "00111101001111011001101110111101", 
    64 => "10111110001001001111111111001001", 
    65 => "00111101101110001100101000001001", 
    66 => "10111101111000110000000110101000", 
    67 => "00111110000100010011000001011001", 
    68 => "00111101110010011000100000001001", 
    69 => "00111101001100001010001101010001", 
    70 => "00111101101000110011101010110011", 
    71 => "10111101010011111101110110001110", 
    72 => "00111101101000100010001110111001", 
    73 => "00111101110110100100011100100100", 
    74 => "00111101111011001110100010010110", 
    75 => "00111101100110100100010110111001", 
    76 => "00111110010001000010110011000011", 
    77 => "10111101101101111001000000111111", 
    78 => "00111101111111110001110011111100", 
    79 => "00111100101101101100100110001011", 
    80 => "10111100011101011000011010010101", 
    81 => "10111101101000100000101100111101", 
    82 => "10111010011011111000001010101111", 
    83 => "10111100111000011111001000101110", 
    84 => "10111101010010010100001000011001", 
    85 => "00111101000110001110010101110100", 
    86 => "00111010111110111000010101000111", 
    87 => "10111101111100110111011111100010", 
    88 => "00111101100000010111000001010000", 
    89 => "10111101101101110010111111100010", 
    90 => "10111101000101100001101101000101", 
    91 => "00111101000111111101110000111110", 
    92 => "00111101100100110000011010001000", 
    93 => "00111101100000101000111010111011", 
    94 => "00111110000110100011101010001110", 
    95 => "00111110000110100111100100110101", 
    96 => "00111110010000101010010100011110", 
    97 => "00111110001001110101011110010011", 
    98 => "00111011110001101011111111011000", 
    99 => "10111100010101110001110110001001", 
    100 => "00111101101101010011010101000100", 
    101 => "00111101100110111110101010011111", 
    102 => "00111101010000101101001001000010", 
    103 => "00111101101010100011011010101101", 
    104 => "00111011100100000010010001100101", 
    105 => "00111100101110110001001111010010", 
    106 => "00111100111000110001111100011111", 
    107 => "10111101100111101001110110000111", 
    108 => "10111101100110101001001101101100", 
    109 => "00111101100110101101001101001000", 
    110 => "10111110010100000111110111010100", 
    111 => "10111100011011010101011100011011", 
    112 => "10111110001011011100001001101110", 
    113 => "10111101001111111011110100011010", 
    114 => "00111101000100100101001010011000", 
    115 => "10111101100100101100001001111010", 
    116 => "00111101001001001101001110111111", 
    117 => "00111101110100000111100011011001", 
    118 => "00111101101010000101000111011110", 
    119 => "10111110010001010010000011010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_5 is
    component inference_conv2d_f3_2_4_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_5_rom_U :  component inference_conv2d_f3_2_4_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


