-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000001011101100110110100", 
    1 => "00111101001010001011110110001110", 
    2 => "10111101001000011111101001011011", 
    3 => "00111101100100100111001101011101", 
    4 => "10111100010010100011100010011110", 
    5 => "00111100110100000110101100011101", 
    6 => "10111110001111110011001001111011", 
    7 => "10111101100001101100100000101110", 
    8 => "10111110001000001101111101011001", 
    9 => "00111101000100100110100010111000", 
    10 => "00111101001011000001010111010011", 
    11 => "00111110001010110110000101111000", 
    12 => "00111101001111000001111100110101", 
    13 => "00111101101001110010111000100111", 
    14 => "00111110001011110001000101110011", 
    15 => "00111100101111110010110011010001", 
    16 => "00111101100010101010100100100001", 
    17 => "00111101101001010000110101000011", 
    18 => "10111101101001110100101001101010", 
    19 => "00111100100011001011110101001000", 
    20 => "00111100110101001000101111011110", 
    21 => "00111101110000001010111010001001", 
    22 => "10111100101100001001110011101011", 
    23 => "10111101111011000101011101011100", 
    24 => "00111110010011001000011100010010", 
    25 => "10111110000011101010010000100011", 
    26 => "00111101110100010111100100111010", 
    27 => "10111101001111001000010110100111", 
    28 => "00111011000100111110101010000011", 
    29 => "10111101001100111110100011101011", 
    30 => "00111101101011110011100001001100", 
    31 => "10111101111110011010101011100111", 
    32 => "10111101101000011111011100011011", 
    33 => "10111101011111111011001110001111", 
    34 => "10111101101101011010101010001100", 
    35 => "00111101010100100101110011011111", 
    36 => "00111101010101100101011001001110", 
    37 => "10111101111001111001001101010111", 
    38 => "10111101000101111000011111000001", 
    39 => "00111101111100100001001111100100", 
    40 => "10111100101011100101101000011011", 
    41 => "00111101000011000110001011001010", 
    42 => "10111110010011111100110010011111", 
    43 => "00111100001011000001101111101000", 
    44 => "10111101101010011100111111011101", 
    45 => "10111101110101010011100110111001", 
    46 => "10111101110101000011110100000100", 
    47 => "10111110000011010101011110111100", 
    48 => "10111101000001001100101110101100", 
    49 => "10111101101000100101101100110001", 
    50 => "00111011110111010100010011101010", 
    51 => "10111101100100111001110010010101", 
    52 => "10111110001100000000001100100101", 
    53 => "10111101000111110110000100111111", 
    54 => "10111100011011101011110001110110", 
    55 => "00111101111011101011001001001010", 
    56 => "10111101100111101110100011111001", 
    57 => "10111100010010000011010110001110", 
    58 => "10111101101110101000011110100000", 
    59 => "00111011110110101001010101001101", 
    60 => "00111100101101100001010011000101", 
    61 => "00111101101110111111001110111111", 
    62 => "10111101000011011010100101010001", 
    63 => "10111101110001001001101101110000", 
    64 => "10111101110011101101110111001110", 
    65 => "10111101110110001000010011000111", 
    66 => "10111110001000001011101010100110", 
    67 => "00111110001011011101100100111100", 
    68 => "10111101101110110011000010110110", 
    69 => "10111011111101000011111010000001", 
    70 => "00111011011100010001110000001100", 
    71 => "00111101110111000011001111111000", 
    72 => "10111110000100101111100110000111", 
    73 => "00111101001110011111000110010011", 
    74 => "10111101101000000001111000110011", 
    75 => "10111101011101111000000111100010", 
    76 => "00111101101100010011001001110010", 
    77 => "00111100000010001000100100010001", 
    78 => "10111110000111101101111011011011", 
    79 => "10111101101000110110100000001100", 
    80 => "00111100011111001101010001100111", 
    81 => "10111101001111000100110100111110", 
    82 => "10111110000001001110101011010001", 
    83 => "10111101111001010110111101110110", 
    84 => "10111101101110001110110101010010", 
    85 => "10111101111000000110001000001011", 
    86 => "10111101111110111000000100110000", 
    87 => "00111110001010110101010100100110", 
    88 => "10111101100111111111011110001111", 
    89 => "00111100111110000101000000001000", 
    90 => "00111100111100000100110011001111", 
    91 => "10111101000010111101110101101001", 
    92 => "10111101110111011010000101100110", 
    93 => "10111101011000111110100110011010", 
    94 => "00111011100101010100100101111110", 
    95 => "10111101101001111101101101111100", 
    96 => "00111110000110000111011010011111", 
    97 => "10111101111001110010001100100101", 
    98 => "10111110000101001011010010001101", 
    99 => "10111100101000000000010111000100", 
    100 => "10111101010111010000100001001111", 
    101 => "10111101000100011100011000010110", 
    102 => "10111110000100000000001000011001", 
    103 => "10111100010010001110111011110010", 
    104 => "10111110000110110110111010010011", 
    105 => "00111110000001011100001011010010", 
    106 => "10111011101000110011010101100100", 
    107 => "10111100000010100000100110000100", 
    108 => "10111101111010001111011011001111", 
    109 => "10111101101001001010010000010111", 
    110 => "00111101011011100100000110101100", 
    111 => "10111101101101101111101110000010", 
    112 => "00111101101101101100001110010001", 
    113 => "00111110000100100111000010110000", 
    114 => "00111100110110100011000100111001", 
    115 => "10111100010010110100010000110111", 
    116 => "10111110000100110100100000101100", 
    117 => "00111101100111111110100000100101", 
    118 => "00111110010100001110000111111000", 
    119 => "00111110000001101101001010101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_0 is
    component inference_conv2d_f3_1_4_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_0_rom_U :  component inference_conv2d_f3_1_4_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


