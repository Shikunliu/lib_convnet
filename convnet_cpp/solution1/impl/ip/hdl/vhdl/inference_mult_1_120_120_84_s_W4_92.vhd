-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_92_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_92_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100111100001010110100010", 
    1 => "10111101000110110101110101010100", 
    2 => "10111101111011011000111011001001", 
    3 => "10111110000001001101001001110000", 
    4 => "10111100111111010010110101010010", 
    5 => "00111101100010100010100111100010", 
    6 => "00111011101011100000110001000010", 
    7 => "00111101101101100011000110110110", 
    8 => "00111110000000101011010001010011", 
    9 => "10111100001001010110100110110001", 
    10 => "10111110001110110000000001111010", 
    11 => "00111101111101111101010010011101", 
    12 => "10111101001000000100110101100011", 
    13 => "10111110000110010101111110101011", 
    14 => "00111101111110010000000100001000", 
    15 => "10111011111011100111110010001010", 
    16 => "00111101111000000100001100011100", 
    17 => "00111101100010101000000011111000", 
    18 => "00111101101010000011101011110101", 
    19 => "10111110010110001000100010110101", 
    20 => "00111100000011000100000110111000", 
    21 => "00111101100010011101011110000101", 
    22 => "00111101010111101110000101010010", 
    23 => "10111101100010110011100110101101", 
    24 => "10111101111100010011001101111111", 
    25 => "10111100000000100011111000011110", 
    26 => "10111101100000111011101011001000", 
    27 => "00111101000001101001111111000010", 
    28 => "00111101100101001000001110100011", 
    29 => "10111101000000011111100110000101", 
    30 => "10111100001100010101011110010001", 
    31 => "10111100100011101000110011000000", 
    32 => "00111101100101111110100100011101", 
    33 => "10111100100011110111000110001101", 
    34 => "10111100011010000101011000101011", 
    35 => "00111100111000101101100010101000", 
    36 => "00111101100101010010001101100011", 
    37 => "10111101001101001011001101100110", 
    38 => "00111100010111110001001100100000", 
    39 => "10111101110101101100001101110110", 
    40 => "10111110000000100001110001000111", 
    41 => "10111101101111011100110000010011", 
    42 => "10111101100001010111000010010000", 
    43 => "00111100111101100100001110001001", 
    44 => "10111100100001111101011011000100", 
    45 => "00111100110011001100011001001101", 
    46 => "00111101100011110000101010111101", 
    47 => "00111101101011100000010010110011", 
    48 => "10111101001100001100001001011011", 
    49 => "10111101111110010000010000101110", 
    50 => "10111101001011011110111100100111", 
    51 => "10111101001000010010101000110111", 
    52 => "10111101000010000011100101110000", 
    53 => "10111101110110010101011100000100", 
    54 => "10111110001001110010101010111111", 
    55 => "00111101001111010101101001001110", 
    56 => "00111101110110100110101001000100", 
    57 => "10111100111011110010101110011100", 
    58 => "10111100111100111101110010100110", 
    59 => "10111101010110101011000100100110", 
    60 => "00111101110000010110100010101000", 
    61 => "10111101110100001010111011011010", 
    62 => "10111100111000110011111110100000", 
    63 => "00111100111011010110001010100100", 
    64 => "10111101101100001101001111111000", 
    65 => "10111101010001100011110011000110", 
    66 => "00111101100011000010101101101101", 
    67 => "10111101101001001110011000110100", 
    68 => "10111100111101111110111001001110", 
    69 => "00111110000101011110100100011000", 
    70 => "10111100100000000000000100001100", 
    71 => "00111010011110101110011111010111", 
    72 => "00111100011001011001010110000110", 
    73 => "00111100111101100001101000000011", 
    74 => "10111101100000011101111010101101", 
    75 => "00111101010100001000011100011100", 
    76 => "00111011000010111000110100010001", 
    77 => "10111101010111111110111100111001", 
    78 => "00111101001001100010001010001111", 
    79 => "10111101100101111101000111010110", 
    80 => "00111101101011110011001010001000", 
    81 => "10111100100001111010001001010110", 
    82 => "10111101101111110010110101010111", 
    83 => "00111101010100111011000000110001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_92 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_92 is
    component inference_mult_1_120_120_84_s_W4_92_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_92_rom_U :  component inference_mult_1_120_120_84_s_W4_92_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


