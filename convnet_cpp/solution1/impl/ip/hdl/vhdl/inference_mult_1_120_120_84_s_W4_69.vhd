-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_69_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_69_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100111110001000110000000", 
    1 => "10111100100000110101110000001011", 
    2 => "10111110000110000010001001111001", 
    3 => "10111110000000011010111101111101", 
    4 => "10111110001000000110000010111011", 
    5 => "00111101111000011000001111111001", 
    6 => "00111101010001110011101101000011", 
    7 => "10111101111010010001101011111100", 
    8 => "10111101111001010000011110100111", 
    9 => "00111101110101000011011000110011", 
    10 => "00111101100100001110111111001111", 
    11 => "00111101011111010111100100000111", 
    12 => "10111110011010010101100111100110", 
    13 => "10111100001110011011110111111100", 
    14 => "10111101000001110110001010010101", 
    15 => "10111101000011000011100001010010", 
    16 => "00111100111100010111000110010010", 
    17 => "10111110000110101111101101111111", 
    18 => "00111110001010001101100001100110", 
    19 => "10111110001010111101101011010111", 
    20 => "10111101000100111110010101000000", 
    21 => "00111101110000010001100000000110", 
    22 => "00111101001001100001011111000010", 
    23 => "00111101011110010010110101111110", 
    24 => "00111101110000111010110010010011", 
    25 => "00111110001110101010011000001001", 
    26 => "00111100010110111000110010000011", 
    27 => "10111101010001010001001110110110", 
    28 => "00111110000000110011101011001101", 
    29 => "10111101110101010001011100011110", 
    30 => "00111101011011000100110000111111", 
    31 => "10111011101001100111100011100110", 
    32 => "00111110000100111111001110011101", 
    33 => "00111101010011101111000100011010", 
    34 => "00111011001000100000001001110100", 
    35 => "00111110001010111011111001000100", 
    36 => "00111110001111001011100011100001", 
    37 => "10111101000110000111101010000000", 
    38 => "00111100010111110011011100110011", 
    39 => "10111101001111000111111101000010", 
    40 => "00111101111001010111000100001001", 
    41 => "00111011101001011001111101110111", 
    42 => "10111011111010100000001010111110", 
    43 => "10111101101010010000010101111101", 
    44 => "00111101100010110001111000110100", 
    45 => "00111101001111111001111100011101", 
    46 => "10111101000010100000111101101000", 
    47 => "00111101000100111101110111001110", 
    48 => "10111101111101010111100100101001", 
    49 => "00111100110001110100000011010010", 
    50 => "00111101111010000110110101110010", 
    51 => "10111101110110011100000001100110", 
    52 => "00111010101110101101011011010110", 
    53 => "00111110001001011110101001101000", 
    54 => "00111100000111011001010010100110", 
    55 => "00111101100101110010010110110110", 
    56 => "10111101000011101100001001110000", 
    57 => "10111011100000001010010010010110", 
    58 => "00111100110010100100110110010111", 
    59 => "10111101001101011101000101110011", 
    60 => "00111101110001000001101100011000", 
    61 => "10111110011000000010010011110110", 
    62 => "10111100100011001011011000100111", 
    63 => "10111101110100110101001010101000", 
    64 => "00111101100000111010010001100101", 
    65 => "00111101111111101101110100000101", 
    66 => "10111101001000010101100110110111", 
    67 => "00111101011110001100101100100011", 
    68 => "10111100000011101110010101110110", 
    69 => "10111101100111010011110110111011", 
    70 => "00111101100110101111001010010101", 
    71 => "10111100011100110000011111001010", 
    72 => "10111101010000111100110110110101", 
    73 => "10111110000110010001011101010000", 
    74 => "00111100110101100110000000101001", 
    75 => "00111101101010000010011110101010", 
    76 => "00111100111000001000100101111000", 
    77 => "00111101101000101011110110101000", 
    78 => "10111110000011001110011101000111", 
    79 => "10111110000111100101111010101011", 
    80 => "00111110000010110101100100010100", 
    81 => "00111101011100011100100110100111", 
    82 => "00111100101111110001101110011111", 
    83 => "10111101011011110000100011100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_69 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_69 is
    component inference_mult_1_120_120_84_s_W4_69_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_69_rom_U :  component inference_mult_1_120_120_84_s_W4_69_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


