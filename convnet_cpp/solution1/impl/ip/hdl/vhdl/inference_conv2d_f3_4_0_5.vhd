-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000000101010110110001111", 
    1 => "00111110000000111110111010100010", 
    2 => "00111110000100001011001100001011", 
    3 => "10111101111010110100111000010010", 
    4 => "00111101010100110011110010001000", 
    5 => "00111100110111000101100010010001", 
    6 => "00111101011100010110011011111011", 
    7 => "10111100111011000100111101001001", 
    8 => "10111100100111110001011001111011", 
    9 => "00111100101010100001011110010110", 
    10 => "00111110000001010010111010110110", 
    11 => "00111101110101111000111111101111", 
    12 => "10111101101101000011110001110000", 
    13 => "10111101001100110110100000100111", 
    14 => "00111110001001011011000101000010", 
    15 => "00111101101101001010110111001010", 
    16 => "00111101111010000101111101001010", 
    17 => "10111101100111110110000111101101", 
    18 => "10111100001001110001100101001001", 
    19 => "10111101111001101101000001001110", 
    20 => "00111101000000110101011001000110", 
    21 => "00111110000101000110010110100101", 
    22 => "00111110001101001001101111101001", 
    23 => "00111110001001000010110101001001", 
    24 => "00111101000001101011000101100000", 
    25 => "10111101001001110010000111001000", 
    26 => "00111101111100100101001111011010", 
    27 => "00111010100001101001011010110011", 
    28 => "00111110010111111110011111100010", 
    29 => "10111101111111001111010001100010", 
    30 => "00111101010000010010111101011010", 
    31 => "10111110001010010101010100101110", 
    32 => "10111101110100101000000011110001", 
    33 => "10111101001101011110100000011001", 
    34 => "00111110001000110101111110000001", 
    35 => "10111101001001000101001001110101", 
    36 => "00111110010001001100101111100010", 
    37 => "00111101111101000100101100101011", 
    38 => "10111101101100000001101100011011", 
    39 => "00111101011100101000111001000010", 
    40 => "00111100101111100100000111110000", 
    41 => "00111101100001001010100101100010", 
    42 => "00111101011010111000100001111010", 
    43 => "00111110000111000001111000110110", 
    44 => "10111101111011111000110001100101", 
    45 => "00111100100111000111001000100111", 
    46 => "00111101011010010011010000001100", 
    47 => "10111011000000101110001110100000", 
    48 => "00111100100000110001010101011110", 
    49 => "10111101111111000011100010110000", 
    50 => "10111110001010011001011100111110", 
    51 => "00111101111001010110011110011001", 
    52 => "00111101011000000010110011000110", 
    53 => "00111101000111011101000110111101", 
    54 => "00111110000111010111111010001001", 
    55 => "10111101101110001000110010010110", 
    56 => "10111101100001010100001110000110", 
    57 => "00111101001110111101010111001111", 
    58 => "10111110001011110001010101100010", 
    59 => "10111011100100011011111000011000", 
    60 => "00111101101010111001000111101010", 
    61 => "10111100101101101001100110000101", 
    62 => "00111101100110100110001111000100", 
    63 => "10111101100100001111110101100011", 
    64 => "10111101111100010001000011100100", 
    65 => "10111101100001010101011101011000", 
    66 => "10111101101000101110100111011010", 
    67 => "10111101100111101010100111110100", 
    68 => "10111011100011110110101010101100", 
    69 => "10111110010000001001110011000011", 
    70 => "00111101111100010000101010011010", 
    71 => "00111101110011100111001111100111", 
    72 => "10111100011010010100110011001011", 
    73 => "10111100011001110100110100010110", 
    74 => "10111101011110101010111101011110", 
    75 => "10111101000001111111100000110111", 
    76 => "00111110001000000001101100000000", 
    77 => "00111110001100111001000101001111", 
    78 => "00111101110101010111011010001010", 
    79 => "10111101001000011011011110010000", 
    80 => "10111110010101011111110111001110", 
    81 => "10111100110111011000101100101011", 
    82 => "00111101101001110001101000100000", 
    83 => "10111011000110000101100101111110", 
    84 => "10111101111011011111100010110001", 
    85 => "10111101101000000110010011011111", 
    86 => "10111101000011001100001010100001", 
    87 => "10111101101110100101100100111010", 
    88 => "10111101100110111110001000101110", 
    89 => "10111101000101101111111100100000", 
    90 => "10111110001001000101000011110000", 
    91 => "10111101010001100110010100001001", 
    92 => "00111101110000011110000101001100", 
    93 => "10111101110011001011101100100010", 
    94 => "00111110000000100001001101011110", 
    95 => "00111110000000100001111100101010", 
    96 => "10111101001010000110000100101101", 
    97 => "10111101100111100010000001101111", 
    98 => "00111101101010001111010000111101", 
    99 => "10111110000000100100000100111110", 
    100 => "00111110000001101000101010010011", 
    101 => "10111100100111001001000100110000", 
    102 => "10111101111001110001111011110011", 
    103 => "00111011111001110011011000011010", 
    104 => "10111100100100011011100101100110", 
    105 => "00111110010010010011010010101101", 
    106 => "00111101000101110100011100001111", 
    107 => "00111101100111001111001011101010", 
    108 => "10111011010001111010101001111001", 
    109 => "00111100100011110010001111110101", 
    110 => "10111100110001001110010000000000", 
    111 => "10111101111001100110000010100010", 
    112 => "00111110010101100111100111001100", 
    113 => "10111101111100000111011101000111", 
    114 => "10111101000101110101101000111111", 
    115 => "00111110010110011111011000100011", 
    116 => "10111101100010100011101110001101", 
    117 => "10111101000101010101000011001010", 
    118 => "00111101110011100000010000111010", 
    119 => "00111101100010110000101000010010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_5 is
    component inference_conv2d_f3_4_0_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_5_rom_U :  component inference_conv2d_f3_4_0_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


