-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111101101110101011001000", 
    1 => "10111101010010010110111000001000", 
    2 => "00111101111010001110101000111010", 
    3 => "00111110000100000111111000010111", 
    4 => "00111101101010111111110011000011", 
    5 => "00111011100001000110001001100101", 
    6 => "00111011100000111011100010000111", 
    7 => "00111101100001100100110111000010", 
    8 => "10111101000101110011100101101101", 
    9 => "00111101111101000011101001100100", 
    10 => "10111110001001100110001101000001", 
    11 => "10111101010111100100110001101100", 
    12 => "00111100101101110000101010001110", 
    13 => "10111101000010001010111011111011", 
    14 => "10111101000101000110011011110101", 
    15 => "00111110000010100101011000010101", 
    16 => "00111101100001110011000110011101", 
    17 => "00111101100111001111100001011110", 
    18 => "10111101100011100101101000000000", 
    19 => "00111101110000010001011010001110", 
    20 => "10111101100001100010101010101111", 
    21 => "00111101000110100001110000100110", 
    22 => "00111101000101001100000100001000", 
    23 => "10111101101100110011011010101001", 
    24 => "10111101111100100100010000100000", 
    25 => "00111101101011101101100010101011", 
    26 => "10111101111011101010001110011100", 
    27 => "00111110000001111001111111101101", 
    28 => "00111101111100101001010111101010", 
    29 => "10111101101000000000110010110000", 
    30 => "00111101010010101001110010100111", 
    31 => "00111100011000101100100111111010", 
    32 => "10111101111011100101101111001000", 
    33 => "00111110001010110001001110011101", 
    34 => "00111110000001101010110111110111", 
    35 => "10111100001001001111100101001001", 
    36 => "00111110001000111000100000100010", 
    37 => "00111101000110010011000111100101", 
    38 => "10111100111011011001010111010000", 
    39 => "00111100000001100010000011100001", 
    40 => "10111101010000000110000110111010", 
    41 => "10111101000101110001111100110110", 
    42 => "10111100001001101011001101011110", 
    43 => "00111110010001010100101011000011", 
    44 => "00111100111110100001000001100111", 
    45 => "00111100101001000001101010010001", 
    46 => "00111101111000111100100111101111", 
    47 => "10111100111111010101001101001000", 
    48 => "10111100000100100111101011100010", 
    49 => "00111101101001011110010000111000", 
    50 => "10111101011110011110011001011011", 
    51 => "10111101100111110100101000101101", 
    52 => "10111110000011111000000001010110", 
    53 => "10111110010111011100010010000111", 
    54 => "00111110010000101111001010110110", 
    55 => "10111110000110110001110110010011", 
    56 => "10111001101111100011100111110011", 
    57 => "10111101111000000010011001000110", 
    58 => "10111110000000100100000010111000", 
    59 => "00111101011001011111100000010111", 
    60 => "00111100011001011111100111000100", 
    61 => "00111110000000100001011100001001", 
    62 => "00111010101010010101111100001001", 
    63 => "10111110001000110000101000001011", 
    64 => "00111100011101111100101101111110", 
    65 => "10111101101100100001110100101100", 
    66 => "10111101000011100110101001000001", 
    67 => "00111101001001010100110001010101", 
    68 => "00111110000111000010111111000111", 
    69 => "00111101100100110011000010010100", 
    70 => "00111101111011010101001100000101", 
    71 => "10111110001111110010111100010010", 
    72 => "10111011001110101100100110010101", 
    73 => "00111110001010111111000011011100", 
    74 => "00111101101010100100010101101001", 
    75 => "00111110000111101010001011010011", 
    76 => "10111101000010010010110001111111", 
    77 => "10111100111011101110110110111111", 
    78 => "00111110000111101101101010101001", 
    79 => "10111101000000010100110010011100", 
    80 => "00111110000001110001010011111101", 
    81 => "10111101011110100010011010111101", 
    82 => "10111101010001101101011100011111", 
    83 => "00111101111010010111011101000010", 
    84 => "00111101100011101010111001001110", 
    85 => "10111001000001101011110110110000", 
    86 => "00111100000000001001110010001000", 
    87 => "00111101111101011111101110110101", 
    88 => "00111101100110110000011000100011", 
    89 => "10111110000010100011101101011000", 
    90 => "00111100101011000111011011101100", 
    91 => "00111110000111100010001111110010", 
    92 => "10111101100111110111010100011110", 
    93 => "00111110001010011000010110101101", 
    94 => "00111101000011011000111011100100", 
    95 => "10111101101010100000010001001011", 
    96 => "00111101011110011000001100001110", 
    97 => "10111101100010001010001101100101", 
    98 => "00111101010111101111111010010011", 
    99 => "10111110010011000111000010000110", 
    100 => "00111101001001111110010110101000", 
    101 => "00111101001111011000000010010100", 
    102 => "10111110010000000100000001111101", 
    103 => "10111100000100010110100010101000", 
    104 => "00111101010011000110110111001101", 
    105 => "00111101111101110100111101110010", 
    106 => "00111101100100011001010011101000", 
    107 => "00111100001111001101101110111110", 
    108 => "10111101110000100010010000010111", 
    109 => "00111101010111010111010010100000", 
    110 => "10111110000110111110000100100010", 
    111 => "10111101111010001010001111111001", 
    112 => "10111101000101000000010001111111", 
    113 => "10111011001100111001111010101000", 
    114 => "00111101000100011001010100011110", 
    115 => "00111101110110111100110010101111", 
    116 => "00111110000001001000000001100011", 
    117 => "00111011101100011011001111000010", 
    118 => "10111100110011001000110101110111", 
    119 => "00111100100101011001110011101011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_8 is
    component inference_conv2d_f3_2_3_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_8_rom_U :  component inference_conv2d_f3_2_3_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


