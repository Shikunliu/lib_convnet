-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000011111001000100011101", 
    1 => "10111101010000110101111110000001", 
    2 => "10111101110010000010001011110010", 
    3 => "10111101100001100101110110110010", 
    4 => "10111110000110011111100001111111", 
    5 => "10111110000000000011000011000010", 
    6 => "00111011001100000100100010001000", 
    7 => "00111101111001100110111101010000", 
    8 => "00111101100000010000000000111000", 
    9 => "10111100110011111001100000100011", 
    10 => "10111110000111000000100011111010", 
    11 => "00111001101111000101001101000111", 
    12 => "10111110001110100100111111001010", 
    13 => "10111110000101111111101101101010", 
    14 => "10111101011010101010110011001100", 
    15 => "00111101101001101001111111011101", 
    16 => "10111101100100010111010001100111", 
    17 => "10111011100010100111011000111011", 
    18 => "10111101110001000111001111011011", 
    19 => "00111110000001100001010011100000", 
    20 => "00111101101100000010010111000000", 
    21 => "00111110011001110010100000100000", 
    22 => "10111110000111111001001110111100", 
    23 => "10111101100011101100011011001010", 
    24 => "00111101010101111110011101100010", 
    25 => "00111101011111101110000110100010", 
    26 => "10111110000000001110101000011000", 
    27 => "00111101100010011001011011101101", 
    28 => "00111101101110111001010010110001", 
    29 => "00111101001010010010101001001011", 
    30 => "00111100010001000011011111010011", 
    31 => "00111101000010001000101011101001", 
    32 => "10111101110111000100011011011000", 
    33 => "10111101110111110101001110000010", 
    34 => "00111110011001101100000010010100", 
    35 => "00111101110100000000000111010110", 
    36 => "00111110010101010001000000001010", 
    37 => "00111100010110000010011000110010", 
    38 => "10111110001110100001101000001101", 
    39 => "10111011000101000010101111110001", 
    40 => "00111100010000010001110010010101", 
    41 => "00111110001111101001100100100000", 
    42 => "10111101110110101110000101001000", 
    43 => "10111101001001111000001100110001", 
    44 => "10111101010111010110001000010001", 
    45 => "00111101111011011001010000001000", 
    46 => "00111100100111010000100100100101", 
    47 => "10111110000000001101010010011001", 
    48 => "00111110001010100010000001011000", 
    49 => "00111101011000001100111011000111", 
    50 => "00111101001001100011011001111011", 
    51 => "10111100101110110100001011001100", 
    52 => "10111101100000001100111100001011", 
    53 => "10111101001000010101100110000001", 
    54 => "00111101011001001110001000011101", 
    55 => "00111011001010100001011000111111", 
    56 => "10111110010101101001100110000101", 
    57 => "00111101111101100101100010000010", 
    58 => "10111100111000101011000100000101", 
    59 => "00111101101000101101110110001000", 
    60 => "10111110001010111110001001110001", 
    61 => "00111101100001001011101110100001", 
    62 => "00111101101100111100000111001110", 
    63 => "10111100111101101001001100111010", 
    64 => "10111110010111010000110000111101", 
    65 => "10111101100000111001111011111110", 
    66 => "10111101100110100000011000100001", 
    67 => "00111101100011110110001000110000", 
    68 => "10111101101001000100101010110011", 
    69 => "00111101100000111011001010011010", 
    70 => "00111110001100100001100010011100", 
    71 => "00111110000011101000000000111001", 
    72 => "00111101111100000001111100110010", 
    73 => "00111101100010111100101000010000", 
    74 => "10111101101010000011111010000101", 
    75 => "00111101100010011011100111011000", 
    76 => "10111100101101010100001110101111", 
    77 => "10111101101010001000000100001110", 
    78 => "10111110010110010001111011101011", 
    79 => "00111101001011101100000000000111", 
    80 => "10111110001110111011101001010110", 
    81 => "10111100000010100111100001011111", 
    82 => "10111100101010100001001010001110", 
    83 => "10111110001101011000111010101000", 
    84 => "00111110001000000011011011001010", 
    85 => "00111110001011011010111010000010", 
    86 => "10111110001100010100111000111100", 
    87 => "10111101011101101011010001110111", 
    88 => "00111100000011111010000011011101", 
    89 => "10111110001011011010110001101001", 
    90 => "00111011000000001101011110000001", 
    91 => "00111010001000100010100010101100", 
    92 => "00111110000110100101000010010100", 
    93 => "10111101110000100101001111011010", 
    94 => "00111101011111011110011111111000", 
    95 => "00111100011101101100100100100000", 
    96 => "00111100000000010100101001111000", 
    97 => "00111101010011111001000001100001", 
    98 => "00111100100101101100101001111101", 
    99 => "10111101101100010011101101011100", 
    100 => "10111101101100010010110010010011", 
    101 => "10111101111011100100101001111011", 
    102 => "00111101111100111101011001000001", 
    103 => "10111110000111110000001111010001", 
    104 => "00111101110000001001011111111110", 
    105 => "10111011100011010100000100000110", 
    106 => "00111101110001111001110110101011", 
    107 => "10111110000010011011000110111000", 
    108 => "10111101100110111011111101011110", 
    109 => "00111011101100011000110111010111", 
    110 => "10111101110001101110101110111010", 
    111 => "10111101111000000010010000101101", 
    112 => "00111110011110001101000101010010", 
    113 => "10111011010000011011111011111101", 
    114 => "10111101100010111011111001010010", 
    115 => "00111101110011111010110101101101", 
    116 => "10111110000010010011100010011011", 
    117 => "00111101101010001001101001111011", 
    118 => "00111101000001110100100010010100", 
    119 => "10111100000101010000101100001010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_9 is
    component inference_conv2d_f3_3_3_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_9_rom_U :  component inference_conv2d_f3_3_3_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


