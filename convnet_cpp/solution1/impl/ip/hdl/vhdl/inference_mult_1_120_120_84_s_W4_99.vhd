-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_99_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_99_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100100100010110100001110", 
    1 => "10111101101000001111011010010011", 
    2 => "10111101000010110001010011010001", 
    3 => "00111101000010010001111001010111", 
    4 => "10111110000011001110101010101111", 
    5 => "00111101111100000001000100001010", 
    6 => "10111110001110001101100011101101", 
    7 => "00111110001001111010101010101100", 
    8 => "10111110000011010001111010010111", 
    9 => "10111101010000001101111001100111", 
    10 => "10111101110110101111110110010111", 
    11 => "10111110011001101100011011011110", 
    12 => "10111101001011010001100111011111", 
    13 => "00111101010011100111110111011101", 
    14 => "10111101111111111000110110110101", 
    15 => "00111100010010010101111101011010", 
    16 => "10111101111101111100100010001110", 
    17 => "10111101000010110001100011101000", 
    18 => "10111101010111100101110110111001", 
    19 => "10111101000000010011010111011011", 
    20 => "00111100011101011110100010111010", 
    21 => "10111100100001101100001001011100", 
    22 => "00111011101011111010010011011110", 
    23 => "10111101111010110100101101110011", 
    24 => "00111011100110001000000010010101", 
    25 => "10111101000000101101101110010111", 
    26 => "00111101111010100111111011111010", 
    27 => "10111101001000110100000100110011", 
    28 => "10111110001010110000110010001001", 
    29 => "00111101111010000001010001010001", 
    30 => "00111101101100001000000000100011", 
    31 => "00111101110000111110010000011000", 
    32 => "10111101010000111110110111100110", 
    33 => "10111101111001011101111100100010", 
    34 => "10111110000000000101101000101101", 
    35 => "00111101001001001110000001010100", 
    36 => "10111101011010101001100000001001", 
    37 => "00111101100000001001000111000001", 
    38 => "00111101101110111101101100000000", 
    39 => "10111100010011001001100011001010", 
    40 => "00111110000110111001010111100110", 
    41 => "00111101010001010010110000100100", 
    42 => "10111110010000010010111110010000", 
    43 => "10111110010101010001001111111001", 
    44 => "00111101101101100010011000011111", 
    45 => "10111100101010011010111001001111", 
    46 => "10111101101000101110111100011000", 
    47 => "00111100110110011011000001110101", 
    48 => "10111101101110010101010101110001", 
    49 => "00111101101010110110101101101110", 
    50 => "00111101001010111010101101100101", 
    51 => "00111011110011111011111111000110", 
    52 => "00111011001101111101110110100111", 
    53 => "10111101011110110100001110111110", 
    54 => "10111101010111010100110101101000", 
    55 => "10111100101101100010101101101011", 
    56 => "10111101010001100011101110011110", 
    57 => "00111110000000110110010000111001", 
    58 => "00111100001101111001101000110110", 
    59 => "00111110000110100111111001110100", 
    60 => "00111101000100000110000100001100", 
    61 => "10111101101101010010101001110111", 
    62 => "00111101000001010100000111110100", 
    63 => "10111100110101101010110011101011", 
    64 => "00111101101100011001101110010001", 
    65 => "10111110000110010010100100100100", 
    66 => "10111101101011011101100100100001", 
    67 => "10111101101001100010011001100010", 
    68 => "00111101110111001100110010001010", 
    69 => "00111101110010111001011111010110", 
    70 => "10111101011101111011110001100101", 
    71 => "00111110001000011111111000100010", 
    72 => "10111101010100100001111111011000", 
    73 => "00111110000010100100111000111000", 
    74 => "00111101000010100001100000000001", 
    75 => "00111110001111111110111110111111", 
    76 => "10111101100100100010001100110011", 
    77 => "10111101011010100000000100001011", 
    78 => "00111101010111110101000100011001", 
    79 => "00111101110010110011101001000000", 
    80 => "10111101001000011011101101010111", 
    81 => "10111100110101101101100000011110", 
    82 => "00111011100100010110101000001011", 
    83 => "10111101100111100011001011001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_99 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_99 is
    component inference_mult_1_120_120_84_s_W4_99_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_99_rom_U :  component inference_mult_1_120_120_84_s_W4_99_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


