-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101010100100011100110001", 
    1 => "00111110001101000010100111100001", 
    2 => "10111101101111110011101000100010", 
    3 => "00111101000100110010100010011100", 
    4 => "00111101000100010101010100001101", 
    5 => "10111101100000111101010001011110", 
    6 => "00111101100101011000011110010100", 
    7 => "10111110000001110011101000110110", 
    8 => "00111101100111111011011101110000", 
    9 => "10111101101001111011011001101011", 
    10 => "10111110010110111110101100011000", 
    11 => "00111101101110010100100001111110", 
    12 => "00111101100111010101001101111101", 
    13 => "00111110000111111001101110011001", 
    14 => "10111101100111111111010000110100", 
    15 => "10111101111001100111000011100011", 
    16 => "00111101110011000111111011110001", 
    17 => "10111100001011100111001011011010", 
    18 => "00111110000101111000100000010010", 
    19 => "00111110010000001001110000111101", 
    20 => "10111101001011000100101100110010", 
    21 => "10111101001100010000110010011000", 
    22 => "00111101001111110001101111101111", 
    23 => "10111101101110010100011110001101", 
    24 => "00111101100011100001010111011000", 
    25 => "00111101111000111111010011101101", 
    26 => "00111110001001001110010101001111", 
    27 => "00111011111100010101000011100110", 
    28 => "10111101100111001110000010000011", 
    29 => "10111011110111111110011001011010", 
    30 => "10111100110101111011111001100011", 
    31 => "10111100110101001110011110111001", 
    32 => "00111110001111010001001010001000", 
    33 => "10111100100110010011010011110000", 
    34 => "10111101001001001101100001110111", 
    35 => "00111101011111100011111001011111", 
    36 => "00111100011011110110010010100111", 
    37 => "10111101100001111010111111011101", 
    38 => "10111101101000010111001001000001", 
    39 => "00111110000101111000001101011010", 
    40 => "00111101110101101011010101001110", 
    41 => "10111101000010000101101001011100", 
    42 => "00111100010011010100100010001000", 
    43 => "00111101001101110010110110010100", 
    44 => "10111100100100011101010101001010", 
    45 => "10111100100001111001100000001111", 
    46 => "00111110001000101110101000010000", 
    47 => "10111101111100001100001101001100", 
    48 => "10111101110001111110110001111000", 
    49 => "00111101000011110101010101011000", 
    50 => "00111101100010111001100001101010", 
    51 => "00111100001011111011101001101101", 
    52 => "10111101111101111111100101010001", 
    53 => "00111110001101111001010001100100", 
    54 => "00111101011101001010101010010111", 
    55 => "00111110001110010011100110101000", 
    56 => "00111110000110010000101011111110", 
    57 => "10111101101100110011110010001000", 
    58 => "00111101010010100010001000010010", 
    59 => "00111101110010111110001111101001", 
    60 => "10111101110100000001000100001010", 
    61 => "00111100111011001001001111011101", 
    62 => "00111100110000101000101001010100", 
    63 => "00111101010100000111000111010011", 
    64 => "00111100100000110000100001011110", 
    65 => "10111110000111111011010011000100", 
    66 => "00111101100111110111001010011001", 
    67 => "10111101101010001010001000010101", 
    68 => "10111101000011101111011001110011", 
    69 => "00111110000000101111100110000111", 
    70 => "00111101100011010110100111010011", 
    71 => "00111101101011111111000011001100", 
    72 => "10111101010101101011010010010010", 
    73 => "00111101110000110111110000101110", 
    74 => "00111101100001010011010000001111", 
    75 => "10111101100101011010100110001101", 
    76 => "10111110000100110011101001000111", 
    77 => "00111101100010010010100011000110", 
    78 => "10111101011101111000101110001000", 
    79 => "10111101111001101111100010101101", 
    80 => "00111110000010111000101101101001", 
    81 => "00111101000100010000111101101101", 
    82 => "00111101101000011111110100100011", 
    83 => "10111101100110011101011011010110", 
    84 => "00111110000110111000011010110001", 
    85 => "00111101001111100111110111101010", 
    86 => "00111110001011110110011100101100", 
    87 => "10111101101001011111000111011010", 
    88 => "00111101110011001010100101001110", 
    89 => "00111110000100100110111101100001", 
    90 => "10111101000010111011110001111100", 
    91 => "10111100111000001011011111010001", 
    92 => "00111110001000111001100011101001", 
    93 => "10111100000100011010110101000111", 
    94 => "10111100010011101000101100010011", 
    95 => "00111101100110101010110110001000", 
    96 => "00111100100101000100110010111110", 
    97 => "10111100101000110111111111001100", 
    98 => "00111110001100000011110001001011", 
    99 => "10111101000100011110000111100000", 
    100 => "00111101101011000111000111100011", 
    101 => "10111110001101001011101100011011", 
    102 => "00111101100110110111110100110100", 
    103 => "00111100100111100010100000111111", 
    104 => "10111100110000101111010000111100", 
    105 => "00111101001100011001010110100100", 
    106 => "10111110000111100110101101000000", 
    107 => "00111110001010011000011000110100", 
    108 => "10111101100011011001101001010010", 
    109 => "00111110000001111001101011110010", 
    110 => "10111101010010111010010110111011", 
    111 => "10111101010010101100111101001100", 
    112 => "00111101000100101111101100110101", 
    113 => "10111101110000111101100001001100", 
    114 => "00111010010100101111101101101110", 
    115 => "00111110000001001010100001111110", 
    116 => "10111101011000001111110100100000", 
    117 => "00111011110010001000111000100100", 
    118 => "10111100111111110110101111110001", 
    119 => "10111100100000001000010011110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_9 is
    component inference_conv2d_f3_4_0_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_9_rom_U :  component inference_conv2d_f3_4_0_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


