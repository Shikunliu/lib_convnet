-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001000010111011011100", 
    1 => "00111101101000010110100001100101", 
    2 => "00111011110111000111001110001001", 
    3 => "10111100000101101111010001100011", 
    4 => "10111101010100001010010100011001", 
    5 => "00111101010110101111000100111000", 
    6 => "10111110000000111111110010000111", 
    7 => "00111101101110110110101001100010", 
    8 => "10111101110100100111011110000001", 
    9 => "00111100011100110100110101101010", 
    10 => "10111110000010110011001101010101", 
    11 => "10111101101001110010011010011011", 
    12 => "10111101111000001100011000101110", 
    13 => "10111110000011011111001000100100", 
    14 => "10111011011000100000000010010001", 
    15 => "10111100110010110010111010011101", 
    16 => "00111110010001011010010010101101", 
    17 => "10111100100111001000101100011011", 
    18 => "10111011101010011100101110010110", 
    19 => "00111101011000001000001100010010", 
    20 => "00111101011101111000110010010100", 
    21 => "00111101100110011101010000110111", 
    22 => "10111101100100011001001010110101", 
    23 => "00111100010001010101101000010010", 
    24 => "10111101000000000001101100101000", 
    25 => "00111010110001000001010101101110", 
    26 => "10111110000101011010001111100100", 
    27 => "10111101010111010100111110110111", 
    28 => "00111100111000010010001100110001", 
    29 => "00111110000101110100001001010111", 
    30 => "00111101010111001000010100000110", 
    31 => "10111100010010100010001110100101", 
    32 => "10111101101111100010101101110010", 
    33 => "00111101100010000100100000000011", 
    34 => "10111101101000101000100001110000", 
    35 => "10111100011010101011101111001011", 
    36 => "00111101010000000101010010000100", 
    37 => "00111101011000101110111001000010", 
    38 => "10111100100110000111110111011011", 
    39 => "00111100000101100011001111110100", 
    40 => "00111110001011101010111100100101", 
    41 => "00111110011110011101101110101001", 
    42 => "10111101111000001010111000010000", 
    43 => "10111110010010100100111001111011", 
    44 => "00111101011100110011011000001000", 
    45 => "00111100101111110110001011101100", 
    46 => "10111110000000101101010001001110", 
    47 => "00111101100111001010100101101001", 
    48 => "10111100010011111010010111000101", 
    49 => "00111100111011111101101110010000", 
    50 => "10111101101111110111101110010001", 
    51 => "00111110000111100100000101001110", 
    52 => "00111100101101010101011111010001", 
    53 => "00111110001100001011011111000011", 
    54 => "10111101110011101111101000011110", 
    55 => "10111101101011110101111000011010", 
    56 => "00111101011001101111100110000100", 
    57 => "00111101110001100110001011100011", 
    58 => "00111100001001110001110000111001", 
    59 => "10111110000100110001000010011001", 
    60 => "00111100010100100111110010100101", 
    61 => "10111101000000100101111000101111", 
    62 => "00111101000001110111101100111001", 
    63 => "00111101000010011100100011110001", 
    64 => "00111101101100010010000000001011", 
    65 => "00111101101110001001000010000101", 
    66 => "00111101101001000110100111110010", 
    67 => "00111101110100000010000000111110", 
    68 => "10111110001100010111001101110101", 
    69 => "00111101010011111011100111001100", 
    70 => "10111101101110101110011011010110", 
    71 => "10111100011110010010010010101111", 
    72 => "10111101100011111100011110001001", 
    73 => "10111110001110110011101110111000", 
    74 => "00111100110110100001110010101100", 
    75 => "00111110010110010110111111101011", 
    76 => "00111100010111000011110010101100", 
    77 => "00111100110111000011110100011000", 
    78 => "00111110001100111111001100010111", 
    79 => "10111100110110100000111110101011", 
    80 => "10111101000110001011000000010101", 
    81 => "00111110000001000100111110100000", 
    82 => "10111101101010001010000011010011", 
    83 => "10111101011011100111000010100110", 
    84 => "00111101001100001000110000100100", 
    85 => "10111100011110100100000100001111", 
    86 => "00111101101011000001011010001111", 
    87 => "10111101100101101001011111100101", 
    88 => "10111101101011001011110100010010", 
    89 => "00111101101011110000011011011100", 
    90 => "00111100100010011100011000011101", 
    91 => "10111101100000001010000001111100", 
    92 => "00110110011001001010000001100001", 
    93 => "10111110001000001000111000010101", 
    94 => "10111101010110101101011011100110", 
    95 => "10111101010000101100110001111110", 
    96 => "00111011011111010000010001001101", 
    97 => "10111110000000010011110110111000", 
    98 => "10111101110101000110101110101101", 
    99 => "10111101100001101010100010000011", 
    100 => "00111110000010010101111110101011", 
    101 => "10111100100001110001100000100010", 
    102 => "00111101010110110011100111001000", 
    103 => "00111110000100010011010110011000", 
    104 => "00111101100000110111101100101111", 
    105 => "00111101101000101000101000010001", 
    106 => "10111101000010001000001001010000", 
    107 => "00111100100011001110000101011010", 
    108 => "00111101011111110000111001101000", 
    109 => "10111101010001000011000111011001", 
    110 => "00111101101011001111100110000110", 
    111 => "10111101110101010011010100000001", 
    112 => "00111101100110010100110101000011", 
    113 => "10111100111111100110011110101111", 
    114 => "10111101111111010101011101111001", 
    115 => "00111101100010011101100010111001", 
    116 => "10111010011110101000110001110000", 
    117 => "00111100010111100111110011111000", 
    118 => "10111101001101101011100000001000", 
    119 => "00111101111111110110101110100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_9 is
    component inference_conv2d_f3_3_2_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_9_rom_U :  component inference_conv2d_f3_3_2_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


