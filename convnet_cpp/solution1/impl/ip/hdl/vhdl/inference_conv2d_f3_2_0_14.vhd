-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010000010111010011000101", 
    1 => "10111101000001100001000011110001", 
    2 => "00111011101100010111101001100001", 
    3 => "10111101010011111111110101101110", 
    4 => "10111101110101011100100111100110", 
    5 => "00111101101010101101101001000001", 
    6 => "10111101100111110011100101011001", 
    7 => "00111110001100001101011100111000", 
    8 => "10111101100001100011011100101001", 
    9 => "10111101101010100110000011100010", 
    10 => "00111011001100011010001011010000", 
    11 => "00111100101010011010101000011101", 
    12 => "10111110001010101000010000111000", 
    13 => "00111000001101000111011010110101", 
    14 => "10111101110111000001001001101010", 
    15 => "10111101111001110111100100100000", 
    16 => "10111110000101010101010110000010", 
    17 => "10111101010100101111100011100110", 
    18 => "10111110000000111101000000111001", 
    19 => "00111101001101001000001001101110", 
    20 => "00111101000000001001111101100010", 
    21 => "00111100101101111101101011001101", 
    22 => "00111100110000011110110001101001", 
    23 => "10111101101110001010000110011101", 
    24 => "00111101101111100000000101011000", 
    25 => "10111101011000100000000011110111", 
    26 => "00111101000100101010000101110011", 
    27 => "10111100111110010101110001000010", 
    28 => "10111100110111111111001001000011", 
    29 => "10111101011001101011101101010110", 
    30 => "00111101101000100001000001000110", 
    31 => "10111101011110100111100111111111", 
    32 => "10111110001011001111111011011111", 
    33 => "10111101111111011101100101111111", 
    34 => "10111101100010101010010101011011", 
    35 => "00111101110010110101010101000001", 
    36 => "10111100101001000000010011000010", 
    37 => "00111100111101000110110100100101", 
    38 => "10111101010011011110101101000101", 
    39 => "00111101001000110101100100110110", 
    40 => "00111101110001101000111000100100", 
    41 => "10111101011111100100011000111100", 
    42 => "10111101110001111010110101110011", 
    43 => "10111101111110011011000010101011", 
    44 => "00111101111001111111111001001100", 
    45 => "10111100111100011110011011001101", 
    46 => "10111101011101100010100001111011", 
    47 => "10111101111001101100000110100000", 
    48 => "00111100101111111000101011111011", 
    49 => "10111100001010010100111100011001", 
    50 => "10111101101000110001010101101100", 
    51 => "00111101000110010011011111111010", 
    52 => "10111101000000011101000010000101", 
    53 => "00111110000111110111111100000110", 
    54 => "00111101010100011010000010001100", 
    55 => "00111101100001001011000010011111", 
    56 => "00111101100000110111010101000011", 
    57 => "00111101110000110110100011100011", 
    58 => "00111011110001011010000110100000", 
    59 => "10111101000110100000000011100010", 
    60 => "00111100101101000011111000101011", 
    61 => "10111100100111011001000011010101", 
    62 => "10111110000000110000110111111010", 
    63 => "00111110000101110101001111100111", 
    64 => "00111101101010010000001111011101", 
    65 => "00111101100011100010100101110100", 
    66 => "10111100011110000000001011011011", 
    67 => "00111101100000101011001000011111", 
    68 => "10111101101111111111110110010111", 
    69 => "00111110000110101001011011010101", 
    70 => "10111101110110010000010000101110", 
    71 => "10111101001100000100111000010001", 
    72 => "00111101011111100111010101101100", 
    73 => "00111101001000011101010000010110", 
    74 => "10111001100000010101011001110001", 
    75 => "10111101111101110001000000000010", 
    76 => "10111100100110000011000001111000", 
    77 => "10111110010000100001011001000000", 
    78 => "10111101001011011110110010000111", 
    79 => "10111101010010111011010011101111", 
    80 => "10111101111111101101100001001101", 
    81 => "10111100100101000100010000100101", 
    82 => "10111110011010110101001000000000", 
    83 => "10111110000000000010101000110101", 
    84 => "00111101100011100100111001001111", 
    85 => "00111110000111110010001100000011", 
    86 => "10111110000010101111010000101000", 
    87 => "00111101111001100110011011101101", 
    88 => "10111101000110010010000011001110", 
    89 => "10111101010001010111001110101000", 
    90 => "10111101010100100010010011100001", 
    91 => "10111110001000110001100000110011", 
    92 => "00111101000011000111100000010011", 
    93 => "10111101100000000111001011010010", 
    94 => "00111110001001011001010100110110", 
    95 => "10111110000001110001001110101101", 
    96 => "10111101101001010111001000111101", 
    97 => "00111101111010010010001101100000", 
    98 => "00111110000100000000100111110110", 
    99 => "10111101100101110011011111000000", 
    100 => "00111110001000110010110001100010", 
    101 => "00111110000011110001001000111100", 
    102 => "00111011000101011101110000100000", 
    103 => "10111100011111000101000001001000", 
    104 => "10111101110111111110001100101010", 
    105 => "10111101000001110110000101101110", 
    106 => "00111101100101101101001100111110", 
    107 => "10111100000011010000000001101111", 
    108 => "10111101101101110001001010101110", 
    109 => "00111101110011001011111110100100", 
    110 => "00111101111001010101001110101100", 
    111 => "00111100010001110111110100000010", 
    112 => "10111110000111100100000100001011", 
    113 => "00111011100110111100100001001000", 
    114 => "10111101100000111010100000011110", 
    115 => "10111101111011100000111111000011", 
    116 => "10111101001111101111011111111000", 
    117 => "00111101010011111000100001001110", 
    118 => "10111110000100011101011100010011", 
    119 => "10111101101010011001001010101110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_14 is
    component inference_conv2d_f3_2_0_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_14_rom_U :  component inference_conv2d_f3_2_0_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


