-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_64_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_64_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001001110011101101000", 
    1 => "00111110000001111111101000011010", 
    2 => "00111100010100001101111000111111", 
    3 => "00111101011100110010010100100110", 
    4 => "10111101110000101010110111010010", 
    5 => "10111100100110000010010000011001", 
    6 => "00111010111011011100000110111010", 
    7 => "10111101000101000011111001000110", 
    8 => "00111101111111010110010000001111", 
    9 => "10111101101100011000010110100111", 
    10 => "00111101101010100011111110110010", 
    11 => "10111101100011101011101011010110", 
    12 => "10111101110101100101010111100011", 
    13 => "00111110000101100110101010011000", 
    14 => "00111101101111101101001000011101", 
    15 => "10111101100000000111100001100000", 
    16 => "00111101110110010110010000011111", 
    17 => "00111101000101101011001010010100", 
    18 => "00111110000011101110011100111110", 
    19 => "00111110001000111111111101101001", 
    20 => "00111101000011101001111011111111", 
    21 => "00111110001000110000111110001100", 
    22 => "10111110011010000011100101000111", 
    23 => "00111101100100100000110101110001", 
    24 => "10111101001100001111111110110010", 
    25 => "10111101011101110011011110001010", 
    26 => "00111101000101010101100010001101", 
    27 => "00111101001001011001101110011011", 
    28 => "10111101010011000000100100100011", 
    29 => "10111101000000000011010010111110", 
    30 => "10111101000000010000011010101011", 
    31 => "00111101101010111001001010001011", 
    32 => "00111011110011101000111000011000", 
    33 => "10111110000000101101000110101111", 
    34 => "00111101111110001111111101110110", 
    35 => "00111100100011111011001011111011", 
    36 => "00111101100100011101101000111000", 
    37 => "10111101110011000111101001000111", 
    38 => "10111110011001110101000001111111", 
    39 => "00111100011100100001010000011010", 
    40 => "10111100101010101001001110111101", 
    41 => "00111101101101100001100011110110", 
    42 => "00111101011001111101100111101001", 
    43 => "10111101110100010010101100011011", 
    44 => "10111101101000100010101110010111", 
    45 => "00111101010011001001100111010111", 
    46 => "00111110001110101001110111101001", 
    47 => "10111011010010000001001100101010", 
    48 => "00111101100001101111100100011001", 
    49 => "10111101110010011001100000100010", 
    50 => "10111100111010010010110111110111", 
    51 => "10111101000110111001000000010100", 
    52 => "00111101100000100100000101100110", 
    53 => "10111101111101100010010100100000", 
    54 => "00111101101101100110110100001111", 
    55 => "00111101100000011110100110111101", 
    56 => "10111101111101001101110101110010", 
    57 => "10111101101111000011010111101001", 
    58 => "00111101110110011001110000111001", 
    59 => "00111110000010001100111010110011", 
    60 => "00111101100111000011100101000100", 
    61 => "10111100001000111101111101101110", 
    62 => "10111011101100000111000001110110", 
    63 => "10111101111101000110011001101111", 
    64 => "10111101111000010000111000000010", 
    65 => "10111101100100010010011111101000", 
    66 => "00111101011011101111111101011100", 
    67 => "10111101011100100000100111010011", 
    68 => "00111101010110110010101011100100", 
    69 => "00111100100001011001010011001010", 
    70 => "10111110000001111001011111001100", 
    71 => "00111100010100001000100110000101", 
    72 => "00111101011001011010001010111100", 
    73 => "10111110001010010011110000000100", 
    74 => "10111110000001101110111001110100", 
    75 => "10111100100110100001010011101010", 
    76 => "10111110000111001010000011000011", 
    77 => "00111100101101111011011010000101", 
    78 => "10111100010100110101011001010100", 
    79 => "10111101000010000111010011111111", 
    80 => "00111100100110111000011010100100", 
    81 => "00111101011110011011110101011011", 
    82 => "10111101001001110001110101100000", 
    83 => "00111101000100010010110101101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_64 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_64 is
    component inference_mult_1_120_120_84_s_W4_64_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_64_rom_U :  component inference_mult_1_120_120_84_s_W4_64_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


