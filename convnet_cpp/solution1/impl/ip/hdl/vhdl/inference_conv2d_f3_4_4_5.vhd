-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010010001000111101010000", 
    1 => "10111101110111000100101100001010", 
    2 => "00111101001011100001001110111111", 
    3 => "00111101001111101101111001100010", 
    4 => "10111011010000100100010100110100", 
    5 => "10111101011101101001011100110110", 
    6 => "10111110010000010000011101110100", 
    7 => "10111101100111101001010001101000", 
    8 => "10111100100010111010101110011010", 
    9 => "10111101100001110011001100110000", 
    10 => "10111101011111100111111100010001", 
    11 => "00111100111001110101011010111100", 
    12 => "00111110001100010011001011111000", 
    13 => "10111101101110011110001101010001", 
    14 => "00111110000011000101000101010101", 
    15 => "10111101100000001011000000101001", 
    16 => "00111110000100010000110001101111", 
    17 => "00111100101011010100111000010111", 
    18 => "00111101101010110110111110111011", 
    19 => "00111101001011111011010101001010", 
    20 => "00111101110101010001010001111111", 
    21 => "00111101001111011111010001010111", 
    22 => "00111101100110001110010011010011", 
    23 => "00111100000011111101101111000000", 
    24 => "10111101110001010000101101100000", 
    25 => "10111101110101001111101101010101", 
    26 => "00111100111001000000001011011111", 
    27 => "00111101101101100011111001001011", 
    28 => "00111101111001111100100101011000", 
    29 => "10111110000011100011000101010001", 
    30 => "10111101010000101111111111000100", 
    31 => "10111110010110110100101101110011", 
    32 => "10111101101000101111110001001111", 
    33 => "10111101100111010000000101001000", 
    34 => "00111100111110101001000011110110", 
    35 => "10111101111000011001010000111010", 
    36 => "00111110001001011100111111101110", 
    37 => "00111101110010000111011000011001", 
    38 => "10111101100001001000110111110111", 
    39 => "10111101100110101100110110111001", 
    40 => "10111101111101110111010000100101", 
    41 => "10111101000100101010001101110001", 
    42 => "00111101111110111101100000111000", 
    43 => "00111101111110000010010011010101", 
    44 => "00111110000010101101001100100000", 
    45 => "10111011110000110001000000001011", 
    46 => "10111101111001001011111001000000", 
    47 => "00111100100010101001000000010001", 
    48 => "10111000111110110000000110001011", 
    49 => "10111101000011000011100100001110", 
    50 => "00111101011101110111010110011101", 
    51 => "00111010000011001001110101110111", 
    52 => "10111101011101101011011101001100", 
    53 => "10111101001111111110010011110010", 
    54 => "10111100101010011101111000100000", 
    55 => "00111100000011000010100110101111", 
    56 => "00111101011111000011100110100010", 
    57 => "10111101101100010100000000101111", 
    58 => "10111110001110011001111101011110", 
    59 => "10111100001001110001101010001100", 
    60 => "10111110000001100101111110010110", 
    61 => "10111101010011101011100000001111", 
    62 => "00111110000111110010100110010001", 
    63 => "00111101111010000100101101011110", 
    64 => "10111100010010100111001001111111", 
    65 => "00111101111011110101101000010000", 
    66 => "10111101100010010110100010100010", 
    67 => "10111101001100000100110010110100", 
    68 => "00111101010001110001011000100100", 
    69 => "00111101101011110001101110010001", 
    70 => "10111101011001100100101110101001", 
    71 => "10111101100011100011011110011011", 
    72 => "00111110001101100111000000011001", 
    73 => "10111101000111111001100100100010", 
    74 => "10111101110001010111001000001000", 
    75 => "10111101001010010011000001000101", 
    76 => "00111100100011011101010000110100", 
    77 => "00111010101001001000010111011100", 
    78 => "10111110010110100111000101011000", 
    79 => "00111100001111011001100001111100", 
    80 => "00111100111000011101001001001101", 
    81 => "10111101000010001110111111111110", 
    82 => "10111101011111000100010111001100", 
    83 => "00111100011101101000000101100111", 
    84 => "10111100111100100111101011011100", 
    85 => "00111100011011001111100001010001", 
    86 => "10111101101100010101010000011011", 
    87 => "10111101000000110001001000111001", 
    88 => "10111110000111110110000000011000", 
    89 => "10111101100110011010111111111101", 
    90 => "10111101110111001110001010001111", 
    91 => "10111110000110000100100110001000", 
    92 => "10111101001100100000011101101010", 
    93 => "10111011111100110101100101010100", 
    94 => "10111101110011010100110101000000", 
    95 => "10111110001111101001110011001011", 
    96 => "10111101100010110011111010011010", 
    97 => "10111101101100001100101011110100", 
    98 => "00111101111000101001010010011010", 
    99 => "00111100110111011000011100101111", 
    100 => "00111101010111101011011111100111", 
    101 => "00111110000001010000110001011111", 
    102 => "00111100000100100010101001001111", 
    103 => "10111001101110000101111111110010", 
    104 => "10111101100101001100001010001101", 
    105 => "10111101101111111101110000100100", 
    106 => "00111110001111110100011101110011", 
    107 => "00111101100011001000000010011111", 
    108 => "10111101101100001010001000101010", 
    109 => "00111011100011101010110111011000", 
    110 => "10111110000110101011011000000111", 
    111 => "10111101000010001111000001001111", 
    112 => "10111101111110110101000101111010", 
    113 => "00111101100010111101111001011011", 
    114 => "00111000000110110100101110011101", 
    115 => "00111101010110100010001101100010", 
    116 => "10111100111010100100010001110111", 
    117 => "10111101101101000101100111110100", 
    118 => "00111101100000010010111101101000", 
    119 => "00111101010111110011011011000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_5 is
    component inference_conv2d_f3_4_4_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_5_rom_U :  component inference_conv2d_f3_4_4_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


