-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001101110011001100100010", 
    1 => "00111101001100011010010101111010", 
    2 => "00111101001100110010011100100100", 
    3 => "10111101111011111000011100100111", 
    4 => "10111100111010101011011101100100", 
    5 => "00111101011011111110111110110010", 
    6 => "00111101011111111111011100110001", 
    7 => "10111101110001010001101101011101", 
    8 => "10111101101100001011101011001110", 
    9 => "00111101110011001111010100101100", 
    10 => "00111101110011001000100000111001", 
    11 => "00111100010010101010100111011101", 
    12 => "00111110001000001010000110111110", 
    13 => "10111101110010100110111111000110", 
    14 => "10111101111010010010001011011001", 
    15 => "00111110000101000011101001100100", 
    16 => "10111100001001110111000010000111", 
    17 => "10111101100110001111010011010001", 
    18 => "00111101110000111101010001000011", 
    19 => "00111101110011001011110000010011", 
    20 => "00111110001011010101101010011111", 
    21 => "00111101111101101010111110001010", 
    22 => "00111110010111011011011100101000", 
    23 => "10111101100111011110110110101111", 
    24 => "10111101001011100110110110110111", 
    25 => "00111101101000100001111010110001", 
    26 => "00111101111110111001000011101011", 
    27 => "00111100101111011110000000000000", 
    28 => "00111101110000010000011011000110", 
    29 => "10111101100100100110001110111101", 
    30 => "00111010100001110110101000010111", 
    31 => "10111011111100111101011010010001", 
    32 => "10111100101100111111100011110110", 
    33 => "00111011110100101110111010100101", 
    34 => "10111101010101110100000010101001", 
    35 => "10111011011110010110100100111000", 
    36 => "10111101100100110101111100111101", 
    37 => "10111101001001110111100011101011", 
    38 => "10111100010010001111100010010111", 
    39 => "10111101111100011010010111001010", 
    40 => "00111101010011010001000010001010", 
    41 => "10111101011001000101110111111110", 
    42 => "00111101011001011100011100011111", 
    43 => "00111110010110110000011100000111", 
    44 => "10111100011100111101111010001010", 
    45 => "10111101101100001101001001100110", 
    46 => "00111100101101111101100001111111", 
    47 => "10111101111000010011111000111110", 
    48 => "10111100110100111111001011000110", 
    49 => "00111101010101000110100001010010", 
    50 => "00111101110100110110100110111010", 
    51 => "00111101001110011111011000010110", 
    52 => "10111101100000110011101000111010", 
    53 => "00111100111101101110010100000100", 
    54 => "10111101000011001100110001000111", 
    55 => "00111101100100101010110001110101", 
    56 => "10111101110010100101110010110000", 
    57 => "10111101001111110111101000110100", 
    58 => "10111110001001011011111000011011", 
    59 => "10111101000101011111111101000110", 
    60 => "00111011110100100100011001001001", 
    61 => "10111101111101000101101111110010", 
    62 => "00111101001100000110100011001110", 
    63 => "00111110000000111011011001000110", 
    64 => "10111110001110010100000110000101", 
    65 => "00111100101001000101100111100111", 
    66 => "00111101111010010111101001101000", 
    67 => "10111100100111011000111010000110", 
    68 => "10111101101111010101111111011101", 
    69 => "00111101101110110011111010000000", 
    70 => "00111101011000010001011110001101", 
    71 => "10111101010001011011110000110111", 
    72 => "00111110000110001111100011101000", 
    73 => "10111100101011101001000111100100", 
    74 => "10111101011111110101111000011010", 
    75 => "00111101000000111011011110010101", 
    76 => "10111100100001111010000100010100", 
    77 => "10111101101100101101000100101000", 
    78 => "00111011010110011101100101010000", 
    79 => "00111110001010101011100110110010", 
    80 => "00111101001010011000110100010010", 
    81 => "10111100111101011001001010111111", 
    82 => "10111101100101110100101100011000", 
    83 => "00111110000011100011001100100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_3 is
    component inference_mult_1_120_120_84_s_W4_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_3_rom_U :  component inference_mult_1_120_120_84_s_W4_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


