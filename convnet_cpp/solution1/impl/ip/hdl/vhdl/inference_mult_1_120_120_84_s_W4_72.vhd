-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_72_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_72_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001010110000011101001010", 
    1 => "00111011001000010000100011001111", 
    2 => "10111101100111001000010011010001", 
    3 => "10111101101000111010010011000011", 
    4 => "10111100010010101011000101101010", 
    5 => "10111110001101111000000000110100", 
    6 => "00111101001101100111010010110111", 
    7 => "10111100111001011101101100100110", 
    8 => "00111101111110010000101011111110", 
    9 => "10111101110001001101111011011101", 
    10 => "00111100011000001110001010011001", 
    11 => "10111101010110001111001110000001", 
    12 => "10111101111100110111110100100000", 
    13 => "00111100001001100101011100010111", 
    14 => "10111100110010011001000111100101", 
    15 => "10111100011110101001100110001111", 
    16 => "10111101010000001101010001110001", 
    17 => "00111110000100010011001000101111", 
    18 => "10111110000101110001001100100111", 
    19 => "10111110000101011000001010011001", 
    20 => "00111101100001001111101000101101", 
    21 => "00111101100011100111110111011101", 
    22 => "00111100101100001100111001101010", 
    23 => "10111100110001100110001011110001", 
    24 => "00111101000011000010000001101010", 
    25 => "00111101000100111111010101001011", 
    26 => "10111101000000000001100110110001", 
    27 => "10111001101000011111001011001000", 
    28 => "00111101011011111011101011110100", 
    29 => "00111100011110110000101001100010", 
    30 => "10111101101010100000101100001110", 
    31 => "10111101100111000101101010101010", 
    32 => "10111101101001001000011000011010", 
    33 => "00111101110101111001111000010111", 
    34 => "10111101101111010101001000111011", 
    35 => "00111100001000101111101100000010", 
    36 => "00111101011100111011110100110001", 
    37 => "10111101100111111110100000011000", 
    38 => "10111101010100000110111100110100", 
    39 => "10111110000000100001110111011010", 
    40 => "00111101011011010111010001011101", 
    41 => "10111101100001100110110000101011", 
    42 => "00111100100001101111000111110111", 
    43 => "10111010100101001010001000001110", 
    44 => "10111101000011010100100111100101", 
    45 => "10111110010000110001000110100101", 
    46 => "00111101100001110111111010100010", 
    47 => "10111110010100100011110111010101", 
    48 => "10111101001000100001010010101101", 
    49 => "00111100100101101011111010001000", 
    50 => "00111101100011110111110101001100", 
    51 => "00111110000000101111000101100111", 
    52 => "00111000000000001111001101010101", 
    53 => "00111101100100111011111101110010", 
    54 => "10111110000000000100001111100101", 
    55 => "10111100001110011010101001000110", 
    56 => "10111100101000110001110100111011", 
    57 => "00111110000001001100001001110010", 
    58 => "10111110010100010110000101011111", 
    59 => "10111110000001011001111100101100", 
    60 => "00111101100011100110110110001110", 
    61 => "10111101010110110001001011100001", 
    62 => "10111101101011101000100000100011", 
    63 => "10111101001011100101111100001001", 
    64 => "10111101100010010001011100000000", 
    65 => "10111100111011010110111011001110", 
    66 => "10111110001001111101100101010101", 
    67 => "10111101001000001011000111110001", 
    68 => "10111101101100000000111000001101", 
    69 => "10111101010101011001000001010101", 
    70 => "00111101000000001011111010111100", 
    71 => "10111101110001011101110101100111", 
    72 => "00111101101101001101110101110010", 
    73 => "10111101010010101011100001010101", 
    74 => "10111101000101101100111110111011", 
    75 => "00111011110101000101100101001001", 
    76 => "10111101101100111111000110000100", 
    77 => "00111101100100000000000101111000", 
    78 => "00111100001110101101010110111111", 
    79 => "10111101101011110011111000101100", 
    80 => "10111110000001111000000111000111", 
    81 => "00111100110001011101001100010011", 
    82 => "00111100101111110010000101001000", 
    83 => "00111110000100011000000101011010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_72 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_72 is
    component inference_mult_1_120_120_84_s_W4_72_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_72_rom_U :  component inference_mult_1_120_120_84_s_W4_72_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


