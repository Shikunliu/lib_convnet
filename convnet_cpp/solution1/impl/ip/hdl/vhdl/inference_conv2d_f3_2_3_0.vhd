-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101100011000001111010001", 
    1 => "00111101011100010111101010110001", 
    2 => "10111101011110110001011011111000", 
    3 => "00111101011010100111100011001010", 
    4 => "00111101000010001101001111001001", 
    5 => "00111101011101001011001000001001", 
    6 => "00111101001101011001001101111011", 
    7 => "00111101100101100001100101101111", 
    8 => "10111101001001111100011100100100", 
    9 => "10111101111101010100100011101101", 
    10 => "00111101011000011001001000000110", 
    11 => "00111101001100001010101101100100", 
    12 => "00111101100000001111111010001011", 
    13 => "00111101111001011010100110101000", 
    14 => "00111101101010011011100110111101", 
    15 => "00111101101011110100110110111110", 
    16 => "00111100000001100100011001001011", 
    17 => "00111100011110010000001111111000", 
    18 => "00111110001101100101001110000111", 
    19 => "00111110000001100001101010100100", 
    20 => "10111101010011011000001010100000", 
    21 => "10111101110000011000100101101101", 
    22 => "00111101000110110110010100110001", 
    23 => "00111100000011100100111100011000", 
    24 => "10111101001101011010011011100001", 
    25 => "10111110000001111000111100100110", 
    26 => "10111101001110101011001110010000", 
    27 => "00111101110011110111010011001101", 
    28 => "10111101011110101000010000010000", 
    29 => "10111011101001000111001010111100", 
    30 => "00111100111101101001100000001101", 
    31 => "00111101100010001011001100000101", 
    32 => "10111101100101110010100000000101", 
    33 => "10111101111100111100100000011001", 
    34 => "00111101000001110000111100011110", 
    35 => "10111101010110100011010110000110", 
    36 => "10111110001010101001101010000000", 
    37 => "10111100111000111000101110001011", 
    38 => "10111101111010001110101101000110", 
    39 => "10111101110001011010111001100000", 
    40 => "00111110000100010011010100010001", 
    41 => "10111110000000010101101000001000", 
    42 => "00111100100110100100010100100110", 
    43 => "00111101010110011000101111111000", 
    44 => "10111101101011100000101101011011", 
    45 => "00111100111110000110011110000101", 
    46 => "00111101011000111100101100010110", 
    47 => "00111101111110000110111101001000", 
    48 => "00111101000111100010001111110010", 
    49 => "00111100101010100111011100000010", 
    50 => "10111101101101100111010101110010", 
    51 => "00111101101010010001000010000000", 
    52 => "00111101101111001100001011001001", 
    53 => "00111101100100111010101000001110", 
    54 => "10111101110000100000110001111111", 
    55 => "10111101111100001011011000110001", 
    56 => "10111101111010001100111101111101", 
    57 => "10111110000101000110100000000001", 
    58 => "10111010111100100000001111101001", 
    59 => "10111100111111100000001101110001", 
    60 => "00111101100111100000001001001010", 
    61 => "10111011010111111110001110000000", 
    62 => "00111110010101100010000010101011", 
    63 => "10111100101001100010011000111010", 
    64 => "10111101000010101001011100011000", 
    65 => "00111101110111010000000011110111", 
    66 => "00111011100110111000111010100111", 
    67 => "00111101001010111010011000100110", 
    68 => "00111101011110100000011110011000", 
    69 => "10111101101111001101110100000000", 
    70 => "00111110001111011110010000111111", 
    71 => "00111101100000011010111101110000", 
    72 => "00111110000011010001010100100111", 
    73 => "00111110000000001011100011010000", 
    74 => "00111110001000101101000010100010", 
    75 => "00111101101001100011110110101010", 
    76 => "00111101101111100011101001111110", 
    77 => "00111101101110110111110000001101", 
    78 => "00111101110110111011000111110010", 
    79 => "00111100101111001010001011101001", 
    80 => "10111101010110010101011111110110", 
    81 => "00111101010000010111000001111000", 
    82 => "10111101110010011001011101011000", 
    83 => "00111110000101011101100110100001", 
    84 => "10111101110001100101010111100011", 
    85 => "00111101110000110110011011001010", 
    86 => "00111110001001111001010110110011", 
    87 => "10111100111001010000111101001110", 
    88 => "10111110001000000101100110100111", 
    89 => "10111101010101010111100000000010", 
    90 => "00111100101001100000111010001000", 
    91 => "10111101101100001110010100011101", 
    92 => "10111101101100011000010100010011", 
    93 => "00111101001110010100111111111101", 
    94 => "00111100100101111010001010110100", 
    95 => "00111100110000110000110011111011", 
    96 => "10111101011010100010100011100011", 
    97 => "10111101101100111011011001010011", 
    98 => "00111101100101011100011100011111", 
    99 => "00111101001101101000000011100000", 
    100 => "00111101111100001101010000010011", 
    101 => "10111101100110000010100011101100", 
    102 => "10111101001111001111110101001100", 
    103 => "00111101111010010110100100011010", 
    104 => "10111101101110101010110100010000", 
    105 => "10111101101100000110111101110111", 
    106 => "10111101111111111110101010000001", 
    107 => "10111101010101001111111111010111", 
    108 => "10111100001011110011011100100101", 
    109 => "00111101110101110111100111101010", 
    110 => "10111100101001101101001011010011", 
    111 => "10111101100111011101111110010100", 
    112 => "00111101110001110110010101000010", 
    113 => "00111011111111010101000011111001", 
    114 => "10111101010110010100110111001010", 
    115 => "10111101101110101100011011011011", 
    116 => "10111101101110111000111110001110", 
    117 => "10111101001100110111000111101000", 
    118 => "10111101100010101101100101101010", 
    119 => "10111101100111101110011001101000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_0 is
    component inference_conv2d_f3_2_3_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_0_rom_U :  component inference_conv2d_f3_2_3_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


