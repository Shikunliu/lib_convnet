-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101101110001000001101101", 
    1 => "00111101011000100010010111100000", 
    2 => "10111100111110101111100010001111", 
    3 => "10111101110001110110111000010000", 
    4 => "10111101001000101000111111001000", 
    5 => "10111110000011000101001101101101", 
    6 => "10111100111101000111011101101011", 
    7 => "10111101001100001101000000010111", 
    8 => "10111110011101110111011010000001", 
    9 => "00111110001110101011110010010100", 
    10 => "10111101101110111101011110001010", 
    11 => "10111101000111110000001001011001", 
    12 => "10111100000101101011111100011111", 
    13 => "00111101011110101011101010010110", 
    14 => "00111100010101101001101010101100", 
    15 => "00111110010000110100100100111000", 
    16 => "00111101110111001010011111010110", 
    17 => "00111101010011010011011010011010", 
    18 => "10111110000001011010101000101110", 
    19 => "10111100101000000110101001101110", 
    20 => "00111101010110100100011100100100", 
    21 => "10111101010001111001010111011100", 
    22 => "10111101100110110101100111111001", 
    23 => "00111110010100011100110100011100", 
    24 => "00111101001111001000000001101001", 
    25 => "00111100110101011000111101001001", 
    26 => "00111101000000110011000100101000", 
    27 => "00111110000111100000110010011110", 
    28 => "00111110001111011000110010110000", 
    29 => "00111101010011110011110001100011", 
    30 => "00111101100101101001101110011101", 
    31 => "10111110001111100000001110110100", 
    32 => "00111110001110100111000101011000", 
    33 => "10111101001000100011000011111101", 
    34 => "00111101101101110001000001000101", 
    35 => "00111100010100000110111100011001", 
    36 => "00111101111100110111100101110100", 
    37 => "10111101000000011110110111000110", 
    38 => "10111100111100111100010010001000", 
    39 => "00111110001111001111011000111000", 
    40 => "00111011100100110011101100000110", 
    41 => "00111101111100110001101000001001", 
    42 => "00111110001011111010001110111010", 
    43 => "10111110010101000000100001010011", 
    44 => "00111101001110110111011100000100", 
    45 => "00111010101110001000100111110101", 
    46 => "10111101101010010001000001110010", 
    47 => "10111101100010101100000011101110", 
    48 => "00111101101011001001111110011011", 
    49 => "00111100111010010111110100111100", 
    50 => "10111101011110100001000111011111", 
    51 => "10111011101111110011010001011110", 
    52 => "10111101110001010001001101001010", 
    53 => "10111110000011010011100110010111", 
    54 => "00111101110010000000100001101010", 
    55 => "00111101110010010011100000100011", 
    56 => "00111101100000010001000110000101", 
    57 => "00111110000100110100001000100100", 
    58 => "10111101010110001000010111101110", 
    59 => "10111101101001111011011000100111", 
    60 => "00111101110001011000010010001001", 
    61 => "00111100100011110010011010101111", 
    62 => "00111110010001100011011100110111", 
    63 => "00111101110011100001000101010110", 
    64 => "00111101010000001110010001111100", 
    65 => "00111110001000111111011011000010", 
    66 => "10111110001100000110111011100011", 
    67 => "10111101101000000111111000100101", 
    68 => "10111101101111110110111010010000", 
    69 => "10111101100100101011001010001010", 
    70 => "10111100110110111000001001110010", 
    71 => "10111101101001101111100101110110", 
    72 => "00111101001110101110010010001000", 
    73 => "00111101101010110000011100110000", 
    74 => "10111101110000000101110010100100", 
    75 => "00111101000011000111000001010001", 
    76 => "10111101011011110011010000110110", 
    77 => "00111101101101111100101011010000", 
    78 => "00111100111111100011001011010110", 
    79 => "10111101101000101001001000110001", 
    80 => "10111101111011101111010001011010", 
    81 => "10111101101111000110101100010011", 
    82 => "10111110001100100100101011110001", 
    83 => "00111101000011010001110100111010", 
    84 => "10111101001000101000101111001011", 
    85 => "00111100110111000100100110101101", 
    86 => "10111110000001101110001110110100", 
    87 => "10111010110010011110110010011110", 
    88 => "10111101001100011101011101100011", 
    89 => "00111101010011101110000111001011", 
    90 => "00111101111101000101101111110010", 
    91 => "10111110000111001111011101000100", 
    92 => "00111100010111101000110101010100", 
    93 => "10111110000111011110000101011101", 
    94 => "00111101111000010101101110011010", 
    95 => "10111110100011100101000000011110", 
    96 => "10111101101101010010011001100000", 
    97 => "00111101010110101101011101101100", 
    98 => "10111100101101011100000110000011", 
    99 => "00111100101011011011111101010110", 
    100 => "00111101110011100011110101100000", 
    101 => "00111011100111111000101111001100", 
    102 => "00111101110101101010111100000100", 
    103 => "00111010111100101101111001011001", 
    104 => "10111101110011111110100000100101", 
    105 => "00111110100010000111101011110010", 
    106 => "00111100011000110010100110011011", 
    107 => "10111101100110101110110011101011", 
    108 => "00111101101111010000000010011010", 
    109 => "10111100011101100111000010100000", 
    110 => "00111101001110000010000010001000", 
    111 => "00111101010000010001000111111110", 
    112 => "10111101011101010010010100101011", 
    113 => "00111110011001010010001111110110", 
    114 => "10111101001001111010111010011011", 
    115 => "00111101010101111110101101011111", 
    116 => "00111101101011101100011101111001", 
    117 => "10111101001111011110011101010111", 
    118 => "00111101101101001111010101000000", 
    119 => "00111101101100000100011101110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_8 is
    component inference_conv2d_f3_1_1_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_8_rom_U :  component inference_conv2d_f3_1_1_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


