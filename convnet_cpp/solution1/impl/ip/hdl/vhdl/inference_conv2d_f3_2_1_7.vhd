-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000111111000011111010101", 
    1 => "10111101111011011111101011001010", 
    2 => "00111101000101010100110010110011", 
    3 => "00111101001111111110011111000111", 
    4 => "00111101011001011001100000001010", 
    5 => "10111101101110101100010101010110", 
    6 => "10111101100101110110101000010100", 
    7 => "00111110001001111001010010100111", 
    8 => "00111101111011100001011100011010", 
    9 => "10111101110000000101101001010110", 
    10 => "00111101110100111010111111111011", 
    11 => "00111101000101001100111101100101", 
    12 => "00111101000010111011001000011011", 
    13 => "10111101100001011111111001010100", 
    14 => "00111100111111011011011110111100", 
    15 => "00111101001001100010010011111000", 
    16 => "10111101111011000101101110001110", 
    17 => "10111101110101010111000111010010", 
    18 => "10111101100011111011010011000100", 
    19 => "00111011100001011110011001001001", 
    20 => "00111101110110010111010001100000", 
    21 => "10111110000100111011100111110001", 
    22 => "00111110000110110110110010111110", 
    23 => "10111100111100101000111110011111", 
    24 => "10111101011100000001101000101001", 
    25 => "00111110000100001110000110110101", 
    26 => "10111100101111100100111001001111", 
    27 => "10111011111001101011100110011101", 
    28 => "00111101010111101010011100000101", 
    29 => "10111101010001001100100111111111", 
    30 => "10111110001001110001110010010111", 
    31 => "00111100101011110101110100011011", 
    32 => "00111101010101111011010000011100", 
    33 => "00111101101000101111111011010011", 
    34 => "00111101100000000010001010011010", 
    35 => "10111100111110101001001001101101", 
    36 => "00111101010101001101001000111010", 
    37 => "10111101000100001111000111011011", 
    38 => "00111100101000011010001000010001", 
    39 => "00111100001010111100010110000001", 
    40 => "10111101011101111111010001100011", 
    41 => "00111101110001000101010110001101", 
    42 => "10111101101011101100000110011010", 
    43 => "10111101110000011011000001100001", 
    44 => "00111101101100111000111001100000", 
    45 => "00111101111101011110010000011101", 
    46 => "00111110001000100111000010110000", 
    47 => "00111101000001111100111101010010", 
    48 => "00111110001101011100001000001001", 
    49 => "00111110010000100110001111011000", 
    50 => "00111100000000001010000011011010", 
    51 => "10111101111010110100111100011110", 
    52 => "10111110001011011011100000110101", 
    53 => "00111101100110101110101110001110", 
    54 => "00111110000000001010101100101110", 
    55 => "10111101011011000101010111001001", 
    56 => "00111101110000100011101110100010", 
    57 => "00111110000000001011101101101111", 
    58 => "00111100000001000110000110001111", 
    59 => "10111101101110111100001110101011", 
    60 => "10111101000111110010110110001101", 
    61 => "00111101101001010110100110001001", 
    62 => "00111011110000010101001110000111", 
    63 => "00111101011100100000100011000110", 
    64 => "10111101011101011000000001001010", 
    65 => "10111101001000111010001011101101", 
    66 => "00111101100111011010000101100110", 
    67 => "00111101100110101000111111011100", 
    68 => "00111101110101011101000000110001", 
    69 => "00111011111010000111001000000100", 
    70 => "10111110000100111000100001100110", 
    71 => "10111101101010110101011000110010", 
    72 => "00111101100111011000000011111111", 
    73 => "00111100111010101011011100101110", 
    74 => "00111100000000011010000111000001", 
    75 => "10111110000100011101111100110011", 
    76 => "10111110000111111010101011001110", 
    77 => "10111101011011011101111001100000", 
    78 => "00111110000101001110011100100101", 
    79 => "10110110101100011000010111111110", 
    80 => "10111100010001001100110111111011", 
    81 => "00111101001011110011110111011011", 
    82 => "10111100111010011001010111000110", 
    83 => "00111100000001100110101000100111", 
    84 => "00111101000001111011001011100111", 
    85 => "10111110001110011010110000110110", 
    86 => "00111101101110010101010101111111", 
    87 => "00111110000101000001001111011011", 
    88 => "10111101011100101111110010101101", 
    89 => "00111110010011001000011110011000", 
    90 => "10111101111001000111110010110111", 
    91 => "10111101111101001011011110110011", 
    92 => "10111110001101001111100101111111", 
    93 => "00111110001111100111100010011110", 
    94 => "10111101001010001001000011100011", 
    95 => "00111101010110000011100110110011", 
    96 => "10111001111001110101111101011011", 
    97 => "10111101100100110001000010011001", 
    98 => "10111101011111000111000111010110", 
    99 => "00111101111001110001111011110011", 
    100 => "00111101101100010100000111011100", 
    101 => "10111101100001100000000111100101", 
    102 => "10111101110001011000010001101111", 
    103 => "00111101110100000001001000010111", 
    104 => "10111100100111000010011111101001", 
    105 => "00111101011000110101011111011001", 
    106 => "00111101000111000111001001000001", 
    107 => "00111010011111010001101111110101", 
    108 => "00111101011001101000011101101110", 
    109 => "10111011110100000000110101001001", 
    110 => "00111101100101111011111110100101", 
    111 => "00111101100100110011001000110100", 
    112 => "00111100011010100100101101100011", 
    113 => "10111101100010101000100000100111", 
    114 => "00111101111001101100110110101111", 
    115 => "00111011110100001111100000101011", 
    116 => "10111110000000111010110101011100", 
    117 => "10111101110100010010011101110000", 
    118 => "10111110001000001100011100111011", 
    119 => "00111101001011011000010100100100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_7 is
    component inference_conv2d_f3_2_1_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_7_rom_U :  component inference_conv2d_f3_2_1_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


