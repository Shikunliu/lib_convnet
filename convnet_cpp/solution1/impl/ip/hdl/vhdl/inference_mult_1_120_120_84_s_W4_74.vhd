-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_74_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_74_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111100110011010101001100", 
    1 => "10111101011011110001100010000111", 
    2 => "10111101101110010010100000100101", 
    3 => "00111101101010111110010110111111", 
    4 => "00111101111010101001010110000101", 
    5 => "10111010100101111110011110010011", 
    6 => "00111110010000010001110010110000", 
    7 => "10111110000111000000010010000110", 
    8 => "00111101110010001001000010100000", 
    9 => "10111110000100000000000111010110", 
    10 => "00111100101001010000101110111110", 
    11 => "10111101011110111011000100000001", 
    12 => "10111101111101011101000111000100", 
    13 => "10111100111001011111100111111010", 
    14 => "00111100100010101010000000000010", 
    15 => "10111101111100110011100011111000", 
    16 => "00111101100000011110001100111100", 
    17 => "00111101110110111011000101101100", 
    18 => "00111101111010110011000111000010", 
    19 => "10111100001100111100010001010011", 
    20 => "00111110000101001101011011100100", 
    21 => "10111100110101010100001100101000", 
    22 => "10111101100111101011001001011000", 
    23 => "00111101010110001111001111101101", 
    24 => "00111110000110001001010000111110", 
    25 => "00111101111001101000010101010101", 
    26 => "10111101101001001000001010010110", 
    27 => "10111101100001010000100110110010", 
    28 => "10111101011101110111001000100111", 
    29 => "10111101010011000100101000001011", 
    30 => "10111101100010000001100011000110", 
    31 => "10111001100000110001101001011010", 
    32 => "10111110001011100011011111011111", 
    33 => "10111101010100101010101010010010", 
    34 => "00111101000101111111001100000110", 
    35 => "00111101011011000111011010110110", 
    36 => "00111100111101000111101001011011", 
    37 => "10111101110001001110101110011010", 
    38 => "10111101011011010110110110100111", 
    39 => "00111110001000011110011011001101", 
    40 => "10111100101100101101110100110111", 
    41 => "00111110000111100101000100001001", 
    42 => "00111101011001001010110000011100", 
    43 => "00111101000100000111011100101100", 
    44 => "00111110001000000010110101011010", 
    45 => "10111101001111111001010000011010", 
    46 => "10111101011011110001110110101010", 
    47 => "00111101110100000101001000001101", 
    48 => "00111100110100010111111010101110", 
    49 => "00111101101011001000011000000101", 
    50 => "00111101100001100011101001001111", 
    51 => "00111101100100100001010110111010", 
    52 => "00111100111111001011110100100000", 
    53 => "00111101100001100100000111011011", 
    54 => "00111110001011110111000111101011", 
    55 => "00111101010111010010110101101101", 
    56 => "10111101110000000100000100011110", 
    57 => "10111110001101011010001111100100", 
    58 => "10111100110101010100111001111100", 
    59 => "00111101110000010000101101010110", 
    60 => "00111101000110011001001101001111", 
    61 => "00111100101010100110000101101000", 
    62 => "00111110001110000111011101101000", 
    63 => "10111101010100110111111110001001", 
    64 => "00111101000100000001001100100011", 
    65 => "10111100101101100000000100001110", 
    66 => "10111101111100111100011100001101", 
    67 => "10111101110001011000010110100011", 
    68 => "00111110000010101100010111000001", 
    69 => "00111101011001100101111011011010", 
    70 => "00111101110100101001011001110000", 
    71 => "00111110000011110111100001111001", 
    72 => "00111110000010001011001010100111", 
    73 => "00111100001011110101010101011000", 
    74 => "10111110011010000011101001010100", 
    75 => "10111101101101000000010101010110", 
    76 => "10111100101101100100100011000111", 
    77 => "00111101001010110010101000011011", 
    78 => "10111101010110001100111101010100", 
    79 => "00111101000111101111011000110000", 
    80 => "00111101010101000100000100110101", 
    81 => "00111101001111011101001011100100", 
    82 => "10111101000100110101010011110111", 
    83 => "00111101110100001000001001001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_74 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_74 is
    component inference_mult_1_120_120_84_s_W4_74_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_74_rom_U :  component inference_mult_1_120_120_84_s_W4_74_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


