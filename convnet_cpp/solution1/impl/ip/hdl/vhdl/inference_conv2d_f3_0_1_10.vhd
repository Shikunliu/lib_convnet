-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011111111001110111110010101", 
    1 => "10111101100101010110100011001101", 
    2 => "10111011111111110010111010011111", 
    3 => "10111100110011111101000100101110", 
    4 => "00111100111011011111001101011000", 
    5 => "10111101110011010010110000111000", 
    6 => "00111110000111100011010000110011", 
    7 => "00111101000101110101100111010100", 
    8 => "00111100110011011111001101110011", 
    9 => "10111101010100010100010011001100", 
    10 => "00111101011110000111011110101011", 
    11 => "10111110001100000110001011010100", 
    12 => "10111101101110101101000100100010", 
    13 => "10111101101100101100001101101100", 
    14 => "00111110000010001011111001110011", 
    15 => "00111101001011011101010011010101", 
    16 => "10111100101011110100011000111111", 
    17 => "10111101100101001000000111011010", 
    18 => "10111100100101101010001010100100", 
    19 => "10111101010001100100110010000000", 
    20 => "10111101110001011011010111010010", 
    21 => "10111110000111101000000010111111", 
    22 => "00111110000110011000001101010001", 
    23 => "10111100010101001001111110010101", 
    24 => "10111110000011101100010101101101", 
    25 => "10111011100110110111110111100000", 
    26 => "00111101111100000010101111000111", 
    27 => "10111110010100100010011110001101", 
    28 => "00111110001011110010111001001001", 
    29 => "10111101101100110001101110001110", 
    30 => "10111101101100110100100001000111", 
    31 => "00111101101110000001111111100111", 
    32 => "10111010001111010101001110100010", 
    33 => "10111110000001111110011100111010", 
    34 => "00111101111110001100001100101011", 
    35 => "00111101100100011100110100001111", 
    36 => "00111101100000111101010011010111", 
    37 => "00111101101011110100010111111100", 
    38 => "10111101101110000010100101100100", 
    39 => "00111100011111001011110011101010", 
    40 => "10111101101111110110011110001001", 
    41 => "00111010101010011100010001011111", 
    42 => "10111101010000011111011101010001", 
    43 => "10111101011111110110010110001011", 
    44 => "10111100010011100100000101000001", 
    45 => "10111101101001000010011010000110", 
    46 => "00111100111011001000010011111001", 
    47 => "00111101110100111110011100001000", 
    48 => "00111100000101001101000010011101", 
    49 => "00111100000011110111010111111111", 
    50 => "00111110000111101001001001001111", 
    51 => "00111101000110010010011011111110", 
    52 => "10111101100001111011100110111000", 
    53 => "10111101101100111011001111001111", 
    54 => "10111101001111110010000111101001", 
    55 => "10111101111111001001011100001111", 
    56 => "00111100100001010001101111111110", 
    57 => "10111100101000100101110110001101", 
    58 => "00111101100000010010011111011011", 
    59 => "10111101111100100101011100000000", 
    60 => "10111101100011001111111100101111", 
    61 => "00111101000001001011110011111110", 
    62 => "00111101100000101000000100001100", 
    63 => "00111100111100011010011010100001", 
    64 => "00111110000100101110010101011000", 
    65 => "10111011001101110000000111011111", 
    66 => "10111100100100110001000110001010", 
    67 => "10111101010110000011010111010001", 
    68 => "00111101111100000011000100000101", 
    69 => "10111101101100100001110100101100", 
    70 => "10111110011101011100000001110110", 
    71 => "00111101010110001001110011100101", 
    72 => "00111011011111110010100001101010", 
    73 => "10111010111011101001000000010110", 
    74 => "10111101100000010001010011101110", 
    75 => "10111101100010001100110111101010", 
    76 => "00111100010011010110011100100110", 
    77 => "00111110001001010110101111001010", 
    78 => "00111101011101101001100010010011", 
    79 => "10111100001010010100000110101101", 
    80 => "10111101001001000111101000011000", 
    81 => "00111101100101000100101111100111", 
    82 => "00111101011111000000100111010001", 
    83 => "10111101101001001010110000011100", 
    84 => "10111101010001101010000110100101", 
    85 => "10111110001101110110010011110001", 
    86 => "10111110000011001000101111001010", 
    87 => "00111101000000100000111111000000", 
    88 => "10111101011000001101101110010010", 
    89 => "10111101001101111000011110001011", 
    90 => "10111010101111011001101010000000", 
    91 => "00111110000111000011000101011001", 
    92 => "10111101110101110111111010100010", 
    93 => "00111110000101110001111100110110", 
    94 => "10111100100110010111001010011000", 
    95 => "10111101111000010101011011100010", 
    96 => "10111101101000011101111011100010", 
    97 => "10111101100000111111110110000110", 
    98 => "00111101000111010001010000001101", 
    99 => "10111101100111010100101100100111", 
    100 => "00111101100110010010100110000010", 
    101 => "00111110001001000001011101000100", 
    102 => "10111101101001101011100000111110", 
    103 => "00111101010110101000000011010000", 
    104 => "00111100100011101110110100000011", 
    105 => "10111110010001101001001111000000", 
    106 => "10111101010011100111100110101011", 
    107 => "00111100010000111010100110100011", 
    108 => "00111100110101011111000100000011", 
    109 => "10111101101111001111010011001110", 
    110 => "00111101100110111000111010001111", 
    111 => "10111101110100000010111001100110", 
    112 => "00111101100001110010100101101111", 
    113 => "10111100110101001011001110110110", 
    114 => "10111101100001010111000111101101", 
    115 => "00111100010111011110001010011111", 
    116 => "00111110000101100011111011010001", 
    117 => "10111101000000000110001011000111", 
    118 => "00111101101001100111100110110010", 
    119 => "00111100110011111011100010100101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_10 is
    component inference_conv2d_f3_0_1_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_10_rom_U :  component inference_conv2d_f3_0_1_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


