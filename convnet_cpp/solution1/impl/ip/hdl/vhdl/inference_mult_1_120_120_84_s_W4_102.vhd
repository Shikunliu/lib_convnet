-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_102_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_102_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100111110110001000110000", 
    1 => "00111101101110110001111111101111", 
    2 => "10111101110001101100100001010110", 
    3 => "00111010101011100111010011110011", 
    4 => "10111101111100111100000111001110", 
    5 => "10111100100101010000001101101000", 
    6 => "00111100001000101000111000101010", 
    7 => "10111100000100010101000110110111", 
    8 => "10111101100101101000011010010111", 
    9 => "00111101100011110011101011000011", 
    10 => "00111110001101001111010010000100", 
    11 => "10111110000110010010001010010110", 
    12 => "10111110000010100101011011011110", 
    13 => "00111101001110111111111001100011", 
    14 => "00111101111101001101101011010011", 
    15 => "00111101100010111000110110011101", 
    16 => "10111110000011100110101010111010", 
    17 => "10111110100000110111011001001111", 
    18 => "00111100011110000110010111011000", 
    19 => "10111101100001010100100010110111", 
    20 => "10111010110100001111011000100111", 
    21 => "10111110001010101001111101111011", 
    22 => "10111100011000000011001000000100", 
    23 => "10111101001001110110000010110010", 
    24 => "00111100111010011100001101001000", 
    25 => "00111101101110011000110100011111", 
    26 => "10111100110100011001011110100010", 
    27 => "10111110010010101110110101010111", 
    28 => "00111101110011100100111100110011", 
    29 => "10111101010000010010001011100000", 
    30 => "10111101101110011011111011100000", 
    31 => "10111100001010111110011100001111", 
    32 => "00111101111000000001010011111001", 
    33 => "10111110011000010100011111110001", 
    34 => "10111110001001111001010100101101", 
    35 => "10111101100110000000011010101111", 
    36 => "00111101001101100010110001110111", 
    37 => "00111101100011111000011001010000", 
    38 => "10111110010111110000110111000111", 
    39 => "00111101111100010100011111110001", 
    40 => "10111101101101100001100001001000", 
    41 => "10111011101111010000010001011000", 
    42 => "10111101001111110000110101011100", 
    43 => "10111100010010010100110001111010", 
    44 => "10111101100101010011100100010111", 
    45 => "10111101101011110001011111001011", 
    46 => "00111101101011100100010101110011", 
    47 => "10111101100101010111001100101111", 
    48 => "10111101101101010100101000000111", 
    49 => "10111011000101011110101110111010", 
    50 => "00111101000100110101010100010010", 
    51 => "00111101000110000101101010000101", 
    52 => "10111100111110001101011100010111", 
    53 => "00111100101011010110100011101111", 
    54 => "00111110001110111100100111001101", 
    55 => "00111011000011000001100110101001", 
    56 => "10111101100001101101111010111001", 
    57 => "00111101111011101111010111101101", 
    58 => "10111101011010101000100000110100", 
    59 => "00111101110010000011101100011101", 
    60 => "00111100111110111101110001001111", 
    61 => "10111110001011100000100101111000", 
    62 => "00111100101011000111000000110110", 
    63 => "10111101101010110010010010001100", 
    64 => "10111110000001010010010000111010", 
    65 => "00111110000110001101101111001111", 
    66 => "10111110001001011011111110101101", 
    67 => "00111100100100100110000100101100", 
    68 => "00111101010101000011101100111011", 
    69 => "10111100100111010001111011110101", 
    70 => "00111101100000010110111110101111", 
    71 => "10111101000010101100100111110011", 
    72 => "10111101111110100101111010111011", 
    73 => "00111100111000100111101001111110", 
    74 => "10111011000101100000001100110111", 
    75 => "00111101000101100010000111111011", 
    76 => "10111100011011101010111101110110", 
    77 => "00111101000001100010110011010101", 
    78 => "10111101100010100101100101010101", 
    79 => "10111011101111011001100000111100", 
    80 => "10111101011101111101100101110000", 
    81 => "10111100010100100110010001010001", 
    82 => "00111101101011001100101111101001", 
    83 => "10111101100111001011010101000010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_102 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_102 is
    component inference_mult_1_120_120_84_s_W4_102_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_102_rom_U :  component inference_mult_1_120_120_84_s_W4_102_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


