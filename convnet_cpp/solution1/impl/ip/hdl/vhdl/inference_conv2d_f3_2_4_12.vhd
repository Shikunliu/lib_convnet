-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001000100111101011001111", 
    1 => "10111100000011100010001100100100", 
    2 => "00111101010010001111110101001111", 
    3 => "00111101110100001010110111001101", 
    4 => "00111110000101111110011000101110", 
    5 => "00111101000001100101111101100000", 
    6 => "00111101011111000011001100000111", 
    7 => "00111100101011011010101100110100", 
    8 => "10111101100011100000010010001011", 
    9 => "10111101001111100111111010100110", 
    10 => "10111101101101000110100111110010", 
    11 => "00111100010111110010001100010001", 
    12 => "00111100110001111000111101110110", 
    13 => "00111100001000000110100000100000", 
    14 => "10111101100110100010111011101011", 
    15 => "00111101011111000011100111110010", 
    16 => "00111101011100101000011110100111", 
    17 => "10111101010110101101001111110111", 
    18 => "10111101010011001001010111110110", 
    19 => "10111101100100100011000111111100", 
    20 => "10111101100110011011000010111001", 
    21 => "00111101101010100101100000010011", 
    22 => "00111101011110000111000000111001", 
    23 => "10111101000000010100001111001101", 
    24 => "10111101101100100100101111110000", 
    25 => "00111100001110110001100110110010", 
    26 => "10111110001000000111011011000000", 
    27 => "10111100110101110110010111100011", 
    28 => "00111101111000100100111001011001", 
    29 => "00111101000110011101111001111110", 
    30 => "00111101110110010010011111010100", 
    31 => "10111110001010011100011110111101", 
    32 => "10111101000100001100000110111001", 
    33 => "00111110000010011110011101110101", 
    34 => "10111011101100110101110011111010", 
    35 => "00111101100110111111111001111110", 
    36 => "10111101110011011010100100000000", 
    37 => "10111110010001011111001000000010", 
    38 => "10111101111101011110011101000011", 
    39 => "00111101110011110000011100111010", 
    40 => "10111101010101111010110110110111", 
    41 => "00111110001000000111000001110110", 
    42 => "10111110001000111100101000110010", 
    43 => "00111100000110001010000111100010", 
    44 => "10111101011011101100111001100100", 
    45 => "00111101001110111011000111010111", 
    46 => "10111101100110111001001100111001", 
    47 => "00111100101101110111100101001001", 
    48 => "00111101111001110110101101111111", 
    49 => "00111101100110010011111110010100", 
    50 => "00111100100011011111101110100001", 
    51 => "10111110000011110110010110011001", 
    52 => "10111100000010100010000001100000", 
    53 => "10111101100111000001100101110001", 
    54 => "10111010100010111000001100000000", 
    55 => "00111101100001000000001110011011", 
    56 => "10111100110000011011101111000010", 
    57 => "00111101000011011111110110011111", 
    58 => "00111101110011110100010100010111", 
    59 => "10111011101000101110110100101010", 
    60 => "10111001001001010100011111011111", 
    61 => "00111110000101101001011000011100", 
    62 => "00111110001001010100011101011010", 
    63 => "00111100101100110011001001011100", 
    64 => "00111101001000110110010111001011", 
    65 => "00111110000111001001001001011000", 
    66 => "00111100011101011111100010101011", 
    67 => "00111101101100101110001110011101", 
    68 => "00111101100101101001010000010001", 
    69 => "10111011110001010111011110000011", 
    70 => "10111110000010100110111001110110", 
    71 => "10111101100111100110111010001101", 
    72 => "10111011110010110011010011000111", 
    73 => "00111100011001001001011111000101", 
    74 => "10111011000110001010011010000000", 
    75 => "00111101011101111100111001010011", 
    76 => "10111101111101101111001100101100", 
    77 => "10111101010000101011111001110001", 
    78 => "00111101101001100000111111110010", 
    79 => "00111101011100110111001001010011", 
    80 => "10111100101000110111101110011011", 
    81 => "00111101000110010011100110101000", 
    82 => "10111100111010110101010000001100", 
    83 => "00111011010100011111000101001111", 
    84 => "10111101100001000101000011110000", 
    85 => "10111101001010111001101111111011", 
    86 => "00111110001110010100011011000011", 
    87 => "10111101011000010010110110101101", 
    88 => "10111100100100100110011100001011", 
    89 => "10111101000111010010001100001100", 
    90 => "00111101010010100000101001111011", 
    91 => "10111101110010010101101100110110", 
    92 => "10111100000001101110101110100010", 
    93 => "00111110000100100110101110110101", 
    94 => "10111101001010001101101001001010", 
    95 => "10111101111101010001100110111101", 
    96 => "00111101000011101011101010010011", 
    97 => "10111101100000110111110101100011", 
    98 => "00111110000001000101110110000101", 
    99 => "10111101111011010001010110101101", 
    100 => "00111101010000010100000111001111", 
    101 => "10111100110001000001000000110000", 
    102 => "00111110000001010100000001000110", 
    103 => "00111100110001110101000001010110", 
    104 => "00111101000010000000001101010100", 
    105 => "00111100101001010011011010111011", 
    106 => "10111101110010011001100110001100", 
    107 => "00111100000000001100110001101110", 
    108 => "10111100100010100100000011001100", 
    109 => "00111110000110101111011110010000", 
    110 => "10111101110110110010011001111100", 
    111 => "00111101110100010110110010100100", 
    112 => "00111100111100001111111101111100", 
    113 => "10111110001100110110011101011110", 
    114 => "10111101001101111111011100000010", 
    115 => "10111101110000111011101111101111", 
    116 => "10111011101010010110011011101100", 
    117 => "10111101001111100101000101110100", 
    118 => "10111100110100010111011110001100", 
    119 => "00111101111010111001010101011111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_12 is
    component inference_conv2d_f3_2_4_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_12_rom_U :  component inference_conv2d_f3_2_4_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


