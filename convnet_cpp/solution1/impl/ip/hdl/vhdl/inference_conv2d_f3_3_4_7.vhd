-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010010010110111001011001", 
    1 => "00111101100101010110100100101011", 
    2 => "00111101000001101010000101101111", 
    3 => "10111101100010010110110001110101", 
    4 => "10111100100111010110010010010101", 
    5 => "10111101010011101101010010010100", 
    6 => "00111101100101011111100001011010", 
    7 => "00111110000000101010011001101110", 
    8 => "00111101111011011001100111001100", 
    9 => "10111110000001111101000111111110", 
    10 => "10111100011101001110010111110001", 
    11 => "10111110001001111010011111001010", 
    12 => "10111101101101110000011011111101", 
    13 => "00111101010000110100000101001110", 
    14 => "00111100011100111011011100011100", 
    15 => "10111110000110110111100111011001", 
    16 => "10111100110100111101100110011100", 
    17 => "10111100101001000101110000110110", 
    18 => "10111100111101101111011101000011", 
    19 => "10111010000011001010111010000010", 
    20 => "10111101111001011011000110000101", 
    21 => "10111110001010100101100111000000", 
    22 => "10111101010111011101111110010100", 
    23 => "00111100001101101110110011111100", 
    24 => "10111100100100110100100001111100", 
    25 => "00111110001000100001010001101010", 
    26 => "00111101010011011111001001001100", 
    27 => "10111100111101110011111001011011", 
    28 => "00111101110000110010010011100011", 
    29 => "00111101001110101010011001110100", 
    30 => "00111101100110000010010111111100", 
    31 => "10111011101111011001111011011100", 
    32 => "10111110000011001000001110101001", 
    33 => "00111101011011111000000110011000", 
    34 => "10111011111101001001011000010100", 
    35 => "00111101110101001010101110100100", 
    36 => "00111110010010110000110100001111", 
    37 => "10111110000000101000111011010110", 
    38 => "10111100000111010100010111110111", 
    39 => "00111101100110011000001010001000", 
    40 => "10111101000010010000011011011010", 
    41 => "10111101101010010101100100101010", 
    42 => "10111101010101101100011010011011", 
    43 => "00111101110111001110101101111001", 
    44 => "10111101110111011101100001110011", 
    45 => "00111101011111010101111110001100", 
    46 => "10111101111001101111000001001010", 
    47 => "00111110000101001001000100101010", 
    48 => "10111100010111001011110100000101", 
    49 => "00111101000011110000101101010001", 
    50 => "00111110001001001001100011000100", 
    51 => "10111100010000000010100110111100", 
    52 => "00111100000110110011100011010110", 
    53 => "10111100110011100011010001000000", 
    54 => "10111100110110001011011001111010", 
    55 => "10111100000101000111100100011110", 
    56 => "10111101101010110010111110000001", 
    57 => "00111101101011011011110111000011", 
    58 => "00111110001000010001000100100111", 
    59 => "00111100101110000011111101110111", 
    60 => "00111101000101010011110011111001", 
    61 => "10111100100101110000110100101101", 
    62 => "10111100111001101110001100101110", 
    63 => "00111100010011110011011000110100", 
    64 => "10111101000110010101110110000100", 
    65 => "10111101111011000110110101100001", 
    66 => "10111110000111010010100000000111", 
    67 => "00111101111000100011000001110111", 
    68 => "10111101101110001010101010111100", 
    69 => "00111100100011001011000000010010", 
    70 => "00111101101110011000101001011000", 
    71 => "00111110000110000110011001011110", 
    72 => "00111100001110010111011010101111", 
    73 => "10111110000111111111010110000100", 
    74 => "00111101100000011011100000100100", 
    75 => "00111100010111000010001110000010", 
    76 => "10111101011000010010011001110001", 
    77 => "10111101000100110111100100001001", 
    78 => "00111101101010000100110001111000", 
    79 => "00111100000111110111111110101101", 
    80 => "10111101100010110100111000010010", 
    81 => "00111101101100111011001100111011", 
    82 => "00111011100100110010010010110101", 
    83 => "00111010110001011011110110001111", 
    84 => "10111101101100001101001001001011", 
    85 => "00111100110111010001010101001111", 
    86 => "10111011001110111111001010110101", 
    87 => "10111101000101110011110110011111", 
    88 => "10111100000100110111001001000011", 
    89 => "00111101111110101101011111011000", 
    90 => "10111110000010001000010111010011", 
    91 => "00111101001011110000110110111010", 
    92 => "00111101100010101100100011100111", 
    93 => "10111101100101001100011010111111", 
    94 => "00111101011110111101100110110000", 
    95 => "10111100010110010010011110111010", 
    96 => "10111110001010011000100010010000", 
    97 => "00111101101111001101101001100001", 
    98 => "00111101110001010001001110011011", 
    99 => "00111101100010011001100110011010", 
    100 => "10111100111001000011001110000110", 
    101 => "10111011110010010000111000010001", 
    102 => "10111100010111000001011011101101", 
    103 => "10111101100111010101100110100000", 
    104 => "00111110001001100110101001010101", 
    105 => "10111100111000111100011011100100", 
    106 => "00111100110100010001111010100001", 
    107 => "10111101100010101100010000101111", 
    108 => "00111101100010100010111100000110", 
    109 => "00111110001010111011111000000001", 
    110 => "00111100101110111110110110000001", 
    111 => "10111101001100001001010000000010", 
    112 => "10111110001000100011000011111101", 
    113 => "10111100111010101111001010000111", 
    114 => "10111110010001011011111101101010", 
    115 => "00111101010001001101101001011010", 
    116 => "10111101000000101011111001010110", 
    117 => "00111100111101010000011100010011", 
    118 => "00111101001000010000111100001111", 
    119 => "10111101101101100001000110101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_7 is
    component inference_conv2d_f3_3_4_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_7_rom_U :  component inference_conv2d_f3_3_4_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


