-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011100111011010100111001", 
    1 => "00111101010001110010000101000010", 
    2 => "00111101100100011010010101011111", 
    3 => "10111110001101001111010101001101", 
    4 => "00111101101010110111110111100011", 
    5 => "00111101011000011000001000110001", 
    6 => "00111101101001101100001010000100", 
    7 => "10111100010011111011101001010010", 
    8 => "00111100110110101011001011010100", 
    9 => "00111101010010101000101010011101", 
    10 => "10111101110010101101111111010000", 
    11 => "10111101110111010000111100011111", 
    12 => "10111110000101000111000001100101", 
    13 => "00111100101101011010010011111101", 
    14 => "00111101101111111110000101101111", 
    15 => "10111100100010000000010111110011", 
    16 => "00111101011010010011100101001010", 
    17 => "10111100101110101011110011001010", 
    18 => "10111101101110010001100111111101", 
    19 => "10111101110001010101000011100101", 
    20 => "00111100100100111101001010110000", 
    21 => "00111011100011010001010111010011", 
    22 => "00111110001100001011001111010101", 
    23 => "10111100111110010010011011001000", 
    24 => "00111101001110000010000100001110", 
    25 => "00111101011110110100110101001001", 
    26 => "10111101000101000111110000100011", 
    27 => "10111101011110100100011100100100", 
    28 => "00111010110010010000111000100110", 
    29 => "00111101101001001010101100000010", 
    30 => "10111101000100101000111010010011", 
    31 => "10111101001011001010010110010101", 
    32 => "00111101001011101011001100000110", 
    33 => "10111101111111100001111100111010", 
    34 => "10111101110011010100111111011111", 
    35 => "00111101100001111110010110110101", 
    36 => "00111101010110110101010100100110", 
    37 => "10111101100000000011110101010111", 
    38 => "10111110000111110100111100001110", 
    39 => "00111101000001000001110010101010", 
    40 => "00111110001101101110110001011011", 
    41 => "00111101001111110100001010100001", 
    42 => "00111100101010001001010110000000", 
    43 => "00111110001011110101000010100000", 
    44 => "10111101100010110100011011100011", 
    45 => "00111110000011001101101001101110", 
    46 => "00111110000000011101000110010001", 
    47 => "10111110001110011000110110001011", 
    48 => "00111101101111100011001001101011", 
    49 => "10111101001001111110101110100010", 
    50 => "00111101100010111001011010000111", 
    51 => "10111101111100011011011110011110", 
    52 => "00111101101110100000011110011000", 
    53 => "00111101101011101000100010101010", 
    54 => "10111110000100001101100011001011", 
    55 => "00111010101110110110001101101110", 
    56 => "10111110000001001000001100000010", 
    57 => "00111110001010000010111011001011", 
    58 => "10111110001100111011011000000011", 
    59 => "00111101011111111010011111010001", 
    60 => "00111101011111010011001110111000", 
    61 => "00111110000010000011010000001001", 
    62 => "10111101100000101111001100111101", 
    63 => "10111101110000000110001111010011", 
    64 => "10111101110111001010110110011011", 
    65 => "10111100011110101110000110110011", 
    66 => "10111101100000100000100010000011", 
    67 => "10111101001111011110011100111100", 
    68 => "10111101101010000111000010100101", 
    69 => "10111110001000111111011011000010", 
    70 => "00111101001001100110010100001001", 
    71 => "10111101101001010110110001011110", 
    72 => "00111101100110001000001000110101", 
    73 => "10111101011010000011110110111100", 
    74 => "10111101101011001110111101011010", 
    75 => "00111101110000010110100000111101", 
    76 => "00111110010011111101101100001010", 
    77 => "10111100110010010101111011101111", 
    78 => "10111101100000010011111110110110", 
    79 => "00111101110111001001001011011110", 
    80 => "00111100111000110010101001110010", 
    81 => "00111101111110001010000010010000", 
    82 => "00111100000100000101111011110011", 
    83 => "10111110000110111100100001111110", 
    84 => "00111110000010011101011001101011", 
    85 => "00111100010111001000110100110100", 
    86 => "10111100110111100011111000001110", 
    87 => "10111101010110111010001010111110", 
    88 => "00111101101111101011101111010101", 
    89 => "10111101110110111111111100000100", 
    90 => "10111101000000110110110011010010", 
    91 => "00111101110010101011100011110110", 
    92 => "00111100001100001011000100001101", 
    93 => "10111101001110001001000011010110", 
    94 => "00111100001111011000100010001100", 
    95 => "00111110010001100001011010110101", 
    96 => "00111101101100000000100010100111", 
    97 => "00111101011111101110001110000101", 
    98 => "00111101001101001100101110111010", 
    99 => "10111100010000111110101111101000", 
    100 => "10111101010110001110010000110010", 
    101 => "10111101100011101101000011101001", 
    102 => "10111110001101010111011110010110", 
    103 => "10111110010010001100001100101011", 
    104 => "10111101000110011101101001001100", 
    105 => "00111101110001100001110100000000", 
    106 => "10111101000011010100001000111110", 
    107 => "00111101101100001001111001100011", 
    108 => "00111101110010110000010100111111", 
    109 => "00111100101010001001001110011101", 
    110 => "10111101010111001011010100101000", 
    111 => "00111011100001011110010000110000", 
    112 => "00111011100011110111100001101110", 
    113 => "10111101111110100110001001100111", 
    114 => "10111110000101011111010111110001", 
    115 => "00111110000101001101011111110001", 
    116 => "10111101011010010110101011100011", 
    117 => "00111110000100110010100100111101", 
    118 => "00111110000100101000100100010010", 
    119 => "10111100000010000101011111010011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_12 is
    component inference_conv2d_f3_0_4_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_12_rom_U :  component inference_conv2d_f3_0_4_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


