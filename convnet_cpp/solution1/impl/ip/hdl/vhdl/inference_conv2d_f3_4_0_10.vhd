-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001110001100010111001010", 
    1 => "10111101100010001001011011101011", 
    2 => "10111101000111101010101011001011", 
    3 => "10111110011011011101110100101011", 
    4 => "10111101101101100000100010001101", 
    5 => "10111101101000100001110110110010", 
    6 => "10111101000100001110100110010010", 
    7 => "00111101101101001110010010101110", 
    8 => "10111110011010110011100111100010", 
    9 => "10111101000011001110101110100001", 
    10 => "10111100101001100001111011100011", 
    11 => "10111110000011111011011101100011", 
    12 => "10111110010101110000001001100000", 
    13 => "00111110001010100001001101111111", 
    14 => "10111100011010001010011010110011", 
    15 => "10111101111000111000010000110100", 
    16 => "10111101101000110001100011111100", 
    17 => "00111110010010100001101001010000", 
    18 => "10111101111110101100110101011011", 
    19 => "10111101101001100110010011100001", 
    20 => "10111101110011011110010000111111", 
    21 => "00111101100111011101001101000010", 
    22 => "00111110000000111011101111000111", 
    23 => "10111100110010001100011000001101", 
    24 => "10111110000101101000110111111100", 
    25 => "00111110000101011111001000000010", 
    26 => "10111101110011010010100110011001", 
    27 => "10111100000001001100011100101111", 
    28 => "10111100101110011100110101001011", 
    29 => "10111101110000111001011001001010", 
    30 => "10111101111011111100011110100100", 
    31 => "10111101111000001111011101110111", 
    32 => "00111101000101000011001101011110", 
    33 => "00111101010000001110010110111110", 
    34 => "00111101000001100000101001110001", 
    35 => "10111101010010110110101100000011", 
    36 => "00111101010000011011101111000010", 
    37 => "10111101001001010001111010000011", 
    38 => "10111011100001001000011010100010", 
    39 => "00111101011100100101110110011011", 
    40 => "10111101000010000001010010000111", 
    41 => "00111101000111111111110011011011", 
    42 => "10111100101101111100110011000000", 
    43 => "00111110000010011110001010111101", 
    44 => "10111110001101000011101000100001", 
    45 => "10111110001010010100111101101010", 
    46 => "10111110010000000000011110011010", 
    47 => "10111011110000101010011111011011", 
    48 => "10111110001010001110000100001101", 
    49 => "00111101110000001101010101100011", 
    50 => "10111010010001111000110100000011", 
    51 => "00111110000011000100010001111100", 
    52 => "00111100100000100010010101110100", 
    53 => "00111110010111000111100100101101", 
    54 => "10111101101010100110001000001001", 
    55 => "10111101011000111100011001111001", 
    56 => "00111110000101110100011000000010", 
    57 => "00111110000100000000010011111011", 
    58 => "10111110010001000111000001100101", 
    59 => "00111101100000110100000111101111", 
    60 => "10111010110100001000000101100010", 
    61 => "00111110001010111100110110111100", 
    62 => "10111100000011101100011001000001", 
    63 => "00111110001011000110011000001010", 
    64 => "00111101010011110111101110000011", 
    65 => "10111100010100101010110011100001", 
    66 => "10111101000100110001000011101001", 
    67 => "00111110001100101111000010011110", 
    68 => "00111101100110001110011011101100", 
    69 => "10111011101110111010010000000110", 
    70 => "10111100110101010000110010100010", 
    71 => "10111101110100111010111011101111", 
    72 => "10111100100110011101111011001110", 
    73 => "10111011010001010101011110111000", 
    74 => "10111101100100010110100001011000", 
    75 => "00111110001100000100011001000001", 
    76 => "00111101110011110100000111110010", 
    77 => "00111101011011010000101111101101", 
    78 => "10111011100001010000110100110000", 
    79 => "10111101111111001101010011101101", 
    80 => "10111110010001001011010000000111", 
    81 => "00111101110100010001101011011010", 
    82 => "10111101001010100100110001010100", 
    83 => "00111101000000111100101000111111", 
    84 => "10111100100011100001001000010001", 
    85 => "00111110010010111100111101001111", 
    86 => "00111010100111001010111111111010", 
    87 => "00111101110011110010000111110111", 
    88 => "10111101011010111001111011101010", 
    89 => "00111110010011001100010010101100", 
    90 => "00111101101000010011001011101011", 
    91 => "00111100111101010111111000110001", 
    92 => "00111101001001011101100000000001", 
    93 => "00111100110000001001100000001011", 
    94 => "10111101110101011100111000011000", 
    95 => "00111101111101010110100111110101", 
    96 => "10111100110001010000110100011011", 
    97 => "10111100100111101111100010110100", 
    98 => "00111101110011101000010110111010", 
    99 => "00111100100000000010111100110000", 
    100 => "00111101111010001100101111010001", 
    101 => "00111100110001011011111010111100", 
    102 => "00111110001111010110010000001111", 
    103 => "10111100011000100011000110111001", 
    104 => "00111101010011010100110000110100", 
    105 => "00111100101000110000010001000111", 
    106 => "00111110000110101010001010100001", 
    107 => "10111101001000011010101011100000", 
    108 => "10111101000010111111110010001110", 
    109 => "10111110001100001100001100001001", 
    110 => "10111100111011110000011000010010", 
    111 => "00111100100110110011001011110111", 
    112 => "10111101101010100001001010101000", 
    113 => "00111100101010101000110111011110", 
    114 => "00111101111100101110101001010011", 
    115 => "00111110001010101100000010000011", 
    116 => "00111101101110100100111010001000", 
    117 => "10111101101110101011101001111100", 
    118 => "10111100110001010101010111100000", 
    119 => "00111110001110101011010110000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_10 is
    component inference_conv2d_f3_4_0_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_10_rom_U :  component inference_conv2d_f3_4_0_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


