-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111011001001111110110110", 
    1 => "10111100001001110010000101000010", 
    2 => "10111011111100110110111011001101", 
    3 => "00111101010100100101010111011000", 
    4 => "10111101111001000100100011001111", 
    5 => "10111101011100111011101000100111", 
    6 => "10111100111110111010000000011111", 
    7 => "00111110010010000110010000000010", 
    8 => "00111101100011101001111010101111", 
    9 => "10111101101011001011011010010010", 
    10 => "00111010100001010011000101011000", 
    11 => "10111100100101100111001010011110", 
    12 => "10111100111111110000010111001111", 
    13 => "00111100101101011101001001001010", 
    14 => "10111101111001111010011111001010", 
    15 => "00111101111001001101111101001000", 
    16 => "10111101110000100000101011111010", 
    17 => "00111100010101110000010011001010", 
    18 => "10111101010100011000110111111101", 
    19 => "10111101011101000000100001111011", 
    20 => "10111110010001011100110100001100", 
    21 => "00111100000111111100100011001000", 
    22 => "10111101010100001011100110100110", 
    23 => "10111101010011100101111011101110", 
    24 => "10111101100110010001111011101011", 
    25 => "00111011100000001000000000101110", 
    26 => "10111101101100110010111110100011", 
    27 => "10111001001000011000100100000101", 
    28 => "00111101010100111100101110001111", 
    29 => "00111110000000010010011010100110", 
    30 => "10111010100101001100010011110100", 
    31 => "10111110000100100101011110000110", 
    32 => "10111100000111011101110010011111", 
    33 => "10111110001100001010000011110101", 
    34 => "00111110010011011000111001000011", 
    35 => "00111101011101010101101101111100", 
    36 => "10111101100100100011100010010111", 
    37 => "00111101010100100101101111101101", 
    38 => "00111101101100010101101001001011", 
    39 => "00111011011101100110000000011001", 
    40 => "00111110001101110110010100110100", 
    41 => "10111101000111100000111100101111", 
    42 => "10111101100000010100011111110001", 
    43 => "10111101111001010001011111100111", 
    44 => "10111101100000101110100111101000", 
    45 => "10111101010100000010110001001101", 
    46 => "10111110000111100101011011001101", 
    47 => "10111101111001110100011011001100", 
    48 => "10111101001001101111110110110110", 
    49 => "00111100101010110001111100110011", 
    50 => "00111101110110011011000100110001", 
    51 => "10111101000110011001110010001001", 
    52 => "10111110001110110000011101001010", 
    53 => "00111010100001110110000100001000", 
    54 => "10111101111101111111001100000110", 
    55 => "10111101111100101000100001001000", 
    56 => "10111100101000111001001111101110", 
    57 => "10111101011111000110111110100010", 
    58 => "00111100000111110111100001000000", 
    59 => "00111110010010001111001000010111", 
    60 => "00111100010011110101101001000110", 
    61 => "10111100000000001100001010111110", 
    62 => "00111011101001110011101011010111", 
    63 => "00111101110100011010110010011011", 
    64 => "00111101101010101001000110001001", 
    65 => "00111110000100101111111111010010", 
    66 => "00111101110101100011101100100101", 
    67 => "10111101101010101101000101010111", 
    68 => "00111101000101100011001011011101", 
    69 => "10111101001101010110011010110100", 
    70 => "10111101100110010000000011100000", 
    71 => "00111101101110000111111111001100", 
    72 => "00111101101000011011111111110100", 
    73 => "10111101111011010100010101100011", 
    74 => "00111100110101100010100101101101", 
    75 => "10111101111011001100101111000000", 
    76 => "10111101111000100110001101010010", 
    77 => "00111101101110110011001010001011", 
    78 => "00111101101000000100101001110011", 
    79 => "00111110001010101110001101100001", 
    80 => "10111010110010000101111001010011", 
    81 => "00111100111110110001100001101111", 
    82 => "10111101110011100000100111111111", 
    83 => "00111100010110010010010001011111", 
    84 => "10111100011001010101110011100111", 
    85 => "10111101111001001110110001100011", 
    86 => "00111101011100000011001001100010", 
    87 => "10111101011100000100101110101000", 
    88 => "00111101111110001010010011000010", 
    89 => "00111101010011010111110011000000", 
    90 => "10111101101111101111110101101100", 
    91 => "10111100100101110111111100001101", 
    92 => "00111101101110100100100110001101", 
    93 => "00111101011011111101100001010000", 
    94 => "10111101001110111100110001000100", 
    95 => "00111101100110100111010010011000", 
    96 => "00111101001101111100100101100101", 
    97 => "10111101011101000110100001010010", 
    98 => "10111100001001000111100000011010", 
    99 => "00111101000100010111011001100101", 
    100 => "10111101010101001101010101111010", 
    101 => "00111011011011101101011010001101", 
    102 => "10111101000000011100011011000100", 
    103 => "00111101110011101111011101111111", 
    104 => "00111100110111111011110011111111", 
    105 => "10111101011111111001010101011100", 
    106 => "00111101000011001101110100101000", 
    107 => "10111011001001001101001001011101", 
    108 => "10111100111110011111000011110010", 
    109 => "10111101001011011001110001101011", 
    110 => "00111101000011111110000010110011", 
    111 => "10111101001110010101000101011010", 
    112 => "00111100000101101101110110000111", 
    113 => "00111101011011011110010110110111", 
    114 => "00111101100110110100101100110000", 
    115 => "00111101101110101111100000110001", 
    116 => "00111011111110000010101010011111", 
    117 => "00111101001100001100111001101010", 
    118 => "10111101001111110110110001110111", 
    119 => "10111101001011101011000001100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_8 is
    component inference_conv2d_f3_2_1_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_8_rom_U :  component inference_conv2d_f3_2_1_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


