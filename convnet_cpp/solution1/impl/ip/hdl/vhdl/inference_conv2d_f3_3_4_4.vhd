-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110100100100011111001011", 
    1 => "00111100100000001101000110110111", 
    2 => "10111101111010000111111010111111", 
    3 => "10111101100010000110100010000100", 
    4 => "10111010100111110001100110110110", 
    5 => "10111110000001011011100011011100", 
    6 => "00111100000101100011100100100111", 
    7 => "10111101100001111101111011111111", 
    8 => "00111101010111000000001110000111", 
    9 => "10111101111001001111111000110111", 
    10 => "00111010100100101011001111001100", 
    11 => "10111101100101010100000100010000", 
    12 => "10111101111010001010100010110001", 
    13 => "10111110010100010110001000101000", 
    14 => "00111101100101111101100001111111", 
    15 => "00111101100101011011011101100101", 
    16 => "00111101110001111111001101111111", 
    17 => "10111101010010011101100001000001", 
    18 => "00111110001100101100001001111010", 
    19 => "10111101100111101111010011101101", 
    20 => "00111101111110001000000100011011", 
    21 => "00111101111011111010100000101111", 
    22 => "10111101100110000010110101101110", 
    23 => "00111110000011011110100000101101", 
    24 => "10111110000000111011001110100111", 
    25 => "00111101010001000001100011100100", 
    26 => "00111100011111100000110011100001", 
    27 => "00111110010000011110000000111111", 
    28 => "10111101100000110011111001111001", 
    29 => "10111100100011110101011111110111", 
    30 => "10111101110101101001111101001001", 
    31 => "00111100010100000000100001010110", 
    32 => "00111010100000100101101010010110", 
    33 => "00111101001111001010111111101001", 
    34 => "00111110000101111011001100010000", 
    35 => "10111101101011111010111001011110", 
    36 => "00111100111011011101111001100000", 
    37 => "00111100111100010001010101001100", 
    38 => "10111100011001110000000100101011", 
    39 => "00111101110000110011101001111101", 
    40 => "00111110000101000111111000000111", 
    41 => "00111101000110100101110110010100", 
    42 => "10111100111000101111001110110101", 
    43 => "00111101010101000101000111111100", 
    44 => "00111101100000100011011011011100", 
    45 => "00111101100110111001001110100101", 
    46 => "00111110001100011100010011111100", 
    47 => "10111101000011110011000010001010", 
    48 => "00111101100100010110010010011111", 
    49 => "10111101100010111111110011000011", 
    50 => "10111101100101000110010010011001", 
    51 => "00111110000010000010110000101100", 
    52 => "10111101100001110101101110101001", 
    53 => "10111101110100010111011110100111", 
    54 => "10111101001110111011010111010100", 
    55 => "10111110000100111010100000011110", 
    56 => "00111101100000101010110011000110", 
    57 => "10111101000011011100110000100001", 
    58 => "00111101000010111111110010001110", 
    59 => "00111011101110001100011010000110", 
    60 => "10111101110011101110011010111000", 
    61 => "00111110000100001011111100011010", 
    62 => "00111101101100010110111110101111", 
    63 => "00111100111100100010101111001100", 
    64 => "10111100100101110001010110010001", 
    65 => "10111101111011011100010001000100", 
    66 => "00111101010000100011100101100000", 
    67 => "00111101001010100111101100011001", 
    68 => "00111011111110111111100011001010", 
    69 => "10111110000000100010111000011011", 
    70 => "00111100000011011011001000111010", 
    71 => "00111101111110100111001000100010", 
    72 => "10111101010001000011010011001000", 
    73 => "00111110000110001001100000101101", 
    74 => "10111101111110111001111100010010", 
    75 => "00111101110011000001011011111010", 
    76 => "00111101100100010110101100111010", 
    77 => "00111101110000010111001101011010", 
    78 => "10111110001010110111100001000110", 
    79 => "00111101100101101101011011110111", 
    80 => "00111101000111111011001001001101", 
    81 => "10111011000010110000011011011010", 
    82 => "10111101110111111011110001011110", 
    83 => "10111110000000110000111100000110", 
    84 => "00111101100010000011111110011111", 
    85 => "10111101100110011011101110010011", 
    86 => "10111101111101000110000000100100", 
    87 => "00111110000100111101101010110110", 
    88 => "10111101111011000011110010011111", 
    89 => "00111101011010010001011111110010", 
    90 => "00111110001001010100000100010000", 
    91 => "10111101110100110001001000101011", 
    92 => "10111101010010110010111110101001", 
    93 => "00111101100011001100100110001101", 
    94 => "00111010001001000111100000001001", 
    95 => "10111110001000101001111010010000", 
    96 => "00111100111000100100000000110001", 
    97 => "10111101011000011100111100101000", 
    98 => "00111101101000111101010011110001", 
    99 => "10111011101011100111110011010110", 
    100 => "10111101001110110010110011000111", 
    101 => "10111110001110101011101100000010", 
    102 => "00111101110100111110000101000011", 
    103 => "00111101101101001010111100110100", 
    104 => "10111110001111010010011100111101", 
    105 => "10111101100011001100010001110111", 
    106 => "10111100110101010100000001101111", 
    107 => "10111101100100000000101001010100", 
    108 => "10111101000100001010100101001011", 
    109 => "10111101111010111111110010101000", 
    110 => "00111101111101001000111101010100", 
    111 => "10111101101001110010110110111100", 
    112 => "10111100001111011000111101000010", 
    113 => "10111110001011010110111001001000", 
    114 => "10111100100101111001111010111000", 
    115 => "00111110000000000100100000010111", 
    116 => "10111101001011110011100000010111", 
    117 => "00111110001111011111001000100100", 
    118 => "00111101101011001110110010000101", 
    119 => "00111101001100001011001010100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_4 is
    component inference_conv2d_f3_3_4_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_4_rom_U :  component inference_conv2d_f3_3_4_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


