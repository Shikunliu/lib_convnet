-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000011110000000010111001", 
    1 => "10111101111100010011011000011110", 
    2 => "00111101001000111001101110010110", 
    3 => "00111101011101110111000101010001", 
    4 => "10111110001011111101101110010000", 
    5 => "10111101101011111101011110100001", 
    6 => "00111101000111010000001101111100", 
    7 => "00111101101001001100011010100100", 
    8 => "10111101000100110110011011100101", 
    9 => "00111100110110011010000011110001", 
    10 => "00111100001101011101011011100111", 
    11 => "00111101010110111100000100100111", 
    12 => "10111101100100000000011100000111", 
    13 => "00111100001011111001011011000111", 
    14 => "00111110000100001001000001110001", 
    15 => "10111101001111101110110010001010", 
    16 => "00111100110101000000011011101000", 
    17 => "00111101101110111001101000010111", 
    18 => "00111101001000000010000000110001", 
    19 => "10111100010011000011110011101111", 
    20 => "00111110000010101100010001110010", 
    21 => "10111101010101110010111011010110", 
    22 => "00111101010010011111000011001010", 
    23 => "00111110000001010110100100101011", 
    24 => "10111110000010100101001100110011", 
    25 => "00111100111000100001110011000000", 
    26 => "10111100001110010010000001001000", 
    27 => "10111110000111110010001111001101", 
    28 => "10111100100111100000001001001010", 
    29 => "00111101100000100100000101001011", 
    30 => "10111101100100010100001111110101", 
    31 => "10111101101101111000111010101101", 
    32 => "10111101110000001010011010011110", 
    33 => "10111100111001001100100000110110", 
    34 => "10111100110111000010000010010010", 
    35 => "10111101000001100010001000111110", 
    36 => "10111100110011010100011000111010", 
    37 => "10111110001101010110000110010001", 
    38 => "10111010100010000110110000100000", 
    39 => "00111101100101001011000011100010", 
    40 => "00111101111110111001100011001000", 
    41 => "00111011110011000001001000010010", 
    42 => "10111101100110011000001001010010", 
    43 => "10111001011110111110100011101111", 
    44 => "10111101001110110111011111110110", 
    45 => "00111100100010101011001001110110", 
    46 => "10111101011010011101110110110100", 
    47 => "00111100011111100000010101010100", 
    48 => "00111110000101101010111110001010", 
    49 => "00111101110001010100101011010000", 
    50 => "10111101100110000010010111000110", 
    51 => "10111101110011101110010000011001", 
    52 => "10111101011010101100100111011000", 
    53 => "10111101000001010101001010111011", 
    54 => "00111110000100110101000001001100", 
    55 => "00111100110011110010000000101110", 
    56 => "00111101101110001110010100111111", 
    57 => "10111110010010000111011101101000", 
    58 => "10111110000111011010001100111100", 
    59 => "10111101100010011010001100001010", 
    60 => "10111101100111000100100111010101", 
    61 => "00111101001110010010100000001010", 
    62 => "10111101001101110100001000000110", 
    63 => "00111100111000111011010101000111", 
    64 => "10111100101000111000000001101101", 
    65 => "10111101011010101001110101100010", 
    66 => "00111100101100011010001000000100", 
    67 => "00111110000111111011100101111100", 
    68 => "10111101110110010001110101011000", 
    69 => "10111101111110011010111000001100", 
    70 => "10111101101001100101000001101111", 
    71 => "10111101101001100010011011001110", 
    72 => "10111100110111011001101000001111", 
    73 => "00111101011100001000000010011100", 
    74 => "10111110010010101000011011010111", 
    75 => "10111101110001010100101101100100", 
    76 => "00111110000001011010111011100110", 
    77 => "00111101100000011010001101000110", 
    78 => "10111100101010010111001100101011", 
    79 => "00111100010011011101110100000011", 
    80 => "00111100100011101101110011011101", 
    81 => "10111101101001001100111110011011", 
    82 => "10111101100100000110110011001010", 
    83 => "10111101111111010111110110111111", 
    84 => "10111101110111010010111010010100", 
    85 => "10111110000101100100000100101101", 
    86 => "10111101110110001110100001100100", 
    87 => "10111100101000001110000100100001", 
    88 => "00111101111010110011101010101100", 
    89 => "00111101010000010101111011011011", 
    90 => "10111101001100001001000100010010", 
    91 => "00111101100001101011011011100001", 
    92 => "10111100111010000001000011000000", 
    93 => "10111101100010110100000010011000", 
    94 => "10111101110000010111111001010000", 
    95 => "10111010011100001100101111001001", 
    96 => "00111101010101101001100000001101", 
    97 => "00111101100011101100010111011001", 
    98 => "10111110001111001001110101011010", 
    99 => "00111011110101101000100101001111", 
    100 => "10111101110100100001001001010001", 
    101 => "10111101000010110100111001111101", 
    102 => "10111101010001100010101010111100", 
    103 => "10111101111110010011110001000111", 
    104 => "10111101010110010001101110010000", 
    105 => "00111100111101000111010110001000", 
    106 => "00111010111110010101100010011100", 
    107 => "00111101110000001111011100110100", 
    108 => "00111101111000000101110001000110", 
    109 => "10111101110001111000111011010101", 
    110 => "00111011001110110001101111001010", 
    111 => "00111101011001010101000100001101", 
    112 => "10111101001000000100010001111001", 
    113 => "00111101001101101000101110101101", 
    114 => "00111101010010000001011001101010", 
    115 => "00111110001111100001001001100010", 
    116 => "10111101010011011010100100011011", 
    117 => "10111110000100101101100110001100", 
    118 => "00111100010011111111001010000111", 
    119 => "00111101100000010100101000001010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_12 is
    component inference_conv2d_f3_0_3_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_12_rom_U :  component inference_conv2d_f3_0_3_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


