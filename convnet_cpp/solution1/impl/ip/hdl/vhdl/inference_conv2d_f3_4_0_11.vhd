-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101100011110100111110010", 
    1 => "10111101010000110011110011100110", 
    2 => "10111101101101110000001010110001", 
    3 => "10111101100110111001110111011110", 
    4 => "00111100011111010011101100101010", 
    5 => "10111101110111001000010000110000", 
    6 => "00111101010001100101101010101000", 
    7 => "10111110000100001100001100001001", 
    8 => "10111110000101101011001101111000", 
    9 => "00111101111010010011111110101111", 
    10 => "10111101110101011110001100010001", 
    11 => "00111101100111011111111101001100", 
    12 => "00111100111010110001010000010101", 
    13 => "10111100111000011101110110100000", 
    14 => "00111010001011111001000001001000", 
    15 => "10111101000010011111010110111000", 
    16 => "10111101101001011000110111111001", 
    17 => "10111100110000100101010011011001", 
    18 => "00111101110100001111011000100111", 
    19 => "00111010100001100001111000111101", 
    20 => "00111101010101111110010111101011", 
    21 => "10111101011000111101000010100101", 
    22 => "00111101101101100001001000011000", 
    23 => "10111110000100001111111111011010", 
    24 => "10111110000011100101100110110000", 
    25 => "00111110000000011100100001100101", 
    26 => "00111100110111110010011000000000", 
    27 => "10111101000001000110011000010001", 
    28 => "10111101000010001110110000111000", 
    29 => "10111101110010001010101101101010", 
    30 => "00111101011000111010101010010101", 
    31 => "10111101101011110010101001110101", 
    32 => "00111110001110111100111010000101", 
    33 => "00111101000110001010110111100001", 
    34 => "00111100100010000000011001011111", 
    35 => "00111100110000001011101000000100", 
    36 => "10111101101001100001100111001101", 
    37 => "10111100100100000011111000000110", 
    38 => "10111101011110011010110000101001", 
    39 => "00111100111001100011100000001110", 
    40 => "00111100011100010011111010011100", 
    41 => "10111011111001000010010101011001", 
    42 => "10111101000101100100000000101110", 
    43 => "10111100101101100110111001010001", 
    44 => "10111101100001100000001111111110", 
    45 => "00111101100010010100110101010001", 
    46 => "10111101011101000010110000100010", 
    47 => "10111101011011110010011011111111", 
    48 => "00111110001000010110011010011101", 
    49 => "10111100010010111100111101110111", 
    50 => "00111101101110010111111001001001", 
    51 => "00111010000100111110100101011111", 
    52 => "10111011010010011111000111010001", 
    53 => "00111110001011001011111000011111", 
    54 => "00111011010001011011111010010001", 
    55 => "00111100101001111110110001111000", 
    56 => "00111101100100011111010101010011", 
    57 => "10111101011111010001000001100001", 
    58 => "00111100001101100100100111010100", 
    59 => "10111110010001111010101010101100", 
    60 => "00111101110101001111110001100001", 
    61 => "00111100000110001010011101101100", 
    62 => "00111101001011010111100111101011", 
    63 => "10111100100000110101001011010001", 
    64 => "00111101100010111001110011111010", 
    65 => "00111101110010000010010010011111", 
    66 => "10111100110100100001001000011100", 
    67 => "00111101011010101110111011110111", 
    68 => "00111101101101010110100000101100", 
    69 => "00111101101010011011010100111011", 
    70 => "10111101000111001101100101010101", 
    71 => "00111101100100111011101001101010", 
    72 => "00111110001011001011111000011111", 
    73 => "00111101010011111111111101101100", 
    74 => "00111100111111111011111011000111", 
    75 => "10111101101001100100111011011100", 
    76 => "10111100100001101111010011100111", 
    77 => "10111101001001001010010110000001", 
    78 => "00111110001111111001000101100000", 
    79 => "00111101000110100101010100010110", 
    80 => "10111101110100100101010101101101", 
    81 => "00111101110111001000101001111010", 
    82 => "00111110000001110101100110101011", 
    83 => "00111110000110010010100000010111", 
    84 => "00111110000111010111000101101101", 
    85 => "10111101000000011111110001011010", 
    86 => "10111010001000101000001101000101", 
    87 => "00111101000000011110101111111110", 
    88 => "10111101110000000000100100011111", 
    89 => "00111101111111111111010110000100", 
    90 => "10111101110001101001000111000010", 
    91 => "00111010111100110110111101001110", 
    92 => "00111101010000101111001000001000", 
    93 => "00111010111110111001011100010000", 
    94 => "00111101100000101100000011110101", 
    95 => "10111011001111000011110010110010", 
    96 => "10111110000101101100101101010011", 
    97 => "10111100110010111111100100110011", 
    98 => "00111101100001001000100011101110", 
    99 => "10111101111100001011010100100100", 
    100 => "10111101110010001011110111111010", 
    101 => "10111100111111010001010110100000", 
    102 => "00111101100100001000011000111000", 
    103 => "00111011111111100000111100100101", 
    104 => "00111100110100101100110000100000", 
    105 => "10111101100101110110000001000111", 
    106 => "10111110001110100010101110011101", 
    107 => "00111100011000010100010010111110", 
    108 => "10111101111001010001110010011111", 
    109 => "00111110001101101011101000000110", 
    110 => "10111100001011010001101000010100", 
    111 => "10111101000000100000011001010000", 
    112 => "10111100011000110010000001100001", 
    113 => "10111011110101001110110000101011", 
    114 => "10111101010101000001010111001100", 
    115 => "10111101100100011011001110100010", 
    116 => "00111101001110101000011001011110", 
    117 => "00111101100110110111000011010100", 
    118 => "00111110000010110010101111111110", 
    119 => "10111101101100001001001100101011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_11 is
    component inference_conv2d_f3_4_0_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_11_rom_U :  component inference_conv2d_f3_4_0_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


