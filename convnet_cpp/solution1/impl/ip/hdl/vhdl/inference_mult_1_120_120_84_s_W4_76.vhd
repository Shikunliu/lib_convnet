-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_76_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_76_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000111011011110011101101", 
    1 => "10111100111111001101010001100111", 
    2 => "00111100010001111110001011101110", 
    3 => "00111101001111000001010011010100", 
    4 => "00111100100010010000001011011110", 
    5 => "10111101101111010100110001011100", 
    6 => "00111100111111001110111110101010", 
    7 => "00111011101110000110111011110010", 
    8 => "10111100100100000000000100110101", 
    9 => "10111101000000101111011000111010", 
    10 => "00111101110110011011101100101000", 
    11 => "00111110000011111010100010110101", 
    12 => "00111101111010101111100110101001", 
    13 => "00111101100000111101101111011101", 
    14 => "10111110010100011000010110001100", 
    15 => "00111101000010011011111000100101", 
    16 => "10111101000001011010010011110000", 
    17 => "10111101110000010010000110000011", 
    18 => "10111101000100001100010011000100", 
    19 => "00111101011000100110001110100010", 
    20 => "10111110011010011110110101111100", 
    21 => "00111101111111001000110110100000", 
    22 => "00111101111000111011010011110110", 
    23 => "00111100001001011110101000001010", 
    24 => "10111101011111010110111100010001", 
    25 => "10111110000000000011000011000010", 
    26 => "00111101101110100101101000111001", 
    27 => "10111100110111011000011011111010", 
    28 => "00111110000111100110011000000010", 
    29 => "10111101000100011101101101000100", 
    30 => "10111110001101110010011101010111", 
    31 => "10111110000101001010001111000110", 
    32 => "00111101101000001011100111000001", 
    33 => "10111101011100001100010010001110", 
    34 => "10111110000000000101100100100001", 
    35 => "10111101101000000110110000001110", 
    36 => "10111110000001010010111001110011", 
    37 => "10111100110010100000100101101110", 
    38 => "10111101001101011000010001000110", 
    39 => "10111100110010100101000101011101", 
    40 => "00111101000011000011001011011110", 
    41 => "00111100101110110011010010001001", 
    42 => "10111101001101010111111001100111", 
    43 => "00111110000000011000000010010001", 
    44 => "00111110000000110100011010011001", 
    45 => "10111110000001001011000010011111", 
    46 => "00111101010101001000001100001111", 
    47 => "10111100011111101100011100011011", 
    48 => "00111101110111011101000010010110", 
    49 => "00111100011100101111111011111011", 
    50 => "00111101111010101011100010100110", 
    51 => "10111101011000110111100101001100", 
    52 => "10111101111111110010000000100001", 
    53 => "00111100100100000101010101001101", 
    54 => "00111100000101101110001011110000", 
    55 => "10111110001001111010100000001101", 
    56 => "10111100110010000011010111000100", 
    57 => "00111011111011100111101000110001", 
    58 => "00111101101000110001101110000001", 
    59 => "10111110000100000011001101100001", 
    60 => "10111110000111100101011000000100", 
    61 => "00111110000110010101001001001100", 
    62 => "00111101100111000111000110111011", 
    63 => "00111101101011101000110110111111", 
    64 => "10111100010100010000011101011010", 
    65 => "10111101100011011110011110110101", 
    66 => "00111101111111110100101100011111", 
    67 => "10111110000001001101011100101000", 
    68 => "00111101000101000010011001111000", 
    69 => "00111110010101110101101001110101", 
    70 => "00111101100111001000010110100111", 
    71 => "10111100111011111000000000100000", 
    72 => "00111100110111111000000110100110", 
    73 => "00111101011010011011101011001010", 
    74 => "10111100100011000110000100000010", 
    75 => "10111100111000100000001010001001", 
    76 => "10111110000110001010101100001101", 
    77 => "10111101101001101000111110001110", 
    78 => "10111101001000111101100011101101", 
    79 => "10111011110000001111011110101100", 
    80 => "10111010110111010011011000100111", 
    81 => "10111101000101110110110101101111", 
    82 => "10111101110110101000100000100111", 
    83 => "00111101011011011101000110010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_76 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_76 is
    component inference_mult_1_120_120_84_s_W4_76_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_76_rom_U :  component inference_mult_1_120_120_84_s_W4_76_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


