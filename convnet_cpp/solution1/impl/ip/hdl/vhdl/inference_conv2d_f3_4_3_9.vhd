-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111110000001110011011101", 
    1 => "10111101100011010011110001111001", 
    2 => "00111101001001110000000101000110", 
    3 => "00111011000110110101010010000101", 
    4 => "10111101010001111010011001101101", 
    5 => "10111101100001101111001100101100", 
    6 => "10111110010011010001001011001011", 
    7 => "00111101010101011100011100010010", 
    8 => "00111101110000000011010010111110", 
    9 => "00111101010011101010101010001000", 
    10 => "10111101111001100111110101111000", 
    11 => "10111101110111110000000010101100", 
    12 => "10111101110101100111110010101111", 
    13 => "00111101011010010110100110111100", 
    14 => "00111101100101001111111110101111", 
    15 => "00111100000101001111101010011001", 
    16 => "10111101000110010010010110100001", 
    17 => "10111101101010111101110011100011", 
    18 => "00111100001100011101010111010001", 
    19 => "00111101101010001001000010101101", 
    20 => "00111101100111011111111101100111", 
    21 => "10111011111111100111110000110010", 
    22 => "00111101111101010111100110101111", 
    23 => "00111110000001100010001110001110", 
    24 => "10111110001000011110011010001010", 
    25 => "00111110000011110111010001000111", 
    26 => "10111100110000011001010101100001", 
    27 => "00111101000010010010100101110100", 
    28 => "10111101111110110010101000101000", 
    29 => "10111101110010011101011011001001", 
    30 => "00111101101110101111111101111011", 
    31 => "10111101001110010101110010101110", 
    32 => "10111101000011100111101100100011", 
    33 => "00111101111100011010111100111010", 
    34 => "00111101001010011000101011000011", 
    35 => "00111101111011001100100010011011", 
    36 => "00111110010010110000101110111111", 
    37 => "00111110001001110001110000010001", 
    38 => "00111010010101100000110010001001", 
    39 => "10111100101010001101110001100010", 
    40 => "10111110000101000110010110100101", 
    41 => "00111110000001001011001111000100", 
    42 => "10111101100011110001001100100000", 
    43 => "00111011101101101110100100001011", 
    44 => "00111100011101110011011100000100", 
    45 => "10111101001011111001001110111100", 
    46 => "10111101010001111100110011101000", 
    47 => "10111101000111101000011001101000", 
    48 => "00111110001001101111000111011100", 
    49 => "10111110001010111110100111001001", 
    50 => "00111101001110100011111011000000", 
    51 => "00111101100011101011011100111000", 
    52 => "00111100010110001111110111001000", 
    53 => "10111101001011010001011010111001", 
    54 => "00111101100010011011111101100111", 
    55 => "10111011000101110101101111111101", 
    56 => "10111110001111010011110110000110", 
    57 => "00111110000101110111101001110000", 
    58 => "10111110000110001010101101010000", 
    59 => "10111100011110011101101111111010", 
    60 => "10111100100011101111111011010110", 
    61 => "10111100001001000101000111101111", 
    62 => "00111110000100111111010011101101", 
    63 => "10111110001101100001010000010110", 
    64 => "10111110010101100001101001100001", 
    65 => "10111101011101111110100000000100", 
    66 => "10111101101111100101100011001011", 
    67 => "00111101111001101000010111011011", 
    68 => "00111110000100011101101000111000", 
    69 => "10111101100101010100100101001011", 
    70 => "10111101100100100111111011011000", 
    71 => "00111101101010110101110101010100", 
    72 => "00111101110000010000000101111010", 
    73 => "10111110000100110000110101110100", 
    74 => "10111011001100100111111111000101", 
    75 => "00111101101000000111001111010001", 
    76 => "00111110010001111000110000000000", 
    77 => "10111101111000000110101101111011", 
    78 => "10111110000110101001001110101111", 
    79 => "10111101001101110111100101111110", 
    80 => "00111100111000111000011111000101", 
    81 => "10111101101001001110111000000011", 
    82 => "10111110000010110110010000010111", 
    83 => "00111101111010110110111110100000", 
    84 => "10111101011110001100010000000001", 
    85 => "10111101110100100110010100101000", 
    86 => "00111101000100001010000110111110", 
    87 => "00111110000101000011010010100000", 
    88 => "00111110001100100001010101110111", 
    89 => "10111101100001110010001011000111", 
    90 => "10111110010000111111001000001010", 
    91 => "10111101100100101001100001111100", 
    92 => "10111101110101100001100010001011", 
    93 => "00111101111000000000110010010101", 
    94 => "00111101010100010010001011010011", 
    95 => "10111100101101010000001010101100", 
    96 => "00111101101001000110111110101001", 
    97 => "10111100010011101111110100101001", 
    98 => "00111101111110101111001000001111", 
    99 => "00111101000110111011000100011100", 
    100 => "10111101001010010001011110000110", 
    101 => "00111110001001001011110101110111", 
    102 => "10111011011111001100110111000110", 
    103 => "10111101101011111100100000011100", 
    104 => "00111100000111101000101100110000", 
    105 => "00111110001010011000000000101100", 
    106 => "10111101001000001010111101010010", 
    107 => "10111101100110000010110000101100", 
    108 => "00111110001110111100110001101100", 
    109 => "10111101000011111110111010001011", 
    110 => "10111110000100001010010100100111", 
    111 => "00111101101011101011111110110110", 
    112 => "10111110001000000110000001111000", 
    113 => "10111101100111101011111110001110", 
    114 => "10111100010111010000000010001100", 
    115 => "00111110010001011100111111101110", 
    116 => "10111100110001111101010000001010", 
    117 => "00111101000010100101011101010111", 
    118 => "10111100010111100101000000010111", 
    119 => "00111100101010011001111100110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_9 is
    component inference_conv2d_f3_4_3_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_9_rom_U :  component inference_conv2d_f3_4_3_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


