-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110010010011110000111001", 
    1 => "10111011110001111100100010000001", 
    2 => "10111110001011100010101010000000", 
    3 => "10111101101000100100010010001011", 
    4 => "00111101001000010100100100001011", 
    5 => "00111101110100110110001101101111", 
    6 => "00111110000011110111111100000110", 
    7 => "10111110001001100101010001010000", 
    8 => "10111101100011100001111101111101", 
    9 => "10111101110111001111010001100010", 
    10 => "10111110001101011101111101100101", 
    11 => "10111110000011011110100010110100", 
    12 => "00111101001011000101001000000011", 
    13 => "00111101001100101010100110000110", 
    14 => "00111101110110100011011001011101", 
    15 => "10111101100011101001110110111101", 
    16 => "00111101100010110010001110011010", 
    17 => "00111100110110001000101000111011", 
    18 => "00111110001001110111101010110011", 
    19 => "00111110100100100001000000010111", 
    20 => "00111110001111001000000111010100", 
    21 => "00111100010000001000111100111100", 
    22 => "10111110001010110111001111010010", 
    23 => "10111101001111111011000110010001", 
    24 => "00111101101001110000010100011010", 
    25 => "00111101101110100001001100111100", 
    26 => "10111110001000010000101010011010", 
    27 => "00111101110111101000111001100001", 
    28 => "10111100100110011100001110001011", 
    29 => "00111101100010000111000010110010", 
    30 => "10111101100011010001110101100010", 
    31 => "10111110000110001100100101110101", 
    32 => "00111101111010111011010001001110", 
    33 => "00111101101000110011011011010001", 
    34 => "10111101110110010001100110101100", 
    35 => "10111101100111010010011101011000", 
    36 => "00111101000101000000001110101000", 
    37 => "10111101010010000111110001110001", 
    38 => "10111101001011100111100101011010", 
    39 => "00111101010101100111111100011000", 
    40 => "00111101100101111001101001101011", 
    41 => "00111100100111100001010011110100", 
    42 => "10111101000010011101100001011011", 
    43 => "00111101101011001010000000111100", 
    44 => "10111101011101011110000000100001", 
    45 => "00111101010110110010101110100000", 
    46 => "10111101000000011001100100101000", 
    47 => "00111101100111101011000110011100", 
    48 => "00111011110110010000011000010110", 
    49 => "00111100101000001000000100010100", 
    50 => "10111101001000101001010010011010", 
    51 => "00111110001100100001010011110000", 
    52 => "00111100100011011000111011111111", 
    53 => "10111101010100100001100010110111", 
    54 => "10111100110101001100101001011101", 
    55 => "00111100110101000101111000100110", 
    56 => "00111100100111111010000100011011", 
    57 => "10111110011001010101001101101001", 
    58 => "10111101000110101110001001101111", 
    59 => "10111101000110111101000001000000", 
    60 => "00111101100011000001010011111100", 
    61 => "00111110010010100100001010101111", 
    62 => "10111101111110100010000011011110", 
    63 => "10111101011011111000100100100101", 
    64 => "10111110010111101110011100111110", 
    65 => "00111101010110011010000100001011", 
    66 => "00111101100101000110100101101100", 
    67 => "10111101101011001010001010100110", 
    68 => "00111110010001011110111111101001", 
    69 => "00111101111010011101101111101100", 
    70 => "10111110000011100110011111010111", 
    71 => "00111011110100110010110010100011", 
    72 => "10111110010111010111100000111110", 
    73 => "10111101100101011100101011001011", 
    74 => "10111110000011010100111011010011", 
    75 => "00111101101001111001010001100100", 
    76 => "10111101100110111110011000000010", 
    77 => "00111101101001101100000101101011", 
    78 => "10111110010010100100001110111011", 
    79 => "00111101111000100011011111001110", 
    80 => "00111101100010000011100100000100", 
    81 => "10111100010111100101000101011010", 
    82 => "00111101101100101000101110010110", 
    83 => "10111011101110000100101011110101", 
    84 => "00111100100100110001011010010011", 
    85 => "00111101110001000110011100010000", 
    86 => "10111101110110100101101000000100", 
    87 => "00111101111111100110000000111101", 
    88 => "00111110000010110100000010110011", 
    89 => "00111110000000000000001110101100", 
    90 => "10111100110010011001101001111110", 
    91 => "00111110000001011101010001100011", 
    92 => "00111101100001101101100101100000", 
    93 => "00111101010010100101100011001111", 
    94 => "00111101001010110001001100001001", 
    95 => "10111101000101001101000101001000", 
    96 => "10111100100010011001110011001100", 
    97 => "10111101101110101000110111111000", 
    98 => "10111101100111010010011010000001", 
    99 => "00111011111111011101000100100111", 
    100 => "10111110000000001100110010111100", 
    101 => "10111101101100101011110100100001", 
    102 => "00111101000010001101101010011010", 
    103 => "00111101010011110111100000101000", 
    104 => "00111110010100001011010010011110", 
    105 => "00111110001101000010010011100110", 
    106 => "00111011000100101101001100101100", 
    107 => "00111100111100001001011001101011", 
    108 => "10111101000101101000010000100001", 
    109 => "10111101101001100100100010101100", 
    110 => "10111101110100011011100000100100", 
    111 => "00111101001100100010101001101111", 
    112 => "10111100111100100110010110101110", 
    113 => "10111101100100010000011010000011", 
    114 => "00111101100100010001110001000101", 
    115 => "10111110000101111101110101000100", 
    116 => "00111101000000101011101110000001", 
    117 => "00111100101000001010001101111001", 
    118 => "00111110010010111011100010000000", 
    119 => "00111011011110101011011101101100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_10 is
    component inference_conv2d_f3_3_0_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_10_rom_U :  component inference_conv2d_f3_3_0_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


