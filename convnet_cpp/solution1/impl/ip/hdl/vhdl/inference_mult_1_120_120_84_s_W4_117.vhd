-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_117_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_117_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100000011010101011111011", 
    1 => "00111101101110100100110111001100", 
    2 => "10111101101010101010111111110010", 
    3 => "10111101000010101001100110000001", 
    4 => "10111101001000000100111100010000", 
    5 => "10111101111111110100001010111011", 
    6 => "00111101110001000011111111011000", 
    7 => "00111110010110011100110110000001", 
    8 => "00111011001001111000110111111001", 
    9 => "00111101101101010000110011100101", 
    10 => "10111100011101010110010101110010", 
    11 => "10111101000111111010101100010001", 
    12 => "10111110001010101001011111100001", 
    13 => "10111101000100000100100001001101", 
    14 => "00111110000001111111000100110000", 
    15 => "10111101110110111110010001000111", 
    16 => "10111101001100000111110000011001", 
    17 => "10111110001110011011011000101100", 
    18 => "10111101111111011110001101110110", 
    19 => "00111101110001001011101101111001", 
    20 => "10111100101010000001010100101000", 
    21 => "10111100101010111001111111110111", 
    22 => "10111101100111010100101000000000", 
    23 => "10111101101110100011100100110001", 
    24 => "00111101011010101001110011110111", 
    25 => "00111011110010011011100110011101", 
    26 => "00111101001000111101110110001011", 
    27 => "10111101100110101100001000100011", 
    28 => "00111011100100100000010110100111", 
    29 => "10111100110010010100101100000010", 
    30 => "00111101010110010101011101010100", 
    31 => "10111101010111101111100111011011", 
    32 => "10111100001011000011001101100101", 
    33 => "00111110000010111000010110100101", 
    34 => "00111011001001001100010000011010", 
    35 => "00111101111001010010101001000001", 
    36 => "00111010110010110110100100011111", 
    37 => "00111101011110101100110100100110", 
    38 => "10111101100000001000111101010111", 
    39 => "00111101111110100110111001110110", 
    40 => "00111101101011111100101001111000", 
    41 => "10111101110010101110010111100101", 
    42 => "00111101100011111100101001101011", 
    43 => "00111101110011111100110111101110", 
    44 => "00111101000011001011011110000100", 
    45 => "00111110001000001101111011010011", 
    46 => "00111101111111111111000111011000", 
    47 => "10111101111011110111001000101110", 
    48 => "10111101100010010010110000000110", 
    49 => "00111101010110101100101001010001", 
    50 => "00111100010010010111001000111010", 
    51 => "10111101100000110100101100110110", 
    52 => "00111101100001000110000100111110", 
    53 => "00111101001101100101001100101001", 
    54 => "10111101001001010100110011000001", 
    55 => "00111101100101010000100001111101", 
    56 => "00111110000101111011000101111101", 
    57 => "00111101110111011000011010101001", 
    58 => "00111101111001100101100011000101", 
    59 => "00111101100100001000111100000111", 
    60 => "00111100100111100011001010000110", 
    61 => "10111110010110100000000111101111", 
    62 => "10111110000001010010100111111110", 
    63 => "10111110000110010100000010111100", 
    64 => "00111011110101011001111110000100", 
    65 => "10111110001011111100101001000011", 
    66 => "10111101011011101101110011011101", 
    67 => "10111101000001111011110000000111", 
    68 => "10111100011101110101111011011100", 
    69 => "10111101110101010000111010111011", 
    70 => "10111100000110100101110000101100", 
    71 => "00111101011111111011011000010011", 
    72 => "00111101101111100101111000110010", 
    73 => "10111110011010110010010011101010", 
    74 => "00111110001101011010101100111011", 
    75 => "10111101000100101000110010010101", 
    76 => "10111100111110110011010011110101", 
    77 => "10111101101010111010100000010111", 
    78 => "10111101101001011111100011010011", 
    79 => "00111110000101011111111010010111", 
    80 => "10111110000010100100100001110011", 
    81 => "10111101100010101011000010111011", 
    82 => "00111101000001001011111101101000", 
    83 => "10111110001101110110111011100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_117 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_117 is
    component inference_mult_1_120_120_84_s_W4_117_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_117_rom_U :  component inference_mult_1_120_120_84_s_W4_117_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


