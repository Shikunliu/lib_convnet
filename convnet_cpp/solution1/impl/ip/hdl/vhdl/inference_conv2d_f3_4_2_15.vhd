-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001100111011000101110011", 
    1 => "10111101101010000110111101110000", 
    2 => "00111100000111011110100101001010", 
    3 => "10111101110101110001101100000100", 
    4 => "00111101100101110110110100010001", 
    5 => "00111101010001000010111101101111", 
    6 => "00111101001000100001011010010000", 
    7 => "00111101110000101100001010111101", 
    8 => "00111101101111100000100111001001", 
    9 => "00111100011111011011101111101110", 
    10 => "00111101010000111001001100110010", 
    11 => "10111011101001110111010010111001", 
    12 => "10111101100101100001100001111110", 
    13 => "10111100100001011011101111001100", 
    14 => "10111110000100101010010100011110", 
    15 => "10111101000011100101100111001010", 
    16 => "10111101100110000011111010111011", 
    17 => "10111110010010111000110110000010", 
    18 => "10111011101000100010011110110011", 
    19 => "10111101001011100011111010111101", 
    20 => "10111101010110000010100101010111", 
    21 => "10111101000010101011011110011001", 
    22 => "10111101111111000001001011110001", 
    23 => "10111101010001010000100001001000", 
    24 => "00111110001101110010101111001011", 
    25 => "10111101000100101101010111111011", 
    26 => "00111110001110111011110101111011", 
    27 => "10111110000010010010111001100010", 
    28 => "10111110011001101101010111010000", 
    29 => "00111101101010010100001111010100", 
    30 => "10111101111111101011011101000101", 
    31 => "10111101101011011110111110010010", 
    32 => "10111100011011111001100100010101", 
    33 => "10111101010110110010101011111111", 
    34 => "10111101010101111110010011011110", 
    35 => "10111110001001011100000101000000", 
    36 => "10111101111000100010101110111111", 
    37 => "10111100110110011011001011000100", 
    38 => "10111100011110010101000010111001", 
    39 => "10111110010100110011011111101011", 
    40 => "10111101100001111100001100011011", 
    41 => "00111110000011010101101110101011", 
    42 => "10111101100101001010010001110101", 
    43 => "10111100110011100010110010110100", 
    44 => "00111101010010000001101100111101", 
    45 => "10111101100101010000111101101001", 
    46 => "10111101011001010111010001100011", 
    47 => "10111100101101100000101110001010", 
    48 => "00111101111000100001011011000110", 
    49 => "00111101100110101000011101111000", 
    50 => "10111110000010010011001111100011", 
    51 => "00111101110101010011000101010101", 
    52 => "10111101011101100000111110100001", 
    53 => "10111101000011101001100001111111", 
    54 => "00111100110100110101110101110101", 
    55 => "00111101101010101111010001010000", 
    56 => "00111101000011100100010000010110", 
    57 => "00111101011010000111001001111010", 
    58 => "10111101111001110100010000101100", 
    59 => "00111101100001101100101000011111", 
    60 => "10111101101000111001110110010100", 
    61 => "00111101110100101101001010111011", 
    62 => "10111110011011100011111010101111", 
    63 => "10111101010001110101011111100011", 
    64 => "00111110001101000010010100101001", 
    65 => "00111101110001001010110101010001", 
    66 => "00111110001001100011111000001000", 
    67 => "00111101000100110101101001010000", 
    68 => "10111110010010101110111111110110", 
    69 => "00111100111010110110001101011011", 
    70 => "10111110000110001001000111100010", 
    71 => "00111110000100001100011101111110", 
    72 => "00111110001000110010010111010101", 
    73 => "00111101001000000101001010111100", 
    74 => "10111101001100011111001111101001", 
    75 => "00111100000001110011000100010111", 
    76 => "00111101011101100100010000101010", 
    77 => "10111100100010011100010101111100", 
    78 => "00111100111101000101001001001101", 
    79 => "00111100110101111001010101111110", 
    80 => "00111110000011001110110001000010", 
    81 => "00111011110100110111010000110001", 
    82 => "10111101010111111111001011111111", 
    83 => "00111110000010101011001101101000", 
    84 => "10111110000001000111011111111111", 
    85 => "00111101010010100010100011100011", 
    86 => "10111101000000100000101010110111", 
    87 => "00111101100010000001100000110010", 
    88 => "00111101110111000011111001110101", 
    89 => "10111101001010101101011100001110", 
    90 => "00111110001110010011010110111001", 
    91 => "00111101100110000001101000111110", 
    92 => "00111101101100000101001010101110", 
    93 => "10111101001011010111110001010101", 
    94 => "10111101100011110110001101001010", 
    95 => "10111101100111110000100100001111", 
    96 => "10111101000110000001000100000011", 
    97 => "10111101101110110000110100110111", 
    98 => "10111101101010110100011000110101", 
    99 => "00111101100110011101001011011010", 
    100 => "00111011111100111110111010100101", 
    101 => "00111101000100100100001101100100", 
    102 => "10111101110000101111010000101110", 
    103 => "10111101101011011101010011111101", 
    104 => "00111101010010010010010000110110", 
    105 => "10111011101011001110110110011111", 
    106 => "00111100001110100101100001010110", 
    107 => "10111101100100001101011011000000", 
    108 => "10111100001101111010100001111000", 
    109 => "00111110001000011000010011000010", 
    110 => "00111100010011011011101111100000", 
    111 => "10111100100010111011100110100111", 
    112 => "10111101101111011010111111111001", 
    113 => "10111101110011010100110111000110", 
    114 => "00111101101110010111010100110111", 
    115 => "00111100001010000001001011011001", 
    116 => "10111100001100110011001011001000", 
    117 => "00111100110110111001001101101111", 
    118 => "00111100111011010001101001001010", 
    119 => "00111101110110001010111100111110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_15 is
    component inference_conv2d_f3_4_2_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_15_rom_U :  component inference_conv2d_f3_4_2_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


