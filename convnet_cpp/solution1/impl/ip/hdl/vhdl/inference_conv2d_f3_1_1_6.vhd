-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101010000111011111110", 
    1 => "00111100011001010000010110101001", 
    2 => "10111100111000011101110101101011", 
    3 => "10111011011010011011001111100011", 
    4 => "10111110000111001010101001110110", 
    5 => "10111011111101011011010110111010", 
    6 => "00111101000011110111001111011100", 
    7 => "00111100110001000111110001100111", 
    8 => "10111100110010010001010101010010", 
    9 => "00111101010011000001111111001001", 
    10 => "00111101100000101110111010111010", 
    11 => "00111110000100010110001101111000", 
    12 => "10111101101001000011111111001011", 
    13 => "00111101110001111010001111101001", 
    14 => "00111101110110010011100000010101", 
    15 => "00111101100100001001101110001110", 
    16 => "10111101100101110100010100011110", 
    17 => "10111101110010000001100101100111", 
    18 => "00111101100101111000011101010110", 
    19 => "10111011001101011101111100100000", 
    20 => "10111011001001100000101011000001", 
    21 => "00111101100010101000110111011110", 
    22 => "00111101111011011110101110010110", 
    23 => "10111101111000010100101011010011", 
    24 => "00111101010011010100000011111011", 
    25 => "00111101000001010001010111101001", 
    26 => "10111100101101011010110111001100", 
    27 => "00111101110001101001101110111000", 
    28 => "10111110000011010011000011110000", 
    29 => "10111110000111101100001100010001", 
    30 => "00111101100100000100000100101011", 
    31 => "00111101100101000000111010000010", 
    32 => "10111101101100110100000001101001", 
    33 => "00111101101011110100000100110110", 
    34 => "10111101010111101000011011101111", 
    35 => "00111011011010100101010111001010", 
    36 => "10111101110011110110010100010011", 
    37 => "10111101011001001110010101111000", 
    38 => "00111101000110100101110111001010", 
    39 => "10111101100100100100100100110110", 
    40 => "00111101100011010000100101011011", 
    41 => "00111101001100000111011110110010", 
    42 => "10111100001011111001111010111111", 
    43 => "00111110010000001001001111011001", 
    44 => "10111101010110010001111011101011", 
    45 => "10111101000110001100110111000010", 
    46 => "10111011011011100100110100100101", 
    47 => "10111110000001110110001100011011", 
    48 => "00111110001101101101110111110000", 
    49 => "10111101101100000110000010000101", 
    50 => "00111100100100000111101001101100", 
    51 => "10111101000010101110011010010011", 
    52 => "10111101011110010000010110001011", 
    53 => "00111101100001101100000011001010", 
    54 => "10111101100001111010110111101100", 
    55 => "00111101101111011001001001110101", 
    56 => "00111101101111000010000010100000", 
    57 => "00111100100111100100001100010111", 
    58 => "10111110010010011100000001100110", 
    59 => "10111101101001011110100101000001", 
    60 => "00111101000110100111111010011100", 
    61 => "10111101101100111110100000101111", 
    62 => "10111110011011101011111011100000", 
    63 => "10111110010001101011011011100001", 
    64 => "00111110001101100001010011100000", 
    65 => "00111100110001010101001011110000", 
    66 => "10111101110110100101110110101111", 
    67 => "10111100011010000100100100101010", 
    68 => "00111110000110110101001001000100", 
    69 => "00111110001101001001110011110101", 
    70 => "10111110001000010001011100101111", 
    71 => "00111101100100010001011101001010", 
    72 => "00111110000000101100110111000000", 
    73 => "00111100100100010001111000110101", 
    74 => "00111110010100111010110011010110", 
    75 => "10111100100011110001110010011110", 
    76 => "00111100001001011001011010010010", 
    77 => "10111101111010010101100011011010", 
    78 => "10111101101010101101101110111001", 
    79 => "10111110000000010100001010110011", 
    80 => "00111100010101000100011100010101", 
    81 => "10111101100111100000101001000010", 
    82 => "00111101100110000001111010011000", 
    83 => "00111101100001010011001001100001", 
    84 => "00111110000101010001001100110000", 
    85 => "10111101111010110001100000010001", 
    86 => "10111101101111100110101001101001", 
    87 => "00111101100110100100101010001100", 
    88 => "00111101111010111101010011010000", 
    89 => "00111101110110001000011111101100", 
    90 => "10111101100000011100110101111010", 
    91 => "10111101110010101100001000110001", 
    92 => "10111110001110011100001000111011", 
    93 => "10111110001111000001101010001011", 
    94 => "10111101111101110111001100011001", 
    95 => "10111101011011111011110000110110", 
    96 => "10111100100101010111111111111010", 
    97 => "10111110000001001010010111011111", 
    98 => "00111101010110100010011010100010", 
    99 => "10111101000100001111111100101100", 
    100 => "00111101100010100101000110111011", 
    101 => "10111110000011100010110001010110", 
    102 => "00110111100100010000001001000011", 
    103 => "00111100101110110001100111100111", 
    104 => "10111100010101011010101011000010", 
    105 => "00111101001100011010001001010100", 
    106 => "00111101101010011101110010011011", 
    107 => "10111101000010100111110100010111", 
    108 => "00111101110011000100101010010001", 
    109 => "10111100110010100011100000110010", 
    110 => "00111110011001000000100101011111", 
    111 => "00111100111001110010101001111100", 
    112 => "00111110000100111000000111011000", 
    113 => "10111101010110000100111100110010", 
    114 => "00111101100010001001011010110101", 
    115 => "00111101101011011010011000011110", 
    116 => "10111101110001110011111100010111", 
    117 => "00111101101001001001001011110010", 
    118 => "10111101010100001000001010110100", 
    119 => "10111101101100010111110010100010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_6 is
    component inference_conv2d_f3_1_1_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_6_rom_U :  component inference_conv2d_f3_1_1_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


