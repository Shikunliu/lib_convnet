-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_36_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_36_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000111010111111110111000", 
    1 => "10111101111110100110000101011011", 
    2 => "00111101001111111011011110001011", 
    3 => "10111110001011001011100000010111", 
    4 => "10111101010100100000101100010101", 
    5 => "00111101100000010100011010010100", 
    6 => "00111101001001011000000111001111", 
    7 => "00111101100111111001100110101001", 
    8 => "10111100011100101101111100011011", 
    9 => "10111010001100100111000010001001", 
    10 => "10111101101100001101001001100110", 
    11 => "00111100011100100100100101011110", 
    12 => "00111110000001010100011001001110", 
    13 => "10111101100111000011011011101000", 
    14 => "10111110000011110011000001100010", 
    15 => "10111110001110101011111011110000", 
    16 => "00111101011110101111010001011101", 
    17 => "00111101000011010100001111101011", 
    18 => "00111011011010110011011100011011", 
    19 => "10111110001011010001110100000100", 
    20 => "00111101101110010001111100000101", 
    21 => "00111101111110000110100001110111", 
    22 => "10111100100101101110100011100101", 
    23 => "10111101111010001010001001100110", 
    24 => "00111101111000100011010110110101", 
    25 => "10111110000010000101110011101110", 
    26 => "00111100110001001010011001011000", 
    27 => "00111101110011010011101011100111", 
    28 => "10111101000001001001101111110110", 
    29 => "10111101011001101111111101100011", 
    30 => "10111101101000111111101101111010", 
    31 => "00111101011100001100100001010101", 
    32 => "10111101001101101001000011101011", 
    33 => "10111110000001111110111100010111", 
    34 => "10111110001100010111001010101100", 
    35 => "00111100100100100011000000011001", 
    36 => "10111100010100011010111001001000", 
    37 => "10111110001111010001110101000111", 
    38 => "00111100110000010101010011111111", 
    39 => "10111101001110000111110000101101", 
    40 => "00111101101101011111100100110001", 
    41 => "10111101100010010100010110011100", 
    42 => "10111101010111110010101111000101", 
    43 => "00111101000111011011110110110110", 
    44 => "00111100110110111001101010010000", 
    45 => "00111101111110001100111000101101", 
    46 => "00111110000010110010101100110100", 
    47 => "00111100101000111010000000011000", 
    48 => "10111101100001001100111110110110", 
    49 => "00111101000100100001111110001000", 
    50 => "10111110000100000000011000001000", 
    51 => "10111110001110010011110101010011", 
    52 => "10111101101110001110111101000010", 
    53 => "00111101010110010000101000101000", 
    54 => "00111011000101010000100101100111", 
    55 => "00111010101011110100000001001010", 
    56 => "00111101001100011000101100101000", 
    57 => "00111101110101010000001110111000", 
    58 => "10111101011100101110110111100100", 
    59 => "10111101110010111000001111110111", 
    60 => "10111100010100111110000110010100", 
    61 => "00111100110111010001011011000111", 
    62 => "10111101000001000010001001010100", 
    63 => "10111101100110000000001100011111", 
    64 => "00111101110111000001100010110101", 
    65 => "10111101110110010110000011111010", 
    66 => "00111110001010000101111010000001", 
    67 => "00111110010000011101110100011010", 
    68 => "00111101110010110100010100011011", 
    69 => "10111010000010101000001101010001", 
    70 => "10111101011011101111010011111011", 
    71 => "10111110001010000000000111110111", 
    72 => "00111101100110100100101000100001", 
    73 => "00111101111010110101010111101111", 
    74 => "00111101000001011000010010100100", 
    75 => "10111110010011010010010000011000", 
    76 => "10111101110010011001110111100110", 
    77 => "10111101100101011101110010101011", 
    78 => "00111110001111001010111111110111", 
    79 => "00111100101100000010000011111010", 
    80 => "00111110000011010100101001011110", 
    81 => "00111100000111100011011010010111", 
    82 => "00111101011101001110110011110111", 
    83 => "10111110000110000001100101001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_36 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_36 is
    component inference_mult_1_120_120_84_s_W4_36_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_36_rom_U :  component inference_mult_1_120_120_84_s_W4_36_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


