-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_Loop_4_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Filter2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Filter2_TVALID : IN STD_LOGIC;
    Filter2_TREADY : OUT STD_LOGIC;
    f2_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_0_ce0 : OUT STD_LOGIC;
    f2_0_we0 : OUT STD_LOGIC;
    f2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_1_ce0 : OUT STD_LOGIC;
    f2_1_we0 : OUT STD_LOGIC;
    f2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_2_ce0 : OUT STD_LOGIC;
    f2_2_we0 : OUT STD_LOGIC;
    f2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_3_ce0 : OUT STD_LOGIC;
    f2_3_we0 : OUT STD_LOGIC;
    f2_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_4_ce0 : OUT STD_LOGIC;
    f2_4_we0 : OUT STD_LOGIC;
    f2_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inference_Loop_4_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_960 : STD_LOGIC_VECTOR (11 downto 0) := "100101100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_1E0 : STD_LOGIC_VECTOR (9 downto 0) := "0111100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal indvar_flatten5_reg_154 : STD_LOGIC_VECTOR (11 downto 0);
    signal i5_reg_165 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten6_reg_176 : STD_LOGIC_VECTOR (9 downto 0);
    signal j6_reg_187 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal k7_reg_209 : STD_LOGIC_VECTOR (2 downto 0);
    signal l8_reg_220 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten6_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten6_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next6_fu_237_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i5_mid2_fu_293_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i5_mid2_reg_486 : STD_LOGIC_VECTOR (2 downto 0);
    signal j6_mid2_fu_365_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j6_mid2_reg_491 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_mid2_fu_399_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_mid2_reg_496 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_715_fu_429_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_715_reg_501 : STD_LOGIC_VECTOR (9 downto 0);
    signal Filter2_read_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_435_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_fu_447_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next5_fu_461_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_bdd_127 : BOOLEAN;
    signal i5_phi_fu_169_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j6_phi_fu_191_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_phi_fu_213_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_744_cast_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_243_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_309_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_301_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_317_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j6_mid_fu_255_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_mid_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_712_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_not_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_mid_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_mid_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_327_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_mid_fu_339_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond8_mid1_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_713_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_756_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_373_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_711_fu_321_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_cast_fu_407_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_714_fu_411_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal l8_mid2_fu_391_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_743_cast_fu_417_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_425_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten11_op_fu_455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_340 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((exitcond_flatten6_fu_231_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((exitcond_flatten6_fu_231_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i5_reg_165 assign process. --
    i5_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (exitcond_flatten6_reg_477 = ap_const_lv1_0))) then 
                i5_reg_165 <= i5_mid2_reg_486;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                i5_reg_165 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten5_reg_154 assign process. --
    indvar_flatten5_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                indvar_flatten5_reg_154 <= indvar_flatten_next6_fu_237_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                indvar_flatten5_reg_154 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten6_reg_176 assign process. --
    indvar_flatten6_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                indvar_flatten6_reg_176 <= indvar_flatten_next5_fu_461_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                indvar_flatten6_reg_176 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_198 assign process. --
    indvar_flatten_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                indvar_flatten_reg_198 <= indvar_flatten_next_fu_447_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                indvar_flatten_reg_198 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- j6_reg_187 assign process. --
    j6_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (exitcond_flatten6_reg_477 = ap_const_lv1_0))) then 
                j6_reg_187 <= j6_mid2_reg_491;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                j6_reg_187 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- k7_reg_209 assign process. --
    k7_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (exitcond_flatten6_reg_477 = ap_const_lv1_0))) then 
                k7_reg_209 <= k7_mid2_reg_496;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                k7_reg_209 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- l8_reg_220 assign process. --
    l8_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                l8_reg_220 <= l_fu_435_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                l8_reg_220 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                Filter2_read_reg_506 <= Filter2_TDATA;
                tmp_715_reg_501 <= tmp_715_fu_429_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                exitcond_flatten6_reg_477 <= exitcond_flatten6_fu_231_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                i5_mid2_reg_486 <= i5_mid2_fu_293_p3;
                j6_mid2_reg_491 <= j6_mid2_fu_365_p3;
                k7_mid2_reg_496 <= k7_mid2_fu_399_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten6_fu_231_p2, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_sig_bdd_127)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_127)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((exitcond_flatten6_fu_231_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((exitcond_flatten6_fu_231_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st4_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- Filter2_TREADY assign process. --
    Filter2_TREADY_assign_proc : process(exitcond_flatten6_fu_231_p2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            Filter2_TREADY <= ap_const_logic_1;
        else 
            Filter2_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st4_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_127 assign process. --
    ap_sig_bdd_127_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_127 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_340 assign process. --
    ap_sig_bdd_340_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_340 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_88 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(Filter2_TVALID, exitcond_flatten6_fu_231_p2)
    begin
                ap_sig_bdd_94 <= ((Filter2_TVALID = ap_const_logic_0) and (exitcond_flatten6_fu_231_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_88)
    begin
        if (ap_sig_bdd_88) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_2 assign process. --
    ap_sig_cseq_ST_st4_fsm_2_assign_proc : process(ap_sig_bdd_340)
    begin
        if (ap_sig_bdd_340) then 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond8_mid1_fu_359_p2 <= (exitcond8_mid_fu_275_p2 and not_exitcond_flatten_mid_fu_353_p2);
    exitcond8_mid_fu_275_p2 <= (exitcond_fu_269_p2 and not_exitcond_flatten_fu_263_p2);
    exitcond_flatten2_fu_281_p2 <= "1" when (indvar_flatten_reg_198 = ap_const_lv8_60) else "0";
    exitcond_flatten6_fu_231_p2 <= "1" when (indvar_flatten5_reg_154 = ap_const_lv12_960) else "0";
    exitcond_flatten_fu_249_p2 <= "1" when (indvar_flatten6_reg_176 = ap_const_lv10_1E0) else "0";
    exitcond_flatten_mid_fu_287_p2 <= (exitcond_flatten2_fu_281_p2 and not_exitcond_flatten_fu_263_p2);
    exitcond_flatten_not_fu_347_p2 <= (exitcond_flatten2_fu_281_p2 xor ap_const_lv1_1);
    exitcond_fu_269_p2 <= "1" when (l8_reg_220 = ap_const_lv5_10) else "0";
    f2_0_address0 <= tmp_744_cast_fu_469_p1(9 - 1 downto 0);

    -- f2_0_ce0 assign process. --
    f2_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f2_0_ce0 <= ap_const_logic_1;
        else 
            f2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_0_d0 <= Filter2_read_reg_506;

    -- f2_0_we0 assign process. --
    f2_0_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j6_mid2_reg_491)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (j6_mid2_reg_491 = ap_const_lv3_0)))) then 
            f2_0_we0 <= ap_const_logic_1;
        else 
            f2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_1_address0 <= tmp_744_cast_fu_469_p1(9 - 1 downto 0);

    -- f2_1_ce0 assign process. --
    f2_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f2_1_ce0 <= ap_const_logic_1;
        else 
            f2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_1_d0 <= Filter2_read_reg_506;

    -- f2_1_we0 assign process. --
    f2_1_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j6_mid2_reg_491)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (j6_mid2_reg_491 = ap_const_lv3_1)))) then 
            f2_1_we0 <= ap_const_logic_1;
        else 
            f2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_2_address0 <= tmp_744_cast_fu_469_p1(9 - 1 downto 0);

    -- f2_2_ce0 assign process. --
    f2_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f2_2_ce0 <= ap_const_logic_1;
        else 
            f2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_2_d0 <= Filter2_read_reg_506;

    -- f2_2_we0 assign process. --
    f2_2_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j6_mid2_reg_491)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (j6_mid2_reg_491 = ap_const_lv3_2)))) then 
            f2_2_we0 <= ap_const_logic_1;
        else 
            f2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_3_address0 <= tmp_744_cast_fu_469_p1(9 - 1 downto 0);

    -- f2_3_ce0 assign process. --
    f2_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f2_3_ce0 <= ap_const_logic_1;
        else 
            f2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_3_d0 <= Filter2_read_reg_506;

    -- f2_3_we0 assign process. --
    f2_3_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j6_mid2_reg_491)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (j6_mid2_reg_491 = ap_const_lv3_3)))) then 
            f2_3_we0 <= ap_const_logic_1;
        else 
            f2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_4_address0 <= tmp_744_cast_fu_469_p1(9 - 1 downto 0);

    -- f2_4_ce0 assign process. --
    f2_4_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f2_4_ce0 <= ap_const_logic_1;
        else 
            f2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_4_d0 <= Filter2_read_reg_506;

    -- f2_4_we0 assign process. --
    f2_4_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j6_mid2_reg_491)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((j6_mid2_reg_491 = ap_const_lv3_3)) and not((j6_mid2_reg_491 = ap_const_lv3_2)) and not((j6_mid2_reg_491 = ap_const_lv3_1)) and not((j6_mid2_reg_491 = ap_const_lv3_0))))) then 
            f2_4_we0 <= ap_const_logic_1;
        else 
            f2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i5_mid2_fu_293_p3 <= 
        i_fu_243_p2 when (exitcond_flatten_fu_249_p2(0) = '1') else 
        i5_phi_fu_169_p4;

    -- i5_phi_fu_169_p4 assign process. --
    i5_phi_fu_169_p4_assign_proc : process(i5_reg_165, exitcond_flatten6_reg_477, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i5_mid2_reg_486)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_477 = ap_const_lv1_0))) then 
            i5_phi_fu_169_p4 <= i5_mid2_reg_486;
        else 
            i5_phi_fu_169_p4 <= i5_reg_165;
        end if; 
    end process;

    i_fu_243_p2 <= std_logic_vector(unsigned(i5_phi_fu_169_p4) + unsigned(ap_const_lv3_1));
    indvar_flatten11_op_fu_455_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_176) + unsigned(ap_const_lv10_1));
    indvar_flatten_next5_fu_461_p3 <= 
        ap_const_lv10_1 when (exitcond_flatten_fu_249_p2(0) = '1') else 
        indvar_flatten11_op_fu_455_p2;
    indvar_flatten_next6_fu_237_p2 <= std_logic_vector(unsigned(indvar_flatten5_reg_154) + unsigned(ap_const_lv12_1));
    indvar_flatten_next_fu_447_p3 <= 
        ap_const_lv8_1 when (tmp_712_fu_333_p2(0) = '1') else 
        indvar_flatten_op_fu_441_p2;
    indvar_flatten_op_fu_441_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_198) + unsigned(ap_const_lv8_1));
    j6_mid2_fu_365_p3 <= 
        j_5_fu_327_p2 when (exitcond_flatten_mid_fu_287_p2(0) = '1') else 
        j6_mid_fu_255_p3;
    j6_mid_fu_255_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten_fu_249_p2(0) = '1') else 
        j6_phi_fu_191_p4;

    -- j6_phi_fu_191_p4 assign process. --
    j6_phi_fu_191_p4_assign_proc : process(j6_reg_187, exitcond_flatten6_reg_477, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, j6_mid2_reg_491)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_477 = ap_const_lv1_0))) then 
            j6_phi_fu_191_p4 <= j6_mid2_reg_491;
        else 
            j6_phi_fu_191_p4 <= j6_reg_187;
        end if; 
    end process;

    j_5_fu_327_p2 <= std_logic_vector(unsigned(j6_mid_fu_255_p3) + unsigned(ap_const_lv3_1));
    k7_mid2_fu_399_p3 <= 
        k_fu_373_p2 when (exitcond8_mid1_fu_359_p2(0) = '1') else 
        k7_mid_fu_339_p3;
    k7_mid_fu_339_p3 <= 
        ap_const_lv3_0 when (tmp_712_fu_333_p2(0) = '1') else 
        k7_phi_fu_213_p4;

    -- k7_phi_fu_213_p4 assign process. --
    k7_phi_fu_213_p4_assign_proc : process(k7_reg_209, exitcond_flatten6_reg_477, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, k7_mid2_reg_496)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_477 = ap_const_lv1_0))) then 
            k7_phi_fu_213_p4 <= k7_mid2_reg_496;
        else 
            k7_phi_fu_213_p4 <= k7_reg_209;
        end if; 
    end process;

    k_fu_373_p2 <= std_logic_vector(unsigned(k7_mid_fu_339_p3) + unsigned(ap_const_lv3_1));
    l8_mid2_fu_391_p3 <= 
        ap_const_lv5_0 when (tmp_756_fu_385_p2(0) = '1') else 
        l8_reg_220;
    l_fu_435_p2 <= std_logic_vector(unsigned(l8_mid2_fu_391_p3) + unsigned(ap_const_lv5_1));
    not_exitcond_flatten_fu_263_p2 <= (exitcond_flatten_fu_249_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_mid_fu_353_p2 <= (exitcond_flatten_fu_249_p2 or exitcond_flatten_not_fu_347_p2);
    p_shl2_cast_fu_317_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_309_p3),6));
    tmp_11_cast_fu_407_p1 <= std_logic_vector(resize(unsigned(k7_mid2_fu_399_p3),6));
    tmp_711_fu_321_p2 <= std_logic_vector(unsigned(tmp_fu_301_p3) - unsigned(p_shl2_cast_fu_317_p1));
    tmp_712_fu_333_p2 <= (exitcond_flatten_mid_fu_287_p2 or exitcond_flatten_fu_249_p2);
    tmp_713_fu_379_p2 <= (exitcond8_mid1_fu_359_p2 or exitcond_flatten_mid_fu_287_p2);
    tmp_714_fu_411_p2 <= std_logic_vector(unsigned(tmp_711_fu_321_p2) + unsigned(tmp_11_cast_fu_407_p1));
    tmp_715_fu_429_p2 <= std_logic_vector(unsigned(tmp_743_cast_fu_417_p3) + unsigned(tmp_cast_fu_425_p1));
    tmp_743_cast_fu_417_p3 <= (tmp_714_fu_411_p2 & ap_const_lv4_0);
    tmp_744_cast_fu_469_p1 <= std_logic_vector(resize(unsigned(tmp_715_reg_501),64));
    tmp_756_fu_385_p2 <= (tmp_713_fu_379_p2 or exitcond_flatten_fu_249_p2);
    tmp_cast_fu_425_p1 <= std_logic_vector(resize(unsigned(l8_mid2_fu_391_p3),10));
    tmp_fu_301_p3 <= (i5_mid2_fu_293_p3 & ap_const_lv3_0);
    tmp_s_fu_309_p3 <= (i5_mid2_fu_293_p3 & ap_const_lv1_0);
end behav;
