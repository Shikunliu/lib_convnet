-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001101101100110010110", 
    1 => "10111101000100000110110111110001", 
    2 => "00111101111000011010001001100010", 
    3 => "00111110000111111110010001111010", 
    4 => "00111101100011111010110111100110", 
    5 => "00111110000010100100111010111110", 
    6 => "00111110000100011110010001110001", 
    7 => "10111011001001100001111111100101", 
    8 => "00111101111101111101101001100010", 
    9 => "00111100011110000010101001001001", 
    10 => "00111101101110111011111100001110", 
    11 => "00111101101101110100010010001010", 
    12 => "10111110000001001011000101101000", 
    13 => "10111110000010001110010001110101", 
    14 => "00111100100001001011110110011111", 
    15 => "00111100010110001010101001010001", 
    16 => "00111110010010110100100001001101", 
    17 => "00111101100010000010110011101000", 
    18 => "00111101101001001110111000011110", 
    19 => "00111101111001001111111010111101", 
    20 => "10111101000000110101101100011001", 
    21 => "00111110001001000010010000011100", 
    22 => "10111100101101110110001000110111", 
    23 => "00111110010101001101101100010110", 
    24 => "10111101100101111110001000100100", 
    25 => "10111101110111000100000010001110", 
    26 => "00111101011011010110001111100110", 
    27 => "00111101110001010000001010010001", 
    28 => "10111101010111110010000001010111", 
    29 => "00111100110100110110011001000100", 
    30 => "00111100101100010100110010101001", 
    31 => "00111101111001100000111101011110", 
    32 => "00111110000010111111110001100101", 
    33 => "10111101011000000011000101111110", 
    34 => "10111101010100101011010011110100", 
    35 => "00111101111010111011010111100001", 
    36 => "10111101001011110011110010011001", 
    37 => "10111101100100010001000010000110", 
    38 => "00111101111100010111000011010110", 
    39 => "00111100111011111011110100100111", 
    40 => "10111101101110101000110101100101", 
    41 => "10111110000010000111000100011101", 
    42 => "00111101101000010101000110100100", 
    43 => "00111101100011011100111011011011", 
    44 => "10111100111100010000011011010011", 
    45 => "00111101111000111110100111101010", 
    46 => "00111100111001000000011000111010", 
    47 => "10111101011101000100010111101101", 
    48 => "00111101001100011000110111100010", 
    49 => "10111101001000111011010101100001", 
    50 => "10111101001110001101000100111000", 
    51 => "10111101111100110101100101111001", 
    52 => "00111101011001000000001111010000", 
    53 => "10111101111010011101101001011001", 
    54 => "10111101100011110001100001101100", 
    55 => "00111100100011100011111100101000", 
    56 => "00111110000010110000100111101010", 
    57 => "00111011000000011100111000100001", 
    58 => "00111100010100000011010001100000", 
    59 => "00111101101000011001011101010010", 
    60 => "00111110000011101101011101000001", 
    61 => "00111101101000100101000010101000", 
    62 => "00111101111101111100000000101011", 
    63 => "10111101110010101110000011011100", 
    64 => "00111110000010110101001111010110", 
    65 => "10111101011110010010010101101011", 
    66 => "00111101110111000100011101011110", 
    67 => "00111100101001101000111100010110", 
    68 => "00111101110010111101001111101100", 
    69 => "10111100101111000010001010010000", 
    70 => "00111101110101100010011010110011", 
    71 => "00111101110110010110111000010110", 
    72 => "10111100000111001001011011111010", 
    73 => "00111101100000000111001011101101", 
    74 => "00111101100001110100111001100110", 
    75 => "00111101110000110011101100111001", 
    76 => "10111101000010000000110011111010", 
    77 => "00111110001101111010000001110011", 
    78 => "10111101010010101111011111000110", 
    79 => "10111101000000011010111110110011", 
    80 => "10111101000111111100001011111001", 
    81 => "00111100111000000001000000001011", 
    82 => "10111101100110110000001100110100", 
    83 => "00111101010010101011010010101010", 
    84 => "10111100100101001101010010100011", 
    85 => "00111110001010001110100010100111", 
    86 => "00111101110010000011111110101101", 
    87 => "00111101100001101111010000101011", 
    88 => "10111100100110000101100010000111", 
    89 => "10111101011111101000110111011010", 
    90 => "10111101011001100000001001011110", 
    91 => "10111110000001000111101010011110", 
    92 => "00111101101011011110100011101001", 
    93 => "00111110000111101101010011100101", 
    94 => "00111110000001110011101010111101", 
    95 => "00111101001011111001011100010111", 
    96 => "10111101011011011000010000110010", 
    97 => "00111101100111011010100101000011", 
    98 => "00111100111010000011001111111100", 
    99 => "00111100111010011000110101100010", 
    100 => "00111100101011001111110010111000", 
    101 => "00111101101000111000001100110101", 
    102 => "10111101101010011110111101101101", 
    103 => "10111101100000001011101101101111", 
    104 => "00111110000011000110111011110100", 
    105 => "00111101010110101100001110110110", 
    106 => "10111101010001000010011000110101", 
    107 => "10111101100100110100111001001110", 
    108 => "00111101000110010011110110001001", 
    109 => "10111100001010100001111110001110", 
    110 => "10111110000011001111110001000000", 
    111 => "00111101101110111100101000101011", 
    112 => "10111101001110110000110101010010", 
    113 => "00111011011010100010010011001100", 
    114 => "00111101110011111101010000111001", 
    115 => "10111101110110101010111111111111", 
    116 => "10111100001000000110101011011010", 
    117 => "00111101010000011010010010010101", 
    118 => "10111101101001110001001110100000", 
    119 => "00111100111001111001011111110100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_11 is
    component inference_conv2d_f3_4_4_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_11_rom_U :  component inference_conv2d_f3_4_4_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


