-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100100010011110111000101", 
    1 => "00111100001100111111000100110100", 
    2 => "00111101101110101111000011100111", 
    3 => "00111101111001110110000110001001", 
    4 => "10111011011100100000101101110110", 
    5 => "00111101000101010011111010001011", 
    6 => "00111100000000001001010101100111", 
    7 => "10111101101011111011111000110100", 
    8 => "00111101101001111111001101010111", 
    9 => "00111100000000110111101001111110", 
    10 => "00111110000010011001011001110100", 
    11 => "00111101100011100110100100110100", 
    12 => "00111101100001011100010100111100", 
    13 => "00111101000111001010111010001100", 
    14 => "00111101101101110100001010011010", 
    15 => "00111110010000101000111110011111", 
    16 => "10111110001111001000100111110100", 
    17 => "00111100111110110001111001001111", 
    18 => "00111010111001100101001111011100", 
    19 => "00111110001011011101110100101011", 
    20 => "10111101101100111010011100011111", 
    21 => "10111101100001011011110101000100", 
    22 => "10111011011011101000110000001111", 
    23 => "10111101011000011100101000111010", 
    24 => "00111101111011011000000000011011", 
    25 => "00111101110100110101010111001110", 
    26 => "10111101101101100000101001110001", 
    27 => "10111101101010100101100001001001", 
    28 => "00111100101001001111001010010011", 
    29 => "00111101110001101100010001110101", 
    30 => "00111110000101011111100011010011", 
    31 => "00111101001001001010100010001100", 
    32 => "00111101010110100001001101110010", 
    33 => "10111110000011011000000001011110", 
    34 => "10111100111000001010001000110111", 
    35 => "00111100111010010001001100011111", 
    36 => "10111110000110001110110010010110", 
    37 => "00111101001001101000100101101100", 
    38 => "10111101001101001100110000001010", 
    39 => "10111101100000111110010101101000", 
    40 => "10111101011101111100000100000010", 
    41 => "10111110000010011111101010011000", 
    42 => "00111101101001001110111001000111", 
    43 => "10111110011011001101000001111000", 
    44 => "00111101001101110001101111011011", 
    45 => "10111101111010011010100010001011", 
    46 => "10111110000000101110100111001101", 
    47 => "00111101010100000010000011011111", 
    48 => "00111100101010000000100010010010", 
    49 => "00111101100010011001000011011000", 
    50 => "10111110001010110100100101011010", 
    51 => "00111110000100001010001110010100", 
    52 => "00111010110101001101110110111101", 
    53 => "10111011001101000010000101011010", 
    54 => "10111101110100101101111101010000", 
    55 => "10111101001011100010101101010111", 
    56 => "00111101101110011010101000011101", 
    57 => "00111101001100100010010100110001", 
    58 => "10111110000110111000110110000010", 
    59 => "00111110000000111011100101101011", 
    60 => "00111101111100101110000111101111", 
    61 => "10111110001101010110000110010001", 
    62 => "00111100111111101010001111011111", 
    63 => "00111011011010010010001100011010", 
    64 => "00111101000110000101110010000011", 
    65 => "00111100111111011000010000100101", 
    66 => "10111101001010101101011011110100", 
    67 => "10111101100000111010100110010110", 
    68 => "10111101110101011110000001110010", 
    69 => "10111101110000111011001111101010", 
    70 => "00111110001000101101001001111000", 
    71 => "00111100110010011000110000111011", 
    72 => "00111101110001001000100100001001", 
    73 => "10111101000101111000100110001010", 
    74 => "00111011101010011110110000001101", 
    75 => "00111101111100001011100111011100", 
    76 => "10111110010101101010110011101011", 
    77 => "10111101000111110100100101010111", 
    78 => "10111101001111111100101100001100", 
    79 => "10111110010001000110010000010011", 
    80 => "10111101100110100111101110000100", 
    81 => "10111110000100001001001101010011", 
    82 => "00111101010011011100101001011000", 
    83 => "10111101100001000010101100100011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_6 is
    component inference_mult_1_120_120_84_s_W4_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_6_rom_U :  component inference_mult_1_120_120_84_s_W4_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


