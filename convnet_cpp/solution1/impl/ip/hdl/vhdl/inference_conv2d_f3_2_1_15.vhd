-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110010010111011000000", 
    1 => "10111101100011011110101001101111", 
    2 => "00111101100110000101010001111101", 
    3 => "10111101111101111011001110010110", 
    4 => "00111110010000001000111000010101", 
    5 => "10111101011000000101100001001010", 
    6 => "10111101000011110100110111100110", 
    7 => "00111110000110110010001000001000", 
    8 => "00111110000001010110010110000000", 
    9 => "00111101010110100100000000111000", 
    10 => "10111011100110000110100011101101", 
    11 => "10111101100010001111000111010100", 
    12 => "00111100101110011011101010100001", 
    13 => "10111101010101100011000100010100", 
    14 => "00111100011010011111100011000010", 
    15 => "00111011100101000010000111100000", 
    16 => "00111101110101000000100100011100", 
    17 => "10111101010001000110001010011011", 
    18 => "10111100100010111011111000001111", 
    19 => "10111101101010111111011110100000", 
    20 => "00111101100100110011010011111100", 
    21 => "00111101100111010010010100111111", 
    22 => "10111011001001001001101110000000", 
    23 => "10111101000000001111000101100010", 
    24 => "10111101101000000010101111111101", 
    25 => "00111101001100111000001110000101", 
    26 => "00111011010010111110011011001001", 
    27 => "00111101001111001001110011010100", 
    28 => "00111101000100000001100001000110", 
    29 => "00111011011000101010111011100001", 
    30 => "00111101100011011000110110100010", 
    31 => "10111101000001100011110110011100", 
    32 => "10111101000000111001111010100000", 
    33 => "00111110000010001110111011110010", 
    34 => "00111101001010011000011110111001", 
    35 => "10111101001101101111100101110110", 
    36 => "00111100101110000111011111100001", 
    37 => "00111101100100101111000110000010", 
    38 => "00111100110100101011111001111110", 
    39 => "00111101000100000110011001100101", 
    40 => "00111100110101001001100010101001", 
    41 => "00111100010000110010001101101011", 
    42 => "10111100100101000001110111000100", 
    43 => "10111100111010100011100011101110", 
    44 => "10111101011000001111111111011010", 
    45 => "00111100101011110110101001010001", 
    46 => "10111110000001101100000000001110", 
    47 => "00111001100111100101100001110000", 
    48 => "00111101001001000011100101001011", 
    49 => "00111100110110010101000101110101", 
    50 => "10111101010000101000000100110100", 
    51 => "10111101110100110100010100000111", 
    52 => "10111101001111111111111111100101", 
    53 => "00111101001101111100011001110110", 
    54 => "00111100110011100100110100000000", 
    55 => "10111101011110111000001101001001", 
    56 => "10111101101100101000000001010000", 
    57 => "10111101010010010101110111000111", 
    58 => "00111101100000000011010101111010", 
    59 => "00111011011011111101000010001000", 
    60 => "10111110000111111101100010101110", 
    61 => "00111101011111100101010101110000", 
    62 => "00111101110110011001001111010101", 
    63 => "10111101101100011010100101000000", 
    64 => "00111110001110010111001010001010", 
    65 => "10111100110001100110001001010000", 
    66 => "00111100101010010111110100000111", 
    67 => "10111011001101110011110011000011", 
    68 => "00111100101001101100100001010110", 
    69 => "10111101011100111101100110000001", 
    70 => "00111101100110011011100001010011", 
    71 => "00111100101100100001111110100010", 
    72 => "10111100100001100001110001111010", 
    73 => "10111101100110000001101000100011", 
    74 => "10111101011100110110101000001010", 
    75 => "00111101100100111111111101110110", 
    76 => "10111101001101110001110100000010", 
    77 => "10111100000001110000001111000000", 
    78 => "00111101111111000001010110010000", 
    79 => "10111101011111011111000011000111", 
    80 => "10111101001010000001001110010101", 
    81 => "00111011001110011111000111010100", 
    82 => "00111110000000100101000010110101", 
    83 => "00111100001010110101011100110001", 
    84 => "10111100110101000001110101011001", 
    85 => "00111101010101111100001001011111", 
    86 => "00111100100000101101101011011100", 
    87 => "10111101001111100100100111001101", 
    88 => "10111101001110100101001111010100", 
    89 => "00111101101111000001010110111000", 
    90 => "10111101110011100011001011100100", 
    91 => "00111101111111011000001110000100", 
    92 => "00111100011101101001110111101100", 
    93 => "10111101000011100001000111110111", 
    94 => "00111100111000000011110000010101", 
    95 => "00111101011110000111011010000100", 
    96 => "10111101111001110000000000000100", 
    97 => "10111101101100000000111001011110", 
    98 => "10111101010000001110101110111000", 
    99 => "00111110001110000100010111011101", 
    100 => "10111101100110001100001110111110", 
    101 => "10111101001000101111101100100111", 
    102 => "00111101111010111011001101000010", 
    103 => "10111100110001101010101110000000", 
    104 => "10111101011001010001011110010111", 
    105 => "10111101010110101010000000001111", 
    106 => "10111101111000001101101010100001", 
    107 => "00111101001000011001111111111000", 
    108 => "10111101101011010101011101010001", 
    109 => "10111101101011110011110111101001", 
    110 => "00111101111100110101010111001110", 
    111 => "10111110010100001011110111001011", 
    112 => "00111101101111010000100110010001", 
    113 => "00111110000001100101100110001110", 
    114 => "10111101101001010011001000111001", 
    115 => "10111101000001000000101001010001", 
    116 => "10111100011000000010001111000010", 
    117 => "00111100101001100100001101100001", 
    118 => "10111100111011000111111110000101", 
    119 => "00111101000000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_15 is
    component inference_conv2d_f3_2_1_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_15_rom_U :  component inference_conv2d_f3_2_1_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


