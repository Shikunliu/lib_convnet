-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100000011011100110000000110", 
    1 => "00111100111011110100110011110101", 
    2 => "10111100101101100110000110000110", 
    3 => "00111110001100010110010110010000", 
    4 => "10111101101001011111001001111011", 
    5 => "10111110000000001001110110001100", 
    6 => "10111110000110001111000101001110", 
    7 => "00111101011010011100110001100111", 
    8 => "10111101001111001100000000001111", 
    9 => "10111101001011100010010101011101", 
    10 => "10111101111010001010100000101010", 
    11 => "10111110001111100110000111010000", 
    12 => "00111101101110001110000110100001", 
    13 => "00111110011000010100011110101110", 
    14 => "00111011001010100000011011001111", 
    15 => "10111100111001001011000000011000", 
    16 => "00111100100010111011001100100111", 
    17 => "10111101000111101010010111011101", 
    18 => "00111011011001010001000001100101", 
    19 => "00111101001001001100000100110000", 
    20 => "10111101100110110010101110010010", 
    21 => "00111101001100111010001111010001", 
    22 => "00111100111100100001000100101010", 
    23 => "00111101110001110101110100101111", 
    24 => "00111110000111111101001100101100", 
    25 => "00111110000010000110010011001011", 
    26 => "10111101100001011000011001010010", 
    27 => "10111101111101101000011110110001", 
    28 => "10111101011101011111001011100110", 
    29 => "10111101110100101011001101000110", 
    30 => "10111101110001000101101010010101", 
    31 => "10111101110011111011110110101101", 
    32 => "00111100111111000101101100110000", 
    33 => "00111101100100111000111011110011", 
    34 => "00111101101010000111010111111110", 
    35 => "10111100100110001010101100100111", 
    36 => "00111110001001001111110011100111", 
    37 => "00111101110100111101010100110100", 
    38 => "00111100111111001000010010110110", 
    39 => "00111101011110100110001111000100", 
    40 => "00111110001111100111010001101101", 
    41 => "10111101011001110110011010010001", 
    42 => "00111100101111010111010101110111", 
    43 => "00111100100101010010011000111000", 
    44 => "00111110000011010000100110011110", 
    45 => "10111110000001011000011010000111", 
    46 => "00111110000010001101000011001100", 
    47 => "10111101100101100000001001111001", 
    48 => "00111101111001110100000100000111", 
    49 => "10111110000101111011100101011010", 
    50 => "00111011100101111101101000111100", 
    51 => "00111101110100011001001101110001", 
    52 => "10111101110110011011111011010011", 
    53 => "00111101011001011101100111111111", 
    54 => "00111100111110010111111110110011", 
    55 => "00111101110001011111110010001100", 
    56 => "00111101101101100001100010001011", 
    57 => "00111101100011101100001110011000", 
    58 => "00111100101000110111100011100001", 
    59 => "10111100001101101001110011100000", 
    60 => "00111101010101111110101110010100", 
    61 => "10111101001001110101110100000110", 
    62 => "10111101000101001111111100000000", 
    63 => "00111101100010100010111111101010", 
    64 => "10111100000110100110011100110100", 
    65 => "00111100100000100110011110000100", 
    66 => "10111101011110100101101001101111", 
    67 => "10111110000001110001111110111100", 
    68 => "10111101100100000010010000010010", 
    69 => "00111101000010111011011001100111", 
    70 => "10111110001000110001100110000011", 
    71 => "10111101100001001101110001001011", 
    72 => "00111101000011001010001101111100", 
    73 => "10111100111110010101101101101011", 
    74 => "00111100101011010010110110010101", 
    75 => "00111101101010001010000011111100", 
    76 => "10111101101011001010111110110100", 
    77 => "10111101101100011101111000110100", 
    78 => "00111100101111110000110010111011", 
    79 => "10111101100110101101011010100011", 
    80 => "10111110000010000110110011101100", 
    81 => "00111100001111101111100100111010", 
    82 => "10111101011100011100101111011010", 
    83 => "10111101001100001011010110101010", 
    84 => "10111110001000100110000010110011", 
    85 => "00111100000111000000000110110100", 
    86 => "00111100000110110101111110010111", 
    87 => "00111101001101000010000001001000", 
    88 => "10111101101101001001000010010110", 
    89 => "10111101100100111111100010001011", 
    90 => "10111101100111011010100110101111", 
    91 => "00111101000110000010000010111110", 
    92 => "00111101100011001100010111111100", 
    93 => "00111101111110011110000101101101", 
    94 => "10111100111011011101110100011101", 
    95 => "10111100010101110010111110010010", 
    96 => "00111011100000001011101110111101", 
    97 => "10111110000010001011001000100000", 
    98 => "10111011001001011111001110011010", 
    99 => "10111100101000001101010010001100", 
    100 => "10111101001010111100110010100010", 
    101 => "10111101001001101000111001011010", 
    102 => "10111100101111100011100111000010", 
    103 => "00111101101100010010011000000101", 
    104 => "10111110000101010011111001110000", 
    105 => "00111101101100011001100001000011", 
    106 => "00111101111100101011111111011011", 
    107 => "10111101100001001101111111000001", 
    108 => "00111110001110001110101111001100", 
    109 => "00111101111101100001001001000000", 
    110 => "00111110001001001011011111110110", 
    111 => "10111110000010100111000000001001", 
    112 => "10111101001010101000000011011101", 
    113 => "00111101011101010101100101111110", 
    114 => "00111101011101100100100100011000", 
    115 => "10111101110111011100011000011001", 
    116 => "00111110001100111101100001011010", 
    117 => "10111101010100101010011110111101", 
    118 => "00111101001011010001100111111010", 
    119 => "00111101110110110101100111011110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_2 is
    component inference_conv2d_f3_1_0_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_2_rom_U :  component inference_conv2d_f3_1_0_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


