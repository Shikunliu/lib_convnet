-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100101000111100000100111011", 
    1 => "00111101101101111101111100110101", 
    2 => "10111101000011011111111101100111", 
    3 => "00111100100000100101101010000011", 
    4 => "10111101010010001010000000110010", 
    5 => "00111101110110101001000000000100", 
    6 => "00111110001110011010000011110001", 
    7 => "10111101110011100110110010001111", 
    8 => "10111101010101110110010011010110", 
    9 => "00111101100100100110110110001011", 
    10 => "00111100110001100100010100101001", 
    11 => "00111101100011110100110100011101", 
    12 => "00111100001010110010110110101011", 
    13 => "10111101000110000110010110100010", 
    14 => "10111101101011110111010011101000", 
    15 => "00111101101111100010000110010110", 
    16 => "10111101110010100011111001111101", 
    17 => "10111011101000001010011110101011", 
    18 => "10111101110111101110001101010000", 
    19 => "00111100110010111110101011110000", 
    20 => "10111110000011111001101001001010", 
    21 => "00111101011001011101111111000011", 
    22 => "00111110000010010010100001011011", 
    23 => "00111101000011110110000000100101", 
    24 => "10111110000100101011110100111100", 
    25 => "10111101100011101001101011110110", 
    26 => "00111010001101011001010001011101", 
    27 => "00111101001011100010000110110001", 
    28 => "10111101011001101111011010101111", 
    29 => "00111110000010101001110101100010", 
    30 => "00111101101111011011111000101111", 
    31 => "00111011110010010011111011100011", 
    32 => "10111101011011101101111110010111", 
    33 => "10111101100010000111001010111110", 
    34 => "00111101101001010001001001001011", 
    35 => "10111101010011001000110110010010", 
    36 => "00111110001000011011011101011010", 
    37 => "00111101001110010000010100111010", 
    38 => "00111101000110010011100010000000", 
    39 => "10111101101010011000101100010100", 
    40 => "00111101101111010010100011011101", 
    41 => "00111101100011101110010100011000", 
    42 => "00111101101010010110110100010111", 
    43 => "00111101011001111001000111000101", 
    44 => "00111101110111100111001010010111", 
    45 => "00111100011001010100000011001100", 
    46 => "00111101111001001100111010000001", 
    47 => "00111100111010110100111101101111", 
    48 => "10111110000001010110101100000001", 
    49 => "10111101000011110100101011011100", 
    50 => "10111100100011011011110010110111", 
    51 => "00111101110111001001001011011110", 
    52 => "00111101010111001010110111101011", 
    53 => "00111101000110010100111101000010", 
    54 => "00111101001001010010110100110001", 
    55 => "10111101101100100101011101010000", 
    56 => "00111101010001011000001011110111", 
    57 => "00111100101101110111100111101010", 
    58 => "10111101001111101101101011101100", 
    59 => "00111101000011100000000001110100", 
    60 => "10111100011111101110011101100111", 
    61 => "10111110000010010001111100101110", 
    62 => "00111101100111000111100010100111", 
    63 => "00111100110011010100001001110011", 
    64 => "00111101111010100111111110000000", 
    65 => "10111110000000110100111111000110", 
    66 => "10111101001111000010111111111100", 
    67 => "00111011110000011111101000100000", 
    68 => "10111100101001011111100010111000", 
    69 => "10111101101111010001100111000100", 
    70 => "10111101001101100011010111001100", 
    71 => "00111110000100010001010011010011", 
    72 => "10111101110111111000001110111110", 
    73 => "10111100111111010101101000110011", 
    74 => "00111101111111011100101101011000", 
    75 => "10111101001010110001001100100100", 
    76 => "00111101011100101110010001110100", 
    77 => "10111110001011010000101000100100", 
    78 => "10111110000010101001000000000100", 
    79 => "00111100101101001011001011111011", 
    80 => "10111011101100011011101110100100", 
    81 => "00111100101101010010100111100011", 
    82 => "10111101011110011010011001100101", 
    83 => "10111100000011000000010111110011", 
    84 => "10111101000000001001011011100100", 
    85 => "10111101001000101110011100100000", 
    86 => "00111011100101110111101110011101", 
    87 => "10111101101100011111100010000110", 
    88 => "10111101010111000011110010101100", 
    89 => "10111101111111100101100011100110", 
    90 => "10111101100000101111101100001100", 
    91 => "00111110000010100000000011100010", 
    92 => "10111011111111011011100100111110", 
    93 => "00111100000011011000000111110100", 
    94 => "00111101011001101000101110111011", 
    95 => "00111110001001000100111100011010", 
    96 => "00111101100010001000101000101101", 
    97 => "10111101110001101111110100100010", 
    98 => "10111100111001110011101000110110", 
    99 => "00111110000010111001010010010110", 
    100 => "00111110000100010100100110000100", 
    101 => "00111101111011011000101010011000", 
    102 => "00111110000101110010010011111011", 
    103 => "10111110000111101100010101101101", 
    104 => "00111101101010111110111000100011", 
    105 => "00111101011010101010011000010110", 
    106 => "00111101110110010000101011111110", 
    107 => "00111101010010010110000000110001", 
    108 => "00111100101001101111100000100111", 
    109 => "10111100110010101000100010111010", 
    110 => "00111101111000100001001100011011", 
    111 => "00111101101000000001100101000101", 
    112 => "00111101111100100111010101101000", 
    113 => "00111110001101100100111000000101", 
    114 => "10111101000001111110101101101100", 
    115 => "00111101000100110010011010111001", 
    116 => "00111011110101010100010001101011", 
    117 => "10111100101011001000100100101011", 
    118 => "10111101100000111101111011101000", 
    119 => "00111101001110101111111000000011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_0 is
    component inference_conv2d_f3_3_3_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_0_rom_U :  component inference_conv2d_f3_3_3_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


