-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010110010000001111000010", 
    1 => "00111110001101010010001010100111", 
    2 => "00111101000100001010000001111100", 
    3 => "00111101100010011001101011000001", 
    4 => "10111011011000010101011101001000", 
    5 => "10111101100100111111110010010100", 
    6 => "10111100111100000110010011101101", 
    7 => "10111110001011011100001001101110", 
    8 => "00111100110110000110110000111101", 
    9 => "10111101110000000100101011011110", 
    10 => "10111101010100100100011001101110", 
    11 => "10111100110010010110000111011110", 
    12 => "00111110000000000000111101110111", 
    13 => "10111110000101100100011100110100", 
    14 => "00111110001001000001110111010010", 
    15 => "00111101110011100000011101011111", 
    16 => "10111100100001100011100011001001", 
    17 => "10111100100010101010100011010000", 
    18 => "10111101010001011110000111000001", 
    19 => "10111110000010101011001011100001", 
    20 => "10111101011100001110110100100011", 
    21 => "10111101001011000101110000101111", 
    22 => "10111100110111011000000001000100", 
    23 => "00111101110101011010100001011000", 
    24 => "00111110001011111110101010000001", 
    25 => "10111100101111001000110011100100", 
    26 => "10111101110000011110001110110101", 
    27 => "10111011100111011010101011001011", 
    28 => "00111101000101111001000001011010", 
    29 => "00111110001100100001011110001111", 
    30 => "10111100110010011001110100111000", 
    31 => "10111101001010111011100110001100", 
    32 => "00111100111001110111111001011111", 
    33 => "00111101101011101010000111111100", 
    34 => "00111101101100001111001001000110", 
    35 => "10111100100100010101100111000101", 
    36 => "00111101100100110111000110110010", 
    37 => "00111100110011000001011010001111", 
    38 => "00111101110110111000010011011100", 
    39 => "00111101100110100100110111001100", 
    40 => "10111101000010000001100111100000", 
    41 => "10111101101110010101111110011101", 
    42 => "00111110000101001101101111100000", 
    43 => "00111100100010111110110100001001", 
    44 => "10111101001000010100011011110010", 
    45 => "00111100000011011110101100110000", 
    46 => "00111110010011000001100011111000", 
    47 => "00111011010110001101100101001011", 
    48 => "10111100000010001000111100100101", 
    49 => "00111011001001101010000111000000", 
    50 => "00111110000110000100100010111111", 
    51 => "00111100111011101101010100000000", 
    52 => "10111100110000010001111001111001", 
    53 => "00111101000100100001110110001001", 
    54 => "10111101100110101001000101010011", 
    55 => "10111100000001001101000011010101", 
    56 => "00111101100011100111000001010110", 
    57 => "00111101110000001111100001001110", 
    58 => "00111100101000110011110010110001", 
    59 => "00111110001111101001100000010100", 
    60 => "00111011000001100110000111011001", 
    61 => "10111011010111001101111111101010", 
    62 => "10111110000100101101101001010101", 
    63 => "00111101100000011110101000110110", 
    64 => "00111101100100010011010011000001", 
    65 => "10111100111110110111111110011101", 
    66 => "00111110000110011100001000111011", 
    67 => "00111101100011101110100111101011", 
    68 => "00111101010101000011010010100000", 
    69 => "00111101100110100101110110010100", 
    70 => "10111101011000111110111011011000", 
    71 => "00111101100111011011001000000101", 
    72 => "00111101110010000001011100011000", 
    73 => "00111100110101011100011111101000", 
    74 => "10111000100110010010001111010001", 
    75 => "00111101011001000111000101111111", 
    76 => "10111101110100011101110011010111", 
    77 => "10111101100011010110001010111111", 
    78 => "10111101110100010101001001101110", 
    79 => "00111101100011111000001110111110", 
    80 => "00111101001110010111101001110101", 
    81 => "10111101000000011101000011110000", 
    82 => "10111100101010111100010010101010", 
    83 => "10111011110100100101110101110000", 
    84 => "10111101001010100011100101110101", 
    85 => "00111101001001010001011011011011", 
    86 => "10111101001100100011000110101011", 
    87 => "00111101011110000001001011001100", 
    88 => "10111101101001001000110011111000", 
    89 => "00111110000101111101010000010111", 
    90 => "10111101100110111100100100101100", 
    91 => "00111101010011101011101001111000", 
    92 => "10111101010111011110000110101101", 
    93 => "10111101101110000000100001001111", 
    94 => "10111110001100011000010000111100", 
    95 => "10111101000001000000101100001101", 
    96 => "10111101000001110100111101001010", 
    97 => "00111100101110100001011010110010", 
    98 => "00111011110001001100111000111011", 
    99 => "10111101010100010011111111011110", 
    100 => "00111110001100100100101111111101", 
    101 => "10111101110010111110011010100011", 
    102 => "00111101101010111110011100110111", 
    103 => "00111100111000010110011110001111", 
    104 => "00111101111011010111100000111110", 
    105 => "10111101000011111111011011101110", 
    106 => "00111110010001111101101000011111", 
    107 => "00111110000111000010011010011010", 
    108 => "10111101111111001001100100101000", 
    109 => "10111101111111010101000010101001", 
    110 => "00111101110110110100010101101011", 
    111 => "10111101100111101111110010111101", 
    112 => "00111110000100010111011011011110", 
    113 => "10111101111010000001000110110010", 
    114 => "10111110010000111101101100111100", 
    115 => "10111101011000100101001000000101", 
    116 => "10111110001011100000101100001011", 
    117 => "00111100101000000010100111010111", 
    118 => "10111101001101101101110001101011", 
    119 => "10111101010000101011011011100100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_3 is
    component inference_conv2d_f3_1_1_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_3_rom_U :  component inference_conv2d_f3_1_1_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


