-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_70_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_70_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110011111011110010100001", 
    1 => "00111110010010101001110100011111", 
    2 => "00111101111110110001000011111101", 
    3 => "00111100010000000011001011110110", 
    4 => "00111101011101100100100101101000", 
    5 => "00111101101111101100101110010000", 
    6 => "00111101110100111010110001001111", 
    7 => "00111101111000010100111001111111", 
    8 => "00111101100101101110001010011011", 
    9 => "00111101011110100011101001011001", 
    10 => "00111110011010000010010001001111", 
    11 => "10111110001111001110011100000100", 
    12 => "00111101001110000000000010001101", 
    13 => "10111101100100111000111100011100", 
    14 => "00111110000110110110111100011010", 
    15 => "00111110000001011100101101111001", 
    16 => "00111101101000110111111101000110", 
    17 => "10111110001001001100000000010110", 
    18 => "00111110011000001010101100101110", 
    19 => "00111110001011001001100110101111", 
    20 => "10111010010001000011000100000011", 
    21 => "00111101100011000010010011000100", 
    22 => "10111110001011010111111010001001", 
    23 => "10111101000000100100100000001111", 
    24 => "10111100100111010000010000011101", 
    25 => "10111101110111010110110001110010", 
    26 => "10111110001000111101010000101000", 
    27 => "10111101010000011000010011101011", 
    28 => "10111110010111001100100011011110", 
    29 => "10111100111100100001110100011110", 
    30 => "10111101100111110101111111100010", 
    31 => "10111110010100111001111101110111", 
    32 => "00111101100000101001011011000001", 
    33 => "10111101001010011001000000110111", 
    34 => "00111101100110111111100101101000", 
    35 => "00111101000100101000111100110100", 
    36 => "00111100110100110000000000100010", 
    37 => "00111101001010011110101001111111", 
    38 => "00111110000111100101101011111111", 
    39 => "00111101100010111111101000010111", 
    40 => "10111101101111011000101010110010", 
    41 => "10111110001010100111010110001010", 
    42 => "10111101101011011111000110101011", 
    43 => "00111011111000100111101101001010", 
    44 => "10111110001111110000100011001100", 
    45 => "00111110001100011011101011000011", 
    46 => "10111101010101100011010001101111", 
    47 => "00111100110011101101001100000010", 
    48 => "00111101010011101100100101110111", 
    49 => "10111101000111000101101100010101", 
    50 => "00111110000010001101110110100101", 
    51 => "00111101010111011110100010011001", 
    52 => "00111110001011111110001101101101", 
    53 => "10111110010101001000110010110101", 
    54 => "00111101000111000111011010101001", 
    55 => "10111101100000011110001001011000", 
    56 => "10111110000110000011111011001001", 
    57 => "10111101110100010011010000000101", 
    58 => "00111100110010010111001010100101", 
    59 => "00111101111111110010111101010101", 
    60 => "10111101101000100101100111100010", 
    61 => "00111101001101111001011000111010", 
    62 => "10111100110010010111101100111110", 
    63 => "00111101110001110010111110111010", 
    64 => "10111101100000001101100101011111", 
    65 => "10111101010110111010100010011101", 
    66 => "00111110001101111010101110111001", 
    67 => "10111100101011000011001110011010", 
    68 => "00111101100110110101011101011010", 
    69 => "00111100101111000010101100101001", 
    70 => "00111110000011011110110110101111", 
    71 => "10111101110110110011010000011110", 
    72 => "00111101111011000100111011111001", 
    73 => "00111101011000000101010111000110", 
    74 => "00111110001000101110100001111101", 
    75 => "10111110001000001100001010000011", 
    76 => "00111101110001111011001110100011", 
    77 => "10111100100101001000001110110000", 
    78 => "00111110010101010101110010010110", 
    79 => "00111110011101001000000101101111", 
    80 => "00111101000110110011010101100000", 
    81 => "10111100110101111010110000100100", 
    82 => "00111101000110010000001110001100", 
    83 => "10111101101101100111011101010110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_70 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_70 is
    component inference_mult_1_120_120_84_s_W4_70_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_70_rom_U :  component inference_mult_1_120_120_84_s_W4_70_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


