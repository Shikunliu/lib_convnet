-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110100001111100011111100111", 
    1 => "00111011110111010100010110010110", 
    2 => "00111101101000101000010111000100", 
    3 => "00111100101001101001101110101011", 
    4 => "00111110010110111111100010111010", 
    5 => "10111101110000110001101011101101", 
    6 => "10111100011001010110101001010011", 
    7 => "00111101010110101110100111111100", 
    8 => "10111110011000011011111000101011", 
    9 => "10111101100000101110001110101010", 
    10 => "00111011110010010110001011001010", 
    11 => "00111101110011010100100010001000", 
    12 => "10111101001010000010011010010000", 
    13 => "10111101101110111010111011101000", 
    14 => "00111101001100010010111100010111", 
    15 => "00111110000000101010001011000010", 
    16 => "10111101011001010100010111110000", 
    17 => "00111100001100011000001011000100", 
    18 => "10111101011100000110111001000010", 
    19 => "10111101110001101011010111100010", 
    20 => "00111101001000001010101000010100", 
    21 => "10111101001101101010111100000100", 
    22 => "10111101001001100101101111001111", 
    23 => "10111110000101111000101000101011", 
    24 => "00111100100011011011111010011010", 
    25 => "10111101000111111100011011110101", 
    26 => "00111101000000100111111000001111", 
    27 => "00111101100111100010111101111011", 
    28 => "00111101000111100101011110001001", 
    29 => "10111100011110001110101001100010", 
    30 => "00111100101110111111011111001000", 
    31 => "00111101110101101101011001010110", 
    32 => "10111101010011000001110111001011", 
    33 => "00111101101111100010110001001000", 
    34 => "10111101110010100000001101100111", 
    35 => "10111101101100110110010100011101", 
    36 => "10111110010011111101100001101011", 
    37 => "10111101110001100100011010010011", 
    38 => "10111100110101001001110011011011", 
    39 => "00111100111111011110011101010111", 
    40 => "00111110000000001010010111110000", 
    41 => "10111101001001001000010110111100", 
    42 => "10111011111101101010100000010011", 
    43 => "10111011100011011110100101111000", 
    44 => "00111101001011001100111110100010", 
    45 => "00111101111110010001101010111001", 
    46 => "00111110011100110110100111111101", 
    47 => "10111101000100001100000000001100", 
    48 => "10111110011101101000101000001101", 
    49 => "10111110000001011010110111011010", 
    50 => "00111011110110101100110000101001", 
    51 => "10111011110001100001000100011100", 
    52 => "10111110000101110010100100101100", 
    53 => "10111101010100000111011110110010", 
    54 => "00111101000011011011001100101100", 
    55 => "10111011101110001111010111010101", 
    56 => "00111110001010011000101001100101", 
    57 => "10111101000110100011111101100001", 
    58 => "10111110000001101111010001111011", 
    59 => "00111100010100101010100001000100", 
    60 => "10111101001100111100010001010011", 
    61 => "00111110001011100001010111001010", 
    62 => "10111101011110110010110111101110", 
    63 => "10111101100011111101001000111011", 
    64 => "00111101101101101111000011111000", 
    65 => "10111110001000101010101100100110", 
    66 => "00111101001101110110100011101101", 
    67 => "10111010101000010011011110011110", 
    68 => "00111100100100101100110111001101", 
    69 => "00111101011011001110011000010010", 
    70 => "00111100110101010111000010101011", 
    71 => "00111110000100001111110001110010", 
    72 => "10111100000011001001110000011011", 
    73 => "10111101001001100101101001110010", 
    74 => "00111100001011010011110001111001", 
    75 => "10111101100111010000010100000001", 
    76 => "10111101101000001100100001000111", 
    77 => "00111100110001011110010001111011", 
    78 => "00111101100100101000001101000000", 
    79 => "00111101110100101001011011110110", 
    80 => "00111110001001000110000110110111", 
    81 => "10111101101010010111100110000011", 
    82 => "00111101000100000100010111100011", 
    83 => "00111101101000010001100000111011", 
    84 => "10111101001001001110111100011101", 
    85 => "00111100101111100100100101000111", 
    86 => "10111100011001101001100001010000", 
    87 => "00111101110000101001111001000000", 
    88 => "00111100100010100100011010101011", 
    89 => "00111101111100110100100000101100", 
    90 => "10111101000111000101110010101000", 
    91 => "00111101100100111011010001111101", 
    92 => "00111101011011101101001000010000", 
    93 => "10111110000000101011000000100001", 
    94 => "10111101110111001010100111101111", 
    95 => "10111101110110011000001010001000", 
    96 => "00111101011011110010000101110001", 
    97 => "00111110001111010000000111000001", 
    98 => "00111110001000111010010101111111", 
    99 => "10111101000101010001000010000011", 
    100 => "00111000101101111000101110110010", 
    101 => "00111110010000101000111010010011", 
    102 => "10111101111011011010111000111110", 
    103 => "10111101111001011010000000111000", 
    104 => "00111101001101101110101110111010", 
    105 => "00111101101101001100100010111101", 
    106 => "10111101011000101011101011100000", 
    107 => "00111101100000100100101110111010", 
    108 => "00111101010010011110110110100101", 
    109 => "00111101111011010000101100110001", 
    110 => "00111110001010000110110100101111", 
    111 => "00111101100110001001100010110011", 
    112 => "10111110000110110010101110111011", 
    113 => "10111100101010101111110010011000", 
    114 => "10111101101110000001110000111100", 
    115 => "10111110001010000100001010110111", 
    116 => "00111101100110000001011000001100", 
    117 => "00111100100010110000011011000100", 
    118 => "00111101111011110011000100101011", 
    119 => "10111101010011100010000101100001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_9 is
    component inference_conv2d_f3_4_4_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_9_rom_U :  component inference_conv2d_f3_4_4_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


