-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011001000111110011111010", 
    1 => "00111110000010001100110110100111", 
    2 => "00111101000000111111111110111010", 
    3 => "10111101101001010011001110010110", 
    4 => "00111101011100011000110001101010", 
    5 => "10111101111010101111010011110001", 
    6 => "10111110001010000101101001001111", 
    7 => "10111110010010001011011010010101", 
    8 => "10111101111000000011010011110100", 
    9 => "10111101010001111111011010001001", 
    10 => "00111101010010110110110000001111", 
    11 => "00111101010100110000101001101001", 
    12 => "10111101100000001011111001011110", 
    13 => "10111110000011110111110001100111", 
    14 => "10111101101111011101110011101000", 
    15 => "10111101000101110110001110101111", 
    16 => "00111101011101110000001110100010", 
    17 => "00111101111011000000011000011000", 
    18 => "10111110001101010111100000011100", 
    19 => "10111110001101100011101111101111", 
    20 => "10111100110100101110001010010001", 
    21 => "00111101111110100000100011000000", 
    22 => "10111101110010001010100110110000", 
    23 => "00111101101011111011010001011000", 
    24 => "10111101010011011010001000101111", 
    25 => "10111101100000011010011101001111", 
    26 => "00111101100011000100010111100111", 
    27 => "00111101001011011100010111110001", 
    28 => "10111110000010001011100110111011", 
    29 => "00111101001100001110101111000110", 
    30 => "10111100000000111100000001010100", 
    31 => "10111101011100011010101100111110", 
    32 => "00111100101000001111001010111111", 
    33 => "00111011110110001010111111011010", 
    34 => "10111100000000011001001001110010", 
    35 => "00111101110111011000011110110101", 
    36 => "00111011110000000101001111011000", 
    37 => "10111101100101110000111000000100", 
    38 => "00111101111101100111011111110111", 
    39 => "00111110010100111111001011010100", 
    40 => "10111011111000000111110011101101", 
    41 => "00111110100111101001110111011000", 
    42 => "00111101101110000101101111100010", 
    43 => "10111110010011000001000011011000", 
    44 => "00111101100001001011110010010011", 
    45 => "00111101101000111101011010010001", 
    46 => "10111100010101011110001010001011", 
    47 => "10111101110111110011101101100100", 
    48 => "00111101101100000010100110000110", 
    49 => "10111101110111010001001111010111", 
    50 => "10111101111100111000101101001000", 
    51 => "10111101000100100011101010010101", 
    52 => "10111101100111011011000000111100", 
    53 => "10111101101100010010100100000010", 
    54 => "10111101011000011110111010011101", 
    55 => "00111101010111000111111010000110", 
    56 => "10111101110001010101011111000011", 
    57 => "10111101000100000011110010001110", 
    58 => "10111101110111101001011000111110", 
    59 => "10111101010000111101001001010010", 
    60 => "10111101001011101010001010101011", 
    61 => "00111101010110011011101000110110", 
    62 => "00111101101111011101011101110100", 
    63 => "10111110001000010100010100001111", 
    64 => "00111101001000011011011000110011", 
    65 => "10111101101011101000111100110111", 
    66 => "10111101101000101001001111000100", 
    67 => "00111110011100011101111000100111", 
    68 => "10111101110100101010001100000101", 
    69 => "00111101010010100001111001001100", 
    70 => "00111101000011000000111011100111", 
    71 => "10111110011100101110100111001101", 
    72 => "10111110001100101101001000110101", 
    73 => "00111101011110001101100000001000", 
    74 => "10111101101010110111000001101001", 
    75 => "00111100000100110101111010000010", 
    76 => "10111110001000001101011001101111", 
    77 => "10111101101100010111111111010101", 
    78 => "00111101001101111000101100011100", 
    79 => "00111101001111111011100110111111", 
    80 => "10111100000101000100000001101001", 
    81 => "10111011101001111110111111011110", 
    82 => "10111101101101111010011101111001", 
    83 => "00111101011110110000001011110000", 
    84 => "10111110000010001001100001110000", 
    85 => "00111101100000000100010101111000", 
    86 => "10111101100101101010101010000001", 
    87 => "00111101010110110010000100111110", 
    88 => "00111101101000010010011001010110", 
    89 => "00111100110011001001010001100011", 
    90 => "00111101101001111100111110010101", 
    91 => "00111101101100010101100110011100", 
    92 => "00111110010100000001101101000011", 
    93 => "10111110011110011011011110111111", 
    94 => "10111101101001001101000100111011", 
    95 => "00111101101100101010111011000100", 
    96 => "10111101111010011010000110111010", 
    97 => "00111101101110001011011100110110", 
    98 => "00111101101101011101011001000110", 
    99 => "00111100101001100100010001101101", 
    100 => "00111101110010010010101000111110", 
    101 => "10111101001101111011111010011000", 
    102 => "10111100110010111100011000111101", 
    103 => "10111101101111110100110111110100", 
    104 => "10111101000011001011010001000011", 
    105 => "10111100110100001001010001101101", 
    106 => "00111101011111100111101010001111", 
    107 => "10111110000011000110100111111001", 
    108 => "00111101110011110101101110100011", 
    109 => "10111101110111111001000001010100", 
    110 => "00111101100111100010001010100011", 
    111 => "10111101011011101101111101100001", 
    112 => "10111100100101011111111110110001", 
    113 => "00111100011001110101001010001010", 
    114 => "00111101111110011001110101000101", 
    115 => "00111110001010000011010110011100", 
    116 => "00111110001110010001111100101110", 
    117 => "00111110001100011011110000010010", 
    118 => "00111101100111101011110001000001", 
    119 => "00111110001010111010010111100011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_0 is
    component inference_conv2d_f3_4_2_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_0_rom_U :  component inference_conv2d_f3_4_2_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


