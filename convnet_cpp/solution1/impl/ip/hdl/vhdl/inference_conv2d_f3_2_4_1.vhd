-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100001111010000100111100001", 
    1 => "00111101000011010011000110101100", 
    2 => "00111100100011100110011011001011", 
    3 => "00111101100100001010011101001101", 
    4 => "10111011010001111110100000110111", 
    5 => "00111110000110010010110000000110", 
    6 => "10111101100011110100001110000101", 
    7 => "00111110010011010101001100000101", 
    8 => "10111100100111001001000111010001", 
    9 => "00111100101111011010101001010000", 
    10 => "00111101011111011110100110100101", 
    11 => "00111101010000000010101011111110", 
    12 => "10111011010100001011111100100000", 
    13 => "00111101101100011111110110000001", 
    14 => "00111101010010101110111000000101", 
    15 => "00111101001001000010111100111010", 
    16 => "00111110001100100110001010001001", 
    17 => "10111100101000101101011011111010", 
    18 => "10111101010111111010001100110011", 
    19 => "00111110000000100100011101000101", 
    20 => "10111110001011001011100000010111", 
    21 => "00111101101110101011010001110100", 
    22 => "00111101111110101101110010010000", 
    23 => "00111110000011011011101001001101", 
    24 => "10111101100010001001101000000010", 
    25 => "10111101100110111101001000100011", 
    26 => "00111110000010100000001111000101", 
    27 => "00111101110100101110111010000101", 
    28 => "00111110001100001000101011110000", 
    29 => "00111101111010101100110000001100", 
    30 => "00111101101000000100000110001001", 
    31 => "10111100101011001111010000011111", 
    32 => "00111101010000011111010000101100", 
    33 => "00111101111101010000011001010111", 
    34 => "10111100101100110000111000010101", 
    35 => "00111101100011110110110011001000", 
    36 => "00111110000000010010101101011110", 
    37 => "10111101110000010101001111011000", 
    38 => "10111100000001011001001010100111", 
    39 => "00111110010010001000100011111000", 
    40 => "00111101011101010101110101111010", 
    41 => "10111110000110101100100011100111", 
    42 => "00111101101110111111001000011111", 
    43 => "10111101100011001111111011101100", 
    44 => "10111101100010001100000111000000", 
    45 => "00111110001010011100110000110010", 
    46 => "10111101100100101111001100111101", 
    47 => "10111110000110101001100110110111", 
    48 => "10111101000001001101001011001110", 
    49 => "00111100001100011010011000000000", 
    50 => "10111101011110000000100001101010", 
    51 => "10111101000110110001101110010101", 
    52 => "00111101000110010000011001111100", 
    53 => "00111100000000110100101000001100", 
    54 => "00111110010011001010111001100100", 
    55 => "00111100100100101011100010011111", 
    56 => "00111100100101001111011111011111", 
    57 => "00111110000011101011101000101000", 
    58 => "00111101100010110011001000010011", 
    59 => "10111110000010100001111110001110", 
    60 => "10111100111110110000000110010011", 
    61 => "00111101100010011101010100110110", 
    62 => "00111101100111100111110001010111", 
    63 => "10111101000011001110110110111010", 
    64 => "00111110000000100000010011110011", 
    65 => "00111101010111111001011001001110", 
    66 => "10111101101100000100100110110111", 
    67 => "00111101101110110011011011001011", 
    68 => "10111101111011100110011111010111", 
    69 => "00111101000000101010100010100001", 
    70 => "10111110001101001000000110110010", 
    71 => "10111101001001010011000010001100", 
    72 => "00111101110010010001101001000000", 
    73 => "10111101101001010011110011011110", 
    74 => "00111100110100110001100100010111", 
    75 => "10111101011111010101010101111011", 
    76 => "00111110001000110101001000100010", 
    77 => "00111010100111111010110000000010", 
    78 => "00111110000011010011110011111111", 
    79 => "10111101100011101110110001100010", 
    80 => "10111100101010011110111011100111", 
    81 => "10111101111000010010011000100000", 
    82 => "10111101111101110001001110101101", 
    83 => "00111101001111011010111111111001", 
    84 => "10111110000100011100010011111100", 
    85 => "00111101000001011111000000111010", 
    86 => "10111101000101110001101011001111", 
    87 => "00111101000100101100001100011011", 
    88 => "00111110001001010001011011011011", 
    89 => "10111110000101000011110100000100", 
    90 => "00111101100100110111000010011000", 
    91 => "00111101010010100100011011111011", 
    92 => "10111011100001010111111111011100", 
    93 => "00111110010101100000011000110001", 
    94 => "10111100110011101110000101111010", 
    95 => "10111101110000011000110001001111", 
    96 => "00111101100101001001110000000100", 
    97 => "00111010110111010111110101001001", 
    98 => "10111101100110111111101001100111", 
    99 => "00111101010011011110010011000101", 
    100 => "00111101100001101101000010111010", 
    101 => "00111101011001100011000000110000", 
    102 => "00111011001110101000001110011111", 
    103 => "00111011100110110010001000110000", 
    104 => "00111110000000011111001000010011", 
    105 => "00111110000000001111111101010100", 
    106 => "10111101011001111110000001101001", 
    107 => "10111101101001110110011100100101", 
    108 => "00111010010000001110101110110010", 
    109 => "00111100011011001111010000011111", 
    110 => "10111101000010010000111010110111", 
    111 => "10111101101011011000010010010000", 
    112 => "10111110000001010000111101000001", 
    113 => "00111101011000111101110011101001", 
    114 => "00111101101110100111000100010101", 
    115 => "10111110000001011000010100111000", 
    116 => "10111011111100010100100111000100", 
    117 => "00111110001010101101000111010000", 
    118 => "00111101101011111010111110111011", 
    119 => "00111101111110001001100010110011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_1 is
    component inference_conv2d_f3_2_4_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_1_rom_U :  component inference_conv2d_f3_2_4_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


