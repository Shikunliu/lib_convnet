-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100000101000001011101111", 
    1 => "10111101110110111100000100100111", 
    2 => "10111010000011111111010101110000", 
    3 => "10111101011110110011110010011100", 
    4 => "10111100100010001100111010100110", 
    5 => "00111110000100110011111010111100", 
    6 => "10111101110110101011110000001110", 
    7 => "10111101110011100111101000110001", 
    8 => "10111110001011000001101000000101", 
    9 => "00111100010011101001101000101100", 
    10 => "10111110000001010111000000111111", 
    11 => "00111101110001100110000100011011", 
    12 => "00111100000111011010011100000101", 
    13 => "10111101111111111001011110101011", 
    14 => "10111110001001011011001111100001", 
    15 => "00111101101110001110100110001011", 
    16 => "00111101100000100000111101000111", 
    17 => "00111100111111000101100111101110", 
    18 => "10111110000010010010110000000110", 
    19 => "00111010100011100101000110111101", 
    20 => "00111101011000101111111001001101", 
    21 => "10111101100100011001011010001000", 
    22 => "10111100000100111101110001000000", 
    23 => "00111110000011101110101001100100", 
    24 => "10111010101101101000011100111011", 
    25 => "00111010111010001110011011011111", 
    26 => "00111101100000110110111111000001", 
    27 => "00111101111100110001011111110000", 
    28 => "00111110000100100000110001001010", 
    29 => "10111101101011110001101001110111", 
    30 => "00111100011111101110100000111101", 
    31 => "10111101111100011010001010100101", 
    32 => "10111101100001100111011000010100", 
    33 => "00111101101001000100110101101101", 
    34 => "00111101111110010011001101011101", 
    35 => "00111101011100001101010000101110", 
    36 => "00111110000000001011110110001000", 
    37 => "10111100000011000010000101101100", 
    38 => "00111100100011101001100001111111", 
    39 => "00111101001101110011101001000100", 
    40 => "00111110001000110111111110111111", 
    41 => "10111011101010010100001010011010", 
    42 => "10111101101000000000000110100000", 
    43 => "10111101100010011010100100101100", 
    44 => "10111101100011010111101001111111", 
    45 => "00111101000010100010100111110000", 
    46 => "10111110001100111011100101101011", 
    47 => "10111101011110000101011000111000", 
    48 => "10111101011000110100010110011010", 
    49 => "10111101010111011000000100011010", 
    50 => "00111101100111110001110011111100", 
    51 => "00111101011110001011011000001111", 
    52 => "10111101011001001101111011000010", 
    53 => "00111100001100101001110111100010", 
    54 => "10111011000101011100101101011001", 
    55 => "00111100110100110010100111011110", 
    56 => "10111101100111100111111101100010", 
    57 => "10111101100100001001000110011000", 
    58 => "00111101101010000111000011011010", 
    59 => "10111101000000001011101010100110", 
    60 => "00111101100101101101000000001011", 
    61 => "00111101110110001011010110001001", 
    62 => "10111011100001110010010011111000", 
    63 => "10111110001111010101001101001000", 
    64 => "10111101011100000110101100111000", 
    65 => "00111110001101001100100100000000", 
    66 => "00111101100100010001110100101001", 
    67 => "00111101010010111110010001010101", 
    68 => "00111110001001000000101111111110", 
    69 => "10111101000101101100111111110000", 
    70 => "10111101100101101000100111100101", 
    71 => "00111100111111111000110001110010", 
    72 => "10111101111001000100011111000011", 
    73 => "00111100100000001000110101011001", 
    74 => "10111100011110010011110000101100", 
    75 => "10111101001110000010110101101110", 
    76 => "10111101101010100111110111101101", 
    77 => "10111100011101111001101001101011", 
    78 => "10111011010010001111010101010010", 
    79 => "10111100100010110100010111100100", 
    80 => "10111101000010101111101000010100", 
    81 => "10111110001000111100100111101111", 
    82 => "00111101101011010101110001011010", 
    83 => "10111101110011010110001111001100", 
    84 => "10111101110111111100110100100101", 
    85 => "10111110010001111100000001101110", 
    86 => "00111110001000100010000010111100", 
    87 => "10111101001101010000011010001101", 
    88 => "10111101101010000010101011011100", 
    89 => "10111110000100101010001011000010", 
    90 => "00111101011101110000100000001010", 
    91 => "10111110001111111000010111010111", 
    92 => "10111100010010110110011010011011", 
    93 => "10111101101010110111001001100111", 
    94 => "10111101110011010000100000001011", 
    95 => "00111110000110011101000111110110", 
    96 => "10111101011011001100110110111110", 
    97 => "10111101110001010010100100100111", 
    98 => "10111101110011000001001001000010", 
    99 => "00111101011000010110000111100101", 
    100 => "10111101100110011111011110001101", 
    101 => "10111110010001110011011011001110", 
    102 => "10111110000100010010111011000111", 
    103 => "00111101110101111111010110100101", 
    104 => "10111101011000100011000110011110", 
    105 => "00111101101001010011110001110010", 
    106 => "10111101100011011001000011110000", 
    107 => "00111101100111010110001110111110", 
    108 => "00111101101100100110010100001101", 
    109 => "10111101111101000100111011010111", 
    110 => "10111101000011101000010001111000", 
    111 => "10111101111100000111011011000000", 
    112 => "10111101100011000100110110000001", 
    113 => "00111110000111000110011001001101", 
    114 => "00111101101001001010001011100010", 
    115 => "00111110001000001100100011001101", 
    116 => "00111110000110010000101111001000", 
    117 => "10111110000000100110001010001001", 
    118 => "00111100010100101100010110100000", 
    119 => "10111101010010110100101001001011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_3 is
    component inference_conv2d_f3_2_3_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_3_rom_U :  component inference_conv2d_f3_2_3_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


