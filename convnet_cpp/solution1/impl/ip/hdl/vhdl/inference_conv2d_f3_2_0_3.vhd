-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000101011110011111001001", 
    1 => "10111101010111000100001010100110", 
    2 => "10111100000111001110011000010101", 
    3 => "00111101110101100101000000011110", 
    4 => "00111101110110111010010011010111", 
    5 => "10111100011101011111001110100010", 
    6 => "10111100101011001011111000111010", 
    7 => "10111110000000000111010010100111", 
    8 => "00111110000101100111110110111011", 
    9 => "10111110010000010010111101001101", 
    10 => "10111101000001000001000100100010", 
    11 => "00111100110000100000111110100101", 
    12 => "10111101000101110110110100111010", 
    13 => "10111101110101100000110110001000", 
    14 => "10111100001011001000111101000000", 
    15 => "00111110001000101011000110110011", 
    16 => "00111110000111110011001001111011", 
    17 => "00111110000011000000111000111001", 
    18 => "00111110001011101010100111100111", 
    19 => "10111011111000011001101001100100", 
    20 => "00111100110001000111011111001001", 
    21 => "00111110001000001001010101101100", 
    22 => "10111101010000100011011010001100", 
    23 => "00111101011001011000010100101010", 
    24 => "10111100110101111100111100101010", 
    25 => "00111101001010011001001000011010", 
    26 => "00111100000110100000010011100100", 
    27 => "10111101100000110001010111001010", 
    28 => "00111101101001011011010010111000", 
    29 => "00111101100010110100010001000100", 
    30 => "00111101001010010101110001010000", 
    31 => "00111101111101110110101010110110", 
    32 => "00111101001010000001100111100000", 
    33 => "00111101010001111100101000101111", 
    34 => "10111101111100111010001111101100", 
    35 => "00111101001010000110111001001001", 
    36 => "00111101000011000011001100010100", 
    37 => "00111100001010110101010010101101", 
    38 => "10111101010010101000001010100101", 
    39 => "10111101011110101011000101110111", 
    40 => "10111101000110011100101011100010", 
    41 => "00111110001010111001100011001000", 
    42 => "00111110000110100001011011101000", 
    43 => "00111101000111011100100111100000", 
    44 => "10111101110100101100011000100110", 
    45 => "00111011111000001110100101111010", 
    46 => "10111101011000111011000100110000", 
    47 => "00111110001010101010110110100011", 
    48 => "10111101110110110011001010001011", 
    49 => "00111100100001111111001110110101", 
    50 => "10111101101100100001101110001011", 
    51 => "10111100101111000110000100001111", 
    52 => "10111101101110010110011010110001", 
    53 => "10111100100011011011000011111000", 
    54 => "10111101111011000010101101010010", 
    55 => "10111101010101111100111001010011", 
    56 => "00111101101000110111100010000011", 
    57 => "10111011010111000001111111111100", 
    58 => "10111101100111010010100011000011", 
    59 => "10111101100001110011101100000000", 
    60 => "00111101011110100011111001110000", 
    61 => "00111110000111011101010010000100", 
    62 => "10111101011000101110101010110001", 
    63 => "10111101001111000111101101111100", 
    64 => "00111101100101110110101010101000", 
    65 => "00111101011100100111101101111101", 
    66 => "00111100101001101010011010010011", 
    67 => "00111101010111100010001101010001", 
    68 => "00111100101100000011010010110001", 
    69 => "10111101100100010111001000100110", 
    70 => "00111100111010111101100011001100", 
    71 => "00111101001011000111001101011011", 
    72 => "00111101100011011011100111000111", 
    73 => "00111101100011010010111111100100", 
    74 => "00111010000001000001101000101011", 
    75 => "10111101000000110100000010010010", 
    76 => "10111001100110101110101010000101", 
    77 => "10111101101010111001110110000000", 
    78 => "10111101101001001100000011000101", 
    79 => "00111101011110000000010111001011", 
    80 => "00111100000011101000110010001011", 
    81 => "00111100100100110110110101100101", 
    82 => "00111110011000100001110111011010", 
    83 => "00111101011100011000011001110000", 
    84 => "00111101100100101011001000010001", 
    85 => "10111101101000110010100101001010", 
    86 => "00111101101110111000110101011010", 
    87 => "10111101100010101001100101001100", 
    88 => "00111101100001000010011001000011", 
    89 => "00111110010011101001100100100000", 
    90 => "00111101101001111101110101101100", 
    91 => "10111110001011110111110000100100", 
    92 => "10111101101000101100111101010011", 
    93 => "00111101011100110100101101101100", 
    94 => "10111101000010010010010101011110", 
    95 => "00111100111101001100100011001010", 
    96 => "10111110010001111100010000011010", 
    97 => "00111101110010100111111110011011", 
    98 => "10111110000000101000011100111100", 
    99 => "10111100110110001001101011001100", 
    100 => "00111110001001110101100100100101", 
    101 => "00111100101000101111000001011010", 
    102 => "10111101011001111110100011101000", 
    103 => "00111110000011011011110110110110", 
    104 => "10111110010011110110111111010010", 
    105 => "00111110001011011110110100101001", 
    106 => "10111101110000000011011000110110", 
    107 => "00111101011011011000011101110010", 
    108 => "10111101110000110000011110100010", 
    109 => "00111110001100011110111000100100", 
    110 => "00111110000110101100001110101000", 
    111 => "00111100100010111100001000001011", 
    112 => "10111101010110111011000010010101", 
    113 => "00111101010110010101100101101101", 
    114 => "10111011110111111000111011110001", 
    115 => "00111110001001000010000001110001", 
    116 => "10111011101101101100000100000111", 
    117 => "00111101101100110010001001101100", 
    118 => "10111110000011001111001110011001", 
    119 => "00111110000110111000011101111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_3 is
    component inference_conv2d_f3_2_0_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_3_rom_U :  component inference_conv2d_f3_2_0_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


