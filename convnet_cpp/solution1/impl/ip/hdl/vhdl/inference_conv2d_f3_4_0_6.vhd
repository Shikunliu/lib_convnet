-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100000100110100000010111", 
    1 => "10111101110101000111001100000100", 
    2 => "00111101101000001100100100011110", 
    3 => "00111101110010101001010001101011", 
    4 => "10111101000101100111011110100110", 
    5 => "00111100101110100011100110111000", 
    6 => "00111101011010011011011000010010", 
    7 => "10111101000011010011101010010110", 
    8 => "00111110000010000011100011000001", 
    9 => "10111101100000110111111001101111", 
    10 => "10111110000101011001010101111001", 
    11 => "00111101100001001100011010010110", 
    12 => "10111100101010000001101010011100", 
    13 => "10111101110110100100010010000101", 
    14 => "00111101101100001100010101100101", 
    15 => "00111101101111110110100000011101", 
    16 => "00111110000100110011110011100110", 
    17 => "00111101011011001101001010010001", 
    18 => "00111101000011011110111011010110", 
    19 => "00111100111010010010011111100010", 
    20 => "10111101001000000101010000110011", 
    21 => "00111101000100100010100100101101", 
    22 => "00111101100101011001101001110100", 
    23 => "00111101100101011000100001010000", 
    24 => "10111101101000101001101101000011", 
    25 => "10111101010011001001101011001000", 
    26 => "10111101011001100100000110011000", 
    27 => "10111101001001000111111010110101", 
    28 => "10111101100100100001001000000001", 
    29 => "00111101111001001100010110010111", 
    30 => "10111110010110001101101000111100", 
    31 => "10111011100011001110010110010111", 
    32 => "10111101011001011001000110001010", 
    33 => "10111100111010110000001111101111", 
    34 => "10111101100000111111000100110100", 
    35 => "00111101100000111110100110001100", 
    36 => "00111100110010000001100001101000", 
    37 => "10111100101011110111010001100010", 
    38 => "10111011001100111101100000110100", 
    39 => "00111011101000011111110111000001", 
    40 => "00111100000010101101111101010111", 
    41 => "00111100101111100000100001000100", 
    42 => "00111101110101000000110111010100", 
    43 => "10111101010000011001010100010001", 
    44 => "10111011101000101000000110001010", 
    45 => "00111101100010110101000010110001", 
    46 => "10111101000000011100110101111010", 
    47 => "10111101110011101101111001010101", 
    48 => "10111110000010000011011001100101", 
    49 => "00111101000000001101110101110110", 
    50 => "10111110001011110011001010111110", 
    51 => "00111100111011000101000100101100", 
    52 => "10111110000101101110001101110001", 
    53 => "00111100101011111001100110000000", 
    54 => "00111110001001011000100011100011", 
    55 => "10111101011101001110111001010100", 
    56 => "00111101000000100100010001001000", 
    57 => "10111100001011000100100001011101", 
    58 => "00111101010001101000110010010001", 
    59 => "00111101110011100100111010101101", 
    60 => "00111100010111010111100011101100", 
    61 => "10111101100010100000111111101111", 
    62 => "10111101100101100100010000011101", 
    63 => "10111101011100110010000010100100", 
    64 => "10111101101000111000100111010000", 
    65 => "10111101010011010011110110111011", 
    66 => "10111100010010101000100010111010", 
    67 => "00111101111110011110010100011001", 
    68 => "10111101011111010100010110100110", 
    69 => "00111101000001111111111101110011", 
    70 => "10111110001000010001111100001100", 
    71 => "00111101100010111110011110000111", 
    72 => "10111101101110010110010110010111", 
    73 => "10111110001100111110101011110111", 
    74 => "00111101010100000101001001000011", 
    75 => "00111110000000010001110101111010", 
    76 => "10111101101101100001101001101110", 
    77 => "10111110001011101110111110100010", 
    78 => "00111101110110011011001000111110", 
    79 => "00111101100110110101010010101101", 
    80 => "10111101001000011010000111011100", 
    81 => "00111100101000100100001101010111", 
    82 => "10111101100110111110101000100110", 
    83 => "00111110001001001001100010000001", 
    84 => "00111101000000000001111101110101", 
    85 => "00111011100000001010111001010001", 
    86 => "10111101111110010111111011011100", 
    87 => "00111101110110101011011111011100", 
    88 => "00111100110011111111101110001011", 
    89 => "10111101100010101010000100101001", 
    90 => "00111101001000111111111110111010", 
    91 => "10111100100010100110100100010000", 
    92 => "10111010111100000111000110011000", 
    93 => "10111101100001101100111010101110", 
    94 => "10111101100010110111110111100011", 
    95 => "00111101000000001111100011010100", 
    96 => "10111101011010111001101100001001", 
    97 => "10111101001011101010010111101011", 
    98 => "00111101110110110001100111100111", 
    99 => "10111101111011101101001101010010", 
    100 => "00111110001011010001011000110011", 
    101 => "10111101111011001000000111010100", 
    102 => "00111101110100000101001010010011", 
    103 => "00111011101111011010011010111111", 
    104 => "10111101101101110110111001100001", 
    105 => "10111101110110111010011111111100", 
    106 => "10111100000100111011010011001000", 
    107 => "00111101000100111001100011001111", 
    108 => "10111101110010000011001010000100", 
    109 => "00111110000010011000110011000001", 
    110 => "00111100101010110011011101010001", 
    111 => "00111101100101110000100110110111", 
    112 => "10111100111010110101100101001010", 
    113 => "00111001111111101110111001001100", 
    114 => "10111100100100100111010000001011", 
    115 => "00111101100000111111000011100011", 
    116 => "10111110000101111010010001100001", 
    117 => "00111101101001011110010111011000", 
    118 => "10111110000101110111111100101000", 
    119 => "00111101100000110111110110011001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_6 is
    component inference_conv2d_f3_4_0_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_6_rom_U :  component inference_conv2d_f3_4_0_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


