-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010000100011111011101111", 
    1 => "00111100000011010100101111111001", 
    2 => "10111100001111010110101100110000", 
    3 => "00111110001001110110011011000111", 
    4 => "10111101100101010110000110111001", 
    5 => "00111100100010001101001001101100", 
    6 => "10111100000101001001111100011110", 
    7 => "10111011101010001100011110110101", 
    8 => "10111101110001101010111110010111", 
    9 => "00111101110000101000111100100110", 
    10 => "10111100100111111010111001010001", 
    11 => "10111101001111101101111011001110", 
    12 => "10111101010001011011101001010100", 
    13 => "00111110000001101000011100101011", 
    14 => "00111101011110010110111000110000", 
    15 => "10111101111010110110011100111100", 
    16 => "00111101000110111010011101000000", 
    17 => "00111101000010010100000010111100", 
    18 => "00111101100010000110101001011010", 
    19 => "10111011100101011101100010011010", 
    20 => "10111101000111101010001110101010", 
    21 => "10111101001010100100010101101001", 
    22 => "10111110001110000110001100111001", 
    23 => "10111101001110001101101111101010", 
    24 => "10111100111001011011110010001000", 
    25 => "10111101100010010000101010101110", 
    26 => "00111101001000101011000110001011", 
    27 => "00111101011011111111011101110100", 
    28 => "10111100100001110100001001111111", 
    29 => "10111110000111010001110100000100", 
    30 => "00111101110101010011100100110010", 
    31 => "00111101101001000110000000111111", 
    32 => "00111101100011001011010110100000", 
    33 => "10111011111110010001100000101111", 
    34 => "00111101101010000010101101010101", 
    35 => "10111011101110110101110000100010", 
    36 => "00111011110110110100001011110010", 
    37 => "00111110001011010001111101100000", 
    38 => "10111100110000111011010110010111", 
    39 => "00111101001110110001100010001010", 
    40 => "00111110010001001000111100010001", 
    41 => "00111100101010010100010001100111", 
    42 => "10111100110100111011010100011110", 
    43 => "00111101111110011011101010100001", 
    44 => "10111100110101111111000110001110", 
    45 => "10111101011000010101010100110101", 
    46 => "00111101101001111111010011110111", 
    47 => "10111100011111011001111111010011", 
    48 => "10111101010011110101010100100010", 
    49 => "10111100110000111111100001001000", 
    50 => "10111101101010101100011001000111", 
    51 => "10111110010000111001111100110100", 
    52 => "00111110001010011010101111110011", 
    53 => "00111101011001100110000100101000", 
    54 => "00111101111110101000001001100010", 
    55 => "00111101100010011000100100111110", 
    56 => "10111110000100111000011010010000", 
    57 => "10111100111000010100000001010111", 
    58 => "10111101100000111101011110010000", 
    59 => "00111100001010100110001110000001", 
    60 => "10111110000111001001111101110011", 
    61 => "00111010000101100001111011000011", 
    62 => "10111110001100101111011111110101", 
    63 => "10111100000000101101001010001110", 
    64 => "00111110010011001011110111011100", 
    65 => "00111101101011000101011011001000", 
    66 => "00111110000100100101101100110001", 
    67 => "00111011010001000101101101100100", 
    68 => "10111101111100100100110100001010", 
    69 => "10111110000001010110110001010001", 
    70 => "00111101101001101000101010010011", 
    71 => "10111101100110111111011111110000", 
    72 => "10111110000010110010001110011010", 
    73 => "10111101101011010111101110100110", 
    74 => "00111011101000110001101001001100", 
    75 => "00111101100011001110110110000100", 
    76 => "00111110001100101001000100110010", 
    77 => "00111001001101010011011000110110", 
    78 => "00111101101010100110101100001110", 
    79 => "00111100011100010011000011000101", 
    80 => "00111011111010001000000100110011", 
    81 => "10111101000000111111010011010010", 
    82 => "00111101100110001110100110110100", 
    83 => "10111011001101101010010001101100", 
    84 => "10111101111110110111011111000000", 
    85 => "10111101110110101000101111010010", 
    86 => "10111011101000101111010001110111", 
    87 => "00111101010110011001011010101010", 
    88 => "00111101101110000010001100011010", 
    89 => "00111100111011011010001011010000", 
    90 => "00111100110111101011101010100000", 
    91 => "10111110001000000001001101100110", 
    92 => "10111101110101010010110010011101", 
    93 => "10111101001101010100100011010010", 
    94 => "10111110000100101100110010110100", 
    95 => "00111101010011000010010110001101", 
    96 => "00111101000101001011101101011110", 
    97 => "10111100101010001010011111110101", 
    98 => "10111101111110000110011111110001", 
    99 => "00111110001101000010111100011111", 
    100 => "10111101100110000101011101101101", 
    101 => "10111010001000110010010111001110", 
    102 => "00111110000011100001011101011101", 
    103 => "00111101101000111111011100101110", 
    104 => "00111101011000110010101001110010", 
    105 => "10111011110110001001101111001101", 
    106 => "10111110000011110101001001110110", 
    107 => "00111100111101101101001011000101", 
    108 => "00111101110110010000100011100110", 
    109 => "10111011101000111101010101011101", 
    110 => "00111100001011001001010100011111", 
    111 => "10111101111111011101100001110011", 
    112 => "10111101110101000001100011010111", 
    113 => "10111101100100100010101000111010", 
    114 => "10111101111100001000110000111111", 
    115 => "10111101001011000000010010111011", 
    116 => "00111101111100011111001001010110", 
    117 => "10111110001000100010011110001101", 
    118 => "10111101000111110011111011110101", 
    119 => "00111101111001110001111011110011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_3 is
    component inference_conv2d_f3_4_3_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_3_rom_U :  component inference_conv2d_f3_4_3_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


