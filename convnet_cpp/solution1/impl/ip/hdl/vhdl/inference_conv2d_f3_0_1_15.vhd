-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101010011010001111010", 
    1 => "00111110000000111110011100001000", 
    2 => "10111101100010011111101011001110", 
    3 => "10111101101111101100111011000010", 
    4 => "10111110000101100100101111101100", 
    5 => "00111101100100101001011000000101", 
    6 => "10111101110010110001101110110000", 
    7 => "00111101111011101101100110011101", 
    8 => "10111101101111111010010110001111", 
    9 => "00111110001111110110100110001000", 
    10 => "00111101001011100000100100001101", 
    11 => "10111101000110000000110111011110", 
    12 => "10111110000001111001001110011010", 
    13 => "10111110000000001011001110010010", 
    14 => "00111101100011100010000000010001", 
    15 => "10111101111100011000111010111001", 
    16 => "00111101110010011100000010110110", 
    17 => "00111110000001001010010100010110", 
    18 => "00111110000010100000000010011111", 
    19 => "00111101111000111111001011010100", 
    20 => "00111110000011111110111000101101", 
    21 => "10111101001011111101010001101111", 
    22 => "10111101111000011010010100000001", 
    23 => "10111101000100000110110110111100", 
    24 => "10111101111000000111010111110111", 
    25 => "10111101010011111110010001000100", 
    26 => "10110111001011110100100010001000", 
    27 => "10111101000000111000011011101110", 
    28 => "10111101100001101110000101100110", 
    29 => "10111101101010001101110010100110", 
    30 => "00111101101111100101111010011101", 
    31 => "10111110000000011000100100110111", 
    32 => "10111101000010010000010001010110", 
    33 => "00111101100001101111011011110010", 
    34 => "00111011110001000101100000011111", 
    35 => "00111101010110011101001101111011", 
    36 => "00111100100000101101011011011111", 
    37 => "10111101101110110101110110110010", 
    38 => "00111101100011101000000011001100", 
    39 => "00111101100001111011100111101110", 
    40 => "10111101101110100101011000111101", 
    41 => "00111101101000111000011110001111", 
    42 => "10111101100011011101000010010110", 
    43 => "00111101100011010001101011101011", 
    44 => "00111100111101010000010010001111", 
    45 => "10111110010001100000100101010111", 
    46 => "10111110000101100100010001010010", 
    47 => "00111101100101000110101111100011", 
    48 => "10111100110101011111111000111001", 
    49 => "00111011110001100110001001100101", 
    50 => "00111101110011100010000100010000", 
    51 => "00111101101000110010111111100110", 
    52 => "10111101001001100010111111000101", 
    53 => "00111110001000100000001001010100", 
    54 => "10111101110010110010100011011000", 
    55 => "00111101100011111100100001010010", 
    56 => "00111110000001111111001101001001", 
    57 => "10111101110000101111100100101001", 
    58 => "00111100110110011110000000010000", 
    59 => "10111101000000010010000001110111", 
    60 => "00111011100101111100100100110101", 
    61 => "00111101110011010001100011010010", 
    62 => "00111101011101111100010000100111", 
    63 => "00111101001111110011001011100110", 
    64 => "00111110000101100110110010110001", 
    65 => "10111101110101000010010101101100", 
    66 => "00111101111110110010010011101010", 
    67 => "00111101000011010011111111101111", 
    68 => "10111110000111110110010000000110", 
    69 => "10111101100001100001111011100011", 
    70 => "10111110000010101010111110111100", 
    71 => "00111101001111010011011000100001", 
    72 => "10111101111011010110101000010110", 
    73 => "10111101011010100010110010001111", 
    74 => "10111101111101010001101111010110", 
    75 => "10111101000110000101000101100101", 
    76 => "00111101000111011001001010011101", 
    77 => "10111101101010100000001001011010", 
    78 => "10111110000010101101001000010011", 
    79 => "10111101110110100010110011101101", 
    80 => "10111101001101010101101010100101", 
    81 => "00111100011110010001110110001110", 
    82 => "00111101100001010010001001100100", 
    83 => "10111101010011001111010110110010", 
    84 => "00111101100011110100110001100001", 
    85 => "10111110000110010100110100001110", 
    86 => "00111101101010010111110110001101", 
    87 => "10111010110000000011101010011000", 
    88 => "00111110000001011111010000011011", 
    89 => "10111110001001111010100101011101", 
    90 => "00111110001110011001111111100100", 
    91 => "10111100100000111101101000010101", 
    92 => "10111101111000000010011101010010", 
    93 => "00111101010011010110111110100101", 
    94 => "00111100100111101100001111011011", 
    95 => "00111100101000001110110011100000", 
    96 => "10111100000111000010010001001110", 
    97 => "00111100110100111010101000110111", 
    98 => "00111101000110100101110000000010", 
    99 => "00111101100011011011001101101111", 
    100 => "00111101010010100000001101011001", 
    101 => "10111101110111111011111011111101", 
    102 => "10111101101000001010111001010011", 
    103 => "00111100100000011110111101011001", 
    104 => "00111101010010011110110100011110", 
    105 => "00111100101010011100000101100101", 
    106 => "00111101100001000111010010110010", 
    107 => "10111110000010000101100001111001", 
    108 => "00111100100110000010110001000111", 
    109 => "00111110010100101011011001101011", 
    110 => "00111101101001111010110110110111", 
    111 => "00111101111111101011001000000111", 
    112 => "10111100001001001001111001000101", 
    113 => "00111101101000000101100011010000", 
    114 => "00111101100100000000010110101010", 
    115 => "00111100111100011000101010111101", 
    116 => "10111100110111010001101011111001", 
    117 => "00111101001010010101111111111011", 
    118 => "10111101010011101011000100001000", 
    119 => "00111101100010011001011110101001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_15 is
    component inference_conv2d_f3_0_1_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_15_rom_U :  component inference_conv2d_f3_0_1_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


