-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputImage_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputImage_ce0 : OUT STD_LOGIC;
    inputImage_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Filter1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Filter1_ce0 : OUT STD_LOGIC;
    Filter1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias1_ce0 : OUT STD_LOGIC;
    bias1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Filter2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Filter2_ce0 : OUT STD_LOGIC;
    Filter2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias2_ce0 : OUT STD_LOGIC;
    bias2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Filter3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Filter3_ce0 : OUT STD_LOGIC;
    Filter3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias3_ce0 : OUT STD_LOGIC;
    bias3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fcWeight_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    fcWeight_ce0 : OUT STD_LOGIC;
    fcWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fcBias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    fcBias_ce0 : OUT STD_LOGIC;
    fcBias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    smWeight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    smWeight_ce0 : OUT STD_LOGIC;
    smWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    smBias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    smBias_ce0 : OUT STD_LOGIC;
    smBias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outDigit : OUT STD_LOGIC_VECTOR (31 downto 0);
    outDigit_ap_vld : OUT STD_LOGIC );
end;


architecture behav of inference is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inference,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.733000,HLS_SYN_LAT=3731601,HLS_SYN_TPT=none,HLS_SYN_MEM=205,HLS_SYN_DSP=36,HLS_SYN_FF=6230,HLS_SYN_LUT=7226}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_54 : STD_LOGIC_VECTOR (13 downto 0) := "00000001010100";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_66 : BOOLEAN;
    signal i_1_fu_859_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_1548 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal tmp_36_fu_889_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_reg_1553 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_901_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_reg_1561 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal tmp_55_cast_fu_916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_reg_1566 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond8_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_927_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_179 : BOOLEAN;
    signal tmp_38_fu_949_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_reg_1584 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_961_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_5_reg_1592 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_193 : BOOLEAN;
    signal tmp_44_fu_996_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_reg_1597 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond21_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_1_fu_1008_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_1_reg_1605 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_207 : BOOLEAN;
    signal tmp_62_cast_fu_1023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_cast_reg_1610 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond22_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_1034_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_1623 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_223 : BOOLEAN;
    signal tmp_10_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_1628 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1051_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1641 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_239 : BOOLEAN;
    signal tmp_41_fu_1073_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_reg_1646 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond20_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_1085_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_6_reg_1654 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_253 : BOOLEAN;
    signal tmp_50_fu_1120_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_reg_1659 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond19_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_5_fu_1132_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_5_reg_1667 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_267 : BOOLEAN;
    signal tmp_71_cast_fu_1147_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_71_cast_reg_1672 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond18_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_2_fu_1161_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_2_reg_1680 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_281 : BOOLEAN;
    signal tmp_75_cast_fu_1176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_cast_reg_1685 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond17_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_1187_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_3_reg_1698 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_297 : BOOLEAN;
    signal tmp_14_fu_1193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_reg_1703 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond16_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_1204_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_1716 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_313 : BOOLEAN;
    signal tmp_46_fu_1226_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_reg_1721 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond15_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_1238_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_reg_1729 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_327 : BOOLEAN;
    signal tmp_54_fu_1261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_reg_1734 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond14_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_6_fu_1271_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_6_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_341 : BOOLEAN;
    signal tmp_60_fu_1310_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_60_reg_1747 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond13_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_3_fu_1322_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal l_3_reg_1755 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_355 : BOOLEAN;
    signal tmp_82_cast_fu_1337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_cast_reg_1760 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond12_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_4_fu_1348_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_4_reg_1773 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_371 : BOOLEAN;
    signal tmp_18_fu_1354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_1778 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond11_fu_1342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_1359_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_1788 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_387 : BOOLEAN;
    signal i_5_fu_1371_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_reg_1796 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_8_fu_1383_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_8_reg_1804 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_398 : BOOLEAN;
    signal tmp_81_cast_fu_1399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_cast_reg_1809 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond9_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_1410_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_9_reg_1822 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_414 : BOOLEAN;
    signal tmp_28_fu_1416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_reg_1827 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_1404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_1427_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_reg_1840 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_430 : BOOLEAN;
    signal tmp_64_fu_1457_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_reg_1845 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond6_fu_1421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_1469_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_1853 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_444 : BOOLEAN;
    signal tmp_86_cast_fu_1484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_cast_reg_1858 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_12_fu_1495_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_12_reg_1871 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_460 : BOOLEAN;
    signal tmp_31_fu_1501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_reg_1876 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_1489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i14_cast4_fu_1506_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i14_cast4_reg_1886 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_476 : BOOLEAN;
    signal j15_cast3_fu_1510_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j15_cast3_reg_1891 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_485 : BOOLEAN;
    signal k_11_fu_1520_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_11_reg_1899 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_494 : BOOLEAN;
    signal exitcond_fu_1514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1536_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_reg_1909 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_in_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_in_0_ce0 : STD_LOGIC;
    signal x_in_0_we0 : STD_LOGIC;
    signal x_in_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_in_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f1_0_ce0 : STD_LOGIC;
    signal f1_0_we0 : STD_LOGIC;
    signal f1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal b1_ce0 : STD_LOGIC;
    signal b1_we0 : STD_LOGIC;
    signal b1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal convOutput1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal convOutput1_ce0 : STD_LOGIC;
    signal convOutput1_we0 : STD_LOGIC;
    signal convOutput1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal convOutput1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal poolOut1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal poolOut1_ce0 : STD_LOGIC;
    signal poolOut1_we0 : STD_LOGIC;
    signal poolOut1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal poolOut1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal f2_ce0 : STD_LOGIC;
    signal f2_we0 : STD_LOGIC;
    signal f2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b2_ce0 : STD_LOGIC;
    signal b2_we0 : STD_LOGIC;
    signal b2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal convOutput2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal convOutput2_ce0 : STD_LOGIC;
    signal convOutput2_we0 : STD_LOGIC;
    signal convOutput2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal convOutput2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal poolOut2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal poolOut2_ce0 : STD_LOGIC;
    signal poolOut2_we0 : STD_LOGIC;
    signal poolOut2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal poolOut2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f3_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f3_ce0 : STD_LOGIC;
    signal f3_we0 : STD_LOGIC;
    signal f3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal b3_ce0 : STD_LOGIC;
    signal b3_we0 : STD_LOGIC;
    signal b3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal convOutput3_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal convOutput3_0_0_ce0 : STD_LOGIC;
    signal convOutput3_0_0_we0 : STD_LOGIC;
    signal convOutput3_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal convOutput3_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fcIn_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fcIn_0_ce0 : STD_LOGIC;
    signal fcIn_0_we0 : STD_LOGIC;
    signal fcIn_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fcIn_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fcOut4_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fcOut4_0_ce0 : STD_LOGIC;
    signal fcOut4_0_we0 : STD_LOGIC;
    signal fcOut4_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fcOut4_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W4_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal W4_ce0 : STD_LOGIC;
    signal W4_we0 : STD_LOGIC;
    signal W4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B4_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal B4_0_ce0 : STD_LOGIC;
    signal B4_0_we0 : STD_LOGIC;
    signal B4_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B4_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal W5_ce0 : STD_LOGIC;
    signal W5_we0 : STD_LOGIC;
    signal W5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B5_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B5_0_ce0 : STD_LOGIC;
    signal B5_0_we0 : STD_LOGIC;
    signal B5_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B5_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_fc_fu_800_ap_start : STD_LOGIC;
    signal grp_inference_fc_fu_800_ap_done : STD_LOGIC;
    signal grp_inference_fc_fu_800_ap_idle : STD_LOGIC;
    signal grp_inference_fc_fu_800_ap_ready : STD_LOGIC;
    signal grp_inference_fc_fu_800_X_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_fc_fu_800_X_0_ce0 : STD_LOGIC;
    signal grp_inference_fc_fu_800_X_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_fc_fu_800_W_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_inference_fc_fu_800_W_ce0 : STD_LOGIC;
    signal grp_inference_fc_fu_800_W_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_fc_fu_800_B_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_fc_fu_800_B_0_ce0 : STD_LOGIC;
    signal grp_inference_fc_fu_800_B_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_fc_fu_800_Y_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_fc_fu_800_Y_0_ce0 : STD_LOGIC;
    signal grp_inference_fc_fu_800_Y_0_we0 : STD_LOGIC;
    signal grp_inference_fc_fu_800_Y_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_sm_fu_808_ap_start : STD_LOGIC;
    signal grp_inference_sm_fu_808_ap_done : STD_LOGIC;
    signal grp_inference_sm_fu_808_ap_idle : STD_LOGIC;
    signal grp_inference_sm_fu_808_ap_ready : STD_LOGIC;
    signal grp_inference_sm_fu_808_X_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_sm_fu_808_X_0_ce0 : STD_LOGIC;
    signal grp_inference_sm_fu_808_X_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_sm_fu_808_W_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_inference_sm_fu_808_W_ce0 : STD_LOGIC;
    signal grp_inference_sm_fu_808_W_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_sm_fu_808_B_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_inference_sm_fu_808_B_0_ce0 : STD_LOGIC;
    signal grp_inference_sm_fu_808_B_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_sm_fu_808_argmax : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_sm_fu_808_argmax_ap_vld : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_ap_start : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_ap_done : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_ap_idle : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_ap_ready : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_x_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_inference_conv2d_fu_817_x_0_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_x_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_fu_817_W_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_inference_conv2d_fu_817_W_0_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_W_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_fu_817_b_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_inference_conv2d_fu_817_b_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_fu_817_out_feature_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_inference_conv2d_fu_817_out_feature_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_out_feature_we0 : STD_LOGIC;
    signal grp_inference_conv2d_fu_817_out_feature_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_1_fu_825_ap_start : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_ap_done : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_ap_idle : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_ap_ready : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_x_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_inference_conv2d_1_fu_825_x_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_1_fu_825_W_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_inference_conv2d_1_fu_825_W_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_W_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_1_fu_825_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_inference_conv2d_1_fu_825_b_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_1_fu_825_out_feature_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_inference_conv2d_1_fu_825_out_feature_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_out_feature_we0 : STD_LOGIC;
    signal grp_inference_conv2d_1_fu_825_out_feature_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_2_fu_833_ap_start : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_ap_done : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_ap_idle : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_ap_ready : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_inference_conv2d_2_fu_833_x_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_2_fu_833_W_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_inference_conv2d_2_fu_833_W_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_W_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_2_fu_833_b_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_conv2d_2_fu_833_b_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_conv2d_2_fu_833_out_feature_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_conv2d_2_fu_833_out_feature_0_0_ce0 : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_out_feature_0_0_we0 : STD_LOGIC;
    signal grp_inference_conv2d_2_fu_833_out_feature_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_maxPoolNxN_fu_841_ap_start : STD_LOGIC;
    signal grp_inference_maxPoolNxN_fu_841_ap_done : STD_LOGIC;
    signal grp_inference_maxPoolNxN_fu_841_ap_idle : STD_LOGIC;
    signal grp_inference_maxPoolNxN_fu_841_ap_ready : STD_LOGIC;
    signal grp_inference_maxPoolNxN_fu_841_x_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_inference_maxPoolNxN_fu_841_x_ce0 : STD_LOGIC;
    signal grp_inference_maxPoolNxN_fu_841_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_maxPoolNxN_fu_841_out_feature_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_inference_maxPoolNxN_fu_841_out_feature_ce0 : STD_LOGIC;
    signal grp_inference_maxPoolNxN_fu_841_out_feature_we0 : STD_LOGIC;
    signal grp_inference_maxPoolNxN_fu_841_out_feature_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_maxPoolNxN_1_fu_847_ap_start : STD_LOGIC;
    signal grp_inference_maxPoolNxN_1_fu_847_ap_done : STD_LOGIC;
    signal grp_inference_maxPoolNxN_1_fu_847_ap_idle : STD_LOGIC;
    signal grp_inference_maxPoolNxN_1_fu_847_ap_ready : STD_LOGIC;
    signal grp_inference_maxPoolNxN_1_fu_847_x_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_inference_maxPoolNxN_1_fu_847_x_ce0 : STD_LOGIC;
    signal grp_inference_maxPoolNxN_1_fu_847_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_maxPoolNxN_1_fu_847_out_feature_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_inference_maxPoolNxN_1_fu_847_out_feature_ce0 : STD_LOGIC;
    signal grp_inference_maxPoolNxN_1_fu_847_out_feature_we0 : STD_LOGIC;
    signal grp_inference_maxPoolNxN_1_fu_847_out_feature_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_509 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_520 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_814 : BOOLEAN;
    signal i1_reg_531 : STD_LOGIC_VECTOR (2 downto 0);
    signal j2_reg_542 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_553 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_834 : BOOLEAN;
    signal k4_reg_564 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_843 : BOOLEAN;
    signal i5_reg_575 : STD_LOGIC_VECTOR (2 downto 0);
    signal j6_reg_586 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_reg_597 : STD_LOGIC_VECTOR (2 downto 0);
    signal l8_reg_608 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_868 : BOOLEAN;
    signal k9_reg_619 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_877 : BOOLEAN;
    signal i8_reg_630 : STD_LOGIC_VECTOR (2 downto 0);
    signal j8_reg_641 : STD_LOGIC_VECTOR (2 downto 0);
    signal k6_reg_652 : STD_LOGIC_VECTOR (4 downto 0);
    signal l3_reg_663 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_902 : BOOLEAN;
    signal k8_reg_674 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_912 : BOOLEAN;
    signal i9_reg_685 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_696 : STD_LOGIC_VECTOR (13 downto 0);
    signal j9_reg_708 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_932 : BOOLEAN;
    signal exitcond10_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j7_reg_719 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_944 : BOOLEAN;
    signal i6_reg_730 : STD_LOGIC_VECTOR (6 downto 0);
    signal j10_reg_741 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_961 : BOOLEAN;
    signal j11_reg_752 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_971 : BOOLEAN;
    signal i7_phi_fu_768_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal i7_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_982 : BOOLEAN;
    signal j13_phi_fu_781_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal j13_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal k10_reg_789 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_1003 : BOOLEAN;
    signal grp_inference_fc_fu_800_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_1015 : BOOLEAN;
    signal grp_inference_sm_fu_808_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_1024 : BOOLEAN;
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_1031 : BOOLEAN;
    signal grp_inference_conv2d_fu_817_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_1047 : BOOLEAN;
    signal grp_inference_conv2d_1_fu_825_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_1056 : BOOLEAN;
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_1063 : BOOLEAN;
    signal grp_inference_conv2d_2_fu_833_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_1072 : BOOLEAN;
    signal grp_inference_maxPoolNxN_fu_841_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_1081 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_1088 : BOOLEAN;
    signal grp_inference_maxPoolNxN_1_fu_847_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_1097 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_1104 : BOOLEAN;
    signal tmp_32_fu_1526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_1541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_865_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_877_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_873_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_885_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_cast_fu_907_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_39_fu_911_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_37_fu_937_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_933_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast_fu_945_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_cast_fu_967_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_971_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_984_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_976_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_992_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_cast_fu_1014_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_1018_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_1061_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_cast_fu_1057_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_fu_1069_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_cast_fu_1091_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_1095_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_fu_1108_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_48_fu_1100_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_fu_1116_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_1138_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_1142_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_cast_fu_1167_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_61_fu_1171_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_45_fu_1214_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_cast_fu_1210_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl9_cast_fu_1222_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_cast_fu_1244_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_fu_1248_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_fu_1253_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_1277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_1281_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_1286_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_59_fu_1298_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_1290_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl10_cast_fu_1302_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_29_cast_fu_1328_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_65_fu_1332_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_cast_fu_1389_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_56_fu_1393_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_62_fu_1433_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_fu_1445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl12_cast_fu_1453_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl11_cast_fu_1441_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_cast_fu_1475_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_66_fu_1479_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_1531_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);

    component inference_fc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        X_0_ce0 : OUT STD_LOGIC;
        X_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        W_ce0 : OUT STD_LOGIC;
        W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Y_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        Y_0_ce0 : OUT STD_LOGIC;
        Y_0_we0 : OUT STD_LOGIC;
        Y_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_sm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        X_0_ce0 : OUT STD_LOGIC;
        X_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        W_ce0 : OUT STD_LOGIC;
        W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_0_ce0 : OUT STD_LOGIC;
        B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        argmax : OUT STD_LOGIC_VECTOR (31 downto 0);
        argmax_ap_vld : OUT STD_LOGIC );
    end component;


    component inference_conv2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        x_0_ce0 : OUT STD_LOGIC;
        x_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        W_0_ce0 : OUT STD_LOGIC;
        W_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_feature_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        out_feature_ce0 : OUT STD_LOGIC;
        out_feature_we0 : OUT STD_LOGIC;
        out_feature_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_conv2d_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        W_ce0 : OUT STD_LOGIC;
        W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_feature_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        out_feature_ce0 : OUT STD_LOGIC;
        out_feature_we0 : OUT STD_LOGIC;
        out_feature_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_conv2d_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        W_ce0 : OUT STD_LOGIC;
        W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_feature_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_feature_0_0_ce0 : OUT STD_LOGIC;
        out_feature_0_0_we0 : OUT STD_LOGIC;
        out_feature_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_maxPoolNxN IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_feature_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        out_feature_ce0 : OUT STD_LOGIC;
        out_feature_we0 : OUT STD_LOGIC;
        out_feature_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_maxPoolNxN_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_feature_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_feature_ce0 : OUT STD_LOGIC;
        out_feature_we0 : OUT STD_LOGIC;
        out_feature_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_x_in_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_f1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_b1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_convOutput1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_poolOut1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_f2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_b2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_convOutput2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_poolOut2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_f3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_b3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_fc_T_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_W4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_W5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_sm_T_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    x_in_0_U : component inference_x_in_0
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_in_0_address0,
        ce0 => x_in_0_ce0,
        we0 => x_in_0_we0,
        d0 => x_in_0_d0,
        q0 => x_in_0_q0);

    f1_0_U : component inference_f1_0
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f1_0_address0,
        ce0 => f1_0_ce0,
        we0 => f1_0_we0,
        d0 => f1_0_d0,
        q0 => f1_0_q0);

    b1_U : component inference_b1
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b1_address0,
        ce0 => b1_ce0,
        we0 => b1_we0,
        d0 => b1_d0,
        q0 => b1_q0);

    convOutput1_U : component inference_convOutput1
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convOutput1_address0,
        ce0 => convOutput1_ce0,
        we0 => convOutput1_we0,
        d0 => convOutput1_d0,
        q0 => convOutput1_q0);

    poolOut1_U : component inference_poolOut1
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => poolOut1_address0,
        ce0 => poolOut1_ce0,
        we0 => poolOut1_we0,
        d0 => poolOut1_d0,
        q0 => poolOut1_q0);

    f2_U : component inference_f2
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f2_address0,
        ce0 => f2_ce0,
        we0 => f2_we0,
        d0 => f2_d0,
        q0 => f2_q0);

    b2_U : component inference_b2
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b2_address0,
        ce0 => b2_ce0,
        we0 => b2_we0,
        d0 => b2_d0,
        q0 => b2_q0);

    convOutput2_U : component inference_convOutput2
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convOutput2_address0,
        ce0 => convOutput2_ce0,
        we0 => convOutput2_we0,
        d0 => convOutput2_d0,
        q0 => convOutput2_q0);

    poolOut2_U : component inference_poolOut2
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => poolOut2_address0,
        ce0 => poolOut2_ce0,
        we0 => poolOut2_we0,
        d0 => poolOut2_d0,
        q0 => poolOut2_q0);

    f3_U : component inference_f3
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f3_address0,
        ce0 => f3_ce0,
        we0 => f3_we0,
        d0 => f3_d0,
        q0 => f3_q0);

    b3_U : component inference_b3
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b3_address0,
        ce0 => b3_ce0,
        we0 => b3_we0,
        d0 => b3_d0,
        q0 => b3_q0);

    convOutput3_0_0_U : component inference_b3
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convOutput3_0_0_address0,
        ce0 => convOutput3_0_0_ce0,
        we0 => convOutput3_0_0_we0,
        d0 => convOutput3_0_0_d0,
        q0 => convOutput3_0_0_q0);

    fcIn_0_U : component inference_b3
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fcIn_0_address0,
        ce0 => fcIn_0_ce0,
        we0 => fcIn_0_we0,
        d0 => fcIn_0_d0,
        q0 => fcIn_0_q0);

    fcOut4_0_U : component inference_fc_T_0
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fcOut4_0_address0,
        ce0 => fcOut4_0_ce0,
        we0 => fcOut4_0_we0,
        d0 => fcOut4_0_d0,
        q0 => fcOut4_0_q0);

    W4_U : component inference_W4
    generic map (
        DataWidth => 32,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W4_address0,
        ce0 => W4_ce0,
        we0 => W4_we0,
        d0 => W4_d0,
        q0 => W4_q0);

    B4_0_U : component inference_fc_T_0
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B4_0_address0,
        ce0 => B4_0_ce0,
        we0 => B4_0_we0,
        d0 => B4_0_d0,
        q0 => B4_0_q0);

    W5_U : component inference_W5
    generic map (
        DataWidth => 32,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W5_address0,
        ce0 => W5_ce0,
        we0 => W5_we0,
        d0 => W5_d0,
        q0 => W5_q0);

    B5_0_U : component inference_sm_T_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B5_0_address0,
        ce0 => B5_0_ce0,
        we0 => B5_0_we0,
        d0 => B5_0_d0,
        q0 => B5_0_q0);

    grp_inference_fc_fu_800 : component inference_fc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_fc_fu_800_ap_start,
        ap_done => grp_inference_fc_fu_800_ap_done,
        ap_idle => grp_inference_fc_fu_800_ap_idle,
        ap_ready => grp_inference_fc_fu_800_ap_ready,
        X_0_address0 => grp_inference_fc_fu_800_X_0_address0,
        X_0_ce0 => grp_inference_fc_fu_800_X_0_ce0,
        X_0_q0 => grp_inference_fc_fu_800_X_0_q0,
        W_address0 => grp_inference_fc_fu_800_W_address0,
        W_ce0 => grp_inference_fc_fu_800_W_ce0,
        W_q0 => grp_inference_fc_fu_800_W_q0,
        B_0_address0 => grp_inference_fc_fu_800_B_0_address0,
        B_0_ce0 => grp_inference_fc_fu_800_B_0_ce0,
        B_0_q0 => grp_inference_fc_fu_800_B_0_q0,
        Y_0_address0 => grp_inference_fc_fu_800_Y_0_address0,
        Y_0_ce0 => grp_inference_fc_fu_800_Y_0_ce0,
        Y_0_we0 => grp_inference_fc_fu_800_Y_0_we0,
        Y_0_d0 => grp_inference_fc_fu_800_Y_0_d0);

    grp_inference_sm_fu_808 : component inference_sm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_sm_fu_808_ap_start,
        ap_done => grp_inference_sm_fu_808_ap_done,
        ap_idle => grp_inference_sm_fu_808_ap_idle,
        ap_ready => grp_inference_sm_fu_808_ap_ready,
        X_0_address0 => grp_inference_sm_fu_808_X_0_address0,
        X_0_ce0 => grp_inference_sm_fu_808_X_0_ce0,
        X_0_q0 => grp_inference_sm_fu_808_X_0_q0,
        W_address0 => grp_inference_sm_fu_808_W_address0,
        W_ce0 => grp_inference_sm_fu_808_W_ce0,
        W_q0 => grp_inference_sm_fu_808_W_q0,
        B_0_address0 => grp_inference_sm_fu_808_B_0_address0,
        B_0_ce0 => grp_inference_sm_fu_808_B_0_ce0,
        B_0_q0 => grp_inference_sm_fu_808_B_0_q0,
        argmax => grp_inference_sm_fu_808_argmax,
        argmax_ap_vld => grp_inference_sm_fu_808_argmax_ap_vld);

    grp_inference_conv2d_fu_817 : component inference_conv2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_conv2d_fu_817_ap_start,
        ap_done => grp_inference_conv2d_fu_817_ap_done,
        ap_idle => grp_inference_conv2d_fu_817_ap_idle,
        ap_ready => grp_inference_conv2d_fu_817_ap_ready,
        x_0_address0 => grp_inference_conv2d_fu_817_x_0_address0,
        x_0_ce0 => grp_inference_conv2d_fu_817_x_0_ce0,
        x_0_q0 => grp_inference_conv2d_fu_817_x_0_q0,
        W_0_address0 => grp_inference_conv2d_fu_817_W_0_address0,
        W_0_ce0 => grp_inference_conv2d_fu_817_W_0_ce0,
        W_0_q0 => grp_inference_conv2d_fu_817_W_0_q0,
        b_address0 => grp_inference_conv2d_fu_817_b_address0,
        b_ce0 => grp_inference_conv2d_fu_817_b_ce0,
        b_q0 => grp_inference_conv2d_fu_817_b_q0,
        out_feature_address0 => grp_inference_conv2d_fu_817_out_feature_address0,
        out_feature_ce0 => grp_inference_conv2d_fu_817_out_feature_ce0,
        out_feature_we0 => grp_inference_conv2d_fu_817_out_feature_we0,
        out_feature_d0 => grp_inference_conv2d_fu_817_out_feature_d0);

    grp_inference_conv2d_1_fu_825 : component inference_conv2d_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_conv2d_1_fu_825_ap_start,
        ap_done => grp_inference_conv2d_1_fu_825_ap_done,
        ap_idle => grp_inference_conv2d_1_fu_825_ap_idle,
        ap_ready => grp_inference_conv2d_1_fu_825_ap_ready,
        x_address0 => grp_inference_conv2d_1_fu_825_x_address0,
        x_ce0 => grp_inference_conv2d_1_fu_825_x_ce0,
        x_q0 => grp_inference_conv2d_1_fu_825_x_q0,
        W_address0 => grp_inference_conv2d_1_fu_825_W_address0,
        W_ce0 => grp_inference_conv2d_1_fu_825_W_ce0,
        W_q0 => grp_inference_conv2d_1_fu_825_W_q0,
        b_address0 => grp_inference_conv2d_1_fu_825_b_address0,
        b_ce0 => grp_inference_conv2d_1_fu_825_b_ce0,
        b_q0 => grp_inference_conv2d_1_fu_825_b_q0,
        out_feature_address0 => grp_inference_conv2d_1_fu_825_out_feature_address0,
        out_feature_ce0 => grp_inference_conv2d_1_fu_825_out_feature_ce0,
        out_feature_we0 => grp_inference_conv2d_1_fu_825_out_feature_we0,
        out_feature_d0 => grp_inference_conv2d_1_fu_825_out_feature_d0);

    grp_inference_conv2d_2_fu_833 : component inference_conv2d_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_conv2d_2_fu_833_ap_start,
        ap_done => grp_inference_conv2d_2_fu_833_ap_done,
        ap_idle => grp_inference_conv2d_2_fu_833_ap_idle,
        ap_ready => grp_inference_conv2d_2_fu_833_ap_ready,
        x_address0 => grp_inference_conv2d_2_fu_833_x_address0,
        x_ce0 => grp_inference_conv2d_2_fu_833_x_ce0,
        x_q0 => grp_inference_conv2d_2_fu_833_x_q0,
        W_address0 => grp_inference_conv2d_2_fu_833_W_address0,
        W_ce0 => grp_inference_conv2d_2_fu_833_W_ce0,
        W_q0 => grp_inference_conv2d_2_fu_833_W_q0,
        b_address0 => grp_inference_conv2d_2_fu_833_b_address0,
        b_ce0 => grp_inference_conv2d_2_fu_833_b_ce0,
        b_q0 => grp_inference_conv2d_2_fu_833_b_q0,
        out_feature_0_0_address0 => grp_inference_conv2d_2_fu_833_out_feature_0_0_address0,
        out_feature_0_0_ce0 => grp_inference_conv2d_2_fu_833_out_feature_0_0_ce0,
        out_feature_0_0_we0 => grp_inference_conv2d_2_fu_833_out_feature_0_0_we0,
        out_feature_0_0_d0 => grp_inference_conv2d_2_fu_833_out_feature_0_0_d0);

    grp_inference_maxPoolNxN_fu_841 : component inference_maxPoolNxN
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_maxPoolNxN_fu_841_ap_start,
        ap_done => grp_inference_maxPoolNxN_fu_841_ap_done,
        ap_idle => grp_inference_maxPoolNxN_fu_841_ap_idle,
        ap_ready => grp_inference_maxPoolNxN_fu_841_ap_ready,
        x_address0 => grp_inference_maxPoolNxN_fu_841_x_address0,
        x_ce0 => grp_inference_maxPoolNxN_fu_841_x_ce0,
        x_q0 => grp_inference_maxPoolNxN_fu_841_x_q0,
        out_feature_address0 => grp_inference_maxPoolNxN_fu_841_out_feature_address0,
        out_feature_ce0 => grp_inference_maxPoolNxN_fu_841_out_feature_ce0,
        out_feature_we0 => grp_inference_maxPoolNxN_fu_841_out_feature_we0,
        out_feature_d0 => grp_inference_maxPoolNxN_fu_841_out_feature_d0);

    grp_inference_maxPoolNxN_1_fu_847 : component inference_maxPoolNxN_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_maxPoolNxN_1_fu_847_ap_start,
        ap_done => grp_inference_maxPoolNxN_1_fu_847_ap_done,
        ap_idle => grp_inference_maxPoolNxN_1_fu_847_ap_idle,
        ap_ready => grp_inference_maxPoolNxN_1_fu_847_ap_ready,
        x_address0 => grp_inference_maxPoolNxN_1_fu_847_x_address0,
        x_ce0 => grp_inference_maxPoolNxN_1_fu_847_x_ce0,
        x_q0 => grp_inference_maxPoolNxN_1_fu_847_x_q0,
        out_feature_address0 => grp_inference_maxPoolNxN_1_fu_847_out_feature_address0,
        out_feature_ce0 => grp_inference_maxPoolNxN_1_fu_847_out_feature_ce0,
        out_feature_we0 => grp_inference_maxPoolNxN_1_fu_847_out_feature_we0,
        out_feature_d0 => grp_inference_maxPoolNxN_1_fu_847_out_feature_d0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_inference_conv2d_1_fu_825_ap_start_ap_start_reg assign process. --
    grp_inference_conv2d_1_fu_825_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_conv2d_1_fu_825_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
                    grp_inference_conv2d_1_fu_825_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_conv2d_1_fu_825_ap_ready)) then 
                    grp_inference_conv2d_1_fu_825_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_conv2d_2_fu_833_ap_start_ap_start_reg assign process. --
    grp_inference_conv2d_2_fu_833_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_conv2d_2_fu_833_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                    grp_inference_conv2d_2_fu_833_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_conv2d_2_fu_833_ap_ready)) then 
                    grp_inference_conv2d_2_fu_833_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_conv2d_fu_817_ap_start_ap_start_reg assign process. --
    grp_inference_conv2d_fu_817_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_conv2d_fu_817_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_lv1_0 = exitcond3_fu_1489_p2)))) then 
                    grp_inference_conv2d_fu_817_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_conv2d_fu_817_ap_ready)) then 
                    grp_inference_conv2d_fu_817_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_fc_fu_800_ap_start_ap_start_reg assign process. --
    grp_inference_fc_fu_800_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_fc_fu_800_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and not((ap_const_lv1_0 = i7_phi_fu_768_p4)))) then 
                    grp_inference_fc_fu_800_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_fc_fu_800_ap_ready)) then 
                    grp_inference_fc_fu_800_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_maxPoolNxN_1_fu_847_ap_start_ap_start_reg assign process. --
    grp_inference_maxPoolNxN_1_fu_847_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_maxPoolNxN_1_fu_847_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                    grp_inference_maxPoolNxN_1_fu_847_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_maxPoolNxN_1_fu_847_ap_ready)) then 
                    grp_inference_maxPoolNxN_1_fu_847_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_maxPoolNxN_fu_841_ap_start_ap_start_reg assign process. --
    grp_inference_maxPoolNxN_fu_841_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_maxPoolNxN_fu_841_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                    grp_inference_maxPoolNxN_fu_841_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_maxPoolNxN_fu_841_ap_ready)) then 
                    grp_inference_maxPoolNxN_fu_841_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_sm_fu_808_ap_start_ap_start_reg assign process. --
    grp_inference_sm_fu_808_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_sm_fu_808_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
                    grp_inference_sm_fu_808_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_sm_fu_808_ap_ready)) then 
                    grp_inference_sm_fu_808_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i1_reg_531 assign process. --
    i1_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond21_fu_955_p2)))) then 
                i1_reg_531 <= i_2_reg_1579;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_853_p2 = ap_const_lv1_0)))) then 
                i1_reg_531 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i5_reg_575 assign process. --
    i5_reg_575_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = exitcond19_fu_1079_p2)))) then 
                i5_reg_575 <= i_3_reg_1641;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond4_fu_1028_p2)))) then 
                i5_reg_575 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i6_reg_730 assign process. --
    i6_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((ap_const_lv1_0 = exitcond5_fu_1463_p2)))) then 
                i6_reg_730 <= i_6_reg_1840;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and not((ap_const_lv1_0 = exitcond7_fu_1404_p2)))) then 
                i6_reg_730 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- i7_reg_763 assign process. --
    i7_reg_763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) and not((ap_const_lv1_0 = j13_phi_fu_781_p4)))) then 
                i7_reg_763 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and not((ap_const_logic_0 = grp_inference_conv2d_2_fu_833_ap_done)))) then 
                i7_reg_763 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- i8_reg_630 assign process. --
    i8_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond14_fu_1232_p2)))) then 
                i8_reg_630 <= i_4_reg_1716;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_lv1_0 = exitcond16_fu_1181_p2)))) then 
                i8_reg_630 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- i9_reg_685 assign process. --
    i9_reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond9_fu_1377_p2)))) then 
                i9_reg_685 <= i_5_reg_1796;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond11_fu_1342_p2)))) then 
                i9_reg_685 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- i_reg_509 assign process. --
    i_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond8_fu_895_p2)))) then 
                i_reg_509 <= i_1_reg_1548;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_509 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j10_reg_741 assign process. --
    j10_reg_741_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond6_fu_1421_p2))) then 
                j10_reg_741 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
                j10_reg_741 <= j_1_reg_1853;
            end if; 
        end if;
    end process;

    -- j11_reg_752 assign process. --
    j11_reg_752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond6_fu_1421_p2)))) then 
                j11_reg_752 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                j11_reg_752 <= j_12_reg_1871;
            end if; 
        end if;
    end process;

    -- j13_reg_776 assign process. --
    j13_reg_776_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45) and not((ap_const_lv1_0 = exitcond_fu_1514_p2)))) then 
                j13_reg_776 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43) and (ap_const_lv1_0 = i7_phi_fu_768_p4))) then 
                j13_reg_776 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- j2_reg_542 assign process. --
    j2_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond22_fu_1002_p2)))) then 
                j2_reg_542 <= j_5_reg_1592;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_921_p2))) then 
                j2_reg_542 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- j6_reg_586 assign process. --
    j6_reg_586_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond18_fu_1126_p2)))) then 
                j6_reg_586 <= j_6_reg_1654;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond20_fu_1045_p2))) then 
                j6_reg_586 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- j7_reg_719 assign process. --
    j7_reg_719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond10_fu_1365_p2)))) then 
                j7_reg_719 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
                j7_reg_719 <= j_9_reg_1822;
            end if; 
        end if;
    end process;

    -- j8_reg_641 assign process. --
    j8_reg_641_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not((ap_const_lv1_0 = exitcond13_fu_1265_p2)))) then 
                j8_reg_641 <= j_7_reg_1729;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and (ap_const_lv1_0 = exitcond15_fu_1198_p2))) then 
                j8_reg_641 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- j9_reg_708 assign process. --
    j9_reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond10_fu_1365_p2))) then 
                j9_reg_708 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                j9_reg_708 <= j_8_reg_1804;
            end if; 
        end if;
    end process;

    -- j_reg_520 assign process. --
    j_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_853_p2 = ap_const_lv1_0))) then 
                j_reg_520 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                j_reg_520 <= j_4_reg_1561;
            end if; 
        end if;
    end process;

    -- k10_reg_789 assign process. --
    k10_reg_789_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) and (ap_const_lv1_0 = j13_phi_fu_781_p4))) then 
                k10_reg_789 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
                k10_reg_789 <= k_11_reg_1899;
            end if; 
        end if;
    end process;

    -- k4_reg_564 assign process. --
    k4_reg_564_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_921_p2)))) then 
                k4_reg_564 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                k4_reg_564 <= k_reg_1623;
            end if; 
        end if;
    end process;

    -- k6_reg_652 assign process. --
    k6_reg_652_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond12_fu_1316_p2)))) then 
                k6_reg_652 <= k_6_reg_1742;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond14_fu_1232_p2))) then 
                k6_reg_652 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- k7_reg_597 assign process. --
    k7_reg_597_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = exitcond17_fu_1155_p2)))) then 
                k7_reg_597 <= k_5_reg_1667;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = exitcond19_fu_1079_p2))) then 
                k7_reg_597 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- k8_reg_674 assign process. --
    k8_reg_674_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and not((ap_const_lv1_0 = exitcond15_fu_1198_p2)))) then 
                k8_reg_674 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                k8_reg_674 <= k_4_reg_1773;
            end if; 
        end if;
    end process;

    -- k9_reg_619 assign process. --
    k9_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond20_fu_1045_p2)))) then 
                k9_reg_619 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                k9_reg_619 <= k_3_reg_1698;
            end if; 
        end if;
    end process;

    -- l3_reg_663 assign process. --
    l3_reg_663_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond13_fu_1265_p2))) then 
                l3_reg_663 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                l3_reg_663 <= l_3_reg_1755;
            end if; 
        end if;
    end process;

    -- l8_reg_608 assign process. --
    l8_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond18_fu_1126_p2))) then 
                l8_reg_608 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                l8_reg_608 <= l_2_reg_1680;
            end if; 
        end if;
    end process;

    -- l_reg_553 assign process. --
    l_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond21_fu_955_p2))) then 
                l_reg_553 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                l_reg_553 <= l_1_reg_1605;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_696 assign process. --
    phi_mul_reg_696_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond9_fu_1377_p2)))) then 
                phi_mul_reg_696 <= next_mul_reg_1788;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond11_fu_1342_p2)))) then 
                phi_mul_reg_696 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then
                    i14_cast4_reg_1886(0) <= i14_cast4_fu_1506_p1(0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_1548 <= i_1_fu_859_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_2_reg_1579 <= i_2_fu_927_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                i_3_reg_1641 <= i_3_fu_1051_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                i_4_reg_1716 <= i_4_fu_1204_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                i_5_reg_1796 <= i_5_fu_1371_p2;
                next_mul_reg_1788 <= next_mul_fu_1359_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                i_6_reg_1840 <= i_6_fu_1427_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then
                    j15_cast3_reg_1891(0) <= j15_cast3_fu_1510_p1(0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then
                j_12_reg_1871 <= j_12_fu_1495_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                j_1_reg_1853 <= j_1_fu_1469_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_4_reg_1561 <= j_4_fu_901_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                j_5_reg_1592 <= j_5_fu_961_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                j_6_reg_1654 <= j_6_fu_1085_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                j_7_reg_1729 <= j_7_fu_1238_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                j_8_reg_1804 <= j_8_fu_1383_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                j_9_reg_1822 <= j_9_fu_1410_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then
                k_11_reg_1899 <= k_11_fu_1520_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                k_3_reg_1698 <= k_3_fu_1187_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                k_4_reg_1773 <= k_4_fu_1348_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                k_5_reg_1667 <= k_5_fu_1132_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                k_6_reg_1742 <= k_6_fu_1271_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                k_reg_1623 <= k_fu_1034_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                l_1_reg_1605 <= l_1_fu_1008_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                l_2_reg_1680 <= l_2_fu_1161_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                l_3_reg_1755 <= l_3_fu_1322_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond4_fu_1028_p2))) then
                    tmp_10_reg_1628(2 downto 0) <= tmp_10_fu_1040_p1(2 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and (ap_const_lv1_0 = exitcond16_fu_1181_p2))) then
                    tmp_14_reg_1703(4 downto 0) <= tmp_14_fu_1193_p1(4 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond11_fu_1342_p2))) then
                    tmp_18_reg_1778(6 downto 0) <= tmp_18_fu_1354_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) and (ap_const_lv1_0 = exitcond7_fu_1404_p2))) then
                    tmp_28_reg_1827(6 downto 0) <= tmp_28_fu_1416_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and (ap_const_lv1_0 = exitcond3_fu_1489_p2))) then
                    tmp_31_reg_1876(3 downto 0) <= tmp_31_fu_1501_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45) and (ap_const_lv1_0 = exitcond_fu_1514_p2))) then
                tmp_33_reg_1909 <= tmp_33_fu_1536_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_853_p2 = ap_const_lv1_0))) then
                    tmp_36_reg_1553(10 downto 2) <= tmp_36_fu_889_p2(10 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_921_p2))) then
                tmp_38_reg_1584 <= tmp_38_fu_949_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond20_fu_1045_p2))) then
                tmp_41_reg_1646 <= tmp_41_fu_1073_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond21_fu_955_p2))) then
                    tmp_44_reg_1597(8 downto 1) <= tmp_44_fu_996_p2(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and (ap_const_lv1_0 = exitcond15_fu_1198_p2))) then
                tmp_46_reg_1721 <= tmp_46_fu_1226_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = exitcond19_fu_1079_p2))) then
                    tmp_50_reg_1659(8 downto 1) <= tmp_50_fu_1120_p2(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond14_fu_1232_p2))) then
                    tmp_54_reg_1734(9 downto 4) <= tmp_54_fu_1261_p1(9 downto 4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond8_fu_895_p2))) then
                tmp_55_cast_reg_1566 <= tmp_55_cast_fu_916_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond13_fu_1265_p2))) then
                    tmp_60_reg_1747(16 downto 3) <= tmp_60_fu_1310_p2(16 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond22_fu_1002_p2))) then
                    tmp_62_cast_reg_1610(8 downto 0) <= tmp_62_cast_fu_1023_p1(8 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond6_fu_1421_p2))) then
                    tmp_64_reg_1845(10 downto 1) <= tmp_64_fu_1457_p2(10 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond18_fu_1126_p2))) then
                    tmp_71_cast_reg_1672(12 downto 4) <= tmp_71_cast_fu_1147_p3(12 downto 4);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond17_fu_1155_p2))) then
                    tmp_75_cast_reg_1685(12 downto 0) <= tmp_75_cast_fu_1176_p1(12 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond9_fu_1377_p2))) then
                    tmp_81_cast_reg_1809(13 downto 0) <= tmp_81_cast_fu_1399_p1(13 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = exitcond12_fu_1316_p2))) then
                    tmp_82_cast_reg_1760(16 downto 0) <= tmp_82_cast_fu_1337_p1(16 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and (ap_const_lv1_0 = exitcond5_fu_1463_p2))) then
                    tmp_86_cast_reg_1858(10 downto 0) <= tmp_86_cast_fu_1484_p1(10 downto 0);
            end if;
        end if;
    end process;
    tmp_36_reg_1553(1 downto 0) <= "00";
    tmp_44_reg_1597(0) <= '0';
    tmp_62_cast_reg_1610(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_10_reg_1628(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_50_reg_1659(0) <= '0';
    tmp_71_cast_reg_1672(3 downto 0) <= "0000";
    tmp_75_cast_reg_1685(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    tmp_14_reg_1703(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_54_reg_1734(3 downto 0) <= "0000";
    tmp_54_reg_1734(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_60_reg_1747(2 downto 0) <= "000";
    tmp_82_cast_reg_1760(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    tmp_18_reg_1778(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_81_cast_reg_1809(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    tmp_28_reg_1827(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_64_reg_1845(0) <= '0';
    tmp_86_cast_reg_1858(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    tmp_31_reg_1876(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i14_cast4_reg_1886(6 downto 1) <= "000000";
    j15_cast3_reg_1891(6 downto 1) <= "000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_853_p2, exitcond8_fu_895_p2, exitcond2_fu_921_p2, exitcond21_fu_955_p2, exitcond22_fu_1002_p2, exitcond4_fu_1028_p2, exitcond20_fu_1045_p2, exitcond19_fu_1079_p2, exitcond18_fu_1126_p2, exitcond17_fu_1155_p2, exitcond16_fu_1181_p2, exitcond15_fu_1198_p2, exitcond14_fu_1232_p2, exitcond13_fu_1265_p2, exitcond12_fu_1316_p2, exitcond11_fu_1342_p2, exitcond9_fu_1377_p2, exitcond7_fu_1404_p2, exitcond6_fu_1421_p2, exitcond5_fu_1463_p2, exitcond3_fu_1489_p2, exitcond_fu_1514_p2, grp_inference_fc_fu_800_ap_done, grp_inference_sm_fu_808_ap_done, grp_inference_conv2d_fu_817_ap_done, grp_inference_conv2d_1_fu_825_ap_done, grp_inference_conv2d_2_fu_833_ap_done, grp_inference_maxPoolNxN_fu_841_ap_done, grp_inference_maxPoolNxN_1_fu_847_ap_done, exitcond10_fu_1365_p2, i7_phi_fu_768_p4, j13_phi_fu_781_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond1_fu_853_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond8_fu_895_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond2_fu_921_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond21_fu_955_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond22_fu_1002_p2)) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_1028_p2))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st11_fsm_10 => 
                if ((ap_const_lv1_0 = exitcond20_fu_1045_p2)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st12_fsm_11 => 
                if ((ap_const_lv1_0 = exitcond19_fu_1079_p2)) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st13_fsm_12 => 
                if ((ap_const_lv1_0 = exitcond18_fu_1126_p2)) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st14_fsm_13 => 
                if ((ap_const_lv1_0 = exitcond17_fu_1155_p2)) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_lv1_0 = exitcond16_fu_1181_p2))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st18_fsm_17 => 
                if ((ap_const_lv1_0 = exitcond15_fu_1198_p2)) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st19_fsm_18 => 
                if ((ap_const_lv1_0 = exitcond14_fu_1232_p2)) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st20_fsm_19 => 
                if ((ap_const_lv1_0 = exitcond13_fu_1265_p2)) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st21_fsm_20 => 
                if ((ap_const_lv1_0 = exitcond12_fu_1316_p2)) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st23_fsm_22 => 
                if (not((ap_const_lv1_0 = exitcond11_fu_1342_p2))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st25_fsm_24 => 
                if (not((ap_const_lv1_0 = exitcond10_fu_1365_p2))) then
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                if ((ap_const_lv1_0 = exitcond9_fu_1377_p2)) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st28_fsm_27 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_1404_p2))) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                end if;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st30_fsm_29 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_1421_p2))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                end if;
            when ap_ST_st31_fsm_30 => 
                if ((ap_const_lv1_0 = exitcond5_fu_1463_p2)) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                end if;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st33_fsm_32 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_1489_p2))) then
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                end if;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st35_fsm_34 => 
                if (not((ap_const_logic_0 = grp_inference_conv2d_fu_817_ap_done))) then
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                end if;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                if (not((ap_const_logic_0 = grp_inference_maxPoolNxN_fu_841_ap_done))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                end if;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                if (not((ap_const_logic_0 = grp_inference_conv2d_1_fu_825_ap_done))) then
                    ap_NS_fsm <= ap_ST_st40_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                if (not((ap_const_logic_0 = grp_inference_maxPoolNxN_1_fu_847_ap_done))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                end if;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                if (not((ap_const_logic_0 = grp_inference_conv2d_2_fu_833_ap_done))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                end if;
            when ap_ST_st44_fsm_43 => 
                if (not((ap_const_lv1_0 = i7_phi_fu_768_p4))) then
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                end if;
            when ap_ST_st45_fsm_44 => 
                if ((ap_const_lv1_0 = j13_phi_fu_781_p4)) then
                    ap_NS_fsm <= ap_ST_st46_fsm_45;
                else
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                end if;
            when ap_ST_st46_fsm_45 => 
                if ((ap_const_lv1_0 = exitcond_fu_1514_p2)) then
                    ap_NS_fsm <= ap_ST_st47_fsm_46;
                else
                    ap_NS_fsm <= ap_ST_st45_fsm_44;
                end if;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st48_fsm_47 => 
                if (not((ap_const_logic_0 = grp_inference_fc_fu_800_ap_done))) then
                    ap_NS_fsm <= ap_ST_st49_fsm_48;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                end if;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                if (not((ap_const_logic_0 = grp_inference_sm_fu_808_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st50_fsm_49;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- B4_0_address0 assign process. --
    B4_0_address0_assign_proc : process(tmp_28_reg_1827, grp_inference_fc_fu_800_B_0_address0, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            B4_0_address0 <= tmp_28_reg_1827(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            B4_0_address0 <= grp_inference_fc_fu_800_B_0_address0;
        else 
            B4_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- B4_0_ce0 assign process. --
    B4_0_ce0_assign_proc : process(grp_inference_fc_fu_800_B_0_ce0, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            B4_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            B4_0_ce0 <= grp_inference_fc_fu_800_B_0_ce0;
        else 
            B4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B4_0_d0 <= fcBias_q0;

    -- B4_0_we0 assign process. --
    B4_0_we0_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28))) then 
            B4_0_we0 <= ap_const_logic_1;
        else 
            B4_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- B5_0_address0 assign process. --
    B5_0_address0_assign_proc : process(tmp_31_reg_1876, grp_inference_sm_fu_808_B_0_address0, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            B5_0_address0 <= tmp_31_reg_1876(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            B5_0_address0 <= grp_inference_sm_fu_808_B_0_address0;
        else 
            B5_0_address0 <= "XXXX";
        end if; 
    end process;


    -- B5_0_ce0 assign process. --
    B5_0_ce0_assign_proc : process(grp_inference_sm_fu_808_B_0_ce0, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            B5_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            B5_0_ce0 <= grp_inference_sm_fu_808_B_0_ce0;
        else 
            B5_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B5_0_d0 <= smBias_q0;

    -- B5_0_we0 assign process. --
    B5_0_we0_assign_proc : process(ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            B5_0_we0 <= ap_const_logic_1;
        else 
            B5_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Filter1_address0 <= tmp_62_cast_fu_1023_p1(8 - 1 downto 0);

    -- Filter1_ce0 assign process. --
    Filter1_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            Filter1_ce0 <= ap_const_logic_1;
        else 
            Filter1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Filter2_address0 <= tmp_75_cast_fu_1176_p1(12 - 1 downto 0);

    -- Filter2_ce0 assign process. --
    Filter2_ce0_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            Filter2_ce0 <= ap_const_logic_1;
        else 
            Filter2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Filter3_address0 <= tmp_82_cast_fu_1337_p1(16 - 1 downto 0);

    -- Filter3_ce0 assign process. --
    Filter3_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            Filter3_ce0 <= ap_const_logic_1;
        else 
            Filter3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- W4_address0 assign process. --
    W4_address0_assign_proc : process(tmp_81_cast_reg_1809, grp_inference_fc_fu_800_W_address0, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            W4_address0 <= tmp_81_cast_reg_1809(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            W4_address0 <= grp_inference_fc_fu_800_W_address0;
        else 
            W4_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- W4_ce0 assign process. --
    W4_ce0_assign_proc : process(grp_inference_fc_fu_800_W_ce0, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            W4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            W4_ce0 <= grp_inference_fc_fu_800_W_ce0;
        else 
            W4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W4_d0 <= fcWeight_q0;

    -- W4_we0 assign process. --
    W4_we0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26))) then 
            W4_we0 <= ap_const_logic_1;
        else 
            W4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- W5_address0 assign process. --
    W5_address0_assign_proc : process(tmp_86_cast_reg_1858, grp_inference_sm_fu_808_W_address0, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            W5_address0 <= tmp_86_cast_reg_1858(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            W5_address0 <= grp_inference_sm_fu_808_W_address0;
        else 
            W5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- W5_ce0 assign process. --
    W5_ce0_assign_proc : process(grp_inference_sm_fu_808_W_ce0, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            W5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            W5_ce0 <= grp_inference_sm_fu_808_W_ce0;
        else 
            W5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W5_d0 <= smWeight_q0;

    -- W5_we0 assign process. --
    W5_we0_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then 
            W5_we0 <= ap_const_logic_1;
        else 
            W5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_inference_sm_fu_808_ap_done, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and not((ap_const_logic_0 = grp_inference_sm_fu_808_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_inference_sm_fu_808_ap_done, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and not((ap_const_logic_0 = grp_inference_sm_fu_808_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1003 assign process. --
    ap_sig_bdd_1003_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1003 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_1015 assign process. --
    ap_sig_bdd_1015_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1015 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_1024 assign process. --
    ap_sig_bdd_1024_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1024 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_1031 assign process. --
    ap_sig_bdd_1031_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1031 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_1047 assign process. --
    ap_sig_bdd_1047_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1047 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_1056 assign process. --
    ap_sig_bdd_1056_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1056 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_1063 assign process. --
    ap_sig_bdd_1063_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1063 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_1072 assign process. --
    ap_sig_bdd_1072_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1072 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_1081 assign process. --
    ap_sig_bdd_1081_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1081 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_1088 assign process. --
    ap_sig_bdd_1088_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1088 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_1097 assign process. --
    ap_sig_bdd_1097_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1097 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_1104 assign process. --
    ap_sig_bdd_1104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1104 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_163 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_179 assign process. --
    ap_sig_bdd_179_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_179 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_193 assign process. --
    ap_sig_bdd_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_193 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_207 assign process. --
    ap_sig_bdd_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_207 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_223 assign process. --
    ap_sig_bdd_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_223 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_239 assign process. --
    ap_sig_bdd_239_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_239 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_253 assign process. --
    ap_sig_bdd_253_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_253 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_267 assign process. --
    ap_sig_bdd_267_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_267 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_281 assign process. --
    ap_sig_bdd_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_281 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_297 assign process. --
    ap_sig_bdd_297_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_297 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_313 assign process. --
    ap_sig_bdd_313_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_313 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_327 assign process. --
    ap_sig_bdd_327_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_327 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_341 assign process. --
    ap_sig_bdd_341_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_341 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_355 assign process. --
    ap_sig_bdd_355_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_355 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_371 assign process. --
    ap_sig_bdd_371_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_371 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_387 assign process. --
    ap_sig_bdd_387_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_387 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_398 assign process. --
    ap_sig_bdd_398_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_398 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_414 assign process. --
    ap_sig_bdd_414_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_414 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_430 assign process. --
    ap_sig_bdd_430_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_430 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_444 assign process. --
    ap_sig_bdd_444_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_444 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_460 assign process. --
    ap_sig_bdd_460_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_460 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_476 assign process. --
    ap_sig_bdd_476_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_476 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_485 assign process. --
    ap_sig_bdd_485_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_485 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_494 assign process. --
    ap_sig_bdd_494_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_494 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_66 assign process. --
    ap_sig_bdd_66_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_66 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_814 assign process. --
    ap_sig_bdd_814_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_814 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_834 assign process. --
    ap_sig_bdd_834_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_834 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_843 assign process. --
    ap_sig_bdd_843_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_843 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_868 assign process. --
    ap_sig_bdd_868_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_868 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_877 assign process. --
    ap_sig_bdd_877_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_877 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_902 assign process. --
    ap_sig_bdd_902_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_902 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_912 assign process. --
    ap_sig_bdd_912_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_912 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_932 assign process. --
    ap_sig_bdd_932_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_932 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_944 assign process. --
    ap_sig_bdd_944_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_944 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_961 assign process. --
    ap_sig_bdd_961_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_961 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_971 assign process. --
    ap_sig_bdd_971_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_971 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_982 assign process. --
    ap_sig_bdd_982_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_982 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_843)
    begin
        if (ap_sig_bdd_843) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_239)
    begin
        if (ap_sig_bdd_239) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_253)
    begin
        if (ap_sig_bdd_253) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_267)
    begin
        if (ap_sig_bdd_267) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_281)
    begin
        if (ap_sig_bdd_281) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_868)
    begin
        if (ap_sig_bdd_868) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_297)
    begin
        if (ap_sig_bdd_297) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_877)
    begin
        if (ap_sig_bdd_877) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_313)
    begin
        if (ap_sig_bdd_313) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_327)
    begin
        if (ap_sig_bdd_327) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_66)
    begin
        if (ap_sig_bdd_66) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_341)
    begin
        if (ap_sig_bdd_341) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_355)
    begin
        if (ap_sig_bdd_355) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_902)
    begin
        if (ap_sig_bdd_902) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_371)
    begin
        if (ap_sig_bdd_371) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_912)
    begin
        if (ap_sig_bdd_912) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_387)
    begin
        if (ap_sig_bdd_387) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_398)
    begin
        if (ap_sig_bdd_398) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_932)
    begin
        if (ap_sig_bdd_932) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_414)
    begin
        if (ap_sig_bdd_414) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_944)
    begin
        if (ap_sig_bdd_944) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_430)
    begin
        if (ap_sig_bdd_430) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_444)
    begin
        if (ap_sig_bdd_444) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_961)
    begin
        if (ap_sig_bdd_961) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_460)
    begin
        if (ap_sig_bdd_460) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_971)
    begin
        if (ap_sig_bdd_971) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_1047)
    begin
        if (ap_sig_bdd_1047) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_1081)
    begin
        if (ap_sig_bdd_1081) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_1088)
    begin
        if (ap_sig_bdd_1088) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_1056)
    begin
        if (ap_sig_bdd_1056) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_1063)
    begin
        if (ap_sig_bdd_1063) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_163)
    begin
        if (ap_sig_bdd_163) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_1097)
    begin
        if (ap_sig_bdd_1097) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_1104)
    begin
        if (ap_sig_bdd_1104) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_1072)
    begin
        if (ap_sig_bdd_1072) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_42 assign process. --
    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_bdd_982)
    begin
        if (ap_sig_bdd_982) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_476)
    begin
        if (ap_sig_bdd_476) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_485)
    begin
        if (ap_sig_bdd_485) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_45 assign process. --
    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_bdd_494)
    begin
        if (ap_sig_bdd_494) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_46 assign process. --
    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_bdd_1003)
    begin
        if (ap_sig_bdd_1003) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_47 assign process. --
    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_bdd_1015)
    begin
        if (ap_sig_bdd_1015) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_1024)
    begin
        if (ap_sig_bdd_1024) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_814)
    begin
        if (ap_sig_bdd_814) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_1031)
    begin
        if (ap_sig_bdd_1031) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_179)
    begin
        if (ap_sig_bdd_179) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_193)
    begin
        if (ap_sig_bdd_193) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_207)
    begin
        if (ap_sig_bdd_207) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_834)
    begin
        if (ap_sig_bdd_834) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_223)
    begin
        if (ap_sig_bdd_223) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- b1_address0 assign process. --
    b1_address0_assign_proc : process(tmp_10_reg_1628, grp_inference_conv2d_fu_817_b_address0, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            b1_address0 <= tmp_10_reg_1628(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            b1_address0 <= grp_inference_conv2d_fu_817_b_address0;
        else 
            b1_address0 <= "XXX";
        end if; 
    end process;


    -- b1_ce0 assign process. --
    b1_ce0_assign_proc : process(grp_inference_conv2d_fu_817_b_ce0, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            b1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            b1_ce0 <= grp_inference_conv2d_fu_817_b_ce0;
        else 
            b1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b1_d0 <= bias1_q0;

    -- b1_we0 assign process. --
    b1_we0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            b1_we0 <= ap_const_logic_1;
        else 
            b1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b2_address0 assign process. --
    b2_address0_assign_proc : process(tmp_14_reg_1703, grp_inference_conv2d_1_fu_825_b_address0, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            b2_address0 <= tmp_14_reg_1703(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            b2_address0 <= grp_inference_conv2d_1_fu_825_b_address0;
        else 
            b2_address0 <= "XXXX";
        end if; 
    end process;


    -- b2_ce0 assign process. --
    b2_ce0_assign_proc : process(grp_inference_conv2d_1_fu_825_b_ce0, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            b2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            b2_ce0 <= grp_inference_conv2d_1_fu_825_b_ce0;
        else 
            b2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b2_d0 <= bias2_q0;

    -- b2_we0 assign process. --
    b2_we0_assign_proc : process(ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            b2_we0 <= ap_const_logic_1;
        else 
            b2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b3_address0 assign process. --
    b3_address0_assign_proc : process(tmp_18_reg_1778, grp_inference_conv2d_2_fu_833_b_address0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            b3_address0 <= tmp_18_reg_1778(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            b3_address0 <= grp_inference_conv2d_2_fu_833_b_address0;
        else 
            b3_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- b3_ce0 assign process. --
    b3_ce0_assign_proc : process(grp_inference_conv2d_2_fu_833_b_ce0, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            b3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            b3_ce0 <= grp_inference_conv2d_2_fu_833_b_ce0;
        else 
            b3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b3_d0 <= bias3_q0;

    -- b3_we0 assign process. --
    b3_we0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            b3_we0 <= ap_const_logic_1;
        else 
            b3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bias1_address0 <= tmp_10_fu_1040_p1(3 - 1 downto 0);

    -- bias1_ce0 assign process. --
    bias1_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            bias1_ce0 <= ap_const_logic_1;
        else 
            bias1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias2_address0 <= tmp_14_fu_1193_p1(4 - 1 downto 0);

    -- bias2_ce0 assign process. --
    bias2_ce0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            bias2_ce0 <= ap_const_logic_1;
        else 
            bias2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias3_address0 <= tmp_18_fu_1354_p1(7 - 1 downto 0);

    -- bias3_ce0 assign process. --
    bias3_ce0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            bias3_ce0 <= ap_const_logic_1;
        else 
            bias3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- convOutput1_address0 assign process. --
    convOutput1_address0_assign_proc : process(grp_inference_conv2d_fu_817_out_feature_address0, grp_inference_maxPoolNxN_fu_841_x_address0, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            convOutput1_address0 <= grp_inference_maxPoolNxN_fu_841_x_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            convOutput1_address0 <= grp_inference_conv2d_fu_817_out_feature_address0;
        else 
            convOutput1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- convOutput1_ce0 assign process. --
    convOutput1_ce0_assign_proc : process(grp_inference_conv2d_fu_817_out_feature_ce0, grp_inference_maxPoolNxN_fu_841_x_ce0, ap_sig_cseq_ST_st35_fsm_34, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            convOutput1_ce0 <= grp_inference_maxPoolNxN_fu_841_x_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            convOutput1_ce0 <= grp_inference_conv2d_fu_817_out_feature_ce0;
        else 
            convOutput1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convOutput1_d0 <= grp_inference_conv2d_fu_817_out_feature_d0;

    -- convOutput1_we0 assign process. --
    convOutput1_we0_assign_proc : process(grp_inference_conv2d_fu_817_out_feature_we0, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            convOutput1_we0 <= grp_inference_conv2d_fu_817_out_feature_we0;
        else 
            convOutput1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- convOutput2_address0 assign process. --
    convOutput2_address0_assign_proc : process(grp_inference_conv2d_1_fu_825_out_feature_address0, grp_inference_maxPoolNxN_1_fu_847_x_address0, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st41_fsm_40)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            convOutput2_address0 <= grp_inference_maxPoolNxN_1_fu_847_x_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            convOutput2_address0 <= grp_inference_conv2d_1_fu_825_out_feature_address0;
        else 
            convOutput2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- convOutput2_ce0 assign process. --
    convOutput2_ce0_assign_proc : process(grp_inference_conv2d_1_fu_825_out_feature_ce0, grp_inference_maxPoolNxN_1_fu_847_x_ce0, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st41_fsm_40)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            convOutput2_ce0 <= grp_inference_maxPoolNxN_1_fu_847_x_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            convOutput2_ce0 <= grp_inference_conv2d_1_fu_825_out_feature_ce0;
        else 
            convOutput2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convOutput2_d0 <= grp_inference_conv2d_1_fu_825_out_feature_d0;

    -- convOutput2_we0 assign process. --
    convOutput2_we0_assign_proc : process(grp_inference_conv2d_1_fu_825_out_feature_we0, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            convOutput2_we0 <= grp_inference_conv2d_1_fu_825_out_feature_we0;
        else 
            convOutput2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- convOutput3_0_0_address0 assign process. --
    convOutput3_0_0_address0_assign_proc : process(ap_sig_cseq_ST_st46_fsm_45, grp_inference_conv2d_2_fu_833_out_feature_0_0_address0, ap_sig_cseq_ST_st43_fsm_42, tmp_32_fu_1526_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            convOutput3_0_0_address0 <= tmp_32_fu_1526_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            convOutput3_0_0_address0 <= grp_inference_conv2d_2_fu_833_out_feature_0_0_address0;
        else 
            convOutput3_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- convOutput3_0_0_ce0 assign process. --
    convOutput3_0_0_ce0_assign_proc : process(ap_sig_cseq_ST_st46_fsm_45, grp_inference_conv2d_2_fu_833_out_feature_0_0_ce0, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then 
            convOutput3_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            convOutput3_0_0_ce0 <= grp_inference_conv2d_2_fu_833_out_feature_0_0_ce0;
        else 
            convOutput3_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    convOutput3_0_0_d0 <= grp_inference_conv2d_2_fu_833_out_feature_0_0_d0;

    -- convOutput3_0_0_we0 assign process. --
    convOutput3_0_0_we0_assign_proc : process(grp_inference_conv2d_2_fu_833_out_feature_0_0_we0, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            convOutput3_0_0_we0 <= grp_inference_conv2d_2_fu_833_out_feature_0_0_we0;
        else 
            convOutput3_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_1365_p2 <= "1" when (i9_reg_685 = ap_const_lv7_78) else "0";
    exitcond11_fu_1342_p2 <= "1" when (k8_reg_674 = ap_const_lv7_78) else "0";
    exitcond12_fu_1316_p2 <= "1" when (l3_reg_663 = ap_const_lv7_78) else "0";
    exitcond13_fu_1265_p2 <= "1" when (k6_reg_652 = ap_const_lv5_10) else "0";
    exitcond14_fu_1232_p2 <= "1" when (j8_reg_641 = ap_const_lv3_5) else "0";
    exitcond15_fu_1198_p2 <= "1" when (i8_reg_630 = ap_const_lv3_5) else "0";
    exitcond16_fu_1181_p2 <= "1" when (k9_reg_619 = ap_const_lv5_10) else "0";
    exitcond17_fu_1155_p2 <= "1" when (l8_reg_608 = ap_const_lv5_10) else "0";
    exitcond18_fu_1126_p2 <= "1" when (k7_reg_597 = ap_const_lv3_6) else "0";
    exitcond19_fu_1079_p2 <= "1" when (j6_reg_586 = ap_const_lv3_5) else "0";
    exitcond1_fu_853_p2 <= "1" when (i_reg_509 = ap_const_lv5_1C) else "0";
    exitcond20_fu_1045_p2 <= "1" when (i5_reg_575 = ap_const_lv3_5) else "0";
    exitcond21_fu_955_p2 <= "1" when (j2_reg_542 = ap_const_lv3_5) else "0";
    exitcond22_fu_1002_p2 <= "1" when (l_reg_553 = ap_const_lv3_6) else "0";
    exitcond2_fu_921_p2 <= "1" when (i1_reg_531 = ap_const_lv3_5) else "0";
    exitcond3_fu_1489_p2 <= "1" when (j11_reg_752 = ap_const_lv4_A) else "0";
    exitcond4_fu_1028_p2 <= "1" when (k4_reg_564 = ap_const_lv3_6) else "0";
    exitcond5_fu_1463_p2 <= "1" when (j10_reg_741 = ap_const_lv4_A) else "0";
    exitcond6_fu_1421_p2 <= "1" when (i6_reg_730 = ap_const_lv7_54) else "0";
    exitcond7_fu_1404_p2 <= "1" when (j7_reg_719 = ap_const_lv7_54) else "0";
    exitcond8_fu_895_p2 <= "1" when (j_reg_520 = ap_const_lv5_1C) else "0";
    exitcond9_fu_1377_p2 <= "1" when (j9_reg_708 = ap_const_lv7_54) else "0";
    exitcond_fu_1514_p2 <= "1" when (k10_reg_789 = ap_const_lv7_78) else "0";

    -- f1_0_address0 assign process. --
    f1_0_address0_assign_proc : process(tmp_62_cast_reg_1610, grp_inference_conv2d_fu_817_W_0_address0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            f1_0_address0 <= tmp_62_cast_reg_1610(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            f1_0_address0 <= grp_inference_conv2d_fu_817_W_0_address0;
        else 
            f1_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- f1_0_ce0 assign process. --
    f1_0_ce0_assign_proc : process(grp_inference_conv2d_fu_817_W_0_ce0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            f1_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            f1_0_ce0 <= grp_inference_conv2d_fu_817_W_0_ce0;
        else 
            f1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f1_0_d0 <= Filter1_q0;

    -- f1_0_we0 assign process. --
    f1_0_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            f1_0_we0 <= ap_const_logic_1;
        else 
            f1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- f2_address0 assign process. --
    f2_address0_assign_proc : process(tmp_75_cast_reg_1685, grp_inference_conv2d_1_fu_825_W_address0, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            f2_address0 <= tmp_75_cast_reg_1685(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            f2_address0 <= grp_inference_conv2d_1_fu_825_W_address0;
        else 
            f2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- f2_ce0 assign process. --
    f2_ce0_assign_proc : process(grp_inference_conv2d_1_fu_825_W_ce0, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            f2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            f2_ce0 <= grp_inference_conv2d_1_fu_825_W_ce0;
        else 
            f2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_d0 <= Filter2_q0;

    -- f2_we0 assign process. --
    f2_we0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            f2_we0 <= ap_const_logic_1;
        else 
            f2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- f3_address0 assign process. --
    f3_address0_assign_proc : process(tmp_82_cast_reg_1760, grp_inference_conv2d_2_fu_833_W_address0, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            f3_address0 <= tmp_82_cast_reg_1760(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            f3_address0 <= grp_inference_conv2d_2_fu_833_W_address0;
        else 
            f3_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- f3_ce0 assign process. --
    f3_ce0_assign_proc : process(grp_inference_conv2d_2_fu_833_W_ce0, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st43_fsm_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            f3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            f3_ce0 <= grp_inference_conv2d_2_fu_833_W_ce0;
        else 
            f3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_d0 <= Filter3_q0;

    -- f3_we0 assign process. --
    f3_we0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            f3_we0 <= ap_const_logic_1;
        else 
            f3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fcBias_address0 <= tmp_28_fu_1416_p1(7 - 1 downto 0);

    -- fcBias_ce0 assign process. --
    fcBias_ce0_assign_proc : process(ap_sig_cseq_ST_st28_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            fcBias_ce0 <= ap_const_logic_1;
        else 
            fcBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- fcIn_0_address0 assign process. --
    fcIn_0_address0_assign_proc : process(grp_inference_fc_fu_800_X_0_address0, ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st48_fsm_47, tmp_34_fu_1541_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            fcIn_0_address0 <= tmp_34_fu_1541_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            fcIn_0_address0 <= grp_inference_fc_fu_800_X_0_address0;
        else 
            fcIn_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- fcIn_0_ce0 assign process. --
    fcIn_0_ce0_assign_proc : process(grp_inference_fc_fu_800_X_0_ce0, ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            fcIn_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            fcIn_0_ce0 <= grp_inference_fc_fu_800_X_0_ce0;
        else 
            fcIn_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fcIn_0_d0 <= convOutput3_0_0_q0;

    -- fcIn_0_we0 assign process. --
    fcIn_0_we0_assign_proc : process(ap_sig_cseq_ST_st47_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46))) then 
            fcIn_0_we0 <= ap_const_logic_1;
        else 
            fcIn_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- fcOut4_0_address0 assign process. --
    fcOut4_0_address0_assign_proc : process(grp_inference_fc_fu_800_Y_0_address0, grp_inference_sm_fu_808_X_0_address0, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            fcOut4_0_address0 <= grp_inference_sm_fu_808_X_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            fcOut4_0_address0 <= grp_inference_fc_fu_800_Y_0_address0;
        else 
            fcOut4_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- fcOut4_0_ce0 assign process. --
    fcOut4_0_ce0_assign_proc : process(grp_inference_fc_fu_800_Y_0_ce0, grp_inference_sm_fu_808_X_0_ce0, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            fcOut4_0_ce0 <= grp_inference_sm_fu_808_X_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            fcOut4_0_ce0 <= grp_inference_fc_fu_800_Y_0_ce0;
        else 
            fcOut4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fcOut4_0_d0 <= grp_inference_fc_fu_800_Y_0_d0;

    -- fcOut4_0_we0 assign process. --
    fcOut4_0_we0_assign_proc : process(grp_inference_fc_fu_800_Y_0_we0, ap_sig_cseq_ST_st48_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            fcOut4_0_we0 <= grp_inference_fc_fu_800_Y_0_we0;
        else 
            fcOut4_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fcWeight_address0 <= tmp_81_cast_fu_1399_p1(14 - 1 downto 0);

    -- fcWeight_ce0 assign process. --
    fcWeight_ce0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            fcWeight_ce0 <= ap_const_logic_1;
        else 
            fcWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_inference_conv2d_1_fu_825_W_q0 <= f2_q0;
    grp_inference_conv2d_1_fu_825_ap_start <= grp_inference_conv2d_1_fu_825_ap_start_ap_start_reg;
    grp_inference_conv2d_1_fu_825_b_q0 <= b2_q0;
    grp_inference_conv2d_1_fu_825_x_q0 <= poolOut1_q0;
    grp_inference_conv2d_2_fu_833_W_q0 <= f3_q0;
    grp_inference_conv2d_2_fu_833_ap_start <= grp_inference_conv2d_2_fu_833_ap_start_ap_start_reg;
    grp_inference_conv2d_2_fu_833_b_q0 <= b3_q0;
    grp_inference_conv2d_2_fu_833_x_q0 <= poolOut2_q0;
    grp_inference_conv2d_fu_817_W_0_q0 <= f1_0_q0;
    grp_inference_conv2d_fu_817_ap_start <= grp_inference_conv2d_fu_817_ap_start_ap_start_reg;
    grp_inference_conv2d_fu_817_b_q0 <= b1_q0;
    grp_inference_conv2d_fu_817_x_0_q0 <= x_in_0_q0;
    grp_inference_fc_fu_800_B_0_q0 <= B4_0_q0;
    grp_inference_fc_fu_800_W_q0 <= W4_q0;
    grp_inference_fc_fu_800_X_0_q0 <= fcIn_0_q0;
    grp_inference_fc_fu_800_ap_start <= grp_inference_fc_fu_800_ap_start_ap_start_reg;
    grp_inference_maxPoolNxN_1_fu_847_ap_start <= grp_inference_maxPoolNxN_1_fu_847_ap_start_ap_start_reg;
    grp_inference_maxPoolNxN_1_fu_847_x_q0 <= convOutput2_q0;
    grp_inference_maxPoolNxN_fu_841_ap_start <= grp_inference_maxPoolNxN_fu_841_ap_start_ap_start_reg;
    grp_inference_maxPoolNxN_fu_841_x_q0 <= convOutput1_q0;
    grp_inference_sm_fu_808_B_0_q0 <= B5_0_q0;
    grp_inference_sm_fu_808_W_q0 <= W5_q0;
    grp_inference_sm_fu_808_X_0_q0 <= fcOut4_0_q0;
    grp_inference_sm_fu_808_ap_start <= grp_inference_sm_fu_808_ap_start_ap_start_reg;
    i14_cast4_fu_1506_p1 <= std_logic_vector(resize(unsigned(i7_reg_763),7));
    i7_phi_fu_768_p4 <= i7_reg_763;
    i_1_fu_859_p2 <= std_logic_vector(unsigned(i_reg_509) + unsigned(ap_const_lv5_1));
    i_2_fu_927_p2 <= std_logic_vector(unsigned(i1_reg_531) + unsigned(ap_const_lv3_1));
    i_3_fu_1051_p2 <= std_logic_vector(unsigned(i5_reg_575) + unsigned(ap_const_lv3_1));
    i_4_fu_1204_p2 <= std_logic_vector(unsigned(i8_reg_630) + unsigned(ap_const_lv3_1));
    i_5_fu_1371_p2 <= std_logic_vector(unsigned(i9_reg_685) + unsigned(ap_const_lv7_1));
    i_6_fu_1427_p2 <= std_logic_vector(unsigned(i6_reg_730) + unsigned(ap_const_lv7_1));
    inputImage_address0 <= tmp_55_cast_fu_916_p1(10 - 1 downto 0);

    -- inputImage_ce0 assign process. --
    inputImage_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            inputImage_ce0 <= ap_const_logic_1;
        else 
            inputImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j13_phi_fu_781_p4 <= j13_reg_776;
    j15_cast3_fu_1510_p1 <= std_logic_vector(resize(unsigned(j13_reg_776),7));
    j_12_fu_1495_p2 <= std_logic_vector(unsigned(j11_reg_752) + unsigned(ap_const_lv4_1));
    j_1_fu_1469_p2 <= std_logic_vector(unsigned(j10_reg_741) + unsigned(ap_const_lv4_1));
    j_4_fu_901_p2 <= std_logic_vector(unsigned(j_reg_520) + unsigned(ap_const_lv5_1));
    j_5_fu_961_p2 <= std_logic_vector(unsigned(j2_reg_542) + unsigned(ap_const_lv3_1));
    j_6_fu_1085_p2 <= std_logic_vector(unsigned(j6_reg_586) + unsigned(ap_const_lv3_1));
    j_7_fu_1238_p2 <= std_logic_vector(unsigned(j8_reg_641) + unsigned(ap_const_lv3_1));
    j_8_fu_1383_p2 <= std_logic_vector(unsigned(j9_reg_708) + unsigned(ap_const_lv7_1));
    j_9_fu_1410_p2 <= std_logic_vector(unsigned(j7_reg_719) + unsigned(ap_const_lv7_1));
    k_11_fu_1520_p2 <= std_logic_vector(unsigned(k10_reg_789) + unsigned(ap_const_lv7_1));
    k_3_fu_1187_p2 <= std_logic_vector(unsigned(k9_reg_619) + unsigned(ap_const_lv5_1));
    k_4_fu_1348_p2 <= std_logic_vector(unsigned(k8_reg_674) + unsigned(ap_const_lv7_1));
    k_5_fu_1132_p2 <= std_logic_vector(unsigned(k7_reg_597) + unsigned(ap_const_lv3_1));
    k_6_fu_1271_p2 <= std_logic_vector(unsigned(k6_reg_652) + unsigned(ap_const_lv5_1));
    k_fu_1034_p2 <= std_logic_vector(unsigned(k4_reg_564) + unsigned(ap_const_lv3_1));
    l_1_fu_1008_p2 <= std_logic_vector(unsigned(l_reg_553) + unsigned(ap_const_lv3_1));
    l_2_fu_1161_p2 <= std_logic_vector(unsigned(l8_reg_608) + unsigned(ap_const_lv5_1));
    l_3_fu_1322_p2 <= std_logic_vector(unsigned(l3_reg_663) + unsigned(ap_const_lv7_1));
    next_mul_fu_1359_p2 <= std_logic_vector(unsigned(phi_mul_reg_696) + unsigned(ap_const_lv14_54));
    outDigit <= grp_inference_sm_fu_808_argmax;
    outDigit_ap_vld <= grp_inference_sm_fu_808_argmax_ap_vld;
    p_shl10_cast_fu_1302_p3 <= (tmp_59_fu_1298_p1 & ap_const_lv3_0);
    p_shl11_cast_fu_1441_p1 <= std_logic_vector(resize(unsigned(tmp_62_fu_1433_p3),11));
    p_shl12_cast_fu_1453_p1 <= std_logic_vector(resize(unsigned(tmp_63_fu_1445_p3),11));
    p_shl1_cast_fu_1290_p3 <= (tmp_58_fu_1286_p1 & ap_const_lv7_0);
    p_shl2_cast_fu_885_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_877_p3),11));
    p_shl3_cast_fu_945_p1 <= std_logic_vector(resize(unsigned(tmp_37_fu_937_p3),6));
    p_shl4_cast_fu_976_p3 <= (tmp_42_fu_971_p2 & ap_const_lv3_0);
    p_shl5_cast_fu_992_p1 <= std_logic_vector(resize(unsigned(tmp_43_fu_984_p3),9));
    p_shl6_cast_fu_1069_p1 <= std_logic_vector(resize(unsigned(tmp_40_fu_1061_p3),6));
    p_shl8_fu_1116_p1 <= std_logic_vector(resize(unsigned(tmp_49_fu_1108_p3),9));
    p_shl9_cast_fu_1222_p1 <= std_logic_vector(resize(unsigned(tmp_45_fu_1214_p3),6));
    p_shl_cast_fu_873_p1 <= std_logic_vector(resize(unsigned(tmp_fu_865_p3),11));

    -- poolOut1_address0 assign process. --
    poolOut1_address0_assign_proc : process(grp_inference_conv2d_1_fu_825_x_address0, grp_inference_maxPoolNxN_fu_841_out_feature_address0, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            poolOut1_address0 <= grp_inference_maxPoolNxN_fu_841_out_feature_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            poolOut1_address0 <= grp_inference_conv2d_1_fu_825_x_address0;
        else 
            poolOut1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- poolOut1_ce0 assign process. --
    poolOut1_ce0_assign_proc : process(grp_inference_conv2d_1_fu_825_x_ce0, grp_inference_maxPoolNxN_fu_841_out_feature_ce0, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            poolOut1_ce0 <= grp_inference_maxPoolNxN_fu_841_out_feature_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            poolOut1_ce0 <= grp_inference_conv2d_1_fu_825_x_ce0;
        else 
            poolOut1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    poolOut1_d0 <= grp_inference_maxPoolNxN_fu_841_out_feature_d0;

    -- poolOut1_we0 assign process. --
    poolOut1_we0_assign_proc : process(grp_inference_maxPoolNxN_fu_841_out_feature_we0, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            poolOut1_we0 <= grp_inference_maxPoolNxN_fu_841_out_feature_we0;
        else 
            poolOut1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- poolOut2_address0 assign process. --
    poolOut2_address0_assign_proc : process(grp_inference_conv2d_2_fu_833_x_address0, grp_inference_maxPoolNxN_1_fu_847_out_feature_address0, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st41_fsm_40)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            poolOut2_address0 <= grp_inference_maxPoolNxN_1_fu_847_out_feature_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            poolOut2_address0 <= grp_inference_conv2d_2_fu_833_x_address0;
        else 
            poolOut2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- poolOut2_ce0 assign process. --
    poolOut2_ce0_assign_proc : process(grp_inference_conv2d_2_fu_833_x_ce0, grp_inference_maxPoolNxN_1_fu_847_out_feature_ce0, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st41_fsm_40)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            poolOut2_ce0 <= grp_inference_maxPoolNxN_1_fu_847_out_feature_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            poolOut2_ce0 <= grp_inference_conv2d_2_fu_833_x_ce0;
        else 
            poolOut2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    poolOut2_d0 <= grp_inference_maxPoolNxN_1_fu_847_out_feature_d0;

    -- poolOut2_we0 assign process. --
    poolOut2_we0_assign_proc : process(grp_inference_maxPoolNxN_1_fu_847_out_feature_we0, ap_sig_cseq_ST_st41_fsm_40)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            poolOut2_we0 <= grp_inference_maxPoolNxN_1_fu_847_out_feature_we0;
        else 
            poolOut2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    smBias_address0 <= tmp_31_fu_1501_p1(4 - 1 downto 0);

    -- smBias_ce0 assign process. --
    smBias_ce0_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            smBias_ce0 <= ap_const_logic_1;
        else 
            smBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    smWeight_address0 <= tmp_86_cast_fu_1484_p1(10 - 1 downto 0);

    -- smWeight_ce0 assign process. --
    smWeight_ce0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            smWeight_ce0 <= ap_const_logic_1;
        else 
            smWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_1531_p2 <= std_logic_vector(unsigned(j15_cast3_reg_1891) + unsigned(k10_reg_789));
    tmp_10_fu_1040_p1 <= std_logic_vector(resize(unsigned(k4_reg_564),64));
    tmp_11_cast_fu_907_p1 <= std_logic_vector(resize(unsigned(j_reg_520),11));
    tmp_12_cast_fu_1057_p1 <= std_logic_vector(resize(unsigned(i5_reg_575),6));
    tmp_13_cast_fu_967_p1 <= std_logic_vector(resize(unsigned(j2_reg_542),6));
    tmp_14_fu_1193_p1 <= std_logic_vector(resize(unsigned(k9_reg_619),64));
    tmp_15_cast_fu_1210_p1 <= std_logic_vector(resize(unsigned(i8_reg_630),6));
    tmp_16_cast_fu_1091_p1 <= std_logic_vector(resize(unsigned(j6_reg_586),6));
    tmp_18_fu_1354_p1 <= std_logic_vector(resize(unsigned(k8_reg_674),64));
    tmp_20_cast_fu_1244_p1 <= std_logic_vector(resize(unsigned(j8_reg_641),6));
    tmp_21_fu_1138_p1 <= std_logic_vector(resize(unsigned(k7_reg_597),9));
    tmp_22_cast_fu_1014_p1 <= std_logic_vector(resize(unsigned(l_reg_553),9));
    tmp_25_cast_fu_1389_p1 <= std_logic_vector(resize(unsigned(j9_reg_708),14));
    tmp_26_fu_1277_p1 <= std_logic_vector(resize(unsigned(k6_reg_652),64));
    tmp_27_cast_fu_1167_p1 <= std_logic_vector(resize(unsigned(l8_reg_608),13));
    tmp_28_fu_1416_p1 <= std_logic_vector(resize(unsigned(j7_reg_719),64));
    tmp_29_cast_fu_1328_p1 <= std_logic_vector(resize(unsigned(l3_reg_663),17));
    tmp_30_cast_fu_1475_p1 <= std_logic_vector(resize(unsigned(j10_reg_741),11));
    tmp_31_fu_1501_p1 <= std_logic_vector(resize(unsigned(j11_reg_752),64));
    tmp_32_fu_1526_p1 <= std_logic_vector(resize(unsigned(k10_reg_789),64));
    tmp_33_fu_1536_p2 <= std_logic_vector(unsigned(tmp1_fu_1531_p2) + unsigned(i14_cast4_reg_1886));
    tmp_34_fu_1541_p1 <= std_logic_vector(resize(unsigned(tmp_33_reg_1909),64));
    tmp_36_fu_889_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_873_p1) - unsigned(p_shl2_cast_fu_885_p1));
    tmp_37_fu_937_p3 <= (i1_reg_531 & ap_const_lv2_0);
    tmp_38_fu_949_p2 <= std_logic_vector(unsigned(tmp_cast_fu_933_p1) + unsigned(p_shl3_cast_fu_945_p1));
    tmp_39_fu_911_p2 <= std_logic_vector(unsigned(tmp_36_reg_1553) + unsigned(tmp_11_cast_fu_907_p1));
    tmp_40_fu_1061_p3 <= (i5_reg_575 & ap_const_lv2_0);
    tmp_41_fu_1073_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_1057_p1) + unsigned(p_shl6_cast_fu_1069_p1));
    tmp_42_fu_971_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_967_p1) + unsigned(tmp_38_reg_1584));
    tmp_43_fu_984_p3 <= (tmp_42_fu_971_p2 & ap_const_lv1_0);
    tmp_44_fu_996_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_976_p3) - unsigned(p_shl5_cast_fu_992_p1));
    tmp_45_fu_1214_p3 <= (i8_reg_630 & ap_const_lv2_0);
    tmp_46_fu_1226_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_1210_p1) + unsigned(p_shl9_cast_fu_1222_p1));
    tmp_47_fu_1095_p2 <= std_logic_vector(unsigned(tmp_41_reg_1646) + unsigned(tmp_16_cast_fu_1091_p1));
    tmp_48_fu_1100_p3 <= (tmp_47_fu_1095_p2 & ap_const_lv3_0);
    tmp_49_fu_1108_p3 <= (tmp_47_fu_1095_p2 & ap_const_lv1_0);
    tmp_50_fu_1120_p2 <= std_logic_vector(unsigned(tmp_48_fu_1100_p3) - unsigned(p_shl8_fu_1116_p1));
    tmp_51_fu_1018_p2 <= std_logic_vector(unsigned(tmp_44_reg_1597) + unsigned(tmp_22_cast_fu_1014_p1));
    tmp_52_fu_1248_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_1244_p1) + unsigned(tmp_46_reg_1721));
    tmp_53_fu_1253_p3 <= (tmp_52_fu_1248_p2 & ap_const_lv4_0);
    tmp_54_fu_1261_p1 <= std_logic_vector(resize(unsigned(tmp_53_fu_1253_p3),64));
        tmp_55_cast_fu_916_p1 <= std_logic_vector(resize(signed(tmp_39_fu_911_p2),64));

    tmp_55_fu_1142_p2 <= std_logic_vector(unsigned(tmp_50_reg_1659) + unsigned(tmp_21_fu_1138_p1));
    tmp_56_fu_1393_p2 <= std_logic_vector(unsigned(phi_mul_reg_696) + unsigned(tmp_25_cast_fu_1389_p1));
    tmp_57_fu_1281_p2 <= std_logic_vector(unsigned(tmp_54_reg_1734) + unsigned(tmp_26_fu_1277_p1));
    tmp_58_fu_1286_p1 <= tmp_57_fu_1281_p2(10 - 1 downto 0);
    tmp_59_fu_1298_p1 <= tmp_57_fu_1281_p2(14 - 1 downto 0);
    tmp_60_fu_1310_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_1290_p3) - unsigned(p_shl10_cast_fu_1302_p3));
    tmp_61_fu_1171_p2 <= std_logic_vector(unsigned(tmp_71_cast_reg_1672) + unsigned(tmp_27_cast_fu_1167_p1));
    tmp_62_cast_fu_1023_p1 <= std_logic_vector(resize(unsigned(tmp_51_fu_1018_p2),64));
    tmp_62_fu_1433_p3 <= (i6_reg_730 & ap_const_lv3_0);
    tmp_63_fu_1445_p3 <= (i6_reg_730 & ap_const_lv1_0);
    tmp_64_fu_1457_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_1453_p1) + unsigned(p_shl11_cast_fu_1441_p1));
    tmp_65_fu_1332_p2 <= std_logic_vector(unsigned(tmp_60_reg_1747) + unsigned(tmp_29_cast_fu_1328_p1));
    tmp_66_fu_1479_p2 <= std_logic_vector(unsigned(tmp_64_reg_1845) + unsigned(tmp_30_cast_fu_1475_p1));
    tmp_71_cast_fu_1147_p3 <= (tmp_55_fu_1142_p2 & ap_const_lv4_0);
    tmp_75_cast_fu_1176_p1 <= std_logic_vector(resize(unsigned(tmp_61_fu_1171_p2),64));
    tmp_81_cast_fu_1399_p1 <= std_logic_vector(resize(unsigned(tmp_56_fu_1393_p2),64));
    tmp_82_cast_fu_1337_p1 <= std_logic_vector(resize(unsigned(tmp_65_fu_1332_p2),64));
    tmp_86_cast_fu_1484_p1 <= std_logic_vector(resize(unsigned(tmp_66_fu_1479_p2),64));
    tmp_cast_fu_933_p1 <= std_logic_vector(resize(unsigned(i1_reg_531),6));
    tmp_fu_865_p3 <= (i_reg_509 & ap_const_lv5_0);
    tmp_s_fu_877_p3 <= (i_reg_509 & ap_const_lv2_0);

    -- x_in_0_address0 assign process. --
    x_in_0_address0_assign_proc : process(tmp_55_cast_reg_1566, grp_inference_conv2d_fu_817_x_0_address0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            x_in_0_address0 <= tmp_55_cast_reg_1566(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            x_in_0_address0 <= grp_inference_conv2d_fu_817_x_0_address0;
        else 
            x_in_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- x_in_0_ce0 assign process. --
    x_in_0_ce0_assign_proc : process(grp_inference_conv2d_fu_817_x_0_ce0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            x_in_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            x_in_0_ce0 <= grp_inference_conv2d_fu_817_x_0_ce0;
        else 
            x_in_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_in_0_d0 <= inputImage_q0;

    -- x_in_0_we0 assign process. --
    x_in_0_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            x_in_0_we0 <= ap_const_logic_1;
        else 
            x_in_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
