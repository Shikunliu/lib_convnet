-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110100101100010000001101", 
    1 => "10111101000001011111110111011011", 
    2 => "00111101110000011010100101000000", 
    3 => "00111101001101001100101110000100", 
    4 => "00111101101011010001000101111011", 
    5 => "00111110001101101010001001101110", 
    6 => "00111110000011011100100111000101", 
    7 => "00111110001110010000011011001101", 
    8 => "00111110000101011111001001000101", 
    9 => "00111101010101101111110111011110", 
    10 => "10111110001000110101100101111001", 
    11 => "00111100010100100100100100001110", 
    12 => "00111100101101001101000011000010", 
    13 => "10111101001110101100100010100011", 
    14 => "10111101110111100100000001000010", 
    15 => "00111100110001000101110010000110", 
    16 => "00111101001111010001100010101010", 
    17 => "10111110001001100001011111000010", 
    18 => "00111101001010110010001000001000", 
    19 => "10111101100101111010011101010001", 
    20 => "00111101010000100110110111101001", 
    21 => "10111110000011001000110110100000", 
    22 => "10111011110100001100011000010110", 
    23 => "00111101011110001101110001110000", 
    24 => "00111101001010111000011010110001", 
    25 => "00111101110000111011011111100110", 
    26 => "00111101100011101111010101001011", 
    27 => "00111101100011010101110011100000", 
    28 => "00111101100001110110011000001011", 
    29 => "10111011101110111010011101001011", 
    30 => "10111110010011010000000011110111", 
    31 => "00111100101010001101001000011100", 
    32 => "10111101110111011110001011101111", 
    33 => "10111101111010001010100010110001", 
    34 => "00111101100001100010000001110110", 
    35 => "10111101100011100000011100000001", 
    36 => "10111100101100011001010111011010", 
    37 => "10111101010010001110111011110010", 
    38 => "00111101000111011010101101011100", 
    39 => "10111101000111110111110000010111", 
    40 => "10111101100100010000011111111011", 
    41 => "00111100000011111111000010000011", 
    42 => "00111110000100100101100001001111", 
    43 => "00111101000011101010110010100001", 
    44 => "00111100001001011011010011000101", 
    45 => "10111101010101111010001010011001", 
    46 => "10111110000011011011010110010101", 
    47 => "00111100010000111010110101101001", 
    48 => "10111101000101111001111000110010", 
    49 => "10111101001001011000000110110101", 
    50 => "10111110001100101001011011110110", 
    51 => "10111110001010001000101101010100", 
    52 => "00111110000011110011111000000011", 
    53 => "00111101000101010010001011110111", 
    54 => "00111101100001110000000111001101", 
    55 => "00111101100100010110101010110100", 
    56 => "10111011100010010011001001000011", 
    57 => "10111110000010111111001110111111", 
    58 => "10111100110001010000000111111101", 
    59 => "00111101101011011010001110011010", 
    60 => "10111101001000000000011110101000", 
    61 => "10111101001101101110101101101001", 
    62 => "00111101001111010010100010011010", 
    63 => "00111101110001000001010000010001", 
    64 => "00111101010110010111011101010000", 
    65 => "10111110000100111010011101010100", 
    66 => "10111110010011111000111101000111", 
    67 => "10111101000111111001100000110001", 
    68 => "10111110000011001000010111000010", 
    69 => "10111100101010110110010000110010", 
    70 => "00111101001101111111100010110000", 
    71 => "10111101111101111100001011001010", 
    72 => "10111110000000010011011010100100", 
    73 => "00111101000111011000000101101011", 
    74 => "00111101111010010110100010010100", 
    75 => "00111100001111110101010000111110", 
    76 => "00111101110110001101010011111110", 
    77 => "00111101000110111100011001001010", 
    78 => "00111101001111001101011011010000", 
    79 => "00111110010000111000001001011110", 
    80 => "10111100111100101111100001111011", 
    81 => "00111101000010001011010111100111", 
    82 => "10111110000011001011111001100010", 
    83 => "10111011110000100000101111010100", 
    84 => "00111101100111000101100101110101", 
    85 => "10111101100111011110101001100001", 
    86 => "10111110000000010010111110010000", 
    87 => "10111101010000111010010000101111", 
    88 => "10111100111111010001011101001101", 
    89 => "00111110000001100110000000011100", 
    90 => "00111101110110001110001010100000", 
    91 => "00111100010011110001000110110110", 
    92 => "10111011100000110100110110101000", 
    93 => "10111101010101110101010010110000", 
    94 => "00111011110001001100100101001000", 
    95 => "10111101101010110011100010010011", 
    96 => "10111101101111100000000000111110", 
    97 => "10111011011111001000001101001001", 
    98 => "00111101111010100001011010100101", 
    99 => "10111101110100101011101000010111", 
    100 => "10111101101000100001001010000111", 
    101 => "00111100111010110011001010110100", 
    102 => "10111100110111000011001101110010", 
    103 => "10111011100011101011110001011011", 
    104 => "00111101011000110101100010010101", 
    105 => "00111101101011010010110011110100", 
    106 => "10111101010001000101101110010100", 
    107 => "00111101110011010000000111000001", 
    108 => "10111101001000010011111110000000", 
    109 => "00111100101110011101111101010101", 
    110 => "10111100110000101100011001001110", 
    111 => "00111100001010001110110011110100", 
    112 => "00111101101101000011000011110101", 
    113 => "00111101100011001010110001011001", 
    114 => "10111101000111100001001000000100", 
    115 => "00111101110000010100010011011001", 
    116 => "10111100111110110110110010111110", 
    117 => "00111110000100111100000100000101", 
    118 => "10111101101000011101001101100111", 
    119 => "00111110000101011111010100100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_10 is
    component inference_conv2d_f3_2_2_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_10_rom_U :  component inference_conv2d_f3_2_2_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


