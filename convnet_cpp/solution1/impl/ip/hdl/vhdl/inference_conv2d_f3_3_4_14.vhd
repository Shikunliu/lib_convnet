-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100010110101110010100101001", 
    1 => "10111110001010001001010100000111", 
    2 => "10111100111110010000011101010011", 
    3 => "00111110000000101101000011100101", 
    4 => "00111110001000001101010010011001", 
    5 => "10111101011011011110111111100010", 
    6 => "10111011110111101001011111010000", 
    7 => "10111101101101001001001001101100", 
    8 => "10111101101100111101110110110011", 
    9 => "10111100100111001100000100110111", 
    10 => "10111101111100101010011110111101", 
    11 => "00111010011000011011100001011011", 
    12 => "10111101001111100010010001011110", 
    13 => "00111100100011011001001110011100", 
    14 => "00111110000011111000011001011101", 
    15 => "00111110010110110010110101001101", 
    16 => "10111110000110111111000111101001", 
    17 => "00111110000100101111000110101010", 
    18 => "10111101100001111000110111010110", 
    19 => "00111101101001110010001011010100", 
    20 => "00111110001011111101011000001111", 
    21 => "10111101000011110111101000001011", 
    22 => "10111101101011011101011111101101", 
    23 => "00111101101111000010101000000010", 
    24 => "00111100100011101100011011011000", 
    25 => "10111101000010011011100001100000", 
    26 => "10111101101101101010110100111011", 
    27 => "00111101110111010111110000101101", 
    28 => "10111010101101101110111101000000", 
    29 => "00111100001000101111001001010011", 
    30 => "00111100101101101011101001110010", 
    31 => "10111101110000101100001101000100", 
    32 => "10111101001110100110000011010100", 
    33 => "10111100110001100000010110011110", 
    34 => "00111100101110010100101000111001", 
    35 => "00111101010001010011011000000000", 
    36 => "10111010000000001101110001001101", 
    37 => "00111101111001011100101010110000", 
    38 => "10111101100011000111011110001101", 
    39 => "10111101111100001011011000110001", 
    40 => "10111100100101111001110011010101", 
    41 => "10111100101110000101000010101001", 
    42 => "00111101010111100000111000001000", 
    43 => "10111110001000011111010000101100", 
    44 => "00111101100001101111000011000010", 
    45 => "00111101101110110001001000110010", 
    46 => "00111110011000001101001000111101", 
    47 => "10111100110010111000110011111100", 
    48 => "00111110001001100000011000110001", 
    49 => "10111101000111111011101111011000", 
    50 => "10111101111010110110111100011010", 
    51 => "00111100101101110111000001111010", 
    52 => "10111110000001110001011111011111", 
    53 => "10111101001011101100111001111111", 
    54 => "10111101000011011101100110001101", 
    55 => "10111110000000001110111100010011", 
    56 => "10111110001101111010101101110101", 
    57 => "10111101001101100010111011111100", 
    58 => "10111101001010110011100001000010", 
    59 => "00111100011001100001011111110111", 
    60 => "00111101100001000111011100001101", 
    61 => "00111100001001101001001010100110", 
    62 => "10111101000111000111101010001010", 
    63 => "00111101101101110010110111111111", 
    64 => "10111101011111110011011101001101", 
    65 => "00111100010000011000011001001000", 
    66 => "10111101000010000100101010111101", 
    67 => "10111101000001001101111101001000", 
    68 => "00111100000001001110010001100001", 
    69 => "00111101001010001101010010100000", 
    70 => "00111110000101101101000001001110", 
    71 => "00111101111101111000000000110100", 
    72 => "00111100111010110110100100000101", 
    73 => "10111101010000100101011001101100", 
    74 => "00111101111001001110011100100101", 
    75 => "00111010111100110110000010001010", 
    76 => "10111100100011100011011110011011", 
    77 => "00111101011011111010110110001000", 
    78 => "00111101001110011110101011000011", 
    79 => "10111011101011011011000110101010", 
    80 => "10111110001100110100110000011011", 
    81 => "10111101001100101100001110000111", 
    82 => "10111101101000010011110100010111", 
    83 => "00111101001110111110111111101011", 
    84 => "00111011011110000100010111110111", 
    85 => "10111101111101110100011100001111", 
    86 => "10111110010011000101001010100100", 
    87 => "10111110000001000010101110110110", 
    88 => "10111101011001111010111011010000", 
    89 => "10111101101101101100111100001100", 
    90 => "10111101100011110010111111000001", 
    91 => "10111101111000101101010100010111", 
    92 => "10111101100100011000100001111011", 
    93 => "10111101100111110111000000001000", 
    94 => "00111101100001100111100100111001", 
    95 => "10111101100100001111110000111100", 
    96 => "10111100110011011001111001001110", 
    97 => "00111110000100101000010011100000", 
    98 => "00111101010110101111110000111010", 
    99 => "10111110000000011011110111101000", 
    100 => "10111100001110011100010111110100", 
    101 => "10111110000000001110100010000110", 
    102 => "10111100001100111110110111011001", 
    103 => "10111100111001001011100100011101", 
    104 => "10111100001100101100100010101010", 
    105 => "00111110010010101101111001100101", 
    106 => "10111101110101010001000011010100", 
    107 => "10111100101011010010100100101110", 
    108 => "00111101100011010110000001010110", 
    109 => "10111100101110011001111111001001", 
    110 => "00111101000110000100100001111100", 
    111 => "10111100010111101100011110100001", 
    112 => "10111101100001110110110000100000", 
    113 => "10111100110001000110000101011001", 
    114 => "00111100100001100010111101011010", 
    115 => "10111101001100101001100011110100", 
    116 => "00111101101101100001101010110001", 
    117 => "00111101001100110111110010011010", 
    118 => "10111011101000010100010000110011", 
    119 => "10111101111101100010011100111001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_14 is
    component inference_conv2d_f3_3_4_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_14_rom_U :  component inference_conv2d_f3_3_4_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


