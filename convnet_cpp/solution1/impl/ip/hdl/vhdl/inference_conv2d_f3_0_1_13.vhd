-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100010001000100001100101", 
    1 => "10111101101100110111011101011100", 
    2 => "10111101100110100011010100001101", 
    3 => "00111101100100100010011101010111", 
    4 => "10111101111010011011110011111101", 
    5 => "00111100110100001101010100111010", 
    6 => "00111101110101110100000000111110", 
    7 => "10111101101000110101100110000111", 
    8 => "10111110000010111011010101011011", 
    9 => "00111101011000111100110101111111", 
    10 => "00111101101001110011001000111110", 
    11 => "00111101111001010011100101110101", 
    12 => "10111110000101010011100010101100", 
    13 => "10111010001111111011010101000000", 
    14 => "10111101110011101011000000110010", 
    15 => "00111101011100111000110101111011", 
    16 => "00111100101010101100100010010110", 
    17 => "10111101101010100101101110111110", 
    18 => "10111101100110111100111000011010", 
    19 => "10111101101110010000110001001110", 
    20 => "10111100101110001101010011111110", 
    21 => "10111101101000011111100001101011", 
    22 => "10111100110010110011100110111010", 
    23 => "10111100010001111100011001101000", 
    24 => "10111011101111010111101000001001", 
    25 => "00111101000110001101101001010111", 
    26 => "10111101000011110100001011001001", 
    27 => "00111100101010000110111111000001", 
    28 => "10111100101011000000001101011110", 
    29 => "10111100110110101101011000001111", 
    30 => "00111101011011001010010101100000", 
    31 => "10111101000010001110010110000010", 
    32 => "00111110000011001111101101110110", 
    33 => "00111101100000000110000101110111", 
    34 => "10111101000101101000010001110001", 
    35 => "00111101101010001110100101110000", 
    36 => "00111101110010101000001001000111", 
    37 => "10111101001010010100000001101011", 
    38 => "10111101110101010011100000100110", 
    39 => "10111001111011101010101110001001", 
    40 => "00111101010010011100110101110100", 
    41 => "00111101101101001110101110011010", 
    42 => "10111100010001111000000001011101", 
    43 => "00111100001000000001111111111011", 
    44 => "00111100100100100011001101110100", 
    45 => "00111100011001111010011001101101", 
    46 => "10111101010011101001010010011110", 
    47 => "10111110010000010111100100111010", 
    48 => "00111101111110100010010100010000", 
    49 => "00111101100101111010011111001010", 
    50 => "10111101001010001101000011110100", 
    51 => "10111101101111110000101100001101", 
    52 => "00111010101101100110010010101011", 
    53 => "10111101011100101011000110110011", 
    54 => "00111101100011011010110101011010", 
    55 => "10111110000011011000100110001011", 
    56 => "00111101110100010011001011111000", 
    57 => "10111100000100111110110101110011", 
    58 => "00111101100101101010101101011000", 
    59 => "00111100111001100111101011110100", 
    60 => "10111101101110011110000000011110", 
    61 => "00111101101010010100011011011110", 
    62 => "00111100001111110101100101000111", 
    63 => "10111101101000101000011011101011", 
    64 => "00111101011011111011101011110100", 
    65 => "10111101001110000101110010011110", 
    66 => "00111101000100101010110111101101", 
    67 => "10111110001010100001010110011000", 
    68 => "00111101101101111010101110010000", 
    69 => "10111101111011000101111111000000", 
    70 => "10111100111011001111110111111010", 
    71 => "10111011010001001111111000100001", 
    72 => "00111101101100000000010111010010", 
    73 => "10111110000000111111011011000010", 
    74 => "00111101111111101101100011010011", 
    75 => "00111110000101100111111101001110", 
    76 => "00111100000001000101100010001010", 
    77 => "10111101100010110100111000101101", 
    78 => "10111101010101100010000010111001", 
    79 => "00111101100111111100110011101111", 
    80 => "00111101101101011101011111001011", 
    81 => "00111011001111101011100101100100", 
    82 => "10111100110001110101011100001100", 
    83 => "10111101010101110000101010001110", 
    84 => "00111110000111000101110010011010", 
    85 => "00111011010001001011010110100111", 
    86 => "10111101011100101100011001011100", 
    87 => "10111101101100001010110101101111", 
    88 => "10111100100000000001001101001011", 
    89 => "10111101100011000110110010110011", 
    90 => "10111101001001010111000111111010", 
    91 => "10111101101011000001101111101000", 
    92 => "10111100111001000111110110001110", 
    93 => "00111101101110000001111110100100", 
    94 => "00111101100000010011101011001000", 
    95 => "00111110000101011101110101001100", 
    96 => "10111110000101010011110000010101", 
    97 => "10111101111010001011010111001100", 
    98 => "10111100100100011111011010100011", 
    99 => "10111100011100110100010101110010", 
    100 => "00111101100000010110010010011111", 
    101 => "00111110000000000101011010000010", 
    102 => "10111110001000101111100001111011", 
    103 => "00111101111011001001111100110000", 
    104 => "00111110000010010100100110100101", 
    105 => "00111110001011011101111100000001", 
    106 => "00111100101100001000111110110101", 
    107 => "10111110000101101100000111100011", 
    108 => "10111011111011111111001100011000", 
    109 => "10111101010000010000110101000110", 
    110 => "00111101100011101011111101110011", 
    111 => "00111101100000100010101111100111", 
    112 => "10111100110101011101110101001100", 
    113 => "00111101001010010000110011101111", 
    114 => "10111101101001010110100000010001", 
    115 => "00111101000001101001101101000000", 
    116 => "00111110001010010100100010011001", 
    117 => "00111110000011010001100000001001", 
    118 => "10111101101011000100001000111011", 
    119 => "10111011100001010111110111000011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_13 is
    component inference_conv2d_f3_0_1_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_13_rom_U :  component inference_conv2d_f3_0_1_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


