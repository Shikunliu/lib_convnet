-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_28_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_28_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111001001110101001001011", 
    1 => "00111100101001110010001000011000", 
    2 => "10111101101011000010100111100111", 
    3 => "00111110000001010100110111101000", 
    4 => "10111110010001101001110110110110", 
    5 => "00111101110000100111000100011100", 
    6 => "10111110001110110111101100101001", 
    7 => "10111110000000000101010010101100", 
    8 => "00111110000101101101100000101100", 
    9 => "10111101010111011010111110101001", 
    10 => "00111100110000110011101010110011", 
    11 => "00111110001001011001110110011001", 
    12 => "10111011100110011000001000011101", 
    13 => "10111100111101011111111000011110", 
    14 => "00111110000001111011111000010010", 
    15 => "10111101001010001011101011010100", 
    16 => "10111101111100110111110010011010", 
    17 => "00111101111101010001100100110111", 
    18 => "00111101111111011010110111111011", 
    19 => "00111101000000110101010100000100", 
    20 => "00111101110001100110110000101011", 
    21 => "00111101100111101000010001011101", 
    22 => "00111101101010110010110101110110", 
    23 => "00111101110111010000110110001101", 
    24 => "00111110011001010000011001010111", 
    25 => "00111101001011010111000010110001", 
    26 => "10111101010101110000110011000010", 
    27 => "10111110011001011110100000001100", 
    28 => "10111100101110001000000110000110", 
    29 => "00111101110011100001100000100110", 
    30 => "00111110000101110110011100001010", 
    31 => "10111100111110110001010000001000", 
    32 => "10111011000000011001101111110111", 
    33 => "00111101000010011101011110100000", 
    34 => "00111101001001100000000010110000", 
    35 => "00111101100101010000010110110110", 
    36 => "10111100011001111000011011111000", 
    37 => "10111101000101110010000010010011", 
    38 => "10111101001100101101000011011000", 
    39 => "00111101010101001011011010001011", 
    40 => "00111101001111101101011101011100", 
    41 => "10111110001100110011001101110110", 
    42 => "10111101101111000111101101100001", 
    43 => "00111100111111010001011110111001", 
    44 => "10111110001000110110101101001100", 
    45 => "10111101011000100110000010110011", 
    46 => "10111110001111000011001011101100", 
    47 => "00111110100000111001011010101111", 
    48 => "10111101101101010100011111100000", 
    49 => "10111101011001000011011101100111", 
    50 => "10111101110111110001110011111100", 
    51 => "00111110000111010011110110000110", 
    52 => "10111100000100111110011100111110", 
    53 => "00111110000010100011010110010011", 
    54 => "10111100011111010111010000110101", 
    55 => "00111110011001110011110101011100", 
    56 => "10111101100000100010101110100100", 
    57 => "00111100110010000100101010111101", 
    58 => "00111010000110111011110001110000", 
    59 => "10111110001001001111110000011110", 
    60 => "00111101100011101010000001001111", 
    61 => "10111101100011011000111101011101", 
    62 => "10111101100000001001111010001011", 
    63 => "00111110010010111101110001101010", 
    64 => "10111101011101011001110000010100", 
    65 => "00111100111111101100101011100001", 
    66 => "00111010101010111101001111011001", 
    67 => "00111100100010111011010101000000", 
    68 => "10111100101110010001011010100010", 
    69 => "10111100100101010000110001101100", 
    70 => "10111011100010000110001101100110", 
    71 => "00111110000110110001110101010000", 
    72 => "00111110010001111011011011111110", 
    73 => "10111101110000010110101001110001", 
    74 => "00111110001010110000001101011100", 
    75 => "10111100001101100000010101110110", 
    76 => "00111100101101100111011101010110", 
    77 => "00111101111010111100001011111100", 
    78 => "00111101101010000100100000011110", 
    79 => "00111101101000101100101110100111", 
    80 => "10111101111010101000101010000011", 
    81 => "00111101111010000011011111111000", 
    82 => "00111101011011000011000011000110", 
    83 => "00111101010011001000000111010100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_28 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_28 is
    component inference_mult_1_120_120_84_s_W4_28_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_28_rom_U :  component inference_mult_1_120_120_84_s_W4_28_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


