-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100111011011100010000101", 
    1 => "10111101000101000100001100011001", 
    2 => "00111100111100000111000000001010", 
    3 => "00111101000000000110111111111101", 
    4 => "00111101011100010010001110001110", 
    5 => "10111011110010111111000001000011", 
    6 => "00111101111100010000001000110110", 
    7 => "10111110000000010111011000010100", 
    8 => "00111101010101001001001110000110", 
    9 => "00111101000001110000011101000000", 
    10 => "10111101001001001001111000101010", 
    11 => "00111110010100101000100011001110", 
    12 => "10111101110001000110100001000101", 
    13 => "00111101100101110111011000110001", 
    14 => "00111101100100111111101101000101", 
    15 => "00111100001101111100010000100111", 
    16 => "00111101100100001111010001010001", 
    17 => "10111101111111111100001100101111", 
    18 => "00111101110101001100111111010001", 
    19 => "10111110010000001101001110001101", 
    20 => "10111101100110100101100100011111", 
    21 => "00111110000100001000011100000001", 
    22 => "10111100010111001010010010110001", 
    23 => "00111101111010011011000111111011", 
    24 => "10111101111100110111001110110000", 
    25 => "00111110000000100000010001101100", 
    26 => "00111100010000101000110011011000", 
    27 => "00111101000111011100010001010001", 
    28 => "00111101100101101110000001100111", 
    29 => "00111101000110111010100100111110", 
    30 => "10111110010101100010110011111110", 
    31 => "10111101000010100000001111000101", 
    32 => "00111100111110000000111100111011", 
    33 => "00111101101011000110100101110011", 
    34 => "00111101111001001101110010101001", 
    35 => "00111101000001010111110011100010", 
    36 => "10111101100001010111011000011110", 
    37 => "10111101101101011010101100101101", 
    38 => "00111110001000010000011000100101", 
    39 => "10111011101001100001100101101111", 
    40 => "10111101101110100111000100001000", 
    41 => "00111101100001101000001111000011", 
    42 => "00111100011101001010011111011101", 
    43 => "00111011010010101110101001110100", 
    44 => "00111101010111001011000100010001", 
    45 => "10111101010011010011101010010110", 
    46 => "00111101110111111011010110001101", 
    47 => "00111101010000000000101010110010", 
    48 => "10111101110101011101100010010101", 
    49 => "00111101000111011000100000111100", 
    50 => "00111110000100011100110110100011", 
    51 => "10111100010011010100011101000110", 
    52 => "10111101100001101001111001110010", 
    53 => "10111100111000001111001110010110", 
    54 => "10111101100101010001001111000011", 
    55 => "00111101111001011110111111101001", 
    56 => "00111101100010001000111101101011", 
    57 => "10111101001110110001111111100001", 
    58 => "10111100111111110010000000000110", 
    59 => "00111101010011110011101011101100", 
    60 => "00111100110100001101001001001011", 
    61 => "10111101111000000101000000110111", 
    62 => "00111101110010111101000000110011", 
    63 => "00111101100011010100110111100001", 
    64 => "00111100111011101101110000100001", 
    65 => "10111101101001001110001000000010", 
    66 => "00111011111011010010100011001101", 
    67 => "10111110001011011100110000100001", 
    68 => "10111100100110001100011101110111", 
    69 => "00111101110011000110001001010001", 
    70 => "10111101010011111010101011101000", 
    71 => "00111100101100111010110000110101", 
    72 => "10111100111011110100001100011001", 
    73 => "00111101111011110111000000010101", 
    74 => "00111101000100010100100001110111", 
    75 => "00111101101111110111010011110101", 
    76 => "10111011011001111100111110001000", 
    77 => "10111101001111001001000100010101", 
    78 => "10111100010001101111011001011111", 
    79 => "10111110001001101111111000101110", 
    80 => "00111110001011110011101001011000", 
    81 => "10111100001010100100100100010100", 
    82 => "00111101011011010011111011100011", 
    83 => "00111110001101100101101111101010", 
    84 => "00111110010000011010110110100111", 
    85 => "00111011001110101111101110010100", 
    86 => "10111101000010111110110010000010", 
    87 => "10111101000000101001110110111010", 
    88 => "00111101100010010101001000111111", 
    89 => "00111011000110001000110011010100", 
    90 => "10111110000011010100001110001101", 
    91 => "00111100110101001101110100111101", 
    92 => "10111101101100110010111100110111", 
    93 => "00111110010010000011000011100100", 
    94 => "00111101110010010001101011100001", 
    95 => "00111101000110110111001111111010", 
    96 => "10111101110100110110110111101100", 
    97 => "10111110000101101100111000110110", 
    98 => "00111110001101011000010011110101", 
    99 => "10111101111000001100010010011100", 
    100 => "00111101001001110101101101110100", 
    101 => "10111100110101111001011110010111", 
    102 => "00111011101100010010010001111011", 
    103 => "00111101111000010000101101100011", 
    104 => "00111011100100000110111001001101", 
    105 => "10111100101101000100110000111000", 
    106 => "00111100110100011101001100110001", 
    107 => "00111101001001000001000110101000", 
    108 => "10111101110011010001010110101101", 
    109 => "10111101110110001111000101001110", 
    110 => "00111110001111111111111010110000", 
    111 => "10111110000001000001010000011111", 
    112 => "10111100100111101000010110010010", 
    113 => "00111101011010100001110000011000", 
    114 => "00111101111010001101100001100110", 
    115 => "10111101111101111010001001001001", 
    116 => "10111110000111110111001100111011", 
    117 => "10111100100010010101100111100110", 
    118 => "00111100101010001111010100100001", 
    119 => "00111101110000100001000010001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_10 is
    component inference_conv2d_f3_3_4_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_10_rom_U :  component inference_conv2d_f3_3_4_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


