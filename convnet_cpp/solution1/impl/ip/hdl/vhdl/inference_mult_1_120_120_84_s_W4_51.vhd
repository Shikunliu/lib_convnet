-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_51_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_51_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000010110101011110101101", 
    1 => "00111101100100100111010001101001", 
    2 => "10111110000101011010110000000100", 
    3 => "10111101100100000000000110100000", 
    4 => "10111101011101011101111010101001", 
    5 => "10111101111101110110110111011011", 
    6 => "10111100000101111000001011001001", 
    7 => "00111011000011000000001000101100", 
    8 => "00111101100111101110110110010110", 
    9 => "00111011001111111010110111010101", 
    10 => "10111110000011010000100101011011", 
    11 => "00111110000001101101110101101010", 
    12 => "00111110000111011000001000110100", 
    13 => "10111100011011000010001011010011", 
    14 => "00111101110100101001001111010001", 
    15 => "10111101011001001000100101100111", 
    16 => "10111100101100101011000000100001", 
    17 => "10111101101111000110101000100001", 
    18 => "00111101111000110101000101011001", 
    19 => "00111101110011110010011110111011", 
    20 => "00111101000101101011000000010000", 
    21 => "10111011011011100010000101011011", 
    22 => "00111101101011110111010110010111", 
    23 => "10111110001011010001100100010101", 
    24 => "00111110000101101100001101110110", 
    25 => "00111101111111100010100100110000", 
    26 => "00111100110011000010011000010100", 
    27 => "00111101101010110011101010010001", 
    28 => "00111011110011001001101000100010", 
    29 => "10111101010011101111110010001000", 
    30 => "10111011100100101011000101110011", 
    31 => "00111110011010110001111100100101", 
    32 => "00111110000011111010010011000110", 
    33 => "00111011000011110010101000101010", 
    34 => "00111100100010101111011111100000", 
    35 => "10111101100110010000110101110101", 
    36 => "10111101101010110100010110111100", 
    37 => "10111101011110110001001110011101", 
    38 => "00111101100010110010001100000111", 
    39 => "10111011001111001010011001100100", 
    40 => "10111101100100010000011010011110", 
    41 => "10111110010000011010100110111001", 
    42 => "10111110010100001110011110111100", 
    43 => "10111101110000111110100111001111", 
    44 => "10111101000011100011101110011000", 
    45 => "00111101011100100001111011001100", 
    46 => "10111110010000100100010110110011", 
    47 => "10111100110110001111110111001000", 
    48 => "00111101111011111001000100011101", 
    49 => "00111101011110001100011000011010", 
    50 => "10111110001010110111000110111001", 
    51 => "00111110001111011101001010101111", 
    52 => "10111110000011110000010011011110", 
    53 => "10111101010100000000101111001100", 
    54 => "10111101100010000011100101110000", 
    55 => "00111101101011011000111010101111", 
    56 => "00111101100100101010101011100011", 
    57 => "10111101100000110101100010010101", 
    58 => "00111101100110001110100101001000", 
    59 => "10111101110101011110001010001011", 
    60 => "10111100011010111011011100001000", 
    61 => "10111110010101010110000100001011", 
    62 => "10111100010101101110111111010001", 
    63 => "10111110000111011000111110010011", 
    64 => "00111101110110010111110111010000", 
    65 => "10111101001011011101011001001101", 
    66 => "10111110011111101000000001111100", 
    67 => "00111101010110111110110100110001", 
    68 => "00111110000101000011010011100011", 
    69 => "10111110000000111001111011110001", 
    70 => "10111011110011100100100000100010", 
    71 => "10111101000100001110100011010110", 
    72 => "00111001100100101011101010010011", 
    73 => "10111101111100011101011110011001", 
    74 => "00111101100010111111111111000000", 
    75 => "00111100011001111001100000101010", 
    76 => "10111100111001001000100010101011", 
    77 => "00111101111001100101011000100110", 
    78 => "00111101001011001100101010011001", 
    79 => "10111011111111001011101100010010", 
    80 => "00111100110110100110101001111010", 
    81 => "00111101100001011000110100010101", 
    82 => "00111101000011110111110010101010", 
    83 => "00111101011110000101000001011001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_51 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_51 is
    component inference_mult_1_120_120_84_s_W4_51_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_51_rom_U :  component inference_mult_1_120_120_84_s_W4_51_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


