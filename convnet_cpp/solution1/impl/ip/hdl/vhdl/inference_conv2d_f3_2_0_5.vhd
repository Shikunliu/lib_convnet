-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100000110101110111011011001", 
    1 => "00111110001001011101100000001110", 
    2 => "00111101101100011000110111111101", 
    3 => "00111101111001100101100111010001", 
    4 => "10111110001110000100001011111010", 
    5 => "00111101111101010010111111000010", 
    6 => "10111101100011111000010100110110", 
    7 => "10111100010001111111010000100000", 
    8 => "00111100010111011010000011000101", 
    9 => "10111100000010100101001101100000", 
    10 => "10111101101010011100001000000110", 
    11 => "10111101011000101000111111001000", 
    12 => "10111101001000100010110001100000", 
    13 => "10111101011011011101100011101100", 
    14 => "10111110011010000000110011111010", 
    15 => "10111101011100001101101011111111", 
    16 => "00111101101001011000100101101010", 
    17 => "00111101000011110011010101000010", 
    18 => "10111101100011111001010100110100", 
    19 => "10111110001110000101111010000001", 
    20 => "10111001110110010110011000110000", 
    21 => "00111101100000101011000100100000", 
    22 => "00111110010000101010000110110110", 
    23 => "10111110000110001000001000101000", 
    24 => "00111100110001001101001010011000", 
    25 => "00111101110000000101101100010010", 
    26 => "10111101001101101001101111010011", 
    27 => "10111101100000010101111011110101", 
    28 => "00111100000001111010000111100000", 
    29 => "00111100111100101010110000100101", 
    30 => "00111011011010111111101000111010", 
    31 => "00111101101000011101110011100100", 
    32 => "00111100111111010101001111101001", 
    33 => "10111101100010111001001000010010", 
    34 => "10111110000111000000001001101101", 
    35 => "00111101100110011001110101100000", 
    36 => "10111101000001111011010110000110", 
    37 => "00111100100000000011111001001001", 
    38 => "00111101010110100001011101010011", 
    39 => "10111110010001101000101010010011", 
    40 => "10111101101110011011110101000000", 
    41 => "10111110000001110111011000111110", 
    42 => "10111101001010100000101011100110", 
    43 => "00111100110110100000100011110101", 
    44 => "10111110000100100100100010010101", 
    45 => "00111100101011100100001100111111", 
    46 => "10111101001100111111101101100000", 
    47 => "00111110001110111000000001100111", 
    48 => "00111101001111101100000111000010", 
    49 => "10111101000010101111010010100000", 
    50 => "10111100101110111010010100100111", 
    51 => "00111101101010101000100001001111", 
    52 => "10111101001100001000111100010100", 
    53 => "00111101101101001111111100101000", 
    54 => "10111101011111110100010111000110", 
    55 => "00111100101010000110110011010001", 
    56 => "00111101101011010100000111101101", 
    57 => "00111101010011111111010110010001", 
    58 => "10111101101100101010101000110100", 
    59 => "00111101101011001100011111000100", 
    60 => "10111101011011010000101101001100", 
    61 => "10111101100101101111010010010110", 
    62 => "00111100110000100010011101010111", 
    63 => "00111101110111101010101000101010", 
    64 => "00111101000111011001110010010011", 
    65 => "10111100111001101101000101011011", 
    66 => "10111100101010101010001100001100", 
    67 => "10111100001011110010010110000111", 
    68 => "00111101001101010100010110010010", 
    69 => "10111101001011001100011011010011", 
    70 => "10111101101011110110000001011011", 
    71 => "00111110001001001000101101100101", 
    72 => "00111110000100000010100100101000", 
    73 => "00111101100011101000101010011010", 
    74 => "00111110001001001011110010101110", 
    75 => "10111110000011000110010010111011", 
    76 => "10111101110110000111110001100011", 
    77 => "10111101111011011100111101000110", 
    78 => "00111101000100010100110111010000", 
    79 => "00111101000101010111111010000010", 
    80 => "10111100101101011110011101111000", 
    81 => "10111101000000110100011111001110", 
    82 => "10111101100100001000000111010000", 
    83 => "10111101101010100110011110011000", 
    84 => "00111101010001011110011111010110", 
    85 => "00111101111101011100000110000011", 
    86 => "00111101110001011010100010101001", 
    87 => "10111101010011101010110110101101", 
    88 => "00111101000011111100100101101100", 
    89 => "00111101110101100111000100100110", 
    90 => "10111101101011101010111110011110", 
    91 => "00111101011001110110111110010110", 
    92 => "10111101000101100100100000100110", 
    93 => "00111101100110010110000010110111", 
    94 => "00111101000101001000100011101110", 
    95 => "10111101010000011000111000001010", 
    96 => "10111101011011011101111110111101", 
    97 => "00111101011010000011110110100001", 
    98 => "10111100100011101100011000000001", 
    99 => "10111100111010100001000110110111", 
    100 => "10111110000010001000111110000110", 
    101 => "10111101111000100011100001010100", 
    102 => "10111110000111010011111010010010", 
    103 => "10111101011101110110100111000100", 
    104 => "00111101001011001101100011000001", 
    105 => "00111101111010111111110010101000", 
    106 => "10111101011110100010001101100010", 
    107 => "10111100111011110010000101010110", 
    108 => "10111101001011111100010110100110", 
    109 => "00111101111000001110111100010011", 
    110 => "10111101110100011101011010001100", 
    111 => "00111101010110011101111011101001", 
    112 => "10111101100001001100000110000000", 
    113 => "10111101101110001101111000101011", 
    114 => "10111100010111011111000001110110", 
    115 => "00111100111000011000110111101111", 
    116 => "10111110000100000011110011010001", 
    117 => "10111110000011011100101011010001", 
    118 => "10111101010100011101110010111100", 
    119 => "10111101111111110100010011010100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_5 is
    component inference_conv2d_f3_2_0_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_5_rom_U :  component inference_conv2d_f3_2_0_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


