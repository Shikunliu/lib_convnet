-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101000110100101000011101", 
    1 => "00111100110000000000111100011001", 
    2 => "00111100111000010000010011111110", 
    3 => "00111100111110010111001111110101", 
    4 => "10111101110110000110101110011100", 
    5 => "10111100110101101100011011101100", 
    6 => "00111100001001001101100101101001", 
    7 => "00111101100000001101100000101010", 
    8 => "00111110001110000001101010011100", 
    9 => "10111101100101110101001010001010", 
    10 => "10111011110110110000110101010111", 
    11 => "00111101100110000011100011101001", 
    12 => "00111101000100011100100000101111", 
    13 => "00111101110000000111111011111100", 
    14 => "00111011100010111100110100101000", 
    15 => "00111101001100010011000011100000", 
    16 => "00111110000011000001101100010001", 
    17 => "00111110001110110011111010011010", 
    18 => "00111101000111010001100001110100", 
    19 => "10111101101110010101101000001110", 
    20 => "10111110000010101011110101011110", 
    21 => "00111100010001011110111101100011", 
    22 => "10111100100001011010001111100100", 
    23 => "00111101110110010110010100101100", 
    24 => "00111101001001011001000111011011", 
    25 => "00111110001101110110000111001100", 
    26 => "00111101100100001010110001111110", 
    27 => "10111101011110000111001011011000", 
    28 => "10111011000000100010000110101110", 
    29 => "00111101001110101010000111110010", 
    30 => "00111101010101111010001000101110", 
    31 => "10111100110010010110011001000110", 
    32 => "00111100010110000011111011110001", 
    33 => "10111101111010000111110100101100", 
    34 => "10111101000100010111111010101110", 
    35 => "00111101011000100010111100110101", 
    36 => "10111011111000111010101011110101", 
    37 => "00111100100001010110001010101011", 
    38 => "10111101100110101111000001100001", 
    39 => "10111101011101111001010100010010", 
    40 => "10111110000111101101011110000100", 
    41 => "10111101110101110000100000100101", 
    42 => "10111101100011111100111111011111", 
    43 => "00111101000000010110001001010000", 
    44 => "00111011110011110001111110001101", 
    45 => "00111100110110000100110001011101", 
    46 => "00111101000011011110101010001001", 
    47 => "00111101000011001010111010110101", 
    48 => "00111101100011110010101000110010", 
    49 => "00111100001110111110100101010000", 
    50 => "10111110001110110100001011001100", 
    51 => "10111101001010101001000010110010", 
    52 => "10111110000010011000010010100001", 
    53 => "10111100110110001000110010111111", 
    54 => "00111100101010101010010010111010", 
    55 => "10111110000010011101101101100110", 
    56 => "10111100111001101110110001101000", 
    57 => "10111101010001000110011101010011", 
    58 => "00111110001001011011111100100111", 
    59 => "00111100111100011001000010011100", 
    60 => "10111101101001100000110000000011", 
    61 => "00111101000000100110111011000000", 
    62 => "00111101110011010101101111101110", 
    63 => "00111101110101011011111011100100", 
    64 => "10111101100101000010011000001101", 
    65 => "10111110000011010001010100100111", 
    66 => "00111101100111011010101110111010", 
    67 => "10111101101001111010010110111110", 
    68 => "00111101011011010000000010011010", 
    69 => "10111101101100100000001001000110", 
    70 => "00111101110001011010101100000101", 
    71 => "10111100100110100111010000100000", 
    72 => "00111100111001101011101001111111", 
    73 => "10111101000110010101001010000010", 
    74 => "10111100011111011100000000011111", 
    75 => "10111101001000111000110100011110", 
    76 => "00111110000110101001000110010111", 
    77 => "00111100110110001100001000000011", 
    78 => "10111101111010011011101011100100", 
    79 => "00111101101001001101111000111100", 
    80 => "10111101100111001001111100001000", 
    81 => "10111101100001101100110111011000", 
    82 => "00111101001000100111001011010111", 
    83 => "00111110000111111001100001110100", 
    84 => "10111100100101000110011100101011", 
    85 => "00111100010101111111101101101010", 
    86 => "00111101001110011011101101000010", 
    87 => "00111101111101110110100110101001", 
    88 => "00111110001100100000001000010000", 
    89 => "00111101101011101011001100000110", 
    90 => "10111101000011111100001111011101", 
    91 => "10111100001101101010111011101001", 
    92 => "00111101100101011110011011100101", 
    93 => "10111100110101110001010000011001", 
    94 => "10111100111001101011000000000011", 
    95 => "10111100100100100110110111000001", 
    96 => "00111101000000000010111100010101", 
    97 => "00111100000101100110110000011101", 
    98 => "10111101110010101000111111000001", 
    99 => "00111101110010111101100010100100", 
    100 => "00111110000101001100101100011001", 
    101 => "10111101100011000100001000000101", 
    102 => "00111101010001011001011001000010", 
    103 => "00111100111000010101100111101101", 
    104 => "00111110001010010111100110011110", 
    105 => "10111110000101100100110000110000", 
    106 => "10111101111001101110101100001011", 
    107 => "00111101001111001110101110101110", 
    108 => "00111101001111001110011000000101", 
    109 => "10111100110000000001010101100100", 
    110 => "00111101111100000000101010111111", 
    111 => "00111100000001101000011111101111", 
    112 => "10111110000010100011010111010110", 
    113 => "10111101110010000010001110010011", 
    114 => "10111100100100101000101101010011", 
    115 => "00111101101011010000010001100000", 
    116 => "00111101100111010000101011111011", 
    117 => "10111101010011110111000100100010", 
    118 => "00111101011010100011110011010000", 
    119 => "10111101011101110100100010000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_2 is
    component inference_conv2d_f3_4_2_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_2_rom_U :  component inference_conv2d_f3_4_2_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


