-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_26_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_26_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101101000011110000000101", 
    1 => "10111110000011111101010100000010", 
    2 => "10111100001000000111000010100011", 
    3 => "00111101100100101100111001010100", 
    4 => "00111101100100101111010101100011", 
    5 => "10111101010011010101001111000000", 
    6 => "10111101000011101110001110010011", 
    7 => "10111110000100100001011001000000", 
    8 => "10111011001011010000110100010100", 
    9 => "00111100100111000101100111010011", 
    10 => "10111101111110100101110000011100", 
    11 => "10111101100101111101011111010000", 
    12 => "00111101000001010011110111111000", 
    13 => "00111101000011111000000101001000", 
    14 => "00111101110100001110011011110011", 
    15 => "00111101100010000111111001100001", 
    16 => "10111110000110011011111111011111", 
    17 => "00111101101101010010010000010001", 
    18 => "10111101010010001100101010001111", 
    19 => "00111101000000000010000110001110", 
    20 => "00111101100010111000101000001100", 
    21 => "10111110001011110110110111111100", 
    22 => "00111101111010001111100111110100", 
    23 => "00111011000100101010010111011111", 
    24 => "10111110000100101111001001110011", 
    25 => "10111100011011111101101101011010", 
    26 => "10111101010011110110001111101011", 
    27 => "00111101101001100010010001001010", 
    28 => "00111101100100111110000101011110", 
    29 => "00111101010100001110101101011010", 
    30 => "00111110010010001011000100010100", 
    31 => "10111100100111110111001101100011", 
    32 => "10111110000100000011110011010001", 
    33 => "10111010000100000111101010010101", 
    34 => "00111101100010101011110111001001", 
    35 => "10111110001001010110000011001000", 
    36 => "10111101111000010101111011000000", 
    37 => "10111101101111010110110010001101", 
    38 => "10111110010000000110101110111110", 
    39 => "10111100101111101011100000000001", 
    40 => "10111101000101110011011001111101", 
    41 => "00111101101110000010110010111111", 
    42 => "00111110001000011110011011001101", 
    43 => "00111101111011000011101110010010", 
    44 => "10111101001100101101000000000001", 
    45 => "00111100001111101000101101010110", 
    46 => "00111101011101000111001111110110", 
    47 => "00111101100111010110011000110101", 
    48 => "00111011101110000011100100101100", 
    49 => "10111100110001101001001101100010", 
    50 => "10111110000000000001001000010111", 
    51 => "10111110000100011100111101111000", 
    52 => "00111101101010000001111011101000", 
    53 => "10111101100100010100001100011110", 
    54 => "00111100011110100111111001001011", 
    55 => "00111110000001110000100100110001", 
    56 => "00111101110100001010001101010001", 
    57 => "10111101111101101111010111001011", 
    58 => "00111101100100100110110010001100", 
    59 => "00111110001000011011000100010000", 
    60 => "10111101011010010101000001000001", 
    61 => "00111110001001000010100111100001", 
    62 => "00111101101101100101001010001000", 
    63 => "00111100000111111110110011011010", 
    64 => "10111110001111100010110001010110", 
    65 => "10111101100000000110110011100101", 
    66 => "00111110000011100101001100100010", 
    67 => "10111101001001001011101100000000", 
    68 => "00111101100101111110111101101000", 
    69 => "00111101000011001101111111000111", 
    70 => "10111110000100000111010011101011", 
    71 => "10111101000101101010111111011010", 
    72 => "10111110001011110000011010110011", 
    73 => "00111100011000011010100011111101", 
    74 => "10111101110111000001000001010010", 
    75 => "10111101111001010000101111011000", 
    76 => "00111110001100100111110111001100", 
    77 => "10111101001110001110100000101110", 
    78 => "00111011110111011011000110001100", 
    79 => "10111101011011110111010100111001", 
    80 => "00111100101010100110010011111001", 
    81 => "10111100111110111011101011000001", 
    82 => "10111011111100000010111110101000", 
    83 => "00111101111111010111001000110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_26 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_26 is
    component inference_mult_1_120_120_84_s_W4_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_26_rom_U :  component inference_mult_1_120_120_84_s_W4_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


