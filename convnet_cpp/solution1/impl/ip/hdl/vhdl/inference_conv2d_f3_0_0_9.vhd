-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101000000001011010001011", 
    1 => "10111101000001111110101001000101", 
    2 => "00111110000011110010000100101101", 
    3 => "00111101100011100110001100000101", 
    4 => "00111101110001000011111110001000", 
    5 => "00111101110011011100110010100111", 
    6 => "10111101111100011100011111011110", 
    7 => "10111110011001001000001101000101", 
    8 => "10111101111010101101110101011001", 
    9 => "00111101001011111000100011101111", 
    10 => "00111110010000111001111000101000", 
    11 => "10111100100000110101110101001101", 
    12 => "00111101000000101110010000110001", 
    13 => "00111110010100111000100110110101", 
    14 => "10111101110010001000100100111011", 
    15 => "00111110000101110001000111011000", 
    16 => "10111100111010001011100111111110", 
    17 => "10111101111110100010001011110111", 
    18 => "00111101100010101110100111100001", 
    19 => "00111100100011010001000110010110", 
    20 => "00111110000110110011110000111110", 
    21 => "00111101111011010110011111111101", 
    22 => "00111101111010101001100100110001", 
    23 => "00111101001111011001111010101100", 
    24 => "10111101100000000101111111010111", 
    25 => "10111100100001111111011101000101", 
    26 => "10111100010111000100110010011101", 
    27 => "00111100101010101100110100110011", 
    28 => "10111110011001100100111111011011", 
    29 => "10111101011110000001011011001000", 
    30 => "00111100100110111100001010011110", 
    31 => "00111100100010111010001011001011", 
    32 => "00111101000110110010101010010011", 
    33 => "00111100111100011011100001110100", 
    34 => "00111110000100011001011111100101", 
    35 => "10111110000101001110011100100101", 
    36 => "10111110000000110011011011011111", 
    37 => "00111101101111010001001100101001", 
    38 => "10111101111111011010011110110001", 
    39 => "10111101100110111101100001100000", 
    40 => "00111101011101101111011111001001", 
    41 => "10111101110011100110111000100010", 
    42 => "00111101111101011001111001100010", 
    43 => "00111100100100100110111100111001", 
    44 => "10111100101110010101010111000010", 
    45 => "00111100110111101111100111000000", 
    46 => "10111000100111001001010100001010", 
    47 => "10111101100100001101110010111010", 
    48 => "00111110010100010000100111010000", 
    49 => "10111110001011011000110000101010", 
    50 => "10111100111111101000001110010100", 
    51 => "00111101010111101111011111000010", 
    52 => "10111101101100111011100101111000", 
    53 => "10111110000000000001100111110100", 
    54 => "10111101110111010100111100010110", 
    55 => "10111011001000101101100110001001", 
    56 => "10111100000100111011101111111111", 
    57 => "00111101101111100000010001001000", 
    58 => "00111011110111110101001101111000", 
    59 => "00111110000010010010111101101111", 
    60 => "00111101101100110010001111010111", 
    61 => "00111110001011011001111001000001", 
    62 => "00111101001110111110001010110101", 
    63 => "00111101011100100101001010011000", 
    64 => "10111101100101110000001100101010", 
    65 => "10111101000101100001101011110100", 
    66 => "10111101011010010000100001010010", 
    67 => "10111101111011011011111100000101", 
    68 => "00111100101010001111101011001011", 
    69 => "00111110000000100101110000111110", 
    70 => "10111101110011100111011100001100", 
    71 => "10111110010100011010000100010010", 
    72 => "10111101110001100010101100110101", 
    73 => "00111101001001000111011100001101", 
    74 => "10111100111010011001101001100011", 
    75 => "00111011001100100110111001010010", 
    76 => "00111100000101101111111111101100", 
    77 => "00111101111011000000001011110011", 
    78 => "10111110000101001011000010011111", 
    79 => "10111101110000101100110101010101", 
    80 => "00111101111010101001101000111101", 
    81 => "10111100110100010000110000101100", 
    82 => "10111001000100000010111000100101", 
    83 => "10111101001111000011110101001101", 
    84 => "10111110010000001111101100100010", 
    85 => "00111101001010010010010100101000", 
    86 => "00111100010001000100000000110110", 
    87 => "10111101110111011011101000001010", 
    88 => "10111101101000001001100001011100", 
    89 => "00111110000001001110000111100111", 
    90 => "10111110000101001100111000111110", 
    91 => "00111101000101001011101001101100", 
    92 => "10111110000001111110111000001011", 
    93 => "10111101000110111100001110010000", 
    94 => "10111101001011100010010101000010", 
    95 => "00111100001001100011010001000111", 
    96 => "00111100000000111001011011101110", 
    97 => "10111110000011111000011010100001", 
    98 => "10111100100010000010011100010110", 
    99 => "10111101101111111000001000010001", 
    100 => "10111110001101000000100101011111", 
    101 => "00111101100010000011101010110010", 
    102 => "00111100001001011100100011100111", 
    103 => "00111101010000101001101101101011", 
    104 => "00111100010011010110110111011100", 
    105 => "10111101001100000101110101000101", 
    106 => "10111101011101000111010100111000", 
    107 => "10111101100100011001000111000011", 
    108 => "10111101010001100011011100011100", 
    109 => "00111110000010111101110010101101", 
    110 => "10111100011111010101011011011000", 
    111 => "00111110001010101001111011110101", 
    112 => "10111100010010000101111100010100", 
    113 => "00111101100101111000000111111101", 
    114 => "10111110000000000110100000010010", 
    115 => "00111101101111111101110000001001", 
    116 => "00111110000010000111011011100010", 
    117 => "00111101000011001101110110101111", 
    118 => "10111101100010110011100100001100", 
    119 => "10111110001000101000100100010010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_9 is
    component inference_conv2d_f3_0_0_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_9_rom_U :  component inference_conv2d_f3_0_0_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


