-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100010001010001000100011", 
    1 => "00111100001111110000010111001111", 
    2 => "00111101101001110111001110011111", 
    3 => "00111100110011110011111000101100", 
    4 => "10111100001000000100111011000000", 
    5 => "10111110001100011110010111000001", 
    6 => "00111110000110011000100011010011", 
    7 => "10111101100110100111011110010101", 
    8 => "00111011100000101110100000010010", 
    9 => "00111100000111110001110100110001", 
    10 => "00111011111011001111110001101101", 
    11 => "10111011110000101010000100001111", 
    12 => "10111110001111110110100110001000", 
    13 => "00111101100010111010111010010111", 
    14 => "00111100001110110111100000010001", 
    15 => "10111101100100100100100001101101", 
    16 => "00111101001111101011110011010100", 
    17 => "10111100101111110011100011000101", 
    18 => "00111110000100101001001011000101", 
    19 => "10111100000101011100001000010100", 
    20 => "10111101010111011001111001000001", 
    21 => "10111100100110011010101100110111", 
    22 => "10111110000110001101110000010010", 
    23 => "00111101101110011111111111100011", 
    24 => "10111101000001111100010101000001", 
    25 => "10111110000010111111101001001100", 
    26 => "10111101000111000000010101001111", 
    27 => "00111101111100101000111110011111", 
    28 => "00111101000110100010011101011110", 
    29 => "00111101111001101011011110101010", 
    30 => "10111101000011111100011000010001", 
    31 => "10111100101111010101111100111100", 
    32 => "00111101100011111111101010011010", 
    33 => "10111101010111110100111100000000", 
    34 => "10111110000110010100001010010001", 
    35 => "00111110000110101101001110100110", 
    36 => "00111110000010000001010110100000", 
    37 => "00111101111011110011000110110001", 
    38 => "10111101100100011111100100100111", 
    39 => "10111101100110001110010010010000", 
    40 => "10111101101000010001110110100010", 
    41 => "00111101010011001101011000111101", 
    42 => "00111110001110011100000001100110", 
    43 => "00111100111000000010010100111001", 
    44 => "10111010011011010110101101101101", 
    45 => "00111110000101011010110100010000", 
    46 => "00111110001110010101110001000010", 
    47 => "10111100000101001000110001010100", 
    48 => "10111101001010000001011011110000", 
    49 => "10111101100110111110110001001101", 
    50 => "10111101111010111011000100101001", 
    51 => "10111100100010111110100101000010", 
    52 => "00111100001100001110100110101101", 
    53 => "00111101101000001000001101010110", 
    54 => "10111101101011111001011110101011", 
    55 => "00111101010001101111010010110001", 
    56 => "00111001001110000101100110100011", 
    57 => "10111100011011111111111100000001", 
    58 => "10111101111110100101101000000100", 
    59 => "00111110000010110010001011010001", 
    60 => "00111011011110111101000011110001", 
    61 => "10111100101001110010111110111010", 
    62 => "10111100100110000100110111010101", 
    63 => "10111011110111101001001100011110", 
    64 => "10111110000100011100000100001101", 
    65 => "10111101101011001001101100001100", 
    66 => "00111101110101111111011100111000", 
    67 => "00111101010011110111011001111011", 
    68 => "10111100101000000010010101101111", 
    69 => "10111101011001000111011010000111", 
    70 => "00111100101101110100100100001101", 
    71 => "00111101010111100011110001111100", 
    72 => "10111101111011010110101010011100", 
    73 => "10111110010100100110101011101100", 
    74 => "00111101100101011101100110010100", 
    75 => "10111101111110110111011111000000", 
    76 => "00111101110111000100000110011010", 
    77 => "00111101110000110111100111000101", 
    78 => "00111100001110000111000111001100", 
    79 => "10111101100100001001010010001000", 
    80 => "10111101010110101110001000011110", 
    81 => "10111101111111010111110100111001", 
    82 => "10111101110001111100010100001011", 
    83 => "00111010000000010110000101110010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_11 is
    component inference_mult_1_120_120_84_s_W4_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_11_rom_U :  component inference_mult_1_120_120_84_s_W4_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


