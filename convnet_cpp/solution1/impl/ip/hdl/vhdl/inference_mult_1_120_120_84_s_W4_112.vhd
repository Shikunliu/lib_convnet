-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_112_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_112_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101000001010000101100000", 
    1 => "10111100011111111010010010010000", 
    2 => "00111101100010001010011001000111", 
    3 => "10111110001001111001110011000111", 
    4 => "00111100100000101110001110101010", 
    5 => "10111101101000010110110010001010", 
    6 => "10111110010100010011101101011100", 
    7 => "00111110000110101001110111101001", 
    8 => "00111100100000111010111100010111", 
    9 => "00111101110011110111101000001011", 
    10 => "10111100111101111111111100010101", 
    11 => "10111110000110010011101101111110", 
    12 => "10111101001010111111010101010001", 
    13 => "10111101000110001010000010010000", 
    14 => "00111100100101001010100011001111", 
    15 => "00111101010011100100100001111101", 
    16 => "10111100101011010101010110100100", 
    17 => "10111101001101101000000101001100", 
    18 => "00111110000100111011100111110001", 
    19 => "10111011010110001110110101101100", 
    20 => "10111101001011111111010000110100", 
    21 => "10111110000100001010001011001011", 
    22 => "10111101000101001111011011101101", 
    23 => "00111101000101010101000010010100", 
    24 => "10111110000100100011010000100010", 
    25 => "00111101001110100100110010011000", 
    26 => "10111101111101111010110111010001", 
    27 => "10111101110010000000111111011100", 
    28 => "10111100100010101110100010010001", 
    29 => "00111100111000011111111001011000", 
    30 => "00111100010001111001110101001110", 
    31 => "10111101100110000000110000111110", 
    32 => "10111110000000110000100001111000", 
    33 => "10111101001101110000010010101111", 
    34 => "10111101000101010000110111001001", 
    35 => "00111100001111011111100010001001", 
    36 => "10111101001101110111001100011001", 
    37 => "10111110000101001011111001000000", 
    38 => "10111110010100110010100001110100", 
    39 => "00111011011010110011100101110100", 
    40 => "10111101101101011100100000111001", 
    41 => "00111101100010100111100010010100", 
    42 => "00111101011101111101010110001111", 
    43 => "00111101101010000010110000011110", 
    44 => "00111100111111101011100111100101", 
    45 => "00111101111010110101110101000110", 
    46 => "00111101110100001111111110010111", 
    47 => "10111101001010010001110010101010", 
    48 => "00111101100011101110011100010110", 
    49 => "10111101000010101111000101111011", 
    50 => "10111101000110111101011000011111", 
    51 => "10111110001011111000101110011100", 
    52 => "00111100010110110010110011100010", 
    53 => "00111100110110101100110101000001", 
    54 => "00111101110011111011101100001110", 
    55 => "00111110001000000100010011110010", 
    56 => "00111101000010010111111001111111", 
    57 => "10111101110111001110110100001011", 
    58 => "00111101100011100011011110001110", 
    59 => "10111101001010101010101010011001", 
    60 => "10111101100010000101111010001110", 
    61 => "10111110000001000011110110001010", 
    62 => "10111110000100010100110100101111", 
    63 => "00111101110001101101011100010010", 
    64 => "10111100100001100000101100010010", 
    65 => "10111110001111111010001010101101", 
    66 => "10111100110111110001111011011111", 
    67 => "00111110001000001000110100001001", 
    68 => "10111100111011111011111100001010", 
    69 => "10111101010010000010101100010010", 
    70 => "10111110001010010000010111000000", 
    71 => "00111110000001101111001010100110", 
    72 => "00111101100010100111010001100011", 
    73 => "10111110000110010011110101010011", 
    74 => "00111101011111110101000011001000", 
    75 => "00111100111100100010111100100111", 
    76 => "00111101111101100110100101001001", 
    77 => "10111101110001010001110010111010", 
    78 => "00111101011001010110100000000100", 
    79 => "00111101100011001110001001100111", 
    80 => "10111101011010010100000101000010", 
    81 => "00111101010000110011010100001001", 
    82 => "00111101101111011010010001010110", 
    83 => "10111011110100101111111110000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_112 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_112 is
    component inference_mult_1_120_120_84_s_W4_112_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_112_rom_U :  component inference_mult_1_120_120_84_s_W4_112_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


