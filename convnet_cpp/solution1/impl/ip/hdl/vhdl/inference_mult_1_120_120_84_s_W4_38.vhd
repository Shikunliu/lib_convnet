-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_38_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_38_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001001010000001111000110", 
    1 => "00111110001011100001101110001111", 
    2 => "10111110001100110011101000000100", 
    3 => "10111100001000000111010111110111", 
    4 => "00111110000100110101000010001111", 
    5 => "10111100101100101101011010110111", 
    6 => "10111100011000101100000001010100", 
    7 => "10111101011111101011110010111001", 
    8 => "00111101010010010011000010010110", 
    9 => "00111101001110010001100001010000", 
    10 => "00111101111000100111011100111110", 
    11 => "00111101001010000000000110100111", 
    12 => "00111110000000110000000101100101", 
    13 => "00111100101011010001000100010000", 
    14 => "10111110100000110000111100101000", 
    15 => "00111101100010000001010011100101", 
    16 => "00111110011100010001110110111101", 
    17 => "00111101000111111100100010100011", 
    18 => "00111110000111101000001001010001", 
    19 => "00111101110111011011001000101101", 
    20 => "00111101000100100011111001011100", 
    21 => "10111110010000001001011010111100", 
    22 => "00111101000110011000001010111110", 
    23 => "10111101101101101100110111100101", 
    24 => "10111101110101010010010011000000", 
    25 => "10111101100110000010000011011001", 
    26 => "10111110011001010111110001001110", 
    27 => "10111101011011110010011100011010", 
    28 => "10111110010100001000001110011001", 
    29 => "10111100001000001111101100011000", 
    30 => "00111010001000110101001000101010", 
    31 => "00111101101011100100001000011000", 
    32 => "10111101011101010101011100010101", 
    33 => "10111101001111101110111111100101", 
    34 => "00111100110110101110011010100001", 
    35 => "00111110001000011101100111110101", 
    36 => "00111110001100110010010001000010", 
    37 => "00111101101001001001100100101111", 
    38 => "00111110001110001110000100001101", 
    39 => "10111100110101101101101111100101", 
    40 => "00111100100011110100101111001101", 
    41 => "00111110001100101010011110111101", 
    42 => "00111110001000111100011110010011", 
    43 => "10111011001001110100101100001000", 
    44 => "00111100110000001110001011101001", 
    45 => "00111100000101111000011110011100", 
    46 => "10111101001111011011010111110011", 
    47 => "10111101100100010111100010110011", 
    48 => "00111101011101111001110000011001", 
    49 => "00111110000101100100010110100010", 
    50 => "00111101100010110100100001110110", 
    51 => "00111101111000110111100010101011", 
    52 => "00111110010100111011100101101011", 
    53 => "10111101011010000111001001100000", 
    54 => "10111101010110110001111000110100", 
    55 => "00111100111101010000101101111011", 
    56 => "00111100010011011110111000110101", 
    57 => "10111110011010000111000001010100", 
    58 => "10111101100100001000100100110101", 
    59 => "00111110000001010110111110111001", 
    60 => "10111101110111111000011011100100", 
    61 => "10111101101100000100001111001010", 
    62 => "00111101101000000101000110111101", 
    63 => "00111110000000111011000011000100", 
    64 => "10111011100110110111101000011001", 
    65 => "10111101011110010100011011000011", 
    66 => "00111110000001111001001100010100", 
    67 => "10111101110110100101011101100100", 
    68 => "00111101000110110000101000010010", 
    69 => "10111101010010001111000010011111", 
    70 => "10111100100101011110001111001101", 
    71 => "10111101100011010110100001101001", 
    72 => "00111110001000011011011101011010", 
    73 => "00111101101111000000000011110101", 
    74 => "10111110000001111000110101010000", 
    75 => "00111100110000101101111011011000", 
    76 => "10111101100001110011111010011110", 
    77 => "00111110010100010001011101110010", 
    78 => "10111011000100111111111101111100", 
    79 => "10111110010011011101001100110101", 
    80 => "00111110000111110010110100111100", 
    81 => "10111100001110000011110000011100", 
    82 => "10111101111011011110011001011000", 
    83 => "00111110100011100011110010111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_38 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_38 is
    component inference_mult_1_120_120_84_s_W4_38_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_38_rom_U :  component inference_mult_1_120_120_84_s_W4_38_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


