-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100101110000001101000100011", 
    1 => "10111110001010001010100100110111", 
    2 => "00111101000110011101101100111110", 
    3 => "10111101011011100010011111111100", 
    4 => "10111110000110000010100000111101", 
    5 => "10111101100101100001010010101010", 
    6 => "10111101100110111110110110000001", 
    7 => "00111100001100111001010011101101", 
    8 => "10111101100101101010101100110000", 
    9 => "00111110001111000100011101011110", 
    10 => "10111101110100110000101101011011", 
    11 => "10111101101000111101100101001011", 
    12 => "00111101001101010110001101011001", 
    13 => "00111100111000000000011011010001", 
    14 => "10111110000011010011000110111010", 
    15 => "00111101110110111001100101001110", 
    16 => "10111110010100010000101100100000", 
    17 => "10111101100101000010101110101001", 
    18 => "00111100110111101101100001101000", 
    19 => "00111100101101111100101101001000", 
    20 => "00111101100011101110001111111110", 
    21 => "00111110000000001111011100110100", 
    22 => "10111101110010101111001001101101", 
    23 => "00111101101100110010001101010000", 
    24 => "00111100010011010000111111101001", 
    25 => "10111100011010010011000001000101", 
    26 => "10111101110111100001010010111110", 
    27 => "10111101011000100101010010001001", 
    28 => "00111101010011000111101100111001", 
    29 => "00111101110001110000000011001110", 
    30 => "00111110010001100001110110000110", 
    31 => "00111110000100100001111001100000", 
    32 => "00111101101110100011111101111100", 
    33 => "10111110000011011101000101011111", 
    34 => "00111101011010001010000010111000", 
    35 => "00111101011111101011001011000011", 
    36 => "00111110010001011000010101111011", 
    37 => "00111110001100111111100001010101", 
    38 => "10111101101000111101010101000010", 
    39 => "00111101101101011001001010110001", 
    40 => "00111110000001001001000010100011", 
    41 => "10111110000110011000010000011011", 
    42 => "10111100101011011101111111010111", 
    43 => "10111101000010101101110100001001", 
    44 => "00111101000111011100101111000011", 
    45 => "10111101111011101011110001000001", 
    46 => "00111101010100111011001001001010", 
    47 => "10111110000010000010001010111100", 
    48 => "10111110000000110011111101000010", 
    49 => "00111101100011101011101011110001", 
    50 => "10111101100000100100101001011101", 
    51 => "00111101100100000100000000111010", 
    52 => "00111101001010010111010101000100", 
    53 => "10111110000011000000100011111010", 
    54 => "00111101000011101010111000011001", 
    55 => "10111101000001111100000010001001", 
    56 => "00111101000011001010111010110101", 
    57 => "10111100101111011111010100101110", 
    58 => "00111101001110101101000000010101", 
    59 => "00111101100000101011001111110101", 
    60 => "10111110000110000001001101000101", 
    61 => "10111101100000100110000010110011", 
    62 => "00111101110100101000000101110111", 
    63 => "00111110001010001000001101110111", 
    64 => "10111101001100100111011110110111", 
    65 => "10111110001011110100011000100100", 
    66 => "00111110001001111001001000001000", 
    67 => "10111110000000100100101011110001", 
    68 => "00111101011000011111010101010011", 
    69 => "00111101010011011000111011001001", 
    70 => "10111100111100101000100001111110", 
    71 => "10111110001000100011001001001101", 
    72 => "00111101011000110011111100110101", 
    73 => "10111101111000110100001100110001", 
    74 => "10111100101011101011010100011111", 
    75 => "00111101110100010110010101001101", 
    76 => "10111110000100000010011011001100", 
    77 => "10111101100010010011011000111111", 
    78 => "00111110000011100110000000111101", 
    79 => "00111100001100011010000101100011", 
    80 => "10111100111110100001001100100001", 
    81 => "00111011101101000100110011111001", 
    82 => "10111100011101011011010111111010", 
    83 => "00111101100011101110100001110011", 
    84 => "10111100101011110001001110110100", 
    85 => "00111100011000110001011111111101", 
    86 => "10111100100001000101010000100011", 
    87 => "00111101111010111000000111111001", 
    88 => "00111101001111101101100110001111", 
    89 => "10111110001110001000010111010011", 
    90 => "00111100111111010001001001000101", 
    91 => "00111100110000010110001100001100", 
    92 => "10111101101000111101001011100110", 
    93 => "00111100111000011001011000011101", 
    94 => "00111101001001110001011000001001", 
    95 => "00111100010010111101011111011010", 
    96 => "00111101100011010100111101100110", 
    97 => "10111100110110100010101110010000", 
    98 => "00111101110000011101101001010011", 
    99 => "10111100101011101000110111101000", 
    100 => "00111101011111111001000000000011", 
    101 => "10111101101011010100101111100011", 
    102 => "00111011011010111010011110101110", 
    103 => "10111101110110000110101010010000", 
    104 => "00111011011011000011101111111110", 
    105 => "00111110001000010111010101001011", 
    106 => "00111011100001010011000110011000", 
    107 => "10111100111101001110001101101100", 
    108 => "10111100100010111011101110001011", 
    109 => "00111100000010110001000111000001", 
    110 => "10111101011110101000110111010000", 
    111 => "10111101111100001010000100111000", 
    112 => "00111101000010101110011001111000", 
    113 => "00111100110111100100101101000101", 
    114 => "10111010100110000110010000001111", 
    115 => "00111101100011100110111111101010", 
    116 => "00111110001000100011011001111110", 
    117 => "00111101100100100011010010110110", 
    118 => "00111101010001000001001010110100", 
    119 => "00111101101111011011110011101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_0 is
    component inference_conv2d_f3_1_0_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_0_rom_U :  component inference_conv2d_f3_1_0_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


