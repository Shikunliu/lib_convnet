-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110000111000111110100010", 
    1 => "10111100100100011101000101001110", 
    2 => "10111101001011011011001011110110", 
    3 => "00111101001000110100100110010110", 
    4 => "10111101000010101001010101010000", 
    5 => "10111110011100001001010010100011", 
    6 => "10111101100010001011111101010111", 
    7 => "10111101111000000100100011100000", 
    8 => "10111101011000000111111111101101", 
    9 => "10111100111011100001001100111001", 
    10 => "00111100110111011000010111101101", 
    11 => "10111100110001011100011111110110", 
    12 => "00111100010100101000011111111000", 
    13 => "00111101011001011010000101111010", 
    14 => "10111011000000100101101010001110", 
    15 => "00111110010010110100001010001001", 
    16 => "00111100011111110100101001100011", 
    17 => "00111101111111110010000110110100", 
    18 => "10111110001011100110101101000000", 
    19 => "00111110000011100111000011000001", 
    20 => "10111100110000000101001110101101", 
    21 => "10111101000110010000110011100010", 
    22 => "10111100000100000100010110111110", 
    23 => "00111101011100111000111101000100", 
    24 => "10111101101101110111101010100110", 
    25 => "00111101000000001011001000100111", 
    26 => "00111101100010110111101111001010", 
    27 => "10111100110011100101101110101110", 
    28 => "00111110011111101100110010000001", 
    29 => "00111101000001101001011111100101", 
    30 => "00111110011110110111111001001110", 
    31 => "10111110010110100111000011010010", 
    32 => "00111101100111011100111001100010", 
    33 => "10111101100111111101000110100111", 
    34 => "00111110001100101111110001101001", 
    35 => "00111101111011100011110001010011", 
    36 => "00111101101011011100000010001011", 
    37 => "10111101101001110010101000000011", 
    38 => "00111101100101110001110010100100", 
    39 => "10111101111001100000100000000111", 
    40 => "10111101001010011100100010000110", 
    41 => "00111110011011111101110110101001", 
    42 => "10111101000000001111011101110111", 
    43 => "10111101000110110110101010100101", 
    44 => "00111101101001111011001010110010", 
    45 => "10111110001101111001101001101011", 
    46 => "10111101111101001101011000011011", 
    47 => "10111110000100000110000101000001", 
    48 => "00111101110111100000100100110101", 
    49 => "00111011100010010100001101100000", 
    50 => "10111101001110110111111001011011", 
    51 => "00111110001010001000000110100001", 
    52 => "00111100000111101000001101011001", 
    53 => "10111101000111110111100111111110", 
    54 => "00111101110011100110010010110010", 
    55 => "00111110001000111110010001101001", 
    56 => "10111110010111110011000110110001", 
    57 => "00111110000001110100011000000010", 
    58 => "00111110001011110001011001101110", 
    59 => "10111101010010110010000011111011", 
    60 => "10111101101011110001101101011100", 
    61 => "00111101100011010111101111000001", 
    62 => "00111101111111011010011010100100", 
    63 => "10111101100000110101100101111001", 
    64 => "10111100001111011001101111010111", 
    65 => "00111110000101000010101110110110", 
    66 => "10111110000110101000011111100100", 
    67 => "10111101010000001110001111110110", 
    68 => "10111101101001001100100010100010", 
    69 => "00111100101000110110010111001011", 
    70 => "00111110000111000100101101001101", 
    71 => "10111101100011011110000100100111", 
    72 => "10111110011001101011011111101101", 
    73 => "00111011100000100110001010011011", 
    74 => "10111110000100001101000010101011", 
    75 => "00111101010101111011001110110001", 
    76 => "10111101001011101010011101001000", 
    77 => "00111101100010110101111001100000", 
    78 => "00111101001011101111001010101100", 
    79 => "10111101101010000111011101110110", 
    80 => "00111100110101001101100101000000", 
    81 => "10111110000011000000001100110110", 
    82 => "00111110001101011111001001000101", 
    83 => "10111110000111111100000000001001", 
    84 => "10111100110111100110100110101101", 
    85 => "10111100010110011001101101111101", 
    86 => "10111011110101001110110111101110", 
    87 => "10111110000001101011011111101101", 
    88 => "10111110000010001101011111100000", 
    89 => "00111101000111100111011001011101", 
    90 => "10111101010101100110100101001001", 
    91 => "10111110000000000000011000001000", 
    92 => "00111110000110100000001100111110", 
    93 => "10111101000110100011110010100111", 
    94 => "00111101111001110111000101000011", 
    95 => "10111101101100110001001011011010", 
    96 => "10111100100000100110011001000001", 
    97 => "10111100010010101001011010010010", 
    98 => "10111101000111110010011010111100", 
    99 => "10111100101110100011000111000000", 
    100 => "10111101110110101111001110100001", 
    101 => "10111101000101000111101000100101", 
    102 => "10111101100100101001111011100001", 
    103 => "00111101000011111011110010111100", 
    104 => "00111110000111101111111010010011", 
    105 => "00111101100010101000101101001100", 
    106 => "10111110100100000100101100111100", 
    107 => "10111101100011010110000010110100", 
    108 => "10111100101110100010110111000100", 
    109 => "10111101111101001110010001000011", 
    110 => "00111101100010011110001100101000", 
    111 => "10111101000010010000101101011100", 
    112 => "00111101000000000110100001010101", 
    113 => "00111110001100000010000010000001", 
    114 => "00111100111010110011001001111110", 
    115 => "10111010101101011011011110000111", 
    116 => "00111101100001111110111011111101", 
    117 => "10111101100011010010100111011100", 
    118 => "00111101110001001000100001110110", 
    119 => "10111101011111001001110010011110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_8 is
    component inference_conv2d_f3_1_0_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_8_rom_U :  component inference_conv2d_f3_1_0_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


