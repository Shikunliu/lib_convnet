-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011001000110000001101", 
    1 => "10111100111011110110111000010111", 
    2 => "00111101100001010001111001000000", 
    3 => "10111110001001011110010000011101", 
    4 => "10111110010001100100111100010010", 
    5 => "00111100111010110000101101111100", 
    6 => "10111101111011001110011001111101", 
    7 => "00111110000001000000001000001000", 
    8 => "00111011101110000100011111110000", 
    9 => "10111101100010111110111110011010", 
    10 => "00111101010000011001100101000010", 
    11 => "10111110000011010011111101011011", 
    12 => "10111101101100011011100100111110", 
    13 => "10111011101101001110100111000010", 
    14 => "10111100001101000110011010100100", 
    15 => "10111100110110010011100111000011", 
    16 => "10111101011001110100111000111101", 
    17 => "10111101101110001001101101011111", 
    18 => "00111101101101001011110011100011", 
    19 => "10111101101001110111111001111010", 
    20 => "00111100011010100110110101011100", 
    21 => "10111100011110011001111010111101", 
    22 => "10111101011000101011000010011010", 
    23 => "10111110001100010001101000010001", 
    24 => "10111101010101010010100111001000", 
    25 => "10111101101100101111101111100011", 
    26 => "00111110000001111100100111011110", 
    27 => "00111101100011000001000010100010", 
    28 => "10111100100111010010011010000001", 
    29 => "00111100000000011010101011010000", 
    30 => "00111101111000000011101000110010", 
    31 => "10111101101111011011010100000010", 
    32 => "10111100100101011010111111001010", 
    33 => "00111101110101100100010000001111", 
    34 => "10111101001110110111110101101010", 
    35 => "00111100111110100110100110111110", 
    36 => "10111101101100101100001100110110", 
    37 => "10111101101111001110100001101110", 
    38 => "10111011111111100111001011100010", 
    39 => "10111100001111010001010110100000", 
    40 => "10111101111111101010000010111010", 
    41 => "10111110011100101011101011100000", 
    42 => "00111101101011011011001101111101", 
    43 => "10111101000011011001100011011010", 
    44 => "00111101010110111001001101101111", 
    45 => "00111110000000101111100100000001", 
    46 => "10111101101110100101001000100110", 
    47 => "00111101100110110101110000010001", 
    48 => "10111101110111100011101110001010", 
    49 => "00111001110010000000111111100000", 
    50 => "10111101010000010011000001001100", 
    51 => "00111101111110011101011001101011", 
    52 => "00111101110010001010110001110111", 
    53 => "00111110011001111011110101001001", 
    54 => "10111101000010011110100101110011", 
    55 => "00111101011000001111111001111101", 
    56 => "10111101110111010000111100011111", 
    57 => "10111110001101010101110110100010", 
    58 => "10111110000100011101110111100011", 
    59 => "10111101110101101100110001100000", 
    60 => "00111110000100100001111001100000", 
    61 => "10111101101010011110111111110011", 
    62 => "00111110010011011100101110011011", 
    63 => "00111101001111000001111111110001", 
    64 => "00111101100111001110100101100000", 
    65 => "00111110000010011001100001001010", 
    66 => "10111101001010110001010110101000", 
    67 => "10111100110010111111110101100100", 
    68 => "10111001000101111101001100001010", 
    69 => "10111101100111000010100001111101", 
    70 => "00111101100011000101011101000001", 
    71 => "00111101110010101111000000000011", 
    72 => "10111110000011111011101101010001", 
    73 => "10111101100010000101011010111110", 
    74 => "00111100101100110110001011001110", 
    75 => "00111110010000000100111101101110", 
    76 => "00111101001110110101011100111111", 
    77 => "10111101010000101101010110111000", 
    78 => "10111110000011100110111010101000", 
    79 => "10111100100010001010101100110101", 
    80 => "00111110001001001110011101101000", 
    81 => "10111100011011010110001101000101", 
    82 => "00111100101110110111011100000100", 
    83 => "10111110000000011101011000000110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_14 is
    component inference_mult_1_120_120_84_s_W4_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_14_rom_U :  component inference_mult_1_120_120_84_s_W4_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


