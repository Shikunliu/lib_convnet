-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110111101001001100110", 
    1 => "10111101110100100011101110111100", 
    2 => "00111101100000001010100111111001", 
    3 => "00111101110100100110100001001101", 
    4 => "10111101101001110001011010010000", 
    5 => "10111100001101010101100100010011", 
    6 => "10111101000001110101000110011000", 
    7 => "10111101111010110100001110010110", 
    8 => "00111101001001010011101110001110", 
    9 => "10111100011111000100111100000110", 
    10 => "00111100110101101110111100110000", 
    11 => "00111011100110001011101000110110", 
    12 => "10111110001001001010110010110000", 
    13 => "00111110000011101111011000110000", 
    14 => "10111101010010011000101000111101", 
    15 => "10111110000001111000110110010011", 
    16 => "10111100000010000110110010010110", 
    17 => "00111101001101111110111001101001", 
    18 => "10111100100111110101101011011001", 
    19 => "00111100111010101010000110010100", 
    20 => "00111101000100010011010001110000", 
    21 => "00111100110111000111000011100100", 
    22 => "00111001101010000010110011000001", 
    23 => "00111101111101010101001001011101", 
    24 => "00111101101000101010000111101011", 
    25 => "00111100110101100011010001010101", 
    26 => "00111100111001001111010010101100", 
    27 => "00111101001100000011101001110101", 
    28 => "00111101100100010101100010101011", 
    29 => "00111101101110111000000110001110", 
    30 => "10111101101001010011111111110110", 
    31 => "10111101100111111010011010011100", 
    32 => "00111101101010010001111111001111", 
    33 => "00111101111011110011110100111010", 
    34 => "00111101011110100001110101101000", 
    35 => "10111110000101101110110111101110", 
    36 => "10111101100101111010111101010111", 
    37 => "10111100100011101111010011000101", 
    38 => "10111101011111100000001000010100", 
    39 => "00111101100111000110111101101101", 
    40 => "00111101111010100011100000110010", 
    41 => "10111110000010100001000010011101", 
    42 => "00111100101110111100111010101101", 
    43 => "00111101000010100110111111111011", 
    44 => "00111100110011111010010110001111", 
    45 => "10111101011111111001110111011010", 
    46 => "00111100011111111011111101101000", 
    47 => "00111110010011000101100000100101", 
    48 => "00111101100010100001001010011011", 
    49 => "10111101001001110001000000001111", 
    50 => "10111110000000011010011011010111", 
    51 => "00111101100110100001110111100001", 
    52 => "00111101000000111010000111100001", 
    53 => "00111010111101010110110010101001", 
    54 => "00111110001001010011001101101110", 
    55 => "00111101100010001010100110000111", 
    56 => "00111101101111110101000001011101", 
    57 => "00111101111111001101011100000110", 
    58 => "00111101110011101100001000000101", 
    59 => "00111110000011111000111110001010", 
    60 => "10111110001010011110100010000001", 
    61 => "00111100000100101110001001110000", 
    62 => "00111101010001100111011110011001", 
    63 => "10111101110110000111001011110011", 
    64 => "10111101101010000001010111100100", 
    65 => "10111101010010011010010000100011", 
    66 => "00111101000011100111000000000101", 
    67 => "10111101111010111010001001111011", 
    68 => "10111100111000110111110101001000", 
    69 => "00111110001100100010101011110101", 
    70 => "10111101111001110110110000000101", 
    71 => "00111100100000111001110010100010", 
    72 => "00111110000010101011110011011000", 
    73 => "00111100011111100110110011101101", 
    74 => "00111101110010000100000010101100", 
    75 => "10111101111100110101110010011110", 
    76 => "00111110001111111100111000110001", 
    77 => "00111101011111011100011100001011", 
    78 => "00111101000010010000011100010000", 
    79 => "00111101110101101110101101001111", 
    80 => "10111001000011110001101111001101", 
    81 => "00111001010011100101001010110100", 
    82 => "10111100100110111011111110101111", 
    83 => "10111101110000011101110001101100", 
    84 => "00111101100100001010011110101011", 
    85 => "10111101110011100000000100010101", 
    86 => "00111110000011110001100001000100", 
    87 => "10111101010011001101010010101010", 
    88 => "10111100111111100111010000001111", 
    89 => "10111110000011000101000101010101", 
    90 => "00111101011111010110110101100100", 
    91 => "00111101100001111010010110010110", 
    92 => "00111110001110101110110010001101", 
    93 => "10111100010101010000000001111000", 
    94 => "10111101111010001001011011011101", 
    95 => "10111101011111011100111001111101", 
    96 => "00111101111100100100000011111011", 
    97 => "10111101101001110101100011110000", 
    98 => "10111100100110010100011011000011", 
    99 => "00111101001000001100011100000101", 
    100 => "00111101101111110111000111000011", 
    101 => "10111110000001100111010111011110", 
    102 => "10111110001110000101101111100010", 
    103 => "10111110000100011101111010101101", 
    104 => "00111101001000101000001001011100", 
    105 => "00111110010100101010101110101100", 
    106 => "10111101111111101011110110010000", 
    107 => "10111101110110101001111000101100", 
    108 => "00111101101000001000011001101101", 
    109 => "00111101100001001111010001000001", 
    110 => "00111101110101111110101100101001", 
    111 => "00111101100101110001010010111010", 
    112 => "00111101010010010111111000010011", 
    113 => "00111101010101100000110001111100", 
    114 => "00111101011011101101010100011010", 
    115 => "00111101101111111110010010000111", 
    116 => "00111101000000001111110111000001", 
    117 => "00111110010100100100000001110100", 
    118 => "10111101110000010111100001010101", 
    119 => "10111110001011011100010100001101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_3 is
    component inference_conv2d_f3_2_1_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_3_rom_U :  component inference_conv2d_f3_2_1_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


