-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111111111000000111110110", 
    1 => "10111101101100101111010100111011", 
    2 => "00111101101110111010100010011101", 
    3 => "10111101111010000110100101000000", 
    4 => "10111110001000101000100011001110", 
    5 => "00111101100111111010011110110110", 
    6 => "00111110000010110000011000111110", 
    7 => "10111110010001101101110011100100", 
    8 => "00111101111000001111011101110111", 
    9 => "10111101001111010100110001000001", 
    10 => "00111101101100000001100110110001", 
    11 => "00111100111010111001111001111111", 
    12 => "10111101011101110100110111100000", 
    13 => "10111101001010001001010001110100", 
    14 => "10111101110000111011001101010110", 
    15 => "10111100001000000100101111000101", 
    16 => "00111101000010101101100110010011", 
    17 => "10111001000011101000111001010110", 
    18 => "00111101010100100101111111001111", 
    19 => "10111100101100010000100000010101", 
    20 => "10111101100000111011011000111000", 
    21 => "00111101000110101000111011110111", 
    22 => "00111101101101100101010010000110", 
    23 => "10111011011101100011110110110100", 
    24 => "10111101001100100010100011000010", 
    25 => "00111101010010110001001110001111", 
    26 => "10111100100111011111100111100110", 
    27 => "00111101100101011001011011111110", 
    28 => "10111100000010100001100011101000", 
    29 => "10111100110111010001111111001011", 
    30 => "00111101111010001011101110010000", 
    31 => "00111101110001000000100010111110", 
    32 => "00111110001000000100000111001100", 
    33 => "00111011101000011001010110010001", 
    34 => "00111101111011001001111100110000", 
    35 => "00111011110100111100101100011001", 
    36 => "10111110000110011111011100101111", 
    37 => "10111101011100110101101101000001", 
    38 => "00111110000001111111110001110110", 
    39 => "00111101101110001110110000111000", 
    40 => "00111101011010011001001111100011", 
    41 => "10111110000100110100011111101001", 
    42 => "00111100111011011000011000010101", 
    43 => "10111101001010000001000001110000", 
    44 => "10111110001010101001110011011100", 
    45 => "00111101100100000111000110111000", 
    46 => "00111101100010011100010001111101", 
    47 => "00111101011011111010100101110001", 
    48 => "10111110000110100111010111001101", 
    49 => "10111101011010010100000010100001", 
    50 => "00111101001111011111010111001111", 
    51 => "10111101101110001100011100011001", 
    52 => "10111110010010100100001101111000", 
    53 => "00111101100001000101100101100001", 
    54 => "00111100111001101000100001100000", 
    55 => "10111101011101010011010101101100", 
    56 => "10111101100000101001011111110101", 
    57 => "00111110000100011100100001100101", 
    58 => "00111100001100100111110110010110", 
    59 => "00111011001000111111101111001000", 
    60 => "10111100011001000111111111011100", 
    61 => "00111101100101110000011010000100", 
    62 => "00111100110011100001011011100100", 
    63 => "00111101000110000100101101010000", 
    64 => "10111101101101010000010010011100", 
    65 => "10111110001110000010110011110101", 
    66 => "00111100111011101111000100011010", 
    67 => "10111101010101100100101011000101", 
    68 => "00111011111011110101111011011110", 
    69 => "00111101100011101101011111100010", 
    70 => "00111101100000001000101011111101", 
    71 => "10111100001110100001011001111100", 
    72 => "00111101000000111001100101100010", 
    73 => "10111101101110101100001010011100", 
    74 => "00111101100001011110101000001010", 
    75 => "10111101110111101011011101000101", 
    76 => "00111101110010101111101010101000", 
    77 => "10111101110110101110111111110110", 
    78 => "10111100110011000010010100000111", 
    79 => "10111011010010111111101011000000", 
    80 => "10111101111011000100010001111100", 
    81 => "10111101001100111101101100010100", 
    82 => "00111100111010011110100011010010", 
    83 => "10111100010101101101001001110101", 
    84 => "10111100111100000101011010101010", 
    85 => "00111101010000111100001110111111", 
    86 => "00111101001010110110110001100000", 
    87 => "10111101110110110111111100010111", 
    88 => "00111101001100000011010011001100", 
    89 => "10111101101000100100100001010010", 
    90 => "10111101100100100011100100000011", 
    91 => "10111100110101010100000000000011", 
    92 => "10111010100101011110010010000011", 
    93 => "00111100101110011001001100110100", 
    94 => "00111011010100110101010011111100", 
    95 => "10111110010010111101010010001101", 
    96 => "10111100100100001110111011010000", 
    97 => "10111101011001000100110110100010", 
    98 => "10111100000011000010000111010111", 
    99 => "10111101111110011100010100011110", 
    100 => "10111101111110000000111111011100", 
    101 => "10111101110000111001110010100010", 
    102 => "00111101000000100010100011001111", 
    103 => "10111100001000001101110001000100", 
    104 => "00111101001011010001110001100011", 
    105 => "00111101100101011111111110100100", 
    106 => "00111101101000010001010100001001", 
    107 => "10111110000010001111000111010100", 
    108 => "10111100101100010110010101101000", 
    109 => "10111101100010111111011100100111", 
    110 => "00111101101100011100101001111101", 
    111 => "00111110001010100100100001110011", 
    112 => "00111011100000010110100000110101", 
    113 => "00111101010010000100001111101100", 
    114 => "00111101100001000110000010111000", 
    115 => "10111110000000111011110011010011", 
    116 => "00111101111101011001110011010000", 
    117 => "10111100001000111010011011101110", 
    118 => "10111101101010101001100110110111", 
    119 => "10111101100001000010000010001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_8 is
    component inference_conv2d_f3_3_3_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_8_rom_U :  component inference_conv2d_f3_3_3_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


