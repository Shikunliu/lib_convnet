-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_113_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_113_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110001100110111000001110", 
    1 => "00111110001011001001011010001001", 
    2 => "10111110001110000010110101111011", 
    3 => "10111110000011001000101010111101", 
    4 => "10111101010000100011010011011110", 
    5 => "00111110000100000000101000111001", 
    6 => "00111100110011110010001001111101", 
    7 => "00111101110110111001010100011100", 
    8 => "10111101011010100100010001011100", 
    9 => "10111101000101000100100111101001", 
    10 => "10111100101011000101001100001111", 
    11 => "10111101110011110101000010100000", 
    12 => "10111110000100110001001010110010", 
    13 => "00111101110101001010101000010001", 
    14 => "00111101100011011101000000011101", 
    15 => "10111101110101100110101111101000", 
    16 => "00111100010000101100111111110100", 
    17 => "00111100110100100000101000100011", 
    18 => "10111101101011111000111110001010", 
    19 => "00111101100100100101000110001100", 
    20 => "10111100101000010111101101000101", 
    21 => "00111101010000111010110001000010", 
    22 => "00111101011111111101111011000011", 
    23 => "00111110000000101000100010001011", 
    24 => "00111101111111000100000100010100", 
    25 => "00111101100111100110100011010111", 
    26 => "10111110000000010111100000101101", 
    27 => "10111101001100011000101101111000", 
    28 => "00111100010111010110010011001011", 
    29 => "00111100111100000011111110011001", 
    30 => "10111101010010100001011011110101", 
    31 => "10111101000010010100001111100001", 
    32 => "10111110000100110101110001011011", 
    33 => "00111100001011101011100110111100", 
    34 => "00111110000010000111001000101010", 
    35 => "00111101001001001000101001110100", 
    36 => "00111100101101100011111010000000", 
    37 => "00111101100101011010111110110000", 
    38 => "10111110000010001001101000000010", 
    39 => "10111101100110001000001001000010", 
    40 => "00111101100000111100011000000000", 
    41 => "00111110000100010111011111101010", 
    42 => "00111101101001001111010010101100", 
    43 => "10111100101011101111000100011010", 
    44 => "10111100111111100010010101101010", 
    45 => "00111100011101001110111100101011", 
    46 => "10111100101001111001101111110001", 
    47 => "00111101100000000101110001101111", 
    48 => "00111101100010011100101010011111", 
    49 => "00111101101110011001111010010101", 
    50 => "00111101100101101101100011101000", 
    51 => "10111101110011011111101111010111", 
    52 => "00111101011111111111001010101111", 
    53 => "00111110001110000111100000110001", 
    54 => "00111100101010100101101010110010", 
    55 => "00111101010011110111000011010001", 
    56 => "00111101110100111100010001101110", 
    57 => "10111110000110100010001011110111", 
    58 => "10111101100000011100001110000100", 
    59 => "10111100101001111000000110111010", 
    60 => "10111110001000101101000011100101", 
    61 => "10111101100111011100001111011000", 
    62 => "10111110000011111000000011011100", 
    63 => "10111101011011001000111001101001", 
    64 => "10111101111100110111011101011100", 
    65 => "10111110000101001010101011011010", 
    66 => "10111110000001101001011100101001", 
    67 => "10111110000101110100110000001010", 
    68 => "10111101111110000010010011010101", 
    69 => "00111101101111011110010111011111", 
    70 => "00111101110001010011100111111100", 
    71 => "10111101011111100001111100111010", 
    72 => "00111110000010110111111001001110", 
    73 => "10111101000111101110101010001100", 
    74 => "00111101111011001011110100010010", 
    75 => "00111101100001010111011101000110", 
    76 => "00111101111000111101100100100011", 
    77 => "10111101101001010011101001011010", 
    78 => "10111101101101101011000110001000", 
    79 => "10111101110100100000101001110100", 
    80 => "10111100110101110110110101101111", 
    81 => "10111101101101110100101010010010", 
    82 => "00111110001100010001000110101110", 
    83 => "00111101101001101000011100010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_113 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_113 is
    component inference_mult_1_120_120_84_s_W4_113_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_113_rom_U :  component inference_mult_1_120_120_84_s_W4_113_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


