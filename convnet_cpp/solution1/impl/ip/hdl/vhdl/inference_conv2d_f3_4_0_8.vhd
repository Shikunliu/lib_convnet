-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100001111100010000011", 
    1 => "10111101010111011001100011001101", 
    2 => "10111101010111111111111110010101", 
    3 => "10111101100111111111001111010110", 
    4 => "00111101101101000000100110010101", 
    5 => "10111110010000110101101011001001", 
    6 => "00111101111011100101111011101110", 
    7 => "00111101111100100010000001111001", 
    8 => "10111110000010101001100011101110", 
    9 => "10111101101111100000001101010110", 
    10 => "10111011111011111001100100010101", 
    11 => "00111101100101100101101100100001", 
    12 => "10111011001110001100010000101100", 
    13 => "10111110000100000111100000010000", 
    14 => "00111110000000010100001000101101", 
    15 => "10111101110101011000011001000100", 
    16 => "10111101000111011011010110001000", 
    17 => "10111101100011011011001101010100", 
    18 => "10111101000100110010001000011100", 
    19 => "00111110000011110101011111110111", 
    20 => "10111101001000111001100111101000", 
    21 => "10111101001011101011010000010011", 
    22 => "10111110001011100011010000110011", 
    23 => "10111100101110110100000001001000", 
    24 => "10111100001000000001100110010000", 
    25 => "10111110001100010000010101011100", 
    26 => "10111101100101001000111011011011", 
    27 => "00111101010011100100110100000000", 
    28 => "10111101000001010111010001111110", 
    29 => "10111010000110101010101010000000", 
    30 => "10111110001101101101001011101101", 
    31 => "00111101100000110010001011001010", 
    32 => "00111101100001001101000100100000", 
    33 => "00111101000001011111001100101001", 
    34 => "00111110010010110110101101101110", 
    35 => "10111101110011010111110101111100", 
    36 => "00111101100010001000001101101010", 
    37 => "00111101011000001000101100001011", 
    38 => "10111110000000011010011111100011", 
    39 => "10111101111110100110001101110011", 
    40 => "00111101110101101101001000100100", 
    41 => "10111101000100000000001111101111", 
    42 => "00111101110100111111011101001001", 
    43 => "10111100111110110100011101101001", 
    44 => "00111101100110000110101011010011", 
    45 => "00111101110000101001001100100011", 
    46 => "00111101110111110000110000110101", 
    47 => "00111110010010010110111110101000", 
    48 => "00111100010110110010101011001001", 
    49 => "00111110000010010100100110100101", 
    50 => "00111100101110100110101011001010", 
    51 => "00111101010000000010100110100001", 
    52 => "10111110001110001010000000001010", 
    53 => "10111100110001110111111010101111", 
    54 => "10111110001000000010111110110110", 
    55 => "00111101100011111000000001100011", 
    56 => "00111110001001110000101011000100", 
    57 => "00111110000001011011110000000010", 
    58 => "00111110000010100111001010101000", 
    59 => "10111110000100101010001100000101", 
    60 => "10111101011111111001010111100010", 
    61 => "10111101000100010010010001100101", 
    62 => "00111100100100101010110110000010", 
    63 => "10111101010010101000010100001111", 
    64 => "00111101101010011101010110111100", 
    65 => "10111101101011010011010110110110", 
    66 => "10111100101011101010010011000100", 
    67 => "00111110001001100010010011011101", 
    68 => "00111011010100010011100101101110", 
    69 => "10111110001011100000100010101111", 
    70 => "00111101000010101101110100001001", 
    71 => "10111100101001000000100001010011", 
    72 => "00111100001000100001010010101000", 
    73 => "00111100111000101110100101101111", 
    74 => "10111101100111010010011100100011", 
    75 => "00111011010010100010111110111010", 
    76 => "10111101100001001111010011100010", 
    77 => "00111101000001101101010010011011", 
    78 => "00111110001100011011100100110000", 
    79 => "00111100100111111000100001011100", 
    80 => "00111100101010111110101101110110", 
    81 => "10111101011000000110000010010011", 
    82 => "00111101010101001100001001001010", 
    83 => "00111100100111010010010101110101", 
    84 => "10111101101010000001010101011101", 
    85 => "00111101111111110001101101101001", 
    86 => "10111101000110101111100101001011", 
    87 => "00111101100010010010000110111111", 
    88 => "10111101000011010000000011001111", 
    89 => "10111101010011101000101101001001", 
    90 => "10111011111011001110100011001100", 
    91 => "10111101101000000010011110110000", 
    92 => "00111101000001010000100011101001", 
    93 => "00111101110001101001110001100111", 
    94 => "10111101111111001101110011001010", 
    95 => "10111000011010011111101001000010", 
    96 => "00111101111110010010100111101101", 
    97 => "10111110001001000001111010011011", 
    98 => "00111101000111010010110100011101", 
    99 => "00111101000111000101101000001001", 
    100 => "10111101011111100110001011110111", 
    101 => "00111101111110100000010100010100", 
    102 => "10111101101111010110110000100010", 
    103 => "00111110000001101010010010000111", 
    104 => "10111101001101001011010101100100", 
    105 => "00111101001010000000111010001101", 
    106 => "10111100110010010010000000000101", 
    107 => "00111100100110000011110111100100", 
    108 => "00111101010101001110010001000011", 
    109 => "00111101000111111000010000101010", 
    110 => "10111101011011110100000010110000", 
    111 => "10111101001010100010010011001100", 
    112 => "10111101101101011101010000111010", 
    113 => "10111100010100011101001110011101", 
    114 => "00111100010011001011110000000110", 
    115 => "10111110000110000100101011011000", 
    116 => "00111101110001010110011100111011", 
    117 => "00111110000101000100001011001000", 
    118 => "00111110010001110100101111000111", 
    119 => "10111100010000011111111000111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_8 is
    component inference_conv2d_f3_4_0_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_8_rom_U :  component inference_conv2d_f3_4_0_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


