-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_104_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_104_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110111011011110001110", 
    1 => "10111101100010110001111011000111", 
    2 => "00111100101110001011011001100000", 
    3 => "10111101111001110110010010101110", 
    4 => "10111101001101110011100111110011", 
    5 => "10111100100111101110001000001110", 
    6 => "10111110010000100001100001011001", 
    7 => "00111110001001000100101100101011", 
    8 => "00111110001110110010111111101100", 
    9 => "00111110000110100101110011100110", 
    10 => "00111110000110010111110000111101", 
    11 => "00111110000100000000001111101111", 
    12 => "00111101010100010010011010110100", 
    13 => "00111101001001100111001111010010", 
    14 => "10111011111100110010001101001110", 
    15 => "10111100010011011001101001010010", 
    16 => "00111110000011001011110110011000", 
    17 => "10111101110111011011001100111001", 
    18 => "00111110000101111110011001110001", 
    19 => "00111110000111001010000000111100", 
    20 => "00111101111110000110100110000011", 
    21 => "10111101010001110000101111000011", 
    22 => "10111101100011000101011110111010", 
    23 => "00111101010111110001111011011111", 
    24 => "00111101100011110011011110000011", 
    25 => "00111101100010110010101111010101", 
    26 => "10111101100000100110100011101110", 
    27 => "00111101110001001110000000000100", 
    28 => "00111100011010011110110000101101", 
    29 => "10111101111011000011101100001100", 
    30 => "10111101101100001110100110000101", 
    31 => "00111101010001100010101000000001", 
    32 => "00111110001111110100101000010010", 
    33 => "10111101101100011010101010011101", 
    34 => "10111101111001000010101011101101", 
    35 => "10111101111110000110001010110010", 
    36 => "00111101001110100110001110101001", 
    37 => "10111100001011110101000001010000", 
    38 => "00111101011010111101110000001100", 
    39 => "00111101101110010101010001110010", 
    40 => "10111100110010110011110011100000", 
    41 => "10111101101000000111010001001001", 
    42 => "00111101010100101100110011110111", 
    43 => "00111110010010101001101000111101", 
    44 => "00111110000100010110010010000100", 
    45 => "00111110000010000010011110110111", 
    46 => "00111101010100000010110010111001", 
    47 => "00111101110110100010001001110000", 
    48 => "10111100100010111011111000001111", 
    49 => "00111101100000001100000001011100", 
    50 => "10111110001001010000110001011111", 
    51 => "10111100010101011000111101111111", 
    52 => "00111100001001000011110010001011", 
    53 => "00111101010010101000011100101000", 
    54 => "00111101000011001111111100111101", 
    55 => "00111110000001001010110101111001", 
    56 => "00111101000010010011100101001010", 
    57 => "10111101010011110101000001101010", 
    58 => "10111110010000011100111000101001", 
    59 => "00111101110011011010110110111000", 
    60 => "10111101101010100111000001110100", 
    61 => "10111101101001100111101100000001", 
    62 => "10111101011101101111101110101010", 
    63 => "00111101011001001111111010000111", 
    64 => "10111101101100111001010110101001", 
    65 => "00111101101000110011010011010011", 
    66 => "00111101010100101100110000111011", 
    67 => "10111010101001110011001010110100", 
    68 => "10111101011111110000010011011110", 
    69 => "10111100101111001110001110000000", 
    70 => "10111110001001000010000000101110", 
    71 => "00111011111100101010000000011011", 
    72 => "10111110001010000110000110100110", 
    73 => "10111101100101000011001111100100", 
    74 => "10111100111011001111011000111000", 
    75 => "00111101111111110011101111101011", 
    76 => "00111110001000100010100011011101", 
    77 => "00111101111010001111111100110010", 
    78 => "00111100000110001101010111011010", 
    79 => "10111101110001110010111111100010", 
    80 => "10111011111111010110000011010100", 
    81 => "10111110001110001111001011100000", 
    82 => "10111100011101100010010100100000", 
    83 => "00111101000001011010001101011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_104 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_104 is
    component inference_mult_1_120_120_84_s_W4_104_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_104_rom_U :  component inference_mult_1_120_120_84_s_W4_104_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


