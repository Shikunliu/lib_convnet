-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_103_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_103_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010011101110000000000001101", 
    1 => "10111110000011001100100011011110", 
    2 => "10111101100100010011111000110001", 
    3 => "00111101110110100110000111100001", 
    4 => "00111110000000111101110100010010", 
    5 => "10111101100101110101001011001101", 
    6 => "00111110000101000111101111101110", 
    7 => "00111110000100010111001000100110", 
    8 => "10111110000101010011110110100111", 
    9 => "00111101001111011011010001000110", 
    10 => "00111110001101101111111000101110", 
    11 => "00111101000000000011000000111100", 
    12 => "10111101001011001011111001010100", 
    13 => "00111101111111000001011000010110", 
    14 => "00111011110001010010111111110101", 
    15 => "10111101010010000000101101001100", 
    16 => "10111110011000010101001100110111", 
    17 => "00111011100001001111101101100111", 
    18 => "10111101111100010100101110011101", 
    19 => "10111100100111000011110010101100", 
    20 => "10111101010010101001000111110101", 
    21 => "10111101010110010111000110100110", 
    22 => "00111110011100010110111001111010", 
    23 => "00111110000001101000101011010111", 
    24 => "10111101010011100011100101001001", 
    25 => "10111100110010110011100101001111", 
    26 => "00111110001111101000001010010101", 
    27 => "00111110011011100111010100110110", 
    28 => "00111101101011110001000100111101", 
    29 => "10111011000010101010001011011100", 
    30 => "00111110001011100001110001011000", 
    31 => "10111110000101000110000010101010", 
    32 => "00111101001000011011101010110101", 
    33 => "00111101001011000011101111001000", 
    34 => "00111101110011101100010100101010", 
    35 => "10111110000101000100000100110101", 
    36 => "10111101110011000011010111101001", 
    37 => "10111101001011010011010101011000", 
    38 => "00111110000010001110110001010011", 
    39 => "10111110001100110011011101100101", 
    40 => "10111110011110010011000001111011", 
    41 => "00111011111011100011111110111001", 
    42 => "00111101101101111111100000101001", 
    43 => "00111011100110100101000000111000", 
    44 => "00111101111111000000011011100010", 
    45 => "10111110000000111110011111010001", 
    46 => "10111100111101101000110111111100", 
    47 => "10111100101101010111101000110101", 
    48 => "00111100011001100100010110101111", 
    49 => "00111100011010001001111100100110", 
    50 => "00111110001000110110000001001010", 
    51 => "00111101100100110111011010111010", 
    52 => "00111011100000010111000111000101", 
    53 => "00111110000001100010000011101111", 
    54 => "10111100111010111100011111001111", 
    55 => "10111101010111110100111111110010", 
    56 => "00111101000001111010010111001100", 
    57 => "00111101100001001101100010101101", 
    58 => "00111101001011000010001011010011", 
    59 => "00111110001001101001011001011111", 
    60 => "10111101100110011100110010111000", 
    61 => "00111110010110111101111100001001", 
    62 => "00111101100100010001000000101000", 
    63 => "10111101101111100000100000110110", 
    64 => "10111100100101010111001011111001", 
    65 => "00111011110011111011101000111101", 
    66 => "00111100101111011000111011010111", 
    67 => "10111101010101010101111100101000", 
    68 => "00111101101101011000001011011100", 
    69 => "10111011100011000101001100100000", 
    70 => "10111101101011011100110000100001", 
    71 => "00111100111000010100011111100100", 
    72 => "10111100011001011010001011110010", 
    73 => "00111110000111001001111010101010", 
    74 => "00111101111100011101000011001000", 
    75 => "00111101111011101100001110011000", 
    76 => "00111101101000010000011010000011", 
    77 => "10111101110000111111110011100101", 
    78 => "00111101011100110010001111100100", 
    79 => "10111110011100111001111010101110", 
    80 => "10111101111011000101010010111101", 
    81 => "00111100101011000001110110010101", 
    82 => "10111101000100111010111101011010", 
    83 => "00111100011001111001111110110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_103 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_103 is
    component inference_mult_1_120_120_84_s_W4_103_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_103_rom_U :  component inference_mult_1_120_120_84_s_W4_103_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


