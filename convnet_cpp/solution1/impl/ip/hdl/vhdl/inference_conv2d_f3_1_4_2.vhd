-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000010011010100100010001", 
    1 => "00111011110110110000101000100111", 
    2 => "00111101111101111011011000110101", 
    3 => "00111110001101111000000110000100", 
    4 => "00111101101000010101010110010011", 
    5 => "10111101100001000101100010001010", 
    6 => "00111101100100011100000001101100", 
    7 => "10111110000100011100011101011000", 
    8 => "00111110000110111100100011000001", 
    9 => "10111100011100010100101011000110", 
    10 => "00111100000010001111101000001111", 
    11 => "10111101100000001110011001111010", 
    12 => "00111101100101000011010001101010", 
    13 => "10111101101110010001110111011110", 
    14 => "10111101011111111111101110110011", 
    15 => "10111101111011011010100001111010", 
    16 => "10111110000011111101100110111010", 
    17 => "10111011110101110101101101011100", 
    18 => "00111110000100010011100100000000", 
    19 => "00111110000100110101000001001100", 
    20 => "10111101001011000110111000111000", 
    21 => "00111101011111111110111010011000", 
    22 => "00111101100100100011001010010000", 
    23 => "10111101110101011111101110110101", 
    24 => "00111101101101010100100011011111", 
    25 => "10111101101100111101010001011110", 
    26 => "10111101101011101111110100011011", 
    27 => "10111101011010001111110010010011", 
    28 => "00111101000100010101001101111010", 
    29 => "00111101100110000000010111100110", 
    30 => "00111110000011010010110000111000", 
    31 => "10111101000101110101011001111001", 
    32 => "00111101001011000000011011010100", 
    33 => "10111101011000011100001001000010", 
    34 => "00111011110010001110001000110010", 
    35 => "00111110000111111101101100001010", 
    36 => "00111100000010111000011001010001", 
    37 => "00111101101000010010111111100001", 
    38 => "10111101110010110000100111101010", 
    39 => "10111110001111011011011001011111", 
    40 => "10111101100101110100101001110111", 
    41 => "00111101110010110110111100100111", 
    42 => "00111011101110101001101000011010", 
    43 => "10111101001001111001011101010011", 
    44 => "00111100101000101101010101001101", 
    45 => "00111101110101110100101101000000", 
    46 => "00111101110000000111011001110000", 
    47 => "00111100111111001111101101101001", 
    48 => "00111101111001010100011000001011", 
    49 => "10111101000100101000011101010111", 
    50 => "00111101100110110011111111110111", 
    51 => "00111101000101110111111111111111", 
    52 => "00111101011100010101011011010101", 
    53 => "00111101110101010010110110101010", 
    54 => "00111110000001101111111000101110", 
    55 => "00111101100000011011100001110100", 
    56 => "00111101100101010100010001011101", 
    57 => "10111100111111011011011011100101", 
    58 => "10111101101100110101001000111101", 
    59 => "00111100011101001100101111101111", 
    60 => "10111110001011011100011010100000", 
    61 => "10111101101010001111110101000010", 
    62 => "10111101100011011100000101000111", 
    63 => "10111100110010001110001100110011", 
    64 => "00111101010001001010001000100110", 
    65 => "10111100111001001010000101101010", 
    66 => "00111100111011111100000010000010", 
    67 => "10111101110011110110010000000110", 
    68 => "10111101110100001010100100010101", 
    69 => "00111101010111111011001101110100", 
    70 => "00111101101111001000100111110100", 
    71 => "00111101101001001101110001100110", 
    72 => "00111011010010011111101010110101", 
    73 => "10111100101010010011000000010000", 
    74 => "10111100110010110000100001110010", 
    75 => "00111110000011100110010100111000", 
    76 => "00111100101100000001111011100001", 
    77 => "00111101100011011111010111110111", 
    78 => "10111100000010001101111011101100", 
    79 => "00111101001010010000000001110101", 
    80 => "00111101110001001110001011001011", 
    81 => "00111110010001100010101101101011", 
    82 => "10111101001001110110110100101100", 
    83 => "00111101111110000001111100010000", 
    84 => "10111101001110001110001111000111", 
    85 => "00111101101001101010000101010100", 
    86 => "00111110000011101011110001000001", 
    87 => "10111011011100001001010101111111", 
    88 => "00111110001110010000001001011000", 
    89 => "10111101111100100101000111000010", 
    90 => "10111100101110101110010100001110", 
    91 => "00111101110010011111101110010111", 
    92 => "00111101100100010101000111100111", 
    93 => "00111110000011101100011111001001", 
    94 => "10111101100000000101100111011101", 
    95 => "10111101100000001111000100010001", 
    96 => "00111101010000011111101001000001", 
    97 => "00111101001101100101101000101111", 
    98 => "00111011110111100111011100101111", 
    99 => "10111101011101010011101111010001", 
    100 => "00111100101010011001111110100001", 
    101 => "00111110000111100011011001001100", 
    102 => "10111100110101100101110000101101", 
    103 => "10111110000100111110110001000110", 
    104 => "10111110000010011110001110000110", 
    105 => "00111101011100000000000010010100", 
    106 => "00111101110111000111001101101001", 
    107 => "10111100101001101010110001110010", 
    108 => "10111100101100111000011101001100", 
    109 => "10111101100101101010000111011011", 
    110 => "10111101111100100111011110000001", 
    111 => "00111101100111011111111110101010", 
    112 => "10111110001010101111101011111000", 
    113 => "00111110000101011011011110001101", 
    114 => "00111101000110010101111010101100", 
    115 => "00111101000100111100100000110100", 
    116 => "10111110010011011111011000010010", 
    117 => "00111101111001010000100111000000", 
    118 => "00111101100100100110111011011011", 
    119 => "00111011100000011001001110111110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_2 is
    component inference_conv2d_f3_1_4_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_2_rom_U :  component inference_conv2d_f3_1_4_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


