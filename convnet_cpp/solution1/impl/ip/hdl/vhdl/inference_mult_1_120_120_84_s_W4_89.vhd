-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_89_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_89_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110011101010111000011001", 
    1 => "10111101011100101111001111000011", 
    2 => "00111110000000011101001100100100", 
    3 => "00111101111100100111100110011010", 
    4 => "10111001101101110001111101101111", 
    5 => "00111011100110100110100001110111", 
    6 => "00111101010100010010011001111110", 
    7 => "10111110000001101111010111001011", 
    8 => "00111110000110111110000111101011", 
    9 => "10111101100100100101000011011101", 
    10 => "10111101101000100000001010001001", 
    11 => "10111110001011110000010001010111", 
    12 => "10111110001111110001011000101011", 
    13 => "10111101110101000011111100011100", 
    14 => "00111101010110011010010111000011", 
    15 => "10111100000110110111101011000101", 
    16 => "10111101100010110011111100101110", 
    17 => "10111011011000111000101011010100", 
    18 => "00111101000001010110010111010000", 
    19 => "10111100101010111011001100001100", 
    20 => "00111110000011000011011000010001", 
    21 => "10111101100100111111111100110011", 
    22 => "10111110000010101011101000111000", 
    23 => "10111101101100101110001111010011", 
    24 => "10111101010001101100010101001100", 
    25 => "00111101101000001100100010011000", 
    26 => "10111101001010011000111111100111", 
    27 => "10111101110101001100011101101101", 
    28 => "00111100010111110111100000110110", 
    29 => "00111101100011100011001111001000", 
    30 => "00111110000001010101101000111010", 
    31 => "10111101000101000110110111100001", 
    32 => "10111101000110010110001001010111", 
    33 => "00111101111111000001000101011110", 
    34 => "00111011111010011000000001001100", 
    35 => "10111101001111100010000110100100", 
    36 => "10111101111111011101011011100000", 
    37 => "10111101001110101010000100000001", 
    38 => "10111101100011000001111111001001", 
    39 => "10111100101110100101010110011100", 
    40 => "00111110011100001010000011110101", 
    41 => "00111100011101001000010000110110", 
    42 => "00111001111111100011101111001001", 
    43 => "00111011010110100101111100110010", 
    44 => "10111011110001011111110111010001", 
    45 => "10111011111001101011111000111011", 
    46 => "10111011101001110010001000000011", 
    47 => "00111101100010011010110001011111", 
    48 => "10111101100001000100010001001101", 
    49 => "10111100110011100000110100001001", 
    50 => "00111101001110110011101101011010", 
    51 => "00111101101010011100110111111010", 
    52 => "10111110001011111110000000000101", 
    53 => "10111110001010110000110100001111", 
    54 => "00111100110001001100011100001111", 
    55 => "10111100000111001100011011110110", 
    56 => "10111101010110001110100001100100", 
    57 => "00111101111101000110101010100001", 
    58 => "00111100101000011011110110001010", 
    59 => "00111110001100110011100001110001", 
    60 => "00111101010001010000000010100000", 
    61 => "10111100011111010010010000011000", 
    62 => "10111101101111011011001001110000", 
    63 => "10111101100011000110111100101010", 
    64 => "10111110000100010101100000110010", 
    65 => "10111110000000000110100101100010", 
    66 => "10111110001001010110101010111110", 
    67 => "00111011110001010101001000011010", 
    68 => "10111101101011100100111011111110", 
    69 => "10111101011101010000011001110010", 
    70 => "10111100101111101101100011101110", 
    71 => "00111110001010011001100000000111", 
    72 => "10111101010001111110010000010101", 
    73 => "10111110000010101000011001010001", 
    74 => "10111101010111100001111001111110", 
    75 => "10111100001101110001001001010000", 
    76 => "10111100001100000000100101001000", 
    77 => "00111101001111101010001000110010", 
    78 => "10111110011001011100101000101010", 
    79 => "00111101010000101111100101000100", 
    80 => "10111100111010001000101101101111", 
    81 => "00111100000010101001110000110000", 
    82 => "00111110000001010111000110001111", 
    83 => "10111101001100001001011100001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_89 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_89 is
    component inference_mult_1_120_120_84_s_W4_89_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_89_rom_U :  component inference_mult_1_120_120_84_s_W4_89_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


