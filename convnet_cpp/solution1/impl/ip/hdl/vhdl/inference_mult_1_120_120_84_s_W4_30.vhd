-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_30_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_30_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011100100010110110010001111", 
    1 => "10111101000100110011010101001100", 
    2 => "00111101011101101110010000010010", 
    3 => "10111110000111111011101110010101", 
    4 => "10111101100010111101100110110000", 
    5 => "00111100100011000010101001111011", 
    6 => "00111110000110110111101011100101", 
    7 => "00111110011101100000111110100001", 
    8 => "00111101111010101000001000011111", 
    9 => "10111101100101010101111110111011", 
    10 => "10111100111000010111011011011110", 
    11 => "10111101010101010001000100111111", 
    12 => "00111110100110100101000011111000", 
    13 => "00111011100011110001011011011111", 
    14 => "00111100010011010000010100000001", 
    15 => "10111101001001110110111010111111", 
    16 => "00111110010011110001110111000101", 
    17 => "00111101000001000010001110110001", 
    18 => "00111101001011011100011110011111", 
    19 => "00111101110100010000001111001001", 
    20 => "10111100110100010101110111110110", 
    21 => "00111101100001011110011110111011", 
    22 => "10111101010111111000011111010101", 
    23 => "10111101111011100100100011101001", 
    24 => "10111101110000011010001011001101", 
    25 => "10111101101010100100110110111111", 
    26 => "10111110001100111001000101001111", 
    27 => "00111110001100100000100111101110", 
    28 => "10111110000000101000101001100001", 
    29 => "10111101001100000001001011010010", 
    30 => "00111110001000011101111011110000", 
    31 => "10111101111001011110100010010010", 
    32 => "00111101011101110001000001101101", 
    33 => "10111110001011111101101110010000", 
    34 => "00111110000111000101010100000000", 
    35 => "00111110001001110110100100100011", 
    36 => "00111011010110101001110101110000", 
    37 => "10111101110010010010001010010110", 
    38 => "10111101001011001111110111111010", 
    39 => "00111100111011011010111000100100", 
    40 => "10111100111000100100110010010001", 
    41 => "00111100101000000011111100111011", 
    42 => "00111001101001001011101000100011", 
    43 => "10111101111000010010100000111001", 
    44 => "00111101101011000011001000111101", 
    45 => "10111011110100111110001011000001", 
    46 => "10111101001101110110110101010101", 
    47 => "10111101011110010100000101001111", 
    48 => "10111101101100101001101101111001", 
    49 => "00111101110001001010011111010000", 
    50 => "10111101010101111000110000101001", 
    51 => "10111110010110000111011110101011", 
    52 => "10111110000011000110010011111110", 
    53 => "10111110000111100011010111000110", 
    54 => "00111101100000011011000010111111", 
    55 => "00111101110011011001101101011111", 
    56 => "10111100000101011111000011101110", 
    57 => "10111110010011011111011110100101", 
    58 => "10111110010001111001000000110010", 
    59 => "00111110000111011011110101110011", 
    60 => "10111110000100010100010011001100", 
    61 => "00111101010010111001110001100110", 
    62 => "00111100100010000101111101001010", 
    63 => "00111101111110101001001100101001", 
    64 => "10111101110010011000100011010011", 
    65 => "00111100101111000001111100110101", 
    66 => "10111101110010011010000110011111", 
    67 => "00111100100101100111101110100010", 
    68 => "00111110100011101011100001010010", 
    69 => "00111110011000011110010101111110", 
    70 => "10111101100110001011110101110100", 
    71 => "10111101100110011110101001001010", 
    72 => "00111110100001010000100101011011", 
    73 => "00111101100010011011110100011000", 
    74 => "10111100010001010101001011110000", 
    75 => "10111101000001101110011010001001", 
    76 => "10111100101110111010111011001101", 
    77 => "10111110000110110010011000111001", 
    78 => "00111110011101011011100111101001", 
    79 => "10111110001110010010001010010110", 
    80 => "10111101111010001100101111010001", 
    81 => "00111110100011010100101010000000", 
    82 => "00111110000100101010110001110101", 
    83 => "00111110001000111101000001111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_30 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_30 is
    component inference_mult_1_120_120_84_s_W4_30_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_30_rom_U :  component inference_mult_1_120_120_84_s_W4_30_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


