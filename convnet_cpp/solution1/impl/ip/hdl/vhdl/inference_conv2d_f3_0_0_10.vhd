-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001100010110000100011100", 
    1 => "10111110000111000011110000011001", 
    2 => "00111101000001000110101011001001", 
    3 => "00111101010011101111011001110011", 
    4 => "10111110010100001100111100011000", 
    5 => "00111101101100111101101101111111", 
    6 => "10111101111000110001000001010110", 
    7 => "10111101100011100100101100101010", 
    8 => "00111101111011000011110100100101", 
    9 => "00111101000101001101011000110110", 
    10 => "10111100100010011000000110111111", 
    11 => "00111101110110110110001111010100", 
    12 => "10111101001111000111000100110101", 
    13 => "00111100111101010011101110110111", 
    14 => "10111100110101011010100110110101", 
    15 => "00111100111111000101100010101100", 
    16 => "00111101001101001001010111101111", 
    17 => "10111101100010100010001001111110", 
    18 => "00111110000100111100001011011011", 
    19 => "00111100011101000111001100000100", 
    20 => "10111110001000001010111011011010", 
    21 => "10111110000001100000111111100100", 
    22 => "10111101011010110001110110000101", 
    23 => "10111100001111011000010100110001", 
    24 => "10111100100101010101101101111100", 
    25 => "00111100110111011101000111011000", 
    26 => "00111101110001111111011110100011", 
    27 => "10111100110100111100110111011101", 
    28 => "10111101010111101100011101010001", 
    29 => "10111011111000000000101100101110", 
    30 => "00111100010101010100011111000110", 
    31 => "10111101101000001110111111000010", 
    32 => "10111110000000010010110000101000", 
    33 => "10111100111011111101001110011000", 
    34 => "10111100110100101111100100110111", 
    35 => "10111101110011101101100000001010", 
    36 => "10111110000101100100100001000001", 
    37 => "10111100101101011100111111000110", 
    38 => "10111110000000111010101001111010", 
    39 => "10111101110011001011110101001000", 
    40 => "10111101100011111000001100011101", 
    41 => "10111101110011100000111010110110", 
    42 => "00111110001100110111000011001110", 
    43 => "00111110001101101000000100100100", 
    44 => "10111110010011011101001011110010", 
    45 => "00111101110010110101101011001111", 
    46 => "10111100101100010100000100100000", 
    47 => "10111101101110000010010001011100", 
    48 => "10111101111011111101000010001101", 
    49 => "00111101101100000011100101001110", 
    50 => "00111101110101011011010111111010", 
    51 => "10111101101101011101011111001011", 
    52 => "10111101000000111110011010001111", 
    53 => "00111110000111011100010010000111", 
    54 => "10111101011111011000001110111001", 
    55 => "10111101111001011111010100100111", 
    56 => "10111100001011011100111001101111", 
    57 => "00111101110101010101001101101001", 
    58 => "00111101010001111010001100010010", 
    59 => "00111101101110100001111101011001", 
    60 => "00111110001000001100110110000101", 
    61 => "10111101100110010010111001100010", 
    62 => "10111101101010001001010001011001", 
    63 => "10111100100000100000001110110001", 
    64 => "00111100011010000101110001110101", 
    65 => "10111101011110011010111110011111", 
    66 => "00111101101100111000100000110000", 
    67 => "00111101011001011111001110010101", 
    68 => "10111101000000100110111000011111", 
    69 => "00111001011100110100001111110100", 
    70 => "00111101110011110100111110010100", 
    71 => "10111110001000101011101010011101", 
    72 => "10111100010111100110010101111100", 
    73 => "00111011010011010011000111110111", 
    74 => "00111101100110001111000000100110", 
    75 => "10111100011110101001100110001111", 
    76 => "00111100101101010000101000111000", 
    77 => "00111101110000100011000110010001", 
    78 => "10111101100010011000100101011001", 
    79 => "10111110000101000110010000010011", 
    80 => "00111100110011010010101011000001", 
    81 => "10111101000100010011001101111111", 
    82 => "00111100000011101011010011000100", 
    83 => "10111110001010011100110001110101", 
    84 => "00111101001001111011101101100110", 
    85 => "00111101000000101011110011111001", 
    86 => "10111101000000010010000011100010", 
    87 => "10111101110010101001110000000110", 
    88 => "00111101100101111001000100010110", 
    89 => "00111101100111110110011011001110", 
    90 => "00111101010110110100010011100101", 
    91 => "00111101000010101000010011011001", 
    92 => "00111100111101000011101100111011", 
    93 => "00111110000010000110100111000110", 
    94 => "00111110001000101100000111110100", 
    95 => "00111110000100001001001110010110", 
    96 => "00111011010101100101001000110010", 
    97 => "00111101000010010100110010010101", 
    98 => "10111100111000000001001011111011", 
    99 => "00111101000000111101000000011111", 
    100 => "10111101001111100010001100011100", 
    101 => "10111101101000111110010011010100", 
    102 => "10111101100111000001010001000000", 
    103 => "10111100011111110100010011101111", 
    104 => "10111011110010010110000111110100", 
    105 => "00111011000101001110111010001111", 
    106 => "10111110000000100111010101101000", 
    107 => "10111100111010011000111101111011", 
    108 => "00111101100011110100111000011100", 
    109 => "00111110000001001011100001111100", 
    110 => "00111101100100010100110111111001", 
    111 => "00111110010010000010000110101111", 
    112 => "10111101001101111000011001100100", 
    113 => "00111101100101010101111001010001", 
    114 => "10111110010000011110110111100001", 
    115 => "00111101101100110110011111111111", 
    116 => "00111110001100001100101011100110", 
    117 => "00111101101001011111001010111110", 
    118 => "00111100000101110101111110001101", 
    119 => "10111101100110100001000000100100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_10 is
    component inference_conv2d_f3_0_0_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_10_rom_U :  component inference_conv2d_f3_0_0_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


