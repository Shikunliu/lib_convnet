-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_Loop_6_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Filter3_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Filter3_TVALID : IN STD_LOGIC;
    Filter3_TREADY : OUT STD_LOGIC;
    f3_0_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    f3_0_ce0 : OUT STD_LOGIC;
    f3_0_we0 : OUT STD_LOGIC;
    f3_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f3_1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    f3_1_ce0 : OUT STD_LOGIC;
    f3_1_we0 : OUT STD_LOGIC;
    f3_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f3_2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    f3_2_ce0 : OUT STD_LOGIC;
    f3_2_we0 : OUT STD_LOGIC;
    f3_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f3_3_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    f3_3_ce0 : OUT STD_LOGIC;
    f3_3_we0 : OUT STD_LOGIC;
    f3_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f3_4_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    f3_4_ce0 : OUT STD_LOGIC;
    f3_4_we0 : OUT STD_LOGIC;
    f3_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inference_Loop_6_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_BB80 : STD_LOGIC_VECTOR (15 downto 0) := "1011101110000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_2580 : STD_LOGIC_VECTOR (13 downto 0) := "10010110000000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv12_780 : STD_LOGIC_VECTOR (11 downto 0) := "011110000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal indvar_flatten3_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal i7_reg_167 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten4_reg_178 : STD_LOGIC_VECTOR (13 downto 0);
    signal j7_reg_189 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_200 : STD_LOGIC_VECTOR (11 downto 0);
    signal k8_reg_211 : STD_LOGIC_VECTOR (4 downto 0);
    signal l3_reg_222 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten4_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next4_fu_239_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i7_mid2_fu_295_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i7_mid2_reg_490 : STD_LOGIC_VECTOR (2 downto 0);
    signal j7_mid2_fu_341_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j7_mid2_reg_496 : STD_LOGIC_VECTOR (2 downto 0);
    signal l3_mid2_fu_367_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal l3_mid2_reg_501 : STD_LOGIC_VECTOR (6 downto 0);
    signal k8_mid2_fu_375_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal k8_mid2_reg_506 : STD_LOGIC_VECTOR (4 downto 0);
    signal Filter3_read_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_383_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_fu_395_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_next3_fu_409_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_bdd_127 : BOOLEAN;
    signal i7_phi_fu_171_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j7_phi_fu_193_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal k8_phi_fu_215_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_735_cast_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_245_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j7_mid_fu_257_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_mid_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_706_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_not_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_mid_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_mid_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_303_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k8_mid_fu_315_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond5_mid1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_707_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_754_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_op_fu_389_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten11_op_fu_403_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_417_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_728_cast_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_fu_428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_708_fu_431_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_755_fu_445_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_437_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_453_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_709_fu_457_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_22_cast_fu_463_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_710_fu_466_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_345 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((exitcond_flatten4_fu_233_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((exitcond_flatten4_fu_233_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i7_reg_167 assign process. --
    i7_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (exitcond_flatten4_reg_481 = ap_const_lv1_0))) then 
                i7_reg_167 <= i7_mid2_reg_490;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                i7_reg_167 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten3_reg_156 assign process. --
    indvar_flatten3_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                indvar_flatten3_reg_156 <= indvar_flatten_next4_fu_239_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                indvar_flatten3_reg_156 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten4_reg_178 assign process. --
    indvar_flatten4_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                indvar_flatten4_reg_178 <= indvar_flatten_next3_fu_409_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                indvar_flatten4_reg_178 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_200 assign process. --
    indvar_flatten_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                indvar_flatten_reg_200 <= indvar_flatten_next_fu_395_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                indvar_flatten_reg_200 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- j7_reg_189 assign process. --
    j7_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (exitcond_flatten4_reg_481 = ap_const_lv1_0))) then 
                j7_reg_189 <= j7_mid2_reg_496;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                j7_reg_189 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- k8_reg_211 assign process. --
    k8_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (exitcond_flatten4_reg_481 = ap_const_lv1_0))) then 
                k8_reg_211 <= k8_mid2_reg_506;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                k8_reg_211 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- l3_reg_222 assign process. --
    l3_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
                l3_reg_222 <= l_fu_383_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_127))) then 
                l3_reg_222 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                Filter3_read_reg_512 <= Filter3_TDATA;
                l3_mid2_reg_501 <= l3_mid2_fu_367_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                exitcond_flatten4_reg_481 <= exitcond_flatten4_fu_233_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                i7_mid2_reg_490 <= i7_mid2_fu_295_p3;
                j7_mid2_reg_496 <= j7_mid2_fu_341_p3;
                k8_mid2_reg_506 <= k8_mid2_fu_375_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten4_fu_233_p2, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_sig_bdd_127)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_127)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((exitcond_flatten4_fu_233_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((exitcond_flatten4_fu_233_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st4_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- Filter3_TREADY assign process. --
    Filter3_TREADY_assign_proc : process(exitcond_flatten4_fu_233_p2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            Filter3_TREADY <= ap_const_logic_1;
        else 
            Filter3_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st4_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_127 assign process. --
    ap_sig_bdd_127_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_127 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_345 assign process. --
    ap_sig_bdd_345_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_345 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_88 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(Filter3_TVALID, exitcond_flatten4_fu_233_p2)
    begin
                ap_sig_bdd_94 <= ((Filter3_TVALID = ap_const_logic_0) and (exitcond_flatten4_fu_233_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_88)
    begin
        if (ap_sig_bdd_88) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_2 assign process. --
    ap_sig_cseq_ST_st4_fsm_2_assign_proc : process(ap_sig_bdd_345)
    begin
        if (ap_sig_bdd_345) then 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_mid1_fu_335_p2 <= (exitcond5_mid_fu_277_p2 and not_exitcond_flatten_mid_fu_329_p2);
    exitcond5_mid_fu_277_p2 <= (exitcond_fu_271_p2 and not_exitcond_flatten_fu_265_p2);
    exitcond_flatten1_fu_283_p2 <= "1" when (indvar_flatten_reg_200 = ap_const_lv12_780) else "0";
    exitcond_flatten4_fu_233_p2 <= "1" when (indvar_flatten3_reg_156 = ap_const_lv16_BB80) else "0";
    exitcond_flatten_fu_251_p2 <= "1" when (indvar_flatten4_reg_178 = ap_const_lv14_2580) else "0";
    exitcond_flatten_mid_fu_289_p2 <= (exitcond_flatten1_fu_283_p2 and not_exitcond_flatten_fu_265_p2);
    exitcond_flatten_not_fu_323_p2 <= (exitcond_flatten1_fu_283_p2 xor ap_const_lv1_1);
    exitcond_fu_271_p2 <= "1" when (l3_reg_222 = ap_const_lv7_78) else "0";
    f3_0_address0 <= tmp_735_cast_fu_472_p1(14 - 1 downto 0);

    -- f3_0_ce0 assign process. --
    f3_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f3_0_ce0 <= ap_const_logic_1;
        else 
            f3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_0_d0 <= Filter3_read_reg_512;

    -- f3_0_we0 assign process. --
    f3_0_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j7_mid2_reg_496)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (j7_mid2_reg_496 = ap_const_lv3_0)))) then 
            f3_0_we0 <= ap_const_logic_1;
        else 
            f3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_1_address0 <= tmp_735_cast_fu_472_p1(14 - 1 downto 0);

    -- f3_1_ce0 assign process. --
    f3_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f3_1_ce0 <= ap_const_logic_1;
        else 
            f3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_1_d0 <= Filter3_read_reg_512;

    -- f3_1_we0 assign process. --
    f3_1_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j7_mid2_reg_496)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (j7_mid2_reg_496 = ap_const_lv3_1)))) then 
            f3_1_we0 <= ap_const_logic_1;
        else 
            f3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_2_address0 <= tmp_735_cast_fu_472_p1(14 - 1 downto 0);

    -- f3_2_ce0 assign process. --
    f3_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f3_2_ce0 <= ap_const_logic_1;
        else 
            f3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_2_d0 <= Filter3_read_reg_512;

    -- f3_2_we0 assign process. --
    f3_2_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j7_mid2_reg_496)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (j7_mid2_reg_496 = ap_const_lv3_2)))) then 
            f3_2_we0 <= ap_const_logic_1;
        else 
            f3_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_3_address0 <= tmp_735_cast_fu_472_p1(14 - 1 downto 0);

    -- f3_3_ce0 assign process. --
    f3_3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f3_3_ce0 <= ap_const_logic_1;
        else 
            f3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_3_d0 <= Filter3_read_reg_512;

    -- f3_3_we0 assign process. --
    f3_3_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j7_mid2_reg_496)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and (j7_mid2_reg_496 = ap_const_lv3_3)))) then 
            f3_3_we0 <= ap_const_logic_1;
        else 
            f3_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_4_address0 <= tmp_735_cast_fu_472_p1(14 - 1 downto 0);

    -- f3_4_ce0 assign process. --
    f3_4_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then 
            f3_4_ce0 <= ap_const_logic_1;
        else 
            f3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f3_4_d0 <= Filter3_read_reg_512;

    -- f3_4_we0 assign process. --
    f3_4_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_94, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, j7_mid2_reg_496)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_94 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) and not((j7_mid2_reg_496 = ap_const_lv3_3)) and not((j7_mid2_reg_496 = ap_const_lv3_2)) and not((j7_mid2_reg_496 = ap_const_lv3_1)) and not((j7_mid2_reg_496 = ap_const_lv3_0))))) then 
            f3_4_we0 <= ap_const_logic_1;
        else 
            f3_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i7_mid2_fu_295_p3 <= 
        i_fu_245_p2 when (exitcond_flatten_fu_251_p2(0) = '1') else 
        i7_phi_fu_171_p4;

    -- i7_phi_fu_171_p4 assign process. --
    i7_phi_fu_171_p4_assign_proc : process(i7_reg_167, exitcond_flatten4_reg_481, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i7_mid2_reg_490)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten4_reg_481 = ap_const_lv1_0))) then 
            i7_phi_fu_171_p4 <= i7_mid2_reg_490;
        else 
            i7_phi_fu_171_p4 <= i7_reg_167;
        end if; 
    end process;

    i_fu_245_p2 <= std_logic_vector(unsigned(i7_phi_fu_171_p4) + unsigned(ap_const_lv3_1));
    indvar_flatten11_op_fu_403_p2 <= std_logic_vector(unsigned(indvar_flatten4_reg_178) + unsigned(ap_const_lv14_1));
    indvar_flatten_next3_fu_409_p3 <= 
        ap_const_lv14_1 when (exitcond_flatten_fu_251_p2(0) = '1') else 
        indvar_flatten11_op_fu_403_p2;
    indvar_flatten_next4_fu_239_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_156) + unsigned(ap_const_lv16_1));
    indvar_flatten_next_fu_395_p3 <= 
        ap_const_lv12_1 when (tmp_706_fu_309_p2(0) = '1') else 
        indvar_flatten_op_fu_389_p2;
    indvar_flatten_op_fu_389_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_200) + unsigned(ap_const_lv12_1));
    j7_mid2_fu_341_p3 <= 
        j_6_fu_303_p2 when (exitcond_flatten_mid_fu_289_p2(0) = '1') else 
        j7_mid_fu_257_p3;
    j7_mid_fu_257_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten_fu_251_p2(0) = '1') else 
        j7_phi_fu_193_p4;

    -- j7_phi_fu_193_p4 assign process. --
    j7_phi_fu_193_p4_assign_proc : process(j7_reg_189, exitcond_flatten4_reg_481, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, j7_mid2_reg_496)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten4_reg_481 = ap_const_lv1_0))) then 
            j7_phi_fu_193_p4 <= j7_mid2_reg_496;
        else 
            j7_phi_fu_193_p4 <= j7_reg_189;
        end if; 
    end process;

    j_6_fu_303_p2 <= std_logic_vector(unsigned(j7_mid_fu_257_p3) + unsigned(ap_const_lv3_1));
    k8_mid2_fu_375_p3 <= 
        k_fu_349_p2 when (exitcond5_mid1_fu_335_p2(0) = '1') else 
        k8_mid_fu_315_p3;
    k8_mid_fu_315_p3 <= 
        ap_const_lv5_0 when (tmp_706_fu_309_p2(0) = '1') else 
        k8_phi_fu_215_p4;

    -- k8_phi_fu_215_p4 assign process. --
    k8_phi_fu_215_p4_assign_proc : process(k8_reg_211, exitcond_flatten4_reg_481, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, k8_mid2_reg_506)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten4_reg_481 = ap_const_lv1_0))) then 
            k8_phi_fu_215_p4 <= k8_mid2_reg_506;
        else 
            k8_phi_fu_215_p4 <= k8_reg_211;
        end if; 
    end process;

    k_fu_349_p2 <= std_logic_vector(unsigned(k8_mid_fu_315_p3) + unsigned(ap_const_lv5_1));
    l3_mid2_fu_367_p3 <= 
        ap_const_lv7_0 when (tmp_754_fu_361_p2(0) = '1') else 
        l3_reg_222;
    l_fu_383_p2 <= std_logic_vector(unsigned(l3_mid2_fu_367_p3) + unsigned(ap_const_lv7_1));
    not_exitcond_flatten_fu_265_p2 <= (exitcond_flatten_fu_251_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_mid_fu_329_p2 <= (exitcond_flatten_fu_251_p2 or exitcond_flatten_not_fu_323_p2);
    p_shl2_cast_fu_453_p1 <= std_logic_vector(resize(unsigned(tmp_755_fu_445_p3),15));
    p_shl_cast_fu_437_p3 <= (tmp_708_fu_431_p2 & ap_const_lv7_0);
    tmp_16_cast_fu_428_p1 <= std_logic_vector(resize(unsigned(k8_mid2_reg_506),8));
    tmp_22_cast_fu_463_p1 <= std_logic_vector(resize(unsigned(l3_mid2_reg_501),15));
    tmp_706_fu_309_p2 <= (exitcond_flatten_mid_fu_289_p2 or exitcond_flatten_fu_251_p2);
    tmp_707_fu_355_p2 <= (exitcond5_mid1_fu_335_p2 or exitcond_flatten_mid_fu_289_p2);
    tmp_708_fu_431_p2 <= std_logic_vector(unsigned(tmp_728_cast_fu_424_p1) + unsigned(tmp_16_cast_fu_428_p1));
    tmp_709_fu_457_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_437_p3) - unsigned(p_shl2_cast_fu_453_p1));
    tmp_710_fu_466_p2 <= std_logic_vector(unsigned(tmp_709_fu_457_p2) + unsigned(tmp_22_cast_fu_463_p1));
    tmp_728_cast_fu_424_p1 <= std_logic_vector(resize(unsigned(tmp_fu_417_p3),8));
    tmp_735_cast_fu_472_p1 <= std_logic_vector(resize(unsigned(tmp_710_fu_466_p2),64));
    tmp_754_fu_361_p2 <= (tmp_707_fu_355_p2 or exitcond_flatten_fu_251_p2);
    tmp_755_fu_445_p3 <= (tmp_708_fu_431_p2 & ap_const_lv3_0);
    tmp_fu_417_p3 <= (i7_mid2_reg_490 & ap_const_lv4_0);
end behav;
