-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000011110100100011011110", 
    1 => "00111101111000100110010001011110", 
    2 => "10111110000110101001001010100011", 
    3 => "10111101001110010111010101010010", 
    4 => "00111011101110110010001010000000", 
    5 => "10111101101110100100011100100100", 
    6 => "10111101101101111000110110100000", 
    7 => "10111110001000101101011010101010", 
    8 => "10111100001100100110111000010001", 
    9 => "00111101111011110110101011010111", 
    10 => "10111101001101010000001010101100", 
    11 => "00111101111110101010000011001011", 
    12 => "10111100001000010010111101100101", 
    13 => "00111100011011000011010110110011", 
    14 => "10111110001110111110010001000111", 
    15 => "00111100100110100111110101011010", 
    16 => "10111101111000100110010111110001", 
    17 => "10111101001010110010011000000100", 
    18 => "10111110011010100110011011011100", 
    19 => "10111101000011101011100100011011", 
    20 => "10111100001110110010001111000010", 
    21 => "00111101111110001001001101110101", 
    22 => "00111101000010001000100000010100", 
    23 => "10111101101011100010001011001011", 
    24 => "00111101011101011000011101010001", 
    25 => "00111101111001100001011100111100", 
    26 => "00111110000011110110010011010000", 
    27 => "10111101011011001101110010100010", 
    28 => "00111101010010010110101001000010", 
    29 => "10111100101100010101100001101000", 
    30 => "10111011000101000011110011100011", 
    31 => "00111101101110011101010100001110", 
    32 => "10111101000110010111001111011010", 
    33 => "00111101101000011010101111101101", 
    34 => "00111101000110000100001100111101", 
    35 => "10111101110011101000001010010101", 
    36 => "10111101001000111111001010111001", 
    37 => "10111100000000011010001110101111", 
    38 => "00111100100110110010100010110000", 
    39 => "00111011100111110110011001111000", 
    40 => "00111110010001100010100010001001", 
    41 => "00111101101000001001001011001101", 
    42 => "00111101010011111000011110101101", 
    43 => "00111100111000001101001011011110", 
    44 => "10111101101101111101111000110110", 
    45 => "10111101000000010110100101010111", 
    46 => "10111101110101101010100000110011", 
    47 => "10111101101011001001011000000011", 
    48 => "00111101011011110111010101101110", 
    49 => "00111101010101111001011111001100", 
    50 => "00111100010111111111010011001000", 
    51 => "00111100000111100011101011011110", 
    52 => "00111101001110010100101101111011", 
    53 => "10111110000011101010010110110101", 
    54 => "00111101001101010010000011000100", 
    55 => "10111011011001001110011001001001", 
    56 => "00111101110111011001010001001011", 
    57 => "00111110010100000101110000000011", 
    58 => "10111101001010101111001001010010", 
    59 => "10111101101011011101000111110011", 
    60 => "10111010110110111001100000010111", 
    61 => "10111101110011111111011101011001", 
    62 => "10111110001101001100100101000011", 
    63 => "10111110000100110000000010011011", 
    64 => "10111110001001001010000100100111", 
    65 => "10111101111001001001000100101010", 
    66 => "10111101010111101111101110111110", 
    67 => "10111100110000111011110001001101", 
    68 => "10111101101001100110110100110111", 
    69 => "00111110001001001110110100101101", 
    70 => "10111101110011011101100010110110", 
    71 => "10111100111001010010101000100110", 
    72 => "10111011011111110110011110101010", 
    73 => "00111101101110110011100111111101", 
    74 => "00111011001011000001011111110110", 
    75 => "10111101011111000010101111001011", 
    76 => "10111110001111100000111111000011", 
    77 => "10111110000000010001011010101001", 
    78 => "00111110000101100111010101011000", 
    79 => "10111100010010110000011111010001", 
    80 => "00111100101100110001001000010001", 
    81 => "10111011101100000010100001111100", 
    82 => "10111110000110100100001101111000", 
    83 => "10111101111000000101111111110010", 
    84 => "10111101101110111011011010001111", 
    85 => "00111101101111110000110101011100", 
    86 => "10111101110011100100100111110101", 
    87 => "00111101101101100111101010100011", 
    88 => "10111101110101000100000000101001", 
    89 => "00111100111101110110111010010111", 
    90 => "10111101000000010010011001110001", 
    91 => "10111101010011101011101011001001", 
    92 => "00111101110110101110010011110011", 
    93 => "10111101100110101100100100000001", 
    94 => "10111101111000001111100100001001", 
    95 => "10111101111001000111001101000111", 
    96 => "10111101000011000000110011001110", 
    97 => "10111101011001101010000100000100", 
    98 => "10111110011000101001000111111011", 
    99 => "00111100000100010011011100110101", 
    100 => "00111101000001100011101001011100", 
    101 => "00111100101010110001010011101100", 
    102 => "10111101110111000100010000111001", 
    103 => "00111101100111000111101010001010", 
    104 => "10111110001000111001100101110000", 
    105 => "00111101011000111001100111001110", 
    106 => "00111101001111010100000001101000", 
    107 => "10111110000000000001111111111011", 
    108 => "00111101100110000011010010101010", 
    109 => "00111101011010111111111000111011", 
    110 => "00111110000011100001110010011011", 
    111 => "10111110000001000111001110001010", 
    112 => "00111101100011100001110110101000", 
    113 => "10111101100010111000100000000001", 
    114 => "00111101110001000101110100001100", 
    115 => "00111101100000101001001000111110", 
    116 => "10111101111000000001001001011010", 
    117 => "00111101100011001111100011100101", 
    118 => "10111101000011110101001011010100", 
    119 => "00111110011000000000010100111110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_5 is
    component inference_conv2d_f3_4_1_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_5_rom_U :  component inference_conv2d_f3_4_1_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


