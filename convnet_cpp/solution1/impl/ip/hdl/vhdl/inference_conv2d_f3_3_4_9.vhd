-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101101101010001000101011", 
    1 => "00111100100111100111011001111000", 
    2 => "10111011110000001100011111011100", 
    3 => "10111101000001011011101110110001", 
    4 => "10111110000111011110010100001000", 
    5 => "00111110001000000011001111101000", 
    6 => "00111100111011111011011110110011", 
    7 => "10111100001101111110111101011011", 
    8 => "10111100011110101011101010110001", 
    9 => "10111101110100110010110011101001", 
    10 => "10111110000010001101000100001111", 
    11 => "10111110001000011000001101110011", 
    12 => "00111110001011011111101111010111", 
    13 => "00111101011000000000000101111000", 
    14 => "00111101111100010001000101101011", 
    15 => "00111100101110010111110100101111", 
    16 => "10111101101110110000110100001111", 
    17 => "00111101100000001110110111111001", 
    18 => "10111101011001011000001111001101", 
    19 => "10111101100101101011010100100110", 
    20 => "00111101100010110011111100111011", 
    21 => "10111001000100100001110001010101", 
    22 => "00111110000010000001001100000001", 
    23 => "00111101010010111011000110010100", 
    24 => "10111100111110101011110011001010", 
    25 => "10111101110111100001011001010001", 
    26 => "10111101110110111110011101101101", 
    27 => "00111110001110101111101101111111", 
    28 => "10111101100010001001010011111010", 
    29 => "10111100110100010010000011101111", 
    30 => "00111110000000110101010101000111", 
    31 => "00111101011110110000110001111011", 
    32 => "10111101100101001001100000010101", 
    33 => "00111110000010000100010010001101", 
    34 => "00111101111000100010110101010001", 
    35 => "10111101001110100010110000010110", 
    36 => "00111100001011001010110111011110", 
    37 => "10111101001110011001011001110100", 
    38 => "00111110010010010001000011000011", 
    39 => "10111101010100010010000100100101", 
    40 => "10111101101101011001010001101100", 
    41 => "00111101100011010110000111011011", 
    42 => "10111101110011101010000001110111", 
    43 => "10111100101100011111011011110011", 
    44 => "00111110000010010010100100100100", 
    45 => "00111101010110111110101100110011", 
    46 => "00111110000001110111110110010101", 
    47 => "10111101000110001010000001000000", 
    48 => "00111100100100100000010001111010", 
    49 => "00111101010001000110001011010001", 
    50 => "10111101110010101000110010110110", 
    51 => "10111101100100001100100100000011", 
    52 => "00111101110110010011000101000100", 
    53 => "00111101111111011000001110000100", 
    54 => "00111100111100001011010110101010", 
    55 => "00111100001001010110110100001100", 
    56 => "10111100110011000010000100001011", 
    57 => "10111101000110011010011111000001", 
    58 => "00111100110110011111000000000001", 
    59 => "10111101000000000010111110011011", 
    60 => "10111110001010000000011001101100", 
    61 => "00111100101011111000110111111000", 
    62 => "10111101110110001010111010111000", 
    63 => "00111101000001100001000110101101", 
    64 => "00111101110101110010001001011011", 
    65 => "10111100110010010101101111111111", 
    66 => "00111101110100101110011010100111", 
    67 => "00111101010010001111111001000001", 
    68 => "10111100000000010001100000011000", 
    69 => "00111100000110001111111010010100", 
    70 => "00111110011110101110011100001100", 
    71 => "00111110011011011111011101100010", 
    72 => "00111110001001001100010011001110", 
    73 => "00111101100100100100101101000001", 
    74 => "00111101100110111011011101100110", 
    75 => "00111101111011000001001110111010", 
    76 => "10111110000101101001111010000000", 
    77 => "10111101111101101000000111101101", 
    78 => "00111110001011110000010010011011", 
    79 => "00111101001101010100001111100100", 
    80 => "00111101110110111101111100001001", 
    81 => "10111110001101101111100000100111", 
    82 => "10111101110100101101000010100010", 
    83 => "10111101101100010011001011000011", 
    84 => "00111101100000111111110100011010", 
    85 => "10111011100010011010010011101111", 
    86 => "10111100101010010010110111000001", 
    87 => "00111100100001010010010011001101", 
    88 => "00111110001010101001001111110011", 
    89 => "10111100101110100111100010100010", 
    90 => "10111011100001000101111101110110", 
    91 => "10111100000100010010011000000011", 
    92 => "00111101000111001000101110100010", 
    93 => "00111110001011001010101001110110", 
    94 => "10111100111001110101011111111110", 
    95 => "10111110000000101111111010000010", 
    96 => "00111101011010101111000010100100", 
    97 => "00111110010110101000001011101000", 
    98 => "00111110001100010000110000101100", 
    99 => "10111101011101011000000101010111", 
    100 => "00111110010001001001100101001010", 
    101 => "10111100111110111110110110000001", 
    102 => "00111110000011010101000111111000", 
    103 => "00111101101010010011111101101100", 
    104 => "10111110010100111000000010001000", 
    105 => "00111011101111010110100110011000", 
    106 => "00111101111011111000111100000100", 
    107 => "00111101010110010101000100001010", 
    108 => "00111101100001110100010110001001", 
    109 => "10111100111010101010011011010010", 
    110 => "10111101110001011010110110110001", 
    111 => "00111011100100000000000001111110", 
    112 => "00111101100111111110001100101010", 
    113 => "10111110001000001011000100110110", 
    114 => "00111100001100111011011011100111", 
    115 => "00111101010110010111010011100110", 
    116 => "10111101111001000011111111100110", 
    117 => "00111101111010001110101101000110", 
    118 => "10111101000101110101001000101100", 
    119 => "00111100011100011000101101011110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_9 is
    component inference_conv2d_f3_3_4_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_9_rom_U :  component inference_conv2d_f3_3_4_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


