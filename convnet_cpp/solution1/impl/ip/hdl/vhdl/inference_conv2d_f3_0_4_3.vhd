-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110011010000000000101110", 
    1 => "10111100010100111010100010001001", 
    2 => "10111101010000000110001111010011", 
    3 => "10111101100010111110110111111010", 
    4 => "10111101111000011111001110100101", 
    5 => "10111101010011001001100111010111", 
    6 => "10111101101100110000100000000000", 
    7 => "00111100110010101010110011001100", 
    8 => "10111101110001100111101011100110", 
    9 => "10111110010001011101111101100101", 
    10 => "00111110010101110111100001010111", 
    11 => "00111101100100111110100011010000", 
    12 => "00111101010111111001010001101011", 
    13 => "00111100001111110101010110000000", 
    14 => "10111101100100011001111001011000", 
    15 => "00111101110010111000111101100101", 
    16 => "00111101100011101000000011001100", 
    17 => "10111101000110010010010100000000", 
    18 => "10111101000011000100110001110100", 
    19 => "10111100110001011000101111000110", 
    20 => "10111101111001000001010101101110", 
    21 => "10111101010100001110000110011010", 
    22 => "10111101100000001011111110000110", 
    23 => "00111101100110101001011111000110", 
    24 => "00111101111100001000001011001111", 
    25 => "00111110010100010110100011111001", 
    26 => "00111110001100100011010010101000", 
    27 => "10111101100101011010001010100010", 
    28 => "10111101010011101001100011001111", 
    29 => "10111100110001110001010011111101", 
    30 => "00111100110011001111001111001111", 
    31 => "10111101110110101100001001011001", 
    32 => "10111110001010101101101000110100", 
    33 => "10111110000110111001111010001100", 
    34 => "00111101110001111111101100100110", 
    35 => "00111100101110010001011000110111", 
    36 => "10111101010011000110100000111110", 
    37 => "00111101000001001101001010110011", 
    38 => "00111101111111111100110100100101", 
    39 => "00111110000110100101011011011110", 
    40 => "10111101101010000011000111001000", 
    41 => "10111110011110110110001111010100", 
    42 => "00111101101001011010110101010100", 
    43 => "00111110010000101000111100011001", 
    44 => "10111101110001000111000110100111", 
    45 => "00111101111011110011001010111110", 
    46 => "00111110000101010011011000001101", 
    47 => "00111101000011011110011111101010", 
    48 => "10111100100110111001001101101111", 
    49 => "10111101000011011111111101100111", 
    50 => "00111101110001101100101010110010", 
    51 => "00111101100001110000010110100000", 
    52 => "10111110000111000100010101000110", 
    53 => "00111101100101100011101010000100", 
    54 => "10111100001000010110110110001110", 
    55 => "00111101010100011110010101110000", 
    56 => "00111101100001100101100110101001", 
    57 => "10111101000010101101000110011011", 
    58 => "00111101101101011011000110010011", 
    59 => "10111101111111001110100101100000", 
    60 => "00111101010011110000110011001000", 
    61 => "10111110100001011010000011100000", 
    62 => "00111101100110001010000010111000", 
    63 => "10111101100001010001100100000001", 
    64 => "10111110000001110111001001010000", 
    65 => "00111101111110011010000011110001", 
    66 => "10111100111101101010101000010110", 
    67 => "10111101001100011110100111110010", 
    68 => "10111110000101100111111100001011", 
    69 => "10111101111011000010101001000101", 
    70 => "00111011100011110001100010110111", 
    71 => "10111101000111110100001101110111", 
    72 => "10111101100111001000101101111001", 
    73 => "00111101100010100011111101101111", 
    74 => "00111011000100010100010111100011", 
    75 => "00111101101110001001010000100011", 
    76 => "10111101100010110101100000110000", 
    77 => "10111011111001000000111100110100", 
    78 => "00111100110110110010000010111000", 
    79 => "10111101100110010010110010100111", 
    80 => "10111110001001110110011100001010", 
    81 => "00111011010100100111010110101110", 
    82 => "00111100101111100111101001011001", 
    83 => "00111101101101000001110000010111", 
    84 => "00111101111010111110000101100101", 
    85 => "00111101111000110010010011001000", 
    86 => "00111110010100110001100111000110", 
    87 => "10111100101001011010101001001001", 
    88 => "10111101101101000100011110110110", 
    89 => "10111011101100010111101011110111", 
    90 => "00111100110001010111011001100010", 
    91 => "00111101100001101000100111011000", 
    92 => "00111101101010011000010100011010", 
    93 => "00111110010000000011001101100001", 
    94 => "10111101000101100101101010000000", 
    95 => "10111110000010011011010111101001", 
    96 => "00111101101011111101110011010010", 
    97 => "10111110001011110101101001010011", 
    98 => "00111100010101001100100010101111", 
    99 => "00111101000010000001010010111100", 
    100 => "00111110001111001010101010111001", 
    101 => "00111101111111111101011110100001", 
    102 => "00111101011111000001000010100010", 
    103 => "10111101000001010111100000001111", 
    104 => "00111110001001000111100110010010", 
    105 => "10111110000000110111111010110011", 
    106 => "00111101100101111001100100101001", 
    107 => "00111101111101010110110000001101", 
    108 => "00111110010011010111111010001001", 
    109 => "10111101111010111111110010101000", 
    110 => "00111110000100110111111001101111", 
    111 => "10111100101110010001101101110101", 
    112 => "00111110000011001101001110011110", 
    113 => "10111110000100000010101011111110", 
    114 => "00111100100101011010001011001010", 
    115 => "10111101000011110111101110000011", 
    116 => "00111011100010111100111000010100", 
    117 => "10111110001100000101101000101101", 
    118 => "00111101011001011001010001000100", 
    119 => "00111101110100110110101101001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_3 is
    component inference_conv2d_f3_0_4_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_3_rom_U :  component inference_conv2d_f3_0_4_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


