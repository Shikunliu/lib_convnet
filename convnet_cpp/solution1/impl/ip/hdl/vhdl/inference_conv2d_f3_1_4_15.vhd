-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000100101011101010011101", 
    1 => "00111100010110100111111110101000", 
    2 => "00111100110110100000100110010111", 
    3 => "00111101001111011000000011111111", 
    4 => "10111100011100101111011111011010", 
    5 => "10111101110001111110010110101000", 
    6 => "10111110001001000000100000010000", 
    7 => "10111101101100011011110100101100", 
    8 => "00111101111000110100111010111010", 
    9 => "00111101010010000010001110000101", 
    10 => "10111101010100100101100110111010", 
    11 => "10111110001001101011001101111000", 
    12 => "10111101111010010111100001001111", 
    13 => "10111101111111011001011001100100", 
    14 => "00111101011000100101010101100000", 
    15 => "00111101111000000110110000000001", 
    16 => "00111110000101100010010100100000", 
    17 => "00111101000111011000011010001110", 
    18 => "00111100011011011101001101000010", 
    19 => "00111101111000111111101010110001", 
    20 => "10111101110001000111001010011001", 
    21 => "10111100100010000100000010101100", 
    22 => "00111101101011000011110110010001", 
    23 => "00111100110101100101011010111001", 
    24 => "00111101111100000101000001111010", 
    25 => "00111110000101110111011111010001", 
    26 => "00111101111000110111010001111001", 
    27 => "10111101101111100101110111000111", 
    28 => "00111101100001101101011101100010", 
    29 => "10111101111111010010000101111001", 
    30 => "10111101110000110001000000100000", 
    31 => "00111110001000111000011000001010", 
    32 => "00111101101011111000001010110010", 
    33 => "00111101111010011000001101010001", 
    34 => "00111101110101010100000000000011", 
    35 => "10111101100000100101011010111101", 
    36 => "10111101000111100101011110001001", 
    37 => "10111101011111000011101011111111", 
    38 => "00111101100011100100010001001100", 
    39 => "10111101101111101111111000011010", 
    40 => "00111110000010000111100001110101", 
    41 => "00111110000000010111010101001011", 
    42 => "10111110000010111011010011010101", 
    43 => "00111100101111001011101001100110", 
    44 => "00111101101111010001101001100101", 
    45 => "00111100101100010101010011010111", 
    46 => "00111110001101000010111111101000", 
    47 => "00111101010001111110100011001101", 
    48 => "10111101101100000000001000110100", 
    49 => "10111101110010011010100111000000", 
    50 => "00111101001101011010100110011011", 
    51 => "10111101000011011010010100000100", 
    52 => "00111100011000010111101011011010", 
    53 => "00111101110011101100101111111011", 
    54 => "00111101000001110000100010111000", 
    55 => "00111101010111000110100111000011", 
    56 => "10111100001000000100010100101111", 
    57 => "10111101110001011110100011111110", 
    58 => "10111100111101011000100011100011", 
    59 => "00111101001101100011101111111100", 
    60 => "00111101111110011010100001001000", 
    61 => "10111100111101011010101000111100", 
    62 => "10111110001010000111111001111100", 
    63 => "00111101110110100001011111110100", 
    64 => "10111101011011000010010000110000", 
    65 => "00111101010111101110000001111011", 
    66 => "10111101100100000100001001000101", 
    67 => "00111101001100110001100001110110", 
    68 => "00111101101010100001010000111011", 
    69 => "00111101101011001101101101010011", 
    70 => "10111100111111111010110010111110", 
    71 => "10111101100001001010111011111111", 
    72 => "00111101111100011110111000100100", 
    73 => "10111101110111011100111110001001", 
    74 => "10111101100110000001101010000001", 
    75 => "10111101010011001100100110100111", 
    76 => "00111101001000101010001000000110", 
    77 => "10111101010111000111000100110101", 
    78 => "10111101101111111001001000000001", 
    79 => "10111110001000001100111101011011", 
    80 => "00111101100110000101001101001000", 
    81 => "10111101001110110001110111111110", 
    82 => "00111110001100010001000101101011", 
    83 => "10111101001011011010011000010001", 
    84 => "10111110000100000101001010010011", 
    85 => "00111100100111010010011001001100", 
    86 => "10111101110101110111111110101110", 
    87 => "00111101111000001001100100011000", 
    88 => "10111101100100000100111101010011", 
    89 => "00111101110000100011010110001101", 
    90 => "10111110001010011100110111000100", 
    91 => "00111101011010011101100010010001", 
    92 => "00111101000111110100100010000000", 
    93 => "10111110000110000001010001010001", 
    94 => "10111110000101110111011111010001", 
    95 => "00111101001111010010001000011010", 
    96 => "00111101100110011010110110000110", 
    97 => "10111100100000101001010001100101", 
    98 => "00111101110111100100110011010111", 
    99 => "00111101100000011001011001000101", 
    100 => "10111101010001110111100011101011", 
    101 => "00111101010000000000111001000011", 
    102 => "10111100011001100101100101100110", 
    103 => "00111100110011010010000101010001", 
    104 => "10111101110101001100010111011010", 
    105 => "00111101110010110010010011011100", 
    106 => "10111101110110101100111111111010", 
    107 => "10111100111000000111101010010100", 
    108 => "00111101110000111001110111111111", 
    109 => "10111101101010110010000011000101", 
    110 => "00111100101100010100101010010000", 
    111 => "00111100101000000001000110111001", 
    112 => "10111110000100000100101011111001", 
    113 => "00111100010010001011001111001110", 
    114 => "10111101000101101111111001111111", 
    115 => "00111101101111110100010001101001", 
    116 => "10111101000110010101100000101011", 
    117 => "00111101010010001000111111010111", 
    118 => "10111100111111111000110110110101", 
    119 => "10111100111001011101101011110000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_15 is
    component inference_conv2d_f3_1_4_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_15_rom_U :  component inference_conv2d_f3_1_4_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


