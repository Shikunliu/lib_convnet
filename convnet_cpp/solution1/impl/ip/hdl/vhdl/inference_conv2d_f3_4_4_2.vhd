-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111111110100111101010001", 
    1 => "10111101011110101000111100010010", 
    2 => "00111110001110001111110111100011", 
    3 => "10111110000111011111100101111011", 
    4 => "00111100100010001011010010100101", 
    5 => "10111101011101000100001010101101", 
    6 => "00111100100100001101001010110110", 
    7 => "10111110000010100100100001110011", 
    8 => "10111101010110110010000011101110", 
    9 => "00111110010010100100101010001100", 
    10 => "10111101010100010010101111110010", 
    11 => "10111110000011010101000000100010", 
    12 => "10111101111000111001010011111011", 
    13 => "10111110001101000110001101001001", 
    14 => "00111110010001000001100110100000", 
    15 => "00111100101011110101001010011110", 
    16 => "00111100100110000010111011001011", 
    17 => "00111110010100101100101111101010", 
    18 => "00111101011100000011111101100011", 
    19 => "10111011110111000101011000101101", 
    20 => "00111101000110011001110010001001", 
    21 => "10111100010001111100010110010001", 
    22 => "00111101001111110000011000000101", 
    23 => "00111110000110000011010111011111", 
    24 => "00111101110000000000100111001110", 
    25 => "00111101111100011100100011101011", 
    26 => "00111101101001011100011111001110", 
    27 => "00111101001100001100000100011000", 
    28 => "00111101101010001000001100001100", 
    29 => "00111101000010110100100010111001", 
    30 => "10111101110011010000011110000101", 
    31 => "00111011001000110000110110001100", 
    32 => "00111100100100110110100011001000", 
    33 => "10111101101101100010110110011111", 
    34 => "10111101111101010000010000111110", 
    35 => "10111101001111010001010001011110", 
    36 => "00111101010000111001101001101111", 
    37 => "00111100011001011110001100011110", 
    38 => "00111110001011001010011110010011", 
    39 => "00111100011100000110010000010110", 
    40 => "00111101100011100010000111110100", 
    41 => "10111101100101000111110001011001", 
    42 => "10111100110110011000010001101011", 
    43 => "10111101010011011111110000001100", 
    44 => "00111011101110011100010010000111", 
    45 => "10111101101111010100110111100001", 
    46 => "10111011001010101110011101001010", 
    47 => "10111101110010000001010100001101", 
    48 => "00111101101110100110011100010010", 
    49 => "00111100110011000100000001001010", 
    50 => "10111110000111111100000001001101", 
    51 => "10111100111010110111000010010001", 
    52 => "00111101000010100110011101000111", 
    53 => "00111110000000110000001101111101", 
    54 => "10111101100111010100110110111001", 
    55 => "10111101100110011110100011101101", 
    56 => "00111100010100000010111111000011", 
    57 => "10111101011001001110101111000010", 
    58 => "10111101000001011011101001010100", 
    59 => "00111101000101110110110111011011", 
    60 => "10111101100000000101110110001000", 
    61 => "00111101101111001001010000010010", 
    62 => "00111110010010000111001000101010", 
    63 => "00111110001111001100000000111000", 
    64 => "00111101100000000100100100010110", 
    65 => "10111101100101110010000011001001", 
    66 => "10111100000000000010101110001001", 
    67 => "10111110000000110011001010101101", 
    68 => "10111011100111110001000111111111", 
    69 => "10111101011110111010101110001101", 
    70 => "10111110001101111101010001011010", 
    71 => "00111101001011010101001100111010", 
    72 => "10111101100010000011011111001111", 
    73 => "10111101010111111000100011000111", 
    74 => "10111101110110001101110111101000", 
    75 => "10111101101011011111001101100110", 
    76 => "00111100010001100001000010000110", 
    77 => "00111101101101001100111110001101", 
    78 => "10111101001011011111011001111110", 
    79 => "10111101101001010111101101101010", 
    80 => "10111110000100001011111110100001", 
    81 => "10111110001000010000000011100111", 
    82 => "10111110001101001100110111111011", 
    83 => "00111101010101101010000001010101", 
    84 => "10111101010001010000100000010010", 
    85 => "00111101100100100100100000001111", 
    86 => "10111101010101101001000100000110", 
    87 => "00111100000001010000001111100000", 
    88 => "10111101101011010010111111111111", 
    89 => "10111110000100000101111100101001", 
    90 => "00111101110110000110001010110010", 
    91 => "10111110000100001111110101111110", 
    92 => "00111101011101001011010010001101", 
    93 => "00111110010001001110011111101111", 
    94 => "10111101110101010011001111110100", 
    95 => "10111100101011011000100000101110", 
    96 => "10111011110011011100010100000101", 
    97 => "10111110010001001001101010011001", 
    98 => "00111011100011111101010011011111", 
    99 => "00111110000111110100101010011001", 
    100 => "10111101011000010101001100011100", 
    101 => "00111100000101001101110111101000", 
    102 => "00111110000110000101111111010000", 
    103 => "00111101010111101110111100001110", 
    104 => "10111100111110001010100011110100", 
    105 => "10111101101001000001100011010111", 
    106 => "00111100111110111011111100101001", 
    107 => "10111110000010000000101101100111", 
    108 => "10111110000100101010110001110101", 
    109 => "00111100010001101001011111111111", 
    110 => "10111101010001101000010100000101", 
    111 => "00111110000010011001111011011000", 
    112 => "00111101000000000110001111010011", 
    113 => "10111101010010100000000100001011", 
    114 => "00111110001000101011011101111000", 
    115 => "10111101100000100101011001101100", 
    116 => "10111100011110100101101000111001", 
    117 => "00111100101100101011001101000110", 
    118 => "00111110001011111110011100011001", 
    119 => "00111101111010110011101110111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_2 is
    component inference_conv2d_f3_4_4_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_2_rom_U :  component inference_conv2d_f3_4_4_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


