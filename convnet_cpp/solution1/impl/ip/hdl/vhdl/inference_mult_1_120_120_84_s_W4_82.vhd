-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_82_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_82_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100000111011001111000001", 
    1 => "00111110000110100001110101110101", 
    2 => "10111101010001011001011101001110", 
    3 => "10111101000001101010000011001110", 
    4 => "00111100100000001000001100010010", 
    5 => "00111011000100001001101111101111", 
    6 => "10111110001000100100001100010011", 
    7 => "10111010101010011100101100010101", 
    8 => "00111101111100111000010011111101", 
    9 => "10111101110010100110001101001011", 
    10 => "10111010100000000011100011101101", 
    11 => "00111101000010110001100000010001", 
    12 => "00111101110100000101000100000001", 
    13 => "10111101101000100001110000111010", 
    14 => "10111110000111100100111010101101", 
    15 => "10111100011101000101000000110100", 
    16 => "00111110011101011010010110111001", 
    17 => "10111101111110011010100001001000", 
    18 => "00111101000110001010000001011010", 
    19 => "00111101001001010000001110101011", 
    20 => "10111101100001110010111101101001", 
    21 => "00111101100110110010101001010000", 
    22 => "10111110001100000110111101101001", 
    23 => "00111100001100001100110110010011", 
    24 => "10111101111001010010000101010111", 
    25 => "10111101000100110100101110000111", 
    26 => "10111110100011011000100111110000", 
    27 => "10111101001001100001011110001100", 
    28 => "10111101101010000000000101111111", 
    29 => "00111101010010111011010101110110", 
    30 => "00111101101110111110111110101000", 
    31 => "10111101110001000000001011010001", 
    32 => "10111101110100110110011010010101", 
    33 => "10111011111011001101011011011000", 
    34 => "10111101100011111000111110110011", 
    35 => "00111101111010111001110111000011", 
    36 => "00111101011000010100001010001011", 
    37 => "00111100100100111100000000111100", 
    38 => "00111101001110001010101111111110", 
    39 => "00111101100001101000101111001000", 
    40 => "00111110000011000011011000010001", 
    41 => "00111110010000001111111000000100", 
    42 => "10111101011111110001000010000001", 
    43 => "00111101100100010010111010111001", 
    44 => "10111110000011000101110010011010", 
    45 => "00111101011110011111101010110011", 
    46 => "10111101111000101110111001000010", 
    47 => "10111101111000000010010111000000", 
    48 => "10111110000101111000101011110100", 
    49 => "00111101011001001000110010100111", 
    50 => "00111110000101001001110110111111", 
    51 => "00111100000011001111011110010101", 
    52 => "00111101110101101011011111101101", 
    53 => "10111110100111101101001100001111", 
    54 => "00111100010011100010011101000000", 
    55 => "10111100110100100010101111100111", 
    56 => "10111110010110011100111011010001", 
    57 => "00111101010011001011010111010110", 
    58 => "00111110000110000010011100110001", 
    59 => "00111101100010010001101000110011", 
    60 => "00111101111100001011111010010100", 
    61 => "00111101000100010100001000010010", 
    62 => "10111101000100011111010010001010", 
    63 => "00111101100101011010111100001110", 
    64 => "10111101110110011001101100101100", 
    65 => "10111110001010011000110001111110", 
    66 => "00111101101010101011110001010001", 
    67 => "00111101000001111110111011100010", 
    68 => "10111100001000111111111101001110", 
    69 => "10111100111001011111000101100001", 
    70 => "00111110010001011011010000100100", 
    71 => "10111101101111001110001111011110", 
    72 => "00111101111111001101101110111110", 
    73 => "10111100100010101111100111111001", 
    74 => "00111110001010110011111010011010", 
    75 => "10111101111001011100101010110000", 
    76 => "00111101010001111011011011001000", 
    77 => "10111100100011001011011010010010", 
    78 => "10111100110000110101100000001111", 
    79 => "00111110000001101010011000011010", 
    80 => "00111101001001010110101001101101", 
    81 => "00111100101011010110100010000011", 
    82 => "10111100111001111011010110111100", 
    83 => "00111101111101010110001010011110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_82 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_82 is
    component inference_mult_1_120_120_84_s_W4_82_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_82_rom_U :  component inference_mult_1_120_120_84_s_W4_82_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


