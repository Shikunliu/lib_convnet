-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_46_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_46_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111101000110010111101001", 
    1 => "00111100011101011000000001001010", 
    2 => "10111101010101010111001111101011", 
    3 => "10111101100011001010100111010100", 
    4 => "10111100011010001101101111110111", 
    5 => "00111100110001000111101010111001", 
    6 => "10111101111001011110100100011000", 
    7 => "10111110010010000001100110001111", 
    8 => "00111101000100011110100000101010", 
    9 => "10111110001010110111010000010101", 
    10 => "00111110011010010101100001010011", 
    11 => "10111110011100101100000100101011", 
    12 => "10111100101001000110110001011011", 
    13 => "00111101000000001111110101110001", 
    14 => "00111101100010011110101100010011", 
    15 => "00111101111101100010000111111011", 
    16 => "10111101001001001110111111011001", 
    17 => "00111101111000010001010011010011", 
    18 => "10111101010010100011001010111111", 
    19 => "00111101011010011111001010010010", 
    20 => "00111100010111000111000111110001", 
    21 => "00111101111110101101000110001101", 
    22 => "10111011111111110101101000101000", 
    23 => "10111101011100100011011010110100", 
    24 => "10111101111100100011111011100010", 
    25 => "00111100111010001110001100011000", 
    26 => "00111101101000110000101101101000", 
    27 => "10111100110100100100011100101010", 
    28 => "10111110011100100000101111000100", 
    29 => "00111101001001011000101100001010", 
    30 => "10111101110011000101110011000010", 
    31 => "10111101100011101010100100011110", 
    32 => "10111110001001010000011000010100", 
    33 => "00111100001001101000001010110110", 
    34 => "00111110000110011110000111110100", 
    35 => "00111101100001100110011100110000", 
    36 => "00111101110011011010010001001000", 
    37 => "10111101111000011101111100110011", 
    38 => "10111110011001001010001010111010", 
    39 => "00111101111110100000101111100101", 
    40 => "10111011110100011000000000100101", 
    41 => "00111110001111101000001100011011", 
    42 => "10111101100000011111101001101001", 
    43 => "10111110000100100010001100011000", 
    44 => "00111101010010100100010011001000", 
    45 => "00111110001101011110101100110001", 
    46 => "00111110000001010101110100011100", 
    47 => "00111100001001100011011110100010", 
    48 => "10111101001011110101111000001100", 
    49 => "10111101010010100101100111000000", 
    50 => "00111101100110010100110010110000", 
    51 => "10111100011010100111110000001010", 
    52 => "10111100100001010001000100010111", 
    53 => "00111011111100011110011110111001", 
    54 => "00111110001000100110011001110111", 
    55 => "00111110001010110011110010000010", 
    56 => "10111110001010100011000010011000", 
    57 => "10111101110110011001101100101100", 
    58 => "10111101100100110100010111111000", 
    59 => "00111101110011100111110011010000", 
    60 => "00111110000011000010100110111111", 
    61 => "10111110000010100101010010000010", 
    62 => "10111101100010011111000011010111", 
    63 => "00111100001101110010000111010101", 
    64 => "10111101100011101011110111000110", 
    65 => "10111101001010010101000001110110", 
    66 => "00111101000110101100100011110100", 
    67 => "10111110001111110011001110000111", 
    68 => "00111100100100010000110110100100", 
    69 => "10111101100001001001110110001001", 
    70 => "00111101100111010000101010101010", 
    71 => "00111110010011001100110001000111", 
    72 => "10111110000110001000000110100001", 
    73 => "10111101101100000001111000001011", 
    74 => "10111110000011111001011110101011", 
    75 => "10111110011001101001001001110001", 
    76 => "10111101111100001111000011101001", 
    77 => "10111101010001110010110001011111", 
    78 => "00111100100010011111111111111110", 
    79 => "00111101100010101110101011010010", 
    80 => "00111101101101010000110101111001", 
    81 => "10111101001011100110010000010001", 
    82 => "10111101010111110011100100010110", 
    83 => "00111101011001011101101001101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_46 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_46 is
    component inference_mult_1_120_120_84_s_W4_46_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_46_rom_U :  component inference_mult_1_120_120_84_s_W4_46_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


