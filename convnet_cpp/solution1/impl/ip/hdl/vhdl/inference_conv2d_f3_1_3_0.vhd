-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110111001100110110010110", 
    1 => "10111101100110011011000111100000", 
    2 => "00111100000000010010101111101111", 
    3 => "10111101011111110010101110101010", 
    4 => "00111101011000111101111100011101", 
    5 => "00111101010011111011011101001000", 
    6 => "00111101000011010101110000001001", 
    7 => "10111101011000000101111010010101", 
    8 => "00111011100000101111110100001011", 
    9 => "00111100011100000100001010001000", 
    10 => "10111101111011111101000010001101", 
    11 => "10111100000101110100001011011101", 
    12 => "00111101101101111001111010101010", 
    13 => "00111101100010100111111101100101", 
    14 => "00111101001101100000001111001000", 
    15 => "10111101001010011010110010111101", 
    16 => "00111101000110010011001011110010", 
    17 => "10111101100011010011011110001100", 
    18 => "10111101011000010110110101010011", 
    19 => "00111110000111110100110110111110", 
    20 => "10111100110010000000110010101001", 
    21 => "00111100000110000001110000001011", 
    22 => "10111110000011110000010011011110", 
    23 => "10111101000111000101010000101001", 
    24 => "00111101001010011010000111010101", 
    25 => "00111100101010011011101010101111", 
    26 => "00111101110010100100010000011001", 
    27 => "00111100000100001000001001001110", 
    28 => "00111100100001010111101010010011", 
    29 => "00111101000101101100100110100110", 
    30 => "10111101110101100000110100000010", 
    31 => "00111101100000101001100110111110", 
    32 => "10111101011001101110000101100110", 
    33 => "00111101001101101011111100001111", 
    34 => "10111101111000000011000101001000", 
    35 => "00111100010111100010110001110001", 
    36 => "00111101100110010011111001000101", 
    37 => "00111100001000101111111101110100", 
    38 => "00111101101100111011011010100100", 
    39 => "10111101101111111000001001101111", 
    40 => "00111101100100011000011110100101", 
    41 => "00111110001000011101101001111011", 
    42 => "00111101011110000111001111001010", 
    43 => "00111101010000011111011111010111", 
    44 => "00111100011101111011000111101000", 
    45 => "00111101000111000101000101101111", 
    46 => "10111101000010011110001101011110", 
    47 => "10111100110010110001001000010111", 
    48 => "10111101101010110010111011100000", 
    49 => "00111100100010011010011100010011", 
    50 => "00111101110111000001001011110001", 
    51 => "00111101110111110011001110000111", 
    52 => "10111101100001110000101010101001", 
    53 => "10111101000000011111000111011101", 
    54 => "00111101101101111010110100010101", 
    55 => "00111101101101011011010110011100", 
    56 => "10111101110001100101001111001010", 
    57 => "00111110000101001011011110110011", 
    58 => "00111101000011101000110000011111", 
    59 => "10111100100000110110101011101111", 
    60 => "00111101100101101010010000000001", 
    61 => "00111101100010111111111010011001", 
    62 => "10111101001010101101000111101011", 
    63 => "00111110000101100111010100010100", 
    64 => "10111101101111101101101000111110", 
    65 => "00111100101101001000001110010101", 
    66 => "10111011110101111000010001110110", 
    67 => "10111101110010011011011110010111", 
    68 => "10111101101110101000000100010011", 
    69 => "10111110000100111001011000000111", 
    70 => "00111110001110000000100111010101", 
    71 => "10111110000110011000100001001100", 
    72 => "00111101010110011000011001101001", 
    73 => "10111101010101010111011011110101", 
    74 => "00111101101000011110001001110011", 
    75 => "10111101101100001001111001001000", 
    76 => "10111110000100111101111010100100", 
    77 => "00111110001110111101001010110111", 
    78 => "00111110001101000110000101110100", 
    79 => "10111010111110100101110011111110", 
    80 => "10111110000101000001110101001011", 
    81 => "00111100010001000000001010001110", 
    82 => "00111110001110110111001111010010", 
    83 => "00111101000001011111011111100001", 
    84 => "00111100111010100011000001010101", 
    85 => "00111110000111101110001111010110", 
    86 => "00111101110011011011010100001111", 
    87 => "10111100111011110001111010011100", 
    88 => "00111110001101110010111010101110", 
    89 => "00111110000101001001010110011110", 
    90 => "00111101110010010001010001101110", 
    91 => "10111110001010101110001101100001", 
    92 => "10111101111100011110111110110111", 
    93 => "00111110010001001011101101011110", 
    94 => "10111100010100010101000110010111", 
    95 => "00111101101010111001010100101010", 
    96 => "00111101001000100001000110100011", 
    97 => "00111101110001111001011100010000", 
    98 => "00111110010000001011010001011011", 
    99 => "00111101010011100000000011011111", 
    100 => "10111011100010110010010011001100", 
    101 => "00111110010101000101100101010011", 
    102 => "00111101100000110010110111110101", 
    103 => "00111100000000110100001000010100", 
    104 => "10111100111110001011010110001001", 
    105 => "00111100010110001010001110011011", 
    106 => "10111110001000011001001011101010", 
    107 => "10111101010110110100110111101010", 
    108 => "10111101110001110000000110111111", 
    109 => "10111101110101100000010100100101", 
    110 => "00111100001111100001011010111100", 
    111 => "00111101100011100111000001100011", 
    112 => "10111110000000111000100111111000", 
    113 => "00111100011101100100101110110111", 
    114 => "10111100011101011010000000101011", 
    115 => "00111101110001100000100100111100", 
    116 => "10111100111101101010111101010100", 
    117 => "10111101100100000100111100111000", 
    118 => "00111101100011011111000000110011", 
    119 => "10111101100011010110000110001010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_0 is
    component inference_conv2d_f3_1_3_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_0_rom_U :  component inference_conv2d_f3_1_3_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


