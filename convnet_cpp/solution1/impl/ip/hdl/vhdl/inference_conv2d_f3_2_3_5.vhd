-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000101100101111011001100", 
    1 => "00111101111001010100100010101010", 
    2 => "00111110010010010110010001100011", 
    3 => "10111101010101011010111010111110", 
    4 => "00111101011100101100010110111011", 
    5 => "00111101100011000011100110101111", 
    6 => "00111101100110010100110010111101", 
    7 => "00111101110100001101100011001011", 
    8 => "10111101111010111111001010110010", 
    9 => "10111100101000001100111111101111", 
    10 => "00111110001001100001010111101100", 
    11 => "00111100101100101101010111100000", 
    12 => "00111100000010001001101000101101", 
    13 => "00111100011110011010110100000000", 
    14 => "00111110000101011010011101001100", 
    15 => "00111101100011111111111110100010", 
    16 => "10111100100100010101101101110010", 
    17 => "00111101110011010010001101001111", 
    18 => "10111100110001100111101100001111", 
    19 => "10111101111110110101001110010011", 
    20 => "00111101001011110001011010001001", 
    21 => "00111101110111101101100111100000", 
    22 => "00111101101100010001001111010100", 
    23 => "10111101011000110101101100011001", 
    24 => "10111100101001100000100010101000", 
    25 => "00111011011100010011110100011010", 
    26 => "10111100001011101101001001111011", 
    27 => "10111101011110110011010000011110", 
    28 => "10111110001100110111001001100000", 
    29 => "10111101111001100100010111100101", 
    30 => "10111101011101001001010110000100", 
    31 => "00111101101010110011101011101111", 
    32 => "10111100110100110010001011110010", 
    33 => "10111010001110100011101101101001", 
    34 => "00111101010100001001100101000000", 
    35 => "00111101001000100010111010101110", 
    36 => "10111101011111001110000110111000", 
    37 => "10111101011001110110011011111101", 
    38 => "10111101110101101000100000110111", 
    39 => "00111101110100010111110111110010", 
    40 => "10111101010110000010000010001000", 
    41 => "00111101000000001110011110111100", 
    42 => "00111101001010001011111100000110", 
    43 => "10111101000000101001111110011101", 
    44 => "00111101101000000001010001011000", 
    45 => "10111110010001011111100000001010", 
    46 => "10111011101010000000010010000001", 
    47 => "00111100100000010110001000000000", 
    48 => "00111101011011001010100010000101", 
    49 => "10111110001100010001000001011110", 
    50 => "10111011110011110110101011100010", 
    51 => "00111101001011011101101110100110", 
    52 => "00111100111001101100110110010100", 
    53 => "00111110001111101010100001010100", 
    54 => "10111101001111110110001101110011", 
    55 => "00111100011001100000011110011100", 
    56 => "10111101110010100111101001000010", 
    57 => "10111101100010100110000000001011", 
    58 => "10111100111101111111110000100101", 
    59 => "10111101100101110010001000100110", 
    60 => "10111011111001101001100100010001", 
    61 => "10111110010010110011011111001010", 
    62 => "00111101001001011011100011000001", 
    63 => "10111101100000101111101010010100", 
    64 => "10111100011100100101000011101011", 
    65 => "00111100100100011111000010001110", 
    66 => "00111101100000000101111001011111", 
    67 => "00111100100111110001100011001010", 
    68 => "00111011000001011010001011101101", 
    69 => "10111101011001111100110001100010", 
    70 => "00111100110110010100101100101011", 
    71 => "00111101001000110101011100000010", 
    72 => "10111101100110110011101110011101", 
    73 => "10111101001011110000000000011000", 
    74 => "10111100101011000101000010001011", 
    75 => "10111101110010100011100010000011", 
    76 => "00111110000111101110010100100110", 
    77 => "00111100100001001111010011111101", 
    78 => "10111011010100011010111110110110", 
    79 => "10111101100111111000101000110001", 
    80 => "10111101001001001111110000111001", 
    81 => "00111101111010000011110000101001", 
    82 => "10111101100100000000011101111111", 
    83 => "10111101111111101100101000100101", 
    84 => "10111110001101100001010111101100", 
    85 => "10111101000001111110101110100010", 
    86 => "00111110000010001000001101110111", 
    87 => "00111101111010010001100101101001", 
    88 => "00111101011110011001110101111011", 
    89 => "10111101101111011010111100010101", 
    90 => "00111100101010001100010110111100", 
    91 => "10111101111100011100000000000001", 
    92 => "00111110000001100100011111111110", 
    93 => "00111100100111100001101101110100", 
    94 => "10111011110010001110110101101111", 
    95 => "00111100100111010000100010111010", 
    96 => "10111110000001101100111001111001", 
    97 => "10111100110101110000010010010100", 
    98 => "00111110010001111100000001101110", 
    99 => "00111100001101110000000100011110", 
    100 => "00111101110011011010011011100111", 
    101 => "10111101100110101011001011000111", 
    102 => "10111110000001000000011011000000", 
    103 => "00111101000011010101100101001111", 
    104 => "00111100110101010001000111100000", 
    105 => "10111011101010000011011000101010", 
    106 => "00111101001111001000011111000000", 
    107 => "00111110000011010011101000011101", 
    108 => "10111101101011000110010010100000", 
    109 => "00111101111101110111010010101100", 
    110 => "10111101100101101111101111010010", 
    111 => "10111101001111010110110100101110", 
    112 => "00111100101000011010101000001001", 
    113 => "00111110000011001001000011000101", 
    114 => "00111100100011101011001001001010", 
    115 => "10111101101000010110000010111110", 
    116 => "10111101110011100010010010111100", 
    117 => "10111101111001010110110001010001", 
    118 => "10111101110001011010010011111101", 
    119 => "10111011001111011100101111010011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_5 is
    component inference_conv2d_f3_2_3_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_5_rom_U :  component inference_conv2d_f3_2_3_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


