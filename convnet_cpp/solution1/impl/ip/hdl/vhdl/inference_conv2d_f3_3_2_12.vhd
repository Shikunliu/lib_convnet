-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100010001010100101101100100", 
    1 => "10111101000110101010101101000111", 
    2 => "10111011111110001101110110001100", 
    3 => "00111101110110001011011100011100", 
    4 => "00111101011101010011111110011000", 
    5 => "00111101110010101001111101111011", 
    6 => "10111101111110111001100011001000", 
    7 => "00111011110110101010111000100001", 
    8 => "00111100110110111011000100000001", 
    9 => "10111101110111111000011001011101", 
    10 => "00111100000011010010011000111001", 
    11 => "00111101011010000101110001000000", 
    12 => "10111101101010110000111000001110", 
    13 => "10111110000111001110101111111111", 
    14 => "10111101101111111100011001111100", 
    15 => "10111101111101000011011010111001", 
    16 => "10111101011111010000000011110111", 
    17 => "00111101110010100111110101001100", 
    18 => "10111100110100110001000101010101", 
    19 => "00111100000001100001010010101101", 
    20 => "10111110000100011011101000111101", 
    21 => "00111101101001010000110001101100", 
    22 => "00111101101101101100110000101010", 
    23 => "10111101011001110111111111110001", 
    24 => "10111100101011100111010101011110", 
    25 => "10111101100010110101110001100010", 
    26 => "10111101101001100101001001111010", 
    27 => "00111101111111000111100110110011", 
    28 => "00111101010101110011101000101001", 
    29 => "00111110001000101101111100001101", 
    30 => "10111101110001001000101110101000", 
    31 => "00111101011010110101000100110111", 
    32 => "10111101010110011101100111000110", 
    33 => "00111101010011000111111100011010", 
    34 => "10111101010101100111000100100110", 
    35 => "10111101110010000100001111111001", 
    36 => "00111110001001000101010001011000", 
    37 => "00111100110101110011010111011100", 
    38 => "10111010111010101001101111000000", 
    39 => "00111101100010100001010111001110", 
    40 => "00111001111111110100000110100101", 
    41 => "00111100101011001011101000001000", 
    42 => "10111100101010100011001111100110", 
    43 => "00111110000000100011111101101000", 
    44 => "10111011100111000111100001011100", 
    45 => "00111101010101110000011101001110", 
    46 => "00111110001101111001011000111010", 
    47 => "10111101010101111001100010100011", 
    48 => "00111101111100001010110101000111", 
    49 => "10111100000110111110101011001101", 
    50 => "10111101100111011011101100111111", 
    51 => "10111101010101010100110010110011", 
    52 => "10111110001011111010011100100010", 
    53 => "10111101001110000010111110111101", 
    54 => "10111101001110011111010001001101", 
    55 => "10111110000001110000011011010101", 
    56 => "10111101111110100100010110010001", 
    57 => "10111101101111111011110101010000", 
    58 => "00111101001001110011000100110010", 
    59 => "00111100001000101101110010000100", 
    60 => "00111100100100000101100011011110", 
    61 => "00111101100111001000010011010001", 
    62 => "10111101110000111101101101100100", 
    63 => "00111100011111101011001011111001", 
    64 => "00111101000110101010101100101100", 
    65 => "00111100111001101011001101011110", 
    66 => "00111101111101101001010001000110", 
    67 => "10111100101010010111110000110000", 
    68 => "00111101011010011100010010100101", 
    69 => "00111101100100011001011110010101", 
    70 => "10111101011011001010001010100110", 
    71 => "10111010001011001100101110001100", 
    72 => "00111101101000010101010001000011", 
    73 => "10111101111001010000001011101111", 
    74 => "00111101101100110110111010100111", 
    75 => "10111101101000111100001011000000", 
    76 => "10111100101101011111000101010100", 
    77 => "00111101100000101010011000111000", 
    78 => "00111110000010000000010110100011", 
    79 => "00111101111100101101010001001110", 
    80 => "10111101111000001001010111110010", 
    81 => "10111101101101100010110011010101", 
    82 => "10111100101000001110100000001101", 
    83 => "00111101110010101011111100110100", 
    84 => "10111101000111110001010100000100", 
    85 => "00111101110111101101010110101110", 
    86 => "10111101010100000010001001010111", 
    87 => "00111110000101010010000101010111", 
    88 => "10111101100100110011101010011000", 
    89 => "00111101000001111110011001100011", 
    90 => "00111101101111010111100100010101", 
    91 => "10111100010110000110110010101001", 
    92 => "10111101010000010000101010001100", 
    93 => "10111011110011100001011001001110", 
    94 => "10111100111001010011100000110011", 
    95 => "00111101110110100101110000011100", 
    96 => "00111101100011101101010111100100", 
    97 => "00111101110001111101111000110110", 
    98 => "10111101010001100101010010101110", 
    99 => "10111101001101110111010011100001", 
    100 => "00111100001101110110011111100001", 
    101 => "00111101101000000110001101011010", 
    102 => "00111101001110111011100011000011", 
    103 => "00111101100011011100000101111100", 
    104 => "10111101001100110010111111011000", 
    105 => "10111101110001110001000011011001", 
    106 => "00111101100110011000001110010100", 
    107 => "10111101100000001001111110001010", 
    108 => "00111101011111110111000110011010", 
    109 => "00111101010010000001000001110000", 
    110 => "10111110000110111000010011011100", 
    111 => "00111100011101011110000011000010", 
    112 => "00111101100000101011001101000110", 
    113 => "00111101001111000110001110010011", 
    114 => "00111101101101000110111001110100", 
    115 => "10111101101011010001000000011110", 
    116 => "10111110001010101110111100101100", 
    117 => "10111101101000101101100001001010", 
    118 => "00111101010001000011101000000111", 
    119 => "10111100000111110001101101011001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_12 is
    component inference_conv2d_f3_3_2_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_12_rom_U :  component inference_conv2d_f3_3_2_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


