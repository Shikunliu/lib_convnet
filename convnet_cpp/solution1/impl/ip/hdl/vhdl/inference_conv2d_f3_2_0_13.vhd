-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001011110100100011000", 
    1 => "00111101011010000110111011101010", 
    2 => "10111101010110100010110100100010", 
    3 => "00111101101100010110100100000110", 
    4 => "10111101100000111000011110011100", 
    5 => "10111110000011100000111010110110", 
    6 => "10111101100101101010111000010010", 
    7 => "10111101110111001111001111011100", 
    8 => "00111100100010100011110100000101", 
    9 => "00111101111100101111011111110101", 
    10 => "00111101110010000001110001010110", 
    11 => "10111100100100111110111011001010", 
    12 => "00111101101011110101110001000100", 
    13 => "10111110000101010010001101110000", 
    14 => "00111101110010010000111111010001", 
    15 => "10111100000101110001100010010110", 
    16 => "00111101100111000111001110111001", 
    17 => "00111101110101110110110111011011", 
    18 => "00111101011001111001100001100000", 
    19 => "10111101111011010000001001000111", 
    20 => "10111101010010110100111011101001", 
    21 => "00111110000001101101111000110011", 
    22 => "00111101110100001100010111101011", 
    23 => "00111101010011101101101110011011", 
    24 => "00111110010000011101110110100000", 
    25 => "00111101000101001001110001101111", 
    26 => "10111101010101001001100110000000", 
    27 => "00111101100010111110100011010111", 
    28 => "00111100011101110010100001010110", 
    29 => "00111101101001100010011110001010", 
    30 => "00111101101010000001010101111000", 
    31 => "00111110001011000011100011110011", 
    32 => "00111101111101000101101101101100", 
    33 => "10111101111000010101010011001010", 
    34 => "00111101100000001011010101011010", 
    35 => "00111100011101011111110001110001", 
    36 => "00111101001100000010101001101010", 
    37 => "10111101100000000001100010010111", 
    38 => "00111101111000100111001100001100", 
    39 => "10111110000001011110000100111011", 
    40 => "00111100110110101110100010111010", 
    41 => "00111101101111011100011011010101", 
    42 => "10111110000001000110111111011111", 
    43 => "10111100101111011111001011100000", 
    44 => "10111100100111100100000011001000", 
    45 => "10111101101011110110000111101101", 
    46 => "10111100101100100010110111100101", 
    47 => "10111101110001001111101100010010", 
    48 => "10111100110110010101111110111000", 
    49 => "00111101010101010000101110010101", 
    50 => "10111110001000111000110011011010", 
    51 => "00111101001010000010001011001001", 
    52 => "10111101101011010010000010000111", 
    53 => "00111110000100011001110100100100", 
    54 => "10111101100100111010011110001010", 
    55 => "10111101010011010101010100000011", 
    56 => "00111101110011111110111011110110", 
    57 => "10111101001101100000001001010000", 
    58 => "10111101111101011010110100010000", 
    59 => "10111101101110010111000101001000", 
    60 => "00111101110111110000101010100010", 
    61 => "10111100110000111001110101000011", 
    62 => "00111100110100100011011001100011", 
    63 => "00111010110110110100001110001000", 
    64 => "10111101000010010111101100100100", 
    65 => "00111101101111010110100101011010", 
    66 => "10111101100000100110010101011101", 
    67 => "00111101101001000011100011010010", 
    68 => "10111110000001001010010001001100", 
    69 => "10111101000110111111010001010010", 
    70 => "00111101111101000100101010100101", 
    71 => "10111101000111101000001101000011", 
    72 => "00111100001110001010001000001000", 
    73 => "00111110001100101010101111101111", 
    74 => "00111001111011011101011011101111", 
    75 => "00111101100110110111011100010010", 
    76 => "10111101011011110111110111101101", 
    77 => "10111110000101001010001110000011", 
    78 => "10111100000111010111011111101011", 
    79 => "00111101001110000111101010110110", 
    80 => "10111101100010000111100110110111", 
    81 => "10111011110010011111011001101110", 
    82 => "00111011110010011011100111011101", 
    83 => "00111101001000000101010110010000", 
    84 => "10111101000011001101101001010100", 
    85 => "10111101101011101001010100001001", 
    86 => "00111101100011110110111001011010", 
    87 => "10111101101111010101000100000111", 
    88 => "10111100011011001000001001110101", 
    89 => "00111100011101101001111011000011", 
    90 => "10111011111010000110100111110111", 
    91 => "00111101101110000000000111101010", 
    92 => "00111101100110001011101000011001", 
    93 => "10111101111110111100001111000110", 
    94 => "10111101011010110101011010101011", 
    95 => "10111101100110001000101001001000", 
    96 => "10111011100010100100100001000011", 
    97 => "10111101110111001101010101110011", 
    98 => "00111101011010100010110001011001", 
    99 => "10111101001011011100101001110011", 
    100 => "00111101010000110010100001110100", 
    101 => "00111100110101100010000110101010", 
    102 => "00111101111101110000010001111001", 
    103 => "00111101101010101100001000001000", 
    104 => "00111110000011011011000011011110", 
    105 => "00111100110011100001000100000101", 
    106 => "00111101011010011011010010110101", 
    107 => "10111010100000100010000000011010", 
    108 => "00111101110001011000100000101000", 
    109 => "00111101000000010000000000101011", 
    110 => "00111110010010011111111001000011", 
    111 => "00111100000001101000001111001000", 
    112 => "00111101100111001111101111111100", 
    113 => "00111110000010111010101101100101", 
    114 => "10111101011100011010011101111000", 
    115 => "10111110001001100010011011110110", 
    116 => "10111110000111101011011110001001", 
    117 => "00111100110111110001001001001010", 
    118 => "00111101111111010111111001000110", 
    119 => "00111100110001001101110110110101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_13 is
    component inference_conv2d_f3_2_0_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_13_rom_U :  component inference_conv2d_f3_2_0_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


