-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101011000011110001110111", 
    1 => "10111101101101010000000001011101", 
    2 => "10111110000000110001110000100010", 
    3 => "00111101010000010110101100011111", 
    4 => "00111101101001001111000001101101", 
    5 => "00111101111100011110100001100000", 
    6 => "10111101000000010111010011111010", 
    7 => "00111100001100100111101100010010", 
    8 => "10111110000000010000100100000111", 
    9 => "00111110000001110111100010011010", 
    10 => "10111100100101110001101000101110", 
    11 => "00111101110111000100011111100101", 
    12 => "00111101101100100110110001001001", 
    13 => "00111101010100001011011101011000", 
    14 => "10111100011011001011110100101101", 
    15 => "00111101100000010001010111000101", 
    16 => "00111101110110000101011100101010", 
    17 => "00111110001110100100100000110000", 
    18 => "00111101001110110111011001001000", 
    19 => "00111110001011101000001101011110", 
    20 => "00111110001011011101110110110001", 
    21 => "00111101000110011001110000000011", 
    22 => "10111110000010011010000000100111", 
    23 => "10111101100001001101101011111011", 
    24 => "10111101011011101101110000100001", 
    25 => "00111100010001101110111001100110", 
    26 => "00111101100100000100001110010101", 
    27 => "00111101101100111010011000111011", 
    28 => "10111101100100100001101001110010", 
    29 => "10111101100001101110000110011100", 
    30 => "00111110001001101110000101011000", 
    31 => "10111100001000101100111001101100", 
    32 => "00111100010110101100000110000010", 
    33 => "00111101011101011101001010011010", 
    34 => "00111101011010111010011011000111", 
    35 => "00111110010011111111111110111101", 
    36 => "00111100110000001111101000110001", 
    37 => "00111101110111010011100010001011", 
    38 => "00111101001010011001100010000000", 
    39 => "00111101110010010110011101101101", 
    40 => "00111100100001110000001101011111", 
    41 => "10111101000111101000000101000101", 
    42 => "10111110000011000100100101110111", 
    43 => "00111110001101111001011110001001", 
    44 => "00111101001101101101101010111101", 
    45 => "00111101110000111001001110101011", 
    46 => "10111101100101100000000000001111", 
    47 => "10111101110101111011011000110101", 
    48 => "10111101100010011111000011001010", 
    49 => "10111110000100111000000010001000", 
    50 => "10111101011110110111011101110000", 
    51 => "00111101101001010001101000110110", 
    52 => "10111011110101110111010100110010", 
    53 => "00111101111111000111001111101111", 
    54 => "00111101000110100101101010001010", 
    55 => "10111110000110010110111010011100", 
    56 => "00111100111011000010101101101101", 
    57 => "10111011100101010100001111110100", 
    58 => "00111100101010100100001010010100", 
    59 => "10111101011000100110100000100101", 
    60 => "10111100111000111111011000010100", 
    61 => "10111100000001001101001010100011", 
    62 => "10111100110100111001011111111000", 
    63 => "00111101001011001010110000110000", 
    64 => "00111101000000011100110010111111", 
    65 => "10111100101000100100101110000100", 
    66 => "00111101100000111010010010101000", 
    67 => "10111101101111010111101000100001", 
    68 => "10111101001100111101100000100100", 
    69 => "10111101110001110000101000100011", 
    70 => "10111010110110100011001110111110", 
    71 => "10111110000101100000010100100101", 
    72 => "00111101010110001001000100001011", 
    73 => "10111110000000011111011111010111", 
    74 => "10111101101000011100110101111010", 
    75 => "10111101001101010001001100100010", 
    76 => "00111100100101110010011010001101", 
    77 => "00111101100110001100101001011001", 
    78 => "10111101000000111001110001010010", 
    79 => "10111101101001001101110011010001", 
    80 => "00111101001010001011011011110011", 
    81 => "10111101001001011110011000101001", 
    82 => "00111010110111110101001101100010", 
    83 => "10111101010000111110100111101010", 
    84 => "10111110010100101111101101011101", 
    85 => "10111101101011110100110110010110", 
    86 => "00111101010011011101100001100110", 
    87 => "00111101110100001001101011101101", 
    88 => "00111101010011010001010010100001", 
    89 => "00111101000110011110100110011011", 
    90 => "10111101100100101000111000011010", 
    91 => "10111101000111111000001111110100", 
    92 => "10111101010101100011000010001110", 
    93 => "00111101101100111001010011111011", 
    94 => "00111101101001000110111011111011", 
    95 => "00111110001011111100110011100010", 
    96 => "00111011100110011110110101010001", 
    97 => "10111100111111001010101001110110", 
    98 => "00111101001100001001011101000010", 
    99 => "10111101111110011010001010000011", 
    100 => "10111110001000010110010001000001", 
    101 => "10111100110100101000100101101111", 
    102 => "10111110000111000110110010011000", 
    103 => "00111101100000001001000000101110", 
    104 => "10111110000000011011000111011001", 
    105 => "10111110001000000000100111110110", 
    106 => "00111101101111010110001010010111", 
    107 => "00111101110100001000110011000101", 
    108 => "10111101010001000100111111010110", 
    109 => "10111100110000000100101000111101", 
    110 => "00111101111011011011101111100000", 
    111 => "10111101010000101001101011001010", 
    112 => "00111101011101000011101011101011", 
    113 => "00111101101101010110111011111101", 
    114 => "00111001110000011011111000000100", 
    115 => "00111101101010100010111111001111", 
    116 => "10111101100000001011110001101110", 
    117 => "00111101011111000101010001011111", 
    118 => "00111101011100101011011001010001", 
    119 => "10111100110110000111000000111001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_7 is
    component inference_conv2d_f3_2_2_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_7_rom_U :  component inference_conv2d_f3_2_2_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


