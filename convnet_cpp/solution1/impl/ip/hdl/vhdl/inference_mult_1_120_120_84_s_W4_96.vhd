-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_96_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_96_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110101101110001001100101", 
    1 => "10111100011111010001000110100100", 
    2 => "00111101010000000111010000010100", 
    3 => "00111100001111101001010111010010", 
    4 => "10111101101110100011000001110000", 
    5 => "00111101110110000111101001001010", 
    6 => "10111101110010001010111110001111", 
    7 => "00111101011101110101111011110111", 
    8 => "00111101100110111110111010110110", 
    9 => "10111100100011101010000010101101", 
    10 => "00111101110110111101110001101010", 
    11 => "10111100110001011001110011111000", 
    12 => "10111100101010001100110100010011", 
    13 => "00111100100011110011010111001000", 
    14 => "00111011101000101010110111101010", 
    15 => "00111101010001100111011100101101", 
    16 => "00111101011000001100000011010101", 
    17 => "10111101101100110100110010010011", 
    18 => "10111101111110101001111100111000", 
    19 => "00111100001101110100010100010001", 
    20 => "10111101100100010001101001100010", 
    21 => "00111101010001000110010000101110", 
    22 => "00111101001111110000110110101101", 
    23 => "10111110001101111010111000010100", 
    24 => "10111100110010111101011101101111", 
    25 => "10111101110010001100000100011111", 
    26 => "00111110000101010001001001100110", 
    27 => "10111101000101000100101101100001", 
    28 => "10111010110110100110010000001111", 
    29 => "10111100100000010000100010101001", 
    30 => "00111100000111010110010000101001", 
    31 => "00111101111001110001000111011000", 
    32 => "00111101000110111111101010000010", 
    33 => "00111110001101111001010000100001", 
    34 => "10111101101001101100001011010101", 
    35 => "00111101011011011001011101111101", 
    36 => "00111100111000110111011010010010", 
    37 => "00111100000111001101101100001101", 
    38 => "10111110000001111011010001011111", 
    39 => "00111101111010001000000101011110", 
    40 => "00111101000110000110010110100010", 
    41 => "00111101111101100111101000010000", 
    42 => "10111110001010110011010101101110", 
    43 => "10111101111101001000011111111101", 
    44 => "10111101000101010001010110001100", 
    45 => "10111100010000000101100100100001", 
    46 => "10111101011000010001011010000000", 
    47 => "00111110001001000010011010111011", 
    48 => "00111101101011011000111011110010", 
    49 => "00111110001100010111101110010110", 
    50 => "10111101000000101010001010001101", 
    51 => "00111101100111101100010000010000", 
    52 => "00111110010001001000011010101101", 
    53 => "00111101010000111010100110001000", 
    54 => "10111110000011011011010110010101", 
    55 => "10111101010101100000011100001000", 
    56 => "00111101101110111011001010111100", 
    57 => "10111100010110101010100110011010", 
    58 => "10111110000001110010001001011011", 
    59 => "00111110000100000011100000011001", 
    60 => "00111100110001100001100101010100", 
    61 => "00111110000100111000101000111011", 
    62 => "10111110010010001101000111011001", 
    63 => "00111110001011000010011010011010", 
    64 => "10111101000111101010100100000011", 
    65 => "00111100111111111001101101010110", 
    66 => "10111110001001011111011010111010", 
    67 => "00111100110010111111010100000001", 
    68 => "10111100110011100100011000010100", 
    69 => "00111101000011001111110111000101", 
    70 => "00111100100000100011011001110001", 
    71 => "00111110001000011001110100100100", 
    72 => "00111101110111110111110001100111", 
    73 => "00111101110100110100111110000011", 
    74 => "00111101011101001010110110000111", 
    75 => "00111101101010000000000011111000", 
    76 => "10111101001001011111111100000011", 
    77 => "10111110000001110011111101110101", 
    78 => "00111110000011101111110101000100", 
    79 => "10111100011100111010110101110111", 
    80 => "10111101100010001110001010111010", 
    81 => "00111101110100100111010001011100", 
    82 => "00111110000101010101110110100010", 
    83 => "10111101111111111111010110000100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_96 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_96 is
    component inference_mult_1_120_120_84_s_W4_96_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_96_rom_U :  component inference_mult_1_120_120_84_s_W4_96_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


