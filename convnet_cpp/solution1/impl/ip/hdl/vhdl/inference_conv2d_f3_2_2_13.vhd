-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010100000001001001010000100", 
    1 => "00111110010100101000110110000110", 
    2 => "10111101010001101001000101001001", 
    3 => "10111101011110000011100001110001", 
    4 => "00111101100000001110010011001101", 
    5 => "10111101100101110111000101111001", 
    6 => "10111011010111111001011000101000", 
    7 => "00111101111000010110100111000010", 
    8 => "10111101010110100010100000110101", 
    9 => "00111101000000100010100000010011", 
    10 => "00111101000000001011111010111100", 
    11 => "00111101000101010100111110111110", 
    12 => "10111101000000101100010000000000", 
    13 => "10111101100101011110111011101010", 
    14 => "00111101011100011001010001100010", 
    15 => "10111101110110001001011010011010", 
    16 => "00111101101101111000110011001010", 
    17 => "10111101010001110001011011100000", 
    18 => "00111101010111111111000000101011", 
    19 => "00111011100110000111101010100000", 
    20 => "00111100000011010100001110001010", 
    21 => "10111101111001100101111100001111", 
    22 => "10111101101000000100001110111101", 
    23 => "00111101101000010000111100101001", 
    24 => "10111101001011001111001101100011", 
    25 => "00111101110011110110001011111010", 
    26 => "10111101011111010011110001010001", 
    27 => "00111101100101101110010011101001", 
    28 => "00111101100100111101000110100100", 
    29 => "10111010101101110111011101111011", 
    30 => "00111100000101011111001000001111", 
    31 => "10111101101001001010001000110100", 
    32 => "10111101000011011000111011111111", 
    33 => "10111101110101011110110100000111", 
    34 => "00111101000110000011001110111001", 
    35 => "10111101100101011011110001111010", 
    36 => "00111101111011001011000110001001", 
    37 => "10111110010000101111010101010110", 
    38 => "00111101000001010011111010011001", 
    39 => "00111011111110010000101000011000", 
    40 => "00111101010101010111001111101011", 
    41 => "00111101010110000100001011101101", 
    42 => "00111110000110010111110100000111", 
    43 => "00111100111011010110110000010100", 
    44 => "10111100000101100011000000100011", 
    45 => "10111100100101110111100001010111", 
    46 => "10111101001110001101111010100100", 
    47 => "10111110001101011000101011111100", 
    48 => "10111110010000111100100111101111", 
    49 => "00111101100100101111011011001101", 
    50 => "10111101111001110110010010101110", 
    51 => "10111100111001100101111001101110", 
    52 => "10111110001001011001101000110001", 
    53 => "10111110001111000101101011000100", 
    54 => "10111110001100110100001011101110", 
    55 => "00111011010010111011011101001110", 
    56 => "00111110000010011100111011010001", 
    57 => "00111100111111010101110011101101", 
    58 => "10111011110011011000111111000000", 
    59 => "00111101101100001000101011111101", 
    60 => "00111101110011010010111101011110", 
    61 => "10111101110000100001111011011001", 
    62 => "00111110000011110101111111010100", 
    63 => "00111110000101110011011010001011", 
    64 => "00111101101101000011001100110110", 
    65 => "00111110001011100101111000100100", 
    66 => "00111101100101010011100001110110", 
    67 => "10111110000011011101110001100010", 
    68 => "00111100110010100110000011100010", 
    69 => "10111100110111110111011100101001", 
    70 => "10111011111101000101000111110111", 
    71 => "00111011110010111011110001010111", 
    72 => "00111101110110101110000011000001", 
    73 => "10111100110101101111011010111101", 
    74 => "00111101101101011011001111100001", 
    75 => "10111101101010101101011011100110", 
    76 => "00111101101010011111011011010010", 
    77 => "00111110010010111101001100111101", 
    78 => "00111110001011110101111011001000", 
    79 => "00111110000010001100100000100110", 
    80 => "10111100101111010110111001010101", 
    81 => "10111010110101101101010100001110", 
    82 => "00111110000011001001111110110110", 
    83 => "10111100110011101011000001100111", 
    84 => "10111101000000001011001101101001", 
    85 => "10111110000100101000000111111110", 
    86 => "00111101001111101000000111001011", 
    87 => "00111101010101000010010010010101", 
    88 => "10111110000011110011110011110111", 
    89 => "10111101100110101101000010001110", 
    90 => "10111110000011010011001101001100", 
    91 => "00111101101010000101111111101011", 
    92 => "10111101110101010000110010100010", 
    93 => "00111011000010111110010111010010", 
    94 => "10111101100100111000110110010110", 
    95 => "00111101110100111111110100001101", 
    96 => "10111101011001110000000001110000", 
    97 => "00111101001111101001010011000110", 
    98 => "00111100101110101011101000010000", 
    99 => "00111101000011111111000111001011", 
    100 => "00111110000011100000000001001011", 
    101 => "00111100110100000011000011010000", 
    102 => "10111100101000110000110110110111", 
    103 => "10111100110010111000111110110110", 
    104 => "00111101110111110100110110111110", 
    105 => "00111101110001110000111100011110", 
    106 => "10111100100110100110111011100001", 
    107 => "00111110000011110110000001011011", 
    108 => "00111100111101110100000111101011", 
    109 => "00111100001011100100110010101111", 
    110 => "00111100110100010100000110100111", 
    111 => "00111101110111001100100111101011", 
    112 => "00111110000010100001101010010011", 
    113 => "00111101001001010000011010110101", 
    114 => "10111100100100000000010011000101", 
    115 => "10111110000110110000111011100101", 
    116 => "00111101000100011010011111111110", 
    117 => "10111110000000110010110101101111", 
    118 => "00111101111111001000100001100001", 
    119 => "10111101100000010100000100010011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_13 is
    component inference_conv2d_f3_2_2_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_13_rom_U :  component inference_conv2d_f3_2_2_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


