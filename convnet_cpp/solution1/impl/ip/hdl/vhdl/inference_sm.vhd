-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_sm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    X_0_0_ce0 : OUT STD_LOGIC;
    X_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    X_0_0_ce1 : OUT STD_LOGIC;
    X_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    X_1_0_ce0 : OUT STD_LOGIC;
    X_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_1_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    X_1_0_ce1 : OUT STD_LOGIC;
    X_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    X_2_0_ce0 : OUT STD_LOGIC;
    X_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_2_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    X_2_0_ce1 : OUT STD_LOGIC;
    X_2_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    X_3_0_ce0 : OUT STD_LOGIC;
    X_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_3_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    X_3_0_ce1 : OUT STD_LOGIC;
    X_3_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    argmax_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    argmax_TVALID : OUT STD_LOGIC;
    argmax_TREADY : IN STD_LOGIC );
end;


architecture behav of inference_sm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal T_0_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal T_0_0_ce0 : STD_LOGIC;
    signal T_0_0_we0 : STD_LOGIC;
    signal T_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal T_1_0_ce0 : STD_LOGIC;
    signal T_1_0_we0 : STD_LOGIC;
    signal T_1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal T_2_0_ce0 : STD_LOGIC;
    signal T_2_0_we0 : STD_LOGIC;
    signal T_2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal T_3_0_ce0 : STD_LOGIC;
    signal T_3_0_we0 : STD_LOGIC;
    signal T_3_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_3_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_0_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal S_0_0_ce0 : STD_LOGIC;
    signal S_0_0_we0 : STD_LOGIC;
    signal S_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_1_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal S_1_0_ce0 : STD_LOGIC;
    signal S_1_0_we0 : STD_LOGIC;
    signal S_1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_2_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal S_2_0_ce0 : STD_LOGIC;
    signal S_2_0_we0 : STD_LOGIC;
    signal S_2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_3_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal S_3_0_ce0 : STD_LOGIC;
    signal S_3_0_we0 : STD_LOGIC;
    signal S_3_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_3_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_ap_start : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_ap_done : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_ap_idle : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_ap_ready : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_ce1 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_ce1 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_ce1 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_ce1 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_we0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_we0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_we0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_we0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_add_1_10_s_fu_416_ap_start : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_ap_done : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_ap_idle : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_ap_ready : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_A_0_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_inference_add_1_10_s_fu_416_A_0_0_ce0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_A_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_add_1_10_s_fu_416_A_1_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_inference_add_1_10_s_fu_416_A_1_0_ce0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_A_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_add_1_10_s_fu_416_A_2_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_inference_add_1_10_s_fu_416_A_2_0_ce0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_A_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_add_1_10_s_fu_416_A_3_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_inference_add_1_10_s_fu_416_A_3_0_ce0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_A_3_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_add_1_10_s_fu_416_C_0_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_inference_add_1_10_s_fu_416_C_0_0_ce0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_C_0_0_we0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_C_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_add_1_10_s_fu_416_C_1_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_inference_add_1_10_s_fu_416_C_1_0_ce0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_C_1_0_we0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_C_1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_add_1_10_s_fu_416_C_2_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_inference_add_1_10_s_fu_416_C_2_0_ce0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_C_2_0_we0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_C_2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_add_1_10_s_fu_416_C_3_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_inference_add_1_10_s_fu_416_C_3_0_ce0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_C_3_0_we0 : STD_LOGIC;
    signal grp_inference_add_1_10_s_fu_416_C_3_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_ap_start : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_ap_done : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_ap_idle : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_ap_ready : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_A_0_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_A_0_0_ce0 : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_A_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_A_1_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_A_1_0_ce0 : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_A_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_A_2_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_A_2_0_ce0 : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_A_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_A_3_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_A_3_0_ce0 : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_A_3_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_argmax_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_430_argmax_TVALID : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_430_argmax_TREADY : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_228_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_bdd_251 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_259 : BOOLEAN;
    signal grp_inference_add_1_10_s_fu_416_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_940 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_947 : BOOLEAN;
    signal grp_inference_softmax_1_10_s_fu_430_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_964 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_971 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component inference_mult_1_84_84_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_0_0_ce0 : OUT STD_LOGIC;
        A_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_0_0_ce1 : OUT STD_LOGIC;
        A_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_1_0_ce0 : OUT STD_LOGIC;
        A_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_1_0_ce1 : OUT STD_LOGIC;
        A_1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_2_0_ce0 : OUT STD_LOGIC;
        A_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_2_0_ce1 : OUT STD_LOGIC;
        A_2_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_3_0_ce0 : OUT STD_LOGIC;
        A_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_3_0_ce1 : OUT STD_LOGIC;
        A_3_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_0_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        C_0_0_ce0 : OUT STD_LOGIC;
        C_0_0_we0 : OUT STD_LOGIC;
        C_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_1_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        C_1_0_ce0 : OUT STD_LOGIC;
        C_1_0_we0 : OUT STD_LOGIC;
        C_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_2_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        C_2_0_ce0 : OUT STD_LOGIC;
        C_2_0_we0 : OUT STD_LOGIC;
        C_2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_3_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        C_3_0_ce0 : OUT STD_LOGIC;
        C_3_0_we0 : OUT STD_LOGIC;
        C_3_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_add_1_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_0_0_ce0 : OUT STD_LOGIC;
        A_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_1_0_ce0 : OUT STD_LOGIC;
        A_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_2_0_ce0 : OUT STD_LOGIC;
        A_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_3_0_ce0 : OUT STD_LOGIC;
        A_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_0_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        C_0_0_ce0 : OUT STD_LOGIC;
        C_0_0_we0 : OUT STD_LOGIC;
        C_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_1_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        C_1_0_ce0 : OUT STD_LOGIC;
        C_1_0_we0 : OUT STD_LOGIC;
        C_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_2_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        C_2_0_ce0 : OUT STD_LOGIC;
        C_2_0_we0 : OUT STD_LOGIC;
        C_2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_3_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        C_3_0_ce0 : OUT STD_LOGIC;
        C_3_0_we0 : OUT STD_LOGIC;
        C_3_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_softmax_1_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_0_0_ce0 : OUT STD_LOGIC;
        A_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        A_1_0_ce0 : OUT STD_LOGIC;
        A_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_2_0_ce0 : OUT STD_LOGIC;
        A_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_3_0_ce0 : OUT STD_LOGIC;
        A_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        argmax_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        argmax_TVALID : OUT STD_LOGIC;
        argmax_TREADY : IN STD_LOGIC );
    end component;


    component inference_sm_T_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_sm_T_2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    T_0_0_U : component inference_sm_T_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_0_0_address0,
        ce0 => T_0_0_ce0,
        we0 => T_0_0_we0,
        d0 => T_0_0_d0,
        q0 => T_0_0_q0);

    T_1_0_U : component inference_sm_T_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_1_0_address0,
        ce0 => T_1_0_ce0,
        we0 => T_1_0_we0,
        d0 => T_1_0_d0,
        q0 => T_1_0_q0);

    T_2_0_U : component inference_sm_T_2_0
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_2_0_address0,
        ce0 => T_2_0_ce0,
        we0 => T_2_0_we0,
        d0 => T_2_0_d0,
        q0 => T_2_0_q0);

    T_3_0_U : component inference_sm_T_2_0
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_3_0_address0,
        ce0 => T_3_0_ce0,
        we0 => T_3_0_we0,
        d0 => T_3_0_d0,
        q0 => T_3_0_q0);

    S_0_0_U : component inference_sm_T_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_0_0_address0,
        ce0 => S_0_0_ce0,
        we0 => S_0_0_we0,
        d0 => S_0_0_d0,
        q0 => S_0_0_q0);

    S_1_0_U : component inference_sm_T_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_1_0_address0,
        ce0 => S_1_0_ce0,
        we0 => S_1_0_we0,
        d0 => S_1_0_d0,
        q0 => S_1_0_q0);

    S_2_0_U : component inference_sm_T_2_0
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_2_0_address0,
        ce0 => S_2_0_ce0,
        we0 => S_2_0_we0,
        d0 => S_2_0_d0,
        q0 => S_2_0_q0);

    S_3_0_U : component inference_sm_T_2_0
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_3_0_address0,
        ce0 => S_3_0_ce0,
        we0 => S_3_0_we0,
        d0 => S_3_0_d0,
        q0 => S_3_0_q0);

    grp_inference_mult_1_84_84_10_s_fu_228 : component inference_mult_1_84_84_10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_mult_1_84_84_10_s_fu_228_ap_start,
        ap_done => grp_inference_mult_1_84_84_10_s_fu_228_ap_done,
        ap_idle => grp_inference_mult_1_84_84_10_s_fu_228_ap_idle,
        ap_ready => grp_inference_mult_1_84_84_10_s_fu_228_ap_ready,
        A_0_0_address0 => grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_address0,
        A_0_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_ce0,
        A_0_0_q0 => grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_q0,
        A_0_0_address1 => grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_address1,
        A_0_0_ce1 => grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_ce1,
        A_0_0_q1 => grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_q1,
        A_1_0_address0 => grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_address0,
        A_1_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_ce0,
        A_1_0_q0 => grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_q0,
        A_1_0_address1 => grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_address1,
        A_1_0_ce1 => grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_ce1,
        A_1_0_q1 => grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_q1,
        A_2_0_address0 => grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_address0,
        A_2_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_ce0,
        A_2_0_q0 => grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_q0,
        A_2_0_address1 => grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_address1,
        A_2_0_ce1 => grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_ce1,
        A_2_0_q1 => grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_q1,
        A_3_0_address0 => grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_address0,
        A_3_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_ce0,
        A_3_0_q0 => grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_q0,
        A_3_0_address1 => grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_address1,
        A_3_0_ce1 => grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_ce1,
        A_3_0_q1 => grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_q1,
        C_0_0_address0 => grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_address0,
        C_0_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_ce0,
        C_0_0_we0 => grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_we0,
        C_0_0_d0 => grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_d0,
        C_1_0_address0 => grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_address0,
        C_1_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_ce0,
        C_1_0_we0 => grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_we0,
        C_1_0_d0 => grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_d0,
        C_2_0_address0 => grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_address0,
        C_2_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_ce0,
        C_2_0_we0 => grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_we0,
        C_2_0_d0 => grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_d0,
        C_3_0_address0 => grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_address0,
        C_3_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_ce0,
        C_3_0_we0 => grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_we0,
        C_3_0_d0 => grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_d0);

    grp_inference_add_1_10_s_fu_416 : component inference_add_1_10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_add_1_10_s_fu_416_ap_start,
        ap_done => grp_inference_add_1_10_s_fu_416_ap_done,
        ap_idle => grp_inference_add_1_10_s_fu_416_ap_idle,
        ap_ready => grp_inference_add_1_10_s_fu_416_ap_ready,
        A_0_0_address0 => grp_inference_add_1_10_s_fu_416_A_0_0_address0,
        A_0_0_ce0 => grp_inference_add_1_10_s_fu_416_A_0_0_ce0,
        A_0_0_q0 => grp_inference_add_1_10_s_fu_416_A_0_0_q0,
        A_1_0_address0 => grp_inference_add_1_10_s_fu_416_A_1_0_address0,
        A_1_0_ce0 => grp_inference_add_1_10_s_fu_416_A_1_0_ce0,
        A_1_0_q0 => grp_inference_add_1_10_s_fu_416_A_1_0_q0,
        A_2_0_address0 => grp_inference_add_1_10_s_fu_416_A_2_0_address0,
        A_2_0_ce0 => grp_inference_add_1_10_s_fu_416_A_2_0_ce0,
        A_2_0_q0 => grp_inference_add_1_10_s_fu_416_A_2_0_q0,
        A_3_0_address0 => grp_inference_add_1_10_s_fu_416_A_3_0_address0,
        A_3_0_ce0 => grp_inference_add_1_10_s_fu_416_A_3_0_ce0,
        A_3_0_q0 => grp_inference_add_1_10_s_fu_416_A_3_0_q0,
        C_0_0_address0 => grp_inference_add_1_10_s_fu_416_C_0_0_address0,
        C_0_0_ce0 => grp_inference_add_1_10_s_fu_416_C_0_0_ce0,
        C_0_0_we0 => grp_inference_add_1_10_s_fu_416_C_0_0_we0,
        C_0_0_d0 => grp_inference_add_1_10_s_fu_416_C_0_0_d0,
        C_1_0_address0 => grp_inference_add_1_10_s_fu_416_C_1_0_address0,
        C_1_0_ce0 => grp_inference_add_1_10_s_fu_416_C_1_0_ce0,
        C_1_0_we0 => grp_inference_add_1_10_s_fu_416_C_1_0_we0,
        C_1_0_d0 => grp_inference_add_1_10_s_fu_416_C_1_0_d0,
        C_2_0_address0 => grp_inference_add_1_10_s_fu_416_C_2_0_address0,
        C_2_0_ce0 => grp_inference_add_1_10_s_fu_416_C_2_0_ce0,
        C_2_0_we0 => grp_inference_add_1_10_s_fu_416_C_2_0_we0,
        C_2_0_d0 => grp_inference_add_1_10_s_fu_416_C_2_0_d0,
        C_3_0_address0 => grp_inference_add_1_10_s_fu_416_C_3_0_address0,
        C_3_0_ce0 => grp_inference_add_1_10_s_fu_416_C_3_0_ce0,
        C_3_0_we0 => grp_inference_add_1_10_s_fu_416_C_3_0_we0,
        C_3_0_d0 => grp_inference_add_1_10_s_fu_416_C_3_0_d0);

    grp_inference_softmax_1_10_s_fu_430 : component inference_softmax_1_10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_softmax_1_10_s_fu_430_ap_start,
        ap_done => grp_inference_softmax_1_10_s_fu_430_ap_done,
        ap_idle => grp_inference_softmax_1_10_s_fu_430_ap_idle,
        ap_ready => grp_inference_softmax_1_10_s_fu_430_ap_ready,
        A_0_0_address0 => grp_inference_softmax_1_10_s_fu_430_A_0_0_address0,
        A_0_0_ce0 => grp_inference_softmax_1_10_s_fu_430_A_0_0_ce0,
        A_0_0_q0 => grp_inference_softmax_1_10_s_fu_430_A_0_0_q0,
        A_1_0_address0 => grp_inference_softmax_1_10_s_fu_430_A_1_0_address0,
        A_1_0_ce0 => grp_inference_softmax_1_10_s_fu_430_A_1_0_ce0,
        A_1_0_q0 => grp_inference_softmax_1_10_s_fu_430_A_1_0_q0,
        A_2_0_address0 => grp_inference_softmax_1_10_s_fu_430_A_2_0_address0,
        A_2_0_ce0 => grp_inference_softmax_1_10_s_fu_430_A_2_0_ce0,
        A_2_0_q0 => grp_inference_softmax_1_10_s_fu_430_A_2_0_q0,
        A_3_0_address0 => grp_inference_softmax_1_10_s_fu_430_A_3_0_address0,
        A_3_0_ce0 => grp_inference_softmax_1_10_s_fu_430_A_3_0_ce0,
        A_3_0_q0 => grp_inference_softmax_1_10_s_fu_430_A_3_0_q0,
        argmax_TDATA => grp_inference_softmax_1_10_s_fu_430_argmax_TDATA,
        argmax_TVALID => grp_inference_softmax_1_10_s_fu_430_argmax_TVALID,
        argmax_TREADY => grp_inference_softmax_1_10_s_fu_430_argmax_TREADY);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = grp_inference_softmax_1_10_s_fu_430_ap_done)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_add_1_10_s_fu_416_ap_start_ap_start_reg assign process. --
    grp_inference_add_1_10_s_fu_416_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_add_1_10_s_fu_416_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    grp_inference_add_1_10_s_fu_416_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_add_1_10_s_fu_416_ap_ready)) then 
                    grp_inference_add_1_10_s_fu_416_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_mult_1_84_84_10_s_fu_228_ap_start_ap_start_reg assign process. --
    grp_inference_mult_1_84_84_10_s_fu_228_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_mult_1_84_84_10_s_fu_228_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_251))) then 
                    grp_inference_mult_1_84_84_10_s_fu_228_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_mult_1_84_84_10_s_fu_228_ap_ready)) then 
                    grp_inference_mult_1_84_84_10_s_fu_228_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_softmax_1_10_s_fu_430_ap_start_ap_start_reg assign process. --
    grp_inference_softmax_1_10_s_fu_430_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_softmax_1_10_s_fu_430_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    grp_inference_softmax_1_10_s_fu_430_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_softmax_1_10_s_fu_430_ap_ready)) then 
                    grp_inference_softmax_1_10_s_fu_430_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, grp_inference_mult_1_84_84_10_s_fu_228_ap_done, grp_inference_add_1_10_s_fu_416_ap_done, grp_inference_softmax_1_10_s_fu_430_ap_done, ap_sig_bdd_251)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_251)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_inference_mult_1_84_84_10_s_fu_228_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_inference_add_1_10_s_fu_416_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_inference_softmax_1_10_s_fu_430_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- S_0_0_address0 assign process. --
    S_0_0_address0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_0_0_address0, grp_inference_softmax_1_10_s_fu_430_A_0_0_address0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            S_0_0_address0 <= grp_inference_softmax_1_10_s_fu_430_A_0_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_0_0_address0 <= grp_inference_add_1_10_s_fu_416_C_0_0_address0;
        else 
            S_0_0_address0 <= "XX";
        end if; 
    end process;


    -- S_0_0_ce0 assign process. --
    S_0_0_ce0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_0_0_ce0, grp_inference_softmax_1_10_s_fu_430_A_0_0_ce0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            S_0_0_ce0 <= grp_inference_softmax_1_10_s_fu_430_A_0_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_0_0_ce0 <= grp_inference_add_1_10_s_fu_416_C_0_0_ce0;
        else 
            S_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_0_0_d0 <= grp_inference_add_1_10_s_fu_416_C_0_0_d0;

    -- S_0_0_we0 assign process. --
    S_0_0_we0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_0_0_we0, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_0_0_we0 <= grp_inference_add_1_10_s_fu_416_C_0_0_we0;
        else 
            S_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S_1_0_address0 assign process. --
    S_1_0_address0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_1_0_address0, grp_inference_softmax_1_10_s_fu_430_A_1_0_address0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            S_1_0_address0 <= grp_inference_softmax_1_10_s_fu_430_A_1_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_1_0_address0 <= grp_inference_add_1_10_s_fu_416_C_1_0_address0;
        else 
            S_1_0_address0 <= "XX";
        end if; 
    end process;


    -- S_1_0_ce0 assign process. --
    S_1_0_ce0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_1_0_ce0, grp_inference_softmax_1_10_s_fu_430_A_1_0_ce0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            S_1_0_ce0 <= grp_inference_softmax_1_10_s_fu_430_A_1_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_1_0_ce0 <= grp_inference_add_1_10_s_fu_416_C_1_0_ce0;
        else 
            S_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_1_0_d0 <= grp_inference_add_1_10_s_fu_416_C_1_0_d0;

    -- S_1_0_we0 assign process. --
    S_1_0_we0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_1_0_we0, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_1_0_we0 <= grp_inference_add_1_10_s_fu_416_C_1_0_we0;
        else 
            S_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S_2_0_address0 assign process. --
    S_2_0_address0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_2_0_address0, grp_inference_softmax_1_10_s_fu_430_A_2_0_address0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            S_2_0_address0 <= grp_inference_softmax_1_10_s_fu_430_A_2_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_2_0_address0 <= grp_inference_add_1_10_s_fu_416_C_2_0_address0;
        else 
            S_2_0_address0 <= "X";
        end if; 
    end process;


    -- S_2_0_ce0 assign process. --
    S_2_0_ce0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_2_0_ce0, grp_inference_softmax_1_10_s_fu_430_A_2_0_ce0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            S_2_0_ce0 <= grp_inference_softmax_1_10_s_fu_430_A_2_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_2_0_ce0 <= grp_inference_add_1_10_s_fu_416_C_2_0_ce0;
        else 
            S_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_2_0_d0 <= grp_inference_add_1_10_s_fu_416_C_2_0_d0;

    -- S_2_0_we0 assign process. --
    S_2_0_we0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_2_0_we0, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_2_0_we0 <= grp_inference_add_1_10_s_fu_416_C_2_0_we0;
        else 
            S_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S_3_0_address0 assign process. --
    S_3_0_address0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_3_0_address0, grp_inference_softmax_1_10_s_fu_430_A_3_0_address0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            S_3_0_address0 <= grp_inference_softmax_1_10_s_fu_430_A_3_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_3_0_address0 <= grp_inference_add_1_10_s_fu_416_C_3_0_address0;
        else 
            S_3_0_address0 <= "X";
        end if; 
    end process;


    -- S_3_0_ce0 assign process. --
    S_3_0_ce0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_3_0_ce0, grp_inference_softmax_1_10_s_fu_430_A_3_0_ce0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            S_3_0_ce0 <= grp_inference_softmax_1_10_s_fu_430_A_3_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_3_0_ce0 <= grp_inference_add_1_10_s_fu_416_C_3_0_ce0;
        else 
            S_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_3_0_d0 <= grp_inference_add_1_10_s_fu_416_C_3_0_d0;

    -- S_3_0_we0 assign process. --
    S_3_0_we0_assign_proc : process(grp_inference_add_1_10_s_fu_416_C_3_0_we0, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S_3_0_we0 <= grp_inference_add_1_10_s_fu_416_C_3_0_we0;
        else 
            S_3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- T_0_0_address0 assign process. --
    T_0_0_address0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_address0, grp_inference_add_1_10_s_fu_416_A_0_0_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            T_0_0_address0 <= grp_inference_add_1_10_s_fu_416_A_0_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_address0;
        else 
            T_0_0_address0 <= "XX";
        end if; 
    end process;


    -- T_0_0_ce0 assign process. --
    T_0_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_ce0, grp_inference_add_1_10_s_fu_416_A_0_0_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            T_0_0_ce0 <= grp_inference_add_1_10_s_fu_416_A_0_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_ce0;
        else 
            T_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    T_0_0_d0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_d0;

    -- T_0_0_we0 assign process. --
    T_0_0_we0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_0_we0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_0_0_we0;
        else 
            T_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- T_1_0_address0 assign process. --
    T_1_0_address0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_address0, grp_inference_add_1_10_s_fu_416_A_1_0_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            T_1_0_address0 <= grp_inference_add_1_10_s_fu_416_A_1_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_1_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_address0;
        else 
            T_1_0_address0 <= "XX";
        end if; 
    end process;


    -- T_1_0_ce0 assign process. --
    T_1_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_ce0, grp_inference_add_1_10_s_fu_416_A_1_0_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            T_1_0_ce0 <= grp_inference_add_1_10_s_fu_416_A_1_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_1_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_ce0;
        else 
            T_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    T_1_0_d0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_d0;

    -- T_1_0_we0 assign process. --
    T_1_0_we0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_1_0_we0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_1_0_we0;
        else 
            T_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- T_2_0_address0 assign process. --
    T_2_0_address0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_address0, grp_inference_add_1_10_s_fu_416_A_2_0_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            T_2_0_address0 <= grp_inference_add_1_10_s_fu_416_A_2_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_2_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_address0;
        else 
            T_2_0_address0 <= "X";
        end if; 
    end process;


    -- T_2_0_ce0 assign process. --
    T_2_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_ce0, grp_inference_add_1_10_s_fu_416_A_2_0_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            T_2_0_ce0 <= grp_inference_add_1_10_s_fu_416_A_2_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_2_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_ce0;
        else 
            T_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    T_2_0_d0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_d0;

    -- T_2_0_we0 assign process. --
    T_2_0_we0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_2_0_we0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_2_0_we0;
        else 
            T_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- T_3_0_address0 assign process. --
    T_3_0_address0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_address0, grp_inference_add_1_10_s_fu_416_A_3_0_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            T_3_0_address0 <= grp_inference_add_1_10_s_fu_416_A_3_0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_3_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_address0;
        else 
            T_3_0_address0 <= "X";
        end if; 
    end process;


    -- T_3_0_ce0 assign process. --
    T_3_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_ce0, grp_inference_add_1_10_s_fu_416_A_3_0_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            T_3_0_ce0 <= grp_inference_add_1_10_s_fu_416_A_3_0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_3_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_ce0;
        else 
            T_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    T_3_0_d0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_d0;

    -- T_3_0_we0 assign process. --
    T_3_0_we0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_3_0_we0 <= grp_inference_mult_1_84_84_10_s_fu_228_C_3_0_we0;
        else 
            T_3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    X_0_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_address0;
    X_0_0_address1 <= grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_address1;

    -- X_0_0_ce0 assign process. --
    X_0_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_0_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_ce0;
        else 
            X_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- X_0_0_ce1 assign process. --
    X_0_0_ce1_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_ce1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_0_0_ce1 <= grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_ce1;
        else 
            X_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_1_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_address0;
    X_1_0_address1 <= grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_address1;

    -- X_1_0_ce0 assign process. --
    X_1_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_1_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_ce0;
        else 
            X_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- X_1_0_ce1 assign process. --
    X_1_0_ce1_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_ce1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_1_0_ce1 <= grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_ce1;
        else 
            X_1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_2_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_address0;
    X_2_0_address1 <= grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_address1;

    -- X_2_0_ce0 assign process. --
    X_2_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_2_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_ce0;
        else 
            X_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- X_2_0_ce1 assign process. --
    X_2_0_ce1_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_ce1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_2_0_ce1 <= grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_ce1;
        else 
            X_2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_3_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_address0;
    X_3_0_address1 <= grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_address1;

    -- X_3_0_ce0 assign process. --
    X_3_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_3_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_ce0;
        else 
            X_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- X_3_0_ce1 assign process. --
    X_3_0_ce1_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_ce1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_3_0_ce1 <= grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_ce1;
        else 
            X_3_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, grp_inference_softmax_1_10_s_fu_430_ap_done, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = grp_inference_softmax_1_10_s_fu_430_ap_done))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_inference_softmax_1_10_s_fu_430_ap_done, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = grp_inference_softmax_1_10_s_fu_430_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_251 assign process. --
    ap_sig_bdd_251_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_251 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_259 assign process. --
    ap_sig_bdd_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_259 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_940 assign process. --
    ap_sig_bdd_940_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_940 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_947 assign process. --
    ap_sig_bdd_947_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_947 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_964 assign process. --
    ap_sig_bdd_964_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_964 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_971 assign process. --
    ap_sig_bdd_971_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_971 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_259)
    begin
        if (ap_sig_bdd_259) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_940)
    begin
        if (ap_sig_bdd_940) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_947)
    begin
        if (ap_sig_bdd_947) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_964)
    begin
        if (ap_sig_bdd_964) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_971)
    begin
        if (ap_sig_bdd_971) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    argmax_TDATA <= grp_inference_softmax_1_10_s_fu_430_argmax_TDATA;
    argmax_TVALID <= grp_inference_softmax_1_10_s_fu_430_argmax_TVALID;
    grp_inference_add_1_10_s_fu_416_A_0_0_q0 <= T_0_0_q0;
    grp_inference_add_1_10_s_fu_416_A_1_0_q0 <= T_1_0_q0;
    grp_inference_add_1_10_s_fu_416_A_2_0_q0 <= T_2_0_q0;
    grp_inference_add_1_10_s_fu_416_A_3_0_q0 <= T_3_0_q0;
    grp_inference_add_1_10_s_fu_416_ap_start <= grp_inference_add_1_10_s_fu_416_ap_start_ap_start_reg;
    grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_q0 <= X_0_0_q0;
    grp_inference_mult_1_84_84_10_s_fu_228_A_0_0_q1 <= X_0_0_q1;
    grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_q0 <= X_1_0_q0;
    grp_inference_mult_1_84_84_10_s_fu_228_A_1_0_q1 <= X_1_0_q1;
    grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_q0 <= X_2_0_q0;
    grp_inference_mult_1_84_84_10_s_fu_228_A_2_0_q1 <= X_2_0_q1;
    grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_q0 <= X_3_0_q0;
    grp_inference_mult_1_84_84_10_s_fu_228_A_3_0_q1 <= X_3_0_q1;
    grp_inference_mult_1_84_84_10_s_fu_228_ap_start <= grp_inference_mult_1_84_84_10_s_fu_228_ap_start_ap_start_reg;
    grp_inference_softmax_1_10_s_fu_430_A_0_0_q0 <= S_0_0_q0;
    grp_inference_softmax_1_10_s_fu_430_A_1_0_q0 <= S_1_0_q0;
    grp_inference_softmax_1_10_s_fu_430_A_2_0_q0 <= S_2_0_q0;
    grp_inference_softmax_1_10_s_fu_430_A_3_0_q0 <= S_3_0_q0;
    grp_inference_softmax_1_10_s_fu_430_ap_start <= grp_inference_softmax_1_10_s_fu_430_ap_start_ap_start_reg;
    grp_inference_softmax_1_10_s_fu_430_argmax_TREADY <= argmax_TREADY;
end behav;
