-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111110100111101010111011", 
    1 => "10111100000000000010010000110010", 
    2 => "10111100010011110110010001010111", 
    3 => "10111110010100101110011111110111", 
    4 => "00111101101101110101011111100011", 
    5 => "10111101011000111001110111111111", 
    6 => "00111100001001101100011111101011", 
    7 => "10111100000111111000001111110100", 
    8 => "10111101111111101010111011100010", 
    9 => "00111110000011100111001010010111", 
    10 => "00111011100111101001100110001001", 
    11 => "10111110000101001100101000001100", 
    12 => "10111101100010111101101010000111", 
    13 => "00111101000111110001011000101011", 
    14 => "10111101100010000111001001100000", 
    15 => "00111100011110111111011010000110", 
    16 => "10111110000100100111100001001011", 
    17 => "00111110011001111111101101101010", 
    18 => "00111110000011110011001000111000", 
    19 => "00111101101001110011100010010110", 
    20 => "00111100110111110110011011001110", 
    21 => "10111011110101110101000101001011", 
    22 => "00111110000111011101100010110110", 
    23 => "00111100001010111111011000101000", 
    24 => "00111101101101010000011110100111", 
    25 => "00111100100110100100101000101110", 
    26 => "00111101111110010001100010100000", 
    27 => "10111100000011011100001101010111", 
    28 => "00111101100011100000001011111000", 
    29 => "00111101010101011101100111110001", 
    30 => "10111101100000000010111010110111", 
    31 => "10111000100010000101101011011101", 
    32 => "00111101111100111001111010101110", 
    33 => "10111101111001010101010111000101", 
    34 => "00111110000100000010000101001011", 
    35 => "10111101001011111000000001110001", 
    36 => "10111101111110101011101110001000", 
    37 => "10111110000011111010011000010110", 
    38 => "00111110001011100110101110000011", 
    39 => "10111101010011010101000100000111", 
    40 => "10111011100110111001011111110111", 
    41 => "10111110000101101100010010000010", 
    42 => "00111101011001001011101110000110", 
    43 => "00111101001101100001100011110110", 
    44 => "00111100100100000010001001010111", 
    45 => "00111101011101111000011111000001", 
    46 => "10111101100111101000111101000101", 
    47 => "00111101101111011101110101100001", 
    48 => "10111101011011101001010100111111", 
    49 => "10111101011100111110111000101001", 
    50 => "00111101110101001110001100110111", 
    51 => "10111110001111000111101011000000", 
    52 => "10111100110011101001011101110010", 
    53 => "00111101100110000010101011110111", 
    54 => "10111101010111011110101010010111", 
    55 => "00111101000000001100000011010101", 
    56 => "00111101110100101000001110010000", 
    57 => "00111101111111111010000000001110", 
    58 => "00111101000111111000100001011100", 
    59 => "10111100111010010110001101110001", 
    60 => "00111011110000111001010100000000", 
    61 => "00111100001100000111010000111100", 
    62 => "00111101101100001100111000001100", 
    63 => "00111101111011101110100001001011", 
    64 => "10111110010100010100000000010100", 
    65 => "00111100110101101011101101100011", 
    66 => "10111101101001001111010110000011", 
    67 => "00111101101011010000001010001010", 
    68 => "00111101100110000001001110010101", 
    69 => "10111100001001110111011011010010", 
    70 => "10111010000001011000001111100011", 
    71 => "00111101000101011011100100111010", 
    72 => "00111101111101110110001001010010", 
    73 => "00111101111111010011010011011111", 
    74 => "00111101100001010100110101010100", 
    75 => "10111110010000100101101100110001", 
    76 => "10111101011010001001111110101100", 
    77 => "10111011111110110011000111100101", 
    78 => "10111101101011001101100101101111", 
    79 => "00111101100110100110111011100001", 
    80 => "10111101000100000100011010000100", 
    81 => "00111101110000001000010010100101", 
    82 => "00111101001000010001101010010111", 
    83 => "10111101001000110110001111101000", 
    84 => "00111101011100110100010100100001", 
    85 => "00111101100110100000110000110110", 
    86 => "10111101001111111111100000111110", 
    87 => "00111110010000001101010001010110", 
    88 => "10111101100001001001011110001111", 
    89 => "10111101101000101010000110000000", 
    90 => "00111101011100010111100101101111", 
    91 => "00111110000010101110110110011010", 
    92 => "00111101011000111001110000110111", 
    93 => "10111101010000100000010110101111", 
    94 => "00111101101111101110011011100000", 
    95 => "00111101011000100111111111110010", 
    96 => "00111101101101100010101100011010", 
    97 => "10111110000100000000100111110110", 
    98 => "10111100101101010011010110100010", 
    99 => "00111110001011011001101111100101", 
    100 => "00111101111101110010001101101000", 
    101 => "00111101100001100011101111100001", 
    102 => "00111101000011110110110101000000", 
    103 => "10111101100111100011010100010111", 
    104 => "10111110001000101000000101110111", 
    105 => "10111101100001010110111001101001", 
    106 => "10111100000101101100001100010000", 
    107 => "00111110000001011011000010111100", 
    108 => "10111101110111111010111111001001", 
    109 => "10111101000001010101010001001101", 
    110 => "10111101101000000101001101101010", 
    111 => "00111101110000011001011110110000", 
    112 => "10111101110100000001111110111000", 
    113 => "10111101100111101110101101100011", 
    114 => "00111100100110000001001001000101", 
    115 => "10111010100100100011000001000100", 
    116 => "10111110000000101010011000101011", 
    117 => "10111100000110100010010101111011", 
    118 => "00111110000101001011110110111010", 
    119 => "10111100100011101110000101111010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_7 is
    component inference_conv2d_f3_1_1_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_7_rom_U :  component inference_conv2d_f3_1_1_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


