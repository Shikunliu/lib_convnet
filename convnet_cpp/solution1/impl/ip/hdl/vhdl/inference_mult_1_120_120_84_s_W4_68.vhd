-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_68_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_68_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101011000011110010000100", 
    1 => "10111101111001110111011100001000", 
    2 => "00111100110011100110011010010101", 
    3 => "00111110000001011111000101111100", 
    4 => "10111100110101010010101110101011", 
    5 => "10111101100010010100110010010101", 
    6 => "00111110001011010110100101001101", 
    7 => "10111101101110101000111111101001", 
    8 => "10111101010101101010010010111101", 
    9 => "00111101100100001011000101000011", 
    10 => "00111101010100100001101100000101", 
    11 => "00111101010100000110001111111011", 
    12 => "00111100101110000110001001000111", 
    13 => "00111110010000110011111011111111", 
    14 => "10111100001100110000100001101011", 
    15 => "00111100110101100000101010011001", 
    16 => "10111100111011101111111010111011", 
    17 => "10111011111010110111101111001111", 
    18 => "00111101110011100110110010001111", 
    19 => "00111100010110000100111001110110", 
    20 => "00111100110001010001110001101010", 
    21 => "10111101011111001111100110000110", 
    22 => "10111101011001110010101100011101", 
    23 => "00111101101010001100011110101101", 
    24 => "00111101101010110010100110100010", 
    25 => "00111101000001101101111111101110", 
    26 => "10111101100110110000010100001001", 
    27 => "10111110000010011111010010010000", 
    28 => "00111110000010000100000010011110", 
    29 => "10111100011101001011100111100110", 
    30 => "10111101110111001000001010011101", 
    31 => "00111101110101011011101100111000", 
    32 => "00111100110000110101000001001100", 
    33 => "00111100100011101010001101100111", 
    34 => "10111110000110010101011011000001", 
    35 => "00111101101011100110110001001100", 
    36 => "10111100110011100100101010110001", 
    37 => "00111101111110010101010111111000", 
    38 => "00111101110111101111110001111010", 
    39 => "00111110001001001100101000001100", 
    40 => "00111101111011000000111110001000", 
    41 => "10111101011001111000111010011111", 
    42 => "10111101111110101000110101100101", 
    43 => "10111101110000111000010010111010", 
    44 => "10111110000010111011010110011110", 
    45 => "10111110001111100000010011000000", 
    46 => "10111101100111110100110001111100", 
    47 => "10111101011111111010011111101011", 
    48 => "00111110000000010110010110010000", 
    49 => "00111110000010110110101111110100", 
    50 => "00111101000001101001110110101001", 
    51 => "00111101110000011101010011010001", 
    52 => "10111101010010000110110100000111", 
    53 => "00111100110111010011111101000001", 
    54 => "00111101111100101101111111010111", 
    55 => "10111101001101001101010111001011", 
    56 => "00111101011110101100001000111110", 
    57 => "00111101011111111011111001011100", 
    58 => "00111101101101010100000100011101", 
    59 => "10111101100011011010111110001110", 
    60 => "10111101000001011100001010011101", 
    61 => "00111101110101001111010110010000", 
    62 => "10111101100101001000010110010011", 
    63 => "10111100101010001001000100011001", 
    64 => "00111100110110101110101101110100", 
    65 => "10111101001110001001011000010100", 
    66 => "10111101111101000100000000101001", 
    67 => "00111100001010001100101000100100", 
    68 => "10111110001101000111101001011011", 
    69 => "10111110001000111011001001010111", 
    70 => "00111100011001100101001010110000", 
    71 => "00111101101000110100000000001100", 
    72 => "00111101100111111101011010010101", 
    73 => "10111101000011001100011101110100", 
    74 => "10111101101010100010000001110010", 
    75 => "10111101101010111001010100011100", 
    76 => "10111110010111101001110111011000", 
    77 => "00111101100010011011011000111010", 
    78 => "00111100100101011010111111001010", 
    79 => "10111011101111110011001010110000", 
    80 => "10111101100000110001101100110000", 
    81 => "00111100100100111010001111101100", 
    82 => "00111101110111000001101011001110", 
    83 => "10111011110000100001000000011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_68 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_68 is
    component inference_mult_1_120_120_84_s_W4_68_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_68_rom_U :  component inference_mult_1_120_120_84_s_W4_68_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


