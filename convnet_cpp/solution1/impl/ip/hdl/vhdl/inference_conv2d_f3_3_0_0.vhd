-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010010111100100010100110", 
    1 => "10111110000010010010010011110010", 
    2 => "10111110011110110010000110000001", 
    3 => "10111101111001111111100110010100", 
    4 => "00111101000101010111110000011000", 
    5 => "00111100111010011111010000100101", 
    6 => "00111101111111000100011111100101", 
    7 => "00111101010111000001110001100001", 
    8 => "00111010000100001000000100000110", 
    9 => "10111110011001010011000001001001", 
    10 => "10111110010011101000100010011100", 
    11 => "00111100011001111000001001011011", 
    12 => "00111101110000010101001110111101", 
    13 => "00111101110010110010000111111010", 
    14 => "10111110000011010101100001000011", 
    15 => "00111101111011100100101001111011", 
    16 => "10111110000011010111010100011001", 
    17 => "00111101101101001000101111000011", 
    18 => "00111110011100001111111110010111", 
    19 => "00111110001111111011001000100101", 
    20 => "00111101011110001001011111000001", 
    21 => "10111110001101101100110110101111", 
    22 => "00111101011110110111011100111010", 
    23 => "00111100111011011101101001100100", 
    24 => "10111110001101110001001010100001", 
    25 => "10111101110110110101110110001001", 
    26 => "10111110010110011110110101111100", 
    27 => "10111101101011011001010111101011", 
    28 => "10111100101110101101101011111101", 
    29 => "00111110010101111100010011100011", 
    30 => "10111110011111000100110110101001", 
    31 => "00111100100100001101001111000011", 
    32 => "10111101000100001011010111000101", 
    33 => "00111101101001000000011101010100", 
    34 => "00111101110110000110010111011000", 
    35 => "10111101100000000100100100110001", 
    36 => "00111101010011011010101111110000", 
    37 => "10111011111010101010001001110110", 
    38 => "00111101101110111110100101111000", 
    39 => "10111110001100001110101010011110", 
    40 => "00111101111111101111011111000010", 
    41 => "10111101111010111111010111011000", 
    42 => "10111101101100010011110101001101", 
    43 => "10111101011011010011000001001111", 
    44 => "10111101110101000100010111101101", 
    45 => "00111110000010101100110000001100", 
    46 => "10111110001011111010011010011100", 
    47 => "10111100101110001100010110101111", 
    48 => "10111101100101010001000110001111", 
    49 => "00111101101111011101110001010100", 
    50 => "00111101011101001010011101010111", 
    51 => "00111101010000011100010011100001", 
    52 => "10111101100001001101111011101010", 
    53 => "00111110000010100001100110000111", 
    54 => "10111110000111000010101110010101", 
    55 => "10111110000010011000011001110111", 
    56 => "00111101111011011011000001010111", 
    57 => "10111101100001110111001011001000", 
    58 => "00111101110000111000111101111010", 
    59 => "10111101100000000111011011101001", 
    60 => "10111100101001101100101001101111", 
    61 => "10111101111010001001001010101011", 
    62 => "00111011011011111001000010011100", 
    63 => "00111101101111000001101101111100", 
    64 => "10111110001100001010100110011011", 
    65 => "00111101001100010100111111101001", 
    66 => "00111110010010000011100111001110", 
    67 => "10111101010011110011001000111000", 
    68 => "00111100010111111110010110101110", 
    69 => "10111110001110110100100100010111", 
    70 => "00111101011001100110000000011100", 
    71 => "00111110000101110011110000001100", 
    72 => "00111101001110010001111111110111", 
    73 => "10111100100110110101001110101110", 
    74 => "10111101011100000111011101000111", 
    75 => "00111101011000100111111001111010", 
    76 => "10111101011011001011001100011100", 
    77 => "00111110000100011000001000100011", 
    78 => "00111100111111000111010111010010", 
    79 => "10111110001001111000100000010010", 
    80 => "00111011110101110000100100100110", 
    81 => "10111101100001001101000101100011", 
    82 => "00111110000000000000001000011001", 
    83 => "00111101100011101110111110100010", 
    84 => "00111101110101000111011110111100", 
    85 => "00111100101101000100011010001110", 
    86 => "00111101010110001000110010100100", 
    87 => "00111101010000000111011010110011", 
    88 => "00111101110001000101100100011110", 
    89 => "00111100101001011110100000100111", 
    90 => "10111110000111000000000110100011", 
    91 => "00111101001111000101110100101110", 
    92 => "10111110011110110000100111101010", 
    93 => "00111101000101011000100000001101", 
    94 => "00111101101101101001011111111111", 
    95 => "10111100101010101110101100110000", 
    96 => "10111101011000110100000101101001", 
    97 => "10111101000011000100111100101110", 
    98 => "10111101101110000001111110110001", 
    99 => "10111010110110110101101101011011", 
    100 => "00111101100000101110100101000111", 
    101 => "00111110000011001010010100110111", 
    102 => "10111101010111101011101010100000", 
    103 => "10111101001100001101110011111101", 
    104 => "00111100110011011001000000001011", 
    105 => "10111110000011011000110001101101", 
    106 => "10111110001001100001000101110111", 
    107 => "10111101010111001111111100101111", 
    108 => "00111101100000110010011011000110", 
    109 => "00111011111101010010010000011001", 
    110 => "10111110000100110000101001001110", 
    111 => "00111100101110111010101000110000", 
    112 => "10111101011001100001000001101011", 
    113 => "10111110010111111001101100010011", 
    114 => "10111101111111011011000010011010", 
    115 => "10111101110000100000011011010110", 
    116 => "00111100111111010101000001011000", 
    117 => "10111101101101101000000000110010", 
    118 => "00111110000010010000001001011000", 
    119 => "00111011101010101110011110100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_0 is
    component inference_conv2d_f3_3_0_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_0_rom_U :  component inference_conv2d_f3_3_0_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


