-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000000101110110001101100", 
    1 => "10111100111111100001011111111110", 
    2 => "00111010011101011101101011101100", 
    3 => "00111100110111000011011100111000", 
    4 => "10111101111111111101001111110110", 
    5 => "00111101111111010000011000110110", 
    6 => "10111100110000100101100011010110", 
    7 => "00111110001001011001011110010010", 
    8 => "00111011111110010010110010010010", 
    9 => "00111110000010010011010110111001", 
    10 => "00111101101111010001111100010000", 
    11 => "10111101001001011101101101110111", 
    12 => "00111100101100011011010001111000", 
    13 => "10111110001011110100011101110011", 
    14 => "10111110000111001110010100101110", 
    15 => "10111101011100010100010111011000", 
    16 => "10111011111100001100110001000110", 
    17 => "00111011101100011000000111000011", 
    18 => "10111110010111110110100110001000", 
    19 => "10111101100001110100100110000110", 
    20 => "00111110000110101011111101110111", 
    21 => "00111101100010111000000000100100", 
    22 => "00111110000001011100010110110101", 
    23 => "00111110010101010000110001011111", 
    24 => "00111101001000010001100001100100", 
    25 => "10111100001111010101001011011100", 
    26 => "10111101011111111011001011010011", 
    27 => "10111100111010100010100011111110", 
    28 => "00111101100000110010000101010010", 
    29 => "00111101001111100010001011100110", 
    30 => "00111100100010101110011010101110", 
    31 => "10111101001110111100011011010000", 
    32 => "00111101110011110101000010100000", 
    33 => "10111100111101100010100110001000", 
    34 => "00111110010100101010010001010101", 
    35 => "00111101101010011100010110110001", 
    36 => "00111110011011111001001001101100", 
    37 => "10111100111111010111100110101000", 
    38 => "00111101000110000000011111001001", 
    39 => "00111011111101110000000110010100", 
    40 => "00111100100000100110100010010000", 
    41 => "00111100110101100101010111100011", 
    42 => "00111101001110001101100101100101", 
    43 => "00111110010100110110110110101000", 
    44 => "00111101010011011001011110011000", 
    45 => "10111010011011111111000001010111", 
    46 => "10111110000011111010000111100100", 
    47 => "10111101110000000011100111010100", 
    48 => "00111101100011110110010111000001", 
    49 => "10111101101001001001000100001111", 
    50 => "00111101101100011111111100101110", 
    51 => "00111101011111100101100100110111", 
    52 => "10111101001101011000000110100111", 
    53 => "10111110011001101011001110111100", 
    54 => "10111101111010111011010111100001", 
    55 => "10111100110100101101010100100101", 
    56 => "10111101110111100111001100011101", 
    57 => "00111101010110001101001101010000", 
    58 => "00111100101110100001111100010101", 
    59 => "10111101111110111001111110011001", 
    60 => "00111110000101111010011001111010", 
    61 => "10111101000000100110111010100101", 
    62 => "00111101100101000000011110110010", 
    63 => "10111010011001000100000100001000", 
    64 => "00111100110000100000000111001101", 
    65 => "00111101110011101110111110100010", 
    66 => "10111101011111010001100001011010", 
    67 => "10111101001100100001001001010001", 
    68 => "10111101101110001010111001001101", 
    69 => "10111100011011000010001001101000", 
    70 => "00111100111101100010100111110011", 
    71 => "00111110001111100011011001001100", 
    72 => "10111101100011101000011001000000", 
    73 => "00111101110101000011010110101101", 
    74 => "00111101110001011010111000001111", 
    75 => "10111101011101111101010111100000", 
    76 => "00111101111011001100000101000100", 
    77 => "10111101100011110010001010001010", 
    78 => "00111100110101001101101111111010", 
    79 => "00111101010011011011110000110001", 
    80 => "10111101001011100101111101110100", 
    81 => "00111101000111011010000001011010", 
    82 => "00111100100001001000101100010101", 
    83 => "10111110011000111011011100001111", 
    84 => "10111110001010111100011100101110", 
    85 => "10111101011110011101111010110011", 
    86 => "00111100010011010001111000101011", 
    87 => "10111101100101111101011000100011", 
    88 => "10111100111111111111111100101001", 
    89 => "00111101100011010001001011110011", 
    90 => "00111100010010010000010011000001", 
    91 => "10111100111000110111011010010010", 
    92 => "00111110001100110111110011011101", 
    93 => "10111100100100000010001010001101", 
    94 => "10111110001001110000101010000001", 
    95 => "00111101011110001111101011110011", 
    96 => "10111101011110100011011110111010", 
    97 => "00111110000011000010001011101110", 
    98 => "10111100000110111011100110011010", 
    99 => "00111110001110001000010011000111", 
    100 => "00111011100011000100010010110010", 
    101 => "10111100011111110111110010111000", 
    102 => "10111110000100001010111101100000", 
    103 => "10111101101000001101101011001001", 
    104 => "10111100010110001111110000011011", 
    105 => "10111110000101000011100011010010", 
    106 => "10111101100100101010000000010110", 
    107 => "10111101010000111010111011111100", 
    108 => "10111101111010100011110001100100", 
    109 => "00111100110100011110101001000011", 
    110 => "10111101100010100111001111000010", 
    111 => "10111101100110001111011011110111", 
    112 => "00111101100000001000010001010101", 
    113 => "00111101100110011011111111011111", 
    114 => "10111101010001011101101100100110", 
    115 => "00111100100100100000010001111010", 
    116 => "00111100110111100100100101100001", 
    117 => "00111100110111100001110100100001", 
    118 => "10111110001001000011000100111000", 
    119 => "00111101110010011011011000010010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_9 is
    component inference_conv2d_f3_4_2_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_9_rom_U :  component inference_conv2d_f3_4_2_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


