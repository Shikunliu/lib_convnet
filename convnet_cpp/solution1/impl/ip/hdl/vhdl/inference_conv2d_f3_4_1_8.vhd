-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110101111100001011001", 
    1 => "10111101110111001111101110111001", 
    2 => "00111101000111110011000011101000", 
    3 => "10111101110110110001010110110101", 
    4 => "10111101010011101011110110011110", 
    5 => "10111100101111101111100011001111", 
    6 => "00111100001000100011110000001010", 
    7 => "00111101101011101000101111001111", 
    8 => "00111110000111111010100011111000", 
    9 => "10111101101100010101110000010011", 
    10 => "10111100000011000010000100001011", 
    11 => "00111101111111110000100100001111", 
    12 => "10111101110001100010101010111100", 
    13 => "10111101101010001100110001100101", 
    14 => "00111101010101100001100011011100", 
    15 => "00111110001000010001101110100100", 
    16 => "10111101110010100000111101101000", 
    17 => "10111101010101100011000100101111", 
    18 => "00111101001000000011101001101000", 
    19 => "00111101110001010010011000000010", 
    20 => "10111110000011111111011100010110", 
    21 => "00111101101110010110100100110101", 
    22 => "10111011100111111111111100111001", 
    23 => "00111101100011110100001010100001", 
    24 => "10111110000100000111011001111101", 
    25 => "00111101100111100100101011100111", 
    26 => "10111100110110001010011100101011", 
    27 => "00111100010101010100100010011100", 
    28 => "10111101010101101010111110111111", 
    29 => "10111011110001010011101101001001", 
    30 => "00111110000101000110011000101100", 
    31 => "00111100011011111101011001010010", 
    32 => "10111101000101001011111111100000", 
    33 => "00111101000101010000100000111010", 
    34 => "00111101001010001001010111101100", 
    35 => "00111101111111000100000010001110", 
    36 => "10111100100011101011001110001101", 
    37 => "10111101000111010011100101111100", 
    38 => "00111101010101010000001100110010", 
    39 => "00111101101101001010100011000001", 
    40 => "10111100100000011100111110101110", 
    41 => "10111110001100011111011000000001", 
    42 => "00111100111011011000011011101100", 
    43 => "10111110000000101100101111101010", 
    44 => "00111101111000101111110111111100", 
    45 => "10111100001010011010011001010111", 
    46 => "10111101101111111100111001100111", 
    47 => "00111100111000100110100110000010", 
    48 => "00111101000010000010100011111001", 
    49 => "00111101000100101111001111011110", 
    50 => "10111011100110011101011110101101", 
    51 => "10111101000010000000010001000110", 
    52 => "10111011110010000001001010101001", 
    53 => "10111101000100100011001110101001", 
    54 => "10111101011110011001001011111110", 
    55 => "00111101110000100111001111100011", 
    56 => "10111101010000011010100011100010", 
    57 => "10111010011111000001000011111111", 
    58 => "10111011110100010001001010000010", 
    59 => "10111101111001001010011100101111", 
    60 => "00111100101001011111010010111100", 
    61 => "00111101010000000010011001000110", 
    62 => "10111110001101001001011101110100", 
    63 => "00111101100011101000000110110000", 
    64 => "00111101110100100110101111111000", 
    65 => "10111100101011111000110110001100", 
    66 => "00111101110011100110011101010001", 
    67 => "00111100100100001010010000101000", 
    68 => "00111101111000001000010010100101", 
    69 => "10111100001001111110110111110000", 
    70 => "00111101111000000001000101001101", 
    71 => "10111110000010000100111011000110", 
    72 => "00111100111111110100000010001000", 
    73 => "10111100010111110110110110111001", 
    74 => "10111100111010100010110011111010", 
    75 => "00111101101010111000101100110100", 
    76 => "10111100111000101011101110000001", 
    77 => "00111101100001110010011111101010", 
    78 => "10111101100001111010000011111001", 
    79 => "00111101010010010111100001101010", 
    80 => "10111101110000101110000110000100", 
    81 => "10111101010101110001101000010011", 
    82 => "00111101001000001010110000010010", 
    83 => "10111101100001100001110111100100", 
    84 => "00111110001110110001000001110111", 
    85 => "00111011111111100110010101001011", 
    86 => "00111011110001110111011111111001", 
    87 => "00111101100101001011101011110011", 
    88 => "10111101010000100011010111101011", 
    89 => "00111110001111010010011001110100", 
    90 => "10110111101101101001010100001110", 
    91 => "10111101101001000000110001000001", 
    92 => "00111101010010101101010000111010", 
    93 => "00111100111010000111011001000001", 
    94 => "00111100100100000001110000001101", 
    95 => "00111100101111110101100110110010", 
    96 => "00110101110100110110110111011101", 
    97 => "00111101000000010001110110100010", 
    98 => "10111110000011100101011111011010", 
    99 => "10111100110111000010010111010000", 
    100 => "10111100000101010001100000010101", 
    101 => "00111011111110011010011011001011", 
    102 => "10111110001111001001111010101010", 
    103 => "10111110000010001001100010110011", 
    104 => "00111101110000110000011000011100", 
    105 => "00111101010111110110101011100100", 
    106 => "10111101111101011100100111100110", 
    107 => "00111110000101010110010001110011", 
    108 => "00111110000110001100101110001110", 
    109 => "00111100101000100100100100000000", 
    110 => "00111101010111000101010011001010", 
    111 => "10111101111100111011010010110011", 
    112 => "00111101111000101110110000101001", 
    113 => "10111101000001000011010000100111", 
    114 => "10111100001010001001111111000111", 
    115 => "10111110010001111101010100100100", 
    116 => "10111100010000010111001010010001", 
    117 => "10111110000010001101011110011101", 
    118 => "10111100100100000111011101000111", 
    119 => "00111101010111000001011010000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_8 is
    component inference_conv2d_f3_4_1_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_8_rom_U :  component inference_conv2d_f3_4_1_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


