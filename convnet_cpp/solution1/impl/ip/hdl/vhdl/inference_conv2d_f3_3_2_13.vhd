-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001011011101000101011111", 
    1 => "00111101000100101001011001110000", 
    2 => "10111101101100111110001110011111", 
    3 => "00111011101001011010000111111011", 
    4 => "00111101110000110000000011010001", 
    5 => "10111110001010010010010110111011", 
    6 => "00111101101101000111110101100110", 
    7 => "10111101010010101001001110100010", 
    8 => "10111101001011001110101100000000", 
    9 => "00111101101110100101000000011011", 
    10 => "10111101100101101000001100100010", 
    11 => "00111101101001010010111101100100", 
    12 => "00111110001010011111011010101001", 
    13 => "00111101111110011000111100011101", 
    14 => "10111100011111011011010100111000", 
    15 => "00111101111110001010000010010000", 
    16 => "00111101011111100110110010111000", 
    17 => "00111101110000110000100001101011", 
    18 => "10111101000101111000101111011000", 
    19 => "10111101110111100011001110101101", 
    20 => "00111110000010101101010101111100", 
    21 => "00111101100100001001111011000001", 
    22 => "00111101000111001000010010110110", 
    23 => "10111110000000100101001110010111", 
    24 => "10111110000101101110011100011101", 
    25 => "00111100110001000010011100001100", 
    26 => "00111101000011100011100101100100", 
    27 => "00111100111001011001011010010010", 
    28 => "10111101101001101011010100100110", 
    29 => "10111101111001010110011100010010", 
    30 => "10111110000000000110110110010100", 
    31 => "00111101100101000111010000000011", 
    32 => "00111011010110111111100100010000", 
    33 => "10111101001101010010111010110110", 
    34 => "10111110011001010010100100110101", 
    35 => "10111101101101111011001110110001", 
    36 => "10111101111110000110011101101010", 
    37 => "10111110000000001010000011110101", 
    38 => "10111110000111010011011001110010", 
    39 => "00111100110011000010110111010110", 
    40 => "10111101101000010011101000100111", 
    41 => "00111101000000011110001001011000", 
    42 => "00111101111001010010010110001001", 
    43 => "10111101100101110100000111000011", 
    44 => "10111110001110011101001111001100", 
    45 => "00111101000011101010010010101001", 
    46 => "10111010101100101101000011111000", 
    47 => "00111100001110111001011111110001", 
    48 => "00111011010010001001110010111100", 
    49 => "00111110000011001001110100010111", 
    50 => "10111101111101111010010101101110", 
    51 => "00111110000110000100111111010011", 
    52 => "00111101100111000101001100001111", 
    53 => "10111101100100000000001101000000", 
    54 => "00111101000001000110110001011011", 
    55 => "00111001111110001001110010110100", 
    56 => "00111101001110111111101011101101", 
    57 => "10111101101111010000010011110100", 
    58 => "10111110010001110000101111010000", 
    59 => "10111101110100111101000001111101", 
    60 => "00111101100101010101010110101010", 
    61 => "00111101101101010001000011000110", 
    62 => "10111100000101000110110100101010", 
    63 => "00111110010111101011100000001111", 
    64 => "00111110000000001001111010011001", 
    65 => "10111101000101011111111000011110", 
    66 => "00111101110100101101010101011010", 
    67 => "10111110001110111111100111000110", 
    68 => "10111010111110010000100101101100", 
    69 => "00111110000000101011011000101000", 
    70 => "00111101110000110011001001011100", 
    71 => "00111101010111001000001111000100", 
    72 => "00111100110101100110000111010111", 
    73 => "10111101111000101101000011100101", 
    74 => "00111100001100011100001011110001", 
    75 => "00111100101010000000011001000100", 
    76 => "00111100000111111101010011100111", 
    77 => "00111101101101101101110100100111", 
    78 => "00111100101001010001001111101011", 
    79 => "00111101010010010000111001100111", 
    80 => "10111101011110110001100101000110", 
    81 => "10111101111011011000001000110100", 
    82 => "00111101100000111111111111000111", 
    83 => "10111101111111011011001000101101", 
    84 => "10111100101001111001101000001101", 
    85 => "00111101000001010100101010101000", 
    86 => "10111101000101011110011101111000", 
    87 => "00111101110011110100011000100100", 
    88 => "10111110000010101100100111110011", 
    89 => "10111110000110101011011101010110", 
    90 => "10111010110000011101110100000101", 
    91 => "10111101100001111011110111110111", 
    92 => "00111101110101111010011110000111", 
    93 => "00111011001011011100110100101101", 
    94 => "10111100100110100010100001101011", 
    95 => "10111101001100110110101011111100", 
    96 => "00111101111100010011110101110101", 
    97 => "00111101110001001011111101001101", 
    98 => "00111100000011100101111100001001", 
    99 => "00111100110010000011001101110101", 
    100 => "10111101101000111000010011100010", 
    101 => "00111110000001000010111111101000", 
    102 => "00111110001011001001001010011011", 
    103 => "00111101111110100010110101110011", 
    104 => "10111110001010111110011010100011", 
    105 => "00111100100011100010110010110100", 
    106 => "10111100011001100110001111100010", 
    107 => "10111101011001110011000111010011", 
    108 => "00111101100001110010000100001100", 
    109 => "10111110001011001110101001101100", 
    110 => "10111110001101011000100011100011", 
    111 => "10111101110011000100100101011100", 
    112 => "10111100101010001111011111011011", 
    113 => "10111100101101100000001111001000", 
    114 => "00111101101101000110010010011001", 
    115 => "10111101110110011101110010110101", 
    116 => "00111110001100010100000101100011", 
    117 => "00111110001001001100110101110101", 
    118 => "00111101101101011100001101011001", 
    119 => "10111101000000110010000100111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_13 is
    component inference_conv2d_f3_3_2_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_13_rom_U :  component inference_conv2d_f3_3_2_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


