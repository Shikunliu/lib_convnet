-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011011111100000101011", 
    1 => "10111110001111011110001011101111", 
    2 => "10111101000100011101111010000101", 
    3 => "00111101010011111110011110000100", 
    4 => "00111110001111101101111000010010", 
    5 => "00111100100101000010100101001101", 
    6 => "00111101110101110110110011001110", 
    7 => "10111101100100001010111001000110", 
    8 => "00111101011010111100010101001011", 
    9 => "00111100000010001011000100101010", 
    10 => "00111100101110101111111010100100", 
    11 => "00111101010010111110110001101000", 
    12 => "00111100110100010111000010100000", 
    13 => "10111110011010100010001010110100", 
    14 => "10111101100011000010000110111010", 
    15 => "10111100001000010101111001001010", 
    16 => "00111100010110001011100111010101", 
    17 => "00111101001101000111011100000000", 
    18 => "10111101111000000100100111101101", 
    19 => "10111110001100100000001001010100", 
    20 => "10111101101011111000010110101111", 
    21 => "10111100110111111100010000100000", 
    22 => "10111100100000001000101001101001", 
    23 => "10111011001110110001011000010110", 
    24 => "10111101110000011010101101011001", 
    25 => "10111110001010111110100011111111", 
    26 => "10111110000001010010001010100111", 
    27 => "00111101010111101010011101010101", 
    28 => "00111101110110100111001100101110", 
    29 => "10111100100110000111111000010001", 
    30 => "10111101110100011100001100100110", 
    31 => "10111101000110010101110100110100", 
    32 => "00111100101111111100110100001010", 
    33 => "10111110001110111101100001111011", 
    34 => "00111100101101000100000001000100", 
    35 => "10111101111011001110000100111111", 
    36 => "10111100101011111001111101100000", 
    37 => "10111100101010101101110110001111", 
    38 => "00111101100001011110100001110111", 
    39 => "00111101000100101110010010001111", 
    40 => "10111110001111011110011100100001", 
    41 => "00111101111000101101010010010001", 
    42 => "00111100100110101010000110100010", 
    43 => "00111100101010011111000100000000", 
    44 => "10111100011001001010101101111011", 
    45 => "10111101110100100111000010110000", 
    46 => "00111101100001110110011000110011", 
    47 => "10111101011011100111010001101101", 
    48 => "00111011100101001000111011011000", 
    49 => "10111101100110001010010011011101", 
    50 => "00111101111100111110001101011100", 
    51 => "10111101100011110000101010010101", 
    52 => "10111100111111110000110010111011", 
    53 => "10111100110011110010011110000110", 
    54 => "00111100110110000010110000010001", 
    55 => "00111100100001110010101000101011", 
    56 => "10111110001001101010000101100010", 
    57 => "10111100110111100000101100011000", 
    58 => "00111101101100010111011000000111", 
    59 => "10111100000000111111010000001011", 
    60 => "00111101101100110100000110011110", 
    61 => "00111101101011010000001101100001", 
    62 => "00111101010100101001111010111001", 
    63 => "10111101110010011000111000111001", 
    64 => "10111101010001111101101011011011", 
    65 => "10111100111000101000100101100010", 
    66 => "10111101111011111010101101010100", 
    67 => "10111011111101011000011111000001", 
    68 => "10111101100000100101111001111111", 
    69 => "00111101111110010010001000010000", 
    70 => "10111100000001011101011011111010", 
    71 => "10111101110101111101000101111000", 
    72 => "00111101000111001111110100110001", 
    73 => "00111011100001101101110010101001", 
    74 => "10111110001011001001100110101111", 
    75 => "00111101100101000110010011001111", 
    76 => "00111100100101010111111001001100", 
    77 => "00111110001010011001001110010010", 
    78 => "10111101100100010010001111011111", 
    79 => "10111101001001001010011110110101", 
    80 => "00111101011111110000100010100100", 
    81 => "00111100101101010000001001110110", 
    82 => "00111101111000111001110001010010", 
    83 => "00111101010011100001000100100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_1 is
    component inference_mult_1_120_120_84_s_W4_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_1_rom_U :  component inference_mult_1_120_120_84_s_W4_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


