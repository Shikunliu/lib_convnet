-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111010001111101100000001", 
    1 => "00111101100011011100001101010010", 
    2 => "10111101100001101011001101010000", 
    3 => "00111110010111110101011111110111", 
    4 => "00111100100010101011100100101100", 
    5 => "10111101011000100011110100001100", 
    6 => "10111101100100101100111001100001", 
    7 => "00111100100000000000101001000111", 
    8 => "00111110000001111010111010011011", 
    9 => "00111100010110010111110011011110", 
    10 => "10111101111110001010011001010101", 
    11 => "00111101111110110001000110000100", 
    12 => "10111101000111010000100110101011", 
    13 => "10111100101110001000111000011100", 
    14 => "00111101011010000100011100010001", 
    15 => "00111101101010001001011001110010", 
    16 => "00111101100101011010011011100001", 
    17 => "00111110001110001011110101100110", 
    18 => "00111011100001100010101101111110", 
    19 => "10111100000101100110001111111010", 
    20 => "10111101010011000110110101111100", 
    21 => "10111100010000000101110001111100", 
    22 => "00111101000001010010001000010011", 
    23 => "00111101101000000011010011001100", 
    24 => "00111100100110000000111011101010", 
    25 => "00111101000100110010111110001000", 
    26 => "00111101101110000001011011111101", 
    27 => "10111101011001011011000001111001", 
    28 => "00111101001100011110010001100100", 
    29 => "00111011110011010000001101010011", 
    30 => "00111110010011001011010100110101", 
    31 => "10111101000111110000000010010001", 
    32 => "00111101101010011111001000100111", 
    33 => "10111101110011000101001100111000", 
    34 => "00111101100100011111111111000010", 
    35 => "10111101101000100011001011101110", 
    36 => "10111101101011101001101011001101", 
    37 => "10111110001101011000100011100011", 
    38 => "10111101011010111111111100010010", 
    39 => "10111101011001100101010011100100", 
    40 => "00111110000010010110010000011111", 
    41 => "00111101000001110110010111010101", 
    42 => "10111101000101110000001100011100", 
    43 => "10111101110100111010000001000000", 
    44 => "00111101100001010111101110111011", 
    45 => "10111101110111010001111101100000", 
    46 => "10111101001101010110010101010111", 
    47 => "00111101110000111000011100100011", 
    48 => "00111100001101000000000100100100", 
    49 => "10111110001100111100000011000010", 
    50 => "10111110000010001001100010110011", 
    51 => "00111110011010010001101000110011", 
    52 => "10111110000001000010010101101100", 
    53 => "10111110000101010101101101000110", 
    54 => "00111100001011001100010000011001", 
    55 => "10111101101010010000100001111010", 
    56 => "00111101010111000101101001110100", 
    57 => "00111110000100111100000100000101", 
    58 => "00111101111111100111000100000100", 
    59 => "10111101011011101110001000011011", 
    60 => "10111100111010010100010101110100", 
    61 => "10111110000001011001100011100001", 
    62 => "10111001110010000110000011001111", 
    63 => "10111110000001111100111111100110", 
    64 => "10111101101000100000101101100110", 
    65 => "00111100111100101011010010001000", 
    66 => "10111110010100000000101101000110", 
    67 => "10111101010110010100111100001100", 
    68 => "10111110000010100011101000001000", 
    69 => "10111110010001101101101000000001", 
    70 => "10111110001101100000010100100101", 
    71 => "10111110001011100110110011010011", 
    72 => "10111101011011010111000000101011", 
    73 => "00111110001110010110010100101100", 
    74 => "10111110000110110101111111100101", 
    75 => "00111100001001011001100001000000", 
    76 => "00111110000010001101101110001100", 
    77 => "00111101000001000100001110101100", 
    78 => "00111101101001111001000111111010", 
    79 => "10111101010001000100000101000011", 
    80 => "00111110001000101101111101010000", 
    81 => "00111101001000101011000101010101", 
    82 => "10111101101101011001101011011111", 
    83 => "10111100100100100000011011001000", 
    84 => "10111101111011011110000100011010", 
    85 => "00111110010001111110110000110101", 
    86 => "00111101111000011111110000001001", 
    87 => "00111101011011000101011111111101", 
    88 => "10111110001000110101110000011000", 
    89 => "10111101101111100010110101000111", 
    90 => "10111101011111110100111110000110", 
    91 => "10111100101100111110100101110001", 
    92 => "00111110011101000000110111010100", 
    93 => "10111100001101100101100010000010", 
    94 => "00111100010010100100010001011100", 
    95 => "10111101100111111101100100001100", 
    96 => "00111110000100110010001110111100", 
    97 => "10111101101101100100010000110111", 
    98 => "00111101111011011111001001100111", 
    99 => "10111110010010110111010010011011", 
    100 => "00111110000110100000010110011010", 
    101 => "10111101011010100111000100111101", 
    102 => "10111110000111011000101011011011", 
    103 => "00111101111110110101010100100110", 
    104 => "00111101000001110101010011011001", 
    105 => "00111110010100001100101001100000", 
    106 => "10111110000000101100000101101110", 
    107 => "10111100101011111011011000000110", 
    108 => "00111101011001011101010101100010", 
    109 => "10111110000100110110101100001001", 
    110 => "00111110000000001101100101010001", 
    111 => "10111110001101111001001101010111", 
    112 => "00111101001010110100010011011000", 
    113 => "00111110000010000110110101110010", 
    114 => "10111100001010010100111100011001", 
    115 => "00111110001010011010010111101100", 
    116 => "00111100110000101010111101110010", 
    117 => "00111100111110110100100111101110", 
    118 => "00111011100110101010100010111000", 
    119 => "10111101100101010111010111001110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_7 is
    component inference_conv2d_f3_4_0_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_7_rom_U :  component inference_conv2d_f3_4_0_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


