-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100100100111101101100010", 
    1 => "10111101100000001110100101001111", 
    2 => "10111011111000000111100010010001", 
    3 => "00111101110101110111100101100100", 
    4 => "10111100111101000100110010100011", 
    5 => "10111100110001111101101101100001", 
    6 => "00111101010100100110101110001101", 
    7 => "10111101101111010000011110100000", 
    8 => "10111110000101100010010101100011", 
    9 => "00111110010000110001100111000110", 
    10 => "10111101101100111110100101001001", 
    11 => "00111101100110010010000010001011", 
    12 => "10111101100001110011100110110000", 
    13 => "10111110000001000100101110110010", 
    14 => "00111101111011010111010110011111", 
    15 => "10111101100100110000001001001001", 
    16 => "00111110000011000011011001010100", 
    17 => "00111101100011000100011110010100", 
    18 => "10111101100001110011110101101001", 
    19 => "00111100110010000101101100011000", 
    20 => "00111101110010001111000000110100", 
    21 => "10111101101110110011110000010110", 
    22 => "10111101000000001111110111000001", 
    23 => "10111110001000111001110111100101", 
    24 => "00111101100101111000100011011011", 
    25 => "00111110001010010001101000110011", 
    26 => "10111101010101011101111011000100", 
    27 => "10111101101111111110011110101100", 
    28 => "00111101101110010111111011110111", 
    29 => "00111101110110000010110010110010", 
    30 => "00111101101000100110101100010100", 
    31 => "00111101100001000011000110110000", 
    32 => "00111101100001100001101010100100", 
    33 => "10111110001101101100100000101110", 
    34 => "00111011100010010110100010001010", 
    35 => "10111101101110010010110010011010", 
    36 => "10111110010100000011100111101111", 
    37 => "00111101111111010111110100111001", 
    38 => "00111110000001100111100000111010", 
    39 => "10111011110011111100110111011110", 
    40 => "00111101111001001101101010010000", 
    41 => "00111101001100010010111110111000", 
    42 => "00111101011011101001011111000011", 
    43 => "10111110000101011111001111011000", 
    44 => "00111101100111100010101110110101", 
    45 => "00111101011001111001111011111011", 
    46 => "10111110010001010110010110000000", 
    47 => "10111101111000010011000110101001", 
    48 => "00111110001111111001010010000101", 
    49 => "10111101101000001100111110011110", 
    50 => "10111101001100001100110111111110", 
    51 => "10111101110111011001110010101110", 
    52 => "10111110001100111011101000110100", 
    53 => "10111100010111011110000111001000", 
    54 => "10111101000100011111011000000001", 
    55 => "00111101111101111101010000010111", 
    56 => "00111101101111111001111100101010", 
    57 => "00111100011000101110011000010100", 
    58 => "10111101100111111000100010101100", 
    59 => "00111101011010010001010110001000", 
    60 => "10111100110110111011011100010110", 
    61 => "10111101100010100100111001100000", 
    62 => "00111101101010010000101111001000", 
    63 => "00111011010010011010001011001100", 
    64 => "00111100000000000010100000111001", 
    65 => "00111110001001001110110101110000", 
    66 => "00111101011110011001111110101111", 
    67 => "00111101110100100000110010001101", 
    68 => "00111101000011001110111001011011", 
    69 => "00111101110111111011001111111010", 
    70 => "10111101000110100001001010000000", 
    71 => "10111110010000110001000011011100", 
    72 => "10111011101000011111000010000000", 
    73 => "00111101101001111111001101100100", 
    74 => "00111101001001101010100001110110", 
    75 => "10111101101100100001110111011010", 
    76 => "00111101001001001011001011101101", 
    77 => "00111110001010110100111001010101", 
    78 => "10111101001100110010010000011010", 
    79 => "10111100100010110000000110111100", 
    80 => "00111101100111101001101110110010", 
    81 => "00111101010110100110001010111000", 
    82 => "00111100111011000111101011101000", 
    83 => "00111100111010111001110011010001", 
    84 => "00111110000010010100101011110101", 
    85 => "00111101101101010100101110110100", 
    86 => "00111101000101111011001100010000", 
    87 => "00111100011010100000101011001011", 
    88 => "00111101000100100101110111010001", 
    89 => "10111101100001111010000111111000", 
    90 => "00111110001000000001101010111101", 
    91 => "10111110000100110001100111000110", 
    92 => "00111101111101011001000011000001", 
    93 => "10111101101110111101011001100010", 
    94 => "00111100010111010000011000000000", 
    95 => "10111110000100000100110111011011", 
    96 => "10111110000011011010011010100100", 
    97 => "00111100100000111101001011110011", 
    98 => "00111101010000000111100100110111", 
    99 => "00111101110101110011110000001100", 
    100 => "00111101101100010110110010010111", 
    101 => "10111101011101001101000110110100", 
    102 => "10111101110111010101100100001100", 
    103 => "00111101111110100001101000001101", 
    104 => "00111101111000001100010000010101", 
    105 => "10111101111010001000001001101011", 
    106 => "10111101000110010001001011110110", 
    107 => "10111101100010100011100000001010", 
    108 => "00111101100000011000111000011000", 
    109 => "00111100010110001100101111011111", 
    110 => "10111110001000011100101000111010", 
    111 => "10111101101100001001110000010101", 
    112 => "10111101000111001001101000110101", 
    113 => "10111101110011101010100011011010", 
    114 => "00111110010001010110000111010100", 
    115 => "10111101110001100100001101010011", 
    116 => "00111110000000110010101000000110", 
    117 => "00111110000110000110001010110010", 
    118 => "00111101111111011011101000001010", 
    119 => "10111101011110110100011100110100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_3 is
    component inference_conv2d_f3_2_2_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_3_rom_U :  component inference_conv2d_f3_2_2_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


