-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101110111011101111001110", 
    1 => "10111011100011010100010001110111", 
    2 => "00111101111001001111000000001111", 
    3 => "10111110011011101011011111001100", 
    4 => "10111101011111100110001001110001", 
    5 => "00111110001011111001011000011000", 
    6 => "10111100101110010100111011010110", 
    7 => "00111101110111100110101111000110", 
    8 => "00111101011010010100111001011101", 
    9 => "00111101001110101111010011001001", 
    10 => "10111101100000010000001010000111", 
    11 => "00111100001101100100011011100100", 
    12 => "10111101011111101000101110001100", 
    13 => "00111101101100110001010101011110", 
    14 => "10111100110011011000011100000111", 
    15 => "00111100101011001101000001000011", 
    16 => "00111101100000001111011100100110", 
    17 => "00111101110101010100111010110001", 
    18 => "10111110000101110010110000001110", 
    19 => "10111110000100111101101001110011", 
    20 => "10111110001000010100111101001000", 
    21 => "00111101111111000010001000100101", 
    22 => "10111101101111001010011001011111", 
    23 => "10111101101001001101000000010100", 
    24 => "00111101110001101111110001110100", 
    25 => "10111100110111101100110011011111", 
    26 => "10111101010001000100001001001111", 
    27 => "10111101111001101001100101000010", 
    28 => "10111101111000000000000110010011", 
    29 => "10111101000111110110100111011000", 
    30 => "10111101110000110101100100110110", 
    31 => "10111101101111110100101110001010", 
    32 => "10111101100110111100110011011000", 
    33 => "10111100111110010100010010001111", 
    34 => "10111100101001011001101001011001", 
    35 => "10111011110101110101011001111110", 
    36 => "10111100001000001110001101100101", 
    37 => "00111110010001010101010001110110", 
    38 => "00111101100101101110011100001111", 
    39 => "00111100001111011000111001101011", 
    40 => "10111101000110101000101001011010", 
    41 => "00111101110100111101010100110100", 
    42 => "10111101001011001011111101000110", 
    43 => "10111110000101011101101001101010", 
    44 => "10111110001101100111110101111000", 
    45 => "00111101100001001011010111001111", 
    46 => "10111101110110101000010100000001", 
    47 => "00111100100011001011011110011110", 
    48 => "00111110000110100000100011000000", 
    49 => "10111101011010101001110100010010", 
    50 => "10111101010100101000011110001100", 
    51 => "00111101001110111011110010001010", 
    52 => "10111100011010000100110000011010", 
    53 => "00111101100001111001001111111000", 
    54 => "10111110000100101011110011111001", 
    55 => "10111100100100010110010010101100", 
    56 => "00111100100001001000001110111110", 
    57 => "10111110001001010010111010110110", 
    58 => "10111101010101101100110100000001", 
    59 => "00111101101111111111000010001001", 
    60 => "10111101101100110000001000111011", 
    61 => "00111100011000110011110101010010", 
    62 => "10111110000111111000111100000100", 
    63 => "10111100000001010111001110101000", 
    64 => "00111100110111001110001110011011", 
    65 => "00111100110000010110100010000000", 
    66 => "00111011000100010100010000001011", 
    67 => "00111101111011010100000100110001", 
    68 => "10111110000000011110110111100001", 
    69 => "10111100110010111111110011000011", 
    70 => "10111110000011010000001000000100", 
    71 => "10111110001110011001000011110011", 
    72 => "00111101111010111100011100101110", 
    73 => "10111101010100001000111100101111", 
    74 => "00111101010111100001011010000110", 
    75 => "00111101100011000111001100110011", 
    76 => "10111100111001000010101100100011", 
    77 => "00111011101111001010011010001111", 
    78 => "10111110000011101000110001001000", 
    79 => "00111101111001111111011011110101", 
    80 => "10111100111111001110100110010101", 
    81 => "00111110000010110011010000011110", 
    82 => "10111110000110101101001010011010", 
    83 => "10111101101001111100101110001100", 
    84 => "00111101111100101111011101101110", 
    85 => "00111101101000001100010101011000", 
    86 => "00111101100111101100001111011011", 
    87 => "10111001010110011011001010110001", 
    88 => "00111100010010001010011110100100", 
    89 => "10111101100111100001110001001011", 
    90 => "10111101000110010101000110010000", 
    91 => "10111101111001100001110110000110", 
    92 => "00111101000110010001001100101100", 
    93 => "10111100010111000000111010001001", 
    94 => "00111100101100001110000000111101", 
    95 => "00111101110111011001110000101000", 
    96 => "10111110001011000100100100110100", 
    97 => "00111101110000110001000111000000", 
    98 => "00111101110101101100101101010011", 
    99 => "00111100111110000001100001110101", 
    100 => "10111101001100111101010011001001", 
    101 => "00111101110100010110000110100010", 
    102 => "00111100000111100111110010001101", 
    103 => "10111110001110110000001101011100", 
    104 => "00111101100110100001101000000000", 
    105 => "10111100111010111111000001001001", 
    106 => "00111101110101110001001100100111", 
    107 => "00111110000011110100010111100001", 
    108 => "00111101000101101000101000000000", 
    109 => "00111101100111110100000000000001", 
    110 => "10111100110011100011111010111101", 
    111 => "10111101000111101010100110001001", 
    112 => "00111101101001111111101101000001", 
    113 => "00111101100101001001111011011001", 
    114 => "10111110000011111100100100110110", 
    115 => "00111100100110110000010100001001", 
    116 => "00111110001000111011110100010110", 
    117 => "00111101101011100100111101000001", 
    118 => "00111100100000010111011100101110", 
    119 => "00111101110101011000000100000110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_10 is
    component inference_conv2d_f3_4_3_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_10_rom_U :  component inference_conv2d_f3_4_3_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


