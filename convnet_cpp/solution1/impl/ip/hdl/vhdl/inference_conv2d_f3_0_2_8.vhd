-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110010000000010011011010", 
    1 => "10111101110011100001000001001001", 
    2 => "10111101100111001110101000101001", 
    3 => "10111110000001100100010011011000", 
    4 => "10111110001101001110101110011010", 
    5 => "10111110100011111101100000000110", 
    6 => "00111101101110000000011101000011", 
    7 => "10111110001010011111001011111110", 
    8 => "10111110001011011011100010111011", 
    9 => "00111101110100000101111000011100", 
    10 => "10111101010010000110111010011001", 
    11 => "00111110001101000001011001111011", 
    12 => "00111101010001101111001111011010", 
    13 => "10111100100011100111010101000011", 
    14 => "10111100101111101110110010100101", 
    15 => "00111110000011101010001111011111", 
    16 => "00111101100001000000101001011110", 
    17 => "00111100101011110111101011100010", 
    18 => "10111110000011100101001110101000", 
    19 => "10111100110000011000100101101101", 
    20 => "10111110100011110010110111000011", 
    21 => "10111101001001110011110001001111", 
    22 => "10111101111011001010000101001001", 
    23 => "00111110001111111011100101111100", 
    24 => "10111010000010110001101001110010", 
    25 => "10111100110110000001101100010100", 
    26 => "00111101010111010111011000110011", 
    27 => "10111101110011110111000110101000", 
    28 => "00111101000001010111000101110100", 
    29 => "00111100100011101000001110111100", 
    30 => "00111101011000110001000100101100", 
    31 => "00111100111000101101000110000110", 
    32 => "00111110001110110011101101110101", 
    33 => "10111110001111110011101011011110", 
    34 => "10111110000001111000011000111100", 
    35 => "10111101101010010011110110110001", 
    36 => "00111101001000101100000111001100", 
    37 => "00111100000101111000100101011111", 
    38 => "10111101110011110110010110011001", 
    39 => "00111110001101011100110101001111", 
    40 => "00111101111011010111000111110011", 
    41 => "10111100000010110011000000101010", 
    42 => "00111110001010010010011010000101", 
    43 => "10111101001010110101010011100011", 
    44 => "00111110000000100011000101000000", 
    45 => "10111100110011101011001110001101", 
    46 => "00111110010001100101110100111010", 
    47 => "00111101011101001000110100000101", 
    48 => "00111101001000010010011111101000", 
    49 => "00111100110000110100010011111001", 
    50 => "10111110001100010011110000100101", 
    51 => "00111100000010101111001010101101", 
    52 => "00111101010011010011111111101111", 
    53 => "10111101100011110011111011110101", 
    54 => "00111110000101011111100111011111", 
    55 => "10111101100011101010101000000010", 
    56 => "00111110001111011011110011101101", 
    57 => "00111101100010010001110101100101", 
    58 => "10111101101001010001001111101011", 
    59 => "10111110001110011001101000100000", 
    60 => "10111101110011111011110110101101", 
    61 => "00111110000111100111001000010001", 
    62 => "00111101011101110110100100111110", 
    63 => "10111101010001111000101011011001", 
    64 => "00111101101101001111110000111001", 
    65 => "00111100000101010111000101010110", 
    66 => "00111101100100101111010001110001", 
    67 => "00111101000110000101101000110100", 
    68 => "00111101010001001001111110111101", 
    69 => "10111101010101000101100000010001", 
    70 => "00111110000111100110011000000010", 
    71 => "10111101011000011110100100101001", 
    72 => "10111100001010100101000100001100", 
    73 => "10111110001001001000100111010010", 
    74 => "00111101000000111010011010011001", 
    75 => "10111101010000111101111010110010", 
    76 => "10111101110010000000101111100000", 
    77 => "00111110001100100010000011111111", 
    78 => "10111100000111101010111111011001", 
    79 => "00111110000101000101101101101100", 
    80 => "10111010111000011100011111011100", 
    81 => "00111101100100100000111010100110", 
    82 => "00111110010110110110100000000110", 
    83 => "10111101101011101000000010001001", 
    84 => "10111100011111011001010000010101", 
    85 => "10111110000001110110110110011000", 
    86 => "10111100001101110000001001100000", 
    87 => "00111100110001111011010000101001", 
    88 => "00111101110011011111001011101101", 
    89 => "00111101111100001110110100111110", 
    90 => "10111101010000101001010111110111", 
    91 => "00111011011001110011001101010101", 
    92 => "10111101101001111001010011000010", 
    93 => "10111100100011101010010000001000", 
    94 => "00111110001010000011100101000111", 
    95 => "10111101100101001111000101010001", 
    96 => "10111101011000111100110111010000", 
    97 => "00111110000011011110010101001011", 
    98 => "10111101101111110110011100000011", 
    99 => "10111101110001101000111110001110", 
    100 => "00111101101001010011100110000011", 
    101 => "00111100011010101011100001110000", 
    102 => "10111110001101011000001100011111", 
    103 => "10111101001010100101011101110010", 
    104 => "10111101101010010111110111101011", 
    105 => "00111011110100110000001000000110", 
    106 => "10111100111110000101111111000011", 
    107 => "00111101001011001101101000111001", 
    108 => "00111110001011001101111001011101", 
    109 => "10111110001001110101011100001100", 
    110 => "00111101111001111000100101100001", 
    111 => "00111101001001111110000010111010", 
    112 => "10111110001000100111010000011001", 
    113 => "00111110010000001011111010010100", 
    114 => "10111100010110001001010000010110", 
    115 => "10111100110000010010110101011100", 
    116 => "00111110001100000100100110101010", 
    117 => "00111011011111101010101101000001", 
    118 => "00111110010000111111100001010101", 
    119 => "10111110000000000101010000100110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_8 is
    component inference_conv2d_f3_0_2_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_8_rom_U :  component inference_conv2d_f3_0_2_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


