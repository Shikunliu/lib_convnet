-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111010010001110110011011", 
    1 => "00111101101110101110100100011000", 
    2 => "10111101010111011100001100001111", 
    3 => "10111101110001001100111000110000", 
    4 => "10111101101111100000000100110000", 
    5 => "00111101110110000010001010111100", 
    6 => "00111110011001011111010010100001", 
    7 => "10111110001000010111101111011001", 
    8 => "00111101110100111101111000011110", 
    9 => "00111101110101011001001111100110", 
    10 => "10111100110001100000000100110110", 
    11 => "10111100011000010011111101001011", 
    12 => "00111110001101111110111001001110", 
    13 => "00111101001110100100010101110110", 
    14 => "00111100001101110110001000000001", 
    15 => "10111101101111011110011111101010", 
    16 => "00111101000000101000010010101010", 
    17 => "10111101101111100100010110101001", 
    18 => "00111100001101101001100111110000", 
    19 => "10111101010111110101010110011011", 
    20 => "00111011001100101101000000100001", 
    21 => "00111101101000101000001011010100", 
    22 => "10111100010010000101001011101011", 
    23 => "00111100111100010110111000000001", 
    24 => "10111110001011000111011000001000", 
    25 => "00111100111111010000100001101001", 
    26 => "00111101000101101000100110101111", 
    27 => "00111101010101001110100011100000", 
    28 => "00111101000001001110001111100101", 
    29 => "00111110001000001110001101000111", 
    30 => "10111101101100011001000000100011", 
    31 => "00111101001011101100110101110011", 
    32 => "10111101100111110110100101111010", 
    33 => "00111100111000000111011011001110", 
    34 => "00111101111100101011110010110110", 
    35 => "10111110001100011110100111110010", 
    36 => "00111011011011110110100000000010", 
    37 => "00111101001000111111100001111101", 
    38 => "00111110001001101100001100110011", 
    39 => "10111101100000000010010101010100", 
    40 => "00111101110011010110111011001110", 
    41 => "10111101011100101011111001111110", 
    42 => "00111101101011000001101000011111", 
    43 => "00111100011010010101010110011010", 
    44 => "10111101101001111111000100100011", 
    45 => "00111011011001100011011110101101", 
    46 => "00111100010101000000001001001011", 
    47 => "00111100100111000010001011100001", 
    48 => "00111101000000110110000100101110", 
    49 => "00111110010010101100010011111000", 
    50 => "00111101111110011111011111111001", 
    51 => "10111110000100011000001110110110", 
    52 => "00111101101010010110011010110001", 
    53 => "00111100111000101111010011000010", 
    54 => "10111101100010011011101000110110", 
    55 => "00111110000101101111101001000000", 
    56 => "00111101100101000001000010000001", 
    57 => "00111100001101010001010111110111", 
    58 => "10111100001110100011100000001010", 
    59 => "00111110001110000001100001000000", 
    60 => "00111101100010110111011001010110", 
    61 => "00111101100110000111100111010001", 
    62 => "10111100111101011100011101100010", 
    63 => "00111100101000101000100100101100", 
    64 => "10111100000101100000010111000110", 
    65 => "00111101011001010101101101010100", 
    66 => "00111101100111111011011100000101", 
    67 => "10111101111001011010000010111110", 
    68 => "00111101101100010001101110010110", 
    69 => "00111011011010010101110010100101", 
    70 => "00111100100111111010111000011011", 
    71 => "00111101110001000101101001000101", 
    72 => "00111101110101001010010001001100", 
    73 => "00111101000110010101110011100011", 
    74 => "10111100110000000101001111100011", 
    75 => "00111101011011111011011000000110", 
    76 => "10111101001110110001110001101011", 
    77 => "00111101111011010010111111100100", 
    78 => "10111101100100011101100001010101", 
    79 => "00111110001011001101101001101110", 
    80 => "10111101000110101110000010001100", 
    81 => "10111110000110101111011010000011", 
    82 => "00111101110010111001000101100011", 
    83 => "10111110000101110011000101001101", 
    84 => "10111101100001000101110011100100", 
    85 => "10111100010110111001100110000100", 
    86 => "00111101110001000111011101111001", 
    87 => "10111100110110000101101100001011", 
    88 => "00111100010111110011110111101001", 
    89 => "00111110000001000111100101001111", 
    90 => "10111110000000101100001010111101", 
    91 => "10111110000010110000010000100101", 
    92 => "10111100000011101110001001010001", 
    93 => "10111110001011100110011001000101", 
    94 => "10111101100100011111111101111111", 
    95 => "00111100011010110011111010101000", 
    96 => "10111101011100011011100111101100", 
    97 => "10111101000001000010010010111101", 
    98 => "10111101100000100100011000011110", 
    99 => "10111101001000111100011001011110", 
    100 => "10111101011000111010100111011001", 
    101 => "00111101100011010111010110011111", 
    102 => "10111101011111010000110001001011", 
    103 => "10111101010110000010011010111000", 
    104 => "00111110001110010001111100101110", 
    105 => "10111011100001110100111111101011", 
    106 => "10111101100100111010011100010001", 
    107 => "10111101110111010001000110111110", 
    108 => "00111010100110011101101010000111", 
    109 => "10111100110000110110100111100010", 
    110 => "00111101001110101010001111010101", 
    111 => "10111101100111100110010011000000", 
    112 => "10111101100101100000001100011010", 
    113 => "00111101000001101001011101000011", 
    114 => "10111101101000010101000110110010", 
    115 => "00111100101000001010110101010100", 
    116 => "00111100101000000011001011011011", 
    117 => "10111101101000111001111010100000", 
    118 => "00111101101101010110100111110101", 
    119 => "00111110010101110111001001010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_5 is
    component inference_conv2d_f3_1_3_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_5_rom_U :  component inference_conv2d_f3_1_3_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


