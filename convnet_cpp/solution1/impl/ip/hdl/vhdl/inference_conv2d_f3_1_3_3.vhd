-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010101101000111101100011100", 
    1 => "00111101110000111011111011000100", 
    2 => "10111110000001111110010110101000", 
    3 => "10111101110011111000001101111011", 
    4 => "00111101110111110100010101011010", 
    5 => "10111101111011101000010000100111", 
    6 => "00111101010010000100000011100001", 
    7 => "00111011100001010100110101110010", 
    8 => "10111101111000101100111111011001", 
    9 => "10111100000000011110100100001110", 
    10 => "00111110010111011100001110111101", 
    11 => "10111101100011010100100000101010", 
    12 => "10111101111000000000011111011101", 
    13 => "00111011101110111010010111011110", 
    14 => "00111101011001111101110100001110", 
    15 => "00111101111011100001101011000101", 
    16 => "10111101111011000000100010110111", 
    17 => "00111010011011110010010000100001", 
    18 => "10111100111000101110100101101111", 
    19 => "10111110010010111000111000001000", 
    20 => "10111101100101111000000100011001", 
    21 => "10111101010101110100000100101111", 
    22 => "10111101101001110100000010101001", 
    23 => "00111100101111100110100001010000", 
    24 => "00111101011101100010111001000000", 
    25 => "00111100110101111100001101101011", 
    26 => "00111101001001110111001111111101", 
    27 => "10111101110000001010101001100101", 
    28 => "00111100110110000010011100111110", 
    29 => "00111101100010010010000101010100", 
    30 => "00111101100111111100000010111000", 
    31 => "00111101111001010111000100001001", 
    32 => "10111110001001101100001111111100", 
    33 => "00111100100110101000000100100000", 
    34 => "00111100111010000110010001101101", 
    35 => "10111101101101011010111001000101", 
    36 => "00111101100111110100100101001001", 
    37 => "00111100010000011100101100010001", 
    38 => "10111101100000001011000010000111", 
    39 => "10111101011111101001011100010101", 
    40 => "00111110001101101000010111011011", 
    41 => "00111100101000001100110001011110", 
    42 => "00111101111011010110000000100000", 
    43 => "00111110001110010100001001001110", 
    44 => "00111101100000100010001110000100", 
    45 => "00111110011001010000011110100111", 
    46 => "10111101110101011010011001000000", 
    47 => "00111101110110001111011100010010", 
    48 => "00111100101100011000110000110100", 
    49 => "10111101110011010110111101010100", 
    50 => "00111101100000011001101100011000", 
    51 => "10111101001011000101111010110011", 
    52 => "10111101100001100101000010010111", 
    53 => "00111100001001001101111011011101", 
    54 => "10111101111100010000011011101110", 
    55 => "10111110000111001111001001001001", 
    56 => "10111101101110001100101110110110", 
    57 => "10111110000000101001010010011010", 
    58 => "00111101010110101100101111001001", 
    59 => "10111100101101010101001001011101", 
    60 => "10111110000010010101001101011000", 
    61 => "00111101101110011111111001101100", 
    62 => "10111101011000101011010000101010", 
    63 => "10111101001001001011001010110111", 
    64 => "10111101001001011000110110101001", 
    65 => "10111101011100000000111110010010", 
    66 => "10111110000010101001101110001101", 
    67 => "10111110000111011101101011001111", 
    68 => "00111011100010011110101101010001", 
    69 => "00111101110111110101110001101100", 
    70 => "10111101110101000010010101101100", 
    71 => "10111110000111001011100101100111", 
    72 => "10111101000011111101000100010100", 
    73 => "10111100111010110010111010111000", 
    74 => "10111110000100000110110111010111", 
    75 => "00111100111010001011100110010010", 
    76 => "00111101100101000001100111010110", 
    77 => "00111100011111011100001000111000", 
    78 => "10111110000110000000111100010011", 
    79 => "00111101111010100111110001011011", 
    80 => "00111101100011011001111000011001", 
    81 => "00111011101000011010000101100101", 
    82 => "10111101101000111110000101111001", 
    83 => "10111101110110011111011011101100", 
    84 => "10111101111011011110001010101100", 
    85 => "10111101011100010100010101101101", 
    86 => "00111101001111111011011000101110", 
    87 => "00111100110101110111000011001010", 
    88 => "10111110000011101001101100111001", 
    89 => "10111110000110111110001010110101", 
    90 => "10111101100000101011010110111101", 
    91 => "10111101001010010000011111001100", 
    92 => "10111101110101100100100101001101", 
    93 => "10111010101100111001100010011110", 
    94 => "10111100101101010111010011110111", 
    95 => "10111101110010011011001011010001", 
    96 => "00111101010010000000011010101111", 
    97 => "00111011001011100100001111110110", 
    98 => "00111101000011001111010001010101", 
    99 => "00111101110110011111001000110100", 
    100 => "00111101001110101000001111011010", 
    101 => "10111101001011110101000011110001", 
    102 => "10111110001110110001011011000010", 
    103 => "00111101101010101111111000101011", 
    104 => "10111110000000100110000110111111", 
    105 => "00111011101100010111011010011011", 
    106 => "10111110000000010100100111000111", 
    107 => "10111100100011110010011111110001", 
    108 => "00111101001001011110001001111101", 
    109 => "10111101101011111010101110110010", 
    110 => "00111110001101110010000011001001", 
    111 => "10111101111000100000001111100110", 
    112 => "00111101101000010011110011000110", 
    113 => "10111101000010111101000011101111", 
    114 => "00111101110000011000010000010100", 
    115 => "10111101100110100100110100011110", 
    116 => "00111101111100100010001100011000", 
    117 => "00111101110011011010111000111110", 
    118 => "10111101011011010100000110110111", 
    119 => "00111100010010101100010001001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_3 is
    component inference_conv2d_f3_1_3_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_3_rom_U :  component inference_conv2d_f3_1_3_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


