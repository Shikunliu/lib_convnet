-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101010010000000010101010", 
    1 => "10111100111101000100010100010111", 
    2 => "10111101001101100101111010010111", 
    3 => "00111101101011000110000100101010", 
    4 => "00111101011001110111101010110011", 
    5 => "10111110001011011001100000111001", 
    6 => "10111101101000001000111010101001", 
    7 => "00111101000001001011100011100111", 
    8 => "00111100110111000011000111111010", 
    9 => "10111110010101111101000011110010", 
    10 => "00111110000111010001010101101010", 
    11 => "10111011101011101111110110101111", 
    12 => "10111101111111000110011001001101", 
    13 => "10111100111100100000001001111100", 
    14 => "10111101010010000100110010111011", 
    15 => "10111110000001100011110010111000", 
    16 => "10111101101011011110001110101011", 
    17 => "10111110001010101110111000100000", 
    18 => "10111100111001100110110001111011", 
    19 => "00111110100000101001110001010110", 
    20 => "00111011110010100000011011110101", 
    21 => "10111011000000000111010100000101", 
    22 => "10111110000001110111000100000000", 
    23 => "00111010100011111110010001100100", 
    24 => "00111101010001100000101110011000", 
    25 => "00111100100100111110101101101111", 
    26 => "00111100001011111011110011110010", 
    27 => "10111100110111100011101111000000", 
    28 => "00111101100111100111100100010111", 
    29 => "10111101110110101100010101111110", 
    30 => "10111101101111000100011011100110", 
    31 => "10111100101000011100001110011111", 
    32 => "00111011100000011111011111010010", 
    33 => "00111101000000110100011110110011", 
    34 => "10111100111000000011000011000010", 
    35 => "10111101101111111110000101000111", 
    36 => "00111110001011110101110111111111", 
    37 => "10111101101011100101101100110101", 
    38 => "10111110001000111001001001011100", 
    39 => "00111101010110100000101101000100", 
    40 => "10111101011010000110110010011011", 
    41 => "00111100111110011001101010001011", 
    42 => "00111101010011111010011100111101", 
    43 => "00111011101101010101010111111000", 
    44 => "10111101000011011011001000000101", 
    45 => "00111011100111100000011001010000", 
    46 => "00111100001100111000011100010110", 
    47 => "00111100100001100011001011101010", 
    48 => "00111100110100010110001101101010", 
    49 => "10111101010001111001001010000001", 
    50 => "10111101101001011111101111011101", 
    51 => "10111101100010111011110011110101", 
    52 => "10111011011110011000000110001100", 
    53 => "00111101000000011010111111101001", 
    54 => "10111101101100100101111011010000", 
    55 => "00111100101100011011110101111101", 
    56 => "00111101101111000100010100111000", 
    57 => "10111101000111011111011010100110", 
    58 => "00111101010110101100110000011001", 
    59 => "10111101010000101011101110000001", 
    60 => "10111110000010110111010001011000", 
    61 => "10111101111101111110010001011000", 
    62 => "00111101101010111001101110111000", 
    63 => "00111110001110101110111010100110", 
    64 => "00111011111100011100001101010001", 
    65 => "00111101100100110000011110111101", 
    66 => "00111100010111111010110111100110", 
    67 => "00111101111111111101011000001111", 
    68 => "00111101100001110010011111001111", 
    69 => "10111101010101000111100010010011", 
    70 => "10111011110110010101010011000101", 
    71 => "00111110010000101111101111100011", 
    72 => "00111101001101010001110011001000", 
    73 => "10111101100010011110110111110101", 
    74 => "10111101001101000101110001111001", 
    75 => "10111101101110100100011011100001", 
    76 => "00111101101001111000100101111100", 
    77 => "10111101011111110001011001111011", 
    78 => "00111100110101000111101001110110", 
    79 => "00111101010001100111001000100101", 
    80 => "10111110001010010111101011101110", 
    81 => "10111101100110110011011101000011", 
    82 => "00111100110001011010011000110010", 
    83 => "00111101011111110100000111100101", 
    84 => "00111101010000011101011100100000", 
    85 => "10111110001001110011101110000110", 
    86 => "10111110001100111101001110100010", 
    87 => "10111100111010000111101001110011", 
    88 => "10111101111010110110001010000100", 
    89 => "00111101101110010111100010101101", 
    90 => "10111101111101000010110000111101", 
    91 => "00111100011100100011100010010111", 
    92 => "00111101110000011011000100010000", 
    93 => "10111110000010111011001101000010", 
    94 => "10111101101111111010100101111110", 
    95 => "00111101011111011110111101101010", 
    96 => "10111100011000001000011010111110", 
    97 => "00111101001010101000011000011011", 
    98 => "00111101100110100111010000000101", 
    99 => "10111101000111111001100010000001", 
    100 => "00111101001011001101010111101100", 
    101 => "00111100111101000101000111100001", 
    102 => "10111101001101111010111001110010", 
    103 => "00111101011010011011000111100000", 
    104 => "00111100011000100100000011010010", 
    105 => "00111101100011111110111100011110", 
    106 => "00111100111101011001001010001001", 
    107 => "10111101110100000000111101110111", 
    108 => "00111100100100001110101000110011", 
    109 => "00111101001011100010110101110000", 
    110 => "10111100011000000010101110111010", 
    111 => "10111101101000111111010010011100", 
    112 => "00111101110010001100010111110010", 
    113 => "00111101000001000001000100000111", 
    114 => "10111100111010001010010010011010", 
    115 => "00111101101011001011000101111100", 
    116 => "10111101100001101011000101000101", 
    117 => "00111101000001100001110100110110", 
    118 => "10111101000001010110110011110010", 
    119 => "10111101001101110100101011010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_0 is
    component inference_conv2d_f3_0_4_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_0_rom_U :  component inference_conv2d_f3_0_4_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


