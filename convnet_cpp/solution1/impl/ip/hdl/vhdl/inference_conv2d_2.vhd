-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_conv2d_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    W_ce0 : OUT STD_LOGIC;
    W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_feature_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_feature_0_0_ce0 : OUT STD_LOGIC;
    out_feature_0_0_we0 : OUT STD_LOGIC;
    out_feature_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inference_conv2d_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_38 : BOOLEAN;
    signal filter_idx_1_fu_247_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal filter_idx_1_reg_514 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_75 : BOOLEAN;
    signal tmp_cast_fu_259_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_reg_519 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond3_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_addr_reg_524 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_feature_0_0_addr_reg_529 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_r_idx_cast5_fu_263_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_r_idx_cast5_reg_534 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal out_c_idx_cast4_fu_267_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_c_idx_cast4_reg_539 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal in_ch_idx_1_fu_277_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_ch_idx_1_reg_547 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal tmp_s_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_552 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_67_fu_287_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_67_reg_557 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_idx_2_fu_297_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_idx_2_reg_565 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal tmp_68_fu_324_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_reg_570 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_70_reg_575 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_idx_2_fu_358_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_idx_2_reg_583 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_144 : BOOLEAN;
    signal exitcond_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_val_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_159 : BOOLEAN;
    signal W_load_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_169 : BOOLEAN;
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_178 : BOOLEAN;
    signal b_load_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_186 : BOOLEAN;
    signal x_assign_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_194 : BOOLEAN;
    signal filter_idx_reg_120 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_r_idx_phi_fu_136_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_idx_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_c_idx_phi_fu_149_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_c_idx_reg_144 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_217 : BOOLEAN;
    signal out_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_ch_idx_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_1_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_idx_reg_192 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_2_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_idx_reg_215 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_94_cast_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_cast_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_251 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_258 : BOOLEAN;
    signal tmp_67_fu_312_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_cast_fu_308_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_320_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal slide_in_r_idx_fu_303_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_69_fu_334_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_36_cast_fu_330_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_342_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal slide_in_c_idx_fu_364_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_37_cast_fu_369_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_71_fu_373_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_93_cast_fu_378_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_38_cast_fu_396_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_73_fu_400_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_fu_405_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_422_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_fu_434_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_cast_fu_426_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl3_cast_fu_438_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_76_fu_446_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_77_fu_452_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_assign_to_int_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_fu_475_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_226_ce : STD_LOGIC;
    signal grp_fu_232_ce : STD_LOGIC;
    signal tmp_31_fu_236_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component inference_fadd_32ns_32ns_32_4_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_fmul_32ns_32ns_32_2_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    inference_fadd_32ns_32ns_32_4_full_dsp_U21 : component inference_fadd_32ns_32ns_32_4_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_226_p0,
        din1 => grp_fu_226_p1,
        ce => grp_fu_226_ce,
        dout => grp_fu_226_p2);

    inference_fmul_32ns_32ns_32_2_max_dsp_U22 : component inference_fmul_32ns_32ns_32_2_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_val_reg_598,
        din1 => W_load_reg_603,
        ce => grp_fu_232_ce,
        dout => grp_fu_232_p2);

    inference_fcmp_32ns_32ns_1_1_U23 : component inference_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => x_assign_reg_623,
        din1 => ap_const_lv32_0,
        opcode => tmp_31_fu_236_opcode,
        dout => tmp_31_fu_236_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- c_idx_reg_215 assign process. --
    c_idx_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_291_p2))) then 
                c_idx_reg_215 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                c_idx_reg_215 <= c_idx_2_reg_583;
            end if; 
        end if;
    end process;

    -- filter_idx_reg_120 assign process. --
    filter_idx_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = out_r_idx_phi_fu_136_p4)))) then 
                filter_idx_reg_120 <= filter_idx_1_reg_514;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                filter_idx_reg_120 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- in_ch_idx_reg_169 assign process. --
    in_ch_idx_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond1_fu_291_p2)))) then 
                in_ch_idx_reg_169 <= in_ch_idx_1_reg_547;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = out_c_idx_phi_fu_149_p4))) then 
                in_ch_idx_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- out_1_reg_180 assign process. --
    out_1_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_352_p2)))) then 
                out_1_reg_180 <= out_2_reg_203;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_271_p2))) then 
                out_1_reg_180 <= out_reg_157;
            end if; 
        end if;
    end process;

    -- out_2_reg_203 assign process. --
    out_2_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_291_p2))) then 
                out_2_reg_203 <= out_1_reg_180;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                out_2_reg_203 <= grp_fu_226_p2;
            end if; 
        end if;
    end process;

    -- out_c_idx_reg_144 assign process. --
    out_c_idx_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = out_r_idx_phi_fu_136_p4))) then 
                out_c_idx_reg_144 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                out_c_idx_reg_144 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- out_r_idx_reg_131 assign process. --
    out_r_idx_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = out_c_idx_phi_fu_149_p4)))) then 
                out_r_idx_reg_131 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_241_p2 = ap_const_lv1_0))) then 
                out_r_idx_reg_131 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- out_reg_157 assign process. --
    out_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond1_fu_291_p2)))) then 
                out_reg_157 <= out_1_reg_180;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = out_c_idx_phi_fu_149_p4))) then 
                out_reg_157 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- r_idx_reg_192 assign process. --
    r_idx_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond_fu_352_p2)))) then 
                r_idx_reg_192 <= r_idx_2_reg_565;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_271_p2))) then 
                r_idx_reg_192 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                W_load_reg_603 <= W_q0;
                in_val_reg_598 <= x_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_241_p2 = ap_const_lv1_0))) then
                b_addr_reg_524 <= tmp_fu_253_p1(7 - 1 downto 0);
                out_feature_0_0_addr_reg_529 <= tmp_fu_253_p1(7 - 1 downto 0);
                    tmp_cast_reg_519(6 downto 0) <= tmp_cast_fu_259_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                b_load_reg_618 <= b_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                c_idx_2_reg_583 <= c_idx_2_fu_358_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                filter_idx_1_reg_514 <= filter_idx_1_fu_247_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                in_ch_idx_1_reg_547 <= in_ch_idx_1_fu_277_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                    out_c_idx_cast4_reg_539(0) <= out_c_idx_cast4_fu_267_p1(0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    out_r_idx_cast5_reg_534(0) <= out_r_idx_cast5_fu_263_p1(0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                r_idx_2_reg_565 <= r_idx_2_fu_297_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_39_reg_608 <= grp_fu_232_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_291_p2))) then
                tmp_68_reg_570 <= tmp_68_fu_324_p2;
                tmp_70_reg_575 <= tmp_70_fu_346_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_271_p2))) then
                    tmp_cast_67_reg_557(4 downto 0) <= tmp_cast_67_fu_287_p1(4 downto 0);
                    tmp_s_reg_552(4 downto 0) <= tmp_s_fu_283_p1(4 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                x_assign_reg_623 <= grp_fu_226_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_519(16 downto 7) <= "0000000000";
    out_r_idx_cast5_reg_534(2 downto 1) <= "00";
    out_c_idx_cast4_reg_539(2 downto 1) <= "00";
    tmp_s_reg_552(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_cast_67_reg_557(9 downto 5) <= "00000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_241_p2, exitcond2_fu_271_p2, exitcond1_fu_291_p2, exitcond_fu_352_p2, out_r_idx_phi_fu_136_p4, out_c_idx_phi_fu_149_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond3_fu_241_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = out_r_idx_phi_fu_136_p4)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = out_c_idx_phi_fu_149_p4)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond2_fu_271_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond1_fu_291_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond_fu_352_p2)) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    W_address0 <= tmp_102_cast_fu_457_p1(16 - 1 downto 0);

    -- W_ce0 assign process. --
    W_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            W_ce0 <= ap_const_logic_1;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_241_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_241_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_241_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_241_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_144 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_159 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_169 assign process. --
    ap_sig_bdd_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_169 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_178 assign process. --
    ap_sig_bdd_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_178 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_186 assign process. --
    ap_sig_bdd_186_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_186 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_194 assign process. --
    ap_sig_bdd_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_194 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_217 assign process. --
    ap_sig_bdd_217_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_217 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_251 assign process. --
    ap_sig_bdd_251_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_251 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_258 assign process. --
    ap_sig_bdd_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_258 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_38 assign process. --
    ap_sig_bdd_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_38 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_75 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_169)
    begin
        if (ap_sig_bdd_169) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_251)
    begin
        if (ap_sig_bdd_251) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_178)
    begin
        if (ap_sig_bdd_178) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_186)
    begin
        if (ap_sig_bdd_186) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_258)
    begin
        if (ap_sig_bdd_258) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_194)
    begin
        if (ap_sig_bdd_194) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_38)
    begin
        if (ap_sig_bdd_38) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_217)
    begin
        if (ap_sig_bdd_217) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_75)
    begin
        if (ap_sig_bdd_75) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_144)
    begin
        if (ap_sig_bdd_144) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_159)
    begin
        if (ap_sig_bdd_159) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= b_addr_reg_524;

    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_idx_2_fu_358_p2 <= std_logic_vector(unsigned(c_idx_reg_215) + unsigned(ap_const_lv3_1));
    exitcond1_fu_291_p2 <= "1" when (r_idx_reg_192 = ap_const_lv3_5) else "0";
    exitcond2_fu_271_p2 <= "1" when (in_ch_idx_reg_169 = ap_const_lv5_10) else "0";
    exitcond3_fu_241_p2 <= "1" when (filter_idx_reg_120 = ap_const_lv7_78) else "0";
    exitcond_fu_352_p2 <= "1" when (c_idx_reg_215 = ap_const_lv3_5) else "0";
    filter_idx_1_fu_247_p2 <= std_logic_vector(unsigned(filter_idx_reg_120) + unsigned(ap_const_lv7_1));
    grp_fu_226_ce <= ap_const_logic_1;

    -- grp_fu_226_p0 assign process. --
    grp_fu_226_p0_assign_proc : process(out_reg_157, out_2_reg_203, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_226_p0 <= out_reg_157;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_226_p0 <= out_2_reg_203;
        else 
            grp_fu_226_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_226_p1 assign process. --
    grp_fu_226_p1_assign_proc : process(tmp_39_reg_608, b_load_reg_618, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_226_p1 <= b_load_reg_618;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_226_p1 <= tmp_39_reg_608;
        else 
            grp_fu_226_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_232_ce <= ap_const_logic_1;
    in_ch_idx_1_fu_277_p2 <= std_logic_vector(unsigned(in_ch_idx_reg_169) + unsigned(ap_const_lv5_1));
    notlhs_fu_479_p2 <= "0" when (tmp_28_fu_465_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_485_p2 <= "1" when (tmp_60_fu_475_p1 = ap_const_lv23_0) else "0";
    out_c_idx_cast4_fu_267_p1 <= std_logic_vector(resize(unsigned(out_c_idx_reg_144),3));
    out_c_idx_phi_fu_149_p4 <= out_c_idx_reg_144;
    out_feature_0_0_address0 <= out_feature_0_0_addr_reg_529;

    -- out_feature_0_0_ce0 assign process. --
    out_feature_0_0_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            out_feature_0_0_ce0 <= ap_const_logic_1;
        else 
            out_feature_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_feature_0_0_d0 <= 
        x_assign_reg_623 when (tmp_32_fu_497_p2(0) = '1') else 
        ap_const_lv32_0;

    -- out_feature_0_0_we0 assign process. --
    out_feature_0_0_we0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            out_feature_0_0_we0 <= ap_const_logic_1;
        else 
            out_feature_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_idx_cast5_fu_263_p1 <= std_logic_vector(resize(unsigned(out_r_idx_reg_131),3));
    out_r_idx_phi_fu_136_p4 <= out_r_idx_reg_131;
    p_shl1_cast_fu_320_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_312_p3),6));
    p_shl2_cast_fu_426_p3 <= (tmp_62_fu_422_p1 & ap_const_lv7_0);
    p_shl3_cast_fu_438_p3 <= (tmp_63_fu_434_p1 & ap_const_lv3_0);
    p_shl_cast_fu_342_p1 <= std_logic_vector(resize(unsigned(tmp_69_fu_334_p3),6));
    r_idx_2_fu_297_p2 <= std_logic_vector(unsigned(r_idx_reg_192) + unsigned(ap_const_lv3_1));
    slide_in_c_idx_fu_364_p2 <= std_logic_vector(unsigned(out_c_idx_cast4_reg_539) + unsigned(c_idx_reg_215));
    slide_in_r_idx_fu_303_p2 <= std_logic_vector(unsigned(r_idx_reg_192) + unsigned(out_r_idx_cast5_reg_534));
    tmp_102_cast_fu_457_p1 <= std_logic_vector(resize(unsigned(tmp_77_fu_452_p2),64));
    tmp_28_fu_465_p4 <= x_assign_to_int_fu_462_p1(30 downto 23);
    tmp_30_fu_491_p2 <= (notrhs_fu_485_p2 or notlhs_fu_479_p2);
    tmp_31_fu_236_opcode <= ap_const_lv5_2;
    tmp_32_fu_497_p2 <= (tmp_30_fu_491_p2 and tmp_31_fu_236_p2);
    tmp_35_cast_fu_308_p1 <= std_logic_vector(resize(unsigned(r_idx_reg_192),6));
    tmp_36_cast_fu_330_p1 <= std_logic_vector(resize(unsigned(slide_in_r_idx_fu_303_p2),6));
    tmp_37_cast_fu_369_p1 <= std_logic_vector(resize(unsigned(slide_in_c_idx_fu_364_p2),6));
    tmp_38_cast_fu_396_p1 <= std_logic_vector(resize(unsigned(c_idx_reg_215),6));
    tmp_60_fu_475_p1 <= x_assign_to_int_fu_462_p1(23 - 1 downto 0);
    tmp_61_fu_405_p3 <= (tmp_73_fu_400_p2 & ap_const_lv4_0);
    tmp_62_fu_422_p1 <= tmp_75_fu_417_p2(10 - 1 downto 0);
    tmp_63_fu_434_p1 <= tmp_75_fu_417_p2(14 - 1 downto 0);
    tmp_67_fu_312_p3 <= (r_idx_reg_192 & ap_const_lv2_0);
    tmp_68_fu_324_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_308_p1) + unsigned(p_shl1_cast_fu_320_p1));
    tmp_69_fu_334_p3 <= (slide_in_r_idx_fu_303_p2 & ap_const_lv2_0);
    tmp_70_fu_346_p2 <= std_logic_vector(unsigned(tmp_36_cast_fu_330_p1) + unsigned(p_shl_cast_fu_342_p1));
    tmp_71_fu_373_p2 <= std_logic_vector(unsigned(tmp_37_cast_fu_369_p1) + unsigned(tmp_70_reg_575));
    tmp_72_fu_386_p2 <= std_logic_vector(unsigned(tmp_cast_67_reg_557) + unsigned(tmp_93_cast_fu_378_p3));
    tmp_73_fu_400_p2 <= std_logic_vector(unsigned(tmp_38_cast_fu_396_p1) + unsigned(tmp_68_reg_570));
    tmp_74_fu_413_p1 <= std_logic_vector(resize(unsigned(tmp_61_fu_405_p3),64));
    tmp_75_fu_417_p2 <= std_logic_vector(unsigned(tmp_s_reg_552) + unsigned(tmp_74_fu_413_p1));
    tmp_76_fu_446_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_426_p3) - unsigned(p_shl3_cast_fu_438_p3));
    tmp_77_fu_452_p2 <= std_logic_vector(unsigned(tmp_cast_reg_519) + unsigned(tmp_76_fu_446_p2));
    tmp_93_cast_fu_378_p3 <= (tmp_71_fu_373_p2 & ap_const_lv4_0);
    tmp_94_cast_fu_391_p1 <= std_logic_vector(resize(unsigned(tmp_72_fu_386_p2),64));
    tmp_cast_67_fu_287_p1 <= std_logic_vector(resize(unsigned(in_ch_idx_reg_169),10));
    tmp_cast_fu_259_p1 <= std_logic_vector(resize(unsigned(filter_idx_reg_120),17));
    tmp_fu_253_p1 <= std_logic_vector(resize(unsigned(filter_idx_reg_120),64));
    tmp_s_fu_283_p1 <= std_logic_vector(resize(unsigned(in_ch_idx_reg_169),64));
    x_address0 <= tmp_94_cast_fu_391_p1(9 - 1 downto 0);
    x_assign_to_int_fu_462_p1 <= x_assign_reg_623;

    -- x_ce0 assign process. --
    x_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
