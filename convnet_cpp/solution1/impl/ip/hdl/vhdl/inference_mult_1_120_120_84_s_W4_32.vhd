-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_32_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_32_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001000001011110110001000", 
    1 => "00111101010001010101110010110001", 
    2 => "10111101111001001100111010000001", 
    3 => "10111110000010000101101101011011", 
    4 => "00111100010101111001010100010010", 
    5 => "10111101110111110011010010010100", 
    6 => "00111110000100011110111010101010", 
    7 => "10111101111010111111100001110111", 
    8 => "00111101000011001111000100010101", 
    9 => "10111100000110001010111010101101", 
    10 => "10111011000110000010101000000011", 
    11 => "10111011110101111011010011011101", 
    12 => "00111101100011111110110011101010", 
    13 => "00111101011001110110100110011100", 
    14 => "00111110000000111001110000001111", 
    15 => "10111101001001101111010100110111", 
    16 => "10111100101101100000110111011001", 
    17 => "00111100100101000011000111100110", 
    18 => "00111101011110111100011101110001", 
    19 => "10111100011110010010011100110011", 
    20 => "00111110000110000110110110110101", 
    21 => "00111110000000111101011010000100", 
    22 => "10111101000011001010111001100100", 
    23 => "10111100010101011100001111101100", 
    24 => "00111101100100000101111011011000", 
    25 => "00111101110011111110010100000000", 
    26 => "10111101010100011001011001111011", 
    27 => "00111101000001001011011111110110", 
    28 => "10111100001010101000001101100001", 
    29 => "10111100101011110011101110001101", 
    30 => "10111100010000001111000011110110", 
    31 => "00111101001011111010111001000011", 
    32 => "10111101111100110101100101111001", 
    33 => "00111101000010010101001011100000", 
    34 => "10111110001110011000111110100011", 
    35 => "10111101010110001101110011000000", 
    36 => "00111101100000000010011110111110", 
    37 => "00111101111101011000010100111000", 
    38 => "10111101101000101101100110001100", 
    39 => "10111010100000000001001110001100", 
    40 => "00111100001000000110101001111001", 
    41 => "00111100010011100000110011010011", 
    42 => "00111110001001111001011000111010", 
    43 => "00111101110010111110010110111111", 
    44 => "00111100101011111010010010011110", 
    45 => "00111011100010110000001000100111", 
    46 => "00111101011001100001011010000000", 
    47 => "00111100110000111100110001110011", 
    48 => "00111110000110000011110101111001", 
    49 => "10111101011010101000110101110010", 
    50 => "10111100100111111101001000101101", 
    51 => "00111100101001001011101110100001", 
    52 => "10111101111011101000001000001110", 
    53 => "10111101110001001111111101010001", 
    54 => "00111100111000110110100010000101", 
    55 => "00111101011111111000110010101000", 
    56 => "00111100001010100100100111101011", 
    57 => "10111011100011110010010000110101", 
    58 => "10111101001010111101101011100101", 
    59 => "10111100101111100011100100100001", 
    60 => "00111110010111100100100110110010", 
    61 => "00111101000110011000101111011101", 
    62 => "10111100010001011011100110110011", 
    63 => "10111110000001001110110001100011", 
    64 => "00111100011110101001100100100011", 
    65 => "10111101111110000011101111100110", 
    66 => "10111101010101000001001010001100", 
    67 => "10111101100100100110100001011010", 
    68 => "10111101010101111111111110110110", 
    69 => "10111101100010001011000011011110", 
    70 => "10111011100010100010101011100111", 
    71 => "10111100101010101100111110110111", 
    72 => "00111101100110010110110110001111", 
    73 => "00111100100110101111001011001011", 
    74 => "10111101010001001010100011011100", 
    75 => "00111100011111001101100111011011", 
    76 => "00111101101011111111110100000011", 
    77 => "00111110010100001101100110010100", 
    78 => "00111110000001111011111101100010", 
    79 => "00111101100011101110101100000101", 
    80 => "10111101011110110010110010010001", 
    81 => "10111100100111011011010110001000", 
    82 => "00111110000101101000111010000010", 
    83 => "00111101001001011000100111111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_32 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_32 is
    component inference_mult_1_120_120_84_s_W4_32_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_32_rom_U :  component inference_mult_1_120_120_84_s_W4_32_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


