-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100111110010110111000011", 
    1 => "00111110000010010001010001101110", 
    2 => "10111101111011101000011111010011", 
    3 => "00111101100011101011000101001011", 
    4 => "10111101101000010111010111010001", 
    5 => "10111101011111011001111001000001", 
    6 => "10111100011010110101011010010000", 
    7 => "10111101110111000111011010001110", 
    8 => "10111010001101101001111010010110", 
    9 => "00111101000000110100101010100011", 
    10 => "00111101101101110011101110101110", 
    11 => "10111101011110110101011111100000", 
    12 => "10111110001111101000001010010101", 
    13 => "10111101100101011110011011111111", 
    14 => "00111101100111011111000010111001", 
    15 => "00111101001000010101001010110001", 
    16 => "10111101010001011011111100100111", 
    17 => "00111100100110110100010010010101", 
    18 => "10111101001010100001100111100101", 
    19 => "00111100101010101100010100000101", 
    20 => "00111100101111001101010000110001", 
    21 => "00111001110010001001001001111000", 
    22 => "10111110010001001110011101101000", 
    23 => "10111110001101000100001111010100", 
    24 => "10111100111111010011001110011101", 
    25 => "00111110000000110010110100101100", 
    26 => "10111101111010001100000011001111", 
    27 => "00111110000000111011001101100011", 
    28 => "00111110010011001101011100000110", 
    29 => "00111101101011010111110101101111", 
    30 => "10111101000011111100110111101110", 
    31 => "10111100101100000101010100110010", 
    32 => "10111101010010111111011000001101", 
    33 => "00111101000011101101100010101011", 
    34 => "00111100110010111110000010101001", 
    35 => "00111101101111010111110100101100", 
    36 => "00111101011100111010101111111111", 
    37 => "00111011000001001110010010101100", 
    38 => "10111001101110100111101010010000", 
    39 => "10111100101010011010011000100001", 
    40 => "10111110000011100000010000111010", 
    41 => "00111101111110010010001010010110", 
    42 => "10111101100100011101000111010100", 
    43 => "10111100001100111111010111010001", 
    44 => "10111101110110101110010011110011", 
    45 => "00111100111101010010100101000010", 
    46 => "10111101100111101011110010000100", 
    47 => "10111101101011101011100100101001", 
    48 => "00111101110001010110000101000001", 
    49 => "00111101010100001110010110010110", 
    50 => "00111101011110000010100010011011", 
    51 => "10111101100111100100010101011000", 
    52 => "10111101100110001000110100001111", 
    53 => "00111110000001011000010100111000", 
    54 => "10111110000010111110111111010000", 
    55 => "00111101000011111011000100011000", 
    56 => "10111110001100001000100101011101", 
    57 => "10111101111000101101100101001001", 
    58 => "10111100000100110010000100000101", 
    59 => "00111010010100011101011000011000", 
    60 => "10111101100100010000110110111111", 
    61 => "00111101001110010100001010101100", 
    62 => "00111101100100000100110001111110", 
    63 => "00111101100111011011011011001010", 
    64 => "10111101010010100011001100001111", 
    65 => "10111101100110101110000011001111", 
    66 => "10111101011011000101010001101100", 
    67 => "00111101010001000100110111110011", 
    68 => "00111101101011110101001101101000", 
    69 => "00111101110100011101010110000000", 
    70 => "00111101111000001110010000010001", 
    71 => "00111101101001001010110010100011", 
    72 => "10111110001001111000100011011011", 
    73 => "00111101001100110001110010101000", 
    74 => "10111101010101110011111010101011", 
    75 => "00111110001100001100101011100110", 
    76 => "00111101100101110001010001110111", 
    77 => "00111101000010001111001011010011", 
    78 => "10111101001100111110010111100001", 
    79 => "10111101001110011011111101011001", 
    80 => "00111101111110001100101110001110", 
    81 => "00111010111110110111110110001111", 
    82 => "00111100110010111101111110011101", 
    83 => "10111101111010000000110001110100", 
    84 => "00111101010101000111110101001011", 
    85 => "10111101000101010110010001001011", 
    86 => "00111101101100011101101010110001", 
    87 => "10111011101000100111110111000100", 
    88 => "00111101001001101000101101101010", 
    89 => "00111101100111000101110011011101", 
    90 => "00111100011000000001101000011100", 
    91 => "00111101110001000011101001001010", 
    92 => "10111100000011011100100010001011", 
    93 => "10111101010100100011010100100001", 
    94 => "10111101010110011110001000001110", 
    95 => "10111100010001100011000100111101", 
    96 => "00111101100011011010101111100010", 
    97 => "10111101000101011001111011101001", 
    98 => "00111110001010010100010011101101", 
    99 => "00111100111001010110000111101111", 
    100 => "10111011011101101001110110000001", 
    101 => "10111101110110111110010001000111", 
    102 => "00111101001011001111111111011110", 
    103 => "00111101000001010001110011110000", 
    104 => "10111110001010011000000101111100", 
    105 => "00111101111100110101001000100010", 
    106 => "00111100000110000010000001001000", 
    107 => "00111101111000011111000100000110", 
    108 => "10111101000011100010001010100011", 
    109 => "10111100001001011100000000011001", 
    110 => "00111101111001011000000101001001", 
    111 => "00111110000111110010101110101010", 
    112 => "00111110000101111101010110101010", 
    113 => "00111101101111100011100110110100", 
    114 => "10111100011101011111010001111001", 
    115 => "00111110000111010100101100100111", 
    116 => "00111011100000100101100110110111", 
    117 => "00110111111101101000100010011101", 
    118 => "10111110011011110110110101110110", 
    119 => "00111110000010111110100011111111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_4 is
    component inference_conv2d_f3_2_4_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_4_rom_U :  component inference_conv2d_f3_2_4_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


