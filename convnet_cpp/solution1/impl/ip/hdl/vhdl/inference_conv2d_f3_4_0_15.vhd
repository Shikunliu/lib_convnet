-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011110101000111010101100011", 
    1 => "10111101101011111111110011011011", 
    2 => "10111101111100111000111001101101", 
    3 => "00111100110001011111011001001111", 
    4 => "10111110000000100000101111000100", 
    5 => "10111101011011111101011000011100", 
    6 => "10111101010001000100111101010000", 
    7 => "00111011011110101001100000001100", 
    8 => "00111101110000101100011101000000", 
    9 => "10111101110100011110010111000001", 
    10 => "00111101111101001111010010000100", 
    11 => "00111101101001001010010100100011", 
    12 => "10111101100111001001101110111010", 
    13 => "00111101110010101101010111001100", 
    14 => "00111011111011000110110100010001", 
    15 => "00111101001111000011101101001111", 
    16 => "10111110000100001011000000101001", 
    17 => "00111011111001100100001100000000", 
    18 => "10111101111011111011011001010110", 
    19 => "10111100101000010101111001010100", 
    20 => "00111101111111101101011000110100", 
    21 => "00111100011000110100111111000110", 
    22 => "00111101011011110001110110101010", 
    23 => "10111100100110001010100011011001", 
    24 => "00111101101010010110010111110101", 
    25 => "00111011011111010010111110010110", 
    26 => "00111101011100101000000011110001", 
    27 => "00111100111001000011101010101000", 
    28 => "10111110010101000101001011000110", 
    29 => "00111100000111000011011111101111", 
    30 => "00111100100101010011100011100010", 
    31 => "00111101100000111100000100010011", 
    32 => "00111101110000011010010100001110", 
    33 => "10111100010010100100010100110011", 
    34 => "00111100100101011111100111010010", 
    35 => "00111101000011100101000111101101", 
    36 => "00111101101011001011101111000011", 
    37 => "00111110000101111010101111111100", 
    38 => "10111101100111011001110001011110", 
    39 => "00111101000000010111101101100000", 
    40 => "10111101000110111010110111110110", 
    41 => "00111110000001100110110110111101", 
    42 => "00111100011111000010100000000100", 
    43 => "00111110001000011111011111010111", 
    44 => "10111100100100001100100100010000", 
    45 => "10111101101001110011010110001100", 
    46 => "10111101001111100111111000000101", 
    47 => "00111101001101000011000000111001", 
    48 => "00111101100110001010110111010100", 
    49 => "00111100111001110011011011011011", 
    50 => "10111110000100100000110111011100", 
    51 => "00111100101100011011100111101100", 
    52 => "10111101001011001011101100010100", 
    53 => "00111101010110110011110110101001", 
    54 => "00111110000101010101101110001010", 
    55 => "10111101001111010011101110110000", 
    56 => "10111100100011101110000000111000", 
    57 => "10111101101010010000011110110001", 
    58 => "10111101011111010001110010100110", 
    59 => "10111101100100111001110110111100", 
    60 => "10111110001101100010001011000100", 
    61 => "00111110000000100110111001010100", 
    62 => "10111110100000010010101000001111", 
    63 => "10111101100011111001101111001111", 
    64 => "00111101010000111010100011100111", 
    65 => "10111101111100110000000011011110", 
    66 => "10111101101010111110011111100101", 
    67 => "00111110000110000011110010110000", 
    68 => "10111101011110101000001100011110", 
    69 => "10111110000111110111111111010000", 
    70 => "10111101000110001100010010100010", 
    71 => "00111110000011001001100001011111", 
    72 => "10111100101001111011010011100101", 
    73 => "00111110000011100011000110010100", 
    74 => "10111100110101110010110000110111", 
    75 => "10111101111111101101100101011010", 
    76 => "10111101000010011001100101010110", 
    77 => "10111011110110011010101000101011", 
    78 => "00111110000011111111101011000010", 
    79 => "00111100011101110011100110001000", 
    80 => "00111110000011110100110110111110", 
    81 => "10111110001101010100001101101100", 
    82 => "00111101010010110101111101000100", 
    83 => "00111100101101001100111010101001", 
    84 => "00111100100011110001011001010011", 
    85 => "00111101001010110011010110100011", 
    86 => "00111110001010010001101100111111", 
    87 => "10111100110011110101101010110001", 
    88 => "10111110001000011000011010011000", 
    89 => "00111110001110101001010001111001", 
    90 => "10111101011110011101011001101011", 
    91 => "10111101001111001101000011010110", 
    92 => "10111101011001110011111000011000", 
    93 => "10111101001000010000111110110000", 
    94 => "00111100100011001111100011010111", 
    95 => "10111110000011110001101010100000", 
    96 => "00111101110001000000010100010011", 
    97 => "00111101111010010111100001001111", 
    98 => "10111101100111010101010011110101", 
    99 => "10111101100100101101000000011100", 
    100 => "00111100101111001011001110110000", 
    101 => "00111101111010010110010111110101", 
    102 => "00111110010000010011101000001100", 
    103 => "00111110000011101101100001001101", 
    104 => "10111110000010000001000111110101", 
    105 => "00111100100111110010000001010111", 
    106 => "10111110000010000100111101001100", 
    107 => "00111101101010100110011100111010", 
    108 => "10111100101101000010001101010011", 
    109 => "10111100001000010001100110101011", 
    110 => "00111101010011010011011110100110", 
    111 => "00111100100101110001011111011111", 
    112 => "00111011110001101110100000011100", 
    113 => "00111101110111000000011101101000", 
    114 => "00111100001100101010010101101111", 
    115 => "10111101100100010010110001000010", 
    116 => "00111101000101011001110001111111", 
    117 => "00111101001011110000101001000100", 
    118 => "00111101110110000000011001101100", 
    119 => "00111100100001110011111110001111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_15 is
    component inference_conv2d_f3_4_0_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_15_rom_U :  component inference_conv2d_f3_4_0_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


