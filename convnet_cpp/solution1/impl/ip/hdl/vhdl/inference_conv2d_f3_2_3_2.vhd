-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100010111010001000101010", 
    1 => "10111100111001001100111000010110", 
    2 => "10111101101101000000011110110010", 
    3 => "00111101111100001011100001001010", 
    4 => "00111101110000110100010101100101", 
    5 => "00111100101001001000100110111000", 
    6 => "10111101000101100111001100111111", 
    7 => "00111101100011000101001100001111", 
    8 => "10111101011011011001000100011000", 
    9 => "10111100111110100001101010101110", 
    10 => "00111100101001001000011011111110", 
    11 => "10111101100001110110101010011011", 
    12 => "10111101111110101000110101100101", 
    13 => "00111100100011001111000001110100", 
    14 => "00111110000010111111111011000001", 
    15 => "10111101010011110000011011001110", 
    16 => "10111101001110011100011011001011", 
    17 => "00111110000011000010110111110001", 
    18 => "00111110010110011010001011000110", 
    19 => "00111110001100110011111111001000", 
    20 => "00111101111001000010101101110011", 
    21 => "00111100011101001010111010010011", 
    22 => "10111101101100101100001001101101", 
    23 => "10111101000011011011110101011000", 
    24 => "00111101100111110010100000110100", 
    25 => "10111100100100000010111100100010", 
    26 => "00111101111111001001100010100010", 
    27 => "10111100001111101000101101010110", 
    28 => "10111110001110100110000000001011", 
    29 => "00111110000000101000101011100111", 
    30 => "10111011000010000000000000111111", 
    31 => "10111100001111111010001111101111", 
    32 => "00111101010000101100001000011100", 
    33 => "10111110000011001001111101110011", 
    34 => "00111100111001010111101110111011", 
    35 => "00111101110111000010001010101011", 
    36 => "10111101001000111100110000111101", 
    37 => "10111101111110011000100101011001", 
    38 => "10111101011001100110101101010100", 
    39 => "00111101011110100000100110010111", 
    40 => "10111101100011111110000011000001", 
    41 => "10111101110110010110010000011111", 
    42 => "00111101111010000000111110011001", 
    43 => "10111101100000011100001011100011", 
    44 => "10111100101100010010011001111110", 
    45 => "10111100110101011101111010001111", 
    46 => "00111011100101100000111100110110", 
    47 => "00111101100010010110101101110110", 
    48 => "10111101010110110110000011001001", 
    49 => "10111101110010010100011001011000", 
    50 => "10111100100001011101110110010000", 
    51 => "00111100010101110010011001011000", 
    52 => "10111101100110110010010010011001", 
    53 => "10111101101110100001001101010111", 
    54 => "10111101110010110100001110111110", 
    55 => "10111011111001010010101000100110", 
    56 => "00111101111011001011100111101101", 
    57 => "10111101000111000110101100000101", 
    58 => "00111110000000000110001011010100", 
    59 => "00111100010100000010000100010101", 
    60 => "10111101000100110110000010110101", 
    61 => "00111101010000010101111000000100", 
    62 => "00111101000010101100000101011010", 
    63 => "10111100110101011101111000100011", 
    64 => "10111101110010101010101001100011", 
    65 => "10111101010010000011000011010110", 
    66 => "10111101101101011011011111101011", 
    67 => "10111100100010011110010000011010", 
    68 => "10111101110011000110001001101100", 
    69 => "10111101011111100011011101011000", 
    70 => "10111101101101101101010011010001", 
    71 => "00111101000000111000001001101011", 
    72 => "10111101100101101000010110001011", 
    73 => "00111101111000001011111101011101", 
    74 => "10111101110001101110000000110001", 
    75 => "10111101110011001110111101100111", 
    76 => "00111110001010010001000111001111", 
    77 => "00111100110001111100000110010101", 
    78 => "00111100100110010110000111010001", 
    79 => "00111101101111001100010010111010", 
    80 => "10111100110110011111001001001111", 
    81 => "00111011100000100110010001110100", 
    82 => "00111101110000110010111110111101", 
    83 => "00111100101101001111011111111010", 
    84 => "00111101110011010110111101010100", 
    85 => "10111101101111000101101101011000", 
    86 => "10111101101101111010000111101011", 
    87 => "00111101100011011010010001111110", 
    88 => "00111101110101101001100110000101", 
    89 => "10111101111001111101111001010001", 
    90 => "00111100101010101010101100111010", 
    91 => "00111101000100101110010011011111", 
    92 => "00111101111100101100000101101110", 
    93 => "00111100001101101011010011001000", 
    94 => "10111110000001011011101101111011", 
    95 => "00111101100001100000101011110111", 
    96 => "10111101111000110001101001001100", 
    97 => "10111110001100011011101100000110", 
    98 => "10111110000001011101000010110111", 
    99 => "10111110000101100110010110011101", 
    100 => "00111101001010101111010011110001", 
    101 => "00111101111111110000001111010001", 
    102 => "10111101010011110001100001010001", 
    103 => "10111100000101111101010001010010", 
    104 => "10111101001010001000100100100001", 
    105 => "10111100110001100100111111011011", 
    106 => "10111101000010101010010110010000", 
    107 => "00111100101101011001101100100010", 
    108 => "10111110000111100111101001110100", 
    109 => "00111100110011001010000111001111", 
    110 => "10111101100100110011001010111010", 
    111 => "10111101101001101110111011000100", 
    112 => "00111100101101111110101001010010", 
    113 => "00111101011011011101110011101000", 
    114 => "00111101011011001001010010011001", 
    115 => "10111101011011000011001110110101", 
    116 => "00111101111101011100011000111011", 
    117 => "10111101100011000100001110100101", 
    118 => "10111100000110101011111101011110", 
    119 => "00111101001000010101000110001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_2 is
    component inference_conv2d_f3_2_3_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_2_rom_U :  component inference_conv2d_f3_2_3_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


