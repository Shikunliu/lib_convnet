// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inference_mult_1_120_120_84_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_0_address0,
        C_0_ce0,
        C_0_we0,
        C_0_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_st3_fsm_2 = 10'b100;
parameter    ap_ST_st4_fsm_3 = 10'b1000;
parameter    ap_ST_st5_fsm_4 = 10'b10000;
parameter    ap_ST_st6_fsm_5 = 10'b100000;
parameter    ap_ST_st7_fsm_6 = 10'b1000000;
parameter    ap_ST_st8_fsm_7 = 10'b10000000;
parameter    ap_ST_st9_fsm_8 = 10'b100000000;
parameter    ap_ST_st10_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv7_54 = 7'b1010100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv7_78 = 7'b1111000;
parameter    ap_const_lv14_54 = 14'b1010100;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] A_0_address0;
output   A_0_ce0;
input  [31:0] A_0_q0;
output  [13:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [6:0] C_0_address0;
output   C_0_ce0;
output   C_0_we0;
output  [31:0] C_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_0_ce0;
reg B_ce0;
reg C_0_ce0;
reg C_0_we0;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
wire   [6:0] j_3_fu_135_p2;
reg   [6:0] j_3_reg_185;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_59;
wire   [63:0] tmp_s_fu_141_p1;
reg   [63:0] tmp_s_reg_190;
wire   [0:0] exitcond1_fu_129_p2;
wire   [13:0] tmp_cast_fu_145_p1;
reg   [13:0] tmp_cast_reg_195;
wire   [6:0] k_2_fu_155_p2;
reg   [6:0] k_2_reg_203;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_76;
wire   [13:0] next_mul_fu_166_p2;
reg   [13:0] next_mul_reg_208;
wire   [0:0] exitcond_fu_149_p2;
reg   [31:0] A_0_load_reg_223;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_93;
reg   [31:0] B_load_reg_228;
wire   [31:0] grp_fu_125_p2;
reg   [31:0] tmp_5_reg_233;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_103;
wire   [31:0] grp_fu_120_p2;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_112;
reg   [6:0] j_reg_74;
reg   [31:0] out_reg_85;
reg   [6:0] k_reg_98;
reg   [13:0] phi_mul_reg_109;
wire   [63:0] tmp_8_cast_fu_177_p1;
wire   [63:0] tmp_4_fu_161_p1;
wire   [13:0] tmp_8_fu_172_p2;
wire    grp_fu_120_ce;
wire    grp_fu_125_ce;
reg   [9:0] ap_NS_fsm;


inference_fadd_32ns_32ns_32_4_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inference_fadd_32ns_32ns_32_4_full_dsp_U28(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( out_reg_85 ),
    .din1( tmp_5_reg_233 ),
    .ce( grp_fu_120_ce ),
    .dout( grp_fu_120_p2 )
);

inference_fmul_32ns_32ns_32_2_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inference_fmul_32ns_32ns_32_2_max_dsp_U29(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( A_0_load_reg_223 ),
    .din1( B_load_reg_228 ),
    .ce( grp_fu_125_ce ),
    .dout( grp_fu_125_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        j_reg_74 <= ap_const_lv7_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_149_p2))) begin
        j_reg_74 <= j_3_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        k_reg_98 <= k_2_reg_203;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_129_p2 == ap_const_lv1_0))) begin
        k_reg_98 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        out_reg_85 <= grp_fu_120_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_129_p2 == ap_const_lv1_0))) begin
        out_reg_85 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        phi_mul_reg_109 <= next_mul_reg_208;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_129_p2 == ap_const_lv1_0))) begin
        phi_mul_reg_109 <= ap_const_lv14_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_0_load_reg_223 <= A_0_q0;
        B_load_reg_228 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        j_3_reg_185 <= j_3_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        k_2_reg_203 <= k_2_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_149_p2))) begin
        next_mul_reg_208 <= next_mul_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        tmp_5_reg_233 <= grp_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_129_p2 == ap_const_lv1_0))) begin
        tmp_cast_reg_195[6 : 0] <= tmp_cast_fu_145_p1[6 : 0];
        tmp_s_reg_190[6 : 0] <= tmp_s_fu_141_p1[6 : 0];
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        A_0_ce0 = ap_const_logic_1;
    end else begin
        A_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        B_ce0 = ap_const_logic_1;
    end else begin
        B_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        C_0_ce0 = ap_const_logic_1;
    end else begin
        C_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond_fu_149_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_149_p2))) begin
        C_0_we0 = ap_const_logic_1;
    end else begin
        C_0_we0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_129_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_129_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_129_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_129_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_112) begin
    if (ap_sig_bdd_112) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_28) begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_59) begin
    if (ap_sig_bdd_59) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_76) begin
    if (ap_sig_bdd_76) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_93) begin
    if (ap_sig_bdd_93) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_103) begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond1_fu_129_p2 or exitcond_fu_149_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond1_fu_129_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_149_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign A_0_address0 = tmp_4_fu_161_p1;

assign B_address0 = tmp_8_cast_fu_177_p1;

assign C_0_address0 = tmp_s_reg_190;

assign C_0_d0 = out_reg_85;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_112 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_59 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_76 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_93 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign exitcond1_fu_129_p2 = (j_reg_74 == ap_const_lv7_54? 1'b1: 1'b0);

assign exitcond_fu_149_p2 = (k_reg_98 == ap_const_lv7_78? 1'b1: 1'b0);

assign grp_fu_120_ce = ap_const_logic_1;

assign grp_fu_125_ce = ap_const_logic_1;

assign j_3_fu_135_p2 = (j_reg_74 + ap_const_lv7_1);

assign k_2_fu_155_p2 = (k_reg_98 + ap_const_lv7_1);

assign next_mul_fu_166_p2 = (phi_mul_reg_109 + ap_const_lv14_54);

assign tmp_4_fu_161_p1 = k_reg_98;

assign tmp_8_cast_fu_177_p1 = tmp_8_fu_172_p2;

assign tmp_8_fu_172_p2 = (tmp_cast_reg_195 + phi_mul_reg_109);

assign tmp_cast_fu_145_p1 = j_reg_74;

assign tmp_s_fu_141_p1 = j_reg_74;
always @ (posedge ap_clk) begin
    tmp_s_reg_190[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_cast_reg_195[13:7] <= 7'b0000000;
end



endmodule //inference_mult_1_120_120_84_s

