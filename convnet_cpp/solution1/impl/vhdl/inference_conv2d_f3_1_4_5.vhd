-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010100110010100000010110", 
    1 => "10111101010100110100111010101100", 
    2 => "00111100110111101011001100010100", 
    3 => "00111100110111011100111010110011", 
    4 => "00111101101110110001010000010101", 
    5 => "00111110000001001010100101001000", 
    6 => "10111101010100001010111010111111", 
    7 => "00111101100001010100110101010100", 
    8 => "10111100000110010011000111110101", 
    9 => "00111101111011100000000010001111", 
    10 => "10111110001011101100000101111111", 
    11 => "00111101110011110101101100011101", 
    12 => "00111110001001100011100000000000", 
    13 => "00111011000100011000110110110010", 
    14 => "00111101100001110101011101011101", 
    15 => "10111101011101000110011110110001", 
    16 => "00111101100010100011011000100111", 
    17 => "10111101100010101000001001000111", 
    18 => "10111101110010110000000010100010", 
    19 => "00111011111001010001111101111111", 
    20 => "10111101100100011111101101001101", 
    21 => "00111101010010000100000011100001", 
    22 => "10111101001111010000011000110110", 
    23 => "10111101110100101101111001000100", 
    24 => "00111100111000100110110111101001", 
    25 => "10111110000100110010000001010011", 
    26 => "10111101100101001100001000000111", 
    27 => "10111101010101011101001111011101", 
    28 => "00111110010010100100001100110101", 
    29 => "00111101101111001100000000011101", 
    30 => "10111100100011001100001110010011", 
    31 => "10111100110001110110000011101000", 
    32 => "10111101000000111101000000011111", 
    33 => "00111101111010101000111010110100", 
    34 => "10111101100010011100110001110101", 
    35 => "00111011110110011010111100001000", 
    36 => "00111101011100110101111100100011", 
    37 => "10111101000111100101100010110001", 
    38 => "00111100111000100111010101000000", 
    39 => "10111100111000000111010011101011", 
    40 => "10111100111010101001001110111101", 
    41 => "00111101011110010011001010111100", 
    42 => "00111101111001100100010011011000", 
    43 => "10111101101000100111110001000111", 
    44 => "00111101111011011010101000001101", 
    45 => "10111100101110001000101011110110", 
    46 => "10111101100100100001001010100010", 
    47 => "00111101110101010001010001111111", 
    48 => "10111100110101010011011011111111", 
    49 => "10111101000111001011101010110110", 
    50 => "10111110001000010011011111110100", 
    51 => "10111110000101111000000110000100", 
    52 => "00111101100101000010100001110110", 
    53 => "00111101111010101110100111101110", 
    54 => "10111101001011111110110001010111", 
    55 => "00111101000000010111111110101101", 
    56 => "10111100110111111011111001000001", 
    57 => "10111011100000100110011011111000", 
    58 => "00111110000000010100110010101001", 
    59 => "00111101100010111010011100110011", 
    60 => "00111101001110010001111001100100", 
    61 => "00111101101011101010101110100010", 
    62 => "00111110001000100010111101101010", 
    63 => "10111101011010000010000000101010", 
    64 => "10111100000101101010001111111100", 
    65 => "00111110000011011100111011000000", 
    66 => "10111110000010011001100000000111", 
    67 => "00111101010011110001000110000000", 
    68 => "10111100101101011010010010010010", 
    69 => "10111011100111001101011110111101", 
    70 => "00111100101010010000100100001110", 
    71 => "00111101110101011101000010110111", 
    72 => "00111101101101010100000001101111", 
    73 => "00111101100000010000000001111011", 
    74 => "00111101101000000100001101101100", 
    75 => "00111110000011000111011110011010", 
    76 => "10111101010110111111101101110100", 
    77 => "00111100110100101010010011101001", 
    78 => "10111101001101001111101110100101", 
    79 => "00111101010011001010000111101010", 
    80 => "00111100010010111001000111001111", 
    81 => "10111101101001111100110100010001", 
    82 => "10111101101111011101111100001110", 
    83 => "10111101100111101110101110100110", 
    84 => "10111101111011011100000000010010", 
    85 => "10111110010010110110110101000100", 
    86 => "00111110000010001011100100110100", 
    87 => "10111011111110010001111010100101", 
    88 => "10111110001100110001011011100011", 
    89 => "10111101100101111001001100010100", 
    90 => "00111101010101111001110011010101", 
    91 => "00111110000101001111001100110100", 
    92 => "10111101001100101110000001111000", 
    93 => "10111101011111000111011000100011", 
    94 => "00111101111100101001101110101110", 
    95 => "00111101001101001010000101111000", 
    96 => "10111101110000011100101101100010", 
    97 => "00111100101100011010110100100001", 
    98 => "00111101100101010110100010100101", 
    99 => "00111101001010011100001100010010", 
    100 => "00111101100110110000010101110101", 
    101 => "10111101011010110011000111011101", 
    102 => "10111101101101000001100100001100", 
    103 => "00111010001101001001000101100100", 
    104 => "00111100011000101000001100010111", 
    105 => "00111101000111011101111101111001", 
    106 => "10111101010110000101101010111010", 
    107 => "10111101001100011010110110001101", 
    108 => "00111011000010000000011010011111", 
    109 => "10111101101000110011000110010011", 
    110 => "10111101111000110001000011011100", 
    111 => "00111100110101011000100001011101", 
    112 => "00111110000011101111100100010010", 
    113 => "00111101001100111101111001010100", 
    114 => "00111101011011001110011101010100", 
    115 => "00111101111001011000110011010010", 
    116 => "10111101010001000110101101001111", 
    117 => "00111110001010011110101101100100", 
    118 => "00111101111110000010011111111010", 
    119 => "00111110000001010001100010110001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_5 is
    component inference_conv2d_f3_1_4_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_5_rom_U :  component inference_conv2d_f3_1_4_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


