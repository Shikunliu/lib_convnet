-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100011011000011100111101", 
    1 => "00111100100100010111110010010101", 
    2 => "10111100111011110010000010110101", 
    3 => "10111110000010010101111010011110", 
    4 => "10111101111111100001101010000010", 
    5 => "00111110000001100000101100101101", 
    6 => "10111011111110111100001101110000", 
    7 => "10111101100001101011111010100011", 
    8 => "00111101011111001001100111100100", 
    9 => "00111101110010011101000100011111", 
    10 => "10111101101001101001111101110001", 
    11 => "10111110000010110001101010110001", 
    12 => "00111110000100000011110100010100", 
    13 => "00111100100100100110001100001111", 
    14 => "10111101111000110110010111001011", 
    15 => "10111100110010001101100101011000", 
    16 => "00111101110011100001111001110001", 
    17 => "10111100110111000011010001111111", 
    18 => "10111110001110101000010001111011", 
    19 => "00111101000111100001110111011101", 
    20 => "10111100101100100110000010100101", 
    21 => "10111101110000010000010100100110", 
    22 => "00111101011011110100010111101110", 
    23 => "10111101001100001010110001110000", 
    24 => "00111100010100000011100010010010", 
    25 => "00111101110010011001010111111011", 
    26 => "00111110001110011100101001011100", 
    27 => "10111101000100001011001100100110", 
    28 => "10111101001100001111010100000000", 
    29 => "10111101011110001000010001110110", 
    30 => "00111110001010111110100111001001", 
    31 => "00111101010000001010101010011010", 
    32 => "00111101001011100011110101000101", 
    33 => "00111110001101001011010011010000", 
    34 => "00111101101000110101111101100110", 
    35 => "00111110000101110101010101111010", 
    36 => "00111101101110000000010100000010", 
    37 => "10111101011000110011011111011110", 
    38 => "10111110000111110010000101110001", 
    39 => "00111110000010000111010111010101", 
    40 => "00111010100110001000101111111101", 
    41 => "00111101100001001110011010010010", 
    42 => "10111110000100111001100001100011", 
    43 => "10111101110000111110010001101001", 
    44 => "00111101001000101010110000010111", 
    45 => "00111110000011110111000110101000", 
    46 => "00111100111111001010101001000000", 
    47 => "10111101000010001111100010010111", 
    48 => "00111101011110011110011110000010", 
    49 => "00111011010000110001001111100110", 
    50 => "10111110000010011011010011011101", 
    51 => "00111101110110100111101100001011", 
    52 => "10111110000000010101110110110011", 
    53 => "10111100101001100001100111011011", 
    54 => "10111101011110001100101111011111", 
    55 => "10111101000000001011011110000000", 
    56 => "00111011101011111101111001101010", 
    57 => "10111101000001110111010000011000", 
    58 => "10111110001001100001110001111010", 
    59 => "10111110001010011000011101000000", 
    60 => "00111010111011110010101100011100", 
    61 => "00111101100011000110111010100011", 
    62 => "10111101001110011000110111000000", 
    63 => "10111101111001101010100110000010", 
    64 => "10111101001011101001011111011110", 
    65 => "00111101100111101010001111101101", 
    66 => "10111110000001000101110001111001", 
    67 => "00111110000000111001101001111100", 
    68 => "00111101101111101101001010111110", 
    69 => "00111101111101101011001100110101", 
    70 => "00111101101010111000100100110110", 
    71 => "10111100111111110011001000001111", 
    72 => "00111110000011000101001111110100", 
    73 => "00111101101011101111000110111011", 
    74 => "00111100000000011010011010001001", 
    75 => "10111101101001010010110100001000", 
    76 => "00111101011001000110110001110110", 
    77 => "10111100111101000010011001111000", 
    78 => "00111101100110010101000110010000", 
    79 => "10111101000000100011110101011101", 
    80 => "10111110000101000001111110100111", 
    81 => "10111101111111011000100111001110", 
    82 => "00111101100010011010110110100001", 
    83 => "00111101111100000111011011000000", 
    84 => "00111110001000010110011011100000", 
    85 => "10111101011001110110010001011101", 
    86 => "00111101100010110110010000111111", 
    87 => "00111101000111100000111110011011", 
    88 => "00111101000011101000101111001111", 
    89 => "00111110000101001111100000101111", 
    90 => "00111100111010101100011011101001", 
    91 => "00111101101011110100011010101010", 
    92 => "10111110000001100100000100101101", 
    93 => "00111110000101111000100011011011", 
    94 => "00111101100100111011100111111111", 
    95 => "10111110000011000111110000001111", 
    96 => "00111100110100110101010111101000", 
    97 => "10111101001001101101010110100111", 
    98 => "00111101100100011000111011010011", 
    99 => "10111101111101011011011010000000", 
    100 => "00111100100110111011000001100000", 
    101 => "10111110010010110110010000010111", 
    102 => "00111100101011110110000001000000", 
    103 => "00111110001001000100010111101101", 
    104 => "10111101000001100001000001010000", 
    105 => "10111011110000111010101111111100", 
    106 => "10111011101101000110010110111000", 
    107 => "00111101110100110111100001101000", 
    108 => "10111101101000010100100011110000", 
    109 => "10111101010000111101001111001010", 
    110 => "00111101111010011110111001000110", 
    111 => "10111101101100011100111100101000", 
    112 => "00111100111000001011101011000000", 
    113 => "10111010000110010101111101100010", 
    114 => "00111011000101100011001100110011", 
    115 => "00111101101111100001101000111111", 
    116 => "00111011000111001101010100111000", 
    117 => "10111101111000110011010100001001", 
    118 => "00111110000000111110101111000000", 
    119 => "10111101110110011010010100100010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_15 is
    component inference_conv2d_f3_3_3_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_15_rom_U :  component inference_conv2d_f3_3_3_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


