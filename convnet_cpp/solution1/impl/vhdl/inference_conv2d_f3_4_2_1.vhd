-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111001101110011111100110", 
    1 => "10111110000011011010100111001010", 
    2 => "00111101100001111001011110010111", 
    3 => "00110111001111101111011101110111", 
    4 => "10111101101001000010001011011010", 
    5 => "00111101111010001000110001100001", 
    6 => "00111101111010000100011100101100", 
    7 => "10111101010011011000011000010101", 
    8 => "00111100100101001011010101100100", 
    9 => "00111011001011100001001001110111", 
    10 => "00111101100111010011001011000110", 
    11 => "10111101101000001010110100111010", 
    12 => "00111110001000101100101110100111", 
    13 => "10111101001101010001001010000001", 
    14 => "10111101000111000110100110101000", 
    15 => "00111101100111110111000010001110", 
    16 => "00111100001101001010100101010101", 
    17 => "10111101001010111101100111110011", 
    18 => "00111101000100001010110000100000", 
    19 => "10111101110111111000100110000011", 
    20 => "00111110000010111110010010001010", 
    21 => "00111110000100011110010010110100", 
    22 => "00111101110110001100111000101101", 
    23 => "10111101001110100000110011110010", 
    24 => "00111101100001001101001011110110", 
    25 => "00111110001001101111110011011111", 
    26 => "10111100101110101010111001010010", 
    27 => "00111100010001001011000010011111", 
    28 => "10111101100010100111010100011111", 
    29 => "00111001001111100000011010101110", 
    30 => "10111110000101010011011000001101", 
    31 => "00111100001001100011110110000001", 
    32 => "00111110010001001010010110011100", 
    33 => "00111100100110011110101011000011", 
    34 => "00111001000010001110000000111001", 
    35 => "10111110000000101001010110100111", 
    36 => "10111100000110010010101010011110", 
    37 => "10111011111111000010001110100111", 
    38 => "00111011111010101010110100110010", 
    39 => "00111101110111010100111110011100", 
    40 => "00111100110100001100000110111001", 
    41 => "10111101000011001011001110001000", 
    42 => "10111101101010101011010010110111", 
    43 => "10111101100011010010111110000110", 
    44 => "10111110000111000001010001000000", 
    45 => "10111101101100001111011111000111", 
    46 => "00111010111000000001101010110010", 
    47 => "00111101001100101111110111101111", 
    48 => "10111101100101001101000101111110", 
    49 => "10111101000111101011100101000100", 
    50 => "00111101010110111111011010100001", 
    51 => "10111110000011111101000010001101", 
    52 => "10111100111010011111000010010100", 
    53 => "00111101101001010011000101001000", 
    54 => "10111100110001010001110101110110", 
    55 => "10111100100101001010000101111000", 
    56 => "10111100101100111010001010001111", 
    57 => "10111101000001111111111000010110", 
    58 => "00111110000000000010011000000011", 
    59 => "00111100101100111100000110011001", 
    60 => "10111100100111001010010110001000", 
    61 => "10111101111010101010001100100111", 
    62 => "10111101010001010011011011010110", 
    63 => "10111101101011001001011100011101", 
    64 => "00111100010111101011000101100110", 
    65 => "10111101101001101011001111110001", 
    66 => "10111100111101000101011101010101", 
    67 => "10111101000001010100000011001100", 
    68 => "00111011101011111010110001101011", 
    69 => "00111110000101011011110110010100", 
    70 => "10111101010011111110000111011010", 
    71 => "10111110000100111000000101010010", 
    72 => "00111101101100101101101000111010", 
    73 => "10111101101100011000011010011000", 
    74 => "00111100101110110011001000111011", 
    75 => "10111110000011100010101000111101", 
    76 => "10111100110010100001101100001100", 
    77 => "10111101100011111111101111110111", 
    78 => "00111100110110010001100101110111", 
    79 => "10111101000110010111100001110111", 
    80 => "10111110001111010001111100011101", 
    81 => "10111101110110101000001011101000", 
    82 => "00111101010100000110001100111111", 
    83 => "00111100100100111101010011111111", 
    84 => "00111101001100110110100100011001", 
    85 => "10111100111101000111101101100111", 
    86 => "00111011000101111011010110010100", 
    87 => "00111100000011011100010000101110", 
    88 => "00111110000010011110011110111000", 
    89 => "10111101110011010000011001111001", 
    90 => "00111100000101010100010110000010", 
    91 => "00111101011101011101010000101101", 
    92 => "10111100101011110001101011010101", 
    93 => "10111110010000001111010111100100", 
    94 => "10111101100001110100010000010010", 
    95 => "10111100011010000111011000001011", 
    96 => "10111110010010011101011101110111", 
    97 => "00111101100110010100110111001010", 
    98 => "00111101110010100111000101001011", 
    99 => "00111101100001100000011011111011", 
    100 => "10111011110110010000101100001001", 
    101 => "00111101110001011010111100101001", 
    102 => "10111101101110100110010000010100", 
    103 => "00111101011110001110100100111011", 
    104 => "00111100110001111110100111011001", 
    105 => "10111110000000111101000111001100", 
    106 => "00111101001000100110010011001010", 
    107 => "00111101100001111000111101000000", 
    108 => "10111100101111000010011000100001", 
    109 => "10111101101010001000010100110010", 
    110 => "00111101011000000000111001111000", 
    111 => "00111101110111010000100111100001", 
    112 => "10111110001101111110110000110101", 
    113 => "00111100110101111100001101101011", 
    114 => "10111110001101010101011100010101", 
    115 => "00111100010011001011111011110101", 
    116 => "10111110000000111110111010100010", 
    117 => "00111110010101110000001111110011", 
    118 => "10111101000110001100101010000010", 
    119 => "10111101001100110101000001011010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_1 is
    component inference_conv2d_f3_4_2_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_1_rom_U :  component inference_conv2d_f3_4_2_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


