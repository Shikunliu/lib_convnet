-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000010100111110101100111", 
    1 => "00111101100100000101110101000101", 
    2 => "00111101011100011110010010011001", 
    3 => "10111101100011111011101011001011", 
    4 => "00111101101101010111011010111111", 
    5 => "10111101000001110010111011100011", 
    6 => "10111100111111000110111001111011", 
    7 => "00111101010010100111110110111000", 
    8 => "00111101101110011101011010000110", 
    9 => "10111100010000011010001110100100", 
    10 => "10111101101100010010110011110001", 
    11 => "00111100100010010000101100001100", 
    12 => "10111110000100101110000000011010", 
    13 => "00111100100001111010101101011011", 
    14 => "00111100011000010011100010010101", 
    15 => "00111101001011000100110000001001", 
    16 => "00111100100110101001001100101001", 
    17 => "00111110000110000011101111100110", 
    18 => "10111100111111111101010011001100", 
    19 => "00111100000010110011011110010111", 
    20 => "10111100111011011111101010101111", 
    21 => "10111011110000100110001011111100", 
    22 => "00111110010000011000110100100110", 
    23 => "00111101100110101011100111001101", 
    24 => "00111101110100111110101100111010", 
    25 => "10111110001011100001000010001100", 
    26 => "10111100101101100011011010001000", 
    27 => "00111010100111011001111110001110", 
    28 => "10111101101001101001010100111000", 
    29 => "00111110000010011010110001111001", 
    30 => "10111101100011101011011110110001", 
    31 => "00111101110111011010110101110101", 
    32 => "10111101100110100100111111011000", 
    33 => "10111011010011101110111001100101", 
    34 => "10111101010001010011001101000110", 
    35 => "00111101011110001110100101110000", 
    36 => "00111110001010100110010111001111", 
    37 => "10111011001001011010001011100111", 
    38 => "10111110001110000100000101101000", 
    39 => "10111101110100000100001111100101", 
    40 => "10111011110110110000110110000010", 
    41 => "00111101000100010110010011000111", 
    42 => "00111101110010010010010111001001", 
    43 => "00111100000010011000111010101010", 
    44 => "10111101001010111111001110100100", 
    45 => "10111101010000000010111101001010", 
    46 => "00111101011000101010111010110110", 
    47 => "00111101101111100101111010011101", 
    48 => "10111101010100011101000110000100", 
    49 => "10111110001001110101100010011111", 
    50 => "00111110000111000010111000110100", 
    51 => "10111100010000100101000000000111", 
    52 => "10111110000001010111111101110011", 
    53 => "10111101100000101101101100010001", 
    54 => "10111101010111011110000001010000", 
    55 => "00111101010011001011101110011010", 
    56 => "10111101010100010010001111111010", 
    57 => "00111101100001111111101110010010", 
    58 => "00111100101110011000101110100111", 
    59 => "10111101100101001100000111010001", 
    60 => "10111100101000110001001011110101", 
    61 => "10111110000101010101100000100001", 
    62 => "10111011100000011000100011101100", 
    63 => "00111110000011111110100011101110", 
    64 => "00111101101101011111000110010111", 
    65 => "00111100011001000011001111110010", 
    66 => "00111101000001011100101100110110", 
    67 => "00111110010110001100110010011010", 
    68 => "10111100011011010100100101000100", 
    69 => "10111110000011001011001001010011", 
    70 => "00111100100010001100100111010011", 
    71 => "00111100100101111110000011111101", 
    72 => "00111101000011011111100100011101", 
    73 => "00111101101101111110001111000100", 
    74 => "10111101101000000111101111100100", 
    75 => "10111101111011111010011110101000", 
    76 => "00111110000001001010100100000100", 
    77 => "00111011001010100011101101111101", 
    78 => "00111101100101100100111011101001", 
    79 => "10111100000001101100110010100011", 
    80 => "00111101001100100000010111010111", 
    81 => "10111100101000001011111111111111", 
    82 => "10111101101000111111001010000011", 
    83 => "10111110000100011000010011000010", 
    84 => "10111101110110001100001000011110", 
    85 => "10111110000001010101000010000111", 
    86 => "10111101001011100000101001001111", 
    87 => "10111101010101100010010110100111", 
    88 => "00111101101101001001101111101001", 
    89 => "10111101111011011010011111110100", 
    90 => "00111101110010001111000011100010", 
    91 => "10111101010110000111001101011111", 
    92 => "10111101101001011010100101001010", 
    93 => "00111110001010010110001101010110", 
    94 => "10111100101011111110010001011111", 
    95 => "00111100001110010100110110010100", 
    96 => "10111100010010101111101001100101", 
    97 => "10111101111111001000101001111010", 
    98 => "10111101100000010000010000100111", 
    99 => "00111101111111110001010110100101", 
    100 => "00111101100111010000101000010111", 
    101 => "00111110000011001111010111110101", 
    102 => "00111100001001001110001000111000", 
    103 => "00111101111010101001110101100010", 
    104 => "00111011010011001000111010001110", 
    105 => "10111101100001000101011111110110", 
    106 => "00111110000100110001101000001001", 
    107 => "10111110000001110000100001101000", 
    108 => "00111101110101111010011100000001", 
    109 => "00111101110110110011010000011110", 
    110 => "00111101001001001100101011110000", 
    111 => "00111101011010110100110111110111", 
    112 => "10111101111011101010011111001110", 
    113 => "00111101101111100110110011000101", 
    114 => "10111101111000011010011010010011", 
    115 => "10111101111000101100001010111101", 
    116 => "10111101010001111001011101101110", 
    117 => "00111101110011011011101111100000", 
    118 => "10111100100100110011110000011101", 
    119 => "00111100110001000011010000001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_11 is
    component inference_conv2d_f3_0_4_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_11_rom_U :  component inference_conv2d_f3_0_4_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


