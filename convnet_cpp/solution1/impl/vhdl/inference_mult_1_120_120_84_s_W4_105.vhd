-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_105_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_105_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111010011110001000110111", 
    1 => "10111100100010110000000001000100", 
    2 => "00111101000110001110001000110100", 
    3 => "10111101010000001011100011011101", 
    4 => "00111101100101010010011110010101", 
    5 => "00111101001111000101010110100001", 
    6 => "10111100110001011101100100101000", 
    7 => "10111101100011101010111011100010", 
    8 => "00111011101001100010101101100011", 
    9 => "00111110000011111011011110100110", 
    10 => "10111110011101000010100111100001", 
    11 => "00111110001001110010110101011110", 
    12 => "10111100000111010001101010011000", 
    13 => "00111110001110001111011111011011", 
    14 => "10111100001000011011101010100101", 
    15 => "00111101110100001110111011010000", 
    16 => "00111011100110111001111010000010", 
    17 => "10111101010001010010001011001111", 
    18 => "10111101000010000110100010000100", 
    19 => "10111101011101110010101000111001", 
    20 => "00111110000011010110101101100110", 
    21 => "00111100001001100111100010100101", 
    22 => "10111101001000101000111100001100", 
    23 => "10111101010101110001001010111100", 
    24 => "00111101100100110010011100100100", 
    25 => "00111101011100110010000010100100", 
    26 => "00111110000010011000001110010100", 
    27 => "00111101000000001011001001000010", 
    28 => "00111010000010110110010110001011", 
    29 => "10111101100110111100001001110110", 
    30 => "10111110001001100100111110011000", 
    31 => "00111100010100011000100111001011", 
    32 => "00111110001100000011111011101010", 
    33 => "10111101001101100010000100111111", 
    34 => "00111101011100101101010000011000", 
    35 => "00111110000101010100000100010000", 
    36 => "10111101101011111110011110010001", 
    37 => "10111110001110111101100001111011", 
    38 => "00111101110010001100001011100111", 
    39 => "00111101100010001111110011111111", 
    40 => "00111100010001011111100010011101", 
    41 => "00111101011101110001101101010101", 
    42 => "10111101100010010100000010111100", 
    43 => "10111101101101101010110000000111", 
    44 => "00111101100000000101100001011000", 
    45 => "10111101111100001010110101000111", 
    46 => "10111110010011101111001001000001", 
    47 => "10111101000110101111110110010111", 
    48 => "00111100100000100000011001101010", 
    49 => "00111110001100000011100101101001", 
    50 => "00111110000101000110011010110010", 
    51 => "10111101011001100110111101101011", 
    52 => "10111110010101101101011100011111", 
    53 => "00111101111111111000111111001101", 
    54 => "10111101111110100100100000110000", 
    55 => "10111101111111011000100011000010", 
    56 => "00111101010100111000111000000010", 
    57 => "10111101110111000011101111010110", 
    58 => "00111100101000111010011000101101", 
    59 => "00111100010001110101000101100011", 
    60 => "10111101101010011100100110010011", 
    61 => "00111010110100000100010101010010", 
    62 => "10111101100001110000001100110111", 
    63 => "10111100101000111001010101100110", 
    64 => "10111101101111000111110010010101", 
    65 => "00111011010000111001001001100110", 
    66 => "10111101011000011001101011110000", 
    67 => "10111110010001010011001010100101", 
    68 => "10111100110000110000110011000101", 
    69 => "00111100000000110001011101001100", 
    70 => "00111101110001111101110000101010", 
    71 => "10111100000001011011110101111001", 
    72 => "10111101111101111111101101101010", 
    73 => "00111101101111100101001010001110", 
    74 => "10111110001010111000010010011001", 
    75 => "00111101101010111001100011111110", 
    76 => "00111101101100111010001100100011", 
    77 => "10111100011110010111100010010010", 
    78 => "00111101010101000001010011011011", 
    79 => "00111110001001110010110101011110", 
    80 => "10111110000111011100000111101000", 
    81 => "00111101011110010101001011010010", 
    82 => "00111110000001011000101110000010", 
    83 => "10111110000010000010111110010100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_105 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_105 is
    component inference_mult_1_120_120_84_s_W4_105_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_105_rom_U :  component inference_mult_1_120_120_84_s_W4_105_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


