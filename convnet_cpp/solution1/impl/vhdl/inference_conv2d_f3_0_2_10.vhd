-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011000000111101100101101001", 
    1 => "00111100100110010001001100101100", 
    2 => "00111110000100111001111000101000", 
    3 => "00111101001100111110111001011111", 
    4 => "00111101100101000101000010101101", 
    5 => "10111100101101111111111111101100", 
    6 => "00111101000010111101000000110011", 
    7 => "00111101011000001110110001011001", 
    8 => "00111101101110110100010110111100", 
    9 => "10111101111111010000010110101111", 
    10 => "00111101010011000011001110011010", 
    11 => "00111101010010100100011000111111", 
    12 => "00111100011111010110100101001101", 
    13 => "00111100110111101000001101111001", 
    14 => "10111101110110111011101101100010", 
    15 => "10111100011001101100111001101011", 
    16 => "10111101101101011010111001111011", 
    17 => "10111101010010010011011110011100", 
    18 => "10111101100000010000001110111011", 
    19 => "10111101000110100011111101100001", 
    20 => "10111011111000000110100001001011", 
    21 => "10111101100010110100111111101000", 
    22 => "10111101000100111000110100010000", 
    23 => "00111101011011010000001001100010", 
    24 => "10111110000011000111000111010110", 
    25 => "00111110001001010000101100001111", 
    26 => "00111101011101110110001011110011", 
    27 => "00111100101000010001110011100110", 
    28 => "10111110000101001001011011101110", 
    29 => "00111101011010101001111010100101", 
    30 => "10111101100101100101000010001010", 
    31 => "10111101110110110010100010010101", 
    32 => "10111101001001100111001000100101", 
    33 => "10111101100001110001001001000011", 
    34 => "10111101100111111010111000000000", 
    35 => "00111100101100010110111000000001", 
    36 => "00111101000010000101100110100001", 
    37 => "00111101110001110000101111010000", 
    38 => "10111110000110000100111011000110", 
    39 => "10111101010110011001000001000101", 
    40 => "10111100010011100100100001100010", 
    41 => "10111101000000000110001111010011", 
    42 => "00111101111110010000100111110010", 
    43 => "10111110001110001011110011100000", 
    44 => "10111101011011111101010101111011", 
    45 => "10111101001101010010010000000100", 
    46 => "10111101111000111011100000011011", 
    47 => "00111101100001110010110110000110", 
    48 => "10111101100111001101011100010011", 
    49 => "10111101100110000100010001010111", 
    50 => "00111100110000011001001111101001", 
    51 => "00111100000000111010000010011110", 
    52 => "10111100100000100100101011001000", 
    53 => "00111011110111010001110000100101", 
    54 => "00111101110100010100101100010110", 
    55 => "10111110000110000010111111010111", 
    56 => "10111100101111110001011011001100", 
    57 => "10111010111110010111111111011110", 
    58 => "00111101001000010010000110011110", 
    59 => "10111110001100011111110010001111", 
    60 => "10111101010001101100110011110011", 
    61 => "00111101101000100100110010111001", 
    62 => "10111110010000110001011111110000", 
    63 => "10111101100101101000111000111111", 
    64 => "10111110000101110101111000100000", 
    65 => "10111101111000000011110101010111", 
    66 => "00111100100101110101111100101101", 
    67 => "00111101110110001111110101011101", 
    68 => "10111101111000011111000110001101", 
    69 => "00111101110010111011100001100101", 
    70 => "10111010001000100110010010111100", 
    71 => "10111101101101001010001010101100", 
    72 => "10111101100001111001000000110010", 
    73 => "00111110000101011111111000010001", 
    74 => "00111101111110100000010000001000", 
    75 => "10111101101110001010010000101110", 
    76 => "00111110000101000111111110011001", 
    77 => "00111101010010010010011011010101", 
    78 => "10111110010010110101100110011011", 
    79 => "00111100011011100010010010100001", 
    80 => "00111110000011010000111100011111", 
    81 => "00111101100011011010010111110110", 
    82 => "00111101110000011011001011110011", 
    83 => "10111100100110111111110111111000", 
    84 => "10111101100001010111100100000001", 
    85 => "10111011010101100010110000011100", 
    86 => "00111110001011001100110111011001", 
    87 => "00111101000111111000011011111111", 
    88 => "10111101010101111100010110000100", 
    89 => "00111101110001011100111111100000", 
    90 => "10111101000010110100101010011100", 
    91 => "10111110000011100100101110001000", 
    92 => "10111101000001100000110101000101", 
    93 => "10111100110001100110011010000001", 
    94 => "10111100011010011011111000001010", 
    95 => "10111101101101101011111101111010", 
    96 => "00111101011110101100000101100111", 
    97 => "10111101101111000011100101010001", 
    98 => "10111101001000101100110100000100", 
    99 => "10111101001110011110001001000100", 
    100 => "00111100111000111000111111110010", 
    101 => "10111011001100111100100000011001", 
    102 => "10111101100100111101111011001101", 
    103 => "10111110000011101101011101000001", 
    104 => "00111101101100111110101100101100", 
    105 => "10111100110011011000000111111110", 
    106 => "00111101110011101001111011100100", 
    107 => "10111101100110011010001110111000", 
    108 => "00111101100000111010000001001110", 
    109 => "00111100100111101000101000101111", 
    110 => "10111101101010111001101010000011", 
    111 => "00111110000001010010000010001110", 
    112 => "10111110000001010100010101000001", 
    113 => "10111101101001001010001110000011", 
    114 => "00111101001101111011001000111001", 
    115 => "10111100011111110111011011011001", 
    116 => "00111011001111110010110011010001", 
    117 => "10111101101010000011101010010111", 
    118 => "00111101000111011001010111111000", 
    119 => "00111010101000001010001110100100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_10 is
    component inference_conv2d_f3_0_2_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_10_rom_U :  component inference_conv2d_f3_0_2_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


