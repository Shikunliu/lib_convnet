-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110000110101001011101011", 
    1 => "00111101001101010101011011011111", 
    2 => "10111011001011100000011100001111", 
    3 => "10111010110111001101111111101010", 
    4 => "10111100011111011001111010010001", 
    5 => "00111100000011101100101010010011", 
    6 => "00111101101010001101101111011100", 
    7 => "10111101101000111101010111111110", 
    8 => "10111100101100000001101110111100", 
    9 => "10111110000011001100100100100001", 
    10 => "10111110000010001101011000001010", 
    11 => "00111110010011101000011101001101", 
    12 => "10111011110001010000100111001010", 
    13 => "00111110000010111001010100011100", 
    14 => "00111101101110010010100101011010", 
    15 => "00111101001001100010101111001001", 
    16 => "10111110000000010000100111010000", 
    17 => "10111101101011000000010001010000", 
    18 => "00111101000001011110001111110101", 
    19 => "10111101110000011000001100100010", 
    20 => "00111101001000011101011101010110", 
    21 => "00111101111111111001001001101100", 
    22 => "10111101101001111000011000101111", 
    23 => "10111100110000110100110110010010", 
    24 => "00111101000111110011110101100010", 
    25 => "10111101100110011010111010111011", 
    26 => "10111101110111101100101000100101", 
    27 => "00111101100001100010011101000111", 
    28 => "10111100111100001010111110010110", 
    29 => "10111100101011101111101100101011", 
    30 => "10111110000111011111101101010000", 
    31 => "00111101111000000010111110110110", 
    32 => "10111101100001101011111000101010", 
    33 => "00111101011100011000101001101100", 
    34 => "10111110000100111001011001001010", 
    35 => "00111101110111110001111000001000", 
    36 => "10111101101001010011001101101110", 
    37 => "00111100110001010001110010011111", 
    38 => "10111101111000111100101001110101", 
    39 => "10111101001001000100100000101110", 
    40 => "00111101111011110101001100111111", 
    41 => "10111101101101000010001101111011", 
    42 => "10111110000000011000010111001111", 
    43 => "10111101111100110000001101111101", 
    44 => "00111101000100000010110111111011", 
    45 => "10111110000111100111110101010110", 
    46 => "00111101000111000111000101010000", 
    47 => "00111101001011110110011011110110", 
    48 => "10111101011100100001110010011000", 
    49 => "00111100001111111110101100111101", 
    50 => "10111101111100000100110001001001", 
    51 => "10111101010000100010110000001111", 
    52 => "10111010111010011110110001000010", 
    53 => "00111100110000111000111100110110", 
    54 => "00111110000101000010011010111011", 
    55 => "00111101111000110000101000001011", 
    56 => "00111100110000001010110100000100", 
    57 => "00111110001000011110101010111100", 
    58 => "10111100011000100001010100110011", 
    59 => "00111100100110011000111110111110", 
    60 => "10111101101100110101000111011111", 
    61 => "00111101100001000000110110101100", 
    62 => "00111110000101101101100110111110", 
    63 => "10111110000001000000101100110101", 
    64 => "10111101010000101000100011011100", 
    65 => "00111100111100011100100100111011", 
    66 => "10111001101001000110001010100000", 
    67 => "00111100000000010100110010000110", 
    68 => "00111101010110100001011110100100", 
    69 => "10111101101100000100110000000110", 
    70 => "00111101110001010101011110000000", 
    71 => "00111110000100000001001011100000", 
    72 => "00111101010010011111000101101011", 
    73 => "00111101010000000100010010010100", 
    74 => "10111101101001001000000001111101", 
    75 => "10111110001100000100001110100010", 
    76 => "10111101110001110101000100101101", 
    77 => "10111101010001001110111010010111", 
    78 => "10111100101001111000111011110000", 
    79 => "10111101100001011101100111110001", 
    80 => "00111101001000111000110100011110", 
    81 => "00111101110001000010110011011110", 
    82 => "00111110000001010101100100101110", 
    83 => "00111100000100011011001001011010", 
    84 => "10111011110011100101111010110011", 
    85 => "10111100000110011001101111010011", 
    86 => "00111101001100001011011110001110", 
    87 => "00111101110111011110000011010110", 
    88 => "10111100111001011001011110011111", 
    89 => "10111100111000111110000101010001", 
    90 => "00111101110010110110100100010010", 
    91 => "00111101000101001011000000100110", 
    92 => "10111100000110110010001101011100", 
    93 => "00111110000101110010111100110100", 
    94 => "00111100110110011001000010010101", 
    95 => "10111101101100000011110111000011", 
    96 => "10111101111101010100101100000110", 
    97 => "10111101000011101001100111011100", 
    98 => "10111100101111100011011100111110", 
    99 => "10111100110111000110000110010101", 
    100 => "00111110000111110011111100010000", 
    101 => "00111101111100100111000100110111", 
    102 => "00111110001000001001011111001000", 
    103 => "00111100111101010111010011000001", 
    104 => "10111101110100011000001010101010", 
    105 => "00111110000000100110100010010000", 
    106 => "00111101110100011101111011110000", 
    107 => "00111101100001111011101001110100", 
    108 => "10111101010010010111110100100010", 
    109 => "10111101000110111000100011110011", 
    110 => "00111101001010101000111100000101", 
    111 => "10111101100101001011010100010011", 
    112 => "10111110010001010100101111001111", 
    113 => "10111101111101011011010101110100", 
    114 => "10111101100100000011001001111101", 
    115 => "00111100110111001000110100110100", 
    116 => "00111100001100101111010111110111", 
    117 => "00111101001101110010111001101010", 
    118 => "00111110000000011100101011000001", 
    119 => "00111101101000000010111001110100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_2 is
    component inference_conv2d_f3_2_4_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_2_rom_U :  component inference_conv2d_f3_2_4_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


