-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_25_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_25_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000011101110000011110100", 
    1 => "10111101001010001100000110001010", 
    2 => "00111101101010011000100000110010", 
    3 => "00111101001110011010000111000111", 
    4 => "00111100110001011011011001011000", 
    5 => "10111101111110111111101111011111", 
    6 => "10111101000110110111010010000000", 
    7 => "00111100101011110100101101000111", 
    8 => "00111110010011010000101000100100", 
    9 => "10111110000100000111000110000010", 
    10 => "00111110001100110101010110001010", 
    11 => "10111101111100001010100110011011", 
    12 => "00111110010001000111111011010000", 
    13 => "10111101100000011001111010000001", 
    14 => "10111101001011000101111101010100", 
    15 => "00111101110110111101000111101110", 
    16 => "00111101101101001101001000011111", 
    17 => "10111110001010110011010001100001", 
    18 => "10111101100100011100100000010100", 
    19 => "00111101111110011000011000110100", 
    20 => "00111110010110011000010100100111", 
    21 => "00111101111001011000010011110101", 
    22 => "00111101111101101100011000010101", 
    23 => "10111110000010010001110100010101", 
    24 => "10111101111001110100000010000001", 
    25 => "00111110000001110000011011010101", 
    26 => "00111101010000100011100110010110", 
    27 => "10111101001001000011010110111010", 
    28 => "00111101011111001110011110110010", 
    29 => "00111100110101011111111100010000", 
    30 => "00111011100000000101100111000010", 
    31 => "10111101111110111000001101001001", 
    32 => "10111101001001111001000111111010", 
    33 => "10111110011111110101111001000010", 
    34 => "10111101101101110111110111100110", 
    35 => "10111101100111001001101111111101", 
    36 => "00111110001110001000000001010010", 
    37 => "10111110000101111101011100111101", 
    38 => "10111101000000000101100011101011", 
    39 => "00111101001110000100110001000010", 
    40 => "10111101111001111001101000101000", 
    41 => "00111101111111110100101000010010", 
    42 => "10111101001010111010111010100101", 
    43 => "10111011111101001011010011001000", 
    44 => "10111101010111001101000100100111", 
    45 => "10111100100010111100100001010101", 
    46 => "10111101100000100010110011110011", 
    47 => "00111101110110111100110000101001", 
    48 => "00111110000001110101010011110011", 
    49 => "00111110000001111101111010010100", 
    50 => "00111101110010001101111111011000", 
    51 => "00111101110101000000011001111101", 
    52 => "10111101100001001000010010111101", 
    53 => "10111110000100010100110101110010", 
    54 => "00111101110100010101001001101110", 
    55 => "00111101000100101100001000101010", 
    56 => "00111101011100001111111000111010", 
    57 => "10111110010001011000000011000011", 
    58 => "10111101110010010110110100001001", 
    59 => "10111010111001001110110011010100", 
    60 => "00111110000100001001000111000001", 
    61 => "10111101101101100101110001110000", 
    62 => "00111101100001111000101011011001", 
    63 => "10111100111010111000011100000010", 
    64 => "00111101001111011110010100111110", 
    65 => "10111101100100001001010110000111", 
    66 => "10111101010101101001000100111100", 
    67 => "00111101101001001011111100100100", 
    68 => "00111101100111101001011010001110", 
    69 => "00111100100111111110010000110110", 
    70 => "00111110010001000000011101000110", 
    71 => "00111110000010011101010111100101", 
    72 => "10111101001101011111101000001000", 
    73 => "00111110001011101010100011011010", 
    74 => "00111101001111100010100111101100", 
    75 => "00111101111101110110111101101101", 
    76 => "10111101101001000000110100100110", 
    77 => "00111101110011111011100011110101", 
    78 => "10111100100011010101011100110110", 
    79 => "00111100010110001100110001001010", 
    80 => "10111101110101101011010001000010", 
    81 => "10111110000110000100101010010100", 
    82 => "00111101001111101111000111001000", 
    83 => "00111110000010100110010110001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_25 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_25 is
    component inference_mult_1_120_120_84_s_W4_25_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_25_rom_U :  component inference_mult_1_120_120_84_s_W4_25_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


