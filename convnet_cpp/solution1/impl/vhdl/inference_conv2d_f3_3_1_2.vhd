-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111000001100110100110101", 
    1 => "10111100111101001110100011100000", 
    2 => "10111101111011011000100001111111", 
    3 => "10111101111000000101000010111110", 
    4 => "00111101001011111100100010010101", 
    5 => "00111100100010111000100000101001", 
    6 => "00111100110010010011110001010100", 
    7 => "10111110000001101010001101111011", 
    8 => "00111110000010000100011110110010", 
    9 => "10111101110100011110011111011010", 
    10 => "10111110010011010010101011101001", 
    11 => "00111101011000111001001001110111", 
    12 => "00111110000011000001011100100010", 
    13 => "00111100010110111010010110101110", 
    14 => "10111101010110110000100100000101", 
    15 => "10111110001010010110000011111010", 
    16 => "10111100101011010011100001000111", 
    17 => "10111101001111101110101100101101", 
    18 => "10111100000100100000000101010101", 
    19 => "10111101000111001001100111001001", 
    20 => "00111101010100100000011111010101", 
    21 => "10111101011111010100011110001001", 
    22 => "10111101000001001101001001111101", 
    23 => "00111011011101111100101001010001", 
    24 => "00111101011110010110101110010001", 
    25 => "10111100110010101111111111011001", 
    26 => "10111100100001000010111001100011", 
    27 => "00111110000011100000100111111111", 
    28 => "00111101110011110011000100101011", 
    29 => "10111100110000100100101000100111", 
    30 => "10111110001010011011111101011001", 
    31 => "00111101011100010011100111111111", 
    32 => "00111101010001111101010001011010", 
    33 => "10111101001110110101111110111101", 
    34 => "00111110000111011110000010010011", 
    35 => "00111100111111010011000011100011", 
    36 => "10111101110000010000011100111111", 
    37 => "00111110000101010111110110011110", 
    38 => "10111101001100001111100010010001", 
    39 => "00111101011000011100010100110010", 
    40 => "10111101110110110100001011001100", 
    41 => "00111101000010110010010011011100", 
    42 => "10111110000101101100001101110110", 
    43 => "10111101110101001000110010110101", 
    44 => "10111101011001001000110000111100", 
    45 => "10111110001010000011110001101101", 
    46 => "00111011010001000101111011101010", 
    47 => "10111101100010100110001000010110", 
    48 => "00111101010100010110000110100010", 
    49 => "10111110000111011110000000001101", 
    50 => "10111110000111110001101110101100", 
    51 => "10111110000110010000010101111101", 
    52 => "10111101001110011010011000101111", 
    53 => "10111101101101000000101101111000", 
    54 => "00111101100110010100011001001010", 
    55 => "10111101011001010101000110101110", 
    56 => "10111011011101110110111111100100", 
    57 => "10111101100101111011110000101111", 
    58 => "00111101111000001010011000110011", 
    59 => "00111011100101001000011011110110", 
    60 => "10111100001110010000110000100110", 
    61 => "00111101110110111111111100000100", 
    62 => "10111100111011011101000000011101", 
    63 => "00111101110001100101011111111011", 
    64 => "00111110010000001000011111001010", 
    65 => "00111101010010100001010010001100", 
    66 => "10111110000111010001001101010001", 
    67 => "00111101111101001001110101111100", 
    68 => "10111110011000100000000100000100", 
    69 => "10111100111110010001010001010011", 
    70 => "10111101011101111011010111111111", 
    71 => "10111101010010110101011010101011", 
    72 => "10111110000010110101010110101100", 
    73 => "10111101010110000010100010110110", 
    74 => "00111101110000010101111011101000", 
    75 => "10111101111010010110011100000010", 
    76 => "10111101100011100111110101001001", 
    77 => "10111110000000110111001111110011", 
    78 => "00111100101001101110110011010100", 
    79 => "00111101101001101000011110010110", 
    80 => "10111011110111011100110001111001", 
    81 => "00111100000101000000010100110000", 
    82 => "00111011010101000010100101100010", 
    83 => "10111110000011110100100011000011", 
    84 => "10111101011100001100100111100111", 
    85 => "10111100111101001100010110100101", 
    86 => "10111101111011011010101000001101", 
    87 => "10111101100101100111110111001001", 
    88 => "10111101010100010100000001100100", 
    89 => "10111100101000110001000110110011", 
    90 => "00111101100010110111011011001111", 
    91 => "10111101010000100000011111100010", 
    92 => "00111101101011001001100111111111", 
    93 => "10111101101011100010100110001110", 
    94 => "00111110000101111011111100011111", 
    95 => "00111011110100010100100010110010", 
    96 => "00111101011101010111101111001000", 
    97 => "00111101101010100110011101101111", 
    98 => "10111110000001010000101111011000", 
    99 => "00111101110110000010000110101111", 
    100 => "00111101111001011000110011010010", 
    101 => "00111110001110011110000100101010", 
    102 => "00111011111001000011101001111101", 
    103 => "00111110000101010001001001100110", 
    104 => "10111101110000101100100100100011", 
    105 => "00111101100011000111110110000111", 
    106 => "10111010111111100011110011011100", 
    107 => "10111110000111001011011110010001", 
    108 => "10111101001100111000110010001010", 
    109 => "00111100110100011111000111010000", 
    110 => "00111110010000010011010101010100", 
    111 => "00111110000101111110111011010100", 
    112 => "00111101100111010011100111001101", 
    113 => "00111101101000010011110001011011", 
    114 => "00111100101001110010100100000100", 
    115 => "10111101101010110001110111010110", 
    116 => "00111110000101010110010111000011", 
    117 => "10111101100000101001111110011101", 
    118 => "10111110001111001010101010111001", 
    119 => "00111101000101000111101011111100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_2 is
    component inference_conv2d_f3_3_1_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_2_rom_U :  component inference_conv2d_f3_3_1_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


