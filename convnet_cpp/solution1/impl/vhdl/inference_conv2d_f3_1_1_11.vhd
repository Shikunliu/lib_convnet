-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100000110010100001100110", 
    1 => "00111100011101010000101101000101", 
    2 => "00111101111010011110100100001000", 
    3 => "00111100111110111011010010101100", 
    4 => "00111100010110111101110111100010", 
    5 => "00111101110001001010100111101001", 
    6 => "10111101010110000000101100001001", 
    7 => "10111100100011001011010110111011", 
    8 => "10111101001011110011111001100001", 
    9 => "10111101110110011011101110101110", 
    10 => "00111110010111011111101000000001", 
    11 => "10111110000001000011001011001010", 
    12 => "00111100110001011011101011110101", 
    13 => "10111101100011011101110100111000", 
    14 => "10111110001110001110000010000111", 
    15 => "10111101110100111000010001110111", 
    16 => "00111101010000110010101111001111", 
    17 => "10111101111010010000111001100111", 
    18 => "00111010001110110001110100111100", 
    19 => "10111100011110111110110110110111", 
    20 => "00111101100000001011001111100010", 
    21 => "00111101010011100000110011010011", 
    22 => "10111101000010010010111110100100", 
    23 => "00111101111000001000001110011001", 
    24 => "10111101111110100100001101111000", 
    25 => "10111110001001000110101110101101", 
    26 => "10111101001100101011110000110000", 
    27 => "00111101110100101011001011000000", 
    28 => "00111101100100111101100011111011", 
    29 => "00111110011010101100100011100111", 
    30 => "10111011110001101011001110000011", 
    31 => "00111101001111110001000111111001", 
    32 => "00111011000011011111111100110010", 
    33 => "00111101111000010110110111110100", 
    34 => "10111101001110011010110111010110", 
    35 => "00111100100101101010011100001011", 
    36 => "10111110000101111100001110010011", 
    37 => "10111010100000111111010111101110", 
    38 => "00111101001101001011101011110011", 
    39 => "00111101000100111011110110111000", 
    40 => "00111100111101010111100010111110", 
    41 => "00111101010100111010100110110000", 
    42 => "00111101000001110001000101101100", 
    43 => "00111101101111100000111110001101", 
    44 => "10111101001001010110000010101101", 
    45 => "00111101101011101010100100000011", 
    46 => "00111101101100100001011111101101", 
    47 => "10111101000100101100000000010001", 
    48 => "00111101100010010110011101101101", 
    49 => "00111100001010001001011000100001", 
    50 => "00111100110100100110000011000000", 
    51 => "10111110000100011110101101000010", 
    52 => "00111101000101000011001101000011", 
    53 => "00111110000111101010011101001000", 
    54 => "10111100010111100001000001010111", 
    55 => "10111100111110101001100111000100", 
    56 => "00111110000010001001110001011110", 
    57 => "10111100011111001101111101001111", 
    58 => "10111100101110000001001101101101", 
    59 => "10111101111001011011001100011000", 
    60 => "10111100111101101011110010001010", 
    61 => "10111110001010100110011001010110", 
    62 => "10111101000010010100101110111110", 
    63 => "10111101001100111111111101011100", 
    64 => "00111101100011100111111000010010", 
    65 => "10111101110110101111011111010011", 
    66 => "10111100110100101110101101011111", 
    67 => "10111101001001111101110010111110", 
    68 => "10111101110011001010110101100101", 
    69 => "00111101100011011001111101011011", 
    70 => "00111101011001101010111000111010", 
    71 => "00111101010101100110110010111110", 
    72 => "10111101100100001110101011100010", 
    73 => "00111101110110011000010010100001", 
    74 => "10111101011101111001101001101011", 
    75 => "10111101101000110000110000100100", 
    76 => "00111101110010010101001110101001", 
    77 => "10111101111011011111000111100001", 
    78 => "00111110000010000000011000101001", 
    79 => "10111101101111011101110001100010", 
    80 => "10111101001100010110110110110001", 
    81 => "00111101110101010101100110110100", 
    82 => "10111101110011010001011111000110", 
    83 => "00111000111111011110000110011000", 
    84 => "10111101011000110101110011111100", 
    85 => "00111101100101100100111001110001", 
    86 => "00111101000001011001101011011111", 
    87 => "10111100010110001101111001010011", 
    88 => "10111101100010000111011101001101", 
    89 => "00111110000101001011001100111110", 
    90 => "10111100000111101000000110001011", 
    91 => "00111110001001111100001110010011", 
    92 => "00111110010011101011001111011101", 
    93 => "10111101000010101010010101000000", 
    94 => "10111101101011011011011110100001", 
    95 => "00111101101000000001101001010010", 
    96 => "10111101111101110101110000000111", 
    97 => "00111110000111101010011100000101", 
    98 => "00111101111101101011000010010110", 
    99 => "00111101111010001101011001001101", 
    100 => "00111110000011000101110000010100", 
    101 => "10111101101001101010001011110101", 
    102 => "10111101111010011101111010001011", 
    103 => "10111101100100111101111110001001", 
    104 => "10111110010011111110111010110011", 
    105 => "10111101100011001001000011100000", 
    106 => "00111101100011010000101000110010", 
    107 => "00111001101101100011001011001111", 
    108 => "00111100000110101111111111110110", 
    109 => "10111101100100111000011010101011", 
    110 => "00111110010000111000001100100111", 
    111 => "00111101000001011101010100101100", 
    112 => "00111100011111011100111011001101", 
    113 => "00111101101001001000000000111010", 
    114 => "00111011101010011100111101110010", 
    115 => "00111101000001101100111100001100", 
    116 => "00111101011110111001000111110111", 
    117 => "10111100101010110110110101101100", 
    118 => "10111101001000111010010010110101", 
    119 => "00111101101001010110000010010010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_11 is
    component inference_conv2d_f3_1_1_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_11_rom_U :  component inference_conv2d_f3_1_1_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


