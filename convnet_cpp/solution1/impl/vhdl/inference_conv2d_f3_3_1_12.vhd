-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100011101110111110100001111", 
    1 => "00111110000101011100110001000010", 
    2 => "00111101001100111110100101010110", 
    3 => "10111100111111000100100000011010", 
    4 => "10111100111111111111111101011111", 
    5 => "00111101001010110101100000111110", 
    6 => "10111101000111011011111111101010", 
    7 => "10111100010001010011011011010110", 
    8 => "00111011110111110010011000010110", 
    9 => "10111101100000000110000110000100", 
    10 => "00111011010111100111101001110100", 
    11 => "00111101100000111010010111011101", 
    12 => "10111100011101101110010001100011", 
    13 => "00111011101100110100010100100111", 
    14 => "10111101011101010111100111001010", 
    15 => "10111101010100010100011100011010", 
    16 => "10111110001100101010011101111010", 
    17 => "10111110001000110001011110101101", 
    18 => "00111101010111001000011001001001", 
    19 => "00111110000001011011001101011011", 
    20 => "00111101111101011010111010100011", 
    21 => "00111101110000101110001101001100", 
    22 => "00111110001001010011110100100001", 
    23 => "10111101111111111110101110001110", 
    24 => "10111110000000001101111101011001", 
    25 => "00111101001011010110000010100110", 
    26 => "00111101110011001001011010110010", 
    27 => "10111010110101010101101110010010", 
    28 => "10111101111000111100100101101001", 
    29 => "10111101000011000111000111100011", 
    30 => "10111100100010100010010001000110", 
    31 => "10111100001110010110000001110100", 
    32 => "00111100101110010010110010100111", 
    33 => "00111101011011101100011001010010", 
    34 => "00111101000011001001111101100110", 
    35 => "10111101001100101111110011000111", 
    36 => "00111001001110110111010010111110", 
    37 => "00111101100101001000101010011100", 
    38 => "00111110001110101001110101100010", 
    39 => "10111110000101101110001010101000", 
    40 => "00111101100000001000000100111101", 
    41 => "00111010100100000111100001011110", 
    42 => "10111101001100111000010100011000", 
    43 => "00111100110000011011001001010010", 
    44 => "10111011110000010100000110010100", 
    45 => "00111101101111000111110100000001", 
    46 => "00111100101011101010110101011101", 
    47 => "00111101111101011101100100011011", 
    48 => "10111101110101101000101001010000", 
    49 => "00111110001111000111110011011001", 
    50 => "10111110000001111110011010110100", 
    51 => "00111100100000010111110110101111", 
    52 => "10111101100001110100001000010100", 
    53 => "00111101110011000100110101011000", 
    54 => "00111110010001100010101000011011", 
    55 => "10111100010111100110100001101011", 
    56 => "00111101100101110100001010001100", 
    57 => "10111100001101111111101110000100", 
    58 => "10111100011100001101000110001111", 
    59 => "10111101111000110100011101100011", 
    60 => "00111101011110110011111010110101", 
    61 => "10111101100011111011110000110110", 
    62 => "10111101010111100001010011110100", 
    63 => "10111110010001010111001011011110", 
    64 => "00111110000100011110011110010110", 
    65 => "10111100101100000000111100100111", 
    66 => "00111100000010111000111010001001", 
    67 => "00111100110101101110010101010101", 
    68 => "00111100101010011101110011011110", 
    69 => "00111101101001110110001000011100", 
    70 => "10111101101001010101010110011101", 
    71 => "10111101110110110001000110000100", 
    72 => "00111101000110100000000010101101", 
    73 => "00111100101000101010100011010111", 
    74 => "10111110001000011000101001000100", 
    75 => "00111101010011001011110111101001", 
    76 => "10111110000000100001101011111000", 
    77 => "10111101101110011010111110101100", 
    78 => "00111110000011010010111010010100", 
    79 => "10111101110101110010000011001001", 
    80 => "10111101100010110001010000010101", 
    81 => "10111100011011101011000111111010", 
    82 => "10111101001000110110011111001001", 
    83 => "00111101111100100011001101011001", 
    84 => "10111101111010010011010100110011", 
    85 => "10111101111011010100101000011011", 
    86 => "10111101100100011001110000001010", 
    87 => "00111110001101100101110000101101", 
    88 => "10111101011000000101001011110001", 
    89 => "00111110010101010100110101100010", 
    90 => "10111101000111110001011010110001", 
    91 => "10111110001111101010000011111101", 
    92 => "00111110000001101111100100110011", 
    93 => "10111100000111011000100001111100", 
    94 => "10111101100111110001011011100111", 
    95 => "00111101111000000101000010111110", 
    96 => "00111100111111100001111111000001", 
    97 => "10111011001111111101111000100111", 
    98 => "10111011010110000011110101101110", 
    99 => "10111100100011101101011101101001", 
    100 => "10111100001001110001110101111011", 
    101 => "00111101101011010010000000000001", 
    102 => "00111101001100011101111001001111", 
    103 => "10111101111011111101011111100100", 
    104 => "00111101000011111000101010011101", 
    105 => "10111101110101010100011111100000", 
    106 => "10111100010000001001110101111111", 
    107 => "10111110000010001000100011111000", 
    108 => "10111100000110000011101111000001", 
    109 => "10111101111100001001101111111010", 
    110 => "00111101101000001111011000110101", 
    111 => "10111101110100010110010101001101", 
    112 => "00111101010101100010100001000110", 
    113 => "00111101110011000001110011011001", 
    114 => "00111100110101001100100110000110", 
    115 => "10111100100111100000011001000110", 
    116 => "10111100010111011110110110000111", 
    117 => "10111110001111101001000110000110", 
    118 => "10111101110100000110100100011111", 
    119 => "10111101100110000111001010010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_12 is
    component inference_conv2d_f3_3_1_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_12_rom_U :  component inference_conv2d_f3_3_1_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


