-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_90_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_90_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110010001110100010110101", 
    1 => "00111101100010010100111110010010", 
    2 => "00111101100000010001011111101011", 
    3 => "10111101100111000100101110101011", 
    4 => "00111100101110000101011010111110", 
    5 => "10111110010001000101000001101010", 
    6 => "00111110000101010001111011111011", 
    7 => "10111110001111110011101010011011", 
    8 => "10111101110111100100001001011011", 
    9 => "10111101100100001111101100111101", 
    10 => "10111101001110001000011011000101", 
    11 => "10111101001110100110111110000010", 
    12 => "10111101010000011110110001001110", 
    13 => "10111100111101010111011111100111", 
    14 => "00111101101101000011010000110101", 
    15 => "00111101100010011110001010100010", 
    16 => "10111101001110001100010110101111", 
    17 => "00111100000100100111101111000011", 
    18 => "10111101011010011101111110110011", 
    19 => "00111011111101110101001101110100", 
    20 => "10111101110110000001010100011010", 
    21 => "00111101011100111101100011000101", 
    22 => "10111101100111110000100010010111", 
    23 => "10111101111010010001110000001000", 
    24 => "10111100100111001101010000010110", 
    25 => "00111110000010111000001000111101", 
    26 => "10111101110000111111011111011100", 
    27 => "10111101111010111101111011000110", 
    28 => "10111101110110011111001000110100", 
    29 => "10111101111010111001001111001101", 
    30 => "00111100111111011011001010110011", 
    31 => "00111101100101011101001010001101", 
    32 => "10111101111110110110011101111111", 
    33 => "00111101001010011111001010010010", 
    34 => "00111101011010110110111111110000", 
    35 => "10111011100001010100110110110010", 
    36 => "10111101001001011100001010000010", 
    37 => "10111101110000110011110111001010", 
    38 => "00111100110100010001100010001100", 
    39 => "00111101101110111000011010100100", 
    40 => "10111101100101001100110100100100", 
    41 => "00111110001010000100000010011110", 
    42 => "00111011101001000100010110011010", 
    43 => "10111110010001000100000001101100", 
    44 => "10111011010000101100011010111010", 
    45 => "00111100101001001100101011110000", 
    46 => "00111100111101010101011100110000", 
    47 => "00111100011110010100111111100011", 
    48 => "00111101100010111110101111000111", 
    49 => "00111101011111010011111110010001", 
    50 => "10111110001111001110010011101011", 
    51 => "00111100100101000001001001110001", 
    52 => "10111101111110000110110000100010", 
    53 => "10111101100111010111010010101101", 
    54 => "00111100101101000011100010110111", 
    55 => "00111011001101001100001011101011", 
    56 => "00111110000101110010001110101011", 
    57 => "00111100101101110111101011110110", 
    58 => "00111101101001100111100011001101", 
    59 => "00111011001011100110101010110111", 
    60 => "00111100010011101011001010000000", 
    61 => "00111110001010111000010100011111", 
    62 => "10111101011111100110111001100101", 
    63 => "00111101101111101111111101000010", 
    64 => "00111110001000000111100001010011", 
    65 => "00111101100010011110101001100101", 
    66 => "10111100100111010110100100110010", 
    67 => "10111101011011110011101111111000", 
    68 => "10111101110010000010110011011010", 
    69 => "00111110000100111000001110101110", 
    70 => "00111101001110001001001101011010", 
    71 => "00111100110111000110111100000001", 
    72 => "00111101010110010111010100110111", 
    73 => "00111101101111001101100011110111", 
    74 => "10111101101010111011111000101010", 
    75 => "10111101100101000110001101111111", 
    76 => "00111100111000000001010100010100", 
    77 => "10111101010111000000111101000101", 
    78 => "10111101101100100011111110111000", 
    79 => "00111010001100011111100001011000", 
    80 => "00111110000110000100101001010001", 
    81 => "00111101011000111011101000110100", 
    82 => "10111101100110111110111011010001", 
    83 => "00111101100010101010000110000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_90 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_90 is
    component inference_mult_1_120_120_84_s_W4_90_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_90_rom_U :  component inference_mult_1_120_120_84_s_W4_90_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


