-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_fc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    X_0_ce0 : OUT STD_LOGIC;
    X_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    W_ce0 : OUT STD_LOGIC;
    W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Y_0_ce0 : OUT STD_LOGIC;
    Y_0_we0 : OUT STD_LOGIC;
    Y_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inference_fc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_48 : BOOLEAN;
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_85 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal j_fu_156_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_202 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal tmp_i_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_207 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal T_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_load_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_121 : BOOLEAN;
    signal B_0_load_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_14_fu_174_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_14_reg_235 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_131 : BOOLEAN;
    signal tmp_7_i_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_i_reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i4_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal S_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_0_load_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_147 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_165 : BOOLEAN;
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal T_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal T_0_ce0 : STD_LOGIC;
    signal T_0_we0 : STD_LOGIC;
    signal T_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal S_0_ce0 : STD_LOGIC;
    signal S_0_we0 : STD_LOGIC;
    signal S_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_120_120_84_s_fu_119_ap_start : STD_LOGIC;
    signal grp_inference_mult_1_120_120_84_s_fu_119_ap_done : STD_LOGIC;
    signal grp_inference_mult_1_120_120_84_s_fu_119_ap_idle : STD_LOGIC;
    signal grp_inference_mult_1_120_120_84_s_fu_119_ap_ready : STD_LOGIC;
    signal grp_inference_mult_1_120_120_84_s_fu_119_A_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_mult_1_120_120_84_s_fu_119_A_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_120_120_84_s_fu_119_A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_120_120_84_s_fu_119_B_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_inference_mult_1_120_120_84_s_fu_119_B_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_120_120_84_s_fu_119_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_120_120_84_s_fu_119_C_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_mult_1_120_120_84_s_fu_119_C_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_120_120_84_s_fu_119_C_0_we0 : STD_LOGIC;
    signal grp_inference_mult_1_120_120_84_s_fu_119_C_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i_reg_97 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_216 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_224 : BOOLEAN;
    signal j_i3_reg_108 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_236 : BOOLEAN;
    signal grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_258 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal grp_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_to_int_i_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_neg_i_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_ce : STD_LOGIC;
    signal grp_fu_134_ce : STD_LOGIC;
    signal grp_fu_139_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component inference_mult_1_120_120_84_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_we0 : OUT STD_LOGIC;
        C_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_fadd_32ns_32ns_32_4_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_fdiv_32ns_32ns_32_8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_fexp_32ns_32ns_32_6_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_fc_T_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    T_0_U : component inference_fc_T_0
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_0_address0,
        ce0 => T_0_ce0,
        we0 => T_0_we0,
        d0 => T_0_d0,
        q0 => T_0_q0);

    S_0_U : component inference_fc_T_0
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_0_address0,
        ce0 => S_0_ce0,
        we0 => S_0_we0,
        d0 => S_0_d0,
        q0 => S_0_q0);

    grp_inference_mult_1_120_120_84_s_fu_119 : component inference_mult_1_120_120_84_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_mult_1_120_120_84_s_fu_119_ap_start,
        ap_done => grp_inference_mult_1_120_120_84_s_fu_119_ap_done,
        ap_idle => grp_inference_mult_1_120_120_84_s_fu_119_ap_idle,
        ap_ready => grp_inference_mult_1_120_120_84_s_fu_119_ap_ready,
        A_0_address0 => grp_inference_mult_1_120_120_84_s_fu_119_A_0_address0,
        A_0_ce0 => grp_inference_mult_1_120_120_84_s_fu_119_A_0_ce0,
        A_0_q0 => grp_inference_mult_1_120_120_84_s_fu_119_A_0_q0,
        B_address0 => grp_inference_mult_1_120_120_84_s_fu_119_B_address0,
        B_ce0 => grp_inference_mult_1_120_120_84_s_fu_119_B_ce0,
        B_q0 => grp_inference_mult_1_120_120_84_s_fu_119_B_q0,
        C_0_address0 => grp_inference_mult_1_120_120_84_s_fu_119_C_0_address0,
        C_0_ce0 => grp_inference_mult_1_120_120_84_s_fu_119_C_0_ce0,
        C_0_we0 => grp_inference_mult_1_120_120_84_s_fu_119_C_0_we0,
        C_0_d0 => grp_inference_mult_1_120_120_84_s_fu_119_C_0_d0);

    inference_fadd_32ns_32ns_32_4_full_dsp_U33 : component inference_fadd_32ns_32ns_32_4_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_129_p0,
        din1 => grp_fu_129_p1,
        ce => grp_fu_129_ce,
        dout => grp_fu_129_p2);

    inference_fdiv_32ns_32ns_32_8_U34 : component inference_fdiv_32ns_32ns_32_8
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_144,
        ce => grp_fu_134_ce,
        dout => grp_fu_134_p2);

    inference_fexp_32ns_32ns_32_6_full_dsp_U35 : component inference_fexp_32ns_32ns_32_6_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_139_p1,
        ce => grp_fu_139_ce,
        dout => grp_fu_139_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg assign process. --
    grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_mult_1_120_120_84_s_fu_119_ap_ready)) then 
                    grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- j_i3_reg_108 assign process. --
    j_i3_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_i_fu_150_p2 = ap_const_lv1_0)))) then 
                j_i3_reg_108 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
                j_i3_reg_108 <= j_14_reg_235;
            end if; 
        end if;
    end process;

    -- j_i_reg_97 assign process. --
    j_i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_inference_mult_1_120_120_84_s_fu_119_ap_done)))) then 
                j_i_reg_97 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                j_i_reg_97 <= j_reg_202;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                B_0_load_reg_227 <= B_0_q0;
                T_0_load_reg_222 <= T_0_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                S_0_load_reg_250 <= S_0_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                j_14_reg_235 <= j_14_fu_174_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_reg_202 <= j_fu_156_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then
                reg_144 <= grp_fu_129_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                tmp_1_i_reg_265 <= grp_fu_134_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond_i4_fu_168_p2))) then
                    tmp_7_i_reg_240(6 downto 0) <= tmp_7_i_fu_180_p1(6 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                tmp_9_i_reg_260 <= grp_fu_139_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_i_fu_150_p2 = ap_const_lv1_0))) then
                    tmp_i_reg_207(6 downto 0) <= tmp_i_fu_162_p1(6 downto 0);
            end if;
        end if;
    end process;
    tmp_i_reg_207(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_7_i_reg_240(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_i_fu_150_p2, exitcond_i4_fu_168_p2, grp_inference_mult_1_120_120_84_s_fu_119_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_inference_mult_1_120_120_84_s_fu_119_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond_i_fu_150_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond_i4_fu_168_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    B_0_address0 <= tmp_i_fu_162_p1(7 - 1 downto 0);

    -- B_0_ce0 assign process. --
    B_0_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S_0_address0 assign process. --
    S_0_address0_assign_proc : process(tmp_i_reg_207, ap_sig_cseq_ST_st10_fsm_9, tmp_7_i_fu_180_p1, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            S_0_address0 <= tmp_i_reg_207(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            S_0_address0 <= tmp_7_i_fu_180_p1(7 - 1 downto 0);
        else 
            S_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- S_0_ce0 assign process. --
    S_0_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            S_0_ce0 <= ap_const_logic_1;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_0_d0 <= reg_144;

    -- S_0_we0 assign process. --
    S_0_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            S_0_we0 <= ap_const_logic_1;
        else 
            S_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- T_0_address0 assign process. --
    T_0_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_i_fu_162_p1, grp_inference_mult_1_120_120_84_s_fu_119_C_0_address0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            T_0_address0 <= tmp_i_fu_162_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_address0 <= grp_inference_mult_1_120_120_84_s_fu_119_C_0_address0;
        else 
            T_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- T_0_ce0 assign process. --
    T_0_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_inference_mult_1_120_120_84_s_fu_119_C_0_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            T_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_ce0 <= grp_inference_mult_1_120_120_84_s_fu_119_C_0_ce0;
        else 
            T_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    T_0_d0 <= grp_inference_mult_1_120_120_84_s_fu_119_C_0_d0;

    -- T_0_we0 assign process. --
    T_0_we0_assign_proc : process(grp_inference_mult_1_120_120_84_s_fu_119_C_0_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_we0 <= grp_inference_mult_1_120_120_84_s_fu_119_C_0_we0;
        else 
            T_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    W_address0 <= grp_inference_mult_1_120_120_84_s_fu_119_B_address0;

    -- W_ce0 assign process. --
    W_ce0_assign_proc : process(grp_inference_mult_1_120_120_84_s_fu_119_B_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            W_ce0 <= grp_inference_mult_1_120_120_84_s_fu_119_B_ce0;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_0_address0 <= grp_inference_mult_1_120_120_84_s_fu_119_A_0_address0;

    -- X_0_ce0 assign process. --
    X_0_ce0_assign_proc : process(grp_inference_mult_1_120_120_84_s_fu_119_A_0_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_0_ce0 <= grp_inference_mult_1_120_120_84_s_fu_119_A_0_ce0;
        else 
            X_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_0_address0 <= tmp_7_i_reg_240(7 - 1 downto 0);

    -- Y_0_ce0 assign process. --
    Y_0_ce0_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            Y_0_ce0 <= ap_const_logic_1;
        else 
            Y_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_0_d0 <= tmp_1_i_reg_265;

    -- Y_0_we0 assign process. --
    Y_0_we0_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            Y_0_we0 <= ap_const_logic_1;
        else 
            Y_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st10_fsm_9, exitcond_i4_fu_168_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_i4_fu_168_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, exitcond_i4_fu_168_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_i4_fu_168_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_121 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_131 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_147 assign process. --
    ap_sig_bdd_147_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_147 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_156 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_165 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_216 assign process. --
    ap_sig_bdd_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_216 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_224 assign process. --
    ap_sig_bdd_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_224 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_236 assign process. --
    ap_sig_bdd_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_236 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_258 assign process. --
    ap_sig_bdd_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_258 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_48 assign process. --
    ap_sig_bdd_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_48 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_85 assign process. --
    ap_sig_bdd_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_85 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_131)
    begin
        if (ap_sig_bdd_131) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_147)
    begin
        if (ap_sig_bdd_147) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_156)
    begin
        if (ap_sig_bdd_156) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_165)
    begin
        if (ap_sig_bdd_165) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_48)
    begin
        if (ap_sig_bdd_48) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_224)
    begin
        if (ap_sig_bdd_224) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_236)
    begin
        if (ap_sig_bdd_236) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_121)
    begin
        if (ap_sig_bdd_121) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_258)
    begin
        if (ap_sig_bdd_258) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_85)
    begin
        if (ap_sig_bdd_85) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_216)
    begin
        if (ap_sig_bdd_216) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i4_fu_168_p2 <= "1" when (j_i3_reg_108 = ap_const_lv7_54) else "0";
    exitcond_i_fu_150_p2 <= "1" when (j_i_reg_97 = ap_const_lv7_54) else "0";
    grp_fu_129_ce <= ap_const_logic_1;

    -- grp_fu_129_p0 assign process. --
    grp_fu_129_p0_assign_proc : process(T_0_load_reg_222, tmp_9_i_reg_260, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_129_p0 <= tmp_9_i_reg_260;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_129_p0 <= T_0_load_reg_222;
        else 
            grp_fu_129_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_129_p1 assign process. --
    grp_fu_129_p1_assign_proc : process(B_0_load_reg_227, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_129_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_129_p1 <= B_0_load_reg_227;
        else 
            grp_fu_129_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_134_ce <= ap_const_logic_1;
    grp_fu_139_ce <= ap_const_logic_1;
    grp_fu_139_p1 <= tmp_8_neg_i_fu_188_p2;
    grp_inference_mult_1_120_120_84_s_fu_119_A_0_q0 <= X_0_q0;
    grp_inference_mult_1_120_120_84_s_fu_119_B_q0 <= W_q0;
    grp_inference_mult_1_120_120_84_s_fu_119_ap_start <= grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg;
    j_14_fu_174_p2 <= std_logic_vector(unsigned(j_i3_reg_108) + unsigned(ap_const_lv7_1));
    j_fu_156_p2 <= std_logic_vector(unsigned(j_i_reg_97) + unsigned(ap_const_lv7_1));
    tmp_7_i_fu_180_p1 <= std_logic_vector(resize(unsigned(j_i3_reg_108),64));
    tmp_8_neg_i_fu_188_p2 <= (tmp_8_to_int_i_fu_185_p1 xor ap_const_lv32_80000000);
    tmp_8_to_int_i_fu_185_p1 <= S_0_load_reg_250;
    tmp_i_fu_162_p1 <= std_logic_vector(resize(unsigned(j_i_reg_97),64));
end behav;
