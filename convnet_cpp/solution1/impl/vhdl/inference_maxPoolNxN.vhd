-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_maxPoolNxN is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_feature_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    out_feature_ce0 : OUT STD_LOGIC;
    out_feature_we0 : OUT STD_LOGIC;
    out_feature_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inference_maxPoolNxN is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal tmp_37_cast_fu_235_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_cast_reg_558 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_50 : BOOLEAN;
    signal tmp_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_288_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_reg_566 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_64 : BOOLEAN;
    signal tmp_6_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_idx_1_fu_294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_ch_idx_fu_306_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_ch_idx_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal tmp_8_cast1_fu_312_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_cast1_reg_584 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_feature_addr_reg_589 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_c_idx_1_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_idx_1_fu_346_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_idx_1_reg_602 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_100 : BOOLEAN;
    signal tmp_45_cast_fu_388_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_45_cast_reg_607 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_idx_1_fu_402_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_idx_1_reg_615 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_114 : BOOLEAN;
    signal exitcond_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_2_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal in_r_idx_reg_101 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_c_idx_reg_113 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_ch_idx_reg_125 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_reg_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_idx_reg_149 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_1_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_idx_reg_172 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_42_cast_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_195_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_205_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_217_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_213_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_225_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_229_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_245_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_cast_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_259_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_264_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_276_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_268_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_284_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_cast_fu_316_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_320_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_idx_cast2_fu_336_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_352_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_fu_358_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_30_fu_370_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_366_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_idx_cast1_fu_392_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_408_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_cast_fu_414_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_fu_418_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_423_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_435_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_427_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_cast_fu_443_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_34_fu_447_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_35_fu_453_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_3_to_int_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_1_to_int_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_467_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_477_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_495_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_183_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component inference_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    inference_fcmp_32ns_32ns_1_1_U8 : component inference_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => x_q0,
        din1 => out_1_reg_160,
        opcode => tmp_17_fu_183_opcode,
        dout => tmp_17_fu_183_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- c_idx_reg_172 assign process. --
    c_idx_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_340_p2))) then 
                c_idx_reg_172 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                c_idx_reg_172 <= c_idx_1_reg_615;
            end if; 
        end if;
    end process;

    -- in_c_idx_reg_113 assign process. --
    in_c_idx_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_189_p2 = ap_const_lv1_0)))) then 
                in_c_idx_reg_113 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_300_p2)))) then 
                in_c_idx_reg_113 <= in_c_idx_1_fu_330_p2;
            end if; 
        end if;
    end process;

    -- in_r_idx_reg_101 assign process. --
    in_r_idx_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_6_fu_239_p2))) then 
                in_r_idx_reg_101 <= in_r_idx_1_fu_294_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                in_r_idx_reg_101 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- out_1_reg_160 assign process. --
    out_1_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_340_p2))) then 
                out_1_reg_160 <= out_reg_136;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                out_1_reg_160 <= out_2_fu_547_p3;
            end if; 
        end if;
    end process;

    -- out_ch_idx_reg_125 assign process. --
    out_ch_idx_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond1_fu_340_p2)))) then 
                out_ch_idx_reg_125 <= in_ch_idx_reg_579;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_6_fu_239_p2)))) then 
                out_ch_idx_reg_125 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- out_reg_136 assign process. --
    out_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_fu_396_p2)))) then 
                out_reg_136 <= out_1_reg_160;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_300_p2))) then 
                out_reg_136 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- r_idx_reg_149 assign process. --
    r_idx_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_fu_396_p2)))) then 
                r_idx_reg_149 <= r_idx_1_reg_602;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_300_p2))) then 
                r_idx_reg_149 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                c_idx_1_reg_615 <= c_idx_1_fu_402_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                in_ch_idx_reg_579 <= in_ch_idx_fu_306_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_300_p2))) then
                out_feature_addr_reg_589 <= tmp_42_cast_fu_325_p1(11 - 1 downto 0);
                    tmp_8_cast1_reg_584(2 downto 0) <= tmp_8_cast1_fu_312_p1(2 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                r_idx_1_reg_602 <= r_idx_1_fu_346_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_6_fu_239_p2)))) then
                    tmp_27_reg_566(11 downto 1) <= tmp_27_fu_288_p2(11 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_189_p2 = ap_const_lv1_0)))) then
                    tmp_37_cast_reg_558(9 downto 1) <= tmp_37_cast_fu_235_p1(9 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_fu_340_p2))) then
                    tmp_45_cast_reg_607(11 downto 2) <= tmp_45_cast_fu_388_p1(11 downto 2);
            end if;
        end if;
    end process;
    tmp_37_cast_reg_558(0) <= '0';
    tmp_27_reg_566(0) <= '0';
    tmp_8_cast1_reg_584(13 downto 3) <= "00000000000";
    tmp_45_cast_reg_607(1 downto 0) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_189_p2, tmp_6_fu_239_p2, exitcond2_fu_300_p2, exitcond1_fu_340_p2, exitcond_fu_396_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_fu_189_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = tmp_6_fu_239_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_300_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_340_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond_fu_396_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, tmp_fu_189_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_189_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_189_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_189_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_100 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_114 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_50 assign process. --
    ap_sig_bdd_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_50 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_64 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_50)
    begin
        if (ap_sig_bdd_50) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_64)
    begin
        if (ap_sig_bdd_64) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_100)
    begin
        if (ap_sig_bdd_100) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_114)
    begin
        if (ap_sig_bdd_114) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    c_idx_1_fu_402_p2 <= std_logic_vector(unsigned(c_idx_reg_172) + unsigned(ap_const_lv2_1));
    c_idx_cast1_fu_392_p1 <= std_logic_vector(resize(unsigned(c_idx_reg_172),5));
    exitcond1_fu_340_p2 <= "1" when (r_idx_reg_149 = ap_const_lv2_2) else "0";
    exitcond2_fu_300_p2 <= "1" when (out_ch_idx_reg_125 = ap_const_lv3_6) else "0";
    exitcond_fu_396_p2 <= "1" when (c_idx_reg_172 = ap_const_lv2_2) else "0";
    in_c_idx_1_fu_330_p2 <= std_logic_vector(unsigned(in_c_idx_reg_113) + unsigned(ap_const_lv5_2));
    in_ch_idx_fu_306_p2 <= std_logic_vector(unsigned(out_ch_idx_reg_125) + unsigned(ap_const_lv3_1));
    in_r_idx_1_fu_294_p2 <= std_logic_vector(unsigned(in_r_idx_reg_101) + unsigned(ap_const_lv5_2));
    notlhs6_fu_517_p2 <= "0" when (tmp_12_fu_485_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_499_p2 <= "0" when (tmp_10_fu_467_p4 = ap_const_lv8_FF) else "1";
    notrhs7_fu_523_p2 <= "1" when (tmp_37_fu_495_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_505_p2 <= "1" when (tmp_36_fu_477_p1 = ap_const_lv23_0) else "0";
    out_1_to_int_fu_481_p1 <= out_1_reg_160;
    out_2_fu_547_p3 <= 
        x_q0 when (tmp_18_fu_541_p2(0) = '1') else 
        out_1_reg_160;
    out_3_to_int_fu_463_p1 <= x_q0;
    out_feature_address0 <= out_feature_addr_reg_589;

    -- out_feature_ce0 assign process. --
    out_feature_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            out_feature_ce0 <= ap_const_logic_1;
        else 
            out_feature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_feature_d0 <= out_reg_136;

    -- out_feature_we0 assign process. --
    out_feature_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, exitcond1_fu_340_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond1_fu_340_p2))))) then 
            out_feature_we0 <= ap_const_logic_1;
        else 
            out_feature_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_225_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_217_p3),9));
    p_shl2_cast_fu_268_p3 <= (tmp_20_fu_264_p1 & ap_const_lv3_0);
        p_shl3_cast_fu_284_p1 <= std_logic_vector(resize(signed(tmp_21_fu_276_p3),12));

    p_shl4_cast_fu_366_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_358_p3),11));
    p_shl5_cast_fu_378_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_370_p3),11));
    p_shl6_cast_fu_427_p3 <= (tmp_22_fu_423_p1 & ap_const_lv3_0);
        p_shl7_cast_fu_443_p1 <= std_logic_vector(resize(signed(tmp_33_fu_435_p3),14));

    p_shl_cast_fu_213_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_205_p3),9));
    r_idx_1_fu_346_p2 <= std_logic_vector(unsigned(r_idx_reg_149) + unsigned(ap_const_lv2_1));
    r_idx_cast2_fu_336_p1 <= std_logic_vector(resize(unsigned(r_idx_reg_149),5));
    tmp_10_fu_467_p4 <= out_3_to_int_fu_463_p1(30 downto 23);
    tmp_12_fu_485_p4 <= out_1_to_int_fu_481_p1(30 downto 23);
    tmp_14_fu_511_p2 <= (notrhs_fu_505_p2 or notlhs_fu_499_p2);
    tmp_15_fu_529_p2 <= (notrhs7_fu_523_p2 or notlhs6_fu_517_p2);
    tmp_16_fu_535_p2 <= (tmp_14_fu_511_p2 and tmp_15_fu_529_p2);
    tmp_17_fu_183_opcode <= ap_const_lv5_2;
    tmp_18_fu_541_p2 <= (tmp_16_fu_535_p2 and tmp_17_fu_183_p2);
    tmp_19_fu_245_p4 <= in_c_idx_reg_113(4 downto 1);
    tmp_1_cast_fu_414_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_408_p2),12));
    tmp_20_fu_264_p1 <= tmp_26_fu_259_p2(9 - 1 downto 0);
    tmp_21_fu_276_p3 <= (tmp_26_fu_259_p2 & ap_const_lv1_0);
    tmp_22_fu_423_p1 <= tmp_32_fu_418_p2(11 - 1 downto 0);
    tmp_23_fu_205_p3 <= (tmp_s_fu_195_p4 & ap_const_lv4_0);
    tmp_24_fu_217_p3 <= (tmp_s_fu_195_p4 & ap_const_lv1_0);
    tmp_25_fu_229_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_213_p1) - unsigned(p_shl1_cast_fu_225_p1));
    tmp_26_fu_259_p2 <= std_logic_vector(signed(tmp_37_cast_reg_558) + signed(tmp_7_cast_fu_255_p1));
    tmp_27_fu_288_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_268_p3) - unsigned(p_shl3_cast_fu_284_p1));
    tmp_28_fu_320_p2 <= std_logic_vector(unsigned(tmp_27_reg_566) + unsigned(tmp_8_cast_fu_316_p1));
    tmp_29_fu_358_p3 <= (tmp_9_fu_352_p2 & ap_const_lv5_0);
    tmp_30_fu_370_p3 <= (tmp_9_fu_352_p2 & ap_const_lv2_0);
    tmp_31_fu_382_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_366_p1) - unsigned(p_shl5_cast_fu_378_p1));
    tmp_32_fu_418_p2 <= std_logic_vector(signed(tmp_45_cast_reg_607) + signed(tmp_1_cast_fu_414_p1));
    tmp_33_fu_435_p3 <= (tmp_32_fu_418_p2 & ap_const_lv1_0);
    tmp_34_fu_447_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_427_p3) - unsigned(p_shl7_cast_fu_443_p1));
    tmp_35_fu_453_p2 <= std_logic_vector(unsigned(tmp_34_fu_447_p2) + unsigned(tmp_8_cast1_reg_584));
    tmp_36_fu_477_p1 <= out_3_to_int_fu_463_p1(23 - 1 downto 0);
        tmp_37_cast_fu_235_p1 <= std_logic_vector(resize(signed(tmp_25_fu_229_p2),10));

    tmp_37_fu_495_p1 <= out_1_to_int_fu_481_p1(23 - 1 downto 0);
    tmp_42_cast_fu_325_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_320_p2),64));
        tmp_45_cast_fu_388_p1 <= std_logic_vector(resize(signed(tmp_31_fu_382_p2),12));

    tmp_50_cast_fu_458_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_453_p2),64));
    tmp_5_fu_408_p2 <= std_logic_vector(unsigned(c_idx_cast1_fu_392_p1) + unsigned(in_c_idx_reg_113));
    tmp_6_fu_239_p2 <= "1" when (unsigned(in_c_idx_reg_113) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_7_cast_fu_255_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_245_p4),10));
    tmp_8_cast1_fu_312_p1 <= std_logic_vector(resize(unsigned(out_ch_idx_reg_125),14));
    tmp_8_cast_fu_316_p1 <= std_logic_vector(resize(unsigned(out_ch_idx_reg_125),12));
    tmp_9_fu_352_p2 <= std_logic_vector(unsigned(r_idx_cast2_fu_336_p1) + unsigned(in_r_idx_reg_101));
    tmp_fu_189_p2 <= "1" when (unsigned(in_r_idx_reg_101) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_s_fu_195_p4 <= in_r_idx_reg_101(4 downto 1);
    x_address0 <= tmp_50_cast_fu_458_p1(13 - 1 downto 0);

    -- x_ce0 assign process. --
    x_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
