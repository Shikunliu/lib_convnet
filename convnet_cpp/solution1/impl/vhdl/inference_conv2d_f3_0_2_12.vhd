-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011101111110101110011001101", 
    1 => "10111010101100101011110000101010", 
    2 => "10111101111011011000111111010110", 
    3 => "10111101110111101101010100101000", 
    4 => "10111101011001001001101001001001", 
    5 => "10111100000011101100101010101001", 
    6 => "00111110011000100110111001010100", 
    7 => "00111101100101011100010001100101", 
    8 => "10111101011001011101000000001001", 
    9 => "00111101101011011100010101101011", 
    10 => "10111101010110010111100011111101", 
    11 => "00111101000000101000111111111101", 
    12 => "00111100110100100111101011000001", 
    13 => "10111100100000001100111011111101", 
    14 => "00111101011000011101110101101011", 
    15 => "00111011111010101110001001001100", 
    16 => "00111101101010101001110111011011", 
    17 => "00111101100111111000111010100110", 
    18 => "00111101010110100110100101101110", 
    19 => "00111110000010001000101000000101", 
    20 => "00111101101110111000101000001100", 
    21 => "00111001000101001011111100101110", 
    22 => "00111101011111011000001110111001", 
    23 => "00111100111011011101100001001011", 
    24 => "00111011110101010010010010100000", 
    25 => "00111101000000010110001000011011", 
    26 => "10111101010001001001011011101110", 
    27 => "00111110000011011101001100110101", 
    28 => "10111101010001000011010000100111", 
    29 => "10111101011010111011011000110001", 
    30 => "00111101010110110001001001110101", 
    31 => "10111101101101011000101000001011", 
    32 => "10111110000100110110111010110101", 
    33 => "10111101101111100100000000110101", 
    34 => "00111010011010101001000100000011", 
    35 => "00111110001111100100000100001011", 
    36 => "10111100100001001110010100001100", 
    37 => "00111101100111000010011111101001", 
    38 => "00111110000011110110000111101101", 
    39 => "10111100111001001011000110010000", 
    40 => "00111100100111000100101111000110", 
    41 => "10111101110010110100101010110111", 
    42 => "10111101101100100111010000001011", 
    43 => "00111101101011110111011000011101", 
    44 => "00111110000000011011111011110101", 
    45 => "10111101100000010010011111001110", 
    46 => "10111101101000000011000001100100", 
    47 => "00111101000010111001011010100010", 
    48 => "10111101000100010010010000110000", 
    49 => "00111101100001110101100010101100", 
    50 => "00111100011010100010100111010101", 
    51 => "10111100000011001101001000010110", 
    52 => "10111101010000100101111101110001", 
    53 => "00111100100010000000000001001010", 
    54 => "00111101101011111011101000111000", 
    55 => "10111101110111010010101001100011", 
    56 => "10111101111100001000000100111101", 
    57 => "00111100101000000100011000100110", 
    58 => "10111101001011001000101111111111", 
    59 => "10111100100111100010010100011010", 
    60 => "00111011110110011000111110010011", 
    61 => "10111101010000100010001101000000", 
    62 => "10111110010111100011101100000100", 
    63 => "00111110010000100001110001000111", 
    64 => "00111101111011001001111100110000", 
    65 => "10111100001110001011111111010000", 
    66 => "10111001110101011100110110111001", 
    67 => "10111011100000100010101001111101", 
    68 => "00111100101011010110101011010010", 
    69 => "00111010000101000000100000101101", 
    70 => "00111101100111101010101100011100", 
    71 => "10111101111010111101011101101111", 
    72 => "00111110000101001001001010111100", 
    73 => "00111110000101011010110101010100", 
    74 => "00111100011100100011000111100001", 
    75 => "10111110001010010110000001110100", 
    76 => "00111101011011000101111001001000", 
    77 => "00111101101011101001100001100100", 
    78 => "10111101101101001101110111101011", 
    79 => "10111101000000000111100011100111", 
    80 => "10111101110101000010111111101000", 
    81 => "10111110000000010101111100000011", 
    82 => "00111101111111000111100010100111", 
    83 => "00111101011111111110110001111111", 
    84 => "00111011110100100111110101111011", 
    85 => "10111110000001110111110110010101", 
    86 => "10111110001101010111011010001010", 
    87 => "00111100100000101001111111101101", 
    88 => "10111011111111010110110010010010", 
    89 => "00111101111110111001111000000110", 
    90 => "10111110000010011100011000101010", 
    91 => "10111101100110100100000110110000", 
    92 => "00111101011011111101111101010110", 
    93 => "00111101000001010001111000010111", 
    94 => "00111101001011000110010010101101", 
    95 => "00111011110101010111100101101111", 
    96 => "10111101010001101111010100110111", 
    97 => "00111101101111000111100111001110", 
    98 => "10111101111111101111000001101011", 
    99 => "10111101000111001100110111100111", 
    100 => "10111101101111101011010001010110", 
    101 => "10111101010011010010110100101010", 
    102 => "00111100111101000010100100110010", 
    103 => "00111100010101001010000011010111", 
    104 => "10111001100101110111101101100101", 
    105 => "10111100100011101000001100011011", 
    106 => "00111101100100101111010011000010", 
    107 => "10111101001100101000010110101001", 
    108 => "00111100111101101010111110111111", 
    109 => "00111101101000111100000001110001", 
    110 => "00111011001011110010001011101110", 
    111 => "10111100100010010001101101100111", 
    112 => "10111100000111110101000001101000", 
    113 => "00111100111001111100001101011110", 
    114 => "00111101110110010001001001010101", 
    115 => "10111101111110110101101011101010", 
    116 => "00111101100110110000111011110010", 
    117 => "00111110001011101100101101110101", 
    118 => "00111101011000000011001011110110", 
    119 => "00111100011100101111100100011100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_12 is
    component inference_conv2d_f3_0_2_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_12_rom_U :  component inference_conv2d_f3_0_2_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


