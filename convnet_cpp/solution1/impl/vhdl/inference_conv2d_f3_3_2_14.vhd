-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011011101001010111000101", 
    1 => "10111101100000111011000010001111", 
    2 => "00111100111011111001110000000101", 
    3 => "10111101101111110100000001000101", 
    4 => "10111110001101010100010111001000", 
    5 => "00111101101010000111100100100011", 
    6 => "00111101011100010101001010100011", 
    7 => "10111101101001000101000111111100", 
    8 => "10111100000010101001010110010000", 
    9 => "10111101010101010010011110010101", 
    10 => "00111101100001111101100100100000", 
    11 => "10111101101111011001100000000100", 
    12 => "10111101101001010111001010011011", 
    13 => "00111101011001111010110001100111", 
    14 => "10111100100100010001110001010010", 
    15 => "00111110000111110111000000010101", 
    16 => "10111011110111000000001010100000", 
    17 => "10111101001110100111110000011000", 
    18 => "10111100011110011101010011011000", 
    19 => "00111101101110011010010110011011", 
    20 => "10111101010100101011100111100001", 
    21 => "00111101100001011101000001110100", 
    22 => "00111110000000010111111001111000", 
    23 => "00111101100101011100100100011101", 
    24 => "10111110000001011001110111011100", 
    25 => "10111101011100001101001010110110", 
    26 => "10111101111011000100000001001010", 
    27 => "00111110000101010010001001100100", 
    28 => "10111101001000111111101100000010", 
    29 => "00111101100100000111110011100011", 
    30 => "10111101010110001010011110010111", 
    31 => "10111101100110011111001110010001", 
    32 => "10111100101010010011000100011100", 
    33 => "10111101100011111110010110101110", 
    34 => "00111100101101011001000100010001", 
    35 => "00111101010110110111111100110010", 
    36 => "00111101011011111110011101101001", 
    37 => "10111101110101111010101100110010", 
    38 => "00111100111000100111001101011101", 
    39 => "10111110000011101011111001011001", 
    40 => "10111101011010010000011110010110", 
    41 => "00111101100011100001101010111000", 
    42 => "00111110001010111000010001010101", 
    43 => "10111101100110011101001101100000", 
    44 => "10111101111000000111111111101101", 
    45 => "00111101001001001001110000010001", 
    46 => "10111101000010100011001011011001", 
    47 => "00111100111010011110111111110011", 
    48 => "00111101101011001100111001101101", 
    49 => "10111100111111110100010111000110", 
    50 => "00111101111101110001000000000010", 
    51 => "00111101010010111011001110010010", 
    52 => "00111110001000101110011110110100", 
    53 => "00111110000011101001000110000110", 
    54 => "10111101011010100011010010000111", 
    55 => "00111100000111110011100101000001", 
    56 => "00111101100100110011101010110011", 
    57 => "10111101010111001001001011011110", 
    58 => "10111101110100111000111001101101", 
    59 => "00111101101001111011010100001110", 
    60 => "10111101011010010100010000010111", 
    61 => "10111101111110000100101000001110", 
    62 => "10111100001110001000101101100010", 
    63 => "00111100110110011011110000110100", 
    64 => "10111101101111110110100011100110", 
    65 => "00111101100111110011011100011000", 
    66 => "00111101100111101111111001111000", 
    67 => "00111101010111110110000001101000", 
    68 => "00111100011101110100001110011001", 
    69 => "10111101010010110011101110000011", 
    70 => "00111101110110010011010001101010", 
    71 => "10111110000100011111100110101101", 
    72 => "00111101100101101101110010111011", 
    73 => "00111101001110100001000011010011", 
    74 => "10111101101001010101101001110000", 
    75 => "10111101100001001110010001011110", 
    76 => "10111100101100000010010111001101", 
    77 => "10111101100110111000100000110111", 
    78 => "00111110001010110000100010011010", 
    79 => "10111100101011000001111000000001", 
    80 => "00111101011011000001110111100110", 
    81 => "10111101000111011011000100111011", 
    82 => "10111110010100101010011011110100", 
    83 => "00111101011100000001010110100111", 
    84 => "10111101111011110011111101010011", 
    85 => "10111100110100011010101111111010", 
    86 => "10111100110010111011011011101101", 
    87 => "00111110001111101110111111100101", 
    88 => "00111101110001001010010100110001", 
    89 => "00111010110111101110001011111010", 
    90 => "10111101000100110010111111110011", 
    91 => "10111101010011000010100001000111", 
    92 => "00111110001000011100101001111101", 
    93 => "00111101101100011000101101101011", 
    94 => "10111110000010001111101001111011", 
    95 => "00111110001100001110101001011011", 
    96 => "00111100101000100100010000101101", 
    97 => "10111110000100001111111010001011", 
    98 => "10111101111100011110111110110111", 
    99 => "10111110001111100111100101101000", 
    100 => "10111110000000101001011111000000", 
    101 => "00111101100111011011001001110000", 
    102 => "00111110000000101001000100110010", 
    103 => "00111100010111100111001101010011", 
    104 => "00111100101111011011010100111000", 
    105 => "10111100110010100000011110001011", 
    106 => "00111101000010010011100000001000", 
    107 => "00111101110111001001001101100100", 
    108 => "10111101001001111000111100100110", 
    109 => "10111101111111110010010111100101", 
    110 => "00111100101110111010011010011111", 
    111 => "10111100100110001001100110001010", 
    112 => "00111100000000000111101011100101", 
    113 => "10111110000111111010110000011101", 
    114 => "10111100101111001001100101000011", 
    115 => "00111101100011100011111001101100", 
    116 => "10111101000011111011100011011011", 
    117 => "00111101000000010010011010001100", 
    118 => "10111101101101010010101010010010", 
    119 => "10111101110110111001100101001110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_14 is
    component inference_conv2d_f3_3_2_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_14_rom_U :  component inference_conv2d_f3_3_2_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


