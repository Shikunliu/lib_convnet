-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110101001101000000111", 
    1 => "00111101011010010000111011101101", 
    2 => "10111100011101010000100110010111", 
    3 => "00111101101111110001110101011010", 
    4 => "10111101101101000110000011010011", 
    5 => "10111101001010000111000110100100", 
    6 => "00111100101100000100111111110100", 
    7 => "10111101100100101101001010100000", 
    8 => "10111011010001110100001001001001", 
    9 => "10111101001110111110111101001010", 
    10 => "10111110000010011011110101000000", 
    11 => "10111110001110000110101001001101", 
    12 => "10111110000011111100001011101100", 
    13 => "10111010111001111010001100010010", 
    14 => "00111101001011111100101001111000", 
    15 => "00111110000010000011011000100010", 
    16 => "00111110000001010010110110101010", 
    17 => "10111101111010101010011011010010", 
    18 => "00111101111000100111001000000000", 
    19 => "00111101011011010100000100110001", 
    20 => "10111101001000010011110011111100", 
    21 => "00110111010000110100111000100101", 
    22 => "00111100011010000001110111110111", 
    23 => "00111101111001001000111010001010", 
    24 => "00111101100000010101101011011110", 
    25 => "00111101101100010011011010111111", 
    26 => "10111110000001111000001011010100", 
    27 => "10111110000111111010010101001100", 
    28 => "00111110000110100001011101101110", 
    29 => "10111101110111001111110111010010", 
    30 => "00111110000011000010001111111011", 
    31 => "00111100100110011101000110011000", 
    32 => "00111101011001100111100110110010", 
    33 => "00111100100110111010110010011001", 
    34 => "10111101101010011110101000010100", 
    35 => "10111101111111110000110000110101", 
    36 => "00111101100111100101101011111111", 
    37 => "10111100101011100000100100101000", 
    38 => "00111101111111000111010001110101", 
    39 => "10111101110101011100100111100110", 
    40 => "10111100111010001111001101110100", 
    41 => "00111101101101000011101011011101", 
    42 => "10111101010000011011010100001100", 
    43 => "10111110000101000010101011101101", 
    44 => "00111110000011000111101000111010", 
    45 => "00111101010111100000001111000001", 
    46 => "00111110000110000111111100000010", 
    47 => "00111101110001100000011011111011", 
    48 => "10111101111010101010001000011010", 
    49 => "00111101111111001000000010000100", 
    50 => "10111101010100101111011010011000", 
    51 => "00111101101101000101000000110100", 
    52 => "10111100110101101100001011110000", 
    53 => "00111101100100011000010110100111", 
    54 => "00111100100111011011011000101001", 
    55 => "00111100100010010111010011110100", 
    56 => "10111101011111110001011101101101", 
    57 => "00111101111001101110110010011110", 
    58 => "10111101101111001011001010110001", 
    59 => "00111101010001111110001110001111", 
    60 => "10111010011110001011100100101001", 
    61 => "10111101110010011100101111000110", 
    62 => "10111110000001100010001101001011", 
    63 => "00111101101101100011101001101010", 
    64 => "10111110000001001010010001001100", 
    65 => "00111100111110100101010010010000", 
    66 => "00111101110100101000101101101110", 
    67 => "00111110000011110001010100011110", 
    68 => "00111110000110100000010000001000", 
    69 => "10111100010001001010111010000110", 
    70 => "00111100111000001000111111111000", 
    71 => "10111110001100000100011110010001", 
    72 => "00111101000111010010110000010000", 
    73 => "10111101000000100011001001011010", 
    74 => "10111101101010000001011101000001", 
    75 => "10111101101001011001111100010001", 
    76 => "10111101011000000000000111111110", 
    77 => "00111110001001010011011111100011", 
    78 => "10111100001111000000101101001001", 
    79 => "10111101100001101110111001001100", 
    80 => "00111101110000110011100111000001", 
    81 => "10111101111000001001010101101100", 
    82 => "00111100000011110111010000111100", 
    83 => "00111101101000001001110101001001", 
    84 => "10111100010011011110101101000101", 
    85 => "00111101101100011100000111100100", 
    86 => "10111110001001011011101100111000", 
    87 => "00111101010101101011111110110000", 
    88 => "00111101100100100000010010110000", 
    89 => "00111100011001000111001001110000", 
    90 => "10111101010110101011011100000110", 
    91 => "10111101110010100011011001001111", 
    92 => "00111101100110000110011110000101", 
    93 => "10111101001011000001000000001110", 
    94 => "00111101100010110101011101110100", 
    95 => "10111110001000110011110110110000", 
    96 => "00111101001100011100011000010110", 
    97 => "00111101111011100010111100111000", 
    98 => "00111101100001110001111111111111", 
    99 => "00111101100010000100101000001110", 
    100 => "00111101100010000101011101000101", 
    101 => "00111101010110110111011111110110", 
    102 => "00111101001000101000100010001011", 
    103 => "00111101111010100010100011111110", 
    104 => "10111101101110001001101010100100", 
    105 => "00111101110111100010110001010110", 
    106 => "10111101000111101000000010111111", 
    107 => "10111101100001000001011100110110", 
    108 => "00111101010110001110001001001111", 
    109 => "00111101100010011011000011101110", 
    110 => "00111110000100110110001101101111", 
    111 => "00111101000001100000111001101101", 
    112 => "00111101101011011100010110000110", 
    113 => "00111101001110111100000000110101", 
    114 => "00111100110110001001010111111001", 
    115 => "00111101110100011001010001111101", 
    116 => "00111001100110000000000011001110", 
    117 => "10111101111000011001100001101100", 
    118 => "00111101010110011000100010111000", 
    119 => "00111101110010001000011111101100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_2 is
    component inference_conv2d_f3_0_0_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_2_rom_U :  component inference_conv2d_f3_0_0_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


