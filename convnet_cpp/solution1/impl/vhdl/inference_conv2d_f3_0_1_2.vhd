-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000011000011101111100011", 
    1 => "10111101100000110011001010111010", 
    2 => "10111101111101011001111101101111", 
    3 => "00111100111010011111110110010101", 
    4 => "00111110001111100100110111100100", 
    5 => "10111100001011001001001111011101", 
    6 => "00111011111111100110010110110111", 
    7 => "00111110000011010010000100110110", 
    8 => "00111101101000011011000001101111", 
    9 => "10111101101101101011010100011000", 
    10 => "10111100100010001010010111110111", 
    11 => "10111100110111101100100000001100", 
    12 => "10111101100100011111011000001111", 
    13 => "10111100111101010011110100101110", 
    14 => "00111110000111101111010110101001", 
    15 => "10111100000001011000001010000001", 
    16 => "00111101010111000000001001000100", 
    17 => "10111100001100110000101101011011", 
    18 => "10111101101101011101000111011111", 
    19 => "10111100000100001000011010010110", 
    20 => "00111101100011010101000010110110", 
    21 => "10111101101110111111110000111101", 
    22 => "00111101101100111111001001001110", 
    23 => "00111110001100111100101000110010", 
    24 => "00111100100000010110100010110110", 
    25 => "10111101001101000101001101110100", 
    26 => "00111101011000000100000100000011", 
    27 => "10111101100011001110010011000011", 
    28 => "00111101010001001001111100000001", 
    29 => "10111100010010101101100101000010", 
    30 => "10111110010001110101010000101010", 
    31 => "00111101111001001000010100011011", 
    32 => "00111101111010001000010010000100", 
    33 => "00111101100100010111100000000101", 
    34 => "10111101100101110010001001000001", 
    35 => "10111110001101000111110001110100", 
    36 => "00111101011100111011100101010000", 
    37 => "10111101100001101100110101111010", 
    38 => "10111011000110001000111110000011", 
    39 => "10111100011000001111101010000001", 
    40 => "00111101100111111000000101100010", 
    41 => "10111101010011111011111100001010", 
    42 => "10111101110011110111001000101110", 
    43 => "10111101100111001000100011110101", 
    44 => "10111101011001111110101101010001", 
    45 => "00111101100011001111101011110000", 
    46 => "10111101001010111101010100000110", 
    47 => "00111100100001010100001100000000", 
    48 => "10111101000110101110000110110011", 
    49 => "10111101100100010010010100101111", 
    50 => "00111100011010011011100000101010", 
    51 => "10111101100011000110101101001000", 
    52 => "10111101101101100001001110111000", 
    53 => "00111101110000010011011011011010", 
    54 => "10111101101111101000000110010110", 
    55 => "10111100101100001010101101100100", 
    56 => "00111101100110100100010111111100", 
    57 => "10111110000001010000010111010001", 
    58 => "10111100011100110111110011001111", 
    59 => "00111110000001011101010110110010", 
    60 => "10111101000010111001100010100000", 
    61 => "10111101110000000000110101011111", 
    62 => "10111101010110101101111000100010", 
    63 => "00111011010001001010110001101101", 
    64 => "00111101110100010011100000110111", 
    65 => "10111101101111100111111111000000", 
    66 => "10111101101000011100011010000001", 
    67 => "10111101001100110000101011101111", 
    68 => "10111101111001100011001100000101", 
    69 => "00111101100011101110001001111001", 
    70 => "00111101110000111101111000101100", 
    71 => "10111101101111111000001100000010", 
    72 => "00111101001101001000001000111000", 
    73 => "10111100010010011100000111101011", 
    74 => "00111101011101010101100110110100", 
    75 => "10111101000110011101011101000010", 
    76 => "00111100111000100100101001111000", 
    77 => "00111101101000011000010101111110", 
    78 => "00111011111100011110000100101110", 
    79 => "10111101011101001001001010010100", 
    80 => "00111101111111110000101100101000", 
    81 => "10111101101000011110100111100101", 
    82 => "00111110000000001010000000101100", 
    83 => "00111110010011100101110100011000", 
    84 => "00111011101010001110010000100101", 
    85 => "00111011110000011111100010011110", 
    86 => "10111100101101000001011000011101", 
    87 => "10111110000100101000010110101001", 
    88 => "10111101010001010101011101011000", 
    89 => "10111110000011100110001011011100", 
    90 => "10111110001101110010001101101000", 
    91 => "10111110001101010111000011000101", 
    92 => "00111101100110011001001101000010", 
    93 => "10111100110000011110000000111111", 
    94 => "10111100110110001100000011110111", 
    95 => "10111101111011110111110000100100", 
    96 => "10111101010111100010101011000011", 
    97 => "00111100111111110000000011000111", 
    98 => "10111000101111001111100100111001", 
    99 => "10111101111111011110100000101101", 
    100 => "10111101111010011001100111011101", 
    101 => "10111011010000101110010111000011", 
    102 => "00111100011011100001111100101101", 
    103 => "00111100111111101000001001010001", 
    104 => "00111101001101010101101011110110", 
    105 => "00111100111110011011100000011101", 
    106 => "00111101111000110100100001101111", 
    107 => "00111101111101100101111101010010", 
    108 => "00111100111101110000110101001000", 
    109 => "00111110010000001010100101011000", 
    110 => "10111011110110000101100101110011", 
    111 => "10111101100110101010000001010010", 
    112 => "10111101001011111101110010110111", 
    113 => "00111101101111001100110010010111", 
    114 => "10111101000010001010101011111111", 
    115 => "10111101010110011011111010000011", 
    116 => "00111100000000101011101011010000", 
    117 => "10111100100101010010101110101011", 
    118 => "00111101010110010101111000001010", 
    119 => "10111011011110111011010100011000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_2 is
    component inference_conv2d_f3_0_1_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_2_rom_U :  component inference_conv2d_f3_0_1_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


