-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010100100010001010010010", 
    1 => "00111110000000001111111000000100", 
    2 => "00111100101000111010001101110011", 
    3 => "10111011100010111000110000100101", 
    4 => "10111110001011110010000011101010", 
    5 => "00111100100100011100010111111011", 
    6 => "00111101111011011001100000111001", 
    7 => "00111101000001011110000111011100", 
    8 => "00111100111001011110111111101001", 
    9 => "10111101001110111100111010010011", 
    10 => "00111101111100011100110000010000", 
    11 => "00111101111111010011001011000110", 
    12 => "10111101000001101101110000001101", 
    13 => "00111101100000001101110001001110", 
    14 => "00111101101111111111001100001101", 
    15 => "00111101000011101010000110111001", 
    16 => "10111110001000000101011111010001", 
    17 => "10111101011000101100000010100101", 
    18 => "10111100100000011001110011101110", 
    19 => "00111011111010111101000000110011", 
    20 => "00111110011101111011010011100101", 
    21 => "10111101010110100110010011101011", 
    22 => "00111101010100100000010110100001", 
    23 => "00111101100101111000101001111011", 
    24 => "10111100000100111000111011101001", 
    25 => "00111100100101010101111000000000", 
    26 => "10111100100000101000100001110000", 
    27 => "10111100000011110011100010001101", 
    28 => "00111100110000000111110000100111", 
    29 => "10111110000010001111110010010011", 
    30 => "10111100000011010101001101000101", 
    31 => "00111110001101100110100101001001", 
    32 => "00111101000001010011000111001110", 
    33 => "00111101100111100000110110000010", 
    34 => "10111101100000010000010011110000", 
    35 => "00111101000010001000001011110001", 
    36 => "00111101001010100000001001001101", 
    37 => "10111101000100011000110000110100", 
    38 => "10111101101010100100011111000101", 
    39 => "10111101110000000111001101001010", 
    40 => "00111101101010111000111001011001", 
    41 => "10111101010110111111110010011011", 
    42 => "00111101101000011011111100111000", 
    43 => "10111101101001010101111000101001", 
    44 => "00111101100011001111101111010100", 
    45 => "10111101100101110110000010001010", 
    46 => "10111100011110100000001011111011", 
    47 => "10111101100111100001110101111111", 
    48 => "00111101011101001100111100010101", 
    49 => "10111101011111111010011100110000", 
    50 => "10111101101000100100100000110111", 
    51 => "00111101100000010110010010000100", 
    52 => "00111100100110001000001011100011", 
    53 => "00111101010001000011001110000110", 
    54 => "10111101111010101011011010001101", 
    55 => "10111100110000000001010011000011", 
    56 => "10111101010111101001110000111000", 
    57 => "10111110000000010000111110010101", 
    58 => "00111101101011001111011011011001", 
    59 => "10111101100111100001100100100101", 
    60 => "10111011011011001100001010001100", 
    61 => "00111101111001001110111110001001", 
    62 => "10111100111111100001011010000110", 
    63 => "10111101101111111101111101110001", 
    64 => "10111110000110001000001011110001", 
    65 => "10111100110111111000000001100011", 
    66 => "00111100010111100100101010100100", 
    67 => "10111101101000111011001000100001", 
    68 => "00111110001100011110000100001001", 
    69 => "10111011111100100001010010000101", 
    70 => "10111110000001001001110110111111", 
    71 => "00111110000111010001101001100101", 
    72 => "00111101011110000111111000010001", 
    73 => "10111101001110110011000100101110", 
    74 => "00111101011110000110011001000011", 
    75 => "00111100011101101110100111010111", 
    76 => "10111110000111100100100011101001", 
    77 => "00111101111001110111000111001001", 
    78 => "10111101010000010110011101011001", 
    79 => "10111100001110011000110011101010", 
    80 => "00111101101111000001011010000001", 
    81 => "00111101001000110000111011000011", 
    82 => "10111110010000000100111101101110", 
    83 => "00111101000101000010101010001111", 
    84 => "10111101100001101101100111001100", 
    85 => "10111110001110011110110100111001", 
    86 => "10111110010110001001000000001100", 
    87 => "00111101001000111011101100100110", 
    88 => "10111101101001100101001011011000", 
    89 => "10111100001000101100011010101001", 
    90 => "10111101010100111001100000101110", 
    91 => "10111101111100110111011101011100", 
    92 => "10111110000001111101110010111110", 
    93 => "00111101000111100101101101010000", 
    94 => "00111101110001101111001011011011", 
    95 => "10111110001101001010000010100001", 
    96 => "00111101010010001011000101111111", 
    97 => "10111101110000100011100110100100", 
    98 => "00111110000100100101001100010001", 
    99 => "00111101110000101101010000110011", 
    100 => "00111110000000010001110101111010", 
    101 => "10111100101000101111010110011001", 
    102 => "00111101111101011111011110000011", 
    103 => "00111100111000111000001100100111", 
    104 => "10111110000011000001100001110010", 
    105 => "10111101010110100101010110011100", 
    106 => "10111101000000010101101010101001", 
    107 => "10111100111011011110001100110010", 
    108 => "10111011101010110100011001010101", 
    109 => "10111101011011110001011010111111", 
    110 => "10111101111011111100001101110010", 
    111 => "00111101011000101101010011000111", 
    112 => "10111110100000100011010000100010", 
    113 => "00111100110001111001000001001101", 
    114 => "00111101101001111101100010110100", 
    115 => "00111101101010000110001110111111", 
    116 => "10111101011011110101000111111101", 
    117 => "00111100111110001001001100100100", 
    118 => "00111101001101001000011111100010", 
    119 => "10111101110001100100011101001111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_0 is
    component inference_conv2d_f3_4_4_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_0_rom_U :  component inference_conv2d_f3_4_4_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


