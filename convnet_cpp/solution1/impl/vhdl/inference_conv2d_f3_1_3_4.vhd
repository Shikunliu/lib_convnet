-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111111101101100000011000", 
    1 => "10111101011011001100001111100011", 
    2 => "10111110000110011010111001001111", 
    3 => "10111101111001100000111111100100", 
    4 => "00111101111011110000111100010111", 
    5 => "00111100001111101000010111100010", 
    6 => "00111110001010101001001010100011", 
    7 => "10111101010000011101010001001011", 
    8 => "10111100000100000000101111110001", 
    9 => "10111110001111101011101101110111", 
    10 => "00111110001110000111010011001001", 
    11 => "00111101110010100000000011001000", 
    12 => "00111101011011001000000100110011", 
    13 => "00111101110100001000100110100000", 
    14 => "10111101010111101101110001111111", 
    15 => "10111101100110100011011001001111", 
    16 => "10111100001010001100011110011111", 
    17 => "10111101101110101001011100011000", 
    18 => "00111101111001000111001000111011", 
    19 => "10111101010101011100110101110111", 
    20 => "10111101100110100000011000100001", 
    21 => "00111100000010100011000111010010", 
    22 => "00111110000100111100110010001110", 
    23 => "00111101111110110010110101001101", 
    24 => "10111101100010101101000111011110", 
    25 => "10111101100001110100101000011001", 
    26 => "00111100100000001010100010011100", 
    27 => "00111100111010010001110010001111", 
    28 => "10111101111010010000010001110001", 
    29 => "00111100010000111001110111100101", 
    30 => "10111100101011110010000001111111", 
    31 => "00111101100011101000001110101110", 
    32 => "00111101010100110010010010100000", 
    33 => "00111101110011101101111001010101", 
    34 => "10111101011100110100001110001111", 
    35 => "10111101110100000110111011100011", 
    36 => "00111100100110011001000101101100", 
    37 => "10111101100000000110001011101111", 
    38 => "10111110001010100101111011111111", 
    39 => "00111101110111110100111111010111", 
    40 => "00111100010001000101000111010100", 
    41 => "10111101001101111001001111010000", 
    42 => "10111101100100000100000100101011", 
    43 => "00111101001011000111011000010101", 
    44 => "10111010011010100110101101111111", 
    45 => "00111101101100111001000001010000", 
    46 => "10111101111110100000010110011010", 
    47 => "10111101011100000110110110100001", 
    48 => "00111101101011111010110011100110", 
    49 => "10111101100011111100101101110111", 
    50 => "10111011010011001110001000011011", 
    51 => "00111100101111100101101000001110", 
    52 => "10111101110111111010110100101010", 
    53 => "00111101100100110010011111111011", 
    54 => "10111101110001000100110011100110", 
    55 => "10111101100010011101000101001000", 
    56 => "00111100110001111110001101011001", 
    57 => "10111101001010101010001101110111", 
    58 => "10111101010011100111011001101011", 
    59 => "10111101001110100110001111011111", 
    60 => "00111101101010101001010001101011", 
    61 => "10111101000111011111100001101110", 
    62 => "10111110000101111011010101101100", 
    63 => "00111100011010110111011001110001", 
    64 => "10111101000111110110001110001101", 
    65 => "00111100100111010111111111011000", 
    66 => "10111100110001110101011110101101", 
    67 => "00111100010100100111100000000111", 
    68 => "10111101100000001001001111001100", 
    69 => "00111101011111011010100000011100", 
    70 => "10111101111001000011101100101110", 
    71 => "10111101010110000001011110000100", 
    72 => "10111101110101000100100100010011", 
    73 => "00111101010101111100110100010001", 
    74 => "00111101001001110010101100011101", 
    75 => "10111101011010111111100110111001", 
    76 => "00111101110110011101011101110111", 
    77 => "00111100011101000010111100010001", 
    78 => "00111100100010101000001101111100", 
    79 => "00111101000110110001011001010111", 
    80 => "00111101110110000100100100000010", 
    81 => "10111100001110111000010100010001", 
    82 => "00111101011111010110001111110100", 
    83 => "00111100101100110011000011100101", 
    84 => "10111101101011111011000010111010", 
    85 => "10111100101000110110011101000011", 
    86 => "00111110000001011100110100001100", 
    87 => "00111101000010101011110010000111", 
    88 => "00111110000110110000010000100101", 
    89 => "00111110001100010101001010110001", 
    90 => "10111101101101110010110101000011", 
    91 => "10111100100100101001100100101010", 
    92 => "10111110001010001001100101111100", 
    93 => "00111110000111100101000011000110", 
    94 => "00111101111000101001100011001100", 
    95 => "10111101111110101110110001001010", 
    96 => "10111101000100100111100010101001", 
    97 => "10111101101110101010111101111001", 
    98 => "10111101101101001111000101010001", 
    99 => "00111110000100100101011100000000", 
    100 => "10111101100111011000010011101110", 
    101 => "00111101110000100111101111110110", 
    102 => "00111110000101100100110010110110", 
    103 => "00111100111110110010011110111111", 
    104 => "00111110001110000011100000111011", 
    105 => "00111101100101100110100100100000", 
    106 => "10111100011111010110000001111110", 
    107 => "00111101111110010001110001001100", 
    108 => "00111101110001011001111111001101", 
    109 => "10111101111101000100101100101011", 
    110 => "00111100110000100000110000010100", 
    111 => "00111101010110001111101101011111", 
    112 => "00111100100000110000101010101100", 
    113 => "00111100110101110011001010110111", 
    114 => "10111110010001011101100101011110", 
    115 => "00111010100101100001101010001001", 
    116 => "00111101010010010001011000001110", 
    117 => "00111011110111010110010000110100", 
    118 => "00111101101101111011011011100011", 
    119 => "00111101101111101100011011001010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_4 is
    component inference_conv2d_f3_1_3_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_4_rom_U :  component inference_conv2d_f3_1_3_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


