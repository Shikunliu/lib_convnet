-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100000000100000101101110", 
    1 => "00111101110100000110100100011111", 
    2 => "10111101100110000111000111001100", 
    3 => "00111100100110110110110000110111", 
    4 => "00111100100001000111010101000101", 
    5 => "00111110000000110000000010011011", 
    6 => "10111100101101111010010000010001", 
    7 => "00111100111000011011101100111100", 
    8 => "00111101101110111010100110011100", 
    9 => "10111101011000011011010101000010", 
    10 => "00111100111100101101011010000010", 
    11 => "10111110000011011001010101010111", 
    12 => "10111101101101011110011010100010", 
    13 => "00111100011001100111011100101101", 
    14 => "00111101000100101111111001011010", 
    15 => "10111011001101010101100110010100", 
    16 => "00111101001000111001100000100000", 
    17 => "10111001110111010000101111001110", 
    18 => "00111100010010100001110101011011", 
    19 => "10111101110000011101000001011101", 
    20 => "00111101101001011001011001000010", 
    21 => "00111101010111110101111100001011", 
    22 => "00111101111110110110001111010100", 
    23 => "10111100001101011011110011100110", 
    24 => "10111100110100001001011001010000", 
    25 => "10111101110110000110111000111011", 
    26 => "00111110000000000110110110010100", 
    27 => "10111110000011110111110010101010", 
    28 => "00111101100110101001101100000111", 
    29 => "00111101101100101001111110001111", 
    30 => "10111101110001110100110011111011", 
    31 => "00111101010110000111000111100111", 
    32 => "00111101001110110001011110110011", 
    33 => "10111011111101000110111011101000", 
    34 => "00111101111101100101011011101111", 
    35 => "00111101101101100111001111010010", 
    36 => "00111101010100100000001000010000", 
    37 => "10111101100010001100000010011001", 
    38 => "00111101111010001101100101110011", 
    39 => "10111101010110110001110010111100", 
    40 => "10111101010011111011000100110011", 
    41 => "10111110000011110110001010110111", 
    42 => "10111110001011001000010100111100", 
    43 => "00111101110001010100011010111001", 
    44 => "10111101100010111100010110011100", 
    45 => "00111101111100101001111101011010", 
    46 => "10111101111110100100100100111101", 
    47 => "00111101110011110000100011001100", 
    48 => "00111100100101000110101000011010", 
    49 => "10111100100111111010100101001000", 
    50 => "00111100111101100010001100000111", 
    51 => "10111110000100000110010001100111", 
    52 => "10111110000100110110101010000011", 
    53 => "10111110000011010110111001001000", 
    54 => "10111110010100100001101011111000", 
    55 => "00111100001110001111000011100010", 
    56 => "10111101000101100011101111000110", 
    57 => "10111101101110001110000001111001", 
    58 => "00111100110000011101001110101010", 
    59 => "10111101000001010100011000001011", 
    60 => "00111101011011000101111000010010", 
    61 => "00111011111100010100011010010100", 
    62 => "10111101011001010100000110100011", 
    63 => "10111101111101111010000010110110", 
    64 => "10111101010000100000011110010010", 
    65 => "10111100101011001100111110100010", 
    66 => "00111101001010101110010110000111", 
    67 => "00111101000100011011010001011101", 
    68 => "00111101100011100101010101001000", 
    69 => "10111101000100100011111000001011", 
    70 => "10111101100011110101101101101101", 
    71 => "10111100101010100111101101101001", 
    72 => "00111101101011101110101101001000", 
    73 => "00111100101010111110111110101000", 
    74 => "00111101110100110101001010101000", 
    75 => "00111110001011000101100011101111", 
    76 => "00111101110101111011100101011010", 
    77 => "10111101001001001111011110011100", 
    78 => "10111101011101010011011100110100", 
    79 => "10111101001110001110100001111111", 
    80 => "10111100111001001010011010101000", 
    81 => "10111101000011010111110000000100", 
    82 => "00111100101101010100101001100101", 
    83 => "00111100110011111110101010001110", 
    84 => "10111100110011101010010110110101", 
    85 => "00111101010010100111100111010111", 
    86 => "10111101110110001110011111011110", 
    87 => "10111110000000011000110101101001", 
    88 => "10111101101000011011011001101001", 
    89 => "00111101011101000001101001101001", 
    90 => "10111110001000000000100100101101", 
    91 => "10111101101000101100101010101000", 
    92 => "00111110000000101110011001100100", 
    93 => "00111101011101110101010111011000", 
    94 => "10111100101100101001010010101000", 
    95 => "00111101100010100000110111001000", 
    96 => "00111101110011110100110011110101", 
    97 => "10111100111010000010110100010000", 
    98 => "00111101000111101000110001001000", 
    99 => "10111010101101110101101111110111", 
    100 => "00111101110011100101010101111110", 
    101 => "10111101100010000011001001110110", 
    102 => "00111011000010011110100001110111", 
    103 => "00111010001010010101000101001000", 
    104 => "10111100000111010011000010011101", 
    105 => "00111101000100100100101001101011", 
    106 => "00111101000010111101100111011000", 
    107 => "00111101101010111101110010010010", 
    108 => "10111101101011100011101110110010", 
    109 => "10111011111110110000011011110010", 
    110 => "00111101100000001010101000111100", 
    111 => "00111110000101000100011010110111", 
    112 => "10111101010000001100001010011110", 
    113 => "10111101000110111000110010111001", 
    114 => "00111100111001101010111000011111", 
    115 => "10111011001000101001011101101111", 
    116 => "00111100001110111010110001111110", 
    117 => "00111101101101110000110000100001", 
    118 => "10111101100000001000011010100011", 
    119 => "00111101110000111111111011001000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_7 is
    component inference_conv2d_f3_4_2_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_7_rom_U :  component inference_conv2d_f3_4_2_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


