-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_110_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_110_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111101001011100010111111", 
    1 => "00111101011101010001001000010110", 
    2 => "10111101001001010000100001001000", 
    3 => "10111100110010101111000111001100", 
    4 => "00111110001111010101100011001001", 
    5 => "00111110001100101100011000100110", 
    6 => "00111101001101100000011101011001", 
    7 => "00111101000000110001100100001010", 
    8 => "10111101101001011100111001110110", 
    9 => "00111100111010110011101011100001", 
    10 => "00111101101111101001011110011011", 
    11 => "10111101101100110010110000101101", 
    12 => "10111101001100011010001010100101", 
    13 => "00111101001101010110111110000011", 
    14 => "10111101100011111101110101001011", 
    15 => "00111100111001101010010100011011", 
    16 => "10111110000010011001000010110000", 
    17 => "10111101101100010101001100110111", 
    18 => "00111101100011011010001001110011", 
    19 => "10111101111010001101100001100110", 
    20 => "00111101010100110000111100111100", 
    21 => "10111101110110010110110100001001", 
    22 => "10111110001000110011001001101010", 
    23 => "00111110001100001010101001100101", 
    24 => "10111100100010111010101011000100", 
    25 => "10111100100010010001111111001111", 
    26 => "00111101011110011111110100110111", 
    27 => "00111110000010110110001100001011", 
    28 => "00111101101110110010100001010010", 
    29 => "10111110001101100111001100111111", 
    30 => "10111100011100011110100001111011", 
    31 => "00111101100111110101011110110100", 
    32 => "00111101101110001111111111010100", 
    33 => "00111110001001101111100101110110", 
    34 => "10111100100100110110010100111000", 
    35 => "10111101011111000010101011110100", 
    36 => "10111101011000101100101000010101", 
    37 => "00111101100011010101011111100101", 
    38 => "00111101101111100101101001101100", 
    39 => "00111101001000010111011011011110", 
    40 => "00111100101010111011011111011111", 
    41 => "00111101111010001110111101111000", 
    42 => "00111101010110001001111001011100", 
    43 => "00111101100000110010100011101101", 
    44 => "00111101110011000101010010010101", 
    45 => "00111101100001001001011001101000", 
    46 => "00111101101100011010100010111010", 
    47 => "10111100000111011110110011010000", 
    48 => "10111011100110100001010011010100", 
    49 => "00111101001110000000011110010011", 
    50 => "00111110010000101000110100000000", 
    51 => "10111101101001001110110011101010", 
    52 => "10111110000110011100111100010100", 
    53 => "10111110001011001001000100001000", 
    54 => "00111100111111000100110010000010", 
    55 => "00111110000011100011100000100010", 
    56 => "10111101110101101101011101100010", 
    57 => "00111100101000011011001000000001", 
    58 => "10111110000010100101101000000100", 
    59 => "10111100100010011001100010011011", 
    60 => "00111101100011000110111110010101", 
    61 => "10111101010000101110011000010100", 
    62 => "10111110001111111101100000100111", 
    63 => "00111100100110010100010110000001", 
    64 => "10111110001001100110100100000101", 
    65 => "00111101111010110000100001010111", 
    66 => "10111101010001100100001101111011", 
    67 => "10111101010011101101110101100011", 
    68 => "10111110001110001011101110010000", 
    69 => "10111100001111111110001000000011", 
    70 => "10111110000001001010101011011010", 
    71 => "10111110010000011010010001111011", 
    72 => "10111101100101110001011010010000", 
    73 => "10111101011101111011110111110111", 
    74 => "10111100101110010111011111110001", 
    75 => "10111110001010100110010111001111", 
    76 => "10111101100100001100100010011000", 
    77 => "10111110001011010100000010101011", 
    78 => "00111101100010110101100001011001", 
    79 => "00111101100001110110011101101000", 
    80 => "00111100001010100001111111111010", 
    81 => "10111101010110111100101101010010", 
    82 => "00111100001100100000001111110100", 
    83 => "00111101111101010110100011101000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_110 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_110 is
    component inference_mult_1_120_120_84_s_W4_110_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_110_rom_U :  component inference_mult_1_120_120_84_s_W4_110_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


