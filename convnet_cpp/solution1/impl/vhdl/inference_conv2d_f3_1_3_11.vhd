-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001011101110000100110111", 
    1 => "00111101110110001011110011100000", 
    2 => "00111110000111100011010110000011", 
    3 => "00111101110001011011011011011110", 
    4 => "00111011100011100111110001011010", 
    5 => "00111101100000011000001111101100", 
    6 => "00111101010001000011001100110110", 
    7 => "10111101110000000100110000000110", 
    8 => "10111101101110111100000011010110", 
    9 => "00111110000100101000011010110110", 
    10 => "00111101011001000111011010111101", 
    11 => "10111101101011000010100001100010", 
    12 => "10111110001000000111011100000011", 
    13 => "10111110010100111110111101101011", 
    14 => "10111101000110000110100001011100", 
    15 => "00111101101000111111001011000110", 
    16 => "10111110000001010000101001000110", 
    17 => "10111011001010001101000001101110", 
    18 => "10111011111010100011011111101101", 
    19 => "00111110011101100101101000010100", 
    20 => "00111110001011110111000100100010", 
    21 => "10111101100010001100010100001110", 
    22 => "00111101101111100101110011111101", 
    23 => "00111110000111100111111110110010", 
    24 => "00111101111101000010001101010011", 
    25 => "10111110001100110000111011000011", 
    26 => "00111110000100000101000000110111", 
    27 => "00111101110101010101001001011101", 
    28 => "00111101100110001100101110101001", 
    29 => "10111101001101010111100000011100", 
    30 => "10111110001010010101001000001001", 
    31 => "00111011111111000010101011001001", 
    32 => "10111110000100110100110110101101", 
    33 => "00111101101110010001000011111000", 
    34 => "00111101100101111111010111101000", 
    35 => "10111100101110101100110000011001", 
    36 => "10111101101101111001111100100011", 
    37 => "00111101010100101100101010101000", 
    38 => "00111101101010110111111101110101", 
    39 => "00111101100101000010101111010001", 
    40 => "00111101100111101110111011011001", 
    41 => "10111110001010110111010101100100", 
    42 => "10111100010111011101011110110111", 
    43 => "00111101100111000000000100101011", 
    44 => "10111101011000111010111101100111", 
    45 => "10111101101110011011101100001101", 
    46 => "00111101100100001000000001100110", 
    47 => "10111100000110101011100110001010", 
    48 => "10111101001000111100001011101000", 
    49 => "00111101001100010010111110111000", 
    50 => "00111110000100011000010110001100", 
    51 => "10111100111110110100100001000000", 
    52 => "00111100010001100111111110101100", 
    53 => "00111101111011110001100010000111", 
    54 => "00111101110000101111100111001010", 
    55 => "10111101011101011101010000010010", 
    56 => "10111101101100000101010110101011", 
    57 => "00111010001010110011101011101000", 
    58 => "10111101110101110011101001111001", 
    59 => "00111101000100111100110100100010", 
    60 => "00111100111011000000111000010000", 
    61 => "00111110000100110010110111110101", 
    62 => "10111101100001011111100010111000", 
    63 => "10111101100110110001000010101101", 
    64 => "10111101101001010000001000001011", 
    65 => "00111110000011100010011100011000", 
    66 => "00111101011110111011100101111111", 
    67 => "10111101100000111101110000010011", 
    68 => "10111101010101001000100010011110", 
    69 => "00111110000011110110001000110000", 
    70 => "00111110000110010111001101010100", 
    71 => "00111101000101100000010101110110", 
    72 => "10111100011111010011001001011011", 
    73 => "10111011101010111010111000101111", 
    74 => "10111011110001010110110100000111", 
    75 => "10111100001010110001111010010010", 
    76 => "00111110000111110110110010101101", 
    77 => "00111110010001001011010101010111", 
    78 => "00111011000111111101101001111011", 
    79 => "10111101111010010001011001000100", 
    80 => "10111100101001101011111110111101", 
    81 => "00111101110001101100111100001100", 
    82 => "00111110001011110100000100101001", 
    83 => "00111101110111011000101011011011", 
    84 => "10111110000111011111111111000101", 
    85 => "00111101001101101100000100001101", 
    86 => "10111110010110011101100100001010", 
    87 => "00111110001001111110010000010101", 
    88 => "10111101100101111110100010111111", 
    89 => "10111101010101011001110000010100", 
    90 => "00111100100101101110111010001111", 
    91 => "00111100100110110001111100001011", 
    92 => "00111100011001011001110000111100", 
    93 => "10111101100101000011110111110101", 
    94 => "10111110001111001101110111010111", 
    95 => "00111100111001101101101100110110", 
    96 => "10111110000011110000001100001000", 
    97 => "00111110000110010011011111010010", 
    98 => "00111101110111011110001001101001", 
    99 => "10111101101011011010010100000100", 
    100 => "00111010100101111110111111110110", 
    101 => "00111110000000000100011111010100", 
    102 => "10111100100100100000110001110010", 
    103 => "00111100100000100010000011010111", 
    104 => "00111101001100011011010010010011", 
    105 => "10111100111001101011111000010000", 
    106 => "10111101101111010101001001110001", 
    107 => "00111101100000110011110011110100", 
    108 => "10111101010000111101110110100101", 
    109 => "00111101001000111110100011000011", 
    110 => "00111100111111011100110001111111", 
    111 => "00111110000010010111101010101011", 
    112 => "10111101111011000101111100111001", 
    113 => "00111101101001011001011111101111", 
    114 => "00111101011010000111100001110101", 
    115 => "10111101100111100001000111000001", 
    116 => "00111011110101010011110101110100", 
    117 => "00111110001110111111011000011011", 
    118 => "00111101110110101110001101100001", 
    119 => "10111101110010010101000010011110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_11 is
    component inference_conv2d_f3_1_3_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_11_rom_U :  component inference_conv2d_f3_1_3_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


