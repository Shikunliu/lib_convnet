-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000000111111011000111100", 
    1 => "00111110000001111000101011110100", 
    2 => "00111101010011001100000011110011", 
    3 => "10111101111111111000111011000001", 
    4 => "00111101110110010100100111101001", 
    5 => "00111110000001010010101001000001", 
    6 => "00111110001011101101100111100000", 
    7 => "00111100011100101011111011001111", 
    8 => "00111101111010101111111001100001", 
    9 => "00111100110111011100010000110110", 
    10 => "00111100110000111011010100101100", 
    11 => "10111101111110111101100000111000", 
    12 => "00111101111110111100111111010101", 
    13 => "10111100101001101011101001001001", 
    14 => "00111101100000110111101111011110", 
    15 => "00111101001111000001111011100101", 
    16 => "10111101111101110011000100001010", 
    17 => "10111101001110011111000111100100", 
    18 => "00111101001110100100111010010110", 
    19 => "10111101111001001010000111110001", 
    20 => "10111101110100110110011110100001", 
    21 => "00111100111010100111000111000100", 
    22 => "00111100111001000010010000110111", 
    23 => "00111110000001111101101101101110", 
    24 => "00111011101101010100000000101001", 
    25 => "00111101100000100111100110110101", 
    26 => "00111101010110011111111001000011", 
    27 => "00111110000000000111111000010111", 
    28 => "10111101010101011001100111000101", 
    29 => "10111101101001010100101000111100", 
    30 => "10111101001011010001101011101011", 
    31 => "10111101000000011001001101111110", 
    32 => "00111110001011000110001001011111", 
    33 => "00111101101110010011110101111100", 
    34 => "00111110001111001011101011111001", 
    35 => "00111101000000101000011010001101", 
    36 => "00111101110001100111101111001010", 
    37 => "10111110010001011010001010010100", 
    38 => "10111101101111000110100011010001", 
    39 => "10111100011001100001001000011000", 
    40 => "10111101100011111101101100111111", 
    41 => "10111101110100111000100110110101", 
    42 => "00111100101010011110011010111001", 
    43 => "00111101011000101000100100101100", 
    44 => "00111101101001100100010110010100", 
    45 => "10111100011101000001101000011001", 
    46 => "10111101101010001110010001101000", 
    47 => "10111101111100000001001110101001", 
    48 => "00111101100110000111101011011110", 
    49 => "10111100000100101111010000011001", 
    50 => "10111101011101000001000110011010", 
    51 => "00111101000001111100100011101100", 
    52 => "10111101110100011101010110000000", 
    53 => "00111110000000110011111010111100", 
    54 => "10111011010100111101001010100101", 
    55 => "00111100100010010011000001100000", 
    56 => "00111101111110110100100010010001", 
    57 => "00111110000000001000111101100101", 
    58 => "10111101000111111010110010111110", 
    59 => "10111110001110010101100000010000", 
    60 => "10111100001101010000100011110110", 
    61 => "10111101110100101111110000100110", 
    62 => "10111011101000001101111010000111", 
    63 => "00111110000000100001110111011010", 
    64 => "00111101010110101010101101100010", 
    65 => "10111110000101111000111101101001", 
    66 => "10111100010010110110110110111101", 
    67 => "10111100100100010010001011010011", 
    68 => "00111110001110111001101010011110", 
    69 => "10111101100000010101111001000111", 
    70 => "10111110011010111000110000110011", 
    71 => "00111101101011010101110001110100", 
    72 => "00111101000011000111000101011101", 
    73 => "00111101111011100010000110010110", 
    74 => "10111101100110111101100100000010", 
    75 => "00111101010100101001100001010011", 
    76 => "00111101011110001001110010101111", 
    77 => "00111100111000111000000001101101", 
    78 => "10111100000111101000100111111001", 
    79 => "00111101001111100100011111101010", 
    80 => "10111101100100100110101101100101", 
    81 => "10111101111010100100001100110101", 
    82 => "10111101000111001010010111110011", 
    83 => "00111101010110001110101010110011", 
    84 => "00111100101010000100011101111101", 
    85 => "00111101000111100001101100111110", 
    86 => "10111101100101011111001101111010", 
    87 => "00111101101110101100101110010011", 
    88 => "10111100011001001101001011101000", 
    89 => "00111101011101101100001100001011", 
    90 => "10111101001111010011101100101010", 
    91 => "00111101101111100110110000111111", 
    92 => "10111101010011101000100111101100", 
    93 => "00111100110111101101000000000101", 
    94 => "00111100111101010011000001100011", 
    95 => "00111101100100110000010011011010", 
    96 => "10111011011011111010100001000100", 
    97 => "00111101101000000100010010111100", 
    98 => "10111101110010100000111110000011", 
    99 => "00111100010011100000110110101010", 
    100 => "00111010111011010111110110011100", 
    101 => "00111110001100000000100111110110", 
    102 => "10111110001010101010110110100011", 
    103 => "10111110011001000111001011000001", 
    104 => "10111011101001000101100100100110", 
    105 => "00111101001011100101001010001110", 
    106 => "10111101111111110011100111010010", 
    107 => "10111100110001011010111111011000", 
    108 => "10111110000100010101010101010000", 
    109 => "00111011110100110001110001000111", 
    110 => "10111110000010110101000000101011", 
    111 => "10111101111001111001001101010111", 
    112 => "00111110000110001100010010111101", 
    113 => "00111101100001000010000011000001", 
    114 => "10111100110101110011110011001000", 
    115 => "00111110000011011101010010000100", 
    116 => "10111110000100101001111010010000", 
    117 => "00111101100100101001101000000001", 
    118 => "10111101110100011111011000000001", 
    119 => "00111101101110110100101101001011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_10 is
    component inference_conv2d_f3_0_4_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_10_rom_U :  component inference_conv2d_f3_0_4_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


