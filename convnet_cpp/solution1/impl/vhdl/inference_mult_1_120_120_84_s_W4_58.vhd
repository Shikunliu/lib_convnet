-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_58_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_58_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011101100000101101111010011", 
    1 => "00111101110001111111011110010110", 
    2 => "10111110000110000111010011001001", 
    3 => "10111101000111010110001111011001", 
    4 => "10111101011100001000010011001101", 
    5 => "10111101110100100101100010010010", 
    6 => "00111110000000111000011101011001", 
    7 => "00111101110000101101010100110010", 
    8 => "10111101110110110010111011100000", 
    9 => "10111101110010101010010000100110", 
    10 => "00111110010000110101110101101000", 
    11 => "10111110000011010000111101100010", 
    12 => "00111100100001010011000011110111", 
    13 => "10111101100000011110101111100011", 
    14 => "10111101010010011001011001001100", 
    15 => "00111101100010110010111001110101", 
    16 => "10111101101111010101101010101100", 
    17 => "10111100010001100011110111010010", 
    18 => "00111100110000010101010111010110", 
    19 => "10111100001000010111011100011110", 
    20 => "00111101110101000000110001000001", 
    21 => "00111101011011111001000001000110", 
    22 => "00111101101011001010010010111111", 
    23 => "10111101011100100110110100000101", 
    24 => "10111101110000110101011011001101", 
    25 => "10111110001011001101011000111101", 
    26 => "10111101101010111001101100100100", 
    27 => "00111011000111101000110101110100", 
    28 => "00111100100110001100101010011100", 
    29 => "00111101010000011010000100000101", 
    30 => "10111110000101111000000010111011", 
    31 => "00111100110011111101001000111011", 
    32 => "10111101101111001001010011001110", 
    33 => "00111101110101010001001111111001", 
    34 => "10111100000111010001101101111010", 
    35 => "10111101010101101010001010111111", 
    36 => "10111100101101001100000111011110", 
    37 => "10111101111010101101010101111100", 
    38 => "10111101000101101111011111100100", 
    39 => "10111101100011100001011010010100", 
    40 => "00111100000100100111010110011001", 
    41 => "00111100110010000001110100000101", 
    42 => "10111101010000011010000100100000", 
    43 => "10111101101010010001100101110111", 
    44 => "10111100001000111110010011100010", 
    45 => "10111101011011010011100100111001", 
    46 => "10111100000110000011110100111001", 
    47 => "00111011110101011100111111010110", 
    48 => "10111101100011111010111011100101", 
    49 => "00111101000000000101011010011101", 
    50 => "10111110001000101101110011110100", 
    51 => "00111101010110011111011110001101", 
    52 => "00111101110000110000001000111011", 
    53 => "10111101101010001001000010010011", 
    54 => "10111101010101101010111111110101", 
    55 => "10111110001110101011001100100101", 
    56 => "10111100100001100011101111101111", 
    57 => "10111101001010111011101111110110", 
    58 => "00111110010010010100100011011100", 
    59 => "00111110000011010111110010110011", 
    60 => "10111100100100011011111011011010", 
    61 => "10111101001001111001000101011001", 
    62 => "10111101001011000100111100101110", 
    63 => "00111101111010101101011000000010", 
    64 => "00111110000001101011011110101010", 
    65 => "10111100110110111110001111110111", 
    66 => "00111101000101001010100010110100", 
    67 => "10111110000000101001010001010111", 
    68 => "00111101100001000000110001001111", 
    69 => "00111101000011001101111000011010", 
    70 => "10111110000001010011000000000110", 
    71 => "10111101101100011100000011100101", 
    72 => "00111100100010100111010001100011", 
    73 => "10111101100011000011011011011011", 
    74 => "00111101100011110010000101100011", 
    75 => "10111100110101111110000011000111", 
    76 => "10111100101001110110000100111000", 
    77 => "10111101110111010011011011111000", 
    78 => "00111110000111111010001001101010", 
    79 => "00111101001011000110100011000100", 
    80 => "10111110000100110011101010001010", 
    81 => "10111110001100010010010101010111", 
    82 => "10111101010111001000111100110010", 
    83 => "00111100111010010010001010100100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_58 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_58 is
    component inference_mult_1_120_120_84_s_W4_58_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_58_rom_U :  component inference_mult_1_120_120_84_s_W4_58_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


