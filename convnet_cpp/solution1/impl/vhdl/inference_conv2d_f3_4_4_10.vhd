-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011010100100111001111011", 
    1 => "10111110010111101111010011100000", 
    2 => "10111101111001000100111110100000", 
    3 => "00111101100111101111101100111000", 
    4 => "10111101100000010000000001100000", 
    5 => "00111101010111100010110001110001", 
    6 => "00111100000010101110110010111000", 
    7 => "00111110000010100001110110111000", 
    8 => "00111101001100010110111010100010", 
    9 => "10111110001011001010100101101001", 
    10 => "00111011111111111101001111001011", 
    11 => "10111101010100111110000110010100", 
    12 => "00111100000100011000001000001001", 
    13 => "00111100100100100110100000010111", 
    14 => "00111011110000110010010111101111", 
    15 => "10111110000000011001010111001101", 
    16 => "00111110010010100111011111100110", 
    17 => "10111110011011101110101011101010", 
    18 => "00111100100010100011010101111001", 
    19 => "10111101011011001111111010000001", 
    20 => "00111100101001101101100110111110", 
    21 => "00111110001010001001011000010100", 
    22 => "00111100110101100010110111010100", 
    23 => "10111110001101110111001001010000", 
    24 => "00111100110011111000110111011101", 
    25 => "10111100101100101100110101111101", 
    26 => "10111110000001011001111001100010", 
    27 => "00111101100110110110100101100011", 
    28 => "00111110000100011011011011010100", 
    29 => "10111100000011010000010111001101", 
    30 => "00111101001001110010001101000000", 
    31 => "00111100001010010001011011100101", 
    32 => "00111101000101101000101011010111", 
    33 => "00111101111110001101111101111010", 
    34 => "00111101011010111000000111011111", 
    35 => "00111101110011100111101000110001", 
    36 => "00111101100111000100001101000111", 
    37 => "00111101111010100100110110110001", 
    38 => "10111110000001011000001011011100", 
    39 => "10111101110101100000111010010101", 
    40 => "00111101010100001010000100011101", 
    41 => "00111101000000011010100011000111", 
    42 => "00111100111001110010100101101111", 
    43 => "00111101100110101100100000111000", 
    44 => "00111110001010001111110110100000", 
    45 => "10111101101110001001100001001000", 
    46 => "10111110000011000111100100101101", 
    47 => "00111100010100110101100110101111", 
    48 => "00111100000001011011001001010001", 
    49 => "10111110000010100100100110000000", 
    50 => "00111101101100000011100011001000", 
    51 => "00111100101100000001111110000010", 
    52 => "10111101100101101111101001001101", 
    53 => "00111101111101111111001010000000", 
    54 => "00111101000010101011010110000000", 
    55 => "00111101010111011100000011110110", 
    56 => "10111110010101101101110001011101", 
    57 => "00111101010001010001010000000110", 
    58 => "10111101111100011111011000000001", 
    59 => "00111100110011011101000101000100", 
    60 => "10111100100001011001010010010100", 
    61 => "10111110000011000011000000001010", 
    62 => "10111101010011001011001111011000", 
    63 => "00111101010011100001111011000010", 
    64 => "00111100010100100000100000001011", 
    65 => "10111011101000111000000010100011", 
    66 => "00111101110000110110111110100111", 
    67 => "00111100101111010111011000011000", 
    68 => "10111101001100000011001111011010", 
    69 => "00111101110001110100111011101100", 
    70 => "10111100101010011110110001100011", 
    71 => "00111101001110010101100101101101", 
    72 => "00111110011001001110000101100001", 
    73 => "00111101001101011111111000000100", 
    74 => "00111100111010001101111000010000", 
    75 => "00111110000000001111010101011110", 
    76 => "10111100000111000001110101100010", 
    77 => "10111100111001011010011111111011", 
    78 => "10111101110111100111110110011010", 
    79 => "10111010101111110111001010011100", 
    80 => "10111101110101001001011010101011", 
    81 => "00111101100101001010111110100000", 
    82 => "00111110000100101010111111011110", 
    83 => "00111101100001010110110110100000", 
    84 => "10111100111101010110000001101010", 
    85 => "10111101111101001101100010111010", 
    86 => "10111100101011100011111000000001", 
    87 => "00111110001001101000100111001010", 
    88 => "10111101101110100001111110101001", 
    89 => "00111101110110011010110110000110", 
    90 => "00111101110100011111011100001110", 
    91 => "10111101000100110110000100000110", 
    92 => "00111100111100011101110010111100", 
    93 => "00111101110011100000011101011111", 
    94 => "00111110010000001110000101110010", 
    95 => "00111100111010010010001001101110", 
    96 => "00111110001010010110101001101010", 
    97 => "00111101011000110000010010010111", 
    98 => "00111101111011111001100001110100", 
    99 => "00111100100001000110000010000010", 
    100 => "10111101001000010110111100000000", 
    101 => "00111101000101001011011100010001", 
    102 => "00111100100110010110100110010011", 
    103 => "10111100111001010101010011101110", 
    104 => "00111101010111000110101111110111", 
    105 => "10111110001111101010100010010111", 
    106 => "00111100011001011000111110100111", 
    107 => "00111011100000110101100100010000", 
    108 => "00111101010001000010010010001000", 
    109 => "10111101110001010011000000111011", 
    110 => "10111110000000110011011001011001", 
    111 => "00111100110000100101111010110101", 
    112 => "10111110010001011101101100110100", 
    113 => "10111101100011100010110101010101", 
    114 => "10111101011101001100010001111101", 
    115 => "00111101011000100111111111010111", 
    116 => "10111101100011100111000110001011", 
    117 => "00111101001011111100100110111100", 
    118 => "10111101101110101100011111110101", 
    119 => "00111110000000011111011111010111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_10 is
    component inference_conv2d_f3_4_4_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_10_rom_U :  component inference_conv2d_f3_4_4_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


