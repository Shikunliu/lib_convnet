-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111001111010010100101011", 
    1 => "10111110001010001001111011111110", 
    2 => "00111011101111000100011100011001", 
    3 => "00111110000110110001100100011110", 
    4 => "00111101101001111100110001111101", 
    5 => "00111101111100110000101001001110", 
    6 => "10111100001110011011101101111000", 
    7 => "00111110001000010011000011100000", 
    8 => "10111101101011111011011111011100", 
    9 => "00111101110111001110100111100110", 
    10 => "10111110000000010011010100010001", 
    11 => "00111110010111010101110110000001", 
    12 => "10111101110100101100101111101010", 
    13 => "00111101001011110011001100001110", 
    14 => "00111101000110110101101110100110", 
    15 => "10111101100110100111010001001000", 
    16 => "10111101100001001110011111000110", 
    17 => "00111100111000101010010111101000", 
    18 => "10111101101000101101100001110010", 
    19 => "10111011100011111000110011111011", 
    20 => "10111110000010111101110101110110", 
    21 => "00111110001000110101111110000001", 
    22 => "00111100101110111010101001100110", 
    23 => "00111101101100000101010101011011", 
    24 => "00111101101000100001100010011100", 
    25 => "10111110001001010101010111000101", 
    26 => "10111101101011001111001101001000", 
    27 => "00111110000100101100111100010000", 
    28 => "00111101100011001100000011011001", 
    29 => "00111101101101100000100101100100", 
    30 => "00111110000000100110010000011011", 
    31 => "10111110010000100001010101110111", 
    32 => "10111101000110000100111101100111", 
    33 => "10111101111110011001111101011110", 
    34 => "10111101000111011011011001000100", 
    35 => "10111101100000110010111011100111", 
    36 => "00111110001111100011011111011111", 
    37 => "00111100000001110101100111011100", 
    38 => "10111110010101001000111010001010", 
    39 => "10111101111111010001011110000011", 
    40 => "00111101010100111111001111101110", 
    41 => "00111101110100101001101010100010", 
    42 => "10111110001000111101101101111111", 
    43 => "00111101000010100111111001110100", 
    44 => "10111101010001100000101011000001", 
    45 => "10111110001111100000001000100001", 
    46 => "10111101000101110010100100101100", 
    47 => "10111100100110011001011001110100", 
    48 => "10111100011011001010000100010011", 
    49 => "10111101100100011011101111000010", 
    50 => "00111100110000101000110101111001", 
    51 => "10111101111101000110000110110111", 
    52 => "10111100111000101001100011100111", 
    53 => "10111101110000100110101011101100", 
    54 => "10111110001110000011111011001001", 
    55 => "00111110010101011000110001001100", 
    56 => "00111101101000111000010110101100", 
    57 => "00111100101011001101010111101100", 
    58 => "10111101011100010110110011110101", 
    59 => "10111101101011111101101001110110", 
    60 => "00111101010100010001100000111011", 
    61 => "00111100111011100110011110111101", 
    62 => "10111101001000110101111001110100", 
    63 => "10111101110100001001010100101001", 
    64 => "00111101110100010101011010011111", 
    65 => "00111101001101011001111100011110", 
    66 => "10111101101001100010100101101101", 
    67 => "10111101011110110100110001110010", 
    68 => "00111110001110101001111010110010", 
    69 => "10111110000111011000011010101001", 
    70 => "10111010100001100010001001000011", 
    71 => "10111101111101000010110101001001", 
    72 => "00111110000100000100101011111001", 
    73 => "00111100010110110100000010011000", 
    74 => "10111101100011101110100011000100", 
    75 => "00111011001010011111011000001000", 
    76 => "10111101100011001011111011011011", 
    77 => "00111110000010110110110010111110", 
    78 => "00111010111111010100101010011001", 
    79 => "00111110000000101000010001011010", 
    80 => "00111100000111010110111100110001", 
    81 => "00111101010001100011000001001011", 
    82 => "00111110011111100000110011100001", 
    83 => "00111110000011101001101110111111", 
    84 => "00111100000011010010100101111110", 
    85 => "10111011000101101001111010010010", 
    86 => "10111101110000010110100110001101", 
    87 => "10111110010111011101101001001001", 
    88 => "10111100011110011011110101011011", 
    89 => "10111110010110000001110101111110", 
    90 => "00111110001111111100111100111110", 
    91 => "00111110001000101000100110011000", 
    92 => "00111101100110111110111001110011", 
    93 => "10111101010001110010001011101111", 
    94 => "00111101000101001011101110101111", 
    95 => "00111101001110110100000001111110", 
    96 => "10111100101001001100100101000011", 
    97 => "10111110001001001110101111011101", 
    98 => "00111011000101101100110001100000", 
    99 => "10111110000111001111111010011011", 
    100 => "00111101101010010100111100001100", 
    101 => "10111101000000011011111011100111", 
    102 => "00111110001110010000000011000101", 
    103 => "00111101000001101010001110001000", 
    104 => "10111100011000001011100010100111", 
    105 => "10111101110101100101011101110101", 
    106 => "00111100001101000000110110111001", 
    107 => "00111101111101001001100101001010", 
    108 => "10111101011011001011001001100000", 
    109 => "10111101100110100111110110011101", 
    110 => "10111101111100111010010011111000", 
    111 => "10111101100100010101111000111001", 
    112 => "00111101010100010010001011010011", 
    113 => "00111100010101000010001010010111", 
    114 => "10111110001100011010101110001111", 
    115 => "10111101100111010000110001001011", 
    116 => "10111101101110010111000101010110", 
    117 => "10111110000110000101110101110100", 
    118 => "00111101000101000111100000100111", 
    119 => "10111110000011110100101111101000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_11 is
    component inference_conv2d_f3_0_0_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_11_rom_U :  component inference_conv2d_f3_0_0_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


