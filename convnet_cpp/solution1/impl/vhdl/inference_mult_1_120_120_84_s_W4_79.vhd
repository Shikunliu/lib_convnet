-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_79_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_79_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110101111010000100111100", 
    1 => "00111101000100110011000000101001", 
    2 => "00111101011001001000110011111000", 
    3 => "00111101110110101110111011101001", 
    4 => "00111101111011110000111000001011", 
    5 => "10111100100101011001110010110101", 
    6 => "10111100110100101011010010100011", 
    7 => "10111110000101100111000001011101", 
    8 => "10111110000111010011100000000100", 
    9 => "10111100000110010101010111010010", 
    10 => "10111101100101011010000110010101", 
    11 => "00111110001101111010011100000001", 
    12 => "00111110001110011111100110001011", 
    13 => "00111100111000010010101101011110", 
    14 => "00111101100111010110111101100010", 
    15 => "10111100001111010011001101100111", 
    16 => "00111100010100000110110000101001", 
    17 => "00111100101110100100011010111000", 
    18 => "10111101110000101001111001001101", 
    19 => "10111101000101101111001101000111", 
    20 => "10111001110000011111110110000000", 
    21 => "10111100110000111000010010111010", 
    22 => "00111101110111011011110000100011", 
    23 => "00111110001100001011111011010111", 
    24 => "10111110000100001001110100000110", 
    25 => "10111101110010001111011011011100", 
    26 => "00111100110111110001111110000000", 
    27 => "00111101111011010100000100110001", 
    28 => "10111101100110111001101011000110", 
    29 => "00111110000000110110000011010000", 
    30 => "10111101011110101100110110101100", 
    31 => "10111101111010101101011010001000", 
    32 => "00111110001010111111111000111011", 
    33 => "00111101010100110111110100000101", 
    34 => "10111100101100100011011000010011", 
    35 => "10111101000101101010010101000011", 
    36 => "00111100101100000011000011101011", 
    37 => "10111110000000010011101010010011", 
    38 => "00111011100011110100110111111100", 
    39 => "10111110010000011111111000100010", 
    40 => "10111110000111111101000011010000", 
    41 => "00111101101000101000011011010000", 
    42 => "00111101101001111100010011100011", 
    43 => "10111101101111111011001101001100", 
    44 => "10111100101100110011011110011011", 
    45 => "10111110000111001111011110001000", 
    46 => "00111101001100100001111010110001", 
    47 => "10111110001000001011000110111100", 
    48 => "00111101000111001101010011101101", 
    49 => "00111101000011101011100100000000", 
    50 => "00111011111010100000001011111110", 
    51 => "10111110011011111010111111001001", 
    52 => "00111101110101100110100011000010", 
    53 => "10111101111110111111000111101001", 
    54 => "10111101110011010101110001110100", 
    55 => "10111101101101100101111100011101", 
    56 => "00111101111011000111010111000101", 
    57 => "00111101101010100000001100110001", 
    58 => "00111101100111100101110001011100", 
    59 => "00111101101001000101010000111101", 
    60 => "10111110000000110100111101000000", 
    61 => "00111110000101001100110101110101", 
    62 => "10111110001000000100111111110100", 
    63 => "10111101101100000111010110011001", 
    64 => "00111110000110000000100110010001", 
    65 => "10111110100001110000110011011101", 
    66 => "00111101101010100101010110101001", 
    67 => "00111110001001001010101001010100", 
    68 => "00111101111110001111011100010010", 
    69 => "00111110011001001000111001000111", 
    70 => "10111101010010011111111101111000", 
    71 => "10111101010010100010010100000010", 
    72 => "00111101001010101000110010011100", 
    73 => "00111110001000110011110100101001", 
    74 => "00111100001011111001110101111100", 
    75 => "00111101111100111110101100111010", 
    76 => "00111110000011001101100111101000", 
    77 => "10111101010101101000100001101101", 
    78 => "00111101101000001010011101011010", 
    79 => "10111110011010110110000001101011", 
    80 => "10111110010000010100000010011010", 
    81 => "00111101110011010110110010110101", 
    82 => "10111101110101110111010100110010", 
    83 => "00111101110000110111011001110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_79 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_79 is
    component inference_mult_1_120_120_84_s_W4_79_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_79_rom_U :  component inference_mult_1_120_120_84_s_W4_79_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


