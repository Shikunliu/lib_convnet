-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_24_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_24_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110111101000101111000001", 
    1 => "00111101011010011110111011001100", 
    2 => "00111110000011010100110110000011", 
    3 => "10111101010011011100010101010000", 
    4 => "00111010101000101010011100001001", 
    5 => "00111101110010000111000001010100", 
    6 => "10111110001010001110101001111101", 
    7 => "10111101110111010111110100111001", 
    8 => "10111101101111111011001101011001", 
    9 => "00111101011001011100011100111010", 
    10 => "10111101100010110111100011011010", 
    11 => "00111110001011111110100000100101", 
    12 => "10111101101100011011111010010111", 
    13 => "10111101001010100001011000111001", 
    14 => "00111101111000011001011001010011", 
    15 => "00111101100101101100101110110001", 
    16 => "10111110000100111111111100100110", 
    17 => "10111101111110011001001011001001", 
    18 => "00111110000110101110101111000100", 
    19 => "10111110001110001111110001010000", 
    20 => "00111100111010011100000100101111", 
    21 => "00111101101101010000100001110000", 
    22 => "00111101110110011100110001110101", 
    23 => "00111101110001111101101010011000", 
    24 => "10111010001011100111111010001100", 
    25 => "00111101000011101110111010010101", 
    26 => "10111110010000011011010001111000", 
    27 => "10111110000101110101111001100011", 
    28 => "00111101101111011101101111001110", 
    29 => "10111101101111010010111100000000", 
    30 => "00111011010101000000010011001111", 
    31 => "10111100101000010001010001001101", 
    32 => "00111100011011100001101101100111", 
    33 => "10111101011111000110100100000111", 
    34 => "00111100101111111101001000010011", 
    35 => "00111101001100010100001001001000", 
    36 => "00111101101001000000100111001011", 
    37 => "10111101101111110010010100101010", 
    38 => "00111110000010000101000001011001", 
    39 => "10111101111111010001101110110101", 
    40 => "10111101010010100110110011110001", 
    41 => "00111100101111100110001000111011", 
    42 => "10111101001011011001101100101001", 
    43 => "00111101111100010010111011000111", 
    44 => "00111011101100110110111001010111", 
    45 => "00111110000000011111110010001111", 
    46 => "10111101100011110111000000100011", 
    47 => "00111110000011110101010010001111", 
    48 => "10111110000101101111010101000101", 
    49 => "00111101001001110101100111111100", 
    50 => "10111101111010001010000111100000", 
    51 => "00111110000000010101111111001100", 
    52 => "00111101101000011000000100110010", 
    53 => "10111100101001101001011100001110", 
    54 => "10111101100011001011101000010101", 
    55 => "10111101001000001000000010101001", 
    56 => "00111101000001100100110010110110", 
    57 => "00111011001001100100000011000111", 
    58 => "00111101000001100010110011010101", 
    59 => "00111100101110100110111100110010", 
    60 => "10111101100110001011110001011010", 
    61 => "00111101101011010101111111000010", 
    62 => "00111101101001011000101000001011", 
    63 => "10111101101101100001101001111100", 
    64 => "10111110010011001101100101100010", 
    65 => "00111101110111110110110000100111", 
    66 => "10111110010101001101001101111100", 
    67 => "10111100011100111001111011001001", 
    68 => "00111011101111111100001101001111", 
    69 => "00111110000110110110011101111111", 
    70 => "00111101101110110010111011000101", 
    71 => "10111101110010111010101010001110", 
    72 => "00111101111011101110001100001101", 
    73 => "00111101011010001000111110100001", 
    74 => "10111101011001011011100010100111", 
    75 => "10111100100000101101011110000001", 
    76 => "10111101000111111001110000010010", 
    77 => "00111011100110110000110000001010", 
    78 => "00111100000010011100110011010011", 
    79 => "00111100111101110001010111100001", 
    80 => "10111101100000000100011101001110", 
    81 => "10111101100011110111100000110110", 
    82 => "00111110001000101100010111100011", 
    83 => "10111101010000000000110000101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_24 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_24 is
    component inference_mult_1_120_120_84_s_W4_24_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_24_rom_U :  component inference_mult_1_120_120_84_s_W4_24_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


