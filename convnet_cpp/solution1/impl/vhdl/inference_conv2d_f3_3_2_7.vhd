-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001001111000000111000111", 
    1 => "10111101101001111100110100011110", 
    2 => "00111101110001101110010001111110", 
    3 => "10111101100000010100110010001110", 
    4 => "10111101010101001001011111010010", 
    5 => "00111101011001010011111100111010", 
    6 => "10111101101011011100110001001001", 
    7 => "00111011100000000111010101110001", 
    8 => "10111101100111001001010100101100", 
    9 => "00111100101100101000110100011011", 
    10 => "00111101101100001111111010011000", 
    11 => "10111101010011101011000110001111", 
    12 => "10111101100011101101011010000101", 
    13 => "00111101101010100100010001011100", 
    14 => "10111100101011111010001000011010", 
    15 => "00111100110101010111110100001010", 
    16 => "00111100110111100101110000001100", 
    17 => "00111101110100100100101111111101", 
    18 => "10111100100101001011110101011100", 
    19 => "10111101101101110010011111111000", 
    20 => "10111101010000100000111000101101", 
    21 => "00111101000101100111010001001011", 
    22 => "00111101110001010110011100010010", 
    23 => "10111101110010100011111100101100", 
    24 => "10111101100110110111000001110111", 
    25 => "00111101101011101111100001100011", 
    26 => "00111101010100000111000010010001", 
    27 => "10111101000001010100000011001100", 
    28 => "10111101111100101000100011001110", 
    29 => "10111101001001110111001110010010", 
    30 => "10111101010011001111111100000111", 
    31 => "00111110001001000101111010010010", 
    32 => "00111101101010000010111111110010", 
    33 => "00111010101100010001000010101111", 
    34 => "10111110000000110100101100001110", 
    35 => "10111100011100110000101111111100", 
    36 => "10111110000110100001001111000010", 
    37 => "00111101100001011001110101110001", 
    38 => "10111100001000011110110011011010", 
    39 => "00111101110000011101110001101100", 
    40 => "10111011010101011110011100101000", 
    41 => "10111101010111000000110010001011", 
    42 => "10111110000100011001010101000110", 
    43 => "00111100101011110010111000100001", 
    44 => "00111100111000000011010100101010", 
    45 => "00111101010001001010001111010100", 
    46 => "00111100101101101100110110111101", 
    47 => "10111101101001100101010110000101", 
    48 => "10111100011111000000100000100100", 
    49 => "10111101110000010101000110110010", 
    50 => "00111110000001111111000010101010", 
    51 => "00111110000110101101100011100100", 
    52 => "00111101011000111000110011101000", 
    53 => "00111110000000101100111111011001", 
    54 => "00111101010001111110111111101110", 
    55 => "10111101100100000111011011001110", 
    56 => "10111100110010000011111001011101", 
    57 => "00111101101010100000011101111110", 
    58 => "00111100000010011001100011111011", 
    59 => "10111110000011000000101100010011", 
    60 => "00111101010110011000000011110101", 
    61 => "00111101001101000100110000011101", 
    62 => "10111101101100110101011010111111", 
    63 => "10111100111000000011111100111011", 
    64 => "00111101110111111010000110100001", 
    65 => "00111101110000001111010000001110", 
    66 => "00111101111101001101001101111100", 
    67 => "10111110000010010100100011011100", 
    68 => "10111101010101111010000100111100", 
    69 => "00111011111100011000001011111010", 
    70 => "10111110001001111110111000001011", 
    71 => "00111010111111001100110001101111", 
    72 => "10111101000010010101101010111101", 
    73 => "10111101111110100001010011001111", 
    74 => "10111100001101011110011110101110", 
    75 => "10111101100010111011100010000000", 
    76 => "10111101100110001001011000000110", 
    77 => "00111110001001110001111010110000", 
    78 => "10111101111000110100110110101101", 
    79 => "10111101000010010011011011000110", 
    80 => "00111101011110001110001100001011", 
    81 => "00111101100101011100001000111111", 
    82 => "00111101001010011110010000011010", 
    83 => "10111101100001010110101111011000", 
    84 => "00111101100011001110100111100110", 
    85 => "00111100111000011101001110001111", 
    86 => "00111100100000101110010110001110", 
    87 => "00111101000000011000000101011010", 
    88 => "00111101011000100011111011010100", 
    89 => "10111101011101001110011011000111", 
    90 => "10111101101100001001100100110010", 
    91 => "00111101110001000010001100000010", 
    92 => "10111101111110111111101001001100", 
    93 => "10111101100100110101111110000001", 
    94 => "10111101001101000010111000100000", 
    95 => "00111101000101001110000100000011", 
    96 => "10111101110001111010001011000001", 
    97 => "10111110001110001010010011000010", 
    98 => "00111101111010000010001001111001", 
    99 => "00111110001000011100000001000100", 
    100 => "00111101001001000001101001000001", 
    101 => "00111101101100110110000000111101", 
    102 => "00111110000111101011101110111010", 
    103 => "00111101001101110011101011001010", 
    104 => "10111010011001100110011001110011", 
    105 => "10111100110101001100001101110001", 
    106 => "10111100111100000010010011110110", 
    107 => "10111101100101001000010011100101", 
    108 => "00111101110001010100001010100010", 
    109 => "00111101011110011101101010011101", 
    110 => "00111101001100100100000100010101", 
    111 => "00111100111011000000000101111011", 
    112 => "00111101001111010101011011110011", 
    113 => "00111101100000101111011100101011", 
    114 => "00111101101010001111011000101110", 
    115 => "10111101001100100100010110110011", 
    116 => "10111100111110001100100011010100", 
    117 => "10111101001111100101110101001110", 
    118 => "00111101001011011110100010100110", 
    119 => "10111110000000010100000101100011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_7 is
    component inference_conv2d_f3_3_2_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_7_rom_U :  component inference_conv2d_f3_3_2_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


