-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100000001001100110111001", 
    1 => "10111101010100001011010001101000", 
    2 => "00111110000110000100110001101010", 
    3 => "00111101011100100110100010000011", 
    4 => "10111101010011001100110110100100", 
    5 => "00111100000001111000101101001111", 
    6 => "10111110001000101111010101010110", 
    7 => "10111101110011011011010000000011", 
    8 => "10111101111100010101010110010011", 
    9 => "10111101111100110010000011011010", 
    10 => "00111110001011000110011100010111", 
    11 => "00111101101111101010101011100110", 
    12 => "10111101100000111011111111010000", 
    13 => "00111101110101001110000010011000", 
    14 => "00111101010111001011110001001001", 
    15 => "00111110001001111101110001111011", 
    16 => "00111101100111110011100101100110", 
    17 => "00111101101010010010100011111100", 
    18 => "10111011001000110010010101011111", 
    19 => "10111100011110110010101010101110", 
    20 => "00111100110011000100001110100101", 
    21 => "00111101110010011110110011011011", 
    22 => "00111100100101110010000001111000", 
    23 => "00111110000010011111001010111011", 
    24 => "10111101100100000101000101010001", 
    25 => "10111101001111110000011110110010", 
    26 => "00111110000000010111110010100010", 
    27 => "00111101110101001111011110101001", 
    28 => "00111100010001111001000001001101", 
    29 => "10111100111010001101110101101111", 
    30 => "00111100011000100001010001011101", 
    31 => "10111101001000001111010011011000", 
    32 => "00111101111100000011101110000010", 
    33 => "10111101101001010100011011000111", 
    34 => "00111101110011001010110111010001", 
    35 => "10111101111000010011001100111100", 
    36 => "10111110000100110110010111001011", 
    37 => "10111101011100100100100000110111", 
    38 => "00111100010000100100011011001100", 
    39 => "10111100011011000101110010110101", 
    40 => "00111110001011110001100011001010", 
    41 => "00111110001110110100101110110110", 
    42 => "10111100111011100110001111110110", 
    43 => "10111110010000110011001100110011", 
    44 => "00111101101010111111000110001011", 
    45 => "10111110000011000001001001101010", 
    46 => "00111100110010100110000110000011", 
    47 => "00111110001001010001101101010000", 
    48 => "10111101000000101101001010010011", 
    49 => "00111101110100001011100011010000", 
    50 => "00111101011100110101101001010000", 
    51 => "00111110000110011001100000000111", 
    52 => "00111101001110111101001110000000", 
    53 => "10111101101110011101010000001111", 
    54 => "00111101111001000111101010011110", 
    55 => "10111110000001100111110111111110", 
    56 => "00111101101001101110110110010000", 
    57 => "10111101000110011000100011010011", 
    58 => "00111101001011100110011000001111", 
    59 => "00111101101000010001110100001110", 
    60 => "00111101001111111100111011010010", 
    61 => "00111101010100000111011100010001", 
    62 => "10111101111011111010110101101101", 
    63 => "00111101001111101101100110001111", 
    64 => "10111110000101011111001100001110", 
    65 => "10111100111001110000110110001011", 
    66 => "10111110010011001101000110000101", 
    67 => "10111101011001001100011100101010", 
    68 => "00111101111001111010010000011110", 
    69 => "10111101100000010111000011001001", 
    70 => "00111101011000111100011011001001", 
    71 => "10111100101001110101000111101001", 
    72 => "00111101010110111111011101011101", 
    73 => "10111110000011101001100110100110", 
    74 => "10111100101110010011010110101100", 
    75 => "10111100010001111100111110100010", 
    76 => "10111110001100100110110011000010", 
    77 => "00111110010100100001111010100011", 
    78 => "10111100111001001000000110001010", 
    79 => "10111100110010010110110100110001", 
    80 => "10111011110000110100111011110101", 
    81 => "10111110000111101011111111101100", 
    82 => "00111011001111110011011010110111", 
    83 => "00111101101111100001000000010011", 
    84 => "10111100101111011011100000100111", 
    85 => "00111011100001010111100001111010", 
    86 => "00111101101101100111110010101111", 
    87 => "00111101101000110111011001101010", 
    88 => "00111101101100011000101010000111", 
    89 => "00111101110101100001101110110000", 
    90 => "10111101001011000011101011110001", 
    91 => "10111101010010011100000001011000", 
    92 => "00111100001011010011111010010010", 
    93 => "00111101110101100111000110101100", 
    94 => "00111110001011010011101010100011", 
    95 => "00111101101001101011101111000001", 
    96 => "10111101010010111011001100001100", 
    97 => "00111101100100000011000000100001", 
    98 => "00111110000000011011001111110010", 
    99 => "00111110001101101111011101011110", 
    100 => "00111101100101010010000111101011", 
    101 => "00111110001011111010011101100101", 
    102 => "10111100000111000000010000100010", 
    103 => "00111011110100000111001111110110", 
    104 => "10111100010111000100010010100100", 
    105 => "10111110001001011111011110000011", 
    106 => "00111100100111100011110010010111", 
    107 => "10111101110110111101000001011011", 
    108 => "00111110001011101110011001110101", 
    109 => "10111101101011100000011110010101", 
    110 => "00111110010001100010001101001011", 
    111 => "00111100110110111101101010111100", 
    112 => "00111101010111100001001101100001", 
    113 => "00111100010111000001010001101000", 
    114 => "10111101011100000000010110000001", 
    115 => "00111101111101010001100110111101", 
    116 => "10111101101101001011011101101111", 
    117 => "00111100100110100010110111011110", 
    118 => "00111101100100110110000100111100", 
    119 => "00111110000001101100110111110010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_3 is
    component inference_conv2d_f3_3_0_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_3_rom_U :  component inference_conv2d_f3_3_0_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


