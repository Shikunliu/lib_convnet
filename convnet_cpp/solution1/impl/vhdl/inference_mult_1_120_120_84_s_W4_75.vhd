-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_75_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_75_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111101101110001010110101", 
    1 => "00111101011110101011011110001100", 
    2 => "00111101011000010010110011010110", 
    3 => "10111101100001110110101000100010", 
    4 => "10111100100000011111110001011010", 
    5 => "00111011000011100101110100100101", 
    6 => "00111100111000110010011110000010", 
    7 => "00111100000011101011011111101001", 
    8 => "10111001100101111100110100000000", 
    9 => "10111101111000101010011001101110", 
    10 => "10111101101100101011100100100101", 
    11 => "10111101111011100110000100000111", 
    12 => "00111110001110100110110111110000", 
    13 => "10111101101000011011010001000011", 
    14 => "10111101100110101010000010111101", 
    15 => "10111100011000000000101000101100", 
    16 => "00111101110011101101001101010010", 
    17 => "10111110000011111101101001000000", 
    18 => "00111110000010100010110100110000", 
    19 => "10111101100101001100001000000111", 
    20 => "00111101001011000111100010110100", 
    21 => "10111101101001000010100111000110", 
    22 => "10111101000100001000001000101110", 
    23 => "10111110000000001011101001100010", 
    24 => "10111101101001111011001001000110", 
    25 => "10111100111111111000111100101100", 
    26 => "10111110010110111001111010001100", 
    27 => "00111101011110011111110100011100", 
    28 => "10111100000110000001101111000000", 
    29 => "00111101101011110101110111111111", 
    30 => "00111100011110100111000101001011", 
    31 => "10111100001110001010110101011011", 
    32 => "10111101100000100010111011111111", 
    33 => "00111101010001000010001001010100", 
    34 => "10111110001001101100010010000010", 
    35 => "00111101010001110001011010101010", 
    36 => "00111110010100111101111001100001", 
    37 => "10111100110101011101000010110111", 
    38 => "10111101111110011001101010100110", 
    39 => "00111110000000001111001010111111", 
    40 => "00111011100101000111001101010101", 
    41 => "00111100111010111010111000111001", 
    42 => "10111110001010000011010100010110", 
    43 => "10111101000110110101110001100010", 
    44 => "00111100000111111001010000000101", 
    45 => "00111101010000110101100010010101", 
    46 => "00111101001110000000110101110011", 
    47 => "10111110001011001111111001011000", 
    48 => "00111101101101000001110011000101", 
    49 => "00111110010000001011011010110111", 
    50 => "00111101101101010000111011100011", 
    51 => "00111101110101010101111111111110", 
    52 => "00111101011010001100101101100110", 
    53 => "10111101101110101101100100110101", 
    54 => "00111110000000011110101110000101", 
    55 => "00111101110011110101011111110111", 
    56 => "10111110001100110010001100110110", 
    57 => "00111101001000101111111001001101", 
    58 => "10111110000111111110101010000001", 
    59 => "00111101110011001010101001101000", 
    60 => "10111110000110101111000110001000", 
    61 => "00111101010011111001000000010001", 
    62 => "10111100111011010101111100010100", 
    63 => "00111101011001100011010010011000", 
    64 => "10111101101101100110011011101101", 
    65 => "00111101011001011111001011011001", 
    66 => "00111101101111110111010101111100", 
    67 => "00111100000000111001110110000100", 
    68 => "00111101000100101110001010010001", 
    69 => "10111101001111100000110000100101", 
    70 => "10111101001000100000100110101011", 
    71 => "00111101001100101010001010110101", 
    72 => "00111101101001110001010011010101", 
    73 => "10111110000011111100110101101000", 
    74 => "00111110001001100110011100110000", 
    75 => "10111100100100001010110100101100", 
    76 => "00111101110111010111010011010110", 
    77 => "00111100111100101111110011100010", 
    78 => "10111100101011111111011111100000", 
    79 => "00111011000000010011000111000100", 
    80 => "10111011101011010100001100101111", 
    81 => "10111101101100011101100111001101", 
    82 => "00111101101010101010100011011110", 
    83 => "00111100100000010000100000111110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_75 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_75 is
    component inference_mult_1_120_120_84_s_W4_75_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_75_rom_U :  component inference_mult_1_120_120_84_s_W4_75_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


