-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110001101100100011101010", 
    1 => "00111100100100000010110100111111", 
    2 => "00111101101110100110100010010111", 
    3 => "10111101110110101110110111011101", 
    4 => "00111100101101011100100111100110", 
    5 => "00111101100101101101111100100101", 
    6 => "10111101110011011010010001001000", 
    7 => "10111101000001010011000111101001", 
    8 => "10111110000000000111010010100111", 
    9 => "10111101100001110000100000001010", 
    10 => "00111110000101001110010011001001", 
    11 => "10111101010101110100110101110100", 
    12 => "10111100110010000111110111101000", 
    13 => "10111101110110110111001110001110", 
    14 => "00111101100001111101011111000011", 
    15 => "10111101101011000011010011110111", 
    16 => "00111100000011110101011011000000", 
    17 => "00111110001110110010110100001010", 
    18 => "10111101001110100110010111000010", 
    19 => "00111101100110111100001111101110", 
    20 => "10111110001110000000101000011000", 
    21 => "00111101000011100111000010100110", 
    22 => "10111110000011010110100101001101", 
    23 => "00111101100010110001000010000101", 
    24 => "10111110000010101101111010101001", 
    25 => "00111010111010011101000111000000", 
    26 => "10111101011111111000011101101010", 
    27 => "10111100100111000111010010101011", 
    28 => "00111101000001100001000000011010", 
    29 => "10111101101011100010000001101111", 
    30 => "00111100100100101010111110011011", 
    31 => "00111101101000110010110111011010", 
    32 => "10111101100010010111001000111010", 
    33 => "00111110001100000111010001100100", 
    34 => "10111101000110011011011110110010", 
    35 => "10111100011110000000010000011110", 
    36 => "10111101000101011111010011100100", 
    37 => "10111101111011000111111100110101", 
    38 => "10111110000111101001111101101011", 
    39 => "00111100010100010010001010011101", 
    40 => "10111101100001111010100110010010", 
    41 => "10111010110101011100111101010101", 
    42 => "00111101011100011111001000000101", 
    43 => "00111100000000010000110101111100", 
    44 => "00111101110100100111000010110000", 
    45 => "00111011000110001111011001011100", 
    46 => "00111101010111000000001110000111", 
    47 => "00111101010110011100101111101111", 
    48 => "10111101101001100000101111000000", 
    49 => "00111101110110101000011110100000", 
    50 => "00111101100011101111001001001110", 
    51 => "10111110001101010100010001111000", 
    52 => "10111101001001011100011111011011", 
    53 => "00111101001010011101101011000101", 
    54 => "10111110000001110110000101000110", 
    55 => "10111010101010011111110100010100", 
    56 => "00111101010111110011110111101001", 
    57 => "10111100110110011000110010011001", 
    58 => "00111101001000101001100000010000", 
    59 => "10111101010110110111100011100111", 
    60 => "10111110000001101111010110001000", 
    61 => "10111101111101010000010000111110", 
    62 => "00111100110101011111011101001110", 
    63 => "00111011111111111111101001110111", 
    64 => "00111101001001100000101101100010", 
    65 => "10111100100001001010011010001110", 
    66 => "10111101100111001011010010100001", 
    67 => "00111101100010110111010000101111", 
    68 => "00111101100100100110010011010111", 
    69 => "00111101100011110110110010111010", 
    70 => "00111101111010010100001001001110", 
    71 => "10111100010011001100001010111100", 
    72 => "00111100011111101001011110110110", 
    73 => "10111101100001101100001100100110", 
    74 => "10111110010111110100101111101000", 
    75 => "10111110000010001000101111011011", 
    76 => "10111101101110010110011001111011", 
    77 => "10111101000001000100101110100100", 
    78 => "10111101001000011101110000001110", 
    79 => "10111110001010100101111011111111", 
    80 => "10111011101010010001100001101000", 
    81 => "10111110000001101111111001110010", 
    82 => "00111101000111011011001010110011", 
    83 => "00111101111111100000000011010010", 
    84 => "00111101110110010101110111010101", 
    85 => "00111110000011101011110101001101", 
    86 => "10111110000010011011110110000100", 
    87 => "10111101001100100000000000010010", 
    88 => "10111110000100010000101011011101", 
    89 => "00111110000100110010111000111000", 
    90 => "00111011011001001110000101101100", 
    91 => "10111011110111000111111000110000", 
    92 => "10111101110011011110001110111001", 
    93 => "00111110001111010110000011101001", 
    94 => "10111101101100110101001010001101", 
    95 => "00111110000110010001100101101001", 
    96 => "10111101011001111001111000001001", 
    97 => "10111101010001111010100001101011", 
    98 => "00111100110011001101100101100010", 
    99 => "10111101010010110001011101010110", 
    100 => "10111011100001000001010111001111", 
    101 => "00111101011011100011111101000011", 
    102 => "10111101010111000111100001110001", 
    103 => "00111101100111101101100100110001", 
    104 => "00111011101011010000010011011011", 
    105 => "10111101111101101110001101110001", 
    106 => "10111011000000110111110011001101", 
    107 => "00111101001010001101011010011110", 
    108 => "10111110001001010000000011010110", 
    109 => "00111101000001011110101110110111", 
    110 => "00111010101111100100011010100010", 
    111 => "10111101100111001111001101111110", 
    112 => "00111110000000110100011101100011", 
    113 => "10111101000101111010010101101110", 
    114 => "10111100010110000101010001010101", 
    115 => "00111100011010110101000010110001", 
    116 => "00111101001110011001011111101100", 
    117 => "00111101001001111011011110111010", 
    118 => "10111110000110101000011000001110", 
    119 => "00111110000011111110011000001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_10 is
    component inference_conv2d_f3_2_4_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_10_rom_U :  component inference_conv2d_f3_2_4_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


