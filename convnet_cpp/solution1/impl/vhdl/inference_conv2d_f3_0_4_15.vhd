-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010111101100101000100101", 
    1 => "00111101011010011101101011000101", 
    2 => "10111100111010111011101110100101", 
    3 => "10111110001011101011100011011000", 
    4 => "00111101101100101000111110010010", 
    5 => "10111100001010100100100010101001", 
    6 => "00111100011101000011010000011010", 
    7 => "00111110010010101001001101101100", 
    8 => "10111101110111110100001010111011", 
    9 => "00111101010101111100001101101011", 
    10 => "10111101111101101100111110000101", 
    11 => "10111100101011010011001001101000", 
    12 => "10111110000010101010110001010100", 
    13 => "00111101110011010011011111000001", 
    14 => "00111100101001001101111100010010", 
    15 => "00111100101001011110010100000001", 
    16 => "10111100100101001000001100001111", 
    17 => "10111110000011100010001110101111", 
    18 => "10111100000100101010000010110111", 
    19 => "00111110001001100010000100110010", 
    20 => "00111110000010110010100101011111", 
    21 => "00111110010011101001100110100110", 
    22 => "00111101000011010111101001110010", 
    23 => "10111100011000101111000111010010", 
    24 => "00111101011000111101111100000010", 
    25 => "00111101000010111101001111000011", 
    26 => "00111110001100010001111001000011", 
    27 => "10111101111011111100101101001111", 
    28 => "00111100010101010000111110010001", 
    29 => "00111101001010110111111011101111", 
    30 => "10111101100011011000010000010111", 
    31 => "10111101000100000110111010101101", 
    32 => "00111101011010110110101101101110", 
    33 => "10111101000111010010101001100011", 
    34 => "00111101101010001010101110111011", 
    35 => "00111110000111101000100011011111", 
    36 => "00111011001111011111101101001110", 
    37 => "10111100110001110111011110001110", 
    38 => "10111101011101101101010100010100", 
    39 => "00111110001001001000000101101111", 
    40 => "10111110000010000011110110111100", 
    41 => "10111100100110101010001010101110", 
    42 => "10111101111010100111011100011101", 
    43 => "10111100111110101100011000111010", 
    44 => "00111110001001100101000010100100", 
    45 => "00111101001001000011111111100110", 
    46 => "10111110011000000111111110101010", 
    47 => "00111101100011010000111110001011", 
    48 => "10111010100000100111001110000101", 
    49 => "10111101000000110101111000001001", 
    50 => "10111101101110101100011101000110", 
    51 => "00111100010111010011001001110110", 
    52 => "10111101101000101000011110001100", 
    53 => "00111101111111101011001100010100", 
    54 => "00111101110001110011100101000101", 
    55 => "10111101110000000000000100100111", 
    56 => "10111101001010101101011010111110", 
    57 => "00111100100000001011010110011101", 
    58 => "10111101111001000011110000111010", 
    59 => "00111110011000101011010010010110", 
    60 => "00111101110000010101000110110010", 
    61 => "00111101000111110010000011011101", 
    62 => "00111101101010100111001100101110", 
    63 => "00111101000001110011111001001101", 
    64 => "10111011010110011100100100110101", 
    65 => "00111010001011111000100001001100", 
    66 => "10111101100100011101110001111001", 
    67 => "00111110000101110000100001101000", 
    68 => "10111100110000100011001101001100", 
    69 => "10111001100010100001110000101100", 
    70 => "10111100100110101100111010000011", 
    71 => "10111100010010010010111001000111", 
    72 => "00111101010000100101001111101000", 
    73 => "00111110000001010111000101001100", 
    74 => "10111101111001101000101010010011", 
    75 => "10111101100100011000110100100110", 
    76 => "10111110000110001000001000101000", 
    77 => "00111101110100101111010111011100", 
    78 => "10111011111001100001101000100110", 
    79 => "00111100111111011010010011011100", 
    80 => "10111101101101010010000001100110", 
    81 => "00111101001001010011110010011011", 
    82 => "10111110000110011100111111011101", 
    83 => "00111110010001011101110110010000", 
    84 => "10111110010001110001010111000110", 
    85 => "10111100000100000010011101001010", 
    86 => "10111101010010100000110011001001", 
    87 => "00111101011110101011101110001000", 
    88 => "10111100101101100011100100001101", 
    89 => "10111101100101111110110101000010", 
    90 => "00111101111110010111101110110111", 
    91 => "10111100110100001110111101110001", 
    92 => "10111101000011110111100010010100", 
    93 => "00111101101011001111100001011110", 
    94 => "00111101011010011101110100010011", 
    95 => "00111110001100110010000011011010", 
    96 => "10111110000001001100101000001100", 
    97 => "00111101000111011100001101000101", 
    98 => "00111100100011111010111100110101", 
    99 => "00111010100001000000111100011001", 
    100 => "10111101100000100100110001101001", 
    101 => "10111101101011001010000101010110", 
    102 => "00111110001101101110111010110111", 
    103 => "00111100110001001110001011110011", 
    104 => "00111101010111011110001010000100", 
    105 => "10111001000010101111010101010110", 
    106 => "00111100110100111010010011000011", 
    107 => "00111101101101000000000110111000", 
    108 => "00111100110110000000110101110011", 
    109 => "00111011100111110111101111000110", 
    110 => "10111110001001111010010000011110", 
    111 => "00111101001111001100011001011010", 
    112 => "10111110001111110001001000111100", 
    113 => "00111100111110011001010110111000", 
    114 => "00111100100111111001110100011111", 
    115 => "10111101100111111010100001111111", 
    116 => "10111110010001100001011011111000", 
    117 => "10111101101100101111011101000110", 
    118 => "10111101001011100100110100011010", 
    119 => "10111101100100011011100111111010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_15 is
    component inference_conv2d_f3_0_4_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_15_rom_U :  component inference_conv2d_f3_0_4_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


