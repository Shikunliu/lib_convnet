-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_77_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_77_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000011100101101001101100", 
    1 => "00111101100101100000101100111010", 
    2 => "10111101001001100100010111100101", 
    3 => "00111101000011010011000101011100", 
    4 => "10111101011111001010000111110111", 
    5 => "00111100101101000010101010101010", 
    6 => "10111100101001010110100110110001", 
    7 => "10111101000111010101101110010000", 
    8 => "00111101001111100011101101101111", 
    9 => "00111101010110101011110001011111", 
    10 => "10111101110001011011011011010001", 
    11 => "10111100100001101011011001101000", 
    12 => "00111011100001011001111001100101", 
    13 => "10111101110111010110000111110110", 
    14 => "10111101111110000111110111110110", 
    15 => "00111101101100000100100101011001", 
    16 => "10111100011110101110010010100011", 
    17 => "10111110010000101111111011000101", 
    18 => "10111101001111000001101100011110", 
    19 => "10111100111101100000010111100001", 
    20 => "10111110000110001000111110000110", 
    21 => "00111100110110001010101010111100", 
    22 => "10111100101010000111100000100100", 
    23 => "00111110000010110110101011101000", 
    24 => "00111110000110001011000010001110", 
    25 => "10111110001011010111010001001111", 
    26 => "00111110010000100100011111001011", 
    27 => "00111101101011000001110110110000", 
    28 => "10111101101010111000011001000110", 
    29 => "00111101010100100110001111001011", 
    30 => "00111100011001110000111100000011", 
    31 => "00111101100010011110011100111111", 
    32 => "10111101111000010101000110100100", 
    33 => "00111101101011000000001000000001", 
    34 => "10111101001010000011101001100001", 
    35 => "10111101101001101111011000000001", 
    36 => "10111101100000011110110101101000", 
    37 => "00111101110001001010000110100000", 
    38 => "10111110000101010010110111101101", 
    39 => "00111100101011110111100011001001", 
    40 => "10111110001000010000011001101000", 
    41 => "10111101000101110100001101111110", 
    42 => "00111101110100001110000000100010", 
    43 => "00111101100000111100110100000111", 
    44 => "00111101001101011001011000011010", 
    45 => "00111110010111001100001011010111", 
    46 => "00111010010100010100011001001000", 
    47 => "10111100001101011001001101100000", 
    48 => "00111101101111011011101011010100", 
    49 => "10111101101010011110101111011100", 
    50 => "10111101100010001111000010111010", 
    51 => "10111110000011000100011101011110", 
    52 => "10111110000000000101011011000101", 
    53 => "10111100101010000111000111011001", 
    54 => "00111101110110001110010100111111", 
    55 => "00111101111111000010110010100001", 
    56 => "10111110001100001100110111001000", 
    57 => "10111011111000010100111111100111", 
    58 => "10111101111011101110101011101010", 
    59 => "10111100101000110111111111001100", 
    60 => "10111100001110100101110111001010", 
    61 => "10111110001101110100001001010111", 
    62 => "00111101101100110010101101010110", 
    63 => "00111101010011001101001000100110", 
    64 => "00111101000100010111111110111010", 
    65 => "10111011110100000100100100000011", 
    66 => "00111110000001100011011010110001", 
    67 => "00111101000111101000000010111111", 
    68 => "10111101110100101111010101010110", 
    69 => "00111100110000100100111100110000", 
    70 => "10111101100010111101101010000111", 
    71 => "00111110001000001100011111000001", 
    72 => "00111101000000110000000100000111", 
    73 => "00111101100000011100010001001110", 
    74 => "00111101110100100000001010010111", 
    75 => "00111101100110011100010010010111", 
    76 => "10111101100000010010101100000000", 
    77 => "00111011011101010000100101010111", 
    78 => "10111100111100100111001110111011", 
    79 => "10111101010110000010000100101001", 
    80 => "10111100100010111010011111010100", 
    81 => "10111101110010111001101001001101", 
    82 => "10111101100111100100100010001011", 
    83 => "10111110010000000110010011101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_77 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_77 is
    component inference_mult_1_120_120_84_s_W4_77_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_77_rom_U :  component inference_mult_1_120_120_84_s_W4_77_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


