-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010000100101111111000001", 
    1 => "00111101100011000100010000111001", 
    2 => "00111110000110000101110101110100", 
    3 => "10111100000110100111110110000101", 
    4 => "00111100110111111111100000100011", 
    5 => "10111100001101000111001001100011", 
    6 => "00111101100100001100101111110011", 
    7 => "10111100110111001001101111100010", 
    8 => "10111101010101100011110111011111", 
    9 => "00111101100111011111010110011001", 
    10 => "00111011111110001000010001110110", 
    11 => "10111101110010000100110110010010", 
    12 => "00111110000110110000101110111111", 
    13 => "00111101011100010011111111111001", 
    14 => "00111101000101011001100010011110", 
    15 => "10111100010010011011111000100101", 
    16 => "00111101110001100000100111011101", 
    17 => "00111100100100010101000001010101", 
    18 => "10111100110100000111000101100111", 
    19 => "10111101100110010011110100000011", 
    20 => "00111101101010110110111101011101", 
    21 => "10111100100001000001101010101100", 
    22 => "10111110010110010000011110010110", 
    23 => "10111101001011000000100011010010", 
    24 => "00111101000100000101010011111101", 
    25 => "00111010110100001100001101111100", 
    26 => "00111100100011001010001001110000", 
    27 => "00111010110100100010010111010010", 
    28 => "10111100101000101001100110111110", 
    29 => "00111101111000100011000011111101", 
    30 => "00111101110101000010010111110010", 
    31 => "10111101111001100111010000001000", 
    32 => "10111101011101100001011001110010", 
    33 => "10111101001100100011100001100001", 
    34 => "00111101100001111011101100001000", 
    35 => "00111101101101111010010111001100", 
    36 => "00111011100110000110111000100000", 
    37 => "10111110000011010000010001100000", 
    38 => "10111011111001100000101001001011", 
    39 => "10111101100100111111111001001111", 
    40 => "00111101100111000011001101001010", 
    41 => "00111110010001000111111110011001", 
    42 => "00111101000100100000011110011111", 
    43 => "10111101010101011000111011011101", 
    44 => "00111110001001010101001100100110", 
    45 => "00111100011000010110000011011001", 
    46 => "00111100111000100011101010001000", 
    47 => "10111101100010000011111011111110", 
    48 => "00111101011111001010000010110101", 
    49 => "00111101110110111011110101111011", 
    50 => "10111101110101100101111111011001", 
    51 => "00111101110001010000000110101101", 
    52 => "00111010101011010000001011011000", 
    53 => "10111101101000100010000110101110", 
    54 => "00111110000000001111001000111001", 
    55 => "00111101101001011111101000110000", 
    56 => "00111100011010101001011001110111", 
    57 => "10111101111001000001001011001111", 
    58 => "10111100001100010011011110110000", 
    59 => "00111101011100010000001111111111", 
    60 => "00111101000110100110101100000000", 
    61 => "00111101010010001001111100100110", 
    62 => "10111101101111010011100100111001", 
    63 => "00111101000011101100010001010100", 
    64 => "00111100000010010000011011000101", 
    65 => "00111100001111101001010011111100", 
    66 => "10111110010101000011001011001010", 
    67 => "00111101011011000110110011110110", 
    68 => "00111101000000101010001010001101", 
    69 => "10111101100001111111010100000100", 
    70 => "00111101001101110100010011110110", 
    71 => "10111101101101010101100011000010", 
    72 => "00111100111110001011111000100010", 
    73 => "10111101111010010111111010011001", 
    74 => "10111101110011011010111000111110", 
    75 => "10111110000101100010111000001010", 
    76 => "10111101100011011010000111000100", 
    77 => "00111110000100110011001001101010", 
    78 => "00111101110111001001001111101010", 
    79 => "00111101111101110010111111111101", 
    80 => "00111100100101110101100110111001", 
    81 => "00111101101000110000000111111000", 
    82 => "10111101001010000001001001101110", 
    83 => "10111101010100000011101110011101", 
    84 => "00111101100110001110011001110011", 
    85 => "10111101100001010011000101010101", 
    86 => "10111101011101010110011111110111", 
    87 => "00111101110001101011101111011100", 
    88 => "10111110001101000101100000000100", 
    89 => "10111101111111101111010000010111", 
    90 => "00111110000101010010100011110010", 
    91 => "10111110010001011100000001110110", 
    92 => "10111011010100101100111011101111", 
    93 => "10111110000110001111010101111111", 
    94 => "00111101101010110101101100100000", 
    95 => "10111100100000000100110011110111", 
    96 => "00111110000111010111010111100010", 
    97 => "10111011110101111110011100000111", 
    98 => "10111101001101000010001011001101", 
    99 => "10111110001000101010110010111000", 
    100 => "00111110000101000100100011001111", 
    101 => "00111110000011001110100001010011", 
    102 => "00111101000101010101110010001001", 
    103 => "00111110000011000010100110111111", 
    104 => "10111101111010011110101110100111", 
    105 => "00111100011010000010110100010000", 
    106 => "00111101100000111000010000110100", 
    107 => "10111101110111101110110101000110", 
    108 => "00111101011010100101101010010111", 
    109 => "00111101111000010111000100011001", 
    110 => "10111100001001100111001001011011", 
    111 => "00111110000000011101011001001001", 
    112 => "10111101010111100011010010000100", 
    113 => "00111101011101000010010001011111", 
    114 => "10111101101001100000101000000101", 
    115 => "00111100101110100010010110010110", 
    116 => "10111100101110011100101010010010", 
    117 => "10111100110111010100101110100000", 
    118 => "00111101100111010001100000111111", 
    119 => "00111101110100001011110100000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_11 is
    component inference_conv2d_f3_2_0_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_11_rom_U :  component inference_conv2d_f3_2_0_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


