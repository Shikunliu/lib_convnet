-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101010010100110000101010", 
    1 => "10111100101011110000011110001010", 
    2 => "10111110001100001101000100110001", 
    3 => "10111100001110110011101011010100", 
    4 => "10111101010110111110101111010100", 
    5 => "10111101011001010110001011111011", 
    6 => "10111100110001101010010100000000", 
    7 => "00111110000000111011001100100000", 
    8 => "10111101100110001100111010100110", 
    9 => "00111101111100011110101001111001", 
    10 => "10111100100110010011001011010111", 
    11 => "00111101101111111011101001100000", 
    12 => "00111101001100010110111110101111", 
    13 => "10111101100000011000101100000000", 
    14 => "10111101010111100010101010101000", 
    15 => "00111110001100111001101010111111", 
    16 => "10111101000000100110011110000100", 
    17 => "00111101101011001011111011011011", 
    18 => "10111110000000101001100011001100", 
    19 => "10111101001000101011111101100011", 
    20 => "00111100100100001001001110010110", 
    21 => "10111100101101011101000110101001", 
    22 => "10111101110000111100110100111100", 
    23 => "00111101101011000010010100010101", 
    24 => "00111101000110001000000010110000", 
    25 => "00111101100010011001110111110100", 
    26 => "00111101100011110110001010000001", 
    27 => "10111101011111100011011001100111", 
    28 => "10111101100101000001100110100000", 
    29 => "10111011000110001010111100111001", 
    30 => "00111101110001100000000011110011", 
    31 => "10111101011111101001011010001110", 
    32 => "00111101010001111011100001000000", 
    33 => "00111101000110001111101111100101", 
    34 => "10111011110011101111001010010111", 
    35 => "00111011110101011101001000101111", 
    36 => "00111101110100100001001111100100", 
    37 => "00111101001011101100111100111011", 
    38 => "00111101000110100101001000100110", 
    39 => "10111100111000000000000001010001", 
    40 => "10111101100111001011100111111010", 
    41 => "10111101100101010100011000100101", 
    42 => "10111011110101111111100010001111", 
    43 => "00111101011010011001110110111110", 
    44 => "00111100000001101011101000111001", 
    45 => "10111100110010100011001000011110", 
    46 => "00111101110101001110001110111101", 
    47 => "00111100101101010100010011110001", 
    48 => "00111101010100001011000111100100", 
    49 => "00111110000001101100101100010000", 
    50 => "00111100100001000010010100101001", 
    51 => "00111101000011011011100100100110", 
    52 => "10111101010110101000010111110011", 
    53 => "00111101100110011100010001000111", 
    54 => "00111010010110110110100011111010", 
    55 => "10111100111100010011111111011110", 
    56 => "00111101010100101100101011011110", 
    57 => "00111101101110010111100010000100", 
    58 => "00111101110011100001011010010100", 
    59 => "10111110000011011011111101001000", 
    60 => "00111101011110011001101010001011", 
    61 => "00111101100111010100100010100011", 
    62 => "10111101011001100011110001011010", 
    63 => "00111101101110001101010000110101", 
    64 => "10111110000010000110000001010111", 
    65 => "10111110000010010100110101010001", 
    66 => "00111110001001000001111001011000", 
    67 => "10111101000101011001101110101000", 
    68 => "00111101001011101010100101100001", 
    69 => "00111110001011110010010111100101", 
    70 => "10111101100001000101011100000101", 
    71 => "00111110000100000000010010111000", 
    72 => "00111101101110001010010011111000", 
    73 => "00111101110100000001000010000100", 
    74 => "10111101100001100101010110011111", 
    75 => "10111100111001101100010110011100", 
    76 => "00111110000000011101111111111100", 
    77 => "00111101001000111110011100010101", 
    78 => "00111101000100001101101111010101", 
    79 => "10111101110110011100010010010111", 
    80 => "10111100100111110110000010000011", 
    81 => "00111100111110100111000110110110", 
    82 => "00111101000000100111010110010001", 
    83 => "00111101101100101100101010011011", 
    84 => "00111101110011011110111000110101", 
    85 => "10111100100000111000101001100100", 
    86 => "10111000010111010011010000010010", 
    87 => "00111101100001111100010010000101", 
    88 => "00111101100010010110011100110111", 
    89 => "10111110000111111110111000101101", 
    90 => "00111101110000100001001000110110", 
    91 => "00111101111010111100101101100000", 
    92 => "00111100110101000001000011111001", 
    93 => "00111100010110010100101101100000", 
    94 => "10111110000011001111111110101000", 
    95 => "10111101110000000111111011111100", 
    96 => "00111010011000101110011000010100", 
    97 => "00111110000000110110001011101001", 
    98 => "00111101111101100000111100011011", 
    99 => "00111101101101110101010001111011", 
    100 => "00111101101000110111001000000010", 
    101 => "10111100100000011011110100000100", 
    102 => "00111101100110101000000111000001", 
    103 => "10111101110110100011101100010101", 
    104 => "10111101000011110111101011000111", 
    105 => "00111101100111001101100100011111", 
    106 => "00111100011111111001111001000110", 
    107 => "10111101011011101101000011001110", 
    108 => "00111110001010101110110100010100", 
    109 => "10111100001100101111000111000101", 
    110 => "00111100101000010001100001001001", 
    111 => "10111101100100111011000011010010", 
    112 => "00111100111101100010111111010010", 
    113 => "10111101000001011100111111010011", 
    114 => "00111101101011110100001111010101", 
    115 => "00111101000010011101011001000011", 
    116 => "00111101100010010010111100011110", 
    117 => "10111101101110001111000101011011", 
    118 => "00111101000000101011100000001011", 
    119 => "10111101101100110010111000010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_5 is
    component inference_conv2d_f3_0_2_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_5_rom_U :  component inference_conv2d_f3_0_2_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


