-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100101011001101001101101000", 
    1 => "10111110000000100011101010110000", 
    2 => "00111100001100010001110011011000", 
    3 => "00111011100100010101100011000011", 
    4 => "00111101101101110100000010001110", 
    5 => "00111110000011001011101100111101", 
    6 => "00111110000100101000111010010011", 
    7 => "10111110010010011100100111010110", 
    8 => "10111101100100001001001010010111", 
    9 => "10111100110010000010001110111011", 
    10 => "00111101000101010010111010110110", 
    11 => "10111101110100111110100100100001", 
    12 => "10111100100111110111100101000010", 
    13 => "10111100010111111000010001011111", 
    14 => "00111100101111100100101000011101", 
    15 => "00111110000010101111001000001111", 
    16 => "00111100100001101101110011111110", 
    17 => "00111110001110011011001011000100", 
    18 => "00111101011011111110111011110110", 
    19 => "00111101101101010001000101110101", 
    20 => "00111101101000111100011011001001", 
    21 => "00111110001011110110110111111100", 
    22 => "00111010100101010011111001101011", 
    23 => "10111100011100101110100001010101", 
    24 => "10111100111101001110110111101001", 
    25 => "00111100100000110100110100100111", 
    26 => "00111110000111001000100111110100", 
    27 => "00111101111010101101000101001010", 
    28 => "10111101100100100111011100111110", 
    29 => "10111101101110100000011101001000", 
    30 => "00111011010101101110010011010100", 
    31 => "10111101100100000100001011001011", 
    32 => "10111101111100010010100100000010", 
    33 => "10111100100011010000111101111101", 
    34 => "10111100001011000111000101111000", 
    35 => "10111100111001001000101111010001", 
    36 => "10111101010111110001000100111101", 
    37 => "10111100000101101001100010010011", 
    38 => "10111011000010101100101101110110", 
    39 => "10111100010111111011010100000111", 
    40 => "00111001110100011000101110011011", 
    41 => "10111101110000000001101010110000", 
    42 => "00111101110101000101111000001011", 
    43 => "10111100011000010000110011110110", 
    44 => "00111110000001011100101100110110", 
    45 => "10111101110011110011001101000100", 
    46 => "00111101000100110011001011001000", 
    47 => "10111100010010001110100101111110", 
    48 => "10111101010100011101101010111110", 
    49 => "10111101100010001110001000011001", 
    50 => "00111101100100100100011101000101", 
    51 => "00111110000000010000000010100100", 
    52 => "00111100100111100110101010000100", 
    53 => "00111100110000001000000100101111", 
    54 => "00111101100011111011101011011001", 
    55 => "00111101110111010111100110001110", 
    56 => "10111101100101101110011010010111", 
    57 => "00111101100001010110000011100011", 
    58 => "10111100001011000000001001010010", 
    59 => "00111110001010011011000011101110", 
    60 => "00111101111110001001010100000111", 
    61 => "10111100101010010100100000101110", 
    62 => "00111100100010100100110010001010", 
    63 => "00111101011111000101000001001000", 
    64 => "10111101100111101001111010111100", 
    65 => "00111101011111110010110111111000", 
    66 => "00111101011000110111011111101111", 
    67 => "00111110001011011111010101001001", 
    68 => "00111011111010001011110100000011", 
    69 => "00111101110001110100101101101001", 
    70 => "00111110000011010011001110001111", 
    71 => "10111100101100000010001101111111", 
    72 => "10111101000101111100001011001010", 
    73 => "00111010111110000111010101110010", 
    74 => "10111101100100101110000010000101", 
    75 => "00111100001110010011000100001111", 
    76 => "10111100101100101000111011001001", 
    77 => "10111100111000010101111010001010", 
    78 => "00111100100001101111101100110001", 
    79 => "00111101100011100010110001111110", 
    80 => "00111100010101010100101110001100", 
    81 => "00111100110111011010111010011100", 
    82 => "00111100011001101100101100010000", 
    83 => "00111101101010110000100011000010", 
    84 => "10111101100100010111001010011111", 
    85 => "00111101101000110011010011100001", 
    86 => "10111101001110001000011111010001", 
    87 => "10111100101100010101011011110000", 
    88 => "10111101011101001100111000001000", 
    89 => "10111110001110101011011001001010", 
    90 => "00111100101001001101011000001110", 
    91 => "00111100011010000100010010001101", 
    92 => "10111101100001011111111011000000", 
    93 => "10111100010100111010011110110010", 
    94 => "10111101101010100111100000110110", 
    95 => "00111101000101110111100011011101", 
    96 => "00111110000110110101010001011100", 
    97 => "00111101100100110000001101100011", 
    98 => "10111101101111000111111101101010", 
    99 => "00111101100011010010001101110111", 
    100 => "10111100110111001111100101101011", 
    101 => "10111101001000111100010111011000", 
    102 => "10111101111001011111100111011111", 
    103 => "00111101011001010110010000111110", 
    104 => "10111101001101110000101010101001", 
    105 => "00111101100101011000011000000001", 
    106 => "10111110000101000001001111011011", 
    107 => "00111110001011110111011110101111", 
    108 => "10111110000001100111110100110101", 
    109 => "10111101000111111001001001010010", 
    110 => "00111101111011111011110110101101", 
    111 => "10111100001010111000011000101011", 
    112 => "10111101001001110101100101000000", 
    113 => "00111110000101001111011010011101", 
    114 => "00111101001100010011010000100000", 
    115 => "10111100100001100011000001100110", 
    116 => "00111101100011110011100000111111", 
    117 => "00111101100101100100111100101101", 
    118 => "00111010010101111111111011100011", 
    119 => "00111011110011100010101111011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_7 is
    component inference_conv2d_f3_0_0_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_7_rom_U :  component inference_conv2d_f3_0_0_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


