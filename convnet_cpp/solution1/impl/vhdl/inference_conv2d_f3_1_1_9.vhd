-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110111000100000110011010", 
    1 => "10111101101111111000110111011101", 
    2 => "10111101010011100000100111100100", 
    3 => "00111101001100110000110101110100", 
    4 => "00111100111011001101010000111111", 
    5 => "10111110000100011011110000010010", 
    6 => "00111110000010110000011111010001", 
    7 => "10111100110000100100101100110100", 
    8 => "10111101101101010000001000001011", 
    9 => "00111110000100001010110101000111", 
    10 => "10111110000101101001000010011011", 
    11 => "10111110000001000001111000010101", 
    12 => "00111110000011100110111010101000", 
    13 => "00111100110001110000000110110010", 
    14 => "10111110000010010010011011001000", 
    15 => "00111101101000110010111010100100", 
    16 => "00111110010010011000010010100001", 
    17 => "00111110000000100110001001000101", 
    18 => "10111101010001111010100111111110", 
    19 => "00111101110110110111101111110010", 
    20 => "10111100101010111000111001011001", 
    21 => "10111101111010011100000000100011", 
    22 => "10111010101100110110011101001011", 
    23 => "00111110001111011110011001011000", 
    24 => "00111101111011101001111001011110", 
    25 => "00111101110111101000111001100001", 
    26 => "10111010011011000001001001011010", 
    27 => "00111110000010001000100101111111", 
    28 => "00111011110000111100100110000011", 
    29 => "00111101110111100011100111110111", 
    30 => "10111101000111110011001110100010", 
    31 => "10111110001000011100000010000111", 
    32 => "00111101110011110000111010010001", 
    33 => "00111100000111000111001101110011", 
    34 => "10111101111001010101100101110001", 
    35 => "10111101100011111001100110011011", 
    36 => "00111110000101001101001110111111", 
    37 => "00111100001000000000110111100111", 
    38 => "00111011101001011100101100101011", 
    39 => "00111101101101100010111111010010", 
    40 => "00111110000100100100110011000111", 
    41 => "00111011110100010111001001111001", 
    42 => "00111011101111011011001100111111", 
    43 => "10111101100011101101000011101001", 
    44 => "00111101111101110100001011011101", 
    45 => "10111110000011100100111101110110", 
    46 => "10111100110110001010011000011111", 
    47 => "00111101011011011111111101100111", 
    48 => "10111101111010110000010000100101", 
    49 => "10111101000010110000111011010111", 
    50 => "10111100111101101100101101101110", 
    51 => "00111110001101110000100111111010", 
    52 => "00111101110100000010111101110011", 
    53 => "10111011000011000001111010110010", 
    54 => "00111110000100101111100010111110", 
    55 => "10111101000100111010101110010100", 
    56 => "10111100000001011011110001111000", 
    57 => "00111101100011000001000010010101", 
    58 => "10111011110100101001001110001011", 
    59 => "00111101001111010101101001101001", 
    60 => "10111101101100011011100100010101", 
    61 => "00111011100000011101010110101110", 
    62 => "10111101100000011100110110110000", 
    63 => "00111110000100101111001100111101", 
    64 => "00111101011111011101011110110111", 
    65 => "00111101001001100000001011100100", 
    66 => "00111011011110111011001100010100", 
    67 => "10111101110001001010100000010011", 
    68 => "00111101111010010111000011111000", 
    69 => "00111100101000101011000100000101", 
    70 => "00111011101011011110011000101101", 
    71 => "00111100001010111001001001010101", 
    72 => "00111101101110011011110101101001", 
    73 => "00111100111100111000110011000000", 
    74 => "10111101011011110101111110011111", 
    75 => "00111101011110010010110011111000", 
    76 => "10111110001011110000011010110011", 
    77 => "10111101010000010011100001111010", 
    78 => "00111011110101101100010111011111", 
    79 => "10111101110101001010111111010101", 
    80 => "10111110001000000001101111001010", 
    81 => "00111101100100000001101101011110", 
    82 => "00111110011011110010101011100000", 
    83 => "00111100101100101010011100011100", 
    84 => "00111100001110000010011110001111", 
    85 => "00111101110001011010001000001110", 
    86 => "00111010101111000100100110011101", 
    87 => "10111100100100010111000100001100", 
    88 => "10111100111001111111000101001011", 
    89 => "10111101000011000100000100000110", 
    90 => "10111101100100111100000100010011", 
    91 => "00111100011010011000110111001110", 
    92 => "10111100101010111001011010111100", 
    93 => "10111101111101000100111111100011", 
    94 => "00111101100111000000001010100010", 
    95 => "00111101100000110101111000100100", 
    96 => "10111101000100101010001110100110", 
    97 => "00111100100111000000010000001101", 
    98 => "00111110000111010011110000110110", 
    99 => "00111101100000101111110100011000", 
    100 => "10111101001000101001111101100111", 
    101 => "00111101011011010111010000100111", 
    102 => "10111110001000011110010011110111", 
    103 => "10111101111100101001100000000011", 
    104 => "10111110000111011011100001111000", 
    105 => "00111101000100111110110100000010", 
    106 => "10111101010100011000100101100000", 
    107 => "00111101100000111110001110101101", 
    108 => "10111101110001001011111011111100", 
    109 => "00111100001100010110000001100000", 
    110 => "00111101000110111010101100000111", 
    111 => "00111101110010100010111010001101", 
    112 => "10111100100110000001100001011010", 
    113 => "10111101010111100101110100011000", 
    114 => "00111101001001111010001111001110", 
    115 => "00111100101101010010000010101001", 
    116 => "00111110010110001100000101010101", 
    117 => "00111011111010010000101101011100", 
    118 => "10111101001000100001111000000010", 
    119 => "10111101001110000100010010011010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_9 is
    component inference_conv2d_f3_1_1_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_9_rom_U :  component inference_conv2d_f3_1_1_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


