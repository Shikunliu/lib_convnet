-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_33_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_33_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110011010000100110011110", 
    1 => "10111110000101000100100011001111", 
    2 => "10111101101000011011100100100011", 
    3 => "10111100111101011111100101001100", 
    4 => "00111100111011111111001011010111", 
    5 => "00111101101010110100111001111101", 
    6 => "00111100111101110001101000010011", 
    7 => "00111011100101101101011111001000", 
    8 => "10111110000111011111000001001110", 
    9 => "10111110000100001101000010101011", 
    10 => "10111100011101010110101000001111", 
    11 => "10111101101010001111011011001111", 
    12 => "10111110001011001001100100101000", 
    13 => "00111101101001001001011011111011", 
    14 => "00111011110001111101110011111001", 
    15 => "00111101101110001100110111000010", 
    16 => "00111101100010100110010111000010", 
    17 => "10111101100011010100010000100001", 
    18 => "10111110000011000010110000011011", 
    19 => "00111101001101110011111010010000", 
    20 => "00111101001001010010010110111111", 
    21 => "10111110001100100101001011001110", 
    22 => "10111101000110110001110011010111", 
    23 => "00111110000001100010011101111100", 
    24 => "00111110000010111110111101001010", 
    25 => "10111101101110010010101101100101", 
    26 => "00111110010100011011000010001010", 
    27 => "10111100011001101010000001001000", 
    28 => "00111101011001111000101101000100", 
    29 => "10111101011011110111000111111000", 
    30 => "10111110001000100100110100001010", 
    31 => "00111101100011000100101000011000", 
    32 => "00111100010000011000111111101101", 
    33 => "10111100100110111110010110100100", 
    34 => "00111100101111111111111011110100", 
    35 => "00111110001101111100010111101111", 
    36 => "00111101110110010001010101111011", 
    37 => "10111101100001010101110101010010", 
    38 => "00111101101101000000000111100000", 
    39 => "10111101001101100100100111101110", 
    40 => "00111101100100000111111010101011", 
    41 => "10111101101100011111010000000011", 
    42 => "10111101001001010010111000000111", 
    43 => "00111101011110110011010000011110", 
    44 => "10111101011111110001000111111001", 
    45 => "10111110010000001110111111011101", 
    46 => "00111110000011101011001100010100", 
    47 => "00111100100111101111100001111110", 
    48 => "00111101101110000010110111011001", 
    49 => "00111101010010010101011000100000", 
    50 => "10111110000100010001001010111010", 
    51 => "00111101101011111101010100101010", 
    52 => "10111110000011100110011001000101", 
    53 => "10111101010011010111001110111100", 
    54 => "10111011110110111110010000000001", 
    55 => "10111101101010110101111100000001", 
    56 => "10111101101000011010001100000011", 
    57 => "00111100100100111100000101001000", 
    58 => "10111110001100101110001001110110", 
    59 => "10111101111001011001110000000110", 
    60 => "10111100000101101110011000010110", 
    61 => "10111101110100111010011110011000", 
    62 => "10111101001111100011101000101101", 
    63 => "00111101000011101100110000010110", 
    64 => "00111100100011001110101110100001", 
    65 => "00111100101000001101111101110100", 
    66 => "10111101000010111111011101101010", 
    67 => "10111101111000100101111010011010", 
    68 => "00111101111000011011101100000110", 
    69 => "10111101101000000111011111110101", 
    70 => "00111100000101111111000110101111", 
    71 => "00111101100111100010000110010110", 
    72 => "10111001111101101111100101101001", 
    73 => "00111101000110000000001000111010", 
    74 => "00111101101000110001100011101111", 
    75 => "00111101010111110101110010100010", 
    76 => "10111001000101110010101101000100", 
    77 => "00111101100011001001100010100010", 
    78 => "10111100101010011001010100100101", 
    79 => "00111100110111110111100101000010", 
    80 => "10111110001111110011011100110011", 
    81 => "10111100001100110101000011111011", 
    82 => "10111101101100110001110001110010", 
    83 => "10111110011100110101100001101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_33 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_33 is
    component inference_mult_1_120_120_84_s_W4_33_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_33_rom_U :  component inference_mult_1_120_120_84_s_W4_33_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


