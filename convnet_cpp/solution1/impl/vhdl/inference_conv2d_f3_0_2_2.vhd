-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111100011100111010101111", 
    1 => "10111100111000000010011100011101", 
    2 => "10111101110000000101111001011111", 
    3 => "10111110001011000010111101000000", 
    4 => "00111101000000101111000011100001", 
    5 => "00111101011000111011111010000001", 
    6 => "10111100100100110000001011011100", 
    7 => "10111110001010100110010011000011", 
    8 => "00111101001111110100111001000100", 
    9 => "10111101101010101001111111110100", 
    10 => "00111100011010111010101000001000", 
    11 => "00111100101110110011010000011110", 
    12 => "10111101101000010100110111000011", 
    13 => "10111110001101010011010111001010", 
    14 => "00111101011101111010101111101110", 
    15 => "10111101011000100001001111110001", 
    16 => "10111101111000101100100010000010", 
    17 => "10111110010110101100011010001011", 
    18 => "00111100001100001100110001010001", 
    19 => "10111001011100110110011010010101", 
    20 => "00111101000011011011100100100110", 
    21 => "00111110000101110100010000101100", 
    22 => "00111101010000000001000000001011", 
    23 => "10111101010111010010011011101101", 
    24 => "00111101011000011010000111011100", 
    25 => "10111011000011000011011011011011", 
    26 => "00111101101010011111011110110110", 
    27 => "00111100100111110010001011011011", 
    28 => "10111101010100110100110011111111", 
    29 => "10111101010011000100100100011001", 
    30 => "00111101001101111111110001000000", 
    31 => "00111101111000001111001111001011", 
    32 => "00111101010000011111110010001111", 
    33 => "00111100011100000010110100100100", 
    34 => "00111101001011001010110001001011", 
    35 => "00111110000100101110111011001000", 
    36 => "00111101011100100001100110001101", 
    37 => "10111100000000101011010000110000", 
    38 => "00111110000100010101110101110000", 
    39 => "00111101001001100110110100011100", 
    40 => "10111110000111111100111010111000", 
    41 => "10111101110010111101100100011100", 
    42 => "00111100100011010111010010010010", 
    43 => "00111101000110101110011111001000", 
    44 => "00111100100000001010100010011100", 
    45 => "00111100001100000100001100101001", 
    46 => "10111110000010001011110001011010", 
    47 => "10111101001011010010111101011110", 
    48 => "10111101100001100010100000111000", 
    49 => "00111100100000001101111110001110", 
    50 => "10111100011001000100100000010100", 
    51 => "10111010100111100001001111111101", 
    52 => "10111101011011111000010111001010", 
    53 => "10111110001011011111011001010101", 
    54 => "00111100111101101010101101011000", 
    55 => "10111101100000001110011111100101", 
    56 => "10111101111101101111001010100110", 
    57 => "10111100111000000010110111010011", 
    58 => "00111101000101100001001001000000", 
    59 => "10111011010010110011000011101011", 
    60 => "10111101110000110010000100000010", 
    61 => "00111011111001100001111000010111", 
    62 => "00111100010100110001011000101000", 
    63 => "10111101010011111010111011001010", 
    64 => "00111101001110001011001101010101", 
    65 => "10111011011111110100000111101010", 
    66 => "10111100101101010110001001001101", 
    67 => "10111110000111010101101000011000", 
    68 => "10111101000010011010111111100010", 
    69 => "10111101111010111011100100000110", 
    70 => "00111101010100110001000000010011", 
    71 => "10111101011110100011101110011011", 
    72 => "10111101000000000011001000011111", 
    73 => "00111110000011001111001010001100", 
    74 => "00111101001101111010110010101010", 
    75 => "00111011111001000000000100110001", 
    76 => "00111110000110000000100011001000", 
    77 => "10111101100011010110110000010100", 
    78 => "00111101100111010011100011011011", 
    79 => "00111101101100111101111010010111", 
    80 => "10111101110010000110111100000101", 
    81 => "10111100111100001100101011011001", 
    82 => "00111101111100101111010111011100", 
    83 => "00111110000000000001111010101100", 
    84 => "10111101110011101000000110001000", 
    85 => "10111101000010110101011100010110", 
    86 => "00111100100000011111100100110100", 
    87 => "00111101100110001101011001011011", 
    88 => "10111101010110110101110100111001", 
    89 => "10111101100010011111100100010011", 
    90 => "10111101101111111110100001000000", 
    91 => "00111101111111011011000100100001", 
    92 => "10111100111101100110110001101110", 
    93 => "00111101100000010010011011001111", 
    94 => "10111101010001100100000101111101", 
    95 => "10111101001110101111101011000011", 
    96 => "10111101001101000001010011110101", 
    97 => "00111101101101110010010111010001", 
    98 => "10111101100101110001111100101001", 
    99 => "00111100011111110110001110001101", 
    100 => "10111101110001010011011110100000", 
    101 => "00111101000010101100100111110011", 
    102 => "10111100111110101111000110100011", 
    103 => "10111101011010100000101011001011", 
    104 => "10111011111001100111101000011101", 
    105 => "10111101000010011111000011001010", 
    106 => "10111101111000011111110100010101", 
    107 => "10111101011101100011001000100001", 
    108 => "10111101100100111001111101011100", 
    109 => "10111100101101110010100010001011", 
    110 => "10111101110110100001000110101001", 
    111 => "10111100001100001010011011111100", 
    112 => "10111110001011010010000100110110", 
    113 => "00111101111011100110100011100100", 
    114 => "00111101110100010011111110001110", 
    115 => "00111110000001100001101000011110", 
    116 => "10111110001010001001001010101011", 
    117 => "10111101000001001001001111111110", 
    118 => "00111010101001000000010000000001", 
    119 => "10111101100000111010110100001011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_2 is
    component inference_conv2d_f3_0_2_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_2_rom_U :  component inference_conv2d_f3_0_2_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


