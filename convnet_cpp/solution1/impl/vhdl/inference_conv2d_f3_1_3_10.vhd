-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_3_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_3_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010011100100111000100111", 
    1 => "10111011010000110101110110111000", 
    2 => "00111101101000001001011000011011", 
    3 => "00111100101001011000100010000101", 
    4 => "10111101000101100011011000000010", 
    5 => "10111100101001010100000001100001", 
    6 => "00111011111010000110000001111100", 
    7 => "10111101000100101001101001010001", 
    8 => "10111110000001000001111001011000", 
    9 => "00111010111001111111000011101011", 
    10 => "10111101110010100001101001111000", 
    11 => "00111100111101100101000010111111", 
    12 => "00111110010000010100110100101111", 
    13 => "00111110010011011111011100011111", 
    14 => "10111101100000111000110010010111", 
    15 => "00111100100001100100101110101001", 
    16 => "00111011101010011001010111010001", 
    17 => "00111100110011101001110001111011", 
    18 => "10111101110001001100110011100001", 
    19 => "10111101101101110111000000110111", 
    20 => "00111101000100110101100011110011", 
    21 => "00111101111000110101111110000001", 
    22 => "10111110000000010111100000101101", 
    23 => "00111101110001111100000111110011", 
    24 => "10111101001100011001101011100010", 
    25 => "00111101111111001000111100110010", 
    26 => "00111100101110010001000101100100", 
    27 => "00111101101110010001000001100101", 
    28 => "00111100110010000010000111011000", 
    29 => "10111101111101011011010111111010", 
    30 => "00111101111001011100010111111000", 
    31 => "00111101000100111100010100101001", 
    32 => "00111100010110011101001101000110", 
    33 => "10111100001100011110111010010000", 
    34 => "10111100000100101011111110010110", 
    35 => "00111100100101100010111111101101", 
    36 => "00111100111101110011011010011000", 
    37 => "10111110000000111100111100101101", 
    38 => "00111101100001011101000010011100", 
    39 => "00111101100001011101000010000010", 
    40 => "00111011110100011010010010001101", 
    41 => "10111101000001001000101010101001", 
    42 => "10111100011111010101011101000100", 
    43 => "10111101110000111110100001001010", 
    44 => "00111101010010101110001100011101", 
    45 => "10111011000000100011000011000111", 
    46 => "10111101000000110110100101000001", 
    47 => "00111100111001100011110101001100", 
    48 => "10111100001010100101010011010011", 
    49 => "10111100101100001100000101101001", 
    50 => "10111110000011101100011101000011", 
    51 => "00111101100001011010100110101000", 
    52 => "10111101000110011100000010000001", 
    53 => "00111101111101111101001010000101", 
    54 => "00111101101111001100000110100010", 
    55 => "00111110000110001110100001100100", 
    56 => "00111101001100110110010110111110", 
    57 => "10111101100110011011011000111010", 
    58 => "00111100101110111110011000101010", 
    59 => "10111101111110011100101101101000", 
    60 => "10111101101111101010001110000001", 
    61 => "00111101100000011101010001100110", 
    62 => "10111101111001100011110110000001", 
    63 => "00111101110101110111010110111000", 
    64 => "00111110001000100001100001011001", 
    65 => "10111101110011000000101101100100", 
    66 => "10111101100101101000100011110011", 
    67 => "00111110000101100000101101110000", 
    68 => "00111110000111001110000100111111", 
    69 => "00111101101111010010010100110010", 
    70 => "10111101100110010110010000101101", 
    71 => "00111101100110100100010000100111", 
    72 => "10111110010011001100111010100011", 
    73 => "10111101010101101000100101011111", 
    74 => "00111101000010011111101001110000", 
    75 => "00111100010000101001110001011101", 
    76 => "10111101010110100101010011111011", 
    77 => "00111011010111001100001001100011", 
    78 => "00111101100010100111010001010101", 
    79 => "10111100010111101010101111110010", 
    80 => "10111100110000101100000010100101", 
    81 => "10111110001001100101000010100100", 
    82 => "00111110000010110011010110110001", 
    83 => "10111011111000100111110100100011", 
    84 => "10111011100101011110101001100011", 
    85 => "10111100011100100010110001101101", 
    86 => "00111101110111011111000010010001", 
    87 => "00111101000100101011100000110100", 
    88 => "00111101000100011011100001011001", 
    89 => "10111110000010010010100100100100", 
    90 => "10111100110101111010100110100000", 
    91 => "10111101000001001101100110111001", 
    92 => "00111101101010010011101011001111", 
    93 => "00111101001000111011000000111110", 
    94 => "10111101111100000001111000100110", 
    95 => "00111101100010100101101101000110", 
    96 => "10111101100000101011110110101000", 
    97 => "10111101100111101110100101010111", 
    98 => "10111101111101100000111000001111", 
    99 => "10111011101001100110110011010001", 
    100 => "00111110001110101110000000111011", 
    101 => "10111110000111010001101111111000", 
    102 => "00111110000011100001111101111101", 
    103 => "10111101001001001001110100011110", 
    104 => "00111110000100101100010001010000", 
    105 => "10111101010110101101100011111111", 
    106 => "10111110001011100001101100001001", 
    107 => "00111101000000100110111110010111", 
    108 => "00111100011000111001111111100011", 
    109 => "10111101111011100010111110111110", 
    110 => "00111101110110010010101011111010", 
    111 => "00111101011100010101001100001111", 
    112 => "00111100000000011011011100100101", 
    113 => "10111101000011010001011011101111", 
    114 => "00111110000000000000010011111011", 
    115 => "10111100100010110111010010101000", 
    116 => "10111001010110111010000111110100", 
    117 => "00111100101101111010000111111000", 
    118 => "00111100001101000001011111001010", 
    119 => "10111100110101001000110011101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_3_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_3_10 is
    component inference_conv2d_f3_1_3_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_3_10_rom_U :  component inference_conv2d_f3_1_3_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


