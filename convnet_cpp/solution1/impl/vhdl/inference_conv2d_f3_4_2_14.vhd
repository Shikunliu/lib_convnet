-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111010100011011000110100", 
    1 => "00111101011110101000110011011111", 
    2 => "10111100000100011001000011000001", 
    3 => "00111100111101111110011111001110", 
    4 => "00111100011010101100101001111001", 
    5 => "00111101101111000011110011010101", 
    6 => "10111101011000101010101110101100", 
    7 => "00111101000110011011001011111010", 
    8 => "10111100100011010101010110001001", 
    9 => "10111101101101110001010100001010", 
    10 => "00111011011100100111011110000001", 
    11 => "10111100010101111100010000001100", 
    12 => "10111101111101100010000001101000", 
    13 => "00111101011110000000110101110011", 
    14 => "00111101011001000110111111010001", 
    15 => "10111101111111111100110000011000", 
    16 => "10111101110100010011010010001011", 
    17 => "00111101100011011010101010101110", 
    18 => "00111100010001101111011100110101", 
    19 => "10111110000001110011000100001010", 
    20 => "00111101011110010000110111010011", 
    21 => "00111101110011110100001110000101", 
    22 => "10111100101011101010011001110001", 
    23 => "00111110001000111101100010011101", 
    24 => "00111100101111111001101111000010", 
    25 => "10111101100010011010110011100101", 
    26 => "10111110001100001001111101100010", 
    27 => "10111101110010000100111110010000", 
    28 => "10111010000010110101101010011010", 
    29 => "00111101100010100111000001001100", 
    30 => "00111101101111101001110101000100", 
    31 => "00111101101111000000111110100011", 
    32 => "00111101101000101110100110001010", 
    33 => "10111110001010111110100110000101", 
    34 => "00111101101001001000000011110110", 
    35 => "10111101001011111111100010110110", 
    36 => "00111101000011001000010011111001", 
    37 => "00111101011010011100101011101111", 
    38 => "00111101111011111001110010100110", 
    39 => "10111101100001010111110010010001", 
    40 => "10111101110001101011011101100111", 
    41 => "10111101111000001001111011011100", 
    42 => "10111101110110101011011011010000", 
    43 => "10111110000010100101110111110010", 
    44 => "00111100100000111100011001011110", 
    45 => "00111101000001010001010110011001", 
    46 => "10111101001100001001001111001100", 
    47 => "10111100100101001011101000000001", 
    48 => "00111100100110111011100001011000", 
    49 => "00111110000001100100000000100001", 
    50 => "00111101111000010100100111000111", 
    51 => "10111100101100001000101111101111", 
    52 => "00111101101000100011011001100011", 
    53 => "10111110000001001011111100001010", 
    54 => "00111101100101100000001010111100", 
    55 => "00111100111101110000011000100111", 
    56 => "00111011010101111111000001000001", 
    57 => "10111101110111110100010101011010", 
    58 => "00111101000101000011100100100010", 
    59 => "10111110010001000011101001100100", 
    60 => "00111100100011111100001111111000", 
    61 => "10111011110101011010001011110101", 
    62 => "10111110000101001001100010000001", 
    63 => "10111110000001001111110000011110", 
    64 => "00111101110101011100101011110011", 
    65 => "00111101111111011010101101011100", 
    66 => "10111100110010000101001001001001", 
    67 => "10111110001011100111001010010111", 
    68 => "00111100001010100000001101110100", 
    69 => "10111100101000001101011100010000", 
    70 => "10111110001000001011111001010001", 
    71 => "10111100100001011100101001000100", 
    72 => "10111101010001001100011010001001", 
    73 => "10111110010010010001010100111000", 
    74 => "00111100101100110010000010111111", 
    75 => "00111101110110011001001101001111", 
    76 => "10111101011110011110100101100110", 
    77 => "10111100010110100011001001111011", 
    78 => "00111101110110100111011011011001", 
    79 => "10111101101011100000011100011100", 
    80 => "10111100110111001111001001001001", 
    81 => "10111101010111011100100010111000", 
    82 => "10111101000010101110111011110111", 
    83 => "10111101000100101001110010111011", 
    84 => "00111100111101010101111011110010", 
    85 => "10111110010010110000011111010001", 
    86 => "10111110000101110001110000010001", 
    87 => "10111101111010001110100010100111", 
    88 => "00111011110100100110100010000011", 
    89 => "10111101110110111000110100111111", 
    90 => "00111100010001011001100101100111", 
    91 => "00111101001011101111001111010100", 
    92 => "00111101001010101010000111100101", 
    93 => "00111101001001001111110001010100", 
    94 => "00111100101000010010011011110111", 
    95 => "00111101010000100000000010001011", 
    96 => "00111110000001000101101011100110", 
    97 => "00111101001000010010010001011000", 
    98 => "00111101011101000010001110111110", 
    99 => "10111110000001111110110110000101", 
    100 => "00111110000100100110100100010110", 
    101 => "10111101001000010000101001010111", 
    102 => "00111101100101001000011001011101", 
    103 => "00111100101110111110010010110011", 
    104 => "00111110001000110001101111011111", 
    105 => "00111101101001111010010010010111", 
    106 => "00111110010110101011100000100000", 
    107 => "10111101000111001011101101010111", 
    108 => "00111110000111110010101110101010", 
    109 => "10111001101110001101001111101001", 
    110 => "10111101100101101101011100111010", 
    111 => "00111011111111100010111111011100", 
    112 => "10111100011000100010001000110100", 
    113 => "00111101011111111101101101001101", 
    114 => "00111101110101111111010000010011", 
    115 => "10111011101011111010110101010111", 
    116 => "10111110001000100011010111111000", 
    117 => "00111110001011111011010110001101", 
    118 => "10111100111001110100101111010100", 
    119 => "10111101010010110110100000101110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_14 is
    component inference_conv2d_f3_4_2_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_14_rom_U :  component inference_conv2d_f3_4_2_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


