-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_sm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    X_0_ce0 : OUT STD_LOGIC;
    X_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    W_ce0 : OUT STD_LOGIC;
    W_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    argmax_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    argmax_TVALID : OUT STD_LOGIC;
    argmax_TREADY : IN STD_LOGIC );
end;


architecture behav of inference_sm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_28 : BOOLEAN;
    signal j_fu_120_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_135 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_61 : BOOLEAN;
    signal tmp_i_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_140 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal T_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal T_0_load_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal B_0_load_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_i_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_90 : BOOLEAN;
    signal T_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal T_0_ce0 : STD_LOGIC;
    signal T_0_we0 : STD_LOGIC;
    signal T_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal S_0_ce0 : STD_LOGIC;
    signal S_0_we0 : STD_LOGIC;
    signal S_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_93_ap_start : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_93_ap_done : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_93_ap_idle : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_93_ap_ready : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_93_A_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_93_A_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_93_A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_93_B_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_93_B_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_93_B_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_93_C_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_inference_mult_1_84_84_10_s_fu_93_C_0_ce0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_93_C_0_we0 : STD_LOGIC;
    signal grp_inference_mult_1_84_84_10_s_fu_93_C_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_103_ap_start : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_103_ap_done : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_103_ap_idle : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_103_ap_ready : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_103_A_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_inference_softmax_1_10_s_fu_103_A_0_ce0 : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_103_A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_103_argmax_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_inference_softmax_1_10_s_fu_103_argmax_TVALID : STD_LOGIC;
    signal grp_inference_softmax_1_10_s_fu_103_argmax_TREADY : STD_LOGIC;
    signal j_i_reg_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_172 : BOOLEAN;
    signal grp_fu_110_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component inference_mult_1_84_84_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        C_0_ce0 : OUT STD_LOGIC;
        C_0_we0 : OUT STD_LOGIC;
        C_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_softmax_1_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        argmax_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        argmax_TVALID : OUT STD_LOGIC;
        argmax_TREADY : IN STD_LOGIC );
    end component;


    component inference_fadd_32ns_32ns_32_4_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inference_sm_T_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    T_0_U : component inference_sm_T_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => T_0_address0,
        ce0 => T_0_ce0,
        we0 => T_0_we0,
        d0 => T_0_d0,
        q0 => T_0_q0);

    S_0_U : component inference_sm_T_0
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_0_address0,
        ce0 => S_0_ce0,
        we0 => S_0_we0,
        d0 => S_0_d0,
        q0 => S_0_q0);

    grp_inference_mult_1_84_84_10_s_fu_93 : component inference_mult_1_84_84_10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_mult_1_84_84_10_s_fu_93_ap_start,
        ap_done => grp_inference_mult_1_84_84_10_s_fu_93_ap_done,
        ap_idle => grp_inference_mult_1_84_84_10_s_fu_93_ap_idle,
        ap_ready => grp_inference_mult_1_84_84_10_s_fu_93_ap_ready,
        A_0_address0 => grp_inference_mult_1_84_84_10_s_fu_93_A_0_address0,
        A_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_93_A_0_ce0,
        A_0_q0 => grp_inference_mult_1_84_84_10_s_fu_93_A_0_q0,
        B_address0 => grp_inference_mult_1_84_84_10_s_fu_93_B_address0,
        B_ce0 => grp_inference_mult_1_84_84_10_s_fu_93_B_ce0,
        B_q0 => grp_inference_mult_1_84_84_10_s_fu_93_B_q0,
        C_0_address0 => grp_inference_mult_1_84_84_10_s_fu_93_C_0_address0,
        C_0_ce0 => grp_inference_mult_1_84_84_10_s_fu_93_C_0_ce0,
        C_0_we0 => grp_inference_mult_1_84_84_10_s_fu_93_C_0_we0,
        C_0_d0 => grp_inference_mult_1_84_84_10_s_fu_93_C_0_d0);

    grp_inference_softmax_1_10_s_fu_103 : component inference_softmax_1_10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_inference_softmax_1_10_s_fu_103_ap_start,
        ap_done => grp_inference_softmax_1_10_s_fu_103_ap_done,
        ap_idle => grp_inference_softmax_1_10_s_fu_103_ap_idle,
        ap_ready => grp_inference_softmax_1_10_s_fu_103_ap_ready,
        A_0_address0 => grp_inference_softmax_1_10_s_fu_103_A_0_address0,
        A_0_ce0 => grp_inference_softmax_1_10_s_fu_103_A_0_ce0,
        A_0_q0 => grp_inference_softmax_1_10_s_fu_103_A_0_q0,
        argmax_TDATA => grp_inference_softmax_1_10_s_fu_103_argmax_TDATA,
        argmax_TVALID => grp_inference_softmax_1_10_s_fu_103_argmax_TVALID,
        argmax_TREADY => grp_inference_softmax_1_10_s_fu_103_argmax_TREADY);

    inference_fadd_32ns_32ns_32_4_full_dsp_U49 : component inference_fadd_32ns_32ns_32_4_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => T_0_load_reg_155,
        din1 => B_0_load_reg_160,
        ce => grp_fu_110_ce,
        dout => grp_fu_110_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg assign process. --
    grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_mult_1_84_84_10_s_fu_93_ap_ready)) then 
                    grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg assign process. --
    grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond_i_fu_114_p2 = ap_const_lv1_0)))) then 
                    grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_inference_softmax_1_10_s_fu_103_ap_ready)) then 
                    grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- j_i_reg_82 assign process. --
    j_i_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_inference_mult_1_84_84_10_s_fu_93_ap_done)))) then 
                j_i_reg_82 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                j_i_reg_82 <= j_reg_135;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                B_0_load_reg_160 <= B_0_q0;
                T_0_load_reg_155 <= T_0_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_reg_135 <= j_fu_120_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_75_i_reg_165 <= grp_fu_110_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_i_fu_114_p2 = ap_const_lv1_0))) then
                    tmp_i_reg_140(3 downto 0) <= tmp_i_fu_126_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_i_reg_140(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_i_fu_114_p2, grp_inference_mult_1_84_84_10_s_fu_93_ap_done, grp_inference_softmax_1_10_s_fu_103_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_inference_mult_1_84_84_10_s_fu_93_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond_i_fu_114_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_logic_0 = grp_inference_softmax_1_10_s_fu_103_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    B_0_address0 <= tmp_i_fu_126_p1(4 - 1 downto 0);

    -- B_0_ce0 assign process. --
    B_0_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S_0_address0 assign process. --
    S_0_address0_assign_proc : process(tmp_i_reg_140, grp_inference_softmax_1_10_s_fu_103_A_0_address0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            S_0_address0 <= tmp_i_reg_140(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            S_0_address0 <= grp_inference_softmax_1_10_s_fu_103_A_0_address0;
        else 
            S_0_address0 <= "XXXX";
        end if; 
    end process;


    -- S_0_ce0 assign process. --
    S_0_ce0_assign_proc : process(grp_inference_softmax_1_10_s_fu_103_A_0_ce0, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            S_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            S_0_ce0 <= grp_inference_softmax_1_10_s_fu_103_A_0_ce0;
        else 
            S_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_0_d0 <= tmp_75_i_reg_165;

    -- S_0_we0 assign process. --
    S_0_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            S_0_we0 <= ap_const_logic_1;
        else 
            S_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- T_0_address0 assign process. --
    T_0_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_i_fu_126_p1, grp_inference_mult_1_84_84_10_s_fu_93_C_0_address0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            T_0_address0 <= tmp_i_fu_126_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_93_C_0_address0;
        else 
            T_0_address0 <= "XXXX";
        end if; 
    end process;


    -- T_0_ce0 assign process. --
    T_0_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_inference_mult_1_84_84_10_s_fu_93_C_0_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            T_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_93_C_0_ce0;
        else 
            T_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    T_0_d0 <= grp_inference_mult_1_84_84_10_s_fu_93_C_0_d0;

    -- T_0_we0 assign process. --
    T_0_we0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_93_C_0_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            T_0_we0 <= grp_inference_mult_1_84_84_10_s_fu_93_C_0_we0;
        else 
            T_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    W_address0 <= grp_inference_mult_1_84_84_10_s_fu_93_B_address0;

    -- W_ce0 assign process. --
    W_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_93_B_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            W_ce0 <= grp_inference_mult_1_84_84_10_s_fu_93_B_ce0;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_0_address0 <= grp_inference_mult_1_84_84_10_s_fu_93_A_0_address0;

    -- X_0_ce0 assign process. --
    X_0_ce0_assign_proc : process(grp_inference_mult_1_84_84_10_s_fu_93_A_0_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            X_0_ce0 <= grp_inference_mult_1_84_84_10_s_fu_93_A_0_ce0;
        else 
            X_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, grp_inference_softmax_1_10_s_fu_103_ap_done, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = grp_inference_softmax_1_10_s_fu_103_ap_done))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_inference_softmax_1_10_s_fu_103_ap_done, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = grp_inference_softmax_1_10_s_fu_103_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_172 assign process. --
    ap_sig_bdd_172_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_172 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_28 assign process. --
    ap_sig_bdd_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_61 assign process. --
    ap_sig_bdd_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_61 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_90 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_172)
    begin
        if (ap_sig_bdd_172) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_28)
    begin
        if (ap_sig_bdd_28) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_61)
    begin
        if (ap_sig_bdd_61) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_90)
    begin
        if (ap_sig_bdd_90) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    argmax_TDATA <= grp_inference_softmax_1_10_s_fu_103_argmax_TDATA;
    argmax_TVALID <= grp_inference_softmax_1_10_s_fu_103_argmax_TVALID;
    exitcond_i_fu_114_p2 <= "1" when (j_i_reg_82 = ap_const_lv4_A) else "0";
    grp_fu_110_ce <= ap_const_logic_1;
    grp_inference_mult_1_84_84_10_s_fu_93_A_0_q0 <= X_0_q0;
    grp_inference_mult_1_84_84_10_s_fu_93_B_q0 <= W_q0;
    grp_inference_mult_1_84_84_10_s_fu_93_ap_start <= grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg;
    grp_inference_softmax_1_10_s_fu_103_A_0_q0 <= S_0_q0;
    grp_inference_softmax_1_10_s_fu_103_ap_start <= grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg;
    grp_inference_softmax_1_10_s_fu_103_argmax_TREADY <= argmax_TREADY;
    j_fu_120_p2 <= std_logic_vector(unsigned(j_i_reg_82) + unsigned(ap_const_lv4_1));
    tmp_i_fu_126_p1 <= std_logic_vector(resize(unsigned(j_i_reg_82),64));
end behav;
