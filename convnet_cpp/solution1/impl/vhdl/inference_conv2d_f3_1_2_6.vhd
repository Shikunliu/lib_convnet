-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100001110100000010011011111", 
    1 => "10111110000110100011100110000010", 
    2 => "10111101111011101010001010010000", 
    3 => "10111101110100100110011101000001", 
    4 => "10111110000111101011010111110110", 
    5 => "00111110000000010001011011101100", 
    6 => "00111101010111100110111010011011", 
    7 => "00111110001000010101010000000000", 
    8 => "10111110001001000001010010100101", 
    9 => "00111101111111110011001001111011", 
    10 => "00111101110000011111000101100100", 
    11 => "10111101000010100011111000101101", 
    12 => "10111101000010001000110001111100", 
    13 => "00111101101101111101110111001010", 
    14 => "10111101101101011010000101111010", 
    15 => "10111101101001110101010000001111", 
    16 => "00111101001101000100000000001110", 
    17 => "10111101011001001101101101100111", 
    18 => "10111100001111100100111010000101", 
    19 => "10111110000010000101001101111110", 
    20 => "00111100011111000101100100010111", 
    21 => "00111100111011101100011001010010", 
    22 => "10111011001111110010110101111101", 
    23 => "10111101110010001010110111111100", 
    24 => "00111101111001010101001010100000", 
    25 => "00111100100000110000000001100110", 
    26 => "10111101011110101010001001011110", 
    27 => "10111110001001001101001010110011", 
    28 => "10111100011100010100111010001100", 
    29 => "00111010001001010010110111110111", 
    30 => "10111001111000101110111010101011", 
    31 => "00111101101001010111000011010011", 
    32 => "10111101000010001111000011010101", 
    33 => "00111100001110011010111011100011", 
    34 => "10111100110001001000010111010110", 
    35 => "00111101000010101111001111111111", 
    36 => "10111100100111001100110010111111", 
    37 => "00111101111111010010001100001100", 
    38 => "10111110001101111011010011100101", 
    39 => "10111101011100100000110011111000", 
    40 => "00111101111101001111111110000110", 
    41 => "10111101110001010111100111001010", 
    42 => "00111101100010000010110111110100", 
    43 => "00111101011110011010010110001110", 
    44 => "10111011000101100000001100001100", 
    45 => "10111100111010001000111101101011", 
    46 => "10111011100110000010111101001100", 
    47 => "00111100101111111011110110000101", 
    48 => "10111011110000010011101111001010", 
    49 => "00111101111011000001010111010011", 
    50 => "00111110000001101101111111000110", 
    51 => "10111101101011010111101001010111", 
    52 => "10111110001100011100011100010101", 
    53 => "00111100110001101000010000010011", 
    54 => "10111110001110011010010101100101", 
    55 => "00111010101011001000111101101011", 
    56 => "10111101111111001011100000010111", 
    57 => "10111101000111000000001100000000", 
    58 => "00111101110111110110000000011000", 
    59 => "10111110001000110100101101010001", 
    60 => "00111101000101110000011110000100", 
    61 => "10111101110000000101011110000001", 
    62 => "10111001000011111100111110101000", 
    63 => "00111101011111010010001101011100", 
    64 => "00111011100010001001110100001000", 
    65 => "10111101111110011011110101000000", 
    66 => "00111101001011000101100111000101", 
    67 => "10111101001000110100111000011001", 
    68 => "10111101000110010101011110001010", 
    69 => "10111101100110001001110011110010", 
    70 => "10111101010100010000000111100110", 
    71 => "10111101101101111011000101111101", 
    72 => "00111110010010001011011111100101", 
    73 => "00111101010001110000001000111000", 
    74 => "00111100110110111001100000001100", 
    75 => "00111101100110100110110100110100", 
    76 => "00111101010000101111100110110000", 
    77 => "10111101100001101110001100100001", 
    78 => "00111101010011011111100011100111", 
    79 => "00111011101110110000100010010101", 
    80 => "10111110000111000011001101110010", 
    81 => "10111101110000001101110110010000", 
    82 => "10111101101010100110110000100111", 
    83 => "00111101111011011010101110011111", 
    84 => "10111101010000110011001101110110", 
    85 => "00111101011001101000110011000111", 
    86 => "00111100101101001011100000000011", 
    87 => "10111101000100111011010110001010", 
    88 => "10111101100110110101100000010101", 
    89 => "00111101010010100101010111111010", 
    90 => "00111101010101101010000010100110", 
    91 => "00111100000000110001000011100001", 
    92 => "10111101011100001110101010111001", 
    93 => "10111101110100101110011000100001", 
    94 => "10111101011101000001100000110110", 
    95 => "00111011111100111100010010110011", 
    96 => "10111101001110100001111000100100", 
    97 => "10111101000100000001001111000100", 
    98 => "10111101101010010110010000111010", 
    99 => "10111101101001111000110110000110", 
    100 => "10111101100001110111001111100010", 
    101 => "10111101010110100010101110101011", 
    102 => "10111101000100001000111000111101", 
    103 => "10111101010010101111110100011111", 
    104 => "00111101001011110000111101001101", 
    105 => "00111101110011110110101001010001", 
    106 => "00111010100010000011011000011010", 
    107 => "00111110000001110001000011001011", 
    108 => "10111101101001010100010011110001", 
    109 => "10111101000111101011001000000111", 
    110 => "00111101101010011010111000110100", 
    111 => "10111100000001001000000111111011", 
    112 => "00111101001111110010000011000010", 
    113 => "10111100111011000010111011001000", 
    114 => "10111101000110001011101110011110", 
    115 => "10111101110101000000110101001110", 
    116 => "10111101010100011011010101101010", 
    117 => "10111101100000110010011010011110", 
    118 => "00111110001001100100000011101010", 
    119 => "00111100100101111111100100011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_6 is
    component inference_conv2d_f3_1_2_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_6_rom_U :  component inference_conv2d_f3_1_2_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


