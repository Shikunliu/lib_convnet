-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111101011110111110100110", 
    1 => "10111100110110000011011100101110", 
    2 => "00111101110111111100011111100111", 
    3 => "10111011101000100000001110001011", 
    4 => "10111100100001011000100111100010", 
    5 => "00111101001100110001001100111000", 
    6 => "10111101000101110110110011101001", 
    7 => "10111110000100001111011000100111", 
    8 => "00111110000110100000110010101110", 
    9 => "10111011101100001011111010111010", 
    10 => "00111101101000101100101101100100", 
    11 => "00111101110110100101001010101100", 
    12 => "00111101010101110101101111101101", 
    13 => "10111101111011101010011111001110", 
    14 => "10111101101111100011010001001110", 
    15 => "10111110000111001101100111101000", 
    16 => "00111110000011110011100010000010", 
    17 => "10111101111100100110111110100100", 
    18 => "00111101101111011001010001100101", 
    19 => "00111100110100101100100101100110", 
    20 => "10111100110101111011001110110001", 
    21 => "10111011111101101111000111100100", 
    22 => "00111110010000101110011100101110", 
    23 => "10111101001001011101000100010101", 
    24 => "00111110000111011110101011001101", 
    25 => "00111100100100110010100010011100", 
    26 => "00111101101110101111000101101110", 
    27 => "00111101110011000000110110011000", 
    28 => "10111011110011010100101001100001", 
    29 => "00111110001111111111101001111111", 
    30 => "00111110011011111000110111111000", 
    31 => "00111011111001111101101101011100", 
    32 => "00111101000110111101100011011001", 
    33 => "00111110000110100100001001101100", 
    34 => "00111100111101110110111100111000", 
    35 => "00111100100001111010101001001110", 
    36 => "00111101110101110010101010111111", 
    37 => "10111101010010100110000100010111", 
    38 => "00111110000001100011001111001110", 
    39 => "00111101101011111000110000100010", 
    40 => "00111101101001001111101010001011", 
    41 => "10111110001001000100111110100000", 
    42 => "00111101101100000100110101001000", 
    43 => "00111101111000001010101001100101", 
    44 => "00111011111100110000011101001001", 
    45 => "10111101010000001100111011111101", 
    46 => "10111101010111010010100011010000", 
    47 => "00111101000001100111100011011011", 
    48 => "10111101100110111011000010110000", 
    49 => "10111101111100000010110101011010", 
    50 => "10111101010101001000001100001111", 
    51 => "00111101101101000100111000101001", 
    52 => "00111101001101101010001001010011", 
    53 => "10111101100101010011101010011101", 
    54 => "10111101110011010001001110010100", 
    55 => "00111110001100011110011010001010", 
    56 => "10111110000011010110001010111111", 
    57 => "10111101001101010101011001110100", 
    58 => "10111100110111001010110000001000", 
    59 => "00111101110100110100101101010001", 
    60 => "00111101011010011100010000000100", 
    61 => "10111100111100010011101100001011", 
    62 => "10111101001110100000101101000100", 
    63 => "00111011111101010101110000100011", 
    64 => "10111101001011101101010111110001", 
    65 => "00111101110000001111011010101101", 
    66 => "00111101011000110001111011101001", 
    67 => "10111001101011100101101100001100", 
    68 => "00111110001100101110111001000010", 
    69 => "10111101101110011100100000110110", 
    70 => "10111100010100000001101001011111", 
    71 => "00111101011000010111000100110100", 
    72 => "10111101100000111011000111010001", 
    73 => "10111101101111001100001000000000", 
    74 => "10111101100010110110101111100111", 
    75 => "10111110010001110101010110111101", 
    76 => "10111101101001101101000111000110", 
    77 => "00111101000010110110111101001111", 
    78 => "10111101101010100111100110000110", 
    79 => "10111101101110111001000011000010", 
    80 => "00111101101000100111111010110000", 
    81 => "00111101000101101000010010001100", 
    82 => "00111100111001011110101110000010", 
    83 => "00111110010111001100111100101001", 
    84 => "10111100111001001000000110001010", 
    85 => "00111101000101111111111100110000", 
    86 => "10111101110110001001010100000111", 
    87 => "10111100111111000101011010010011", 
    88 => "10111110001100010010100001111100", 
    89 => "00111101110001110110110111001101", 
    90 => "10111101110010100010001111001101", 
    91 => "00111110001010000110111110001011", 
    92 => "00111101100010101111000011110101", 
    93 => "10111101110001010100110011101001", 
    94 => "10111101110101000010000000101110", 
    95 => "00111110001010111010010110100000", 
    96 => "00111011101111000000110100001100", 
    97 => "10111110001000100111000110111101", 
    98 => "10111101010101010100011010000011", 
    99 => "00111101101101010000100101010100", 
    100 => "00111100111111100011100110001100", 
    101 => "00111011001110110011001101110010", 
    102 => "10111011111100011101100110100010", 
    103 => "10111101111101010100101110001100", 
    104 => "00111110010001011010010001101010", 
    105 => "00111100111111101001010010010000", 
    106 => "00111100010010111101011010011000", 
    107 => "00111110001111111110101110001110", 
    108 => "10111110001011100111100010011110", 
    109 => "00111101010011111000111111011011", 
    110 => "10111011101000000000101010110111", 
    111 => "00111101010101000001100110010010", 
    112 => "10111011111010010100011111011000", 
    113 => "10111110010010100100000011011001", 
    114 => "10111101001010100010000000010100", 
    115 => "10111101101001000101010101001010", 
    116 => "10111110100000001001111010011001", 
    117 => "00111101111011011101011100100011", 
    118 => "10111110000010101110001100011101", 
    119 => "10111101011000001110001010110100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_6 is
    component inference_conv2d_f3_2_1_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_6_rom_U :  component inference_conv2d_f3_2_1_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


