-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111010001001111000110100", 
    1 => "00111101101100000010101110011111", 
    2 => "10111100100111110000000101001101", 
    3 => "10111100000110110101101011110000", 
    4 => "10111100111110011010010010011100", 
    5 => "10111110000000010000111010001000", 
    6 => "10111110000000111111011110001100", 
    7 => "10111101100010101000100101001110", 
    8 => "00111101000011110000100011100111", 
    9 => "10111110000101010011110001011000", 
    10 => "10111101110100100111100110011010", 
    11 => "00111101001011001011001111110011", 
    12 => "10111101100010101100111000001010", 
    13 => "00111101001010101110010110000111", 
    14 => "10111100100001001000100110011101", 
    15 => "10111101101011011011110110101000", 
    16 => "00111101100000010011011101111011", 
    17 => "10111110010010110000100101100011", 
    18 => "10111101110101110010111111111101", 
    19 => "00111101000100111101010111010110", 
    20 => "10111101001101001001010010010010", 
    21 => "10111110001001101101111111000110", 
    22 => "10111101001110110110101101111011", 
    23 => "10111101001101100101111111011001", 
    24 => "10111101100011111001100011010010", 
    25 => "10111110001111000111001000011001", 
    26 => "00111101101001100110000110000110", 
    27 => "00111101100011011101001110010011", 
    28 => "10111101101101011001001001101110", 
    29 => "00111101100001011010111000000010", 
    30 => "10111101001110110111111001000000", 
    31 => "10111101101010001001010111011110", 
    32 => "00111110010000101101110100110111", 
    33 => "10111101100000011010000001111111", 
    34 => "10111110001011011010111011000101", 
    35 => "00111100000001010101100101111011", 
    36 => "00111101110001100000101000000101", 
    37 => "00111101111001110001010011111101", 
    38 => "00111101101000100110000001110000", 
    39 => "10111100001010110111110011110001", 
    40 => "10111101101111000000100001100111", 
    41 => "10111110001001111001001110011010", 
    42 => "00111100011010010001111010101000", 
    43 => "00111100011101101110110100110010", 
    44 => "00111100101000010000010000100111", 
    45 => "10111101100000001111001010110001", 
    46 => "10111100111001010111101111110000", 
    47 => "00111100111111001101010100111110", 
    48 => "00111110000010010110010110110010", 
    49 => "00111110001010100101011111101011", 
    50 => "10111101101010110011101001101001", 
    51 => "10111100111101000111001100111010", 
    52 => "10111101101110011111110010010110", 
    53 => "00111101011110110101110111011010", 
    54 => "10111100100000101100100100111110", 
    55 => "00111101101100111000010011000111", 
    56 => "10111101000000001011010101001100", 
    57 => "00111101101100011011111010110010", 
    58 => "00111110010000010000101011011101", 
    59 => "10111110000000101001100100001111", 
    60 => "00111101011111011110111000101000", 
    61 => "00111101000110110010110010010001", 
    62 => "00111101010001111100010100001011", 
    63 => "00111100101011000001110010111110", 
    64 => "10111101000101000010101011000101", 
    65 => "00111100010111101101010101111000", 
    66 => "10111100010100100101000010011010", 
    67 => "10111101110100110100010110001101", 
    68 => "10111110001110110000010000100101", 
    69 => "10111110001010110010110010000100", 
    70 => "00111101111111110011100000111111", 
    71 => "00111101011101000000010101010110", 
    72 => "10111110001000110010111111001011", 
    73 => "10111100101101010001000111111011", 
    74 => "10111100100101111101000100001101", 
    75 => "00111101000101010111111101011001", 
    76 => "10111101111000100110010011100101", 
    77 => "00111100001101111111010100111010", 
    78 => "00111101100100001010011101011010", 
    79 => "00111101001111111100110000110011", 
    80 => "00111110001010111011111100001110", 
    81 => "10111110001110001111100110110001", 
    82 => "10111101110010011000110100000100", 
    83 => "10111101011100010111101101010011", 
    84 => "10111100110111101011010101100010", 
    85 => "10111100110110010001111001001010", 
    86 => "10111110000010111101011111110101", 
    87 => "10111011101011011101001010100001", 
    88 => "10111101101111000000111101111011", 
    89 => "10111101110101101111010000111000", 
    90 => "10111011111101101110001011100000", 
    91 => "00111100101111000101110000000111", 
    92 => "00111101011000101111101000000000", 
    93 => "00111101010000101111100111001010", 
    94 => "10111101110001000111101000001011", 
    95 => "10111101000011111000011100001100", 
    96 => "00111101001001100010000110111000", 
    97 => "10111101100011101111110001111010", 
    98 => "10111110010110011011001010000001", 
    99 => "10111101000011110100010010101100", 
    100 => "10111110000110000100011001100011", 
    101 => "10111110000010101101000100000111", 
    102 => "00111101111111010001101010101000", 
    103 => "10111101101100100000101111011110", 
    104 => "10111100110000011100001010101110", 
    105 => "00111101111011000111000000000000", 
    106 => "00111100101101011001010010100010", 
    107 => "00111110001100101110011100101110", 
    108 => "10111101101001011001000111000000", 
    109 => "00111011001010001111010100000001", 
    110 => "10111100110101100110010110011101", 
    111 => "10111100011111111110000101100010", 
    112 => "10111101101100110100000011110000", 
    113 => "00111101111111101010010011101100", 
    114 => "00111011111111000110010110101100", 
    115 => "00111101110110010100110010001000", 
    116 => "10111100100000110000011001000101", 
    117 => "10111101101011110110101111010110", 
    118 => "10111100100111001101010111000100", 
    119 => "00111101110000110111001100001111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_2 is
    component inference_conv2d_f3_2_1_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_2_rom_U :  component inference_conv2d_f3_2_1_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


