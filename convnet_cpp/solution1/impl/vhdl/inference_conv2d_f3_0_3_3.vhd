-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111000100000100100111111", 
    1 => "10111100100110110100110111001111", 
    2 => "10111110000010001011100011110001", 
    3 => "10111100010111001010101000100101", 
    4 => "00111100100110100111000011000101", 
    5 => "00111100011010001001111111111101", 
    6 => "00111101111110101001101100000111", 
    7 => "00111101110111100001110110101000", 
    8 => "10111101000101100001110110101110", 
    9 => "00111101110111010111100100000111", 
    10 => "00111101100000001111110111001111", 
    11 => "00111011101101001111110100111000", 
    12 => "10111110010001100101101010011011", 
    13 => "00111110001000101110001000110011", 
    14 => "10111101101111101110101111110110", 
    15 => "10111100111001011010010000110100", 
    16 => "10111101101011000000100010011101", 
    17 => "00111101110111001110000011111100", 
    18 => "00111101001100101011010000111000", 
    19 => "10111101100000010000111100001111", 
    20 => "00111101111101110110111111110100", 
    21 => "00111001000010110100100010001101", 
    22 => "00111110010010010111011001111001", 
    23 => "10111101100000100000011110010010", 
    24 => "00111101100011001100011001110101", 
    25 => "10111101100111101111110001011111", 
    26 => "10111101011001001001000010100011", 
    27 => "00111101111001110000011001001111", 
    28 => "10111100100111010100110000001011", 
    29 => "00111101110100110011000100011010", 
    30 => "10111100111110000010101100011111", 
    31 => "00111110000110101000110110101000", 
    32 => "10111101001001001111111101000011", 
    33 => "00111101100000111011000100110000", 
    34 => "00111110001000010111101111011001", 
    35 => "10111101110110001010101010000110", 
    36 => "10111101101011100001001000111010", 
    37 => "00111101101100111110100101100100", 
    38 => "00111101000001101011111001111011", 
    39 => "00111101111001001110000111100111", 
    40 => "10111100011110011110100010001111", 
    41 => "10111110000111010010011110000000", 
    42 => "00111011111001101010111011100001", 
    43 => "00111100010000101111001100101111", 
    44 => "00111100110001100000010011000111", 
    45 => "00111101101101011110110011000100", 
    46 => "00111101100110001111100000011111", 
    47 => "00111101101001100101010000001101", 
    48 => "00111001001110011010110101111010", 
    49 => "00111101101010101101011101101100", 
    50 => "10111101111000010111000100011001", 
    51 => "10111101011100111111001110011101", 
    52 => "10111110000011011001110010101110", 
    53 => "10111110000100000001000100001010", 
    54 => "10111101010011100100111111101111", 
    55 => "10111100101000111110000000001111", 
    56 => "00111110000010111001000110110100", 
    57 => "00111110010000001110001001111110", 
    58 => "10111101001010011101010110000111", 
    59 => "10111100100110100101010101001100", 
    60 => "00111101101000111010111011000110", 
    61 => "10111110010000111011000000111110", 
    62 => "10111101110110101110100100100101", 
    63 => "00111110001010101011110110100001", 
    64 => "10111101010001000010100100001010", 
    65 => "00111110000101011111011000110100", 
    66 => "10111101001010000100000011111100", 
    67 => "10111100111101010001001101110011", 
    68 => "00111101100000011100110011110100", 
    69 => "00111101001100011000110100100110", 
    70 => "00111101100101001001110010100101", 
    71 => "00111011111011001101101010011111", 
    72 => "10111100111011111101101000011000", 
    73 => "10111101100000000101110011110101", 
    74 => "10111101101101001110100001011010", 
    75 => "10111101010001000011101000000111", 
    76 => "00111110000110110011011110000110", 
    77 => "10111101111010001110001011100011", 
    78 => "10111101111000110000110110110111", 
    79 => "00111101110111110100010011010100", 
    80 => "00111101100111110111100110101101", 
    81 => "10111101101001010010010011001101", 
    82 => "10111100111110000101000000001000", 
    83 => "10111101110110011101111111011011", 
    84 => "00111010011000000100001001001010", 
    85 => "00111100111110011100101000100110", 
    86 => "10111110010101110100010101111100", 
    87 => "00111100100000110111100011111100", 
    88 => "00111101011101001001011011000110", 
    89 => "00111101100110101000100011100011", 
    90 => "10111100111001100000111010001000", 
    91 => "10111101000110000001110101100011", 
    92 => "10111101110000000010110011111100", 
    93 => "10111101101110100110100111001011", 
    94 => "10111101110101010011111101111101", 
    95 => "10111101011101100110111101111000", 
    96 => "00111101001111111010010011100001", 
    97 => "10111101111100110001101110011011", 
    98 => "00111101010100001000101100011000", 
    99 => "00111110000010001010000000001010", 
    100 => "00111101100010100110000001011100", 
    101 => "00111101001010101000101010000011", 
    102 => "00111110000011101011111100100011", 
    103 => "10111101111100000100101010110110", 
    104 => "00111101100111001011010011111111", 
    105 => "00111100111100010100101001011011", 
    106 => "10111110000110110000001100011001", 
    107 => "00111100011001000101110100001100", 
    108 => "10111011011111110000010100101110", 
    109 => "10111101110101110001010010111010", 
    110 => "10111101100100000110000100011001", 
    111 => "00111110000111110101111010000101", 
    112 => "10111100101010010110010111110101", 
    113 => "10111110001100000010101111000111", 
    114 => "10111110001011111110110000010100", 
    115 => "00111101011100100010100001110001", 
    116 => "10111100110010000000000001001010", 
    117 => "00111101001011110100001110100000", 
    118 => "10111101000110010110101101000001", 
    119 => "00111101001110111111001011000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_3 is
    component inference_conv2d_f3_0_3_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_3_rom_U :  component inference_conv2d_f3_0_3_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


