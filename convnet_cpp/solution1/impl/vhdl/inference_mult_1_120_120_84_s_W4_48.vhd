-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_48_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_48_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001101000011110011000000", 
    1 => "00111100010100001111010000001110", 
    2 => "00111101111100011001100100110101", 
    3 => "00111101101110000110001011011011", 
    4 => "10111101000010110011101101001101", 
    5 => "10111101001101001100001010011010", 
    6 => "00111101101111011110100101111101", 
    7 => "00111110000110011000000011110101", 
    8 => "10111101010110100100110110001001", 
    9 => "00111110000001001011000011100010", 
    10 => "10111110001101000010001101010011", 
    11 => "10111101000000001111001001101110", 
    12 => "00111110001001101100110110101111", 
    13 => "10111100110010010011011010101011", 
    14 => "00111110000110101111010100110100", 
    15 => "10111101011110101010110001010100", 
    16 => "00111011000001000101011010010001", 
    17 => "00111101010111011101100101100101", 
    18 => "00111110001001011101100000001110", 
    19 => "10111101100100110100111001110111", 
    20 => "10111101010110000110010110000111", 
    21 => "00111011010011111101100110011101", 
    22 => "00111110000101010100111110111110", 
    23 => "10111101000111010101000011000011", 
    24 => "10111101000101010001001010110111", 
    25 => "00111100011001111111111011101101", 
    26 => "00111100100001011000000110110101", 
    27 => "10111100111000100010101101101110", 
    28 => "10111101010101001111100000101111", 
    29 => "10111101111110100000110001101011", 
    30 => "00111011110111110101111101001100", 
    31 => "10111101101101100011001000000110", 
    32 => "00111110010110000001010000001110", 
    33 => "00111101101100001011110110111101", 
    34 => "10111110001011111001110000100000", 
    35 => "00111101101111110011010001111001", 
    36 => "10111100110010101100000111111011", 
    37 => "00111101110000101110101000010000", 
    38 => "10111100100100010011110001101000", 
    39 => "00111100111000011001110101110100", 
    40 => "10111100010110110000101000010010", 
    41 => "10111101101100101010011110100010", 
    42 => "10111110000101101101001001100111", 
    43 => "10111101101110011100100100001100", 
    44 => "10111101111010101000000100010011", 
    45 => "00111101100111110001110101110101", 
    46 => "00111110001101010100001011100101", 
    47 => "00111101000110000000011000011100", 
    48 => "00111101101111101011101100100111", 
    49 => "00111101100001010110000111111100", 
    50 => "00111101101011110001001101111110", 
    51 => "10111101101110110001100000011111", 
    52 => "00111101000000001110100101001111", 
    53 => "10111101010110011011101000011011", 
    54 => "00111101100010000111110000101101", 
    55 => "10111110000100101010011001101110", 
    56 => "10111101000011001000110010000110", 
    57 => "10111110001100000001101111001010", 
    58 => "10111100111101010011111000000101", 
    59 => "00111100000101000000001011101100", 
    60 => "00111100110001001111011110000001", 
    61 => "00111110001000010010101111100101", 
    62 => "00111101110110110111000111111100", 
    63 => "10111101111010010100110111010111", 
    64 => "00111101100111011000111101101010", 
    65 => "00111100110010101010010100001010", 
    66 => "00111101110010110011000111101010", 
    67 => "00111101000001010101001010111011", 
    68 => "10111101010010010100111101101010", 
    69 => "00111101000011111100001000110000", 
    70 => "10111101010101000111100011001000", 
    71 => "10111101010100101010000100111101", 
    72 => "00111101001110111011101100010010", 
    73 => "00111101011110001010100101000100", 
    74 => "10111100101101100101100111000100", 
    75 => "00111101111001001111010111010011", 
    76 => "10111101001011001100011010000010", 
    77 => "10111110000001110010000011001001", 
    78 => "00111101110000111001100011011100", 
    79 => "00111101100110010100101111001100", 
    80 => "10111101110101011110010000011101", 
    81 => "10111110010101000010011111001000", 
    82 => "00111101110011000100011011011000", 
    83 => "10111101100010010101011100111010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_48 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_48 is
    component inference_mult_1_120_120_84_s_W4_48_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_48_rom_U :  component inference_mult_1_120_120_84_s_W4_48_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


