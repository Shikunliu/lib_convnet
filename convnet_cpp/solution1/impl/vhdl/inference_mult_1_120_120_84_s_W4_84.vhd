-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_84_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_84_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110000100110010101101011", 
    1 => "10111010101100011001000100110010", 
    2 => "00111110000011110101100000111010", 
    3 => "00111110000110010101100011011010", 
    4 => "00111110000110011111110001101110", 
    5 => "10111101111100101011010101011111", 
    6 => "10111101101001011001011011010110", 
    7 => "10111101111010101011010110000000", 
    8 => "10111101000000111000110010010111", 
    9 => "10111101100101100001000011111110", 
    10 => "10111100110000010011010010110011", 
    11 => "10111101101100110000111001110011", 
    12 => "10111101000110001001011100111011", 
    13 => "10111110001101110111010111111011", 
    14 => "00111101000100011000111001001101", 
    15 => "10111110010000011011101101001001", 
    16 => "10111110001000110110000110011001", 
    17 => "00111101111001101110010101000111", 
    18 => "10111110000101010010110010011101", 
    19 => "10111110000000010110000101011111", 
    20 => "00111101000010100011001000111000", 
    21 => "00111101000111000100110010110111", 
    22 => "10111101101001111001001010011011", 
    23 => "00111110001111000011011000010001", 
    24 => "00111101001000100001110011000000", 
    25 => "00111101111010011110000000011110", 
    26 => "10111110000011101011001100010100", 
    27 => "10111110001111001110001100010101", 
    28 => "10111101110000000000110010110000", 
    29 => "10111101100000111010000111000110", 
    30 => "10111011100011010001001111111010", 
    31 => "10111101101110011001011001100111", 
    32 => "10111101100001011011110110010100", 
    33 => "00111100101001100110111100000000", 
    34 => "00111110001011110010001001111101", 
    35 => "10111101110101111100100000001000", 
    36 => "00111101011001100011111000001000", 
    37 => "10111101111001111101010101100111", 
    38 => "00111101101000101010100110101110", 
    39 => "10111101101111001110011110001010", 
    40 => "10111101101000011001100100101000", 
    41 => "10111101100111001000101000001111", 
    42 => "10111101001001101000010000101110", 
    43 => "10111101111010001111001000010111", 
    44 => "00111100011011100101011111001100", 
    45 => "00111100110001111001111111010010", 
    46 => "00111101100011100000111000010101", 
    47 => "10111101110001010010010111100111", 
    48 => "00111110000001100001110100000000", 
    49 => "10111110000000111110111110101110", 
    50 => "10111101110000010010010010000000", 
    51 => "00111100101110011010011001111111", 
    52 => "00111110000111011010010101010101", 
    53 => "10111110001001000110110101000000", 
    54 => "00111101101100010110000011001011", 
    55 => "10111100111010111011110011100111", 
    56 => "00111101100100110011100011011101", 
    57 => "00111110000001110100011000000010", 
    58 => "00111101110100110001111011000001", 
    59 => "10111101100111110011011010010010", 
    60 => "00111110001110000100101001010001", 
    61 => "10111101111001001110100100111110", 
    62 => "10111101100010011000110111011011", 
    63 => "00111101101110000110101111101101", 
    64 => "10111110010010110111011100111010", 
    65 => "10111101101101011111011011010101", 
    66 => "10111101010100011001111001011000", 
    67 => "10111110000001010110100001100010", 
    68 => "10111100110100011111000101100100", 
    69 => "10111101100100000110011011000011", 
    70 => "00111101111001000100011100111101", 
    71 => "00111110001011011101010001000001", 
    72 => "10111101100101001011010100100001", 
    73 => "00111101011110001100100100111111", 
    74 => "00111110001001101110110010011110", 
    75 => "10111110010111011011010101010010", 
    76 => "10111101110111110111011100101001", 
    77 => "00111101001001010100001010010101", 
    78 => "10111101110111001010000110001100", 
    79 => "00111001001001110100111100000110", 
    80 => "00111101100111011111111010000011", 
    81 => "00111101010011001111100010111100", 
    82 => "10111010100111001111111000101000", 
    83 => "00111101100000111011011010110001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_84 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_84 is
    component inference_mult_1_120_120_84_s_W4_84_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_84_rom_U :  component inference_mult_1_120_120_84_s_W4_84_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


