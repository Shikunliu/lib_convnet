-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001110101111010000101000", 
    1 => "10111101100111011110101010100100", 
    2 => "00111110011011001101011011000011", 
    3 => "10111100111100011100010011010100", 
    4 => "00111101100000000101011010011101", 
    5 => "00111101011000100110001100110111", 
    6 => "00111100101111001110111001101000", 
    7 => "10111110000000010001011010101001", 
    8 => "00111100001101100101011110101011", 
    9 => "00111100111110000001110110110011", 
    10 => "00111110001000111101101001110011", 
    11 => "10111101101001011011000111001000", 
    12 => "00111101100100010110010110101011", 
    13 => "10111110001011110011111001000111", 
    14 => "00111101101011000001010000001010", 
    15 => "10111101101000011001100011111111", 
    16 => "00111100011111000101111011110110", 
    17 => "10111110000000101100110111000000", 
    18 => "10111110000100011110011000000100", 
    19 => "00111101010010000001110111000001", 
    20 => "10111110000100101110010101011000", 
    21 => "10111100111011010010101000111010", 
    22 => "00111110001001011100111010011110", 
    23 => "00111101111111011000000111110001", 
    24 => "00111101100100101001110011110000", 
    25 => "00111101001101111111110001011011", 
    26 => "00111100011010110100101001100110", 
    27 => "00111101011110100101110011110011", 
    28 => "00111100011110100010110000010110", 
    29 => "00111100001101110010011110110100", 
    30 => "00111101101010001010001001100110", 
    31 => "00111101001011011000110001111011", 
    32 => "10111101111000101100001101000100", 
    33 => "10111101111101011000110010001111", 
    34 => "10111100110000100110011011100011", 
    35 => "00111100001000101001011111111011", 
    36 => "00111100111111010110110010101000", 
    37 => "10111110000111100001001110110010", 
    38 => "10111101101011001001110011101111", 
    39 => "10111100011011111000111000101101", 
    40 => "10111101001010110101111000111000", 
    41 => "00111101110000101000011111000010", 
    42 => "10111110000110110010000111000100", 
    43 => "00111011100001010101001101100111", 
    44 => "00111101110101001011110101110111", 
    45 => "10111100110001100101010110000101", 
    46 => "10111110000010000111010011001001", 
    47 => "00111101010011111000101010110111", 
    48 => "10111101011110001010010101111110", 
    49 => "00111100111110101111000010010111", 
    50 => "10111011100110001100101000100110", 
    51 => "10111101110001101000010101001000", 
    52 => "00111101000000000001011011011100", 
    53 => "10111110001101101011110000011111", 
    54 => "00111100101110000111001000000010", 
    55 => "00111101010101011101010000010010", 
    56 => "00111110000010001100100111111011", 
    57 => "00111101110011100001100100110011", 
    58 => "10111101010010100011110001100100", 
    59 => "10111100000101101110000110000011", 
    60 => "10111110001001101110101001000010", 
    61 => "10111011110101010100001011101000", 
    62 => "00111100011110100001100001011111", 
    63 => "10111101111001011000101100111111", 
    64 => "10111101000011000001111000000001", 
    65 => "00111110000011011110001111111100", 
    66 => "10111110000111110011111101010011", 
    67 => "10111101100010010010010001111001", 
    68 => "00111101010100110100010010110110", 
    69 => "10111110000001010011111100111010", 
    70 => "10111101101110001011101110000011", 
    71 => "10111110001000000000101101000110", 
    72 => "00111100001111010001110110011000", 
    73 => "10111101011100110110101110111000", 
    74 => "10111100100000101001101001000100", 
    75 => "10111100101001001100010001110000", 
    76 => "10111101000010110100000101111101", 
    77 => "00111101001110001110101110111111", 
    78 => "00111100111111111010001110000100", 
    79 => "00111101000110100111010111101000", 
    80 => "00111101001110110000100111011100", 
    81 => "10111101111101001110111101000110", 
    82 => "10111110011010101101010000101100", 
    83 => "10111100101001111101010010010000", 
    84 => "10111110011010101000000000000110", 
    85 => "10111101101101001111100100101110", 
    86 => "10111100001110011111010000011000", 
    87 => "10111101110110110001001010010000", 
    88 => "10111110000110100100001100110101", 
    89 => "10111101010001000100110110111101", 
    90 => "00111110000101011000010110111110", 
    91 => "10111110001111100111111100101100", 
    92 => "00111101001101101111110110101000", 
    93 => "00111100110011111001001001000100", 
    94 => "00111001111101100111001110011000", 
    95 => "00111110000101110000000111011010", 
    96 => "10111101000100010110000110000111", 
    97 => "00111101100000111000000101010010", 
    98 => "10111101000010101011000001011101", 
    99 => "10111101111001100111111010000100", 
    100 => "00111101000001101010000101010100", 
    101 => "10111101101010000000110011000100", 
    102 => "00111100111100000101111011011000", 
    103 => "00111110000101011111010100100111", 
    104 => "00111110000110010100100010011001", 
    105 => "00111101101000111001110001000100", 
    106 => "10111101000100101111011101101110", 
    107 => "10111101110000111111110000011011", 
    108 => "10111011000111101101110111010001", 
    109 => "00111110000011110110001100111101", 
    110 => "10111101011001000110000000010111", 
    111 => "10111101101111001010010100110111", 
    112 => "00111101111110000010000110101111", 
    113 => "00111010111010010010111101011001", 
    114 => "10111100101000110100000001000001", 
    115 => "00111110001001011011110110010100", 
    116 => "10111100111010101010101101110000", 
    117 => "10111101101000000111100010010110", 
    118 => "10111110011010001100010001111010", 
    119 => "10111101111010011100111111011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_6 is
    component inference_conv2d_f3_3_1_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_6_rom_U :  component inference_conv2d_f3_3_1_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


