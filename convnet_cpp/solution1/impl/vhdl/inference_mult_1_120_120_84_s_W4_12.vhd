-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100010101111101111000010", 
    1 => "00111110001000010000000110110000", 
    2 => "10111100100011010010111110010011", 
    3 => "00111101001101101101111110101011", 
    4 => "10111100011101111111101000001101", 
    5 => "00111101110011011111101011001010", 
    6 => "00111101101001101100100110001011", 
    7 => "00111101010001000000101110101110", 
    8 => "00111110000000011100001011100011", 
    9 => "10111101110000011101100101000110", 
    10 => "10111110000001011001110001001001", 
    11 => "00111101011000110011110111011000", 
    12 => "00111101000001001001101111000001", 
    13 => "00111101000010011010010010101010", 
    14 => "00111101000001101101111001011011", 
    15 => "00111110001111010010101010100110", 
    16 => "00111101110001101100001010111010", 
    17 => "00111100111101001011000011100010", 
    18 => "00111101011010000101111011111010", 
    19 => "00111110010100101110101010010110", 
    20 => "00111101101101000110111100111110", 
    21 => "00111101010010001110110110010101", 
    22 => "10111101011010011000100000001001", 
    23 => "10111100100110000101111000110000", 
    24 => "00111110010011111111011001001101", 
    25 => "10111100100111000011010100100000", 
    26 => "10111010110111011110000001000101", 
    27 => "00111101010101010000110111001001", 
    28 => "10111110000001010111000110001111", 
    29 => "10111101110010000110000111011100", 
    30 => "00111100100101100011110100100011", 
    31 => "00111110001011101000011001000000", 
    32 => "10111110000000000100001000001111", 
    33 => "10111100111001101101100110111110", 
    34 => "10111100000010110100001000010011", 
    35 => "00111101100100010010100011001101", 
    36 => "00111101100001000111111100000110", 
    37 => "00111101111110011110100011000100", 
    38 => "10111101110101110110100000010110", 
    39 => "10111101100110110111100010110010", 
    40 => "00111110001011111010110011100110", 
    41 => "10111101100101010111110111100001", 
    42 => "10111110001011010100011100111001", 
    43 => "10111101111110110011101011101111", 
    44 => "10111100110000011011111110001000", 
    45 => "00111110001001000111001011000001", 
    46 => "10111100111001001001100101110010", 
    47 => "10111101101110000010101001110001", 
    48 => "00111110001110110101100101011000", 
    49 => "10111101100011011111100010001001", 
    50 => "00111100100011010110001110010110", 
    51 => "00111101110110000011010010001111", 
    52 => "00111110001100110011001111111101", 
    53 => "00111110001111111001110110110010", 
    54 => "10111101010010111100101100101010", 
    55 => "10111101111110110101001110010011", 
    56 => "00111101101101100110100100010011", 
    57 => "00111101010010010011001001011110", 
    58 => "10111101011010000000100001000010", 
    59 => "00111011001101011100001100011011", 
    60 => "00111110000010000111110001100011", 
    61 => "00111110000001010010001010100111", 
    62 => "00111011111100010110110100010101", 
    63 => "10111100110111100100101000111000", 
    64 => "00111110010000110001000011011100", 
    65 => "10111101011101100010111011111100", 
    66 => "00111100000011010100101110001101", 
    67 => "10111101110101111010000100111100", 
    68 => "00111101010001000101101111001010", 
    69 => "10111110000110111100110000101001", 
    70 => "10111100000111110110101111110110", 
    71 => "00111110001101010110101111001010", 
    72 => "10111100111001101000110011111101", 
    73 => "00111101110000111010001001100111", 
    74 => "00111110001000100011000000110100", 
    75 => "10111101100011001110011111000000", 
    76 => "10111100110000111011010100101100", 
    77 => "00111101011101100111110101010000", 
    78 => "00111101001011101010111010011111", 
    79 => "00111110001000011101011100010011", 
    80 => "10111110001110010010110100010011", 
    81 => "10111101100001101000111101011001", 
    82 => "10111110000100010010000100100101", 
    83 => "10111100101001110000110001001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_12 is
    component inference_mult_1_120_120_84_s_W4_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_12_rom_U :  component inference_mult_1_120_120_84_s_W4_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


