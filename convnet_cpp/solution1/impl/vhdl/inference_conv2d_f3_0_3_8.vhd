-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100010001001001110011101000", 
    1 => "10111101101111110011001000001111", 
    2 => "10111110010101101101110010100000", 
    3 => "00111110000101101001010010001010", 
    4 => "00111101111010000101000000010110", 
    5 => "10111110010000001001100010010001", 
    6 => "00111110011001101000001111000011", 
    7 => "10111110010000001010011000110011", 
    8 => "10111100111001001011110001000010", 
    9 => "00111110000000001011111111100100", 
    10 => "00111100101011011001001001110101", 
    11 => "00111101111010111110101101011011", 
    12 => "00111110000010110100010000011100", 
    13 => "00111101110011000000010001111000", 
    14 => "10111100110110110011010101111011", 
    15 => "10111101110001000100111011010111", 
    16 => "00111101011000110010011100110010", 
    17 => "10111101100011100001101101110100", 
    18 => "00111101101011110010010000111000", 
    19 => "10111101101101101001110101001011", 
    20 => "00111110000110001111101010111110", 
    21 => "00111101100110100100101000000110", 
    22 => "10111100101010011110000100001111", 
    23 => "00111100100100111101111011011010", 
    24 => "10111101100100011010011001101011", 
    25 => "00111100111001011011010011000101", 
    26 => "10111110010010011100110011111011", 
    27 => "10111011100100110100000000001110", 
    28 => "00111110010001010000100101111101", 
    29 => "00111101000110101010110101100000", 
    30 => "10111110000011010001001100001110", 
    31 => "10111100110011001000101111001010", 
    32 => "00111100101100001101001101110010", 
    33 => "10111101101101111000110011110010", 
    34 => "10111110001101010100100111111001", 
    35 => "10111100111111110010100010011111", 
    36 => "00111101111110111011100011000011", 
    37 => "10111101100011011010011000010001", 
    38 => "10111101110101111011010000011100", 
    39 => "00111101100000001111011001000010", 
    40 => "00111011100110100111101111000010", 
    41 => "00111011011100101001001000000011", 
    42 => "10111101110111010001110000111011", 
    43 => "10111110100101100000100111111111", 
    44 => "10111101100000011001000011101100", 
    45 => "10111101001001000001001110001011", 
    46 => "10111101111010000101110100110001", 
    47 => "10111110010011110111101010010010", 
    48 => "00111101000001000101101010100011", 
    49 => "00111110010100011000101001000100", 
    50 => "10111101110100100000101011111010", 
    51 => "00111101111100001010000110111110", 
    52 => "10111100010111110011101010001110", 
    53 => "00111110011001011110101100110001", 
    54 => "00111100011110111010110111110110", 
    55 => "10111101110101101011000100011100", 
    56 => "00111110010001000011111000010000", 
    57 => "10111101100100100100101111110000", 
    58 => "10111110000001000111000100101110", 
    59 => "00111110001101100011011000101010", 
    60 => "10111101101111011000101000010001", 
    61 => "00111101110011010101111100010100", 
    62 => "10111100010000000010010110001010", 
    63 => "10111100001110010101101010010101", 
    64 => "10111100011100101101000011011000", 
    65 => "00111100111011001011101011011111", 
    66 => "10111100011100110110100110000100", 
    67 => "00111101010111100010110110011000", 
    68 => "10111101011011101000111101111010", 
    69 => "00111110001011001100001100011010", 
    70 => "00111110000001011110111001010111", 
    71 => "00111110001111011000011100101111", 
    72 => "10111110001101100000010101101000", 
    73 => "10111101011000001101000110110111", 
    74 => "10111101100110111011110000011110", 
    75 => "00111011001001101100001111111010", 
    76 => "10111110000111110110001110000000", 
    77 => "00111101001100110000010000111001", 
    78 => "10111101111010110101000100110111", 
    79 => "10111110000110111001001000111010", 
    80 => "10111101010010111101010101110001", 
    81 => "00111100110010001001000100110100", 
    82 => "10111101100110111001010000011101", 
    83 => "00111101011001111000101001101110", 
    84 => "00111011011001001011000101110000", 
    85 => "10111101100011010110100010111001", 
    86 => "10111110000001001000000011101001", 
    87 => "00111110000101110111110001000110", 
    88 => "10111100010100101001110000011010", 
    89 => "00111100001101010110110001011110", 
    90 => "00111101011001011000101000011000", 
    91 => "10111101101011011101010010011111", 
    92 => "10111110001110000000111001001001", 
    93 => "10111011100011101000111110010000", 
    94 => "10111101000011001010111001001001", 
    95 => "10111110000101010110010011111001", 
    96 => "00111101000100011101110001010001", 
    97 => "00111110000000010111010100001000", 
    98 => "00111110000100001111111100010001", 
    99 => "10111101010011100111010000011100", 
    100 => "00111100100011011011100011110000", 
    101 => "10111101010111011111101011011000", 
    102 => "10111101101011011100111011101000", 
    103 => "00111101101001101000101010101110", 
    104 => "10111110000101011110010100101010", 
    105 => "00111110010000110010111010111110", 
    106 => "10111110000101011110001011001110", 
    107 => "00111101000100101100100000111111", 
    108 => "00111101001011010101100001111000", 
    109 => "00111011100001110100110001111011", 
    110 => "10111110010000010111010100001000", 
    111 => "10111101100010101100011000000100", 
    112 => "00111101011010111111100111010100", 
    113 => "00111110000010000010110000101100", 
    114 => "10111110010000000010100000011100", 
    115 => "10111101011011111001100100010101", 
    116 => "10111011001011000101000000000000", 
    117 => "00111101101110111100101001111100", 
    118 => "00111101101100101110000100100110", 
    119 => "00111110000010100100001111111110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_8 is
    component inference_conv2d_f3_0_3_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_8_rom_U :  component inference_conv2d_f3_0_3_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


