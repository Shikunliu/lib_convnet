-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010011001101000000110101", 
    1 => "10111110000011110110001100111101", 
    2 => "10111011000101100000010010001111", 
    3 => "10111101010010100001111101011001", 
    4 => "10111110001011011011111101001000", 
    5 => "10111101011110000110110101111111", 
    6 => "00111101101011001111001101001000", 
    7 => "00111011101011001010001100110111", 
    8 => "10111101010000111001111010111011", 
    9 => "00111100101001000001110000111111", 
    10 => "00111101111011100110001100100000", 
    11 => "10111110000111011001101100011011", 
    12 => "00111101010001011010010010100000", 
    13 => "10111101101111001011101100000111", 
    14 => "10111101001010010100001010111010", 
    15 => "00111101011101111011110011010000", 
    16 => "10111110001001000101011111000001", 
    17 => "10111110000010101100010011111000", 
    18 => "00111101101010001111010000111101", 
    19 => "00111011111101110100001000010110", 
    20 => "10111101101101001000100101001100", 
    21 => "00111100110100000001010111000010", 
    22 => "00111101100010111000001001001010", 
    23 => "00111101110000011111001100111010", 
    24 => "10111101010100000110101000101011", 
    25 => "10111101110011011001111110010000", 
    26 => "00111101011111001110110000110100", 
    27 => "10111101101000101000001010101100", 
    28 => "00111110000110000011010000001001", 
    29 => "10111101100100000001110111100010", 
    30 => "00111110000010100011100011111100", 
    31 => "00111101100000101101110001000110", 
    32 => "00111101000111100100101010100100", 
    33 => "10111100110010110110001011010101", 
    34 => "00111110000101011111001001000101", 
    35 => "10111101110111001101010111111010", 
    36 => "00111100111111101101101010011100", 
    37 => "00111110000100011000110001011101", 
    38 => "00111101000110111110111101100101", 
    39 => "00111100000001101111110110100000", 
    40 => "00111011100000010100010011100100", 
    41 => "00111100111000000011011000000000", 
    42 => "10111101111111100110010011110101", 
    43 => "00111011111000001001111001010000", 
    44 => "10111011001001001010110001110010", 
    45 => "00111101101010111111100001000001", 
    46 => "10111101111110100000011010100111", 
    47 => "10111110000001101111110101100101", 
    48 => "00111101010110100101101000000100", 
    49 => "00111110000111110010111011001111", 
    50 => "10111110001001101100101101010011", 
    51 => "10111110000001010000110011100101", 
    52 => "00111101100110111101010100111011", 
    53 => "10111101100101101011011001001101", 
    54 => "00111101001000110101001101010111", 
    55 => "10111101111110000111011000011001", 
    56 => "00111100010111111101000100100001", 
    57 => "00111101110010100001011111011001", 
    58 => "00111101100010101000111000000110", 
    59 => "10111110001010001010010100000101", 
    60 => "00111101001001110010001011101111", 
    61 => "00111100110110100111011100001111", 
    62 => "00111110000011001011111001100010", 
    63 => "10111101000110100010101000011000", 
    64 => "10111101100010101001100001100111", 
    65 => "10111100110101000111010111011001", 
    66 => "00111101000011000111100100100000", 
    67 => "00111101011011000100100011100100", 
    68 => "00111101001010110001001010111000", 
    69 => "10111101101011111011110110000101", 
    70 => "00111100111111110111110000010111", 
    71 => "00111101010010111110010101000110", 
    72 => "10111101110001101111000101111110", 
    73 => "00111101111001000000111100100100", 
    74 => "00111101100111111100100111100101", 
    75 => "10111101100010010010000011001110", 
    76 => "10111101011011011010101001000010", 
    77 => "00111101100000111100000110110100", 
    78 => "10111101111001111101011110000000", 
    79 => "00111101110111100000111110000000", 
    80 => "10111101010011100110100110100000", 
    81 => "00111101100111110101111011010101", 
    82 => "10111101011100001111101000111110", 
    83 => "10111110001011111001001110111100", 
    84 => "10111100111110011000110011101010", 
    85 => "10111101110111001011000101000110", 
    86 => "00111110001100000110100110100101", 
    87 => "00111101111011000100010100000010", 
    88 => "00111100010011000101000101111101", 
    89 => "00111100101101101100011001100110", 
    90 => "00111110001001000010111001010101", 
    91 => "10111101001000010000000000101011", 
    92 => "10111101110111110000110101000001", 
    93 => "10111101110001010110110110111011", 
    94 => "10111011111001101110110010011110", 
    95 => "00111101111001011110111011011101", 
    96 => "00111100010101001011000100110010", 
    97 => "00111011000101011101011101101101", 
    98 => "00111101011010111010110010100111", 
    99 => "00111100100010101010101010110100", 
    100 => "00111100010111110011110101111101", 
    101 => "10111100101010111101111001000000", 
    102 => "10111110000000001101100111010111", 
    103 => "00111101110001101110101101000001", 
    104 => "10111100110010111011000101000100", 
    105 => "00111101101000000001010101100100", 
    106 => "10111101001010011111101000111010", 
    107 => "00111011110001011010100000000000", 
    108 => "10111100000000011100000101010110", 
    109 => "00111101101101000110101001111000", 
    110 => "10111101101101010011110001011000", 
    111 => "00111101110101010010101100001010", 
    112 => "00111110010000100001111101101101", 
    113 => "10111100110110011001110010001001", 
    114 => "10111101110101110001001110101101", 
    115 => "10111101100010110110101011011010", 
    116 => "10111110000000100111101011101010", 
    117 => "10111110000111000111100000100001", 
    118 => "00111100110110001100100101011010", 
    119 => "10111101111000001000010100101011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_8 is
    component inference_conv2d_f3_4_4_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_8_rom_U :  component inference_conv2d_f3_4_4_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


