-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001010001100011110011111", 
    1 => "00111101010010110001111001110111", 
    2 => "10111101101000101100000010110010", 
    3 => "10111110000011110001111000001000", 
    4 => "10111101100010010110101100001011", 
    5 => "00111110001000000001000001000001", 
    6 => "10111101001101011010001001111001", 
    7 => "10111101110101100110010110011101", 
    8 => "00111011100101110011010101111100", 
    9 => "00111110001001000010010000011100", 
    10 => "00111101001110100001110110111000", 
    11 => "00111101111110010110010000011111", 
    12 => "10111101011111010000101110001111", 
    13 => "10111101110100110001111000111010", 
    14 => "00111100010111111000110110011010", 
    15 => "10111100100101100100110000111101", 
    16 => "10111101101101110100111001100110", 
    17 => "10111101011011101010100011011010", 
    18 => "10111101001001010000010110101001", 
    19 => "00111101010000011001100111001001", 
    20 => "10111101011110101100000111010011", 
    21 => "10111100001010110011000111011101", 
    22 => "00111011110110000001100010000101", 
    23 => "00111101001000000101100000101111", 
    24 => "10111101110101101000101101011101", 
    25 => "00111110000110010111110110001101", 
    26 => "10111101111101000010100010010001", 
    27 => "00111101000101101010001101000101", 
    28 => "00111110000010100001001001110011", 
    29 => "10111101111111010110001110001000", 
    30 => "10111100000111111000000001011001", 
    31 => "00111100000111100110101000111001", 
    32 => "00111110001100011100010010111001", 
    33 => "00111101010100111000001011001001", 
    34 => "10111110000011000011101100001100", 
    35 => "00111010011011000110001101011010", 
    36 => "10111100100100100101011011100101", 
    37 => "00111101100101101100100010110100", 
    38 => "00111100111001100011100110000101", 
    39 => "10111101100001000100100011011101", 
    40 => "00111110000010011011010101100011", 
    41 => "10111101110100000000100010100111", 
    42 => "10111101100011010001000011101000", 
    43 => "00111100111110011000100000010111", 
    44 => "00111101111001110010101110001000", 
    45 => "00111101001111100011011100100011", 
    46 => "10111110000001001000101010011100", 
    47 => "00111101101111011111101110010100", 
    48 => "10111100110110111101101001010001", 
    49 => "00111101101110100000010010101001", 
    50 => "00111101100100010111011111111000", 
    51 => "10111101101101010000110011100101", 
    52 => "10111100110011011101001111001000", 
    53 => "00111101000000011000000100111111", 
    54 => "10111101010011010111111101011111", 
    55 => "00111101100110010101101111001001", 
    56 => "00111110001001100101100000111111", 
    57 => "10111101001111010111000110110000", 
    58 => "10111101101000101111011011000000", 
    59 => "00111101010001010100101111001111", 
    60 => "10111011100110110100100011011100", 
    61 => "00111110001000110110010101000101", 
    62 => "00111101111000010101011001011100", 
    63 => "10111110000011101000001011011000", 
    64 => "00111011000110100101001011010010", 
    65 => "00111101110001110110111101100000", 
    66 => "00111110010000110100000000001100", 
    67 => "00111101100100101110101101011111", 
    68 => "10111011101111001111100110110001", 
    69 => "00111110010011011011110101110011", 
    70 => "00111101011011100101111000110010", 
    71 => "10111101101000101001110111101111", 
    72 => "00111101110000010011110111010011", 
    73 => "00111101101000001011011011010010", 
    74 => "00111101100111011101101111001110", 
    75 => "00111100110111010101000000000111", 
    76 => "00111101001101101000111110001110", 
    77 => "10111101101001110010111011001000", 
    78 => "10111110001100110010000010010110", 
    79 => "10111100100011100001111000000110", 
    80 => "00111101101011010110011100110100", 
    81 => "10111110000000111001101110001001", 
    82 => "00111101110010001111100010110010", 
    83 => "10111101111110110101010100100110", 
    84 => "00111101101100010100100100110011", 
    85 => "10111101101010000111110101111101", 
    86 => "00111101011100000000111001101011", 
    87 => "10111011111110101011110110100001", 
    88 => "00111110000110001100100110111000", 
    89 => "00111011111100000101001010111001", 
    90 => "00111101010111010101100101011101", 
    91 => "10111110010010000101101000001100", 
    92 => "10111110001010011011100011001100", 
    93 => "00111110000010100000100110001001", 
    94 => "10111101000100101011101110101010", 
    95 => "00111101111111001001111011101101", 
    96 => "10111110000001001101000111101001", 
    97 => "10111110010010101100100000011101", 
    98 => "10111101100000101000111011010110", 
    99 => "10111011111010111110100100011101", 
    100 => "00111110010101011111100000001010", 
    101 => "10111101011000100101111001001001", 
    102 => "00111101100100110000110000111111", 
    103 => "00111100101001001011100001111100", 
    104 => "10111101001111011000010110000010", 
    105 => "10111110010010000000000111110111", 
    106 => "00111101010011000101100100111111", 
    107 => "10111110001101011110010000011101", 
    108 => "00111101101010101011001000110011", 
    109 => "10111011110100101010100100110000", 
    110 => "00111110000000010001100100000101", 
    111 => "00111110010010001110010010111000", 
    112 => "10111101000000010111010101001011", 
    113 => "00111101001101011110100110101100", 
    114 => "10111100111000100010010001001101", 
    115 => "10111110010101001100101110011111", 
    116 => "10111101100101101000001101110010", 
    117 => "00111010110111001001101001110101", 
    118 => "10111100110000010100001011110110", 
    119 => "10111110000110101000001101101111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_4 is
    component inference_conv2d_f3_0_0_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_4_rom_U :  component inference_conv2d_f3_0_0_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


