-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011011101001100010110101", 
    1 => "00111101101010100000000111101111", 
    2 => "10111011101100110010001111101111", 
    3 => "10111100100000110010101111001111", 
    4 => "00111010101110101101111111100101", 
    5 => "00111101100000111000110001101111", 
    6 => "10111101001111001011101000110000", 
    7 => "00111100011100101010001010110101", 
    8 => "00111110000000000111010110110100", 
    9 => "00111101100101001101110010000001", 
    10 => "00111100100011011000111110100000", 
    11 => "00111101100010011101110010000000", 
    12 => "10111100101100001111101100010101", 
    13 => "10111110000010001100110001010111", 
    14 => "00111110000101101011111111001011", 
    15 => "10111101111000000010100001011111", 
    16 => "00111101101100111111111111100010", 
    17 => "10111101110110011110001110000110", 
    18 => "10111101001001010010111111010000", 
    19 => "00111101000000000001000000100110", 
    20 => "10111101101011110000000100100101", 
    21 => "00111101100010101111111100111000", 
    22 => "00111101100001110000110111101001", 
    23 => "00111100111010110011011110000110", 
    24 => "00111110000101010000100001110000", 
    25 => "00111100011110100110110100011001", 
    26 => "10111101110101100111110000101000", 
    27 => "00111011001000000100011111011111", 
    28 => "00111100100110000010111111010111", 
    29 => "10111110000010000010111110010100", 
    30 => "10111101101000110111111000010001", 
    31 => "00111110000011011100110010100111", 
    32 => "00111101100011011011011110010011", 
    33 => "00111101100010011111110010111110", 
    34 => "10111110000000010110010011000111", 
    35 => "10111100000001011001111010000101", 
    36 => "00111110000011101111010110101001", 
    37 => "00111100101100000010000000100100", 
    38 => "10111011001010100111101110010100", 
    39 => "00111101101000011000100000010000", 
    40 => "10111110010001011001100001011011", 
    41 => "10111100110000110010110110110010", 
    42 => "00111101100110000011100000010011", 
    43 => "10111110000101110011110111100010", 
    44 => "00111110010111100010100110110111", 
    45 => "00111011010101011100101100100011", 
    46 => "10111110000110001000010110010000", 
    47 => "10111110000111111010000001010001", 
    48 => "00111101110101000001101101110110", 
    49 => "00111110001110011100000001100110", 
    50 => "10111100100011001001101001111000", 
    51 => "00111101011011001010111001111111", 
    52 => "00111100110111111111011101001100", 
    53 => "10111011000110100011010111110111", 
    54 => "00111100110001110011111111111011", 
    55 => "00111101100000001000101000011001", 
    56 => "10111101000010111111110010101000", 
    57 => "10111110001111101111100111011011", 
    58 => "10111101011001110011100000011101", 
    59 => "00111101101110000111110111000000", 
    60 => "00111100101010110101000010110001", 
    61 => "00111101010101101011110010001010", 
    62 => "10111100101001011000100111111101", 
    63 => "10111100000011000000011110001011", 
    64 => "10111101000101100001010011100000", 
    65 => "00111101100010100101101010100101", 
    66 => "00111101100011111011101010110000", 
    67 => "10111101110001010000011110001100", 
    68 => "10111101110011000110001000011011", 
    69 => "00111101011110110001111001101001", 
    70 => "10111100101110100001100111010111", 
    71 => "10111101011110100010111111000010", 
    72 => "10111110000001111011000101111101", 
    73 => "10111101101101001000111101100001", 
    74 => "00111110000010111110010100010001", 
    75 => "00111101111100001101101001011110", 
    76 => "10111101001110111100010110101001", 
    77 => "10111100001001110001001101101010", 
    78 => "00111110000111001111111101100101", 
    79 => "10111101110001110110101001100101", 
    80 => "00111101111100111100001111100111", 
    81 => "00111101110111100101100111110011", 
    82 => "10111110000100010010111001000001", 
    83 => "00111110000110100000101100011100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_15 is
    component inference_mult_1_120_120_84_s_W4_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_15_rom_U :  component inference_mult_1_120_120_84_s_W4_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


