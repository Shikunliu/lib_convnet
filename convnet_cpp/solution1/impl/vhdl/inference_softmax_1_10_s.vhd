-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_softmax_1_10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_0_0_ce0 : OUT STD_LOGIC;
    A_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_1_0_ce0 : OUT STD_LOGIC;
    A_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_2_0_ce0 : OUT STD_LOGIC;
    A_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_3_0_ce0 : OUT STD_LOGIC;
    A_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    argmax_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    argmax_TVALID : OUT STD_LOGIC;
    argmax_TREADY : IN STD_LOGIC );
end;


architecture behav of inference_softmax_1_10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st6_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_CF000000 : STD_LOGIC_VECTOR (31 downto 0) := "11001111000000000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal indvar_flatten_reg_131 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_153 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_66 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal tmp_s_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_argmax_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_382_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_179_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_191_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_391 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_mid2_reg_391_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_mid2_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_mid2_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_i_mid2_reg_396_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_205_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_reg_402 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_fu_227_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_val_fu_264_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_reg_445 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_phi_fu_146_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex4_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_1_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_argmax_TREADY : STD_LOGIC := '0';
    signal exitcond_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newIndex_fu_209_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_251_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_3_to_int_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_1_to_int_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_292_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_300_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_310_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast6_fu_276_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_164_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_301 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_153 : BOOLEAN;

    component inference_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    inference_fcmp_32ns_32ns_1_1_U2039 : component inference_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => max_val_reg_434,
        din1 => max_val_1_fu_72,
        opcode => tmp_9_fu_164_opcode,
        dout => tmp_9_fu_164_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_argmax_TREADY assign process. --
    ap_reg_ioackin_argmax_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_argmax_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_153) then
                    if (not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then 
                        ap_reg_ioackin_argmax_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = argmax_TREADY)) then 
                        ap_reg_ioackin_argmax_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and not((exitcond_flatten_fu_173_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and (exitcond_flatten_fu_173_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and not((exitcond_flatten_fu_173_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_142 assign process. --
    i_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and (exitcond_flatten_reg_382 = ap_const_lv1_0))) then 
                i_reg_142 <= i_mid2_reg_396;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_142 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_131 assign process. --
    indvar_flatten_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and (exitcond_flatten_fu_173_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_131 <= indvar_flatten_next_fu_179_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_131 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_153 assign process. --
    j_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and (exitcond_flatten_fu_173_p2 = ap_const_lv1_0))) then 
                j_reg_153 <= j_1_fu_227_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_153 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- max_val_1_fu_72 assign process. --
    max_val_1_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and not((ap_const_lv1_0 = tmp_s_fu_356_p2)))) then 
                max_val_1_fu_72 <= max_val_reg_434;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                max_val_1_fu_72 <= ap_const_lv32_CF000000;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then
                ap_reg_ppstg_exitcond_flatten_reg_382_pp0_it1 <= exitcond_flatten_reg_382;
                ap_reg_ppstg_i_mid2_reg_396_pp0_it1 <= i_mid2_reg_396;
                ap_reg_ppstg_j_mid2_reg_391_pp0_it1 <= j_mid2_reg_391;
                exitcond_flatten_reg_382 <= exitcond_flatten_fu_173_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and (exitcond_flatten_fu_173_p2 = ap_const_lv1_0))) then
                i_mid2_reg_396 <= i_mid2_fu_199_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and (exitcond_flatten_fu_173_p2 = ap_const_lv1_0))) then
                j_mid2_reg_391 <= j_mid2_fu_191_p3;
                tmp_2_reg_402 <= tmp_2_fu_205_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and (exitcond_flatten_reg_382 = ap_const_lv1_0))) then
                max_val_reg_434 <= max_val_fu_264_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and not((ap_const_lv1_0 = tmp_s_fu_356_p2)))) then
                tmp_4_reg_445 <= tmp_4_fu_362_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_382_pp0_it1))) then
                tmp_s_reg_441 <= tmp_s_fu_356_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_173_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, tmp_s_reg_441, ap_sig_ioackin_argmax_TREADY, ap_reg_ppiten_pp0_it3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and not((exitcond_flatten_fu_173_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) and not((exitcond_flatten_fu_173_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st6_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_0_0_address0 <= newIndex4_fu_219_p1(2 - 1 downto 0);

    -- A_0_0_ce0 assign process. --
    A_0_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, tmp_s_reg_441, ap_sig_ioackin_argmax_TREADY, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
            A_0_0_ce0 <= ap_const_logic_1;
        else 
            A_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_0_address0 <= newIndex4_fu_219_p1(2 - 1 downto 0);

    -- A_1_0_ce0 assign process. --
    A_1_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, tmp_s_reg_441, ap_sig_ioackin_argmax_TREADY, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
            A_1_0_ce0 <= ap_const_logic_1;
        else 
            A_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_0_address0 <= newIndex4_fu_219_p1(1 - 1 downto 0);

    -- A_2_0_ce0 assign process. --
    A_2_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, tmp_s_reg_441, ap_sig_ioackin_argmax_TREADY, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
            A_2_0_ce0 <= ap_const_logic_1;
        else 
            A_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_3_0_address0 <= newIndex4_fu_219_p1(1 - 1 downto 0);

    -- A_3_0_ce0 assign process. --
    A_3_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, tmp_s_reg_441, ap_sig_ioackin_argmax_TREADY, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_argmax_TREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
            A_3_0_ce0 <= ap_const_logic_1;
        else 
            A_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st6_fsm_2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(tmp_s_reg_441, ap_reg_ppiten_pp0_it3)
    begin
                ap_sig_bdd_153 <= (not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_301 assign process. --
    ap_sig_bdd_301_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_301 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_66 assign process. --
    ap_sig_bdd_66_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_66 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_66)
    begin
        if (ap_sig_bdd_66) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_2 assign process. --
    ap_sig_cseq_ST_st6_fsm_2_assign_proc : process(ap_sig_bdd_301)
    begin
        if (ap_sig_bdd_301) then 
            ap_sig_cseq_ST_st6_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_argmax_TREADY assign process. --
    ap_sig_ioackin_argmax_TREADY_assign_proc : process(argmax_TREADY, ap_reg_ioackin_argmax_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_argmax_TREADY)) then 
            ap_sig_ioackin_argmax_TREADY <= argmax_TREADY;
        else 
            ap_sig_ioackin_argmax_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    argmax_TDATA <= std_logic_vector(resize(unsigned(tmp_4_reg_445),32));

    -- argmax_TVALID assign process. --
    argmax_TVALID_assign_proc : process(tmp_s_reg_441, ap_reg_ppiten_pp0_it3, ap_reg_ioackin_argmax_TREADY)
    begin
        if ((not((tmp_s_reg_441 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ioackin_argmax_TREADY))) then 
            argmax_TVALID <= ap_const_logic_1;
        else 
            argmax_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_173_p2 <= "1" when (indvar_flatten_reg_131 = ap_const_lv4_A) else "0";
    exitcond_fu_185_p2 <= "1" when (j_reg_153 = ap_const_lv4_A) else "0";
    i_cast6_fu_276_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_mid2_reg_396_pp0_it1),4));
    i_mid2_fu_199_p2 <= (exitcond_fu_185_p2 or i_phi_fu_146_p4);

    -- i_phi_fu_146_p4 assign process. --
    i_phi_fu_146_p4_assign_proc : process(i_reg_142, exitcond_flatten_reg_382, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_mid2_reg_396)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_382 = ap_const_lv1_0))) then 
            i_phi_fu_146_p4 <= i_mid2_reg_396;
        else 
            i_phi_fu_146_p4 <= i_reg_142;
        end if; 
    end process;

    indvar_flatten_next_fu_179_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_131) + unsigned(ap_const_lv4_1));
    j_1_fu_227_p2 <= std_logic_vector(unsigned(j_mid2_fu_191_p3) + unsigned(ap_const_lv4_1));
    j_mid2_fu_191_p3 <= 
        ap_const_lv4_0 when (exitcond_fu_185_p2(0) = '1') else 
        j_reg_153;
    max_val_1_to_int_fu_296_p1 <= max_val_1_fu_72;
    max_val_3_to_int_fu_279_p1 <= max_val_reg_434;
    max_val_fu_264_p3 <= 
        A_2_0_q0 when (sel_tmp4_fu_259_p2(0) = '1') else 
        sel_tmp3_fu_251_p3;
    newIndex4_fu_219_p1 <= std_logic_vector(resize(unsigned(newIndex_fu_209_p4),64));
    newIndex_fu_209_p4 <= j_mid2_fu_191_p3(3 downto 2);
    notlhs6_fu_332_p2 <= "0" when (tmp_3_fu_300_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_314_p2 <= "0" when (tmp_1_fu_282_p4 = ap_const_lv8_FF) else "1";
    notrhs7_fu_338_p2 <= "1" when (tmp_10_fu_310_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_320_p2 <= "1" when (tmp_5_fu_292_p1 = ap_const_lv23_0) else "0";
    sel_tmp1_fu_238_p3 <= 
        A_0_0_q0 when (sel_tmp_fu_233_p2(0) = '1') else 
        A_3_0_q0;
    sel_tmp2_fu_246_p2 <= "1" when (tmp_2_reg_402 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_251_p3 <= 
        A_1_0_q0 when (sel_tmp2_fu_246_p2(0) = '1') else 
        sel_tmp1_fu_238_p3;
    sel_tmp4_fu_259_p2 <= "1" when (tmp_2_reg_402 = ap_const_lv2_2) else "0";
    sel_tmp_fu_233_p2 <= "1" when (tmp_2_reg_402 = ap_const_lv2_0) else "0";
    tmp_10_fu_310_p1 <= max_val_1_to_int_fu_296_p1(23 - 1 downto 0);
    tmp_1_fu_282_p4 <= max_val_3_to_int_fu_279_p1(30 downto 23);
    tmp_2_fu_205_p1 <= j_mid2_fu_191_p3(2 - 1 downto 0);
    tmp_3_fu_300_p4 <= max_val_1_to_int_fu_296_p1(30 downto 23);
    tmp_4_fu_362_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_j_mid2_reg_391_pp0_it1) + unsigned(i_cast6_fu_276_p1));
    tmp_5_fu_292_p1 <= max_val_3_to_int_fu_279_p1(23 - 1 downto 0);
    tmp_6_fu_326_p2 <= (notrhs_fu_320_p2 or notlhs_fu_314_p2);
    tmp_7_fu_344_p2 <= (notrhs7_fu_338_p2 or notlhs6_fu_332_p2);
    tmp_8_fu_350_p2 <= (tmp_6_fu_326_p2 and tmp_7_fu_344_p2);
    tmp_9_fu_164_opcode <= ap_const_lv5_2;
    tmp_s_fu_356_p2 <= (tmp_8_fu_350_p2 and tmp_9_fu_164_p2);
end behav;
