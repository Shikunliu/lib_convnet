-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101010011000111011011", 
    1 => "10111101011011010100010000000110", 
    2 => "00111101111101110000010011111111", 
    3 => "00111101111010001100111101111101", 
    4 => "10111100111001110101111100011111", 
    5 => "00111101100100011011011100100101", 
    6 => "10111101101011011001010000010101", 
    7 => "00111100101100111101101001011000", 
    8 => "00111100101100111001110001111010", 
    9 => "10111101110100101000110110000110", 
    10 => "10111100000110111011000101001100", 
    11 => "10111101100100110110011101111001", 
    12 => "10111101001100000011001000101101", 
    13 => "10111110000101100001000000101000", 
    14 => "00111100100000010110101010011001", 
    15 => "10111100011000101010000101001010", 
    16 => "10111101100011001001010101101111", 
    17 => "00111110000000001000000010110110", 
    18 => "00111101011000111011101101000001", 
    19 => "00111101011001101001101011101111", 
    20 => "10111100011011110110011110010111", 
    21 => "10111101101000111000110010010111", 
    22 => "10111100100011001000100001101111", 
    23 => "10111101011000110110110100000111", 
    24 => "10111101101011001110100101010010", 
    25 => "00111100000101011010110110011100", 
    26 => "00111101101000011110001111010000", 
    27 => "10111100000001111100010001110000", 
    28 => "10111100101111001111010111110101", 
    29 => "10111110010000000010011100001111", 
    30 => "10111100100011000000001111100101", 
    31 => "10111101111111001111000100111101", 
    32 => "00111101100110110110101000010001", 
    33 => "00111110010000010011001010110101", 
    34 => "00111100111110110111100101010011", 
    35 => "00111110010010001001100110111111", 
    36 => "00111100001010111010100111010010", 
    37 => "10111101100110110010100101111001", 
    38 => "00111101101010001100111010011000", 
    39 => "10111101001001010100111101111011", 
    40 => "00111101111101100001010011100000", 
    41 => "00111100111101010101010100010111", 
    42 => "10111101000111011101000110100010", 
    43 => "00111101110010101011010110011011", 
    44 => "00111101000101101010101101110011", 
    45 => "00111101111101000000100010010110", 
    46 => "00111110001101110010010010110111", 
    47 => "00111101010010000101100111110001", 
    48 => "10111101110100111001011101010111", 
    49 => "10111101001101111101101000010001", 
    50 => "00111110000100111111011001111111", 
    51 => "00111110000100000010111010101001", 
    52 => "00111101111000110010101110011001", 
    53 => "10111101100101001110101010011011", 
    54 => "00111101100101101110100100000000", 
    55 => "10111011110100101001010100111001", 
    56 => "10111101011011010111011001000000", 
    57 => "10111100101100110001110111001111", 
    58 => "00111100111110101000001011101000", 
    59 => "10111101110001111000000100100110", 
    60 => "10111101101011111010000100001101", 
    61 => "00111101100010000100011111001101", 
    62 => "00111101101011000000001011110011", 
    63 => "00111101101010000110001110100100", 
    64 => "10111110000011011101011111101101", 
    65 => "10111100001011001010111001001001", 
    66 => "10111101101011110110101010100001", 
    67 => "10111101101010010001111001111111", 
    68 => "00111101101000000000111011001001", 
    69 => "00111101111010110111000110111001", 
    70 => "10111010111111101001001101101110", 
    71 => "00111100111011101110001101000010", 
    72 => "10111101110110110011011111001010", 
    73 => "10111101010101110101110110011010", 
    74 => "10111100010110001001110110111011", 
    75 => "00111100010111000000000010110010", 
    76 => "00111110001111101110000001101110", 
    77 => "10111101000010111000110110111000", 
    78 => "00111110000101011101101000100111", 
    79 => "10111100000011111110011000100111", 
    80 => "10111101001001000001001111110110", 
    81 => "00111011001111011001101111010111", 
    82 => "10111110000111100110101011111101", 
    83 => "00111110000010010011010001101010", 
    84 => "00111101001100110011101111001100", 
    85 => "00111101010010000101110111010010", 
    86 => "00111100111010001111010010110110", 
    87 => "00111101111001100001111000001100", 
    88 => "00111101100001010001101100011010", 
    89 => "10111101011000110011011110001101", 
    90 => "10111101110110101111111000011110", 
    91 => "00111101101111001011100111101101", 
    92 => "00111101101100100000010100000000", 
    93 => "10111101101011101000000101000101", 
    94 => "00111100001010101100001110001110", 
    95 => "00111100010101011011000000110110", 
    96 => "10111101010001100100101101011001", 
    97 => "10111101111100010100010001000110", 
    98 => "10111101100101001001000001101110", 
    99 => "10111011000001111101000001101110", 
    100 => "10111110000100001010011010111001", 
    101 => "10111100110100000010010010100110", 
    102 => "00111101001101100100001110111111", 
    103 => "10111110001111110100010010010001", 
    104 => "10111101101110101111111010111111", 
    105 => "10111101111100110010110001100010", 
    106 => "00111110001010011011011100111001", 
    107 => "10111110000000010001011101110010", 
    108 => "00111100010010110101110010001010", 
    109 => "10111101001110101000111100101101", 
    110 => "10111100111111011000100011000010", 
    111 => "00111010110111000000100000101001", 
    112 => "00111101001110001001011100111011", 
    113 => "00111101101001001100011001101110", 
    114 => "00111101111100111100111111110110", 
    115 => "00111101010010101011100111001101", 
    116 => "10111101110011011101100010110110", 
    117 => "00111101100011000110110100111001", 
    118 => "00111101001001001011001111111010", 
    119 => "00111101011101000011001001101100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_6 is
    component inference_conv2d_f3_2_3_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_6_rom_U :  component inference_conv2d_f3_2_3_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


