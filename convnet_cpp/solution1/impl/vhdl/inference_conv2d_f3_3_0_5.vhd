-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101110111101111000000", 
    1 => "00111110011100100000111101101111", 
    2 => "00111101010010110011000100100001", 
    3 => "00111110000011101100011001111010", 
    4 => "00111101010101101101010101111111", 
    5 => "00111101110010010101100110110000", 
    6 => "00111110000101010101111010101111", 
    7 => "10111101011100011011110011000001", 
    8 => "00111101001110001111101101111010", 
    9 => "00111011100000010111110100000011", 
    10 => "00111110000000101010111001001011", 
    11 => "00111100110100111101001001000101", 
    12 => "00111010110010110011111110000100", 
    13 => "10111110010110001100100101110101", 
    14 => "00111101000100000110111000100111", 
    15 => "00111110001010010110010100101100", 
    16 => "00111100111011101100100111100010", 
    17 => "10111110000101101111100010101101", 
    18 => "00111101101111000111111100100111", 
    19 => "10111101001110100011010010010100", 
    20 => "10111110001001000110100011001011", 
    21 => "10111101000100000111001011000100", 
    22 => "00111110000101110110100001011010", 
    23 => "00111100101010100100001001011110", 
    24 => "00111110001010101000010101000100", 
    25 => "00111011111000110101110000011011", 
    26 => "10111101101110100011100011101110", 
    27 => "00111101011000011000100001000110", 
    28 => "10111110001101110000010111001001", 
    29 => "00111101110100111110001011010110", 
    30 => "00111110100011110100111110110101", 
    31 => "10111101001110010101011100111010", 
    32 => "00111101010100100001100111011110", 
    33 => "10111110000011000011110100100101", 
    34 => "10111101100111100010010110101101", 
    35 => "00111101011100101110010110000000", 
    36 => "10111101100000011001011011110100", 
    37 => "00111101000111010010111001000100", 
    38 => "10111110000100000010110111100000", 
    39 => "10111101010011011110000100110100", 
    40 => "00111101011011100010000011011010", 
    41 => "00111101011011000001010000100101", 
    42 => "00111101011111011101110110010110", 
    43 => "00111101111111110110100100000001", 
    44 => "00111101111100110111011011010101", 
    45 => "00111101101011101100000001100101", 
    46 => "00111101011111101111101110111110", 
    47 => "10111100111111100010000010010111", 
    48 => "00111101011100110111100000010111", 
    49 => "00111101000100001101100110100010", 
    50 => "10111101000000100000110001001010", 
    51 => "10111011010100000100100101011001", 
    52 => "00111101001101110011110111101111", 
    53 => "00111001000101011000011001011100", 
    54 => "00111101000101100101100010011100", 
    55 => "00111101110011101101101100101111", 
    56 => "00111100110100101101111011001010", 
    57 => "10111101101000011011010011010110", 
    58 => "10111100110000010111000110111010", 
    59 => "00111101011111101000100111111001", 
    60 => "00111011011001110111011000011011", 
    61 => "10111101001011111111110000010001", 
    62 => "10111101100010010000011101000101", 
    63 => "10111011110100001000110101100001", 
    64 => "10111110000101100100111000000101", 
    65 => "10111100111100000000100101111101", 
    66 => "10111101011001111010110101011001", 
    67 => "00111100110011011001010100010100", 
    68 => "10111100011011100001010111110011", 
    69 => "10111101111101101000100010111110", 
    70 => "10111101011100110010101101010110", 
    71 => "10111100101111101100000010011011", 
    72 => "00111110000001111000101011110100", 
    73 => "10111010011000010001111110101111", 
    74 => "00111101111100000001011111011011", 
    75 => "00111110000111101000100110101001", 
    76 => "10111110000011100001110000010101", 
    77 => "10111101111101111010010101101110", 
    78 => "10111101100011000011000011000110", 
    79 => "00111110000110110101001010000111", 
    80 => "00111101010011001000000101101000", 
    81 => "00111100111100001111001010110001", 
    82 => "10111101011111001101101001000110", 
    83 => "10111101001000000001100100010000", 
    84 => "10111110001011001001000000111111", 
    85 => "10111101011010011000010101001111", 
    86 => "00111101011001100000110111100110", 
    87 => "10111101011110101000111111001110", 
    88 => "00111100101000010100110000010110", 
    89 => "10111101100001101100000010111100", 
    90 => "00111100101111011000101110110001", 
    91 => "00111101111110101010000111010111", 
    92 => "00111100100010111001110100100010", 
    93 => "00111110001110011000101011101100", 
    94 => "00111110000110010000100111110010", 
    95 => "10111100101011100000010001010101", 
    96 => "00111100110111000100000110110101", 
    97 => "10111101000000010000110000011111", 
    98 => "10111101111011100011000001000100", 
    99 => "10111110000110110011000100111100", 
    100 => "00111101110100111111110110010011", 
    101 => "10111100110010100011101111111001", 
    102 => "10111100110000100100010010110100", 
    103 => "10111101100011111111000000010000", 
    104 => "10111101111011101100100101011100", 
    105 => "00111101101001110000111110100100", 
    106 => "00111101001010000010010001000001", 
    107 => "10111100111001111010100010111011", 
    108 => "00111110010001100010101111110001", 
    109 => "00111011010010110101001011001111", 
    110 => "10111011111010101110001010001100", 
    111 => "10111101101100110010100000100011", 
    112 => "00111011001101010101101001101010", 
    113 => "10111101000101010001010011101010", 
    114 => "10111100001111011010001000100010", 
    115 => "00111110011010101100101010111100", 
    116 => "10111100111101011111110011011100", 
    117 => "10111110000101100011110001110101", 
    118 => "10111101111010111011001111001000", 
    119 => "00111011000101110111110101100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_5 is
    component inference_conv2d_f3_3_0_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_5_rom_U :  component inference_conv2d_f3_3_0_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


