-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110001000001100001010000", 
    1 => "10111110000100000010110110011101", 
    2 => "10111110000111011110101100010000", 
    3 => "00111011110101101100000101000010", 
    4 => "00111100101100011011000001111100", 
    5 => "10111100110000010010011100010010", 
    6 => "00111101000000101111001110000000", 
    7 => "10111110001011111011110011100100", 
    8 => "00111101000111101010111110000011", 
    9 => "10111101000001011101001101111111", 
    10 => "10111100011111001110011000000101", 
    11 => "10111100001011101100100101000001", 
    12 => "10111101000000010100111001100100", 
    13 => "00111101100011000111011001110011", 
    14 => "10111101010000011011111101101101", 
    15 => "00111000110111000100100101110101", 
    16 => "10111110010000010001111111010110", 
    17 => "00111101010100000010001001110010", 
    18 => "00111101111000001011101110110010", 
    19 => "10111101110011101111101100101011", 
    20 => "10111110010001011000011101010001", 
    21 => "10111101011001101011011100001001", 
    22 => "10111011100001100010010000000110", 
    23 => "00111101011101101001000101010111", 
    24 => "00111110010100101011111110011000", 
    25 => "00111101000111001011111011101000", 
    26 => "00111101001000011110110010011111", 
    27 => "10111101111011001110110011001000", 
    28 => "10111101100111011110101010111111", 
    29 => "10111110000011010000010100101001", 
    30 => "00111001001010101111111110100110", 
    31 => "10111101001110111000100101111001", 
    32 => "10111101100010000010110100011101", 
    33 => "10111101100100010011011001100001", 
    34 => "00111101101001011000011110101111", 
    35 => "00111101000000101001001110001110", 
    36 => "00111100111110011001111111111111", 
    37 => "10111010110101010010100010010001", 
    38 => "10111101100010110110001101000000", 
    39 => "00111101000101101100110001100000", 
    40 => "10111101000001001001011100111110", 
    41 => "10111101001011100000000100010101", 
    42 => "00111101100111000000111100111000", 
    43 => "10111100001000000100110111010011", 
    44 => "00111100100011000010000110101100", 
    45 => "00111101111100001001111010011001", 
    46 => "00111101100011101011000010101010", 
    47 => "10111101110000100011000110101011", 
    48 => "00111101111000100010111011100100", 
    49 => "10111100110001011100000110101011", 
    50 => "00111100101000100111110111011001", 
    51 => "00111101010101001100100100011011", 
    52 => "00111100110110111110001111000001", 
    53 => "00111100110000100011101001101101", 
    54 => "10111101010110110010010001100100", 
    55 => "10111101000000110111000011001110", 
    56 => "10111100100100010110101011110111", 
    57 => "00111011111100100001010110000111", 
    58 => "10111100001101111011110100000110", 
    59 => "00111101011100010110010100110011", 
    60 => "10111110001000101010001001111111", 
    61 => "00111101110011101100110010000001", 
    62 => "10111101100010111100110100000000", 
    63 => "10111101101110110111010100000110", 
    64 => "10111101110000100011110001010000", 
    65 => "10111110010001101111001110110010", 
    66 => "00111100100010000100010100010011", 
    67 => "00111101100101111100010001001111", 
    68 => "00111100101111001001010011011100", 
    69 => "00111101001001001010111000110101", 
    70 => "10111110000011100111101110000001", 
    71 => "10111101001110101101001010011010", 
    72 => "10111101100101011000110011010010", 
    73 => "00111101010000011011001010100010", 
    74 => "10111101000101100000010111000110", 
    75 => "10111100110101110001110100011101", 
    76 => "10111100111001000001010011101000", 
    77 => "00111011110100010000001011100111", 
    78 => "00111110000000111011110101011010", 
    79 => "00111101100111100000011001100000", 
    80 => "00111100100001011010110101010100", 
    81 => "10111101111111001100100011011110", 
    82 => "10111101000101110000000100000011", 
    83 => "10111110000001110101110000000111", 
    84 => "00111101001101001100110110000010", 
    85 => "00111101111111011110001101110110", 
    86 => "10111101010001110010001011010100", 
    87 => "00111011111110010000010011001111", 
    88 => "00111100101100001010111100101010", 
    89 => "10111101001111101000011111111011", 
    90 => "10111100101101000001111110001101", 
    91 => "10111101000111111001111100110111", 
    92 => "10111101111001011100000010111010", 
    93 => "10111101000111011011000001100101", 
    94 => "00111101100111110101010001110100", 
    95 => "00111101101001101100000001011110", 
    96 => "10111011100111101100000100100001", 
    97 => "00111101101011011000000110111011", 
    98 => "10111100000001111011111010100110", 
    99 => "00111100111010001111010000010101", 
    100 => "00111101111101001001001001111001", 
    101 => "00111101011010010101110001010000", 
    102 => "00111100111111100101010100000101", 
    103 => "10111110010100011101111011110000", 
    104 => "00111101011110010010010010010100", 
    105 => "00111101111100111001111100110100", 
    106 => "00111101101110100111111111101011", 
    107 => "10111101001101000110001000111101", 
    108 => "00111011011100010010101011111011", 
    109 => "00111100110011010101110100010110", 
    110 => "10111101100101000010011101110111", 
    111 => "00111101100000001011010110000010", 
    112 => "10111101000010001001001100110010", 
    113 => "10111101000111011110100001001000", 
    114 => "10111100011010000100101011011000", 
    115 => "10111101100111001110110011110000", 
    116 => "00111101110110111111011010100001", 
    117 => "00111110000100001000011110000111", 
    118 => "00111101101010010110101111010100", 
    119 => "00111110010001010101001011100011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_1 is
    component inference_conv2d_f3_4_0_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_1_rom_U :  component inference_conv2d_f3_4_0_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


