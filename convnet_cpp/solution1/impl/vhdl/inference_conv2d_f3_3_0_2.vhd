-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001000110100011011011100", 
    1 => "00111101001001000110010101010101", 
    2 => "00111110001010011000100101011001", 
    3 => "10111110001100100111010001011100", 
    4 => "00111101011001100101101000000111", 
    5 => "00111101111001001111011011100000", 
    6 => "10111101000001010111011001111100", 
    7 => "10111100100101010001101001111001", 
    8 => "10111101010101001100100111010110", 
    9 => "00111100011001110010001001001110", 
    10 => "00111110010000101101010001001110", 
    11 => "00111101110001110101000010011001", 
    12 => "10111110000000000000100111110110", 
    13 => "10111011100000101100011000000011", 
    14 => "00111101000101101110101011001000", 
    15 => "10111110000011110110010101010110", 
    16 => "10111110001100100110010100101000", 
    17 => "10111110000001010011001100101011", 
    18 => "00111010100100111010000010110001", 
    19 => "10111100100101011010101111001110", 
    20 => "10111101111000000101100010011011", 
    21 => "00111101011101111001111111011111", 
    22 => "00111101111101000010101000100100", 
    23 => "00111100011000110101000000110001", 
    24 => "00111100011111111100100100001110", 
    25 => "10111101100101110011110000001100", 
    26 => "10111101111011111111100011101100", 
    27 => "00111101101110001011100111110000", 
    28 => "10111100110100001111011010010011", 
    29 => "10111100101100001100101011011001", 
    30 => "10111110001011100001001011101000", 
    31 => "10111101111100101000010000010110", 
    32 => "10111101111011100110000100000111", 
    33 => "00111100010100110101100110101111", 
    34 => "00111101011010100101110011001011", 
    35 => "00111011000111101111011101010010", 
    36 => "00111110001010011001010111101110", 
    37 => "00111101010011100100000011110001", 
    38 => "10111100000100100011010100001100", 
    39 => "10111101101101110010110001111010", 
    40 => "10111101000111101001110111100101", 
    41 => "00111100011001010110011011111000", 
    42 => "00111011110010100000100000110111", 
    43 => "10111101110001011100010010011011", 
    44 => "00111100101010111000111001011001", 
    45 => "10111100111101001110110010100111", 
    46 => "00111101000010000001111010011000", 
    47 => "10111100110001001001111100000001", 
    48 => "00111100010001001000110000100001", 
    49 => "10111101101110101111101100101110", 
    50 => "00111101110100101001110010111011", 
    51 => "10111110011100111010000101001101", 
    52 => "00111100001000000000100001011110", 
    53 => "00111110001010010111001011001101", 
    54 => "00111110000111000000101001001010", 
    55 => "00111011111110110111000001001110", 
    56 => "00111110000110101011101111001011", 
    57 => "00111100100001101111100101001110", 
    58 => "00111100010000100111010111000110", 
    59 => "00111101110011110011110000101110", 
    60 => "10111101010001111001110000001011", 
    61 => "00111110010000011011110010011001", 
    62 => "10111100001100010101111111110100", 
    63 => "10111100100011011000101111011010", 
    64 => "00111101011001001100111101110011", 
    65 => "10111101010110000101100101000011", 
    66 => "10111110000000011111100101101010", 
    67 => "00111101101010001100001011110101", 
    68 => "00111101100011110111101110010001", 
    69 => "10111100011011110101000111000111", 
    70 => "10111110000110010011001000001110", 
    71 => "10111101001001000110010111110110", 
    72 => "00111101011011011001010001110011", 
    73 => "10111110000011100100011011010000", 
    74 => "00111110001001100111111011001000", 
    75 => "10111100110101011001001101000101", 
    76 => "00111101011011111000111011001110", 
    77 => "10111011110000010001011011110111", 
    78 => "10111110001111000100111111000010", 
    79 => "00111101001111101111011011101100", 
    80 => "10111110000000111101011010000100", 
    81 => "10111101101001101101010010000000", 
    82 => "10111101110000000001110110000100", 
    83 => "00111101100100101011000010100111", 
    84 => "10111101001000100110100110011100", 
    85 => "10111110000001100000001000000000", 
    86 => "00111100110011011111000010111001", 
    87 => "00111101110001100101101000100010", 
    88 => "10111101101011011001110110111011", 
    89 => "10111100110100110111010111111111", 
    90 => "10111101010000100101010010100100", 
    91 => "10111110001000100110100011010011", 
    92 => "10111011000110100010010010101111", 
    93 => "00111101001101010110010111000011", 
    94 => "10111110000111010101101000011000", 
    95 => "00111101001110100001000111111010", 
    96 => "10111101100100011111011001000101", 
    97 => "10111100111010101010101001100011", 
    98 => "10111101001011000111011000010101", 
    99 => "00111101101001100010011111001101", 
    100 => "10111101111001110001110001010100", 
    101 => "10111110000001010101100110110100", 
    102 => "10111100011001110111000010111101", 
    103 => "10111101011010001111101111010111", 
    104 => "00111101000110100110010101010111", 
    105 => "10111110000000101111111101001100", 
    106 => "10111101100011001001110001000000", 
    107 => "00111100111110001100001101100000", 
    108 => "00111101111001000001101010101100", 
    109 => "10111101001000011010000100000101", 
    110 => "00111110001001010000110000011100", 
    111 => "00111101110000110100010010110110", 
    112 => "10111100101011101110110110001001", 
    113 => "10111010100101101100011000000000", 
    114 => "00111100010010111001100101011100", 
    115 => "10111101110000010011110100001001", 
    116 => "10111100100001010001100001101110", 
    117 => "10111110000100100000101001110100", 
    118 => "00111100011001100011100100011010", 
    119 => "10111010101101000100001000010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_2 is
    component inference_conv2d_f3_3_0_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_2_rom_U :  component inference_conv2d_f3_3_0_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


