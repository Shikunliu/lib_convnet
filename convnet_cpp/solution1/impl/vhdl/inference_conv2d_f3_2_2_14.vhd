-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110100001011000010111101", 
    1 => "10111101101101001110001110111101", 
    2 => "00111011111110001001011011101011", 
    3 => "00111100001000000111000111011011", 
    4 => "00111110000100000011100111101111", 
    5 => "10111100101001000010110000101111", 
    6 => "00111110001010110010011000111001", 
    7 => "10111011100000011011011010001110", 
    8 => "10111100010001000101001111101101", 
    9 => "10111101110110110110000110111011", 
    10 => "10111101110101001011010000000111", 
    11 => "00111110000001100110100100000101", 
    12 => "00111101101000001111011010010011", 
    13 => "00111101110010011101111000100000", 
    14 => "00111100100010110010011100010000", 
    15 => "00111011100110100001101100011111", 
    16 => "10111101000010101101111110101000", 
    17 => "10111110001110100101111010111011", 
    18 => "10111110001011100111010010110000", 
    19 => "00111101001011011000011100100010", 
    20 => "10111101001110010001100010000101", 
    21 => "00111110000011011110011011011110", 
    22 => "10111101010001101111010010010110", 
    23 => "00111101111001011100100010010111", 
    24 => "00111101001110101011111000100111", 
    25 => "00111101110000101001001110001110", 
    26 => "00111101111000111110111110101110", 
    27 => "00111101100001010000000000011010", 
    28 => "00111101001101010011100111010011", 
    29 => "00111101011101101111101111100000", 
    30 => "00111101110010001000011011000101", 
    31 => "10111011100010111010101101000100", 
    32 => "00111101100001010101000010111101", 
    33 => "00111101000001011011101110110001", 
    34 => "10111100000101000111101101100010", 
    35 => "00111100111010100100110100010000", 
    36 => "00111101101100111010010001100101", 
    37 => "00111101000111010110110011011101", 
    38 => "10111101110100010011100000110111", 
    39 => "00111010110100000001000011111010", 
    40 => "10111101111000101111101101011101", 
    41 => "00111101000101111001101000011011", 
    42 => "10111101010010111101101010101111", 
    43 => "00111101011111011010010111001110", 
    44 => "00111110000100011011100111111010", 
    45 => "00111101101110110010110100011000", 
    46 => "10111110000010111101000101100111", 
    47 => "00111101111010000110100111000110", 
    48 => "00111101001011100010110000010011", 
    49 => "10111100001011011100101010101001", 
    50 => "00111101001100100010011110011010", 
    51 => "00111110000010000101100010111100", 
    52 => "00111101000100100101011010101111", 
    53 => "10111100000111010110011101000100", 
    54 => "10111101100001100100101100100011", 
    55 => "10111101111110010001011110010100", 
    56 => "00111101110011100110011101010001", 
    57 => "00111110000011000100110111101100", 
    58 => "00111101000000001000111110101000", 
    59 => "10111101100000111101000111110100", 
    60 => "10111101111001110000000010001010", 
    61 => "00111110000010011100010000010001", 
    62 => "10111101010111000101000110001010", 
    63 => "10111101000001110100011010110001", 
    64 => "10111101000010111011001010000110", 
    65 => "00111101100010011001000011100110", 
    66 => "10111101110010000010011111111010", 
    67 => "00111100100011000000111000101011", 
    68 => "10111110000101010100011100010111", 
    69 => "00111100110010101011001101001101", 
    70 => "00111101000111001000111010010001", 
    71 => "10111101011100000000010110110111", 
    72 => "10111101101110001110110001010011", 
    73 => "00111101100111101000100001110100", 
    74 => "10111110001010100111110001011011", 
    75 => "10111100100010100110111110010000", 
    76 => "00111110010011011111011010011000", 
    77 => "10111100111011010000001010011000", 
    78 => "00111101011010000011010011010010", 
    79 => "10111101111111100010011110011110", 
    80 => "10111101000101011111010111010110", 
    81 => "00111011001111111110101110111110", 
    82 => "10111011010100100100111011101101", 
    83 => "10111101100101111011000001010110", 
    84 => "00111101011111011100010001101100", 
    85 => "00111011101000110100100110000110", 
    86 => "00111100101001101001010000011110", 
    87 => "10111011001110000110110001101110", 
    88 => "10111100101110010111111001110001", 
    89 => "00111100011010111001010111100110", 
    90 => "00111101100000000101001001010000", 
    91 => "10111101101010000111010100011010", 
    92 => "00111110001011011101101101010101", 
    93 => "10111101101001110100110000100101", 
    94 => "10111101010000101110111001011100", 
    95 => "10111101001011010001001000011100", 
    96 => "10111110000100000001110010010011", 
    97 => "00111101000011000010111011111101", 
    98 => "10111110011000100111110000111001", 
    99 => "00111001111010101001001011100100", 
    100 => "00111101100101111010110101100110", 
    101 => "00111101111101000111001110001010", 
    102 => "00111110010001000111010010010111", 
    103 => "00111101000000100001101000000110", 
    104 => "00111101111100011001100000101001", 
    105 => "00111100001101101110101101001111", 
    106 => "00111101001001011011010000111111", 
    107 => "10111101001011100111100111000110", 
    108 => "00111101001010101000101101011001", 
    109 => "00111101101100110100110011100100", 
    110 => "10111101101101101110011110010110", 
    111 => "00111101100111010001010111110000", 
    112 => "00111101010001100001110101010000", 
    113 => "10111110010001100111010011010001", 
    114 => "10111110000000011010001101101110", 
    115 => "00111101110110101011001000011000", 
    116 => "10111101100011101100001000010010", 
    117 => "10111101101110111010001011001011", 
    118 => "00111101011101011010101000100001", 
    119 => "00111110000000111101101111000010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_14 is
    component inference_conv2d_f3_2_2_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_14_rom_U :  component inference_conv2d_f3_2_2_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


