-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110111101100011110100001", 
    1 => "10111100111001001101111000000110", 
    2 => "00111100110110110100000001100011", 
    3 => "10111101110000111101000101100001", 
    4 => "00111101101000011100111001011111", 
    5 => "10111101011001010100100001110100", 
    6 => "00111101000001001110001110010101", 
    7 => "00111110001111000101000000000101", 
    8 => "00111101001011100010000110010110", 
    9 => "10111101100100001101111111111010", 
    10 => "00111101110101100110000001011111", 
    11 => "10111110000001000101110000110110", 
    12 => "10111101010111011110011100100001", 
    13 => "10111100110110010100101010111111", 
    14 => "10111101010010011001101100011111", 
    15 => "00111101000001100111011110011001", 
    16 => "00111011100101101011111110100000", 
    17 => "10111101111110011110001110000110", 
    18 => "10111101101000001100110111010110", 
    19 => "10111110000101001011011110110011", 
    20 => "00111101110001011100000011111101", 
    21 => "10111011010100001100011110101110", 
    22 => "10111101101111111100110000110011", 
    23 => "10111100100001100000000010010101", 
    24 => "00111101100011011011111101001000", 
    25 => "00111101011010111011010010000100", 
    26 => "00111100011010111110000000100011", 
    27 => "00111101100101110111110001111011", 
    28 => "00111110000011110000100100001111", 
    29 => "10111010000011000111011010111110", 
    30 => "10111100100110011000101011101100", 
    31 => "10111100100101110110111110001000", 
    32 => "00111101001010010110011111110011", 
    33 => "00111101001000001111101101011000", 
    34 => "10111101111010010000011000000011", 
    35 => "00111101001001100110111101101011", 
    36 => "00111011100011001100101111101011", 
    37 => "10111101101101011000111010000000", 
    38 => "00111101100110011000001100011100", 
    39 => "00111011110101010110010100110111", 
    40 => "00111101110001101000110000011001", 
    41 => "10111101101000101011101100001000", 
    42 => "10111101101000101001000000001011", 
    43 => "00111101000110101100110111111100", 
    44 => "00111101111110000111000001010100", 
    45 => "10111110001000010001011000100011", 
    46 => "00111101101010011001101011110111", 
    47 => "00111100100010000001101111111001", 
    48 => "00111101001011100010100100001000", 
    49 => "10111101101101010000100101101111", 
    50 => "00111110010000111011100100101000", 
    51 => "00111101111111001000011001001001", 
    52 => "00111101100111111000111100111010", 
    53 => "10111100000100010111001000100011", 
    54 => "00111101111010100100011001011010", 
    55 => "10111110000001110010011101010111", 
    56 => "00111100110000101100001000011100", 
    57 => "00111101011011000100011100000000", 
    58 => "10111100101100111001101110100011", 
    59 => "00111101100111100111001000101100", 
    60 => "10111101000101001000111001100010", 
    61 => "10111101111011111101110100100011", 
    62 => "10111110010000001001001100010000", 
    63 => "00111101111010100001001011111001", 
    64 => "00111101100010111111001001100010", 
    65 => "10111101101101110101100100011000", 
    66 => "00111101100100000110100001110000", 
    67 => "00111100111111010011110001101100", 
    68 => "00111101110111010001101000100010", 
    69 => "00111101111010001010011110100100", 
    70 => "00111100110001001101001111011010", 
    71 => "00111110001000110000011000011100", 
    72 => "00111110011101000100001010000101", 
    73 => "00111101001001110100000010110111", 
    74 => "00111101011100100010100011011101", 
    75 => "00111101111001010001010011000010", 
    76 => "10111110001011011100001011110100", 
    77 => "00111011110000001001101010001111", 
    78 => "00111101011001000111100100001100", 
    79 => "10111101100111100011000110101111", 
    80 => "10111101100111101111100100101101", 
    81 => "10111100000010010111010011011110", 
    82 => "10111100101011001100110100011101", 
    83 => "00111110000000010100010010001001", 
    84 => "10111101001010010111011000000000", 
    85 => "00111110000000100110000010110011", 
    86 => "10111101000101001110110000000101", 
    87 => "00111100001000000010010010011000", 
    88 => "10111101111101011011110001000101", 
    89 => "00111110010011100000001101110001", 
    90 => "00111110000010101110110011010000", 
    91 => "00111101100110101001001011100110", 
    92 => "10111101110100011000110000011001", 
    93 => "00111110000010010110100110100001", 
    94 => "00111101101111000101101010101010", 
    95 => "00111101110001000111000101010111", 
    96 => "10111101011010000010111001101101", 
    97 => "00111101111111111011101101010001", 
    98 => "10111101111001111110100011001101", 
    99 => "00111101100001110010011010000000", 
    100 => "00111110001101001111010101001101", 
    101 => "10111110001111000011110111101110", 
    102 => "00111101101001111101011011111001", 
    103 => "10111101000001000001011001100000", 
    104 => "00111100111111000010100000000100", 
    105 => "10111100100110111010110001100100", 
    106 => "00111101110000101011001101010011", 
    107 => "00111110001001111100011010111001", 
    108 => "10111101100001100111101001100000", 
    109 => "00111100100000001010100001100111", 
    110 => "10111100001110010010011010010010", 
    111 => "00111100100011011011000110011001", 
    112 => "00111101010010111101000011101111", 
    113 => "10111101110101100111101000010000", 
    114 => "10111100110011111100011101010011", 
    115 => "00111101100010001000000011001011", 
    116 => "10111101110111110110110000100111", 
    117 => "00111110000111000010001100110001", 
    118 => "00111110010110011011111101011001", 
    119 => "10111101010101101011000001100001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_6 is
    component inference_conv2d_f3_4_4_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_6_rom_U :  component inference_conv2d_f3_4_4_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


