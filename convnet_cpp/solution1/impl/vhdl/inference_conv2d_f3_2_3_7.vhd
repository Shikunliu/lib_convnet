-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011000010000011010101", 
    1 => "10111101011101111100101111101001", 
    2 => "10111101100100010111101001000110", 
    3 => "00111011010110010100010100101011", 
    4 => "00111100001011011001001011100000", 
    5 => "00111011101000111000011101011001", 
    6 => "00111011000010000001110011000101", 
    7 => "00111101011001101111011110100001", 
    8 => "00111101111010100000101100011100", 
    9 => "10111101001100001101011010010111", 
    10 => "10111101010111000000001010010101", 
    11 => "00111100111100000101011010101010", 
    12 => "10111110001010010010101110000000", 
    13 => "00111110000110010011110000000100", 
    14 => "10111101001111111100101111100011", 
    15 => "00111110000001100001001110010000", 
    16 => "10111101000111111111001001111001", 
    17 => "10111101110001100101110101100010", 
    18 => "00111011100110000101010001110101", 
    19 => "10111100101011111010011110001101", 
    20 => "00111100111011100111011000110101", 
    21 => "10111101000101110011101010101111", 
    22 => "10111101100111100111010010110000", 
    23 => "10111101001010111010011010010010", 
    24 => "00111100101000111011100110101110", 
    25 => "00111101111000000000110000001111", 
    26 => "00111101111001101110110000011000", 
    27 => "00111100000110100110011001110011", 
    28 => "10111110000011000111000110010011", 
    29 => "10111101100001001000011011100011", 
    30 => "00111100001100100101001110100101", 
    31 => "00111101011010110110110100011100", 
    32 => "10111100110010111000010100000100", 
    33 => "10111100011100100101001111011010", 
    34 => "00111101010000011101011111011100", 
    35 => "00111110001101011110011000110110", 
    36 => "10111101000011011100001110100011", 
    37 => "00111110001111011010011011100111", 
    38 => "10111100111010110101100110110101", 
    39 => "00111100101000001110011001011111", 
    40 => "00111110010000010111010011000101", 
    41 => "00111101000110100110011000101101", 
    42 => "10111110000111100101110100011000", 
    43 => "00111101110100001111111110010111", 
    44 => "10111101000010001010110010101101", 
    45 => "10111100101111100001111001001001", 
    46 => "00111101100111010011101001101110", 
    47 => "00111100100110111111000000100001", 
    48 => "10111101110100111100110001001011", 
    49 => "10111110000111011001010101010111", 
    50 => "00111110000000111110000101000011", 
    51 => "00111110000111000001100010110101", 
    52 => "10111101010110010011101101010101", 
    53 => "10111110001001101001000111101010", 
    54 => "00111101001011001011011100110011", 
    55 => "10111101100011111010011110000000", 
    56 => "00111100101100101101011010000010", 
    57 => "00111101011111111111100000111110", 
    58 => "00111101001111101110110010100101", 
    59 => "10111101101010011100011000011101", 
    60 => "00111101100011111110101000111110", 
    61 => "00111101100110010111110110011010", 
    62 => "10111100110111100110100111100011", 
    63 => "10111101100010010100010101100110", 
    64 => "00111101101110110000111101011101", 
    65 => "00111110000100000001010011111001", 
    66 => "00111101101101111000001000110010", 
    67 => "00111100001000000111111111001000", 
    68 => "10111101110110001010000110011101", 
    69 => "10111101000010000111010011111111", 
    70 => "10111100100100001101111011100000", 
    71 => "10111100000111100111000000001101", 
    72 => "00111100011000001011100111101010", 
    73 => "00111101101010011011010000101110", 
    74 => "10111110001000011100111001101100", 
    75 => "00111101101010111011110110111110", 
    76 => "10111101111100001011101001100010", 
    77 => "10111011100100011100001011110110", 
    78 => "10111110001001101010101110011011", 
    79 => "00111110001000110111001101101101", 
    80 => "00111011111000101001101010010100", 
    81 => "10111101100111100101000001000000", 
    82 => "10111011101011000001010110011101", 
    83 => "00111101100000100111001101010000", 
    84 => "10111101100001011110001011001110", 
    85 => "10111101010111100110101011010101", 
    86 => "00111101010010110001001100111111", 
    87 => "10111101111011100000001100101110", 
    88 => "10111101010101111111111010001111", 
    89 => "00111101111000000011111001100100", 
    90 => "00111101101110011110111010111111", 
    91 => "10111101101011000101000100010001", 
    92 => "10111110011000100000010110111100", 
    93 => "10111101100100100000110001100101", 
    94 => "00111101101000101011001001000111", 
    95 => "10111101000100100000110001110010", 
    96 => "00111110001010100011011001011101", 
    97 => "00111101100000110111111000010001", 
    98 => "10111101100100101111101001011110", 
    99 => "10111100000001110001101010010001", 
    100 => "10111101001001111001111011100000", 
    101 => "10111101000111011011011011001010", 
    102 => "00111011110110010000011011010111", 
    103 => "10111101111110000011101111100110", 
    104 => "00111100100111101110011110000010", 
    105 => "00111110010011111100101100001100", 
    106 => "10111101100001111101100110100110", 
    107 => "00111100100010111000000101110011", 
    108 => "00111101010101110100001011111000", 
    109 => "10111101100111010100010011101010", 
    110 => "00111101000110111011010010101100", 
    111 => "00111110000001101010011011100011", 
    112 => "00111101110000111001001101000000", 
    113 => "00111110000011000100111010110101", 
    114 => "10111101100011011011111011000010", 
    115 => "10111110001010110110101011101000", 
    116 => "00111101011000100110110011110111", 
    117 => "10111101110011000110010011010101", 
    118 => "10111100101110010001110011101101", 
    119 => "10111101101011011110010001001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_7 is
    component inference_conv2d_f3_2_3_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_7_rom_U :  component inference_conv2d_f3_2_3_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


