-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000010110011001011001111", 
    1 => "00111101001010110011011100000000", 
    2 => "00111101001110101001101001001011", 
    3 => "00111110000100111111101010110001", 
    4 => "10111100111110111110000000010101", 
    5 => "00111110000100010100000001010111", 
    6 => "00111101001011001000101000000001", 
    7 => "00111101001100011011111011110101", 
    8 => "00111101000011000111101010010111", 
    9 => "00111101000111100101000010000011", 
    10 => "00111100001100001110010100010000", 
    11 => "00111010100100111100110110101000", 
    12 => "10111100100010111111010111011000", 
    13 => "10111110001011011011110101110011", 
    14 => "00111101100000100110111100111001", 
    15 => "10111110000110011000110110001011", 
    16 => "10111101001110010111111001010110", 
    17 => "10111100100000100101010000111000", 
    18 => "00111011101000101111010011001101", 
    19 => "00111101110010001100111101010100", 
    20 => "10111101110001110011011100111001", 
    21 => "00111110000101011100011001111110", 
    22 => "10111101111011000111000000000000", 
    23 => "00111100110001001101011001011110", 
    24 => "00111101001001100100010111001010", 
    25 => "00111101011010010000010101100010", 
    26 => "10111101000000011110011010100101", 
    27 => "10111101111010100000000100100110", 
    28 => "10111110001010011100100001000011", 
    29 => "10111100101001101011001101011110", 
    30 => "00111101100101111101101110001001", 
    31 => "00111101011001110101000001110001", 
    32 => "00111101101011011101011100100011", 
    33 => "00111100111000000111001011010010", 
    34 => "00111100100100110000101111100001", 
    35 => "10111101011001101100100100010010", 
    36 => "00111101000110111101110000110100", 
    37 => "00111110011000001010000010110010", 
    38 => "10111100100010011001001010111011", 
    39 => "10111101110111011001100110001001", 
    40 => "00111110001001001100100001111010", 
    41 => "00111101000011001110001010110111", 
    42 => "00111101000111010110001001100001", 
    43 => "10111100000000111010001110000011", 
    44 => "10111101100010101110010010100011", 
    45 => "00111101011000110000110110011100", 
    46 => "10111110001000001000111111101011", 
    47 => "10111101100110100100010100110011", 
    48 => "00111101011000110011010101110100", 
    49 => "00111110000001111011011010111011", 
    50 => "10111100001101101011111000000010", 
    51 => "10111110000110100111010000111010", 
    52 => "10111101010100010010010110100111", 
    53 => "10111110000001101100100010110100", 
    54 => "00111101000100000111111011101110", 
    55 => "10111110000011111011110010100001", 
    56 => "00111101101000010110101011001111", 
    57 => "00111101110001101100100011101010", 
    58 => "10111101111011110000100001000110", 
    59 => "10111110001110100110100000101011", 
    60 => "10111101010101001011001111010001", 
    61 => "10111101010101010100010110101101", 
    62 => "10111100110010110000001001011101", 
    63 => "00111110000111000110111101111010", 
    64 => "00111101100010001010001100000111", 
    65 => "10111011111001001000011100101001", 
    66 => "00111110010010101001011111100001", 
    67 => "00111110010011110111010001000111", 
    68 => "00111101101001100001000101110111", 
    69 => "00111100111111110101101110010101", 
    70 => "10111101111011110011011011110000", 
    71 => "00111101000011010011101100000001", 
    72 => "00111110010101001101001011110110", 
    73 => "10111101111101101101000110011110", 
    74 => "10111110000100000011101100111111", 
    75 => "10111101100001111011001101101110", 
    76 => "00111101011001100001100010011000", 
    77 => "00111101000101111110101111100101", 
    78 => "10111101100001010011111100101100", 
    79 => "10111101101001111110010100111100", 
    80 => "10111110010000101111111101001100", 
    81 => "10111101101111110110101011001010", 
    82 => "10111101110000000101001001010000", 
    83 => "10111101001001100111110110101110", 
    84 => "00111110001001001110010000000000", 
    85 => "10111100101011110000111110111000", 
    86 => "00111110001000011010011110100000", 
    87 => "00111101010001101100110111100101", 
    88 => "00111101000110001101001110100001", 
    89 => "00111100100110000011101000011110", 
    90 => "10111101011001101000111100010110", 
    91 => "10111101110010101110100100110010", 
    92 => "00111101101111000101101110110110", 
    93 => "00111011100110001111110001100110", 
    94 => "00111101100111110110110001101010", 
    95 => "10111101111010001100101101001011", 
    96 => "10111100001011001000101101111001", 
    97 => "10111101011010111100111000011010", 
    98 => "00111110000011010101000001100101", 
    99 => "10111101001001100100111110001011", 
    100 => "00111100011011101001100100111011", 
    101 => "00111010101000101111101110011000", 
    102 => "10111100100110100100101000101110", 
    103 => "00111101110001000101100001010100", 
    104 => "00111100011001010010010111110101", 
    105 => "10111101111110010000111010101010", 
    106 => "00111101000010101011000100110100", 
    107 => "10111100101101011100101000011100", 
    108 => "00111100101011110111011110111101", 
    109 => "00111101001101100011100000000000", 
    110 => "00111101100111010011001111101101", 
    111 => "00111100010011010110001111001100", 
    112 => "10111101010000011101000000011010", 
    113 => "10111110000111011101110110110001", 
    114 => "00111100101001001010100011000001", 
    115 => "00111101001110111110010111011010", 
    116 => "10111100110101011010011000100101", 
    117 => "10111101100100111101111101111011", 
    118 => "10111101111000011110110001001110", 
    119 => "10111101011000110111101111101011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_5 is
    component inference_conv2d_f3_1_1_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_5_rom_U :  component inference_conv2d_f3_1_1_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


