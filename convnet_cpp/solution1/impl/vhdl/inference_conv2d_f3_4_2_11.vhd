-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101000000001000110010000", 
    1 => "10111101100111000101101100111101", 
    2 => "00111100101110011000110110001011", 
    3 => "10111101101100111101110001100011", 
    4 => "00111101111001010011000110011000", 
    5 => "00111110000110001101010011111110", 
    6 => "10111100010111100011110001100001", 
    7 => "00111110000110110001001100010110", 
    8 => "10111101100001111100001100001101", 
    9 => "00111101101011010100011001101111", 
    10 => "00111101100110101011011110011001", 
    11 => "00111110010010100111000100010101", 
    12 => "10111101010011010101111011000011", 
    13 => "00111101111100001000101010101101", 
    14 => "10111011101010001010100010010110", 
    15 => "00111011001101111101010101101111", 
    16 => "00111101000110011011000101001100", 
    17 => "10111101100111001010010100000010", 
    18 => "00111101100000111010001100111110", 
    19 => "00111100111111000010010001110011", 
    20 => "00111110001000011101111010101101", 
    21 => "10111101010010000111100110000001", 
    22 => "10111101100100001010010111110000", 
    23 => "10111101000001000001110101001011", 
    24 => "00111101111100101100111110010110", 
    25 => "10111100101000000101000000110111", 
    26 => "00111110001100111010001011100000", 
    27 => "00111100101110100111110101110101", 
    28 => "10111110000000011011111100111000", 
    29 => "00111110001010001000111110000110", 
    30 => "00111110001101110000100010101011", 
    31 => "00111100110000100000110000010100", 
    32 => "00111110001011101100001101010100", 
    33 => "10111110010101011010100010011100", 
    34 => "00111110001010111011000011100110", 
    35 => "10111101011111010100000001001101", 
    36 => "00111101101110010101100010110001", 
    37 => "10111101011000101010111110101000", 
    38 => "10111101110100010011111110001110", 
    39 => "00111101100110111011001111010110", 
    40 => "00111101101001010000101101100000", 
    41 => "00111101101010110010111010000010", 
    42 => "10111110001000111010111100110010", 
    43 => "10111101111100010010111011000111", 
    44 => "00111100001001001110010100100111", 
    45 => "00111101110010111111000100111010", 
    46 => "10111101010100100010100001110001", 
    47 => "10111101011000100101010101100000", 
    48 => "00111101111100111111001010010001", 
    49 => "00111101110001001010001000001011", 
    50 => "10111101011001011101011000011110", 
    51 => "00111101101000101010101011010101", 
    52 => "00111101100100111111100010001011", 
    53 => "00111101011110000011000101101010", 
    54 => "00111100101110001000000111110010", 
    55 => "10111101001101111011001111001011", 
    56 => "00111101110100101011101010011101", 
    57 => "00111110000101110000101101001010", 
    58 => "10111110000000111111001101011010", 
    59 => "10111110000011000100110011100000", 
    60 => "10111110001101001000010110100001", 
    61 => "10111101111000011000000001001110", 
    62 => "10111110001000110100101101010001", 
    63 => "10111101110000111000101011000010", 
    64 => "00111110001101010100000100010000", 
    65 => "10111101110001110001101101010101", 
    66 => "00111101111111100001000000000110", 
    67 => "00111110000010010010011101001110", 
    68 => "10111110001101000001001000000110", 
    69 => "00111101100101000011101101001001", 
    70 => "10111101100000101000100000101101", 
    71 => "10111110001011001011101000110000", 
    72 => "10111101101000101000000001111000", 
    73 => "10111101100101010101010101011010", 
    74 => "10111110000111011001000101101000", 
    75 => "00111101110101111000111011100011", 
    76 => "00111110000000010111010101001011", 
    77 => "10111101000111111110111100000011", 
    78 => "00111110001000010001010010010000", 
    79 => "10111100100100001001101010111000", 
    80 => "00111110001010010111000011111000", 
    81 => "00111110001010001011001001100100", 
    82 => "00111101011111110110100010010110", 
    83 => "10111101101011110110011010110011", 
    84 => "10111101101011010100100001100000", 
    85 => "00111101010111011101010010010010", 
    86 => "10111101101011011000101100101011", 
    87 => "00111101010000111101111001000110", 
    88 => "00111110001100010111100011110111", 
    89 => "00111110000101011100101001101101", 
    90 => "00111110001100111001101101000101", 
    91 => "00111101011001010000100011001110", 
    92 => "00111110000000110011000101011101", 
    93 => "10111110010001100111000101101001", 
    94 => "10111011100011111110000011011110", 
    95 => "10111100111100110110001100000100", 
    96 => "00111101101010100011100110011101", 
    97 => "10111100000111010000111011101111", 
    98 => "00111101001110101110111111011011", 
    99 => "10111011111110010011010101110110", 
    100 => "10111101111001110000100011101110", 
    101 => "10111101011001111110110011100100", 
    102 => "10111100000010011010101000011000", 
    103 => "00111011011011000100010100111000", 
    104 => "10111100000011110010110101101111", 
    105 => "10111101000111010110010100011011", 
    106 => "00111100010110100000001111101101", 
    107 => "10111110001000101101001010111011", 
    108 => "10111101110011100001101011000101", 
    109 => "00111100110111001010111011111000", 
    110 => "10111100100001111010001000100000", 
    111 => "00111010001010111011000010011101", 
    112 => "00111110000101001101101100010110", 
    113 => "00111110001001100011101101101001", 
    114 => "10111110000001101000101011010111", 
    115 => "10111011110100001111110010110010", 
    116 => "10111100101010100110001000111111", 
    117 => "00111101101111010101110011111011", 
    118 => "10111100110100111101111000000011", 
    119 => "10111110000010010110010011101001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_11 is
    component inference_conv2d_f3_4_2_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_11_rom_U :  component inference_conv2d_f3_4_2_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


