-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100011101111010100111110", 
    1 => "00111010101000101001100110011101", 
    2 => "00111100011011011100011110000100", 
    3 => "00111100000100011101101111000000", 
    4 => "10111101110010010101011110110010", 
    5 => "10111101010000111101000101000110", 
    6 => "00111101101101100010111100111111", 
    7 => "10111101010110011100010001100010", 
    8 => "10111101000110011110010110011111", 
    9 => "10111101110111100101110000001100", 
    10 => "10111100000011110011110011111111", 
    11 => "00111101011110010010000101101111", 
    12 => "10111010110010001011000000110011", 
    13 => "00111101100001111111110001011011", 
    14 => "10111011101011101011100100100110", 
    15 => "10111101100101000110100000001111", 
    16 => "10111101100110110010000100001001", 
    17 => "00111101101011011110110100011011", 
    18 => "00111100000001011111011001101111", 
    19 => "10111101111001010001000110011101", 
    20 => "00111101101111101010101101010001", 
    21 => "00111010011111000111110110110111", 
    22 => "10111100110110001101001110100001", 
    23 => "00111101001001001101001010110011", 
    24 => "10111100101110101100100101011111", 
    25 => "00111100010001110110010010101110", 
    26 => "00111110000111111010001001101010", 
    27 => "10111010111011110110000011001011", 
    28 => "00111101010000111000111101101100", 
    29 => "00111100100011000000001101111001", 
    30 => "00111110000101111100110111001101", 
    31 => "00111101100110100001111110001110", 
    32 => "10111101000111111011100111011010", 
    33 => "00111101100010110000001110011111", 
    34 => "00111101101110110011101110000011", 
    35 => "10111110010100111110111110101110", 
    36 => "00111100011111100000111101100101", 
    37 => "10111110010010000000110110000000", 
    38 => "00111110001111111110001110110000", 
    39 => "10111101001101101110111111010001", 
    40 => "00111110001111100111111010100110", 
    41 => "00111101000000110100000010101101", 
    42 => "00111100110100100010101011011011", 
    43 => "10111110000010000100111001000000", 
    44 => "00111101101000001001110010000000", 
    45 => "00111101001111000010010110000000", 
    46 => "10111101101001001101100111101111", 
    47 => "10111101001011010110101010110111", 
    48 => "00111100101110101000010110100010", 
    49 => "10111110001111110010011011110010", 
    50 => "10111101101001001011010111111000", 
    51 => "00111101101000011101111110010001", 
    52 => "10111101110000101111010111000001", 
    53 => "00111101111101010010001000100001", 
    54 => "10111100010101010000011011000011", 
    55 => "10111101111001110011110111100010", 
    56 => "00111100000110100000000001110010", 
    57 => "10111101111110101110110111011101", 
    58 => "10111110010010010010101111000011", 
    59 => "00111110000101100011010100011110", 
    60 => "10111101001010011011101000001110", 
    61 => "10111011111000010000011011010110", 
    62 => "00111110000001001111001011110001", 
    63 => "10111110000010001100111100111010", 
    64 => "00111110010001101010000100011111", 
    65 => "00111101110000011100000110000110", 
    66 => "00111101011001100001010111111001", 
    67 => "10111110001110001010000110011101", 
    68 => "10111101000000010011111100010101", 
    69 => "10111101011101011111011110111001", 
    70 => "00111110000101010100010000110101", 
    71 => "00111100000000011110111100011000", 
    72 => "00111110000101001100110010101011", 
    73 => "00111100100000100101001000100000", 
    74 => "10111101110010011000110011011100", 
    75 => "00111101100001111011010101011110", 
    76 => "10111100101011001010111101010110", 
    77 => "00111100110010100010010100011101", 
    78 => "00111101110100011011001001011111", 
    79 => "00111101111011101011001111011101", 
    80 => "10111110000010111101101101011110", 
    81 => "00111101001100000010001101100100", 
    82 => "00111100100001111110000011010101", 
    83 => "00111110000001111101101110110001", 
    84 => "10111100111001101100011010101001", 
    85 => "00111101100001111110101110000111", 
    86 => "00111110001100000001000010000100", 
    87 => "00111100110110111001101010010000", 
    88 => "00111101011101111101110101010001", 
    89 => "00111100101000101110011110001100", 
    90 => "00111100011010010011100111101011", 
    91 => "00111100001101101011111101000100", 
    92 => "10111101111010111110110101110100", 
    93 => "00111101001011111111011100111111", 
    94 => "10111110010010000101110100110001", 
    95 => "10111101100010001101011110101010", 
    96 => "10111110010000000001010011111001", 
    97 => "00111100111100010010010010011011", 
    98 => "00111100001110111001010000101011", 
    99 => "00111100110111101010111101001101", 
    100 => "10111101010000011001010011000000", 
    101 => "00111110001100000101000010111110", 
    102 => "00111101011100101010101101101001", 
    103 => "10111110010001100111101010010110", 
    104 => "10111100100001100010110011010101", 
    105 => "00111110000011100010101111010000", 
    106 => "10111101110010001111000011110000", 
    107 => "10111100110010000100100000000011", 
    108 => "10111110000000101101111100001101", 
    109 => "00111110000100010000111010001000", 
    110 => "00111101110001111011000011001110", 
    111 => "00111110000011110110111111010010", 
    112 => "00111101011100100101110011111010", 
    113 => "10111101110010001100011001111000", 
    114 => "10111101110101000010001001000110", 
    115 => "00111101101010001011001001100100", 
    116 => "10111101101101000111011111100100", 
    117 => "10111101000010111111000110100110", 
    118 => "00111100010101001100111101100101", 
    119 => "10111110001101010011011010010011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_1 is
    component inference_conv2d_f3_4_3_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_1_rom_U :  component inference_conv2d_f3_4_3_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


