-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_107_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_107_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101100111110000101101100", 
    1 => "10111101100000111010010001110010", 
    2 => "10111110001001111000110010000111", 
    3 => "00111101110110010101110011001000", 
    4 => "10111101011110111010010110010011", 
    5 => "10111110001110110001111011100010", 
    6 => "10111101111100000011010010110001", 
    7 => "00111110000110001111011001001001", 
    8 => "10111101101110111011011100110001", 
    9 => "00111110000111000101100000100101", 
    10 => "00111101111011010111111000000010", 
    11 => "10111101011111110101000001000010", 
    12 => "00111101000010011111111001101100", 
    13 => "10111101100111111100111010001111", 
    14 => "00111101100000001010010101000001", 
    15 => "10111101000001111100010110101100", 
    16 => "00111100001111010000100111100001", 
    17 => "00111101111110100011111000111010", 
    18 => "10111101001000010101101001011000", 
    19 => "00111101101100101110111010101101", 
    20 => "10111101111000100110101110110101", 
    21 => "10111110000000100000000000111011", 
    22 => "00111100111001111010001101001000", 
    23 => "10111101110101001110001110111101", 
    24 => "00111110000010011011000011101110", 
    25 => "00111101100110110001101110100010", 
    26 => "10111110000001010011111100111010", 
    27 => "00111100010010111001101111100000", 
    28 => "10111101101111100010111100101011", 
    29 => "10111011011000111011010000011010", 
    30 => "00111100110011000010111000001100", 
    31 => "00111110001011100111101001110100", 
    32 => "00111101101011101100001111101000", 
    33 => "00111101000000111100111110110011", 
    34 => "10111110001000100110100110011100", 
    35 => "10111101100100101011101000010111", 
    36 => "00111101000011100010000110010110", 
    37 => "10111110001000100011010000100010", 
    38 => "00111110001000011101101001111011", 
    39 => "10111101010110110001101010100011", 
    40 => "10111100110010010100001111100001", 
    41 => "10111110000000010011111101001011", 
    42 => "00111101100111011001101110111101", 
    43 => "10111101111001010110010110000000", 
    44 => "00111101101001000111001010001011", 
    45 => "10111100011011010101011111110010", 
    46 => "00111100101000100010010100100100", 
    47 => "00111100010010011101011011100100", 
    48 => "10111101101001101100001111101111", 
    49 => "00111101101010110100011111110000", 
    50 => "00111100111001010110000001000010", 
    51 => "10111110001011101001110010001000", 
    52 => "00111101100100011001110011000110", 
    53 => "00111011001001100000011111100111", 
    54 => "00111101011110011010101010010110", 
    55 => "00111101101001111110011000100000", 
    56 => "10110110101111110110111000000010", 
    57 => "10111101111101100110100000111100", 
    58 => "00111100111110100111010101000111", 
    59 => "00111100111110110101101101010110", 
    60 => "10111101111000010011010101010100", 
    61 => "00111110001011101001100010011010", 
    62 => "10111101011010011110011001001110", 
    63 => "00111101101001101101111101011010", 
    64 => "00111110000011000001011110101001", 
    65 => "10111101011100001110111000010100", 
    66 => "00111101011101101101010100101111", 
    67 => "00111100100110100110110001011101", 
    68 => "00111010110000010111101101100000", 
    69 => "00111110001010011011101111110001", 
    70 => "00111101111110011111010111100000", 
    71 => "10111101110011011101010100001011", 
    72 => "10111101001000010100011010000111", 
    73 => "10111100101011001111000000100011", 
    74 => "00111110001100011011010101000010", 
    75 => "10111101100001100100111101010101", 
    76 => "00111011011000111111010111011110", 
    77 => "00111101000011000001100001010111", 
    78 => "10111101101110010000101101001111", 
    79 => "00111100110011010101001111011011", 
    80 => "00111100100011110011010000011011", 
    81 => "00111101101010100010100000100111", 
    82 => "10111101000100000001111010101100", 
    83 => "00111101100001001000101100101111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_107 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_107 is
    component inference_mult_1_120_120_84_s_W4_107_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_107_rom_U :  component inference_mult_1_120_120_84_s_W4_107_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


