-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001111100011111111010111", 
    1 => "00111101011101010101011100010101", 
    2 => "10111101101011000000101011010000", 
    3 => "10111101000011101111110110101111", 
    4 => "10111110010110111100101111100110", 
    5 => "00111110010010110111010100100001", 
    6 => "00111110000111101111111101011100", 
    7 => "00111110011010010010101100111101", 
    8 => "10111100001100010000100001001011", 
    9 => "00111110000011000111101110001001", 
    10 => "00111101101110001101000000010000", 
    11 => "10111110000111111110101111010001", 
    12 => "10111100110011011111001100001000", 
    13 => "00111100110110110001010110011011", 
    14 => "00111101101001110101000111110110", 
    15 => "00111110001001100001010111101100", 
    16 => "10111101111100100000101001110100", 
    17 => "10111110000100101110111100001011", 
    18 => "10111011011001101011001111111111", 
    19 => "00111101100000110100101100000001", 
    20 => "00111101010011111000010000110111", 
    21 => "00111101111101100110110001101110", 
    22 => "00111101001011010010110001101110", 
    23 => "10111101001000000110101000011110", 
    24 => "10111010100101010011010010110000", 
    25 => "10111101100010110011110010000010", 
    26 => "00111100000111000001000000001100", 
    27 => "10111100010000010001110111011000", 
    28 => "10111110000111010010111101011110", 
    29 => "00111010101110111111001010110101", 
    30 => "00111101001110000110111000000110", 
    31 => "00111101110101000100111111100011", 
    32 => "00111101100011010110010001101101", 
    33 => "00111101101110101111001111001010", 
    34 => "00111101010100111001001000011001", 
    35 => "10111101110101001100111111010001", 
    36 => "10111011100100110100010011010110", 
    37 => "10111101001010011000101010001110", 
    38 => "00111101001110011101001101100000", 
    39 => "10111011000110101101110011100110", 
    40 => "10111110001001001101011000011011", 
    41 => "10111101101111001101110100001110", 
    42 => "00111100101010101101001000111100", 
    43 => "00111100111000110001001101100000", 
    44 => "00111011010010010000000000111010", 
    45 => "10111101110001111010101010111001", 
    46 => "00111101101010010101101101000011", 
    47 => "10111101001001001000000110001010", 
    48 => "10111101110010101011011110001100", 
    49 => "10111011010111111000100001100110", 
    50 => "10111100000000110110100100101100", 
    51 => "10111011101001110000010011010010", 
    52 => "00111100100001111010000011011110", 
    53 => "00111011111110010000000000000111", 
    54 => "10111110001110101000001101101111", 
    55 => "10111101110101000111100101001111", 
    56 => "10111101010001100100010100101001", 
    57 => "00111101100000110011001011100011", 
    58 => "00111101010101100000010101011011", 
    59 => "00111101100111001000011101100010", 
    60 => "00111101100000110100011011000010", 
    61 => "10111100111101111000100111011010", 
    62 => "00111101001001111101111111100011", 
    63 => "00111110010111000011001110110101", 
    64 => "10111110010000100011100011011010", 
    65 => "10111100001100100001111001100000", 
    66 => "10111101100010101011100110001010", 
    67 => "00111011100110000011110010111000", 
    68 => "10111101100111001110111110111000", 
    69 => "00111101011101001100011100000010", 
    70 => "10111101110001110011101011100101", 
    71 => "10111100000101110001100000110101", 
    72 => "10111101000101100101000001010100", 
    73 => "00111110001011111000010010001000", 
    74 => "00111110010111101000110101010100", 
    75 => "10111101000010110110110001000101", 
    76 => "00111100000010000100010010001000", 
    77 => "10111110000101111010011111001010", 
    78 => "10111101000010111001001010100110", 
    79 => "10111101100101010000111000110100", 
    80 => "10111101110000111100101011000110", 
    81 => "00111101100101111000010111111001", 
    82 => "00111101111000011110111001100111", 
    83 => "10111110010000001010111111100110", 
    84 => "10111101001111011011101100110010", 
    85 => "10111100100110001110010101110100", 
    86 => "00111101000000000010010010110011", 
    87 => "10111100100011110101111001000010", 
    88 => "00111011101101000011010110010010", 
    89 => "10111110001001001101010000000010", 
    90 => "00111101011010010110000101110011", 
    91 => "00111110001000001011111110100001", 
    92 => "10111010000111010011000111000011", 
    93 => "00111101011001011001011000100111", 
    94 => "00111101101000000110110011110010", 
    95 => "10111101011101011100011000111011", 
    96 => "00111101101101001101101110101010", 
    97 => "10111101001010110111001110110111", 
    98 => "00111101110011010100010011011101", 
    99 => "10111100011110011000010111111110", 
    100 => "00111100110101001010011111111000", 
    101 => "10111010011101100011010001110010", 
    102 => "10111100001011110101110110111100", 
    103 => "10111100010110110011101110010000", 
    104 => "00111110000101001000001100000010", 
    105 => "10111101010110111110101000100110", 
    106 => "00111101010000111101110001111110", 
    107 => "10111101000101011011110010110000", 
    108 => "00111100000001101011110010101000", 
    109 => "00111100001010000111110101100010", 
    110 => "00111011101010011110000010111010", 
    111 => "00111101110101010111101000110101", 
    112 => "00111101101011111100011000010001", 
    113 => "10111110010110101110111100101100", 
    114 => "10111101110101101010001101111011", 
    115 => "10111110000000101101100100000110", 
    116 => "00111101100110100011001111001011", 
    117 => "10111101000010010110011100000010", 
    118 => "10111101001001101000110010101100", 
    119 => "10111101011110100101000110100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_6 is
    component inference_conv2d_f3_1_0_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_6_rom_U :  component inference_conv2d_f3_1_0_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


