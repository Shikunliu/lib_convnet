-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_9_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_9_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111010100001111110001110", 
    1 => "10111101010010011000101010101000", 
    2 => "10111100110000110000001000010011", 
    3 => "10111110001100011100100011101011", 
    4 => "00111110001000101111101000001101", 
    5 => "00111100101000001110011010010101", 
    6 => "00111101111011011001111100001010", 
    7 => "00111100111010111010100010010000", 
    8 => "00111101000011110101000110010010", 
    9 => "10111110001100111111000110000100", 
    10 => "00111100100101110000010110100000", 
    11 => "10111100110011011010101101001111", 
    12 => "10111101110000001100011110100110", 
    13 => "00111110000110010110100001010001", 
    14 => "00111101111101001101011100101000", 
    15 => "10111100100111010000010110010101", 
    16 => "00111101100100100010100001001001", 
    17 => "00111100110000101110000100100110", 
    18 => "00111101111110101110100100100101", 
    19 => "00111101100011010101011101101100", 
    20 => "10111100011111001100001110100000", 
    21 => "10111010111100101110011101101001", 
    22 => "00111101111111000011011100011110", 
    23 => "00111110000111010001000110111110", 
    24 => "00111100101011001000110100100111", 
    25 => "00111101010001111110111011111101", 
    26 => "10111101011000011100010010010001", 
    27 => "00111101110101110000110001010110", 
    28 => "00111101110101001000001101000101", 
    29 => "10111101100100001100000111111101", 
    30 => "10111110001001110010001001011011", 
    31 => "00111101011000000010100100000000", 
    32 => "10111101011011001111000110000000", 
    33 => "10111101110111110010100110010001", 
    34 => "00111101011001001111100000100010", 
    35 => "10111101000010001010100001111011", 
    36 => "00111011011111001111011100110111", 
    37 => "00111101010100111101101111010000", 
    38 => "00111110011010100110110110101101", 
    39 => "00111100111110100011101111010001", 
    40 => "10111101100101101111000000100001", 
    41 => "10111100010101100101110000101101", 
    42 => "10111101110100001100101100101001", 
    43 => "00111110000001111011001101010011", 
    44 => "00111101011000111110010101001101", 
    45 => "10111101000111001000010011101100", 
    46 => "10111100011100010000000010001001", 
    47 => "00111101100101111101110000001111", 
    48 => "00111110000100101001001000111110", 
    49 => "10111011101011101011110100101101", 
    50 => "00111110000111111001111100000010", 
    51 => "00111101111111010111100110001110", 
    52 => "10111101000010010111001001110000", 
    53 => "10111101110001011010011001101000", 
    54 => "10111100110100101110111111111100", 
    55 => "10111101001011101101101011000100", 
    56 => "10111100111011110001000011111010", 
    57 => "10111101110101111101100101010101", 
    58 => "00111101101100001010001101101100", 
    59 => "10111100011100011010000110011000", 
    60 => "10111101010100001010110000000101", 
    61 => "10111101110100111000101111001110", 
    62 => "10111110000011010010101100101100", 
    63 => "10111100011001001010001100011000", 
    64 => "10111101100001101000001100101111", 
    65 => "10111101011010011011011011101000", 
    66 => "10111101110011100011000001000100", 
    67 => "10111101110001000010111011000001", 
    68 => "00111101100100010010010000111101", 
    69 => "10111101100000101110011001110010", 
    70 => "00111100001101010001101101101011", 
    71 => "00111101011011100001000101010110", 
    72 => "00111101011000111110110111001011", 
    73 => "00111101110000001110110100010101", 
    74 => "00111110000011110101100011000001", 
    75 => "00111101100000101101111011110010", 
    76 => "10111110000000110110010100000010", 
    77 => "00111011111011111110000001001101", 
    78 => "00111100011010011001010101011010", 
    79 => "00111100111010100100001110100000", 
    80 => "00111110000010001111100110110001", 
    81 => "00111101011110111011011011111011", 
    82 => "10111100101110001001010101110011", 
    83 => "00111011110100110001111111001101", 
    84 => "00111101110100011100110110100011", 
    85 => "10111101000101100100100100110010", 
    86 => "00111101000111101110000100000001", 
    87 => "00111011100000101100010101010111", 
    88 => "00111100010010001101110000010010", 
    89 => "10111101011100100000110000111100", 
    90 => "00111101011100001001100101000000", 
    91 => "10111110000001100011000111111001", 
    92 => "10111101100001110011110110111010", 
    93 => "00111110000111111010000011010111", 
    94 => "00111101001001011010001101000011", 
    95 => "10111101111010011110000000011110", 
    96 => "10111100101110100111111111000011", 
    97 => "00111110000100111001100100101101", 
    98 => "10111101010101011110010111100110", 
    99 => "10111110000000101101101010011000", 
    100 => "10111100000100010011011110110110", 
    101 => "10111101000000110010000110001000", 
    102 => "00111101001111011000100101001000", 
    103 => "10111101001010111110010001110000", 
    104 => "00111100100001110110101000100010", 
    105 => "00111100011100000000100100010010", 
    106 => "00111101010010101011010111101100", 
    107 => "10111101011110011110001101010001", 
    108 => "00111101000001101110110010111001", 
    109 => "00111100100100000110110101101011", 
    110 => "10111101100101000010001100011101", 
    111 => "00111100111110000011011101111111", 
    112 => "00111101111110111110100110000101", 
    113 => "00111101101100011000101001000100", 
    114 => "00111101100010111100110100011011", 
    115 => "10111100111010111101001111000011", 
    116 => "10111101100111010100010110011001", 
    117 => "00111101111101000010111111101000", 
    118 => "00111101100011011111011101111101", 
    119 => "10111101000001011010111001111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_9 is
    component inference_conv2d_f3_2_1_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_9_rom_U :  component inference_conv2d_f3_2_1_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


