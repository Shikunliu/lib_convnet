-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_43_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_43_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100111001011111111100111", 
    1 => "00111101111010101001101011000011", 
    2 => "10111100100110011000101001001010", 
    3 => "00111100000111010010110011101100", 
    4 => "00111110010101110001000000000010", 
    5 => "00111100111011011010111011000101", 
    6 => "10111100001100101100111011110101", 
    7 => "10111101111001101001001101111101", 
    8 => "10111110000111101010011111001110", 
    9 => "00111101101011010001100010011101", 
    10 => "10111101110000001010011001000000", 
    11 => "00111110000100110100000111100001", 
    12 => "10111101100011000011111010000010", 
    13 => "10111011110000001011010011010001", 
    14 => "10111110000100111111111111101111", 
    15 => "00111100010001010001010000000110", 
    16 => "00111110001100101101010011010100", 
    17 => "00111101110010111111100010011111", 
    18 => "00111101010110011101001000000011", 
    19 => "10111101101011000000011110011110", 
    20 => "10111101101100000000101100011101", 
    21 => "10111101010111110101011110110100", 
    22 => "00111110011001011000010101111011", 
    23 => "00111110001110001110101101000110", 
    24 => "10111011110111101011000001100101", 
    25 => "10111101101000000011111000000110", 
    26 => "00111110000010010011010001101010", 
    27 => "10111100110110111001000100100000", 
    28 => "00111101100100110101010100011111", 
    29 => "00111100110100101011001110010111", 
    30 => "00111011111000001101001111000000", 
    31 => "10111101011010001111001101110100", 
    32 => "10111101011001010011001000011110", 
    33 => "00111110001001001100111110001101", 
    34 => "00111100111000110001101001001100", 
    35 => "10111110001111010111101100100000", 
    36 => "00111101001010010101001001110100", 
    37 => "10111110001000110110101010000011", 
    38 => "10111100100000110111111000111010", 
    39 => "00111100000111010000000000000001", 
    40 => "00111101000001011011111000011011", 
    41 => "10111101001111001111001001111111", 
    42 => "10111101110111001110001100010101", 
    43 => "10111101100001110000101010110110", 
    44 => "00111101101001010110111100100101", 
    45 => "10111101101000100000000000010010", 
    46 => "10111101100010000100101101010000", 
    47 => "10111100100000010011010000010010", 
    48 => "00111101101000110101111110000001", 
    49 => "00111101100110001100010101111001", 
    50 => "10111101110111010000111010011001", 
    51 => "00111110000000000111111110101010", 
    52 => "00111101100001100000100001001010", 
    53 => "00111101001111110101111011010101", 
    54 => "00111110000111111011111011111101", 
    55 => "00111100101101001011011101100010", 
    56 => "00111110001101010101111101111000", 
    57 => "10111100101010111111111110011000", 
    58 => "10111110010001010000101100001111", 
    59 => "00111100100011111101110000010110", 
    60 => "00111101111111100011010000110011", 
    61 => "10111100000111111011001111001111", 
    62 => "10111101101011011111010111001111", 
    63 => "10111100001010000110111110001011", 
    64 => "00111101110010111100000010101110", 
    65 => "00111110000001110001111111111111", 
    66 => "00111101101011101000000100001111", 
    67 => "10111101101111010110000000010011", 
    68 => "10111110000010001101000001000110", 
    69 => "10111101101101000110001110011010", 
    70 => "00111101110001011111001111100101", 
    71 => "10111101010001000110100001000101", 
    72 => "10111100011010110000001111101111", 
    73 => "00111110001011101101111010011000", 
    74 => "10111110000110001110101000111010", 
    75 => "00111101100000100101100111100010", 
    76 => "10111100000011110100011011010000", 
    77 => "10111101111001011001011111010101", 
    78 => "00111101010011100011001001011101", 
    79 => "10111110001100111001101110001001", 
    80 => "10111110000011011111101101010000", 
    81 => "00111101011100111110111000101001", 
    82 => "10111110000101111011100111100000", 
    83 => "10111100100101010110000001001111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_43 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_43 is
    component inference_mult_1_120_120_84_s_W4_43_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_43_rom_U :  component inference_mult_1_120_120_84_s_W4_43_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


