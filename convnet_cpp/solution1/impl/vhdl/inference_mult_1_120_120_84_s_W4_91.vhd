-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_91_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_91_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011001100110001101011100", 
    1 => "10111101101011101100110111111001", 
    2 => "00111101001001110000010010100001", 
    3 => "10111101110100011010000100010010", 
    4 => "00111101101101000001110110101001", 
    5 => "00111100111111101100011110000110", 
    6 => "10111101110011000100001000000101", 
    7 => "10111101100000101010100011100101", 
    8 => "00111101110101000111010110100011", 
    9 => "00111101111100111010111101110101", 
    10 => "10111101101001100011111000110000", 
    11 => "10111101000100110100100110100100", 
    12 => "10111101111011100110100001011110", 
    13 => "10111011100000101010110011000011", 
    14 => "00111101110100101101110010110001", 
    15 => "00111101101101011001111000000100", 
    16 => "10111101000111101101111000101100", 
    17 => "00111101010011100100110000101001", 
    18 => "00111101100000001101111011111011", 
    19 => "10111101001000110111110110011001", 
    20 => "10111110000100101010101010011111", 
    21 => "00111101100111000000010010101110", 
    22 => "10111101101111001111010000011111", 
    23 => "10111101110111110001101001011101", 
    24 => "10111100000100111110000101001001", 
    25 => "10111101100010011000000011110101", 
    26 => "10111101110011100111010001101101", 
    27 => "10111100101011101010001001110101", 
    28 => "00111011111011100010000110011100", 
    29 => "00111101111011010100110101000000", 
    30 => "00111011111001111111001100011001", 
    31 => "00111101111100001100011011111000", 
    32 => "10111101001101100100110100101111", 
    33 => "10111101001100101100101000100010", 
    34 => "10111110001101000010010001011111", 
    35 => "10111110001101111100010000011010", 
    36 => "00111100101111110001101000100111", 
    37 => "10111101011000101111110101011011", 
    38 => "10111101001010000010011110000001", 
    39 => "10111101010101000000000000010111", 
    40 => "00111110000001100101101001010111", 
    41 => "00111101001010111100010000111111", 
    42 => "00111110000110110001110001000011", 
    43 => "00111101001010011111011000001000", 
    44 => "10111101000000100011001011000101", 
    45 => "10111101100000100000100011010100", 
    46 => "00111100001100111010011010001011", 
    47 => "00111110001011010100010011011101", 
    48 => "10111100100010100001001000111101", 
    49 => "00111100100110001101010011100011", 
    50 => "00111101000000111010010101010110", 
    51 => "00111110000110101010111000101001", 
    52 => "00111101101111010011000010100000", 
    53 => "10111101100101011100011000000101", 
    54 => "00111110000100001110001001111110", 
    55 => "10111110000110100101110010100011", 
    56 => "10111101001001101001000011111001", 
    57 => "00111011111011000010110010001110", 
    58 => "10111100111110010100001001000001", 
    59 => "00111101100100001101001011011110", 
    60 => "10111101110000101011010111100101", 
    61 => "00111101111100000110101000101011", 
    62 => "10111101100100110000000000111101", 
    63 => "10111100101100110011011001011001", 
    64 => "00111101011100100000000100111010", 
    65 => "10111110001001001010011011101100", 
    66 => "00111101000111100100111111111101", 
    67 => "00111100110011011111110100011001", 
    68 => "10111011000001111100100010110111", 
    69 => "10111101110111000000111010111111", 
    70 => "00111101011001100101101000111101", 
    71 => "00111101111011101110001010000110", 
    72 => "10111110001001011111001001000101", 
    73 => "00111010110110111100010000001100", 
    74 => "00111101111101110010001011100010", 
    75 => "10111110000001111101001100001011", 
    76 => "00111101100111100010101111000010", 
    77 => "10111101001111000111101011011011", 
    78 => "00111101100000001011110111001011", 
    79 => "00111101101010010111010111001011", 
    80 => "10111101111001100101111100001111", 
    81 => "10111101010100110100100111110100", 
    82 => "00111101110010101011001011100001", 
    83 => "00111100101010000100110111000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_91 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_91 is
    component inference_mult_1_120_120_84_s_W4_91_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_91_rom_U :  component inference_mult_1_120_120_84_s_W4_91_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


