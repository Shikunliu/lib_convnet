-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101000011010000001100100", 
    1 => "00111101110100100001001001010001", 
    2 => "10111110000110011011010001010111", 
    3 => "00111101101100001001100010010001", 
    4 => "00111101011010011011010110001011", 
    5 => "00111101101010001111110110111011", 
    6 => "00111100010101011110001000011111", 
    7 => "00111101110000010111010100100011", 
    8 => "00111100111101001011010101001001", 
    9 => "00111101100001001011001111101100", 
    10 => "10111101110010111000010000000101", 
    11 => "00111101000000000001010101100100", 
    12 => "00111110001100100101001011001110", 
    13 => "00111110000001010010001001100100", 
    14 => "10111011101100100111110001101010", 
    15 => "00111101011111101110001010010100", 
    16 => "10111100011001110111000100101000", 
    17 => "00111101011010111111011110111011", 
    18 => "10111101110010110101110100000011", 
    19 => "00111101010111111100011111001100", 
    20 => "00111101111111101010110011001001", 
    21 => "10111010111011101001100101111011", 
    22 => "00111101001110001111111110010000", 
    23 => "00111100000000010111110011001101", 
    24 => "00111100101010010110110110111000", 
    25 => "10111101100110101000010100001111", 
    26 => "00111110000111111111111000101010", 
    27 => "00111101111001101001001011110111", 
    28 => "00111110000001010011000111011011", 
    29 => "00111100100111010111010001001111", 
    30 => "10111101110101100101110100111010", 
    31 => "00111101000010110010100110010100", 
    32 => "10111101100001100110110100110111", 
    33 => "10111011101110101010111110101001", 
    34 => "00111101100110101110101011111011", 
    35 => "10111101111000001111011011110001", 
    36 => "10111101101000011111111100010011", 
    37 => "10111110000011010000101100110001", 
    38 => "00111011111111100111111011100001", 
    39 => "00111100000110011110011101011101", 
    40 => "10111110001000110101100011110011", 
    41 => "00111101010010110011010000010001", 
    42 => "00111101000000110101011011001101", 
    43 => "10111101110110011110111000000011", 
    44 => "10111101101101110011100111001011", 
    45 => "00111101111101111101110001111011", 
    46 => "00111101001000011111111000111101", 
    47 => "10111101001111111100001101111111", 
    48 => "10111101111010110010100101011111", 
    49 => "00111110000101110001001110101101", 
    50 => "10111100000111111010001000111101", 
    51 => "00111110000000001110100011001001", 
    52 => "10111110000010011100110110000001", 
    53 => "10111110001110100000011111110110", 
    54 => "00111101000100000010001100101110", 
    55 => "10111101110010011001011000001001", 
    56 => "10111100110110101100001001011001", 
    57 => "00111101010100100000010011001010", 
    58 => "10111101010011110110111011010011", 
    59 => "00111100110110000111000101000110", 
    60 => "00111101110010011010110010111101", 
    61 => "10111100110010011000110101000111", 
    62 => "00111101100101111000111100110011", 
    63 => "00111101011000100100101001000010", 
    64 => "00111100110000000011101101011001", 
    65 => "10111101110110100010101101011010", 
    66 => "00111100101101010110100101101110", 
    67 => "00111101100000110000001101001000", 
    68 => "00111100001101011101111001110100", 
    69 => "10111110001101100101001001111010", 
    70 => "10111101000100111110001011110001", 
    71 => "00111101100010010100000100001100", 
    72 => "10111110010000010011001001110010", 
    73 => "10111101011100011111000000000111", 
    74 => "00111101000010111100110110101110", 
    75 => "10111101000000010110010000011001", 
    76 => "10111101100000000101000011110011", 
    77 => "00111110010010110000001010010011", 
    78 => "00111101010010001111000010111010", 
    79 => "00111100110011001101101010100100", 
    80 => "10111101101011110000110111111101", 
    81 => "10111100101101001110001100110111", 
    82 => "10111100101010111010011110111001", 
    83 => "10111110001000111110100011011110", 
    84 => "00111101100010101100001111010001", 
    85 => "10111101011111110100100001100101", 
    86 => "00111101011010011011011101101111", 
    87 => "00111100111110111011011111010010", 
    88 => "10111101101111000110110000011111", 
    89 => "00111101110001001110011111000110", 
    90 => "10111101001111110101111011110000", 
    91 => "10111101011000110010111101111010", 
    92 => "00111100000000001111101101010011", 
    93 => "00111101011101101011100101001010", 
    94 => "00111011101100100110111101101001", 
    95 => "10111100101010001111011010011001", 
    96 => "00111110001011000010101011001100", 
    97 => "00111101100000000000000111010110", 
    98 => "10111110000101000000101110111011", 
    99 => "00111101101101100101100101110011", 
    100 => "00111101001110000110101001110101", 
    101 => "10111101010101010110001010111000", 
    102 => "10111101101000110000111010000000", 
    103 => "10111101100111010101001110100110", 
    104 => "10111101010001001100001101001001", 
    105 => "00111110001001100111010010001110", 
    106 => "10111110000100110110101011000110", 
    107 => "00111101011111111100000101001100", 
    108 => "00111101001001110101010110010101", 
    109 => "00111101010000010001001101000000", 
    110 => "00111101101011111011110011111111", 
    111 => "00111101011000111011000101100101", 
    112 => "00111101110001101000100010110000", 
    113 => "10111101011111000111010111010010", 
    114 => "10111100110000001111101111011110", 
    115 => "00111101001111011101011111101101", 
    116 => "00111110000110110011001101010101", 
    117 => "10111100100101001011111100111111", 
    118 => "10111110000110100001000000010111", 
    119 => "10111100100000010010101011011000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_12 is
    component inference_conv2d_f3_3_3_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_12_rom_U :  component inference_conv2d_f3_3_3_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


