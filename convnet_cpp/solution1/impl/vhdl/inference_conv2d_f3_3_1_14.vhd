-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110011011000111111010110", 
    1 => "00111101100100110110000100111100", 
    2 => "10111011111011110000101100111011", 
    3 => "00111101011010111001100101011100", 
    4 => "10111101010110010010011011100011", 
    5 => "00111100110010100011011001001111", 
    6 => "10111100101110101101111010001110", 
    7 => "10111110001011000101101011000100", 
    8 => "00111100110000110001100111000110", 
    9 => "00111101010101000001010111001100", 
    10 => "00111011101100001011100001000100", 
    11 => "10111101000101001011010000111101", 
    12 => "00111101101110001110011110001101", 
    13 => "00111101011011010001001000110111", 
    14 => "00111100101111011110010010011101", 
    15 => "00111110000000101001011100111001", 
    16 => "10111011101110101100101000000000", 
    17 => "00111100110110011010000110010010", 
    18 => "10111110010010001101011001001101", 
    19 => "00111110000111111111010010111010", 
    20 => "00111101001110001000010011111100", 
    21 => "00111101100000100011101001011111", 
    22 => "10111100110000101011011010010100", 
    23 => "00111101100100010101111111110100", 
    24 => "00111101011111101100011101010001", 
    25 => "00111101100011001111010101111100", 
    26 => "10111110000110101010100001100101", 
    27 => "00111100010001001010100111101001", 
    28 => "00111101010111000001110100011100", 
    29 => "10111101011000011010000000101110", 
    30 => "00111110010110101100111000100101", 
    31 => "00111101010010010010100110101010", 
    32 => "10111101001100001011101011101001", 
    33 => "10111101110010111110000111011110", 
    34 => "00111100111101011000101001011011", 
    35 => "10111101100001100001111001111000", 
    36 => "00111110000101010010011101011111", 
    37 => "10111101000101010011100101001101", 
    38 => "10111101101111001111011111011000", 
    39 => "00111100000000100111011001011101", 
    40 => "00111101011110000101000110110110", 
    41 => "00111110000111110110011110110010", 
    42 => "00111101010101110110111011001100", 
    43 => "00111101010010010001010011001100", 
    44 => "00111110000010011101010000001111", 
    45 => "00111101101110010010111100101011", 
    46 => "00111110001001110100111001100110", 
    47 => "00111100000101110101010100111100", 
    48 => "00111101101111001100000110100010", 
    49 => "00111100101101111100101000000110", 
    50 => "10111011101011110011101011010110", 
    51 => "00111101111101101111111111000001", 
    52 => "10111011000001000000101111101001", 
    53 => "00111100111101111101000111111110", 
    54 => "10111101011011010001101101110001", 
    55 => "00111110000101000100001001000010", 
    56 => "10111101000010001011100111100011", 
    57 => "00111110011010001111100101101110", 
    58 => "00111100111010110000110110010101", 
    59 => "10111101001111101010000111100001", 
    60 => "00111110001101000001011101000100", 
    61 => "10111101010000100000110101110001", 
    62 => "00111101001111111010010110111000", 
    63 => "10111110011001010101011000001000", 
    64 => "00111100100001010111101010010011", 
    65 => "10111101010010011101101101100110", 
    66 => "10111101001000011001111100000111", 
    67 => "10111110010001111110011010110100", 
    68 => "00111101000010100111100001011111", 
    69 => "00111101100111010001100101100110", 
    70 => "00111101010100111111010110000000", 
    71 => "10111101010010001111010100000111", 
    72 => "00111101011111000000101011111001", 
    73 => "10111101110100010100101000001010", 
    74 => "10111101001110010000011111011001", 
    75 => "00111110001001001100101001001111", 
    76 => "10111101000100110011110101111010", 
    77 => "10111101000110010110111101011000", 
    78 => "00111101100111111100100110010100", 
    79 => "00111101010010001111100011001101", 
    80 => "00111101100110111110011101000100", 
    81 => "00111101110101110111000100000000", 
    82 => "00111110000111110000111001001110", 
    83 => "10111101111110100011000100011111", 
    84 => "10111101010011001011001100011100", 
    85 => "00111110001001101010000110100101", 
    86 => "00111101011010000111010010101110", 
    87 => "10111101011100110011111010000110", 
    88 => "00111101110011111001111010111111", 
    89 => "10111101011101110101110001011000", 
    90 => "10111101000000110100111010111010", 
    91 => "00111110001100010010110011110001", 
    92 => "00111110010010001101001100101000", 
    93 => "10111101100110111010101100000111", 
    94 => "00111101110001000001101001110111", 
    95 => "10111100010001011010110110001001", 
    96 => "00111101101000001111111100101100", 
    97 => "00111100110000000000110010010101", 
    98 => "00111101100000011001001001110010", 
    99 => "10111100111111001001100010100010", 
    100 => "00111100110101001010000010100001", 
    101 => "00111110000001011010101111000001", 
    102 => "10111110000110010101111100100100", 
    103 => "10111110001001001010010001001100", 
    104 => "00111110000000100111000011110100", 
    105 => "00111101100000011110000110000010", 
    106 => "00111101111101001010000010100001", 
    107 => "10111101100000001110010100010000", 
    108 => "00111110000011100011001101101010", 
    109 => "10111101011000110010010000001100", 
    110 => "00111110000010110101000011110100", 
    111 => "00111101100010101101101000110100", 
    112 => "00111110001000111010110111100010", 
    113 => "10111101110000101000100010110100", 
    114 => "00111100100000100110111001101111", 
    115 => "00111110000000000011010011110100", 
    116 => "10111101000011111011100110010111", 
    117 => "10111101110010101101110010010000", 
    118 => "10111101111001000000011111001100", 
    119 => "00111110000000101010101110101100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_14 is
    component inference_conv2d_f3_3_1_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_14_rom_U :  component inference_conv2d_f3_3_1_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


