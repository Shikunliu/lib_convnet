-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010101101110110011111100", 
    1 => "10111101011100000100000100101011", 
    2 => "00111100101011001011001111110011", 
    3 => "00111101001011101100000101111111", 
    4 => "10111101010001111000111011010101", 
    5 => "10111100100011000011001111101011", 
    6 => "10111110001000001111000111110101", 
    7 => "10111100110000101100110110100101", 
    8 => "00111101000111010001111110010110", 
    9 => "00111101111101111100100100010101", 
    10 => "10111100110111011100111110111111", 
    11 => "00111101110001101110111011101101", 
    12 => "10111100111100011010100100100101", 
    13 => "10111101101111110101110110010011", 
    14 => "10111101110100110111110010011010", 
    15 => "00111101101010000001111100101011", 
    16 => "10111110001100100011101001101101", 
    17 => "00111101101010000100100110010101", 
    18 => "10111101100010111111001011001101", 
    19 => "10111100100101110000100100110001", 
    20 => "00111101000011111011101100101001", 
    21 => "10111100110110111101000101001101", 
    22 => "00111110001001100000011110000001", 
    23 => "00111010011010101000001100001110", 
    24 => "00111110010101110000111100111001", 
    25 => "00111101010110110100000110100101", 
    26 => "10111101011001101100100111001110", 
    27 => "00111101001000100000000101000111", 
    28 => "10111100100101111001100001101101", 
    29 => "00111110001010100101100100111010", 
    30 => "10111101000100010110111101000100", 
    31 => "10111100100100000000001100011000", 
    32 => "10111100110000100000101101110011", 
    33 => "00111101000000101100111010110010", 
    34 => "00111100111001001010110010001000", 
    35 => "00111100100111100000110101100111", 
    36 => "00111100100000111111010010000001", 
    37 => "00111101010111001001100000011100", 
    38 => "10111101110000101110100100101100", 
    39 => "10111101101101110100111100111100", 
    40 => "00111101001111000010010111101011", 
    41 => "10111110000000000011101010111000", 
    42 => "10111100010011010001111010010111", 
    43 => "00111100111011100100010100100010", 
    44 => "10111110001001010111001011011110", 
    45 => "10111110000110101011100001100011", 
    46 => "00111110001101110100001000010100", 
    47 => "00111101101111001010111001010111", 
    48 => "00111101100000100010111111100011", 
    49 => "10111101000000001000011010100011", 
    50 => "00111101000000111011001100101110", 
    51 => "00111101100000010111100111101000", 
    52 => "00111101001010000101100001011110", 
    53 => "10111100100000101111101101011101", 
    54 => "10111101101000111011100111110001", 
    55 => "10111101110011111010010110001111", 
    56 => "10111110001111100111101110000001", 
    57 => "00111110000111100101100010100011", 
    58 => "10111101111110000011000011100100", 
    59 => "10111100010111110001100100000000", 
    60 => "10111101010010110011100011111110", 
    61 => "00111101111001011010010001101010", 
    62 => "00111101001100101000100000010011", 
    63 => "10111101111000101011110101111111", 
    64 => "10111110000001110100001110100110", 
    65 => "10111101000011111100111011100000", 
    66 => "10111110000100111101001111100101", 
    67 => "10111110000000000100110110011000", 
    68 => "10111110001001000111011101111001", 
    69 => "00111101101000100001000100110111", 
    70 => "00111110001010010011010011110000", 
    71 => "10111101110101010000000010010011", 
    72 => "00111101010011100101110000110100", 
    73 => "10111101101101000011011100100100", 
    74 => "00111100011001110111010000011000", 
    75 => "10111101100101100010100011001100", 
    76 => "00111100001110001010000110011101", 
    77 => "10111101110101001000100110001111", 
    78 => "00111100100100000010011010111111", 
    79 => "10111100001101010000110111111111", 
    80 => "00111110001111101010111101101000", 
    81 => "10111110001111001110001001001100", 
    82 => "10111100001011100101000011100001", 
    83 => "00111101001101010011101000111111", 
    84 => "00111101100100001011111000001110", 
    85 => "00111110000000001001111010011001", 
    86 => "10111101000111001110011111101000", 
    87 => "00111100100101101110111111010001", 
    88 => "10111101001001010110111111100001", 
    89 => "10111101010001000101010010101001", 
    90 => "10111101000110001010110101110110", 
    91 => "00111101110011101011000100111110", 
    92 => "10111110001100011110011000000100", 
    93 => "10111101110001010011000111110110", 
    94 => "10111101100111100101010000010011", 
    95 => "10111100110101010000000011100011", 
    96 => "10111110000011000110110001010101", 
    97 => "10111101011001111001001000110000", 
    98 => "00111101100100101001000100010111", 
    99 => "10111101101110010110001111000001", 
    100 => "10111101101010010110101101000001", 
    101 => "10111110000100111000110111100111", 
    102 => "10111101111010110001000000110100", 
    103 => "10111101010110100110100110001000", 
    104 => "10111011110010111111101010101010", 
    105 => "00111110000111010001000101111011", 
    106 => "00111110000011000011000000001010", 
    107 => "00111101101101110011100010001001", 
    108 => "10111101000110111010011111111100", 
    109 => "10111101101110101010110111011001", 
    110 => "10111101010100100001011100111111", 
    111 => "10111101000110001010001110000000", 
    112 => "00111101100001011001011011111110", 
    113 => "00111101100010101011110100110110", 
    114 => "00111110001111100110000010000000", 
    115 => "00111100110101100010000000110011", 
    116 => "00111110000101011100000111000110", 
    117 => "00111011101001010110100001101111", 
    118 => "00111101100010000100000100110010", 
    119 => "10111100111111111000000001001001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_7 is
    component inference_conv2d_f3_1_2_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_7_rom_U :  component inference_conv2d_f3_1_2_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


