-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110011110011100010111000", 
    1 => "10111101111110101011011111011100", 
    2 => "10111101101101110011001001011001", 
    3 => "00111101101010111101011011000000", 
    4 => "10111101000111000100110010011101", 
    5 => "00111101110101100010100101010010", 
    6 => "00111100110111011011111101100011", 
    7 => "10111101001001101101111010010001", 
    8 => "00111110001101000000111000010111", 
    9 => "10111101000101111110111011101111", 
    10 => "10111101001000100010011111011110", 
    11 => "00111101100001011101110000011000", 
    12 => "00111110000000000001000100001010", 
    13 => "00111100111010000001100100100100", 
    14 => "00111101011000110100101000000010", 
    15 => "00111100100100001101111011100000", 
    16 => "00111110001101011110011111001001", 
    17 => "10111101111101001101110101110010", 
    18 => "00111011101101110010001111011001", 
    19 => "00111110000010011110110000101101", 
    20 => "00111011110111010110100100111101", 
    21 => "00111101110111010010000011110011", 
    22 => "00111101011111111101101100010111", 
    23 => "10111101011100100001101100111011", 
    24 => "00111101100111111000101101001011", 
    25 => "10111110001000010111101001000110", 
    26 => "10111101100001010111100001000101", 
    27 => "10111101101001101110101000110101", 
    28 => "10111101000011011111100011100111", 
    29 => "10111101110111100011101001111110", 
    30 => "10111011111100100001110000010010", 
    31 => "00111100011101111010100001000011", 
    32 => "00111110010001000110000110110111", 
    33 => "10111101011010110010011110110001", 
    34 => "00111101010010100110010111101010", 
    35 => "00111101101001100100001001101111", 
    36 => "00111110001111010110110111000010", 
    37 => "00111101101001001111110010110010", 
    38 => "00111010101111000100010101000000", 
    39 => "00111101100111010111011000011000", 
    40 => "10111101101100000010101010010010", 
    41 => "10111101000001000101111011010101", 
    42 => "10111101111011100100011111011100", 
    43 => "00111110001110111001010111100110", 
    44 => "10111101111001000011111001010011", 
    45 => "10111100100011111101001110110011", 
    46 => "10111100110101001101101001001101", 
    47 => "10111110010100110100110000011011", 
    48 => "00111101101010010010111011011011", 
    49 => "10111101110110111110001100111011", 
    50 => "00111011101011000110111100110100", 
    51 => "00111110000101010100001001011111", 
    52 => "00111101111111000001110011100111", 
    53 => "00111101001000101010010010001011", 
    54 => "00111101101101001111000100001110", 
    55 => "00111101100111000001110110110000", 
    56 => "00111101010011100111111110100101", 
    57 => "10111100110110011001001010101110", 
    58 => "00111101110100101111110010101101", 
    59 => "10111101010011101001110001100000", 
    60 => "00111101111101001101110011101100", 
    61 => "10111100010110100110100000101011", 
    62 => "10111101011100101110100101000111", 
    63 => "10111011001110011100000000000000", 
    64 => "10111110000101011000001101100010", 
    65 => "10111100010110100001001111011101", 
    66 => "10111011011111101100001101101010", 
    67 => "10111101110001011111110011000010", 
    68 => "10111101011110100010000111101010", 
    69 => "10111101110110010010101011111010", 
    70 => "10111110000010110000100110100110", 
    71 => "10111101111101100001110111001001", 
    72 => "00111100000111000000101100111001", 
    73 => "10111101011011111100011000010001", 
    74 => "10111110000000000001100101101110", 
    75 => "10111101101100100001001000011100", 
    76 => "10111110001111111001011101101000", 
    77 => "00111101101011010100001010001110", 
    78 => "10111100000100010010001110010100", 
    79 => "10111101010001110100011110000111", 
    80 => "10111101111110101110101111000100", 
    81 => "10111100010100001011001111100010", 
    82 => "10111011011101100000100110000111", 
    83 => "10111101101011110001010100000100", 
    84 => "00111100101010001111011000101110", 
    85 => "10111101011000001101001111101011", 
    86 => "10111110000000001011001100001011", 
    87 => "00111101101010111100100011001110", 
    88 => "10111101010011100011100100101110", 
    89 => "10111110001110010010000100000100", 
    90 => "00111101111001001000101101100101", 
    91 => "10111101010111011010101101110111", 
    92 => "00111110010000010100011001011111", 
    93 => "00111101100010010000100111001010", 
    94 => "10111101101001010001100111110011", 
    95 => "00111100100001000101111110101011", 
    96 => "00111101000101000010111101111101", 
    97 => "10111101111010100111000001001100", 
    98 => "00111101001000000100010110100000", 
    99 => "10111011101110001101101010010010", 
    100 => "10111110000110011111001111000111", 
    101 => "00111101110000000100001011100110", 
    102 => "10111101000100001101011001100010", 
    103 => "00111100010101111100111101011111", 
    104 => "00111101101011000110110100101011", 
    105 => "00111101001111111011100101010011", 
    106 => "00111101011100010001101010100101", 
    107 => "00111100001000001110110101101011", 
    108 => "00111100110000100110010010010100", 
    109 => "10111101010110101100001011011111", 
    110 => "10111101100111011001001111011111", 
    111 => "00111101101011010010100111001111", 
    112 => "10111101100000100011111110000011", 
    113 => "10111110001001001000011010101101", 
    114 => "10111100110010110010111100111110", 
    115 => "10111110000011110101001110000010", 
    116 => "10111100111110111000101001001111", 
    117 => "10111101001010100110011010001011", 
    118 => "10111101001101110110100000110001", 
    119 => "10111100101101001011001111010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_6 is
    component inference_conv2d_f3_4_2_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_6_rom_U :  component inference_conv2d_f3_4_2_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


