-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110100000010100101000011", 
    1 => "10111011111001100010011111010010", 
    2 => "10111101001100110100101000101010", 
    3 => "10111100001101110000000111110101", 
    4 => "10111101000110110001100001101111", 
    5 => "10111001100000010110100110000000", 
    6 => "00111110001111110110110010101101", 
    7 => "00111101100011101010011110011000", 
    8 => "10111101001010110001010110101000", 
    9 => "00111101010101011100101001010010", 
    10 => "00111101010111010000010110010101", 
    11 => "10111100100000010101101010101001", 
    12 => "10111100111010110001011101110000", 
    13 => "00111110000011100001011000001110", 
    14 => "00111101100111010001111000101011", 
    15 => "00111101111010101011000101001111", 
    16 => "00111100101110111100111001111000", 
    17 => "10111100101010111111100100011000", 
    18 => "10111110000011001011100010011101", 
    19 => "00111101001010110111110001101011", 
    20 => "00111101011100100110101000110000", 
    21 => "00111101100000110010010101001110", 
    22 => "00111101010010100001010111001110", 
    23 => "00111101001011110110111010011101", 
    24 => "00111101011011100110001100000101", 
    25 => "10111110000001100100010101011111", 
    26 => "00111101100010010111010111100101", 
    27 => "10111101101001101111010010010110", 
    28 => "00111100100011001000110000110101", 
    29 => "10111101101011011100101110000000", 
    30 => "10111110010011101001010011101110", 
    31 => "10111100101111111100000110110111", 
    32 => "00111110001111001110010100101110", 
    33 => "10111110000010000001110100111011", 
    34 => "00111100010111001111001100100000", 
    35 => "00111110000111010011111010010010", 
    36 => "10111101100000000111100110110000", 
    37 => "00111011110010110010001111000000", 
    38 => "00111110001010001100101011000101", 
    39 => "00111101001011010011011000101111", 
    40 => "00111100111101011101100100110110", 
    41 => "10111011110000111010000000010011", 
    42 => "00111101100010001001100001001000", 
    43 => "10111101111011010100001111010000", 
    44 => "00111101010101000010010010010101", 
    45 => "10111101101010000111000101101110", 
    46 => "10111110000110110101111000001111", 
    47 => "10111110000010101100010101111110", 
    48 => "00111110001101100100000000100001", 
    49 => "00111100010011000101011010000101", 
    50 => "10111101000000010110100100111100", 
    51 => "00111101100001000001110001100111", 
    52 => "00111101100001010010111000100010", 
    53 => "10111101001111011001100000101100", 
    54 => "10111110000101010001100000101011", 
    55 => "00111100100001011110010110001000", 
    56 => "00111101110110101001010111001000", 
    57 => "10111101000110101010111111111111", 
    58 => "00111110000111011100001011110100", 
    59 => "00111011111110010100010100111011", 
    60 => "10111101011101011001010101000011", 
    61 => "00111101101100110101110001000000", 
    62 => "00111100011001011000001010100110", 
    63 => "10111101111010011110101100100000", 
    64 => "10111101100110010110111110001101", 
    65 => "00111100100111111010000111110001", 
    66 => "00111101110001101111100101000001", 
    67 => "10111101010101010100100110101001", 
    68 => "00111100110000111001101001010100", 
    69 => "00111101001001010010100101101010", 
    70 => "00111110000010101001000001000111", 
    71 => "10111101000001101110110001101000", 
    72 => "00111101100011010001101110001100", 
    73 => "00111100001000000010010011011001", 
    74 => "10111100101010001111101001100000", 
    75 => "00111110001000100010000101000010", 
    76 => "00111101110011100110110010001111", 
    77 => "00111110000001110100101010111010", 
    78 => "10111101011101000011011111000101", 
    79 => "10111101100110010110010101000111", 
    80 => "10111101101000110000011110100010", 
    81 => "00111110000010010001110010001111", 
    82 => "00111101000001100111110100001101", 
    83 => "10111110000011010011111111100010", 
    84 => "10111101100111101100001001010101", 
    85 => "00111101111001010101011101011000", 
    86 => "00111110000010000111111111001100", 
    87 => "10111100110111110000101111111111", 
    88 => "00111101110110010011111001100000", 
    89 => "00111101001000111001110011011000", 
    90 => "10111101100011101100011001111010", 
    91 => "00111101010000101100101101010111", 
    92 => "10111101011101111000110111110001", 
    93 => "00111101000111100001011111001000", 
    94 => "00111101110010011000110001110001", 
    95 => "10111101001000100111000011110100", 
    96 => "10111110001100101101010000001011", 
    97 => "10111101000011111001100101100110", 
    98 => "00111100010011010001011111100001", 
    99 => "10111101001110101110100111000110", 
    100 => "10111110000011000111001011100010", 
    101 => "10111100100010000100010111101010", 
    102 => "00111100100010110001011001001001", 
    103 => "10111101111111011010000111101100", 
    104 => "10111110000110100001110011101111", 
    105 => "00111110000110100001010111011011", 
    106 => "00111101101010111000111100110000", 
    107 => "00111011110000110110110010111100", 
    108 => "10111101000111101001111011110010", 
    109 => "10111101100010010101011000101101", 
    110 => "10111101111101110010000101001111", 
    111 => "00111101000110110100010111010111", 
    112 => "00111110000100101010110110000010", 
    113 => "00111101101110011101111101111101", 
    114 => "10111101001000111100011001011110", 
    115 => "10111101011001010111000111000100", 
    116 => "00111101001111101111010110101001", 
    117 => "00111101001010100111001111110111", 
    118 => "00111110000101000110101000011010", 
    119 => "10111100110100001010010110011111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_1 is
    component inference_conv2d_f3_1_0_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_1_rom_U :  component inference_conv2d_f3_1_0_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


