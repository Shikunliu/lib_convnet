-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_41_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_41_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011111100001010111110010110", 
    1 => "10111101101010111111011101011101", 
    2 => "10111101011101100011101101110110", 
    3 => "00111101111110000010000100101001", 
    4 => "00111101100011001000010010000000", 
    5 => "10111100101011110110001001011001", 
    6 => "10111101011100011101101000000010", 
    7 => "00111101011000011111001100111010", 
    8 => "10111110000011110000101101101011", 
    9 => "10111110011000011010001100101011", 
    10 => "10111100011101111110001000100100", 
    11 => "00111100111110010100111111100011", 
    12 => "10111100110011011000011001100110", 
    13 => "00111110000000110010001110111100", 
    14 => "00111101111010011000111101100000", 
    15 => "00111101100011100111011000101000", 
    16 => "00111100111101101000011000000100", 
    17 => "10111101101001111101000011010111", 
    18 => "10111101101001011010111010001000", 
    19 => "10111110001110101110001110100100", 
    20 => "10111101110111111000010001000101", 
    21 => "00111101010010001111110111110000", 
    22 => "10111110001000001010111011011010", 
    23 => "00111101101101100111011001010111", 
    24 => "00111110010101011110110100000111", 
    25 => "10111101111110110001000001110111", 
    26 => "10111110011101011100100010010111", 
    27 => "10111101110111110010110010110110", 
    28 => "10111101110010101100011111011010", 
    29 => "00111101010100100001100100111101", 
    30 => "00111110011011010001011010111001", 
    31 => "10111101010110010110011001101110", 
    32 => "00111011100001000001010001001100", 
    33 => "10111100110110100001100110000111", 
    34 => "00111110000100111011001011011101", 
    35 => "00111101110100000001101100000000", 
    36 => "10111101011010011111000001011111", 
    37 => "00111100010010101001100010101011", 
    38 => "10111110000001101110000001001100", 
    39 => "00111110000100101001000110111000", 
    40 => "00111101001100110111010011010111", 
    41 => "00111101001001101110100111111111", 
    42 => "10111101110001111110001010101011", 
    43 => "10111101000000110100010011000011", 
    44 => "10111101111001110110100001011010", 
    45 => "10111110000100111000110010010111", 
    46 => "00111101000110110000100011010000", 
    47 => "00111101010100101010011011100111", 
    48 => "00111101011110001001100000101101", 
    49 => "10111100101001001001001000011011", 
    50 => "10111110000001110010000010000110", 
    51 => "10111110000111000111110001010010", 
    52 => "10111100110100101101111010010100", 
    53 => "00111101111000111111111011100011", 
    54 => "10111101010001111111100111001010", 
    55 => "10111110000100101100001010111101", 
    56 => "00111101101101110011010010001101", 
    57 => "10111101000011111100101001000011", 
    58 => "00111110001101010011100110111001", 
    59 => "00111101000101110100100000011011", 
    60 => "10111101010111011001001111011111", 
    61 => "10111101000111101010101011100110", 
    62 => "00111101011011000011001111010000", 
    63 => "00111101101001000011110000000101", 
    64 => "10111101111111001111010111110101", 
    65 => "00111100110101111001010001110001", 
    66 => "10111101100000110001111000111010", 
    67 => "10111011000100010001000100001010", 
    68 => "00111110010100100110110111001110", 
    69 => "00111101100011011111110000011010", 
    70 => "10111110010011101000000010111111", 
    71 => "00111101101000000100000110010111", 
    72 => "00111110000000100010110101010001", 
    73 => "10111101010110001001011001100100", 
    74 => "10111101001010101101110100100011", 
    75 => "10111100110100000000010010010000", 
    76 => "00111110011010111010010110100000", 
    77 => "10111101001011011101001100001101", 
    78 => "00111101010111100000010011001110", 
    79 => "10111110000101011111101000100010", 
    80 => "10111101011010100110111011010100", 
    81 => "00111101110111001101100110100101", 
    82 => "10111101111001111110000001101001", 
    83 => "10111100010001011100101101010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_41 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_41 is
    component inference_mult_1_120_120_84_s_W4_41_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_41_rom_U :  component inference_mult_1_120_120_84_s_W4_41_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


