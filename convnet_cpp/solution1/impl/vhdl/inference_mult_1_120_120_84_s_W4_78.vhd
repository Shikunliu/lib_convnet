-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_78_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_78_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010110011000000011110101", 
    1 => "10111101000010010111010110010101", 
    2 => "10111101011111101010001111011111", 
    3 => "00111011010100101101001100100001", 
    4 => "00111110001111110001111110011011", 
    5 => "00111101111010100111001101110001", 
    6 => "10111101010001001000101010101001", 
    7 => "00111101001000000001100010001001", 
    8 => "00111101110010100110011100101100", 
    9 => "10111010001010000011011001011001", 
    10 => "00111100111100100100110100100100", 
    11 => "10111101100101111000110010101111", 
    12 => "00111101110011011100111111001100", 
    13 => "10111101011001010001010000000110", 
    14 => "00111101101000000011111111110111", 
    15 => "00111101101100000111111100111111", 
    16 => "00111110000110111000100110010100", 
    17 => "10111101100010010111010000101010", 
    18 => "00111101111011000011101110010010", 
    19 => "00111100011101000110100000011100", 
    20 => "10111101100011010010010010101100", 
    21 => "00111110000010110111100001000110", 
    22 => "10111110000110100110001111111010", 
    23 => "00111101101101110011000110111000", 
    24 => "10111101000011110100111010100010", 
    25 => "00111101101100001010110010001011", 
    26 => "10111101110100110001000110100101", 
    27 => "00111101100011110010011100110101", 
    28 => "10111101110010101010011101110011", 
    29 => "10111100110110010110000101100101", 
    30 => "00111110001000011110101111001000", 
    31 => "10111101101000011011010011001001", 
    32 => "00111101100001011010111000001111", 
    33 => "00111101110011101011001011010001", 
    34 => "00111101110111000101100100110010", 
    35 => "10111100001100001110010000111001", 
    36 => "10111101101000110101110011101111", 
    37 => "10111101100001000100001010100000", 
    38 => "10111110001101011010111101101100", 
    39 => "10111110001101001011111110010000", 
    40 => "10111101111000110100000110011110", 
    41 => "00111110001110101110000011000001", 
    42 => "00111101010001111010101000011000", 
    43 => "00111101100000000101000001010010", 
    44 => "00111101100101110110101100100001", 
    45 => "00111101000000101111110111000110", 
    46 => "00111110000010101001110011011100", 
    47 => "10111100101010000000101111101101", 
    48 => "10111101000111110010010100001111", 
    49 => "10111101000101100101000010100100", 
    50 => "00111101110101001101100101000000", 
    51 => "00111100110001011010111010010110", 
    52 => "00111100000101001101001111010111", 
    53 => "00111100111111000010111111000111", 
    54 => "10111100110001011111110001100100", 
    55 => "00111110000001111000011011000010", 
    56 => "10111101011011111011000001011100", 
    57 => "00111101011010111111100101001101", 
    58 => "10111110000101111010110000111111", 
    59 => "10111100101000000010001100100001", 
    60 => "10111001100111010000011011100001", 
    61 => "00111101110111110011100101001011", 
    62 => "10111110000000011010100110111001", 
    63 => "10111101010110011110010101001111", 
    64 => "10111110011000001010010101101010", 
    65 => "00111110000111000111110110100010", 
    66 => "00111101100111110001010011000001", 
    67 => "10111101101110000000100100011001", 
    68 => "00111101111111011101010101001110", 
    69 => "00111100100011101111101000111001", 
    70 => "10111101101110011010001011101111", 
    71 => "00111011001110000110010100001100", 
    72 => "10111100110101100010000100111111", 
    73 => "10111101100010010111010101010010", 
    74 => "00111101000011100110111100010100", 
    75 => "10111101010101001100100010101111", 
    76 => "00111101101110100100111111011000", 
    77 => "10111101100111100110110000010111", 
    78 => "00111101100001000100101001010101", 
    79 => "00111101001010110100101100000111", 
    80 => "10111101110001101011010111111101", 
    81 => "00111110000101011011011011000011", 
    82 => "10111110010000100010011110001101", 
    83 => "10111101111011000010011100100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_78 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_78 is
    component inference_mult_1_120_120_84_s_W4_78_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_78_rom_U :  component inference_mult_1_120_120_84_s_W4_78_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


