-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_1_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_1_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011100000101111010101101000", 
    1 => "00111100011111110010111100100000", 
    2 => "00111101101111111101000111000010", 
    3 => "10111101000001000110101011100100", 
    4 => "10111101010111000000111000011110", 
    5 => "00111101000110111110111111101011", 
    6 => "00111100111111011001010111111000", 
    7 => "10111101111101101010101111011110", 
    8 => "00111101101100010001010111010010", 
    9 => "10111100111100011111000101111111", 
    10 => "10111101010110010010110011011101", 
    11 => "10111100100010100100010001011100", 
    12 => "10111101111001101110110000011000", 
    13 => "10111001110001001101111111010101", 
    14 => "00111101011011110111011000101010", 
    15 => "10111001010110100111010110010011", 
    16 => "00111101000011100011101011000001", 
    17 => "00111101000100110010010110010010", 
    18 => "10111101000111001011010100101000", 
    19 => "00111110000000010010101011011000", 
    20 => "00111101101001000011010010100000", 
    21 => "00111100110010110110110100011100", 
    22 => "00111101010110101110110101010111", 
    23 => "00111101001010111100101000111001", 
    24 => "00111100111010100011010111001001", 
    25 => "10111100011011100011100100101110", 
    26 => "00111101101000010000110011000000", 
    27 => "00111100001100001110101111000110", 
    28 => "10111110000010000000000101110001", 
    29 => "00111110000000101010000110110110", 
    30 => "10111101111011101101001101010010", 
    31 => "00111101011001110101110100100001", 
    32 => "10111110000010111101011101101111", 
    33 => "00111011100111101001010110000010", 
    34 => "00111101110011111111110100011110", 
    35 => "00111011110011100001101111010111", 
    36 => "10111101000110111000110001001110", 
    37 => "00111101001011100110011110111101", 
    38 => "10111100111111000000011001110110", 
    39 => "10111100000110000011101111100001", 
    40 => "10111011011110100100110000110111", 
    41 => "00111100011101011111101001011000", 
    42 => "00111101101000111010110101011100", 
    43 => "00111101000011111001000100011101", 
    44 => "00111100101011000011100110101111", 
    45 => "10111110000001101110001001100101", 
    46 => "10111011000110101111110001000101", 
    47 => "10111011101101110011010110110111", 
    48 => "00111011111011100000001100111110", 
    49 => "00111011001111010111101111001100", 
    50 => "00111100101000100111101110001011", 
    51 => "10111100011010011011010001100100", 
    52 => "00111101010010000100000101001101", 
    53 => "10111110001110100101010000111111", 
    54 => "10111011101010011110100100110011", 
    55 => "00111101110101010010110110101010", 
    56 => "00111011110110110111111100010111", 
    57 => "00111110001100110110000001001010", 
    58 => "00111101001001100011100101010000", 
    59 => "00111100011011110101101111011000", 
    60 => "10111110001101000011110011000000", 
    61 => "10111100110111000010101111100101", 
    62 => "00111100100110101110001101111011", 
    63 => "00111101110001001001000000000010", 
    64 => "10111101101111111100010001001001", 
    65 => "00111101001011000011011100010000", 
    66 => "00111100100101100001111100100110", 
    67 => "10111101001101011000100011001001", 
    68 => "00111110000100011010011111100011", 
    69 => "10111101100100001010101000101111", 
    70 => "00111110001000111111110101010000", 
    71 => "00111101011000100110100010010000", 
    72 => "00111101111010101011010110000000", 
    73 => "10111101101010110101011001000000", 
    74 => "10111101110010111001100101101001", 
    75 => "00111011110111010100110110100011", 
    76 => "00111100110111010110010001011111", 
    77 => "00111101110010100000000111111100", 
    78 => "00111110001100000101101001110001", 
    79 => "10111101011010010100000100001100", 
    80 => "10111101000111000111100001110001", 
    81 => "00111110001000011110011111011010", 
    82 => "10111101011000101011011001011110", 
    83 => "00111101111011001000101000110111", 
    84 => "10111101110010111101000101011010", 
    85 => "00111101101111110110100000101011", 
    86 => "00111110010100101100110001110001", 
    87 => "00111010000001010101110100011001", 
    88 => "00111110000110000000011101111001", 
    89 => "00111100001001000111101010011110", 
    90 => "00111101011111010100000100001001", 
    91 => "00111101010000111110000101010001", 
    92 => "10111101000111101011101101011100", 
    93 => "00111110000100110000010100010000", 
    94 => "10111110000000110101110001011011", 
    95 => "00111101011110001010001010001110", 
    96 => "10111110001100110110010000111001", 
    97 => "10111101111110100011010011001010", 
    98 => "10111101000010011000101100010100", 
    99 => "10111101100010010101111001000000", 
    100 => "10111101010001101000000111011111", 
    101 => "00111100000011100000101110100111", 
    102 => "00111101111010011101011100110100", 
    103 => "10111101101001110011001011000100", 
    104 => "00111001011101001111111111110010", 
    105 => "10111110000011111001000001010100", 
    106 => "00111101010101110101011010101110", 
    107 => "10111101000110111001000111110111", 
    108 => "00111101001100110001000110100101", 
    109 => "00111110010100010110000010010101", 
    110 => "00111100110010111011000011011000", 
    111 => "00111110000010101000010110001000", 
    112 => "00111100100011001010001000111010", 
    113 => "10111100111111101010110001000011", 
    114 => "10111010000101001000111010000111", 
    115 => "00111101110101100111010001001011", 
    116 => "10111101111000110101100010110000", 
    117 => "10111100101000101011110100101111", 
    118 => "10111101101011010111011101110101", 
    119 => "10111101100011001001111011111010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_1_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_1_13 is
    component inference_conv2d_f3_2_1_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_1_13_rom_U :  component inference_conv2d_f3_2_1_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


