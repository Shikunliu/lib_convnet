-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101011000010111010011111", 
    1 => "10111100101110110000110001111011", 
    2 => "00111100111111111111001010010100", 
    3 => "00111101011101110110010011110001", 
    4 => "00111100100010110011100010101110", 
    5 => "00111110000010110100100000001010", 
    6 => "00111100101000110100101100101001", 
    7 => "10111110000101001001001101000010", 
    8 => "10111100011000001011100100010011", 
    9 => "10111110000100101000000110111010", 
    10 => "10111110001001001110110001100011", 
    11 => "10111011110000110000010111111010", 
    12 => "10111101111101001100110010101011", 
    13 => "10111110001110010111110000111101", 
    14 => "10111101000010000011111110000100", 
    15 => "10111101111100001000111101100101", 
    16 => "10111101101000110000011011001011", 
    17 => "10111100000000100101101000011000", 
    18 => "00111110001011111110111100111001", 
    19 => "10111101000000010110010011010101", 
    20 => "00111101101111101100001100111010", 
    21 => "00111101100100000000110111110010", 
    22 => "00111110000010111101000011100001", 
    23 => "10111110010100000110011101001001", 
    24 => "10111101111111011100110101110000", 
    25 => "00111101111001110100011101010010", 
    26 => "10111011011110000000100011100110", 
    27 => "00111001010000111000101111111110", 
    28 => "00111110010011110000110011111110", 
    29 => "00111100110111000111111101011101", 
    30 => "00111101000110100010111100100000", 
    31 => "00111101100000010001011010000000", 
    32 => "00111011110001000010101101010011", 
    33 => "00111101110001000010101111010001", 
    34 => "10111100110001000010100100100101", 
    35 => "10111101110000011100000110000110", 
    36 => "00111101011011010111111011110100", 
    37 => "10111101010000010101110100101101", 
    38 => "10111100100001110011011110010111", 
    39 => "10111101000101011100010110011010", 
    40 => "00111100110110110001101101000100", 
    41 => "00111101100011010101010110100100", 
    42 => "10111110001011000110001100101000", 
    43 => "00111101101001100001100101111101", 
    44 => "10111100110011000011101101000010", 
    45 => "00111101110111010000011101000010", 
    46 => "10111100100001010010110010010000", 
    47 => "00111101101000000010010010100110", 
    48 => "10111101011111100111111011000001", 
    49 => "10111101111110001101011110011101", 
    50 => "10111101110010101100010100101110", 
    51 => "10111110001000111001001001011100", 
    52 => "00111101011110101101011101101100", 
    53 => "00111101001010000010010011000111", 
    54 => "00111101101110000011001100100101", 
    55 => "10111100101010000100000111010011", 
    56 => "00111110000111111001101101010110", 
    57 => "00111101100010101011110111001001", 
    58 => "00111110000011110011000011101000", 
    59 => "00111100101001010001101101111000", 
    60 => "10111101100101111101001110011110", 
    61 => "10111101001001011001000001100011", 
    62 => "10111101100000000111100111001011", 
    63 => "00111100111110011011011010100101", 
    64 => "10111100110100111101100110011100", 
    65 => "10111100010000100000011010100000", 
    66 => "10111101110110000011100000111011", 
    67 => "00111101010001100110111111010110", 
    68 => "00111100100011000100000000010101", 
    69 => "10111101011000100010000010111100", 
    70 => "00111100010101111101010100111111", 
    71 => "00111110001001010010010001111101", 
    72 => "00111110010101101010001100111000", 
    73 => "10111101011111000001011001001100", 
    74 => "00111101100001000110000110001111", 
    75 => "00111101110000110011011101001010", 
    76 => "00111101111001101101101111010111", 
    77 => "00111100100001000101011001110001", 
    78 => "00111101110010110101010001110111", 
    79 => "10111101010111110011011100011000", 
    80 => "00111101110001111011101010000001", 
    81 => "10111101010000000100010001000011", 
    82 => "10111101010000110001000101111101", 
    83 => "10111100111100010111000010000110", 
    84 => "00111101001011101111010101001011", 
    85 => "10111110000101101111101100001001", 
    86 => "10111101001110000001100111010010", 
    87 => "10111011000000001110101000100000", 
    88 => "10111110000001111001000100111111", 
    89 => "00111011110100011010111111110110", 
    90 => "10111101100000011001000011010001", 
    91 => "00111010101110110000000101110011", 
    92 => "10111101100101011100100100011101", 
    93 => "00111101110101111110010101100100", 
    94 => "00111110001110010011111110101111", 
    95 => "00111101100111011110000001010000", 
    96 => "10111110001011100001100010101101", 
    97 => "10111110001000000010111010101001", 
    98 => "10111110000101110001001010100001", 
    99 => "10111101110110000001100101001100", 
    100 => "00111101100111010011100101101111", 
    101 => "00111101100000111101100100001000", 
    102 => "00111100100101101110110101001101", 
    103 => "10111101011010101101000011011111", 
    104 => "10111100111100001111011110111010", 
    105 => "10111101110100101000000001101011", 
    106 => "10111101010010110010000011000101", 
    107 => "10111101010010100100100101001010", 
    108 => "10111100110001000110111011000101", 
    109 => "00111110000000000101101100111010", 
    110 => "00111100111100101010010111011010", 
    111 => "00111100111110000000110010110111", 
    112 => "10111101100001100110101101010100", 
    113 => "10111100100010010001000001001010", 
    114 => "10111101100111110010001101101111", 
    115 => "10111101100010101010001110111011", 
    116 => "10111011000011001111001101000011", 
    117 => "00111101101101110010011111000010", 
    118 => "00111100111001010010000101010111", 
    119 => "10111110001100000100100111101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_12 is
    component inference_conv2d_f3_2_0_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_12_rom_U :  component inference_conv2d_f3_2_0_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


