-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_20_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_20_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101101001111010110000011", 
    1 => "10111011000100011110001101101101", 
    2 => "10111101110011010011100111011010", 
    3 => "10111101001010100010000100100001", 
    4 => "10111101101000011000111001101000", 
    5 => "10111100001110010110110111100000", 
    6 => "10111101101010000001000110001010", 
    7 => "10111110010000010000001010111100", 
    8 => "00111101010110101100010001010111", 
    9 => "10111100110010101010110111011001", 
    10 => "10111110000010111000001111001111", 
    11 => "10111101100110010000000100111110", 
    12 => "10111110000001001110000100011110", 
    13 => "00111101111110110111100111011001", 
    14 => "10111101110010101010011110110111", 
    15 => "10111110000101011100011000111011", 
    16 => "10111100111111101111100001100011", 
    17 => "10111101101000010101100100110001", 
    18 => "00111110001001100101101100100001", 
    19 => "10111101000100010111100000010010", 
    20 => "10111100110011010010000001000100", 
    21 => "10111101101111100000110110011101", 
    22 => "00111101100100001010001101010001", 
    23 => "10111011110110010000011101000011", 
    24 => "00111100110010000010100100101111", 
    25 => "10111100011101000100000100011010", 
    26 => "00111110000001010001110000011001", 
    27 => "10111110010100000010011000000011", 
    28 => "10111100110001101011010100100110", 
    29 => "10111101000110010101101001000100", 
    30 => "10111101010001110011101000011100", 
    31 => "00111110000110011101101101100110", 
    32 => "00111101010100111010101111100100", 
    33 => "10111101100101001111010001011100", 
    34 => "10111100100101110111110001010011", 
    35 => "00111101100001110100110010111000", 
    36 => "00111110001001011100000010111010", 
    37 => "10111101110110010110100011010111", 
    38 => "00111101111010000010101101100011", 
    39 => "00111110001101101001101110011101", 
    40 => "00111110000011011101101110011000", 
    41 => "10111110001011111101011000001111", 
    42 => "10111101100000010111111011111110", 
    43 => "10111101111101110000100110110111", 
    44 => "10111110001101010101110110100010", 
    45 => "10111010101101001011101000110001", 
    46 => "10111101001110011001001011111110", 
    47 => "00111101000001000011001110000110", 
    48 => "10111100011100011010101001100111", 
    49 => "00111100010101011110001010001011", 
    50 => "10111101101010011101100100100101", 
    51 => "00111101010110100111001000000111", 
    52 => "00111100010010110101100100101111", 
    53 => "00111110000011010000011000110110", 
    54 => "00111101100011110000000100001010", 
    55 => "00111101000100111011010100000100", 
    56 => "00111101010000101011111011110111", 
    57 => "00111110001000101001101110101110", 
    58 => "00111101101111011011010100000010", 
    59 => "00111011110111000101101111001100", 
    60 => "00111101101010001000111000101001", 
    61 => "10111110010010010101010101110001", 
    62 => "00111100110100011110101010101110", 
    63 => "10111110000101010001111110000010", 
    64 => "00111101111000111111111111101111", 
    65 => "00111101101001101010111000011111", 
    66 => "10111110000011001011111000011111", 
    67 => "10111101111011000001011011011111", 
    68 => "10111110001101100111011011101010", 
    69 => "10111110000000101101110011110100", 
    70 => "00111101100000100000010011001010", 
    71 => "00111100010101101101010111010000", 
    72 => "10111101101100001111100100001001", 
    73 => "10111101100100100100001100000110", 
    74 => "10111100001011011101101101110000", 
    75 => "00111110010010110111000011101111", 
    76 => "00111101110111111000110110110101", 
    77 => "00111101110000010000101010011010", 
    78 => "00111110001001111010010011101000", 
    79 => "00111101001011001011011001110111", 
    80 => "00111101000001110101110100111100", 
    81 => "10111101110110011100101101101000", 
    82 => "10111101011011110000100100000010", 
    83 => "10111101111101010001001111111001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_20 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_20 is
    component inference_mult_1_120_120_84_s_W4_20_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_20_rom_U :  component inference_mult_1_120_120_84_s_W4_20_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


