-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010101110100011000000010", 
    1 => "00111101110001100100101100100011", 
    2 => "10111101001111000111001110011110", 
    3 => "00111101101100110000110001001100", 
    4 => "10111101100110111100011111001111", 
    5 => "10111100111110000101110000110010", 
    6 => "10111110001100000001010100111100", 
    7 => "00111101011001111100100111000011", 
    8 => "00111101100011000000111100011101", 
    9 => "10111100110110001101011010010001", 
    10 => "00111100101010000110110101110010", 
    11 => "10111101010010101001000100111001", 
    12 => "00111101101110000000000011101011", 
    13 => "10111110000110101101011010001000", 
    14 => "10111101100010001110110010010110", 
    15 => "10111101101001101011000111011000", 
    16 => "00111101010010000001111010011000", 
    17 => "00111100101000101000011000111101", 
    18 => "00111101100100111011100010101111", 
    19 => "10111011111010100110101100011000", 
    20 => "00111101011111101111110001000101", 
    21 => "10111101110111000100110010011101", 
    22 => "10111100100001111001011011001101", 
    23 => "00111010011100011001110010010000", 
    24 => "00111110000010010011010101110110", 
    25 => "10111101010010010000011000011110", 
    26 => "10111101111110101011101001111100", 
    27 => "10111101011000011111101011100010", 
    28 => "10111101100000110000111100111100", 
    29 => "00111101000010000011011100111100", 
    30 => "10111101110111000000100110000001", 
    31 => "10111110000010110010010000100000", 
    32 => "00111100010100111111011011111000", 
    33 => "00111101111100001011100111011100", 
    34 => "10111100101011101101001110001000", 
    35 => "10111110000001111100000010110001", 
    36 => "00111101001000011100111000110110", 
    37 => "10111101001010110001111011000111", 
    38 => "10111101011111010011100001010101", 
    39 => "00111101011110011011010011111000", 
    40 => "00111110001010000001111001000111", 
    41 => "00111101100101110111110011011001", 
    42 => "00111100110010111001100111000111", 
    43 => "00111110001000011010010100000001", 
    44 => "00111101001011011111010100100001", 
    45 => "10111101100011101100100010111011", 
    46 => "10111101101011000011101011001001", 
    47 => "10111110000110111000110011111100", 
    48 => "00111101100011001011010100011010", 
    49 => "00111100000011110101100111010000", 
    50 => "00111101101100011110101110101101", 
    51 => "10111100100111000000101011111001", 
    52 => "10111101100111111001011110000010", 
    53 => "00111100011001101110101101011100", 
    54 => "00111110000011110010000100101101", 
    55 => "10111101010110010110101100100110", 
    56 => "10111101101110000011011111001111", 
    57 => "00111100101101010110100010011000", 
    58 => "10111110001101111010010101101110", 
    59 => "00111100111011100001101111010010", 
    60 => "00111101010101101001101011111100", 
    61 => "00111101010001011101011001101110", 
    62 => "00111101111000011110101000110110", 
    63 => "10111101001100110110001111011011", 
    64 => "10111101100010011111101100010001", 
    65 => "00111110001010101010011111011111", 
    66 => "00111100110101011110101111000101", 
    67 => "00111101000010001101010010100000", 
    68 => "00111101110010100111010011101001", 
    69 => "00111011010101011000110100111011", 
    70 => "00111101101011011010111011111010", 
    71 => "00111100001000001001100000110001", 
    72 => "00111100001000011111111000000010", 
    73 => "00111101101010111101110110010001", 
    74 => "00111101010000010100101001101000", 
    75 => "10111110000010100000111101001101", 
    76 => "00111011100010100011100000101000", 
    77 => "10111101110001001101010010001001", 
    78 => "00111110000101001111001100110100", 
    79 => "10111101100011100011100111101010", 
    80 => "10111110000000010101100000110010", 
    81 => "10111101110001101000111100100011", 
    82 => "10111101000001111111100000011100", 
    83 => "10111101100000000101000010001000", 
    84 => "10111101001101100010011001100010", 
    85 => "10111101001010001110100110011001", 
    86 => "00111101010010111100111010111011", 
    87 => "10111101110111001111010011101000", 
    88 => "10111011000010000111001101010111", 
    89 => "10111101011100011111111111011101", 
    90 => "10111110001001001011111010000011", 
    91 => "10111110000100010001000100100111", 
    92 => "00111101101100101100010100110100", 
    93 => "00111101100001100101001001011111", 
    94 => "00111101110110000110111000111011", 
    95 => "00111110001100011001110010011101", 
    96 => "00111100011010011110101111000010", 
    97 => "10111100101000101011101000111111", 
    98 => "10111101000011101011001011010001", 
    99 => "10111100101000111011011010001001", 
    100 => "00111101100000100010110101111010", 
    101 => "00111101010100101000110110100001", 
    102 => "10111110000100111000110001010100", 
    103 => "10111110001101101000011010100101", 
    104 => "10111100101000001111010101000011", 
    105 => "00111101101110010111111001100100", 
    106 => "10111110000010111110011010100011", 
    107 => "10111101111111010111101110100110", 
    108 => "10111100000001100100110001100000", 
    109 => "00111100110001000100010110101010", 
    110 => "00111110001011100011001001011101", 
    111 => "00111110010100010011010000000101", 
    112 => "00111101010100010010011101110000", 
    113 => "10111101000011001101001110011110", 
    114 => "10111100111011110010000001111111", 
    115 => "10111101011001110100100001011110", 
    116 => "00111100110100011111111100111100", 
    117 => "00111100100001011100101110111100", 
    118 => "00111110001001000110011101111011", 
    119 => "10111011111111001111011000110101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_8 is
    component inference_conv2d_f3_2_2_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_8_rom_U :  component inference_conv2d_f3_2_2_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


