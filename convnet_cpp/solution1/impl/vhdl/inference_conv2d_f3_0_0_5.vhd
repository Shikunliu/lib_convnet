-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001111101111110101000100", 
    1 => "00111100100100000010110011010100", 
    2 => "10111101111001101100000100011010", 
    3 => "00111101001000010010100010111111", 
    4 => "00111110000111011010101100011001", 
    5 => "00111100110100011101000001110111", 
    6 => "10111011110001011101010001001011", 
    7 => "00111101110000110001110111001111", 
    8 => "00111101011011101101100000100101", 
    9 => "00111100111101111010100100011001", 
    10 => "00111101110100111001011101010111", 
    11 => "00111101111001000011111011011001", 
    12 => "00111101000100000101010001000001", 
    13 => "00111101101101010111111111101100", 
    14 => "10111101101011001011001000010000", 
    15 => "00111101011100011100000000110111", 
    16 => "00111101101100001100101100110111", 
    17 => "10111110010000111111100110100101", 
    18 => "00111110001010111111011100100111", 
    19 => "00111101111001000000000110000010", 
    20 => "10111100110010001111100100111000", 
    21 => "00111101100101000001000111111000", 
    22 => "00111010110011111011001001011010", 
    23 => "00111110000010111001001100000011", 
    24 => "10111100111110000010110100000011", 
    25 => "00111110001001011000110101011000", 
    26 => "10111101101011111000111100011111", 
    27 => "10111101111101010101000001000100", 
    28 => "10111101100111110101010001001100", 
    29 => "00111100111010100111111101100101", 
    30 => "10111101111011111101101100001010", 
    31 => "00111100011011110000001111000100", 
    32 => "00111110000010110111100111011001", 
    33 => "10111101011010111011111111110010", 
    34 => "10111011100000100010001111011100", 
    35 => "00111101011101101111101101011010", 
    36 => "00111011111111110110101000000011", 
    37 => "00111101101110010001110010110111", 
    38 => "10111110000010010011001101011101", 
    39 => "10111101101010000101011010110001", 
    40 => "10111101100111001001100000000001", 
    41 => "00111101100001011000011111111111", 
    42 => "10111101010111000000010001011101", 
    43 => "00111110000011111100011110100100", 
    44 => "00111101011101010110111000001011", 
    45 => "00111011101010101000101101011001", 
    46 => "10111110010101011100111010011110", 
    47 => "00111110000111001001011111011001", 
    48 => "10111100111110110100010010101111", 
    49 => "10111100110011110011100001001100", 
    50 => "00111101110001101010010001011111", 
    51 => "00111100010000111000010001001111", 
    52 => "10111101000110101010110101000101", 
    53 => "00111101100100110000101010111010", 
    54 => "00111011111000010000101100011101", 
    55 => "10111101010011010000100011100010", 
    56 => "00111110000101101111101011000110", 
    57 => "10111101001111111001010010000101", 
    58 => "00111101101000001011101100101100", 
    59 => "00111101101101110110100001001100", 
    60 => "00111101000100000101100000111101", 
    61 => "10111101100000101111001010001110", 
    62 => "10111101001110101001110001001001", 
    63 => "00111100101100001000101001000001", 
    64 => "00111101010000101011000101110000", 
    65 => "10111110000110110111100101010011", 
    66 => "00111110011010101011000110010010", 
    67 => "00111101110001111001010010110100", 
    68 => "00111101111110000101111010000001", 
    69 => "10111101100010110111101000001111", 
    70 => "10111110000011101110000001101110", 
    71 => "00111101111101011001100110101010", 
    72 => "00111101001111001000101001011111", 
    73 => "00111101100011001011110101110000", 
    74 => "10111101001000000100001000101010", 
    75 => "10111110010101110100001111101001", 
    76 => "10111101011110000100111011000110", 
    77 => "00111101100010110101100100111101", 
    78 => "10111110000110001000011011100000", 
    79 => "00111100001111100001000011011101", 
    80 => "00111100011111010011000100011001", 
    81 => "00111101100110111011011110000001", 
    82 => "00111011100100100101111010010010", 
    83 => "00111110000010001001011011011101", 
    84 => "00111101101001111101011101110010", 
    85 => "10111101111000010101100011111011", 
    86 => "00111110000111111101100011110001", 
    87 => "00111101001000111111001000011000", 
    88 => "10111101001001001110100100100011", 
    89 => "10111100101100000111111100100100", 
    90 => "00111101100101111111010111110110", 
    91 => "00111101111001101000000000010111", 
    92 => "00111101000000111111110001011111", 
    93 => "00111101100011110010011100110101", 
    94 => "10111101010101010110101010110000", 
    95 => "10111100100110100000001111101101", 
    96 => "10111101011011101011111000100100", 
    97 => "10111101100101110100101110000100", 
    98 => "00111101100110011111000010101111", 
    99 => "10111101011110010011100111011101", 
    100 => "00111101110011010000011110000101", 
    101 => "10111110001111000111101100000011", 
    102 => "10111101100101101010000111000000", 
    103 => "00111101101010111010111101111100", 
    104 => "00111110000001001010010011010011", 
    105 => "10111100101101101010001100101010", 
    106 => "00111101000110110111000101000000", 
    107 => "10111011111010110110001111111100", 
    108 => "00111101011010010010010010100010", 
    109 => "10111101000000010001001101011011", 
    110 => "00111011100111011110010101101110", 
    111 => "10111101010011001000000101001101", 
    112 => "00111101011110111010101000010101", 
    113 => "10111100101110110100011111010101", 
    114 => "10111100101011101000001011001010", 
    115 => "10111110010001000000010010100111", 
    116 => "00111101101001011111111110111111", 
    117 => "00111011100001000110001011010001", 
    118 => "00111101000111011011100101101001", 
    119 => "10111110000101000100100000000110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_5 is
    component inference_conv2d_f3_0_0_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_5_rom_U :  component inference_conv2d_f3_0_0_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


