-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100001000010011100100000", 
    1 => "10111101100001111000101011011001", 
    2 => "10111110000100101011011110111011", 
    3 => "00111101101100100100110001101001", 
    4 => "10111100101111010011001011111100", 
    5 => "00111110000110010101010110110100", 
    6 => "00111100111101101101101010111101", 
    7 => "00111110010001001101101011010011", 
    8 => "00111100101010010011101111001110", 
    9 => "00111101010001011001001101010010", 
    10 => "00111110001000001101011001101111", 
    11 => "10111101101111101011101001011101", 
    12 => "10111110011101010011011111100011", 
    13 => "00111100100010111111001001000111", 
    14 => "00111101001100001001000111101001", 
    15 => "00111101110001000100000001010001", 
    16 => "10111101110001111001111011010011", 
    17 => "10111101000101000001011111100101", 
    18 => "10111101100110000110100100110011", 
    19 => "00111101101101001100011010111111", 
    20 => "00111100111000100011010001110011", 
    21 => "10111101100011111001010101011100", 
    22 => "00111110011000011111011001000101", 
    23 => "10111101011111001000000000110100", 
    24 => "00111100110000001000001101111110", 
    25 => "10111101111001110011000101001101", 
    26 => "00111011000101011110111101000000", 
    27 => "00111101110111111000110100101110", 
    28 => "00111011110111100101111101000110", 
    29 => "10111100111110100001111000111111", 
    30 => "00111101101111011101000001000101", 
    31 => "00111101101010010110110010101011", 
    32 => "00111110001110001111000010000100", 
    33 => "10111101011110001001010100000111", 
    34 => "10111101010111000000101101001001", 
    35 => "10111101101011101000011001001110", 
    36 => "10111100101010101001101101111111", 
    37 => "00111101111100101100010110100000", 
    38 => "10111101000111111101110011111010", 
    39 => "10111110000000010100110001100110", 
    40 => "00111110001001100010100001000110", 
    41 => "00111101010011011100110110011001", 
    42 => "10111110000111010110011110111010", 
    43 => "10111101101001010100101000010100", 
    44 => "00111101111010100000001111000101", 
    45 => "00111100110111110000110101000001", 
    46 => "10111100110000111001111110010010", 
    47 => "00111110000000100100011111001011", 
    48 => "10111110010011111101011111100100", 
    49 => "10111101101000111101101001110011", 
    50 => "10111011111100100001101000001110", 
    51 => "10111110000000010001011000100011", 
    52 => "00111110000010000011110001101101", 
    53 => "00111101110100011101111011110000", 
    54 => "10111101111001011001011101001110", 
    55 => "10111101001011001100010100100101", 
    56 => "00111101101001011110001101100001", 
    57 => "00111100110000001010100110101001", 
    58 => "10111101001111000101111101111100", 
    59 => "10111100000010101101000100101010", 
    60 => "00111101000101100110110111100110", 
    61 => "00111110011010010001111100101110", 
    62 => "10111100011001000011101111101010", 
    63 => "00111101001100000010010010001011", 
    64 => "10111110001101001101111111001110", 
    65 => "00111101000101010111100010111110", 
    66 => "00111101011001100010110111100010", 
    67 => "10111100100111110010011101111000", 
    68 => "00111110000100110010000001010011", 
    69 => "00111011011100011111000010011110", 
    70 => "00111101100101110110100110101001", 
    71 => "00111100110110100001010011101010", 
    72 => "00111101111010010110001001001010", 
    73 => "00111011000111000110010000100100", 
    74 => "00111110010011100010110100011111", 
    75 => "00111100111011011110101101100000", 
    76 => "00111101101011100011011110000001", 
    77 => "10111110001000001001000011110111", 
    78 => "10111101000010111001100001001111", 
    79 => "00111100110010100111010101101111", 
    80 => "00111101110011101001011110001101", 
    81 => "00111100100101011100001001110101", 
    82 => "10111101100110011010101000101011", 
    83 => "10111100011101000010001101010011", 
    84 => "00111101100111000010000011100011", 
    85 => "00111101011110101010010011000111", 
    86 => "10111101000010111110110010000010", 
    87 => "00111110001001011000011101010001", 
    88 => "00111100100010011100001111001110", 
    89 => "00111110001001001000101101100101", 
    90 => "00111110000010010011111011100110", 
    91 => "10111100101000101011110001011000", 
    92 => "00111110000001010011110000010101", 
    93 => "00111101100100100011001010101010", 
    94 => "10111101101110011100101001000001", 
    95 => "00111110001011001010000011000011", 
    96 => "00111101010000000010101011001000", 
    97 => "10111100111110100100111001000101", 
    98 => "00111101101000001011000000101001", 
    99 => "10111110010110110111100010001001", 
    100 => "10111101101100011011110111101000", 
    101 => "10111110100001000100101101001101", 
    102 => "10111110001101001011000010011111", 
    103 => "00111110010000001111011111111101", 
    104 => "10111101101011000111111100001100", 
    105 => "00111101111101000110100000000001", 
    106 => "00111101111101010011011000001101", 
    107 => "00111101110010110110000100100111", 
    108 => "10111110000000010110010010000100", 
    109 => "10111101110101100111111111010100", 
    110 => "00111101010000010001011100100010", 
    111 => "10111100100010010110001111000001", 
    112 => "00111101010011010110010101000011", 
    113 => "00111100110101010111101100100111", 
    114 => "10111101110011101011100100011011", 
    115 => "10111110000100011100110000010000", 
    116 => "00111101011110001111101100101001", 
    117 => "00111100101100110110111100101110", 
    118 => "10111101100110111000000001001100", 
    119 => "10111101110111001011111001100010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_4 is
    component inference_conv2d_f3_0_1_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_4_rom_U :  component inference_conv2d_f3_0_1_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


