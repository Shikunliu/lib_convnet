-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011011000101010011110011", 
    1 => "10111100001110010111111100010010", 
    2 => "10111101100000100000001100001111", 
    3 => "00111110000010100011100110000010", 
    4 => "00111101011000110001000101111101", 
    5 => "00111101110111101011101001101011", 
    6 => "10111011110111000100001110100011", 
    7 => "00111110010001101101110110101101", 
    8 => "00111110001000011101000101001110", 
    9 => "00111101100001111001101111110001", 
    10 => "00111101110000101101101101101111", 
    11 => "10111100111011100001001110100100", 
    12 => "10111101000011110100101000000101", 
    13 => "10111101101100000111010111110111", 
    14 => "10111101001011100100100001111101", 
    15 => "10111101100111000000010111001000", 
    16 => "10111100001001110110000111011001", 
    17 => "10111110011001110000011010010010", 
    18 => "00111101100011111111010000110100", 
    19 => "00111101110101111111000111111010", 
    20 => "10111101011101101101010101001001", 
    21 => "10111101001000010110000100101001", 
    22 => "10111011100111111001011100011111", 
    23 => "00111100100010001100000001100011", 
    24 => "00111101001011110111010110100100", 
    25 => "10111101101111111001100010011100", 
    26 => "00111100100000101011011110100000", 
    27 => "00111100001110111000010000111011", 
    28 => "00111101100100001011011101011000", 
    29 => "00111101010101110010110000000001", 
    30 => "10111100010000010110111001011111", 
    31 => "00111101000101001100100000101001", 
    32 => "10111101100010010001010101111011", 
    33 => "10111101101010100100011010010000", 
    34 => "00111011110110010110111011011100", 
    35 => "00111101011000100011101111001010", 
    36 => "00111110000001010111011101010011", 
    37 => "00111101101010101110100011111101", 
    38 => "10111101101000010110111011011000", 
    39 => "10111110001110000111001110111101", 
    40 => "00111100101101000111110000111110", 
    41 => "10111100001001100000111010001000", 
    42 => "00111101101011110001100001111001", 
    43 => "10111101100000001001001111110100", 
    44 => "00111101100000101110000100110100", 
    45 => "00111100010001010101101000010010", 
    46 => "00111101111011101110011100111110", 
    47 => "10111101011111001011001111100101", 
    48 => "10111110001111000001011010011100", 
    49 => "10111011100011001001011011100111", 
    50 => "00111110000011001100000111001010", 
    51 => "10111101110001101110110011010100", 
    52 => "10111101100110111100001111101110", 
    53 => "10111101100101001111010110010000", 
    54 => "00111110000011100000001010100111", 
    55 => "10111101101001000110110011010100", 
    56 => "10111110001110001000101101010100", 
    57 => "10111101101000110101101001111000", 
    58 => "00111101100110011011100010010110", 
    59 => "10111101000111010100010100000101", 
    60 => "10111101001010101100000100111111", 
    61 => "10111101100110010101011010011001", 
    62 => "00111101000110110101110111110101", 
    63 => "10111110000110110111010010011011", 
    64 => "00111011100110101100100111000101", 
    65 => "10111101010101100000101010110100", 
    66 => "00111101111100111101011111010100", 
    67 => "10111101101011001011011111010100", 
    68 => "10111100011111110110110011001000", 
    69 => "00111100101111100100110101000011", 
    70 => "00111100110010011001100111011101", 
    71 => "00111011101100011000101011100111", 
    72 => "00111110100001101110111011111010", 
    73 => "00111101011100010110000101010001", 
    74 => "00111101110110000111011000011001", 
    75 => "00111101110111001101111111110000", 
    76 => "10111101110111100101100111110011", 
    77 => "10111110000000011111100101101010", 
    78 => "10111101110100110000001001110001", 
    79 => "00111110010111010111110011110110", 
    80 => "00111101010010101011100100010001", 
    81 => "10111100010100111111000110000100", 
    82 => "10111110000000000001101000110111", 
    83 => "10111101110010111001101110111000", 
    84 => "10111101111100110110000001001010", 
    85 => "10111010111111001111100001100100", 
    86 => "10111110000110010001110111011110", 
    87 => "00111101110001011001100011100001", 
    88 => "00111110001101101000000101100111", 
    89 => "10111100100110111110110111010010", 
    90 => "10111101011001010001100010111110", 
    91 => "10111101100000010111110010100010", 
    92 => "00111101000011001101111000110101", 
    93 => "10111101111101000111000111111000", 
    94 => "00111110001100101100011010101100", 
    95 => "10111101011100001001100100001010", 
    96 => "10111100010110000010110101010011", 
    97 => "10111100101111011101101110011000", 
    98 => "00111110000011111100000010010000", 
    99 => "10111011001111010010110011000111", 
    100 => "00111101001011011111111001110110", 
    101 => "10111101110011000001000110101110", 
    102 => "10111110000111100010100011101101", 
    103 => "10111110000100000000101010111111", 
    104 => "00111101011001000110111011100000", 
    105 => "10111101100010101000101111101101", 
    106 => "00111110001110100000101101011111", 
    107 => "10111101100001110010000100100111", 
    108 => "00111110001110011101010011011000", 
    109 => "10111011001111101010010000010101", 
    110 => "00111010111111110111001110010011", 
    111 => "00111101101110110111100001100001", 
    112 => "10111100111000011010100111010100", 
    113 => "10111100001010001010110011000111", 
    114 => "10111101100111000111001110101100", 
    115 => "10111101110101101010111001111101", 
    116 => "10111101110100100111010011100010", 
    117 => "10111101110110110000100010011010", 
    118 => "10111101000011101001101011101000", 
    119 => "00111101011101101010000001010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_4 is
    component inference_conv2d_f3_2_0_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_4_rom_U :  component inference_conv2d_f3_2_0_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


