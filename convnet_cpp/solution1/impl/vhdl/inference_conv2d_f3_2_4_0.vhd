-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001011101011111001011", 
    1 => "00111100110110100001111011111011", 
    2 => "10111100101000110101011110001000", 
    3 => "10111110000011011101100100111100", 
    4 => "00111101011001100111011001010111", 
    5 => "10111101111100001011110110001000", 
    6 => "00111100111000010010000001110111", 
    7 => "10111100010010001101100001001100", 
    8 => "10111101000111011001111010101100", 
    9 => "10111101001100001010000110100011", 
    10 => "10111101100010010010010101000011", 
    11 => "00111101010010001011101010011111", 
    12 => "10111100011010000011000001101011", 
    13 => "10111101000010101100111110011101", 
    14 => "00111010100111111100110100111010", 
    15 => "00111101111101010110011001001001", 
    16 => "10111001110101000000000110011111", 
    17 => "00111110011110100110111001110110", 
    18 => "00111100010000010011010011101001", 
    19 => "00111011101000101011100001010001", 
    20 => "10111100111111001111101000100111", 
    21 => "10111100101000111000110101101110", 
    22 => "00111101110010001001000100001011", 
    23 => "00111101100110011100001011001111", 
    24 => "10111011100010111101001010011100", 
    25 => "10111101111100011101110111100011", 
    26 => "00111101010101011101111000001000", 
    27 => "10111101010111100010101000000111", 
    28 => "10111101100010110011000110001100", 
    29 => "00111101110111111110101100000111", 
    30 => "10111110001010000001101100100010", 
    31 => "10111101111000101101011010101010", 
    32 => "10111100010010000000011000101001", 
    33 => "00111110000010110101000110111101", 
    34 => "10111110000101001001001111001001", 
    35 => "00111110001111101011101110111010", 
    36 => "10111110001010011010111011010101", 
    37 => "10111100110110001001100001001000", 
    38 => "10111011011111100001001101000001", 
    39 => "00111011001101000101100011100011", 
    40 => "00111101111111110111010110010111", 
    41 => "10111110010100110100010111010000", 
    42 => "00111100101101010010011100101001", 
    43 => "00111101101010110010100000110111", 
    44 => "00111101101110101010011000001001", 
    45 => "00111100111101101101001000100100", 
    46 => "00111110001100001111000001100011", 
    47 => "00111100110011010001111100111000", 
    48 => "10111101101111010111110101100001", 
    49 => "00111110001000101111001111000011", 
    50 => "00111110000000101111111110001111", 
    51 => "10111110001011111010100100111011", 
    52 => "10111101110111100100101000111000", 
    53 => "00111101011100011101001101001100", 
    54 => "00111101010100011111101101110101", 
    55 => "10111110001011001101010011101101", 
    56 => "00111101100100000001000110111001", 
    57 => "10111100001010000100001000111110", 
    58 => "00111100110100101011011110010011", 
    59 => "00111101010101000101111110111001", 
    60 => "10111101100001000001111000010101", 
    61 => "10111100101001011001000100011111", 
    62 => "00111101010010000001101110001101", 
    63 => "10111101111100011001010001111101", 
    64 => "00111100100101010100001101011110", 
    65 => "00111101011110011101011001010000", 
    66 => "00111110000001000110111100010101", 
    67 => "10111110000101100011001001111111", 
    68 => "10111101011000000000010101110100", 
    69 => "00111110000000110100101010001000", 
    70 => "00111101110000011100100001110010", 
    71 => "00111101010011110111001111011100", 
    72 => "10111110000100101110010001001011", 
    73 => "00111101111101011100110010000101", 
    74 => "00111101010100010011011001010011", 
    75 => "00111110000000100010010000100101", 
    76 => "00111101010111010010010111100000", 
    77 => "00111100100100110000001010100111", 
    78 => "10111101111111001110010100101110", 
    79 => "10111110001110010101001000001001", 
    80 => "00111100111011010011010111111001", 
    81 => "00111101100001111110111011101111", 
    82 => "10111101010111111110001111001011", 
    83 => "00111100101001111000111010111010", 
    84 => "10111100001011001111110110001111", 
    85 => "10111101000010001010010001001001", 
    86 => "10111101110010111010100000110010", 
    87 => "00111100100111010111110011101001", 
    88 => "00111101101001101100010011111011", 
    89 => "00111101101001000111100000001101", 
    90 => "00111100100111101101001111001011", 
    91 => "10111101111001110000100011101110", 
    92 => "10111100000010010001110101110110", 
    93 => "00111100010100100110101101110010", 
    94 => "00111101100001011010011101011001", 
    95 => "10111101011111110110100101010010", 
    96 => "10111101100001011000010100011101", 
    97 => "00111110000100010100111011000010", 
    98 => "00111110000001111100001010000111", 
    99 => "00111101111010001101111000101011", 
    100 => "00111110000010100001111011000101", 
    101 => "10111101001000010101000100000011", 
    102 => "00111110001111011011010001000110", 
    103 => "00111101100111110100111110010100", 
    104 => "10111100111001110111000001010010", 
    105 => "10111100011010110100100010111001", 
    106 => "10111101110000111100110011111001", 
    107 => "10111101100001000011010111100010", 
    108 => "10111100110011010011111001110111", 
    109 => "10111101111101111110111101011011", 
    110 => "10111101100001101000000011111011", 
    111 => "10111101100111001110101110111100", 
    112 => "10111101111011010110101110101001", 
    113 => "00111110000101000000111010011101", 
    114 => "10111101111000110001100111000110", 
    115 => "10111100000111100111111111111110", 
    116 => "00111100111100100001111000101011", 
    117 => "10111011011110010110000001111111", 
    118 => "00111101110101110101101110000001", 
    119 => "10111101011101101100110011100110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_0 is
    component inference_conv2d_f3_2_4_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_0_rom_U :  component inference_conv2d_f3_2_4_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


