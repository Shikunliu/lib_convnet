-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_4_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_4_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000110111101000101100111", 
    1 => "10111101101001001001110010001010", 
    2 => "00111101000000000100000101010100", 
    3 => "10111101011110000001101000001000", 
    4 => "10111110001110001111000001000001", 
    5 => "10111101000011011011111100100000", 
    6 => "00111101111101001001111010001000", 
    7 => "00111011100101101010110000101001", 
    8 => "00111101110100100101000000101111", 
    9 => "10111101101001000010001111110100", 
    10 => "00111101010010101101101010000100", 
    11 => "00111011111000110000001111000110", 
    12 => "10111011101101001111101101110101", 
    13 => "10111110010100001000011001111011", 
    14 => "00111011001110101000100001111101", 
    15 => "10111101101011111101011100011011", 
    16 => "00111100101000100110001010010110", 
    17 => "10111101100010010110010110100101", 
    18 => "00111101010001100000110001101111", 
    19 => "10111101101111011011000001100101", 
    20 => "00111110001000000011101110000010", 
    21 => "00111011110111101010100111101111", 
    22 => "10111101011100011100111000001110", 
    23 => "00111011000100100001000011100100", 
    24 => "00111110001010100111010111001101", 
    25 => "00111101111011000111100001100100", 
    26 => "10111100001101100001100011000001", 
    27 => "00111101011011010101100101101010", 
    28 => "00111110000010111111001000101100", 
    29 => "10111101110011010110101100100011", 
    30 => "00111110001111100000110011100001", 
    31 => "00111101100010100010011100011011", 
    32 => "00111101001110000000111100111011", 
    33 => "00111011100101010001001010100001", 
    34 => "00111100000011101010110011110111", 
    35 => "10111101110011010011101111110011", 
    36 => "10111110000011011101011000010111", 
    37 => "00111101001101000100100010001100", 
    38 => "10111100000001111101001101110100", 
    39 => "00111110010110100100101001001001", 
    40 => "10111101100100110111100010010000", 
    41 => "00111101101101110011000001101000", 
    42 => "00111011111100111000110111010111", 
    43 => "10111110001010101001111110111110", 
    44 => "00111100000111011111000011100001", 
    45 => "10111110000011110000100110010110", 
    46 => "00111101011111000000101011011110", 
    47 => "00111101100011011000001000110100", 
    48 => "10111101001010100110000010010001", 
    49 => "10111101000000111100010000010000", 
    50 => "10111010110010011011000000111000", 
    51 => "10111110000111011010000010011101", 
    52 => "00111101000000001010001000000001", 
    53 => "00111101111111010011110111001001", 
    54 => "10111110000000011110000011000110", 
    55 => "00111100010010110111100100010000", 
    56 => "00111101100000001011010011010100", 
    57 => "00111110001000000110111001011101", 
    58 => "10111110000011101001110010001000", 
    59 => "10111011110011100011110100001111", 
    60 => "10111011101001010000101111010011", 
    61 => "10111101101101100101001011100110", 
    62 => "00111110001001110001010010111010", 
    63 => "00111100011110101101010111110101", 
    64 => "00111101100110011010010010011100", 
    65 => "00111101111011001011100111101101", 
    66 => "00111101100001111111000001001100", 
    67 => "10111101000000000000110000101010", 
    68 => "00111100000010111100001011001100", 
    69 => "10111110001011010010110110001000", 
    70 => "00111100100111001001010000100000", 
    71 => "10111101101110011000000101111100", 
    72 => "10111110000111010010010010011110", 
    73 => "10111100111101000011111100110111", 
    74 => "10111101101001001110001110101111", 
    75 => "00111100111010101101100101011101", 
    76 => "00111101100010110011100111001000", 
    77 => "00111011001010110000100000101100", 
    78 => "10111101001011000011110001001110", 
    79 => "00111010100011101000100000011001", 
    80 => "10111101110001001111010100010111", 
    81 => "10111101000101010011101011100000", 
    82 => "10111100010101000111001100011111", 
    83 => "00111101010100110111011111111101", 
    84 => "00111101111001011110011110000110", 
    85 => "10111100101000000100011000100110", 
    86 => "10111110000011111001011011100001", 
    87 => "10111110000111010110111000000101", 
    88 => "10111101010000011011001111100101", 
    89 => "10111110000100011101011010001100", 
    90 => "00111011110010000100101110001001", 
    91 => "10111100001101111010000010000000", 
    92 => "10111101110001100000000110000111", 
    93 => "00111101100101111010001000000101", 
    94 => "10111101111001000101110010111100", 
    95 => "00111101111010011100110111000100", 
    96 => "00111101011100010001000001011110", 
    97 => "00111101100111100001000100010010", 
    98 => "00111101001111010110000111000000", 
    99 => "00111100100001110110000111110100", 
    100 => "00111101111100011110001000010101", 
    101 => "10111101111001000100000011110010", 
    102 => "10111101100000010111011100111100", 
    103 => "00111101001001000110101011100100", 
    104 => "00111101100000100011011100010010", 
    105 => "00111110001101110011111010101011", 
    106 => "10111100100100010110000001000101", 
    107 => "00111101010000000100111000111001", 
    108 => "00111110000000000110011011000011", 
    109 => "10111101100000000101101100111010", 
    110 => "10111101000110100111100000011100", 
    111 => "00111100010111111010000101010000", 
    112 => "00111101101011100111100111111011", 
    113 => "10111110000101001010101100011101", 
    114 => "10111110000000111111011100000110", 
    115 => "00111101111001101011110111110101", 
    116 => "10111101011010001000011011101101", 
    117 => "00111100100100010101101110101000", 
    118 => "10111101001000110110011001101100", 
    119 => "00111011111001001111011010100101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_4_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_4_12 is
    component inference_conv2d_f3_1_4_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_4_12_rom_U :  component inference_conv2d_f3_1_4_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


