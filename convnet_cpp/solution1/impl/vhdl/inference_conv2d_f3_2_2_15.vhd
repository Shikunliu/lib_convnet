-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011000101111000010111000011", 
    1 => "10111101100111010111010100100110", 
    2 => "10111101001101010110001101011001", 
    3 => "00111101001010101011000101101010", 
    4 => "10111101010110001101001000001110", 
    5 => "10111100110011010100100111001010", 
    6 => "10111101110000100101000000000111", 
    7 => "10111100111010011101110101111111", 
    8 => "00111101000110101010111011110011", 
    9 => "00111101000100011001100011111111", 
    10 => "00111100010001001111111010100010", 
    11 => "10111101011010000101110101001100", 
    12 => "10111100111010110010110101110110", 
    13 => "10111110000000101101010111100000", 
    14 => "00111100101101101110001001001010", 
    15 => "10111101100011100001100101001110", 
    16 => "00111101111011100001110101100101", 
    17 => "10111110000010111110011011100110", 
    18 => "00111100100000001010110000101101", 
    19 => "00111101110001100101000011011010", 
    20 => "10111101011110100011010001000100", 
    21 => "10111100110110010110110110001111", 
    22 => "10111100011110001100000101000111", 
    23 => "00111101100000111101010000011011", 
    24 => "00111110011011000101000111011011", 
    25 => "00111110000010011111110011110100", 
    26 => "10111101101110111100011111101010", 
    27 => "00111101100011111001000111100110", 
    28 => "10111101100011101101011100110011", 
    29 => "00111101000010001001011011000010", 
    30 => "10111100001000010111111111101101", 
    31 => "10111100100100011010110011010001", 
    32 => "10111101000111111101111011011101", 
    33 => "00111101000101001000001110110000", 
    34 => "00111101011111000100111111011101", 
    35 => "10111110000001011111010101101010", 
    36 => "10111101100111000001110110100011", 
    37 => "00111101001000111110011110011100", 
    38 => "00111100011101010001010011101010", 
    39 => "10111101100000010010000011010101", 
    40 => "10111101001000100100011111110100", 
    41 => "00111011101101110101110100111001", 
    42 => "00111101101000111110001010000110", 
    43 => "00111101101100100100101001101011", 
    44 => "00111101100010101111010001011101", 
    45 => "10111110000010011011101101101011", 
    46 => "00111101000000101000101110010110", 
    47 => "10111101101010001000101111001101", 
    48 => "00111101111000101001110110000100", 
    49 => "10111101100110110110101011110101", 
    50 => "00111110010101011100100000010001", 
    51 => "10111101110100101111010011001111", 
    52 => "10111100000000011110101101010010", 
    53 => "10111101001000111010100011001100", 
    54 => "10111011110110001010111110101111", 
    55 => "00111101101100100011011010100111", 
    56 => "10111110000110110010110010000100", 
    57 => "00111110000100100100001101010111", 
    58 => "10111100111111101000001111001001", 
    59 => "00111011111000101101111001110010", 
    60 => "00111101001100010011010101111101", 
    61 => "00111100010000111001000110111011", 
    62 => "10111101100101000011001100011011", 
    63 => "10111110010011111111010101000001", 
    64 => "00111101001000001101001000001000", 
    65 => "00111101111010100010001100111010", 
    66 => "10111101101000110001011101011100", 
    67 => "10111101101010110000000111001001", 
    68 => "00111101101001001110101111111000", 
    69 => "10111101100111000011101101001111", 
    70 => "10111100110000100101010100001111", 
    71 => "00111101100011001001110111100000", 
    72 => "00111101010111000111111000011011", 
    73 => "00111100010100111110011101110011", 
    74 => "00111110001010111110010100010001", 
    75 => "10111100101101010010110001100111", 
    76 => "00111110000010101000010111001011", 
    77 => "00111101011000011011110010110011", 
    78 => "10111100101011100101111110001111", 
    79 => "10111100100100100001101101010110", 
    80 => "10111101000110110001111111000110", 
    81 => "10111101010101011100110110101101", 
    82 => "00111101000110101011000101110111", 
    83 => "10111011101010101010010001011001", 
    84 => "10111100111001010111101111110000", 
    85 => "00111101000011100101111000110010", 
    86 => "00111100110010010100001110101011", 
    87 => "00111110000101000000101001101100", 
    88 => "00111110000110111100100101000111", 
    89 => "00111101101101010101000000000001", 
    90 => "10111101100100110001001101101110", 
    91 => "10111101111111000101100010101100", 
    92 => "00111110001111110111011011100110", 
    93 => "00111100011010000000101001000000", 
    94 => "10111101110110100001101010010011", 
    95 => "00111101101001010011000110110011", 
    96 => "10111011111101001010101000001100", 
    97 => "00111101001000111101001101111010", 
    98 => "10111101000001111010001000100000", 
    99 => "10111101110010100110110111010101", 
    100 => "00111110000110110010111001011010", 
    101 => "10111100001001100100001011110101", 
    102 => "00111101111011011100011101101001", 
    103 => "10111100001110000010111100011011", 
    104 => "10111101011001110010111100011001", 
    105 => "10111110010001001001100101001010", 
    106 => "10111101101011010000110010000000", 
    107 => "10111011111110011101010111011010", 
    108 => "00111101100011100000011000000010", 
    109 => "10111100110100101111101001000011", 
    110 => "10111101111010010111011101000010", 
    111 => "10111101100000011101111100011000", 
    112 => "10111101011100101010111110000000", 
    113 => "10111101001000001001010100110110", 
    114 => "00111100010111110100010010011111", 
    115 => "00111101101110100110001011010010", 
    116 => "10111100011011011101111111010111", 
    117 => "00111110001001111110010101100100", 
    118 => "00111100100110100001100100011011", 
    119 => "00111101110101001101010110010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_15 is
    component inference_conv2d_f3_2_2_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_15_rom_U :  component inference_conv2d_f3_2_2_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


