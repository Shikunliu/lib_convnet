-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_5_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_5_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000001011001011000010111", 
    1 => "10111100111001011000101000110011", 
    2 => "10111101011011010100011110010111", 
    3 => "00111101000011110111100101101010", 
    4 => "00111101100000101101000111111111", 
    5 => "00111110000110100011110010100111", 
    6 => "10111110000101000010111100011111", 
    7 => "10111101110011101011111101100110", 
    8 => "00111101110111110000110111000111", 
    9 => "10111110001001010100001010100010", 
    10 => "10111101100010001011010110100100", 
    11 => "00111101000001101001100001010000", 
    12 => "00111011101010110001111100101000", 
    13 => "10111101101000101010101011110000", 
    14 => "10111110000111100100111001101010", 
    15 => "00111110001011001000101010111101", 
    16 => "10111101101100000011011101010000", 
    17 => "10111110000111111111111101111010", 
    18 => "00111110001100010100010110010101", 
    19 => "00111110001010101110100010011111", 
    20 => "00111110000100100111110010111111", 
    21 => "10111110000110111011011100110001", 
    22 => "00111011111111111101000111110010", 
    23 => "10111101001110000001100011100001", 
    24 => "00111101101110001010101001010001", 
    25 => "00111101011100100011010000010101", 
    26 => "00111101000001010010010000101100", 
    27 => "10111101101100001100011000000110", 
    28 => "10111101000001000101011001110001", 
    29 => "00111010101111011001111111011110", 
    30 => "10111110001101000011001101010001", 
    31 => "00111100101011100001011100110101", 
    32 => "00111101110011110100000101101100", 
    33 => "10111101100000001000101000110100", 
    34 => "00111100000000100110001011011100", 
    35 => "00111101110110100000100101000110", 
    36 => "10111101000110111101000010010001", 
    37 => "00111101100111110100110101111011", 
    38 => "10111101011100011011010001011101", 
    39 => "10111110001000111010101111001001", 
    40 => "10111100001000111111001111111011", 
    41 => "10111101010101001000000000111010", 
    42 => "10111101100001100011111111101011", 
    43 => "00111101011111101100000111011101", 
    44 => "00111101110111010101110111000100", 
    45 => "00111101110000001011101001100010", 
    46 => "10111110001001111011101010101010", 
    47 => "10111100101000001100000101110110", 
    48 => "10111101100111100010100011111011", 
    49 => "10111100100001111111111100001000", 
    50 => "00111101010010110110001011010101", 
    51 => "10111101010110001010000001000000", 
    52 => "10111101110001010011111000101101", 
    53 => "00111101110001101111110110011011", 
    54 => "00111101100010001001001100100100", 
    55 => "10111101000101110000001100011100", 
    56 => "00111110000010010111011010111100", 
    57 => "00111101101100010000001110111011", 
    58 => "00111110010000011000101010000111", 
    59 => "10111101000100100110011000011001", 
    60 => "00111100101111001110000100110010", 
    61 => "10111101101110011000001001000101", 
    62 => "10111110000000001101100011001011", 
    63 => "00111101001011101111111001101011", 
    64 => "00111101110010110001100010011000", 
    65 => "10111110001001000011001010000111", 
    66 => "00111101110001111001000100110001", 
    67 => "00111110000101100100001101000110", 
    68 => "00111100100111111110101111000011", 
    69 => "00111101100010001010101010000110", 
    70 => "10111110010101110001000011001011", 
    71 => "00111110000101001100011101101101", 
    72 => "00111101110100011010111000101110", 
    73 => "10111101101011110000001011111011", 
    74 => "10111101010101001010110110111100", 
    75 => "00111110000110100000001001110101", 
    76 => "10111100011101110101000010011001", 
    77 => "10111101001100110010001111111111", 
    78 => "00111101011111101001011000001000", 
    79 => "10111101111010001000110111110011", 
    80 => "10111100110000101100101001001010", 
    81 => "00111101001000111011100001010001", 
    82 => "00111101010101000100110101011111", 
    83 => "00111101010110011111111000101001", 
    84 => "10111101011010100111001001111111", 
    85 => "00111101000010110011000111000010", 
    86 => "10111110001000100000111101101111", 
    87 => "00111101010010011100100111001000", 
    88 => "10111101100001001011011000101101", 
    89 => "00111101110101000100110111001011", 
    90 => "00111101010101000010010100110110", 
    91 => "00111101100000011000111111100000", 
    92 => "00111101111000111100000110001011", 
    93 => "00111101001111111001011110101011", 
    94 => "10111110001001011000110010001111", 
    95 => "10111100101001010110000010101101", 
    96 => "10111100101100100101000001111111", 
    97 => "00111101001011001001011111011001", 
    98 => "00111101100001101110100101111001", 
    99 => "10111100001010011011001111000011", 
    100 => "00111110000100110011010110001111", 
    101 => "00111110000101011011101010110010", 
    102 => "10111101110011011100011101101001", 
    103 => "10111011101101101100010101111001", 
    104 => "00111101101100000001100100000010", 
    105 => "00111110001101111101001101001110", 
    106 => "10111101000000001100010111000011", 
    107 => "10111101010001101110001101100100", 
    108 => "10111101110111001000110110100000", 
    109 => "10111101100110000101101000100111", 
    110 => "00111101010101001100111011011111", 
    111 => "10111100111010011101001100000010", 
    112 => "00111101011011010111001110100001", 
    113 => "10111100111101010100010000011010", 
    114 => "10111110000010011100001111001110", 
    115 => "10111100010110010000000111111010", 
    116 => "00111110000100000101001000001101", 
    117 => "00111100011010101011001000100110", 
    118 => "10111101111011111000000001010110", 
    119 => "10111101100000010000101010100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_5 is
    component inference_conv2d_f3_0_1_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_5_rom_U :  component inference_conv2d_f3_0_1_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


