-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001110100111011100011101", 
    1 => "10111101101000010110110100000010", 
    2 => "10111101110000110110101000001010", 
    3 => "10111110000101011110011000110110", 
    4 => "00111101011011101110101010011001", 
    5 => "10111100111010011110101111110111", 
    6 => "00111110010111100111011010000110", 
    7 => "00111110001110000101100000110110", 
    8 => "10111101100011100010010000001101", 
    9 => "00111101101010010111101010011101", 
    10 => "00111101001000111101010001010000", 
    11 => "00111110000001000110000110110111", 
    12 => "00111100110100000100111100000011", 
    13 => "00111101000000010110011010000010", 
    14 => "10111101001001101101100111011001", 
    15 => "10111100110000100111010010000100", 
    16 => "00111110000111010101000011101100", 
    17 => "10111101111110110001000001110111", 
    18 => "00111101100110111110001011111000", 
    19 => "00111011110001111001101110100000", 
    20 => "10111101010011000001110010111110", 
    21 => "00111100100110000111100010011101", 
    22 => "10111110000000110010111010111110", 
    23 => "00111101101000100110000001111101", 
    24 => "10111100000010010010000101011100", 
    25 => "00111101010111100111000100011111", 
    26 => "00111101000111111101001011101001", 
    27 => "10111110000110111010010100011010", 
    28 => "00111101011101010011111110011000", 
    29 => "00111110000111101111000000101000", 
    30 => "10111100110101011010111011110100", 
    31 => "00111101001011100001100110000011", 
    32 => "00111100101010011111010011111100", 
    33 => "00111101011001101100101000000100", 
    34 => "10111101110100001001010100101001", 
    35 => "10111101001100100100001011000011", 
    36 => "00111101000101001000010101111000", 
    37 => "00111101100110101000110100000111", 
    38 => "10111011110010000110111101110000", 
    39 => "10111101100000100110011100100110", 
    40 => "10111101110001101010011100100110", 
    41 => "00111100100100111000000100011100", 
    42 => "10111100110001101101000111100001", 
    43 => "00111101010001111000100001110000", 
    44 => "10111101000111110011011000001011", 
    45 => "10111110000010101101111001100101", 
    46 => "00111110010011011010101011010110", 
    47 => "00111101101110101011011101110001", 
    48 => "10111101100010100010000110100111", 
    49 => "10111100111111000101000100011111", 
    50 => "10111101010000110000001101110000", 
    51 => "00111101000010011000110000111011", 
    52 => "10111101111100000010011110010101", 
    53 => "00111110001000001101111000001001", 
    54 => "10111101110100111011101001110111", 
    55 => "00111101111000110001111100000100", 
    56 => "10110111001010000001110110111000", 
    57 => "00111110001010010000010001110001", 
    58 => "00111101100000011000011000010010", 
    59 => "00111110001010001000100000101111", 
    60 => "10111100010111110011101101100100", 
    61 => "10111110001010011011110111000111", 
    62 => "10111100111100110100001100100011", 
    63 => "00111101101001010110001100001001", 
    64 => "10111101100100101011111000100000", 
    65 => "10111101111111100001010101000100", 
    66 => "00111101101110001101111111001011", 
    67 => "00111011100010010001110111001011", 
    68 => "10111110000010100011011010100000", 
    69 => "10111101000000111110111101000011", 
    70 => "10111110001000110011100111000001", 
    71 => "00111011011101110101101001101010", 
    72 => "10111101100101000101110111010110", 
    73 => "00111101110101010011011100011001", 
    74 => "00111110000101100101000101101110", 
    75 => "00111101101100001101100100011100", 
    76 => "10111110000001010001001001100110", 
    77 => "00111110001100011010101011000101", 
    78 => "00111101101111001011101000010101", 
    79 => "00111100111111000010011011000010", 
    80 => "00111101110001101001101000011000", 
    81 => "00111101011010100011010110010011", 
    82 => "00111101000001011101010000000101", 
    83 => "00111101000000101110000011110000", 
    84 => "00111101001001010000100100111001", 
    85 => "00111101100001001110001001010010", 
    86 => "10111101000001010111000100001001", 
    87 => "00111101110110101101110010010000", 
    88 => "10111101001110110001010111101011", 
    89 => "00111101100010010010001101100000", 
    90 => "00111100011111100000010000010010", 
    91 => "10111101101011001011001100101010", 
    92 => "00111100000100011110111100010110", 
    93 => "10111101001010010111100011010101", 
    94 => "00111100000101001111010011001111", 
    95 => "10111110001010000010100011000011", 
    96 => "00111101111001010111001110101000", 
    97 => "00111101100110101001101011011110", 
    98 => "00111100101000000000011010011011", 
    99 => "00111110000011000000010100001100", 
    100 => "10111101000111010001000100111000", 
    101 => "10111101001011001001100000001110", 
    102 => "00111110000001001000001110001000", 
    103 => "10111110000011010011010101100101", 
    104 => "10111110000000001011100011010000", 
    105 => "00111101110010101111110001111110", 
    106 => "00111101100000110000100010010011", 
    107 => "10111100101000011000110100011001", 
    108 => "10111101001101111011100101011010", 
    109 => "10111101101100000111110110111001", 
    110 => "00111101000001010010000001001011", 
    111 => "00111100110011111111010111100010", 
    112 => "10111101101000010000000101111010", 
    113 => "00111101000100101110011110110100", 
    114 => "10111101100010101001001000011101", 
    115 => "00111110001000101101001000110101", 
    116 => "10111101001101101110110110011101", 
    117 => "00111101101101110000011010010010", 
    118 => "00111101011101010011001000101100", 
    119 => "10111101111101111010000111000010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_1 is
    component inference_conv2d_f3_0_4_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_1_rom_U :  component inference_conv2d_f3_0_4_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


