-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_2_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_2_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001100111101001110100010", 
    1 => "00111101110011000111011111101011", 
    2 => "10111101010000111100011011100100", 
    3 => "10111100111100110111010011010111", 
    4 => "10111101000110000101011110110000", 
    5 => "10111101010000100110101010101001", 
    6 => "00111100111101111110011000100000", 
    7 => "10111110000010101100011111011010", 
    8 => "00111101100110100011010101101011", 
    9 => "00111101011011001110101011001010", 
    10 => "00111101100100101010111010001110", 
    11 => "00111100100111000001110100000010", 
    12 => "00111100110101110100110101011001", 
    13 => "10111101100110001011000011000100", 
    14 => "00111100100110100100000010001001", 
    15 => "10111101000110100101001001000001", 
    16 => "00111101100000001011100101111110", 
    17 => "10111101000111001100110100010000", 
    18 => "10111101111110100110101001000100", 
    19 => "10111100001111101101100011101110", 
    20 => "10111101101110111011010010010001", 
    21 => "00111110000111010011000000100111", 
    22 => "00111101001010010110001011010000", 
    23 => "00111101111010110100010100101000", 
    24 => "10111101011011101101001000010000", 
    25 => "10111100101011000110111001010011", 
    26 => "00111100110001000110111010001111", 
    27 => "00111100111000011101010011010001", 
    28 => "10111110000010110001111010011111", 
    29 => "10111101111111000111000011001010", 
    30 => "00111100001000000000001111000001", 
    31 => "00111100010011011101111110000111", 
    32 => "10111101110110111101001110000000", 
    33 => "00111101011100011111111010000000", 
    34 => "00111101100000110010100110101000", 
    35 => "00111100110110000100101110111100", 
    36 => "10111101101000101110110010010100", 
    37 => "00111101100110110100000011101001", 
    38 => "00111101111101111010111111101010", 
    39 => "10111100000011101001101101000100", 
    40 => "10111100100100111010110111111101", 
    41 => "10111100111100011100011010000001", 
    42 => "00111101110000010011101111100010", 
    43 => "10111110000001011011011000111101", 
    44 => "10111100110011010101001110100110", 
    45 => "00111101111001010100110101100010", 
    46 => "10111100011100000010100111001001", 
    47 => "10111110010100101110100110001010", 
    48 => "00111100111001011110001110111111", 
    49 => "10111101100100010100110110101000", 
    50 => "10111100000100100100011001001001", 
    51 => "00111101001001010010011001100000", 
    52 => "00111101100001011110011111110001", 
    53 => "00111101110001110011000110000010", 
    54 => "00111101001100011110101110111011", 
    55 => "00111101011000000010001011010000", 
    56 => "00111101111001111011111111101000", 
    57 => "10111100101110110100110000111100", 
    58 => "00111100101010100110101000000001", 
    59 => "00111100011110001010111001101000", 
    60 => "10111101100010011010011101100100", 
    61 => "10111101000101001101011100001101", 
    62 => "10111110000011010111000011100111", 
    63 => "10111101101001000001001010001100", 
    64 => "10111100001001111111000000001001", 
    65 => "10111101001100111011011110111101", 
    66 => "10111110000110111011101001010110", 
    67 => "00111101010010111110011110010101", 
    68 => "10111101101010100111101011001000", 
    69 => "00111100001001111000011100101110", 
    70 => "10111101110011110010011110111011", 
    71 => "00111101000101010101110111100110", 
    72 => "00111110010101111100110100000011", 
    73 => "00111100101111010110110011011101", 
    74 => "00111101110010001000001100110100", 
    75 => "10111101011011111111011100111111", 
    76 => "10111101101110011000000000111001", 
    77 => "10111110001010010101101011110011", 
    78 => "00111100001001101011000001101110", 
    79 => "10111101110110101110001101100001", 
    80 => "00111101011000101011100111010100", 
    81 => "10111101100101011011010001100111", 
    82 => "10111110000011011111011110100101", 
    83 => "10111101100000100111101010011001", 
    84 => "10111101101000101111101010010100", 
    85 => "10111101100110011011001010101001", 
    86 => "00111110000001101011111001111011", 
    87 => "00111101011101001010001001001110", 
    88 => "00111101111010111001000110110100", 
    89 => "10111101100101101100111100100111", 
    90 => "10111101011011010011111000001100", 
    91 => "00111110000001101011111010111110", 
    92 => "00111101100001001001011101110100", 
    93 => "00111101110111101101000101111100", 
    94 => "10111101011011110011000001010100", 
    95 => "00111101110001011011101000011110", 
    96 => "10111100110110100000011101001000", 
    97 => "10111110000000011100111101111000", 
    98 => "00111100100100110110100001011101", 
    99 => "10111101011011010001011001001110", 
    100 => "10111110001001110100001011011101", 
    101 => "00111100100011101011101011100100", 
    102 => "00111100110101101100100111011100", 
    103 => "00111110000000100101110000111110", 
    104 => "00111100100000110010100110000000", 
    105 => "00111101110110101101010010110010", 
    106 => "00111110000110011001011100111110", 
    107 => "10111101000010000111011110011110", 
    108 => "10111101101110100000110101011101", 
    109 => "10111011000110000010101010101111", 
    110 => "00111110001100010010101101011110", 
    111 => "10111101111011000101010000110111", 
    112 => "10111100001000100000001000010011", 
    113 => "10111101100000000111001101100101", 
    114 => "00111101010111100001101001001101", 
    115 => "10111110000110001110011010001110", 
    116 => "00111101100111110000111101001101", 
    117 => "00111101001111000011001101010111", 
    118 => "00111101001001100001100000010010", 
    119 => "10111100101001100100100101110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_2_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_2_12 is
    component inference_conv2d_f3_4_2_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_2_12_rom_U :  component inference_conv2d_f3_4_2_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


