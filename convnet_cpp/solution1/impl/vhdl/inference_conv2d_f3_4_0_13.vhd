-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000100001110001111001110", 
    1 => "10111101100001101111011111010110", 
    2 => "00111101101110110010001100100001", 
    3 => "00111011111011111101001001100000", 
    4 => "10111101011100100100010100101100", 
    5 => "00111101100101000101000110101100", 
    6 => "10111110000010101100001100100010", 
    7 => "10111101001010110101110011110110", 
    8 => "10111101000000111000111011100110", 
    9 => "10111100111001000110110110011110", 
    10 => "10111110001111101011110010000100", 
    11 => "00111100110010110101111000000010", 
    12 => "10111101101010100100011100010110", 
    13 => "10111101011000011001100000011011", 
    14 => "00111101101001100011110001001101", 
    15 => "00111101101100001100001110000010", 
    16 => "00111110001010101000001100101100", 
    17 => "10111101110001010011000000101110", 
    18 => "00111101001111000101101100010101", 
    19 => "00111101101101010110001000100101", 
    20 => "10111110010000111011111100101111", 
    21 => "00111101100111011111010111110111", 
    22 => "00111101101010101101111000010101", 
    23 => "00111011010111101010111011110111", 
    24 => "10111110000111101111101111110100", 
    25 => "10111101010111000011111001011010", 
    26 => "00111101011110000001101101001010", 
    27 => "10111100010101000000100100000001", 
    28 => "10111101010110001001110111010110", 
    29 => "00111101110110010111000100111011", 
    30 => "00111110001111010000011110000101", 
    31 => "10111011111000100000101111001110", 
    32 => "10111110001010111100001010111001", 
    33 => "10111100101000010101110000000110", 
    34 => "00111110001010110010100101011111", 
    35 => "10111110001110000101100010111100", 
    36 => "00111101110100101000000101110111", 
    37 => "00111101110111100000101001000010", 
    38 => "00111101110010100001001010000000", 
    39 => "00111101110101111001110010000100", 
    40 => "10111100100001011000111011101011", 
    41 => "10111101101000101000110100101000", 
    42 => "10111101110110111111000011011100", 
    43 => "10111100110110101110010010001000", 
    44 => "10111101100100100000101000110001", 
    45 => "00111100010001111001010011101010", 
    46 => "10111101101000111100001011000000", 
    47 => "00111101010011110010111000100001", 
    48 => "00111101000000011111111101111111", 
    49 => "10111100111100101101101100011111", 
    50 => "00111101010000001000100000000000", 
    51 => "10111100011011011000101010110010", 
    52 => "10111101100010111101100001101110", 
    53 => "10111101110001110100001101010110", 
    54 => "00111100101011110101111001011101", 
    55 => "00111100001000001000000011101001", 
    56 => "10111110000110001100001110110001", 
    57 => "00111100110001111000000001011101", 
    58 => "10111101110000001011111000000001", 
    59 => "00111101111010010101011111001101", 
    60 => "00111101000101111110011011000001", 
    61 => "00111101000011100011010001000000", 
    62 => "10111011011111000000001100011011", 
    63 => "10111100010110111001011000101001", 
    64 => "10111101100101001111001110100000", 
    65 => "10111101000111111010100000111100", 
    66 => "10111101011111111010101110010111", 
    67 => "00111101000000101111011000111010", 
    68 => "10111110010101100110001111000111", 
    69 => "00111101011100000110001100111111", 
    70 => "10111110000110111010110101111101", 
    71 => "00111011011001100101110111000010", 
    72 => "00111110001101010100111000101011", 
    73 => "10111110001001100001010011100000", 
    74 => "00111110000010101001001001100000", 
    75 => "10111011110011111101111110111100", 
    76 => "00111101000001100111001011100001", 
    77 => "00111101011000000110000001111000", 
    78 => "10111101101011010011001010011110", 
    79 => "10111100100100101100001001111010", 
    80 => "10111100111110001101010101101001", 
    81 => "00111101110000010110010101110110", 
    82 => "00111110000111001111001000000110", 
    83 => "10111110000010000100101111100100", 
    84 => "10111011011111100101100010110110", 
    85 => "00111101110001010011110011101011", 
    86 => "10111010101010100110000110111110", 
    87 => "00111101001101011011011000010101", 
    88 => "10111110001010110101010110101100", 
    89 => "10111010100011111001111110011011", 
    90 => "10111110000000101011000101110000", 
    91 => "10111011101011011001111111100001", 
    92 => "00111110000011100010000101010011", 
    93 => "00111101011101110001000110010100", 
    94 => "00111011101001100101100100011011", 
    95 => "00111110000110011001000011110011", 
    96 => "00111101000001110101100110010001", 
    97 => "00111101100000010111011001001010", 
    98 => "00111100010101011011001100100101", 
    99 => "10111101011111100001000011111000", 
    100 => "10111101001000000111000110101010", 
    101 => "00111101101110011011000101100111", 
    102 => "10111101111001110001111101111001", 
    103 => "10111101001000000101111110111100", 
    104 => "00111101100001101001110000001001", 
    105 => "10111101100101110110011010101100", 
    106 => "00111101100100010011011111110100", 
    107 => "10111100001010000111110000100000", 
    108 => "00111100101000000000001100001010", 
    109 => "10111101011001111110011001100011", 
    110 => "00111100100100010110010001000001", 
    111 => "10111101100110100000111111000110", 
    112 => "00111101110101001111101101010101", 
    113 => "00111110000010110111111011010100", 
    114 => "10111101111100100101101100110001", 
    115 => "00111101101000000111101001111001", 
    116 => "00111110000100001101010011011100", 
    117 => "10111101000110101010111111001010", 
    118 => "10111101011010100001101011010110", 
    119 => "00111100110001011111111101010011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_13 is
    component inference_conv2d_f3_4_0_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_13_rom_U :  component inference_conv2d_f3_4_0_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


