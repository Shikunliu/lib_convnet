-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100011011001011110110011000", 
    1 => "00111101110000101100111111100110", 
    2 => "00111100110010101011111000110101", 
    3 => "10111101010100101000111101101010", 
    4 => "00111110000110011000010100100111", 
    5 => "00111110001001100000011001110101", 
    6 => "00111101101011110101010100100010", 
    7 => "10111100100000000010000001001100", 
    8 => "10111101101010010110001100010011", 
    9 => "00111010110001110101111011111010", 
    10 => "10111101000101001001111100101001", 
    11 => "00111101011011001010010001010011", 
    12 => "00111101000011000000110111110110", 
    13 => "00111110000111111010100101111110", 
    14 => "00111110011000111100111011101010", 
    15 => "00111101010001111000001010101011", 
    16 => "10111101101110010010011110000100", 
    17 => "00111110000100101011010000001111", 
    18 => "00111101111000000011111001100100", 
    19 => "00111101001011111110110101001000", 
    20 => "10111101110000011110011100111001", 
    21 => "10111110001000001101011101111011", 
    22 => "10111101101001101000101101111000", 
    23 => "00111101001111001000010100000110", 
    24 => "00111101011000000000101011101000", 
    25 => "10111100001001011110011010101111", 
    26 => "10111101101010100011100001110110", 
    27 => "00111110000000101010011001101110", 
    28 => "00111101110111010011110111001001", 
    29 => "10111100111011011011100100001011", 
    30 => "10111101110111110101110011110010", 
    31 => "00111101111110110011001110011000", 
    32 => "10111101000101011100111010111001", 
    33 => "00111100010011101101000001001000", 
    34 => "00111101100100000111101001101100", 
    35 => "10111011111001101010100100101100", 
    36 => "00111101100111111110101110000000", 
    37 => "00111101100100001001000110001011", 
    38 => "00111100100101110111100010001101", 
    39 => "10111101011000010001111011100100", 
    40 => "10111110001101101111110000010110", 
    41 => "10111011111000000000101001000001", 
    42 => "10111100110111001010000111110111", 
    43 => "10111101100101000010111011011100", 
    44 => "00111100100000011100111001101100", 
    45 => "10111100010111101111000100100111", 
    46 => "00111100000100010001110101111111", 
    47 => "10111110010110000111010111010101", 
    48 => "00111110010000000101110000000011", 
    49 => "10111101101100011000010101010110", 
    50 => "00111101101101111001000010101011", 
    51 => "00111101101001101101011110011000", 
    52 => "00111100110110011101100111111100", 
    53 => "10111101011001101000110110011110", 
    54 => "10111101110001010011011110111011", 
    55 => "10111101010010100111110011111100", 
    56 => "00111011000011101100010010101001", 
    57 => "00111101111011111100101111010101", 
    58 => "10111101100010111101010010101000", 
    59 => "10111110000010101110011100001100", 
    60 => "00111101101010101011011111000010", 
    61 => "00111100101011011100011110000100", 
    62 => "00111101100011100110110111000100", 
    63 => "00111110000000101111110011110000", 
    64 => "10111101010110011001010011111100", 
    65 => "00111101101101001011110001111000", 
    66 => "10111101000101010100001011110011", 
    67 => "00111101110011101101101000100011", 
    68 => "00111110010001001000100011000110", 
    69 => "10111101000011001101101111100110", 
    70 => "00111100100001001101110010101001", 
    71 => "00111100110011001010110011101100", 
    72 => "00111100000000100110001001000101", 
    73 => "00111101101000011001100010101111", 
    74 => "10111101111110010100101101111011", 
    75 => "10111100110001001111111111100100", 
    76 => "10111110000000100111010000011001", 
    77 => "00111101100000011111110011000101", 
    78 => "10111101100110100111001110110100", 
    79 => "10111101011100111101101101001001", 
    80 => "00111101010011100101011101111100", 
    81 => "00111110000001100111101100011100", 
    82 => "00111100101100000001100001100001", 
    83 => "10111110000111111000010001000101", 
    84 => "10111101111010101011110101011110", 
    85 => "00111101100011010011001110101010", 
    86 => "10111101101111011001111001101001", 
    87 => "00111101110101111011011111001000", 
    88 => "10111100011010111111110100010100", 
    89 => "10111101011110000111000001010100", 
    90 => "00111110000110110110011000110000", 
    91 => "10111101001101010000111001001111", 
    92 => "10111011110110001010000100000001", 
    93 => "00111101110100111000000111011000", 
    94 => "10111101100110001111001000110010", 
    95 => "00111100101111000011111011100000", 
    96 => "10111101001000011001011011011001", 
    97 => "00111101111010010001100011100011", 
    98 => "00111101010101100100111010001011", 
    99 => "00111101110010000001001000101011", 
    100 => "10111101110010100110011000000101", 
    101 => "00111100010111111011110011111111", 
    102 => "10111101010100110100100000010001", 
    103 => "10111100111011110111110111010010", 
    104 => "10111101011111100010000000010001", 
    105 => "10111100100001110001010101101000", 
    106 => "00111110001101100110000010100010", 
    107 => "00111110000101011111101001100110", 
    108 => "00111011100101001100100011100101", 
    109 => "00111110000010000010001010111100", 
    110 => "10111101010010000001000010001011", 
    111 => "10111101111000000100010010101111", 
    112 => "10111100010010001101111111011000", 
    113 => "10111101100011010010111111001001", 
    114 => "00111101111001100111010100010100", 
    115 => "10111101001000111110101001010101", 
    116 => "00111100101011110110101001010001", 
    117 => "00111100111001000111111010011010", 
    118 => "00111101010010011110001000000001", 
    119 => "00111101110101010111110101011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_14 is
    component inference_conv2d_f3_3_3_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_14_rom_U :  component inference_conv2d_f3_3_3_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


