-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_108_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_108_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101000010010011110011000", 
    1 => "10111101001000110101100100110110", 
    2 => "10111101100010111011001010101110", 
    3 => "10111011010010101010100000101111", 
    4 => "10111101011001101110110101110101", 
    5 => "10111110001001110111010111111011", 
    6 => "10111101010111000101011110011111", 
    7 => "00111100110100001101001110001101", 
    8 => "10111101101010111000100011011000", 
    9 => "10111100110110001011001001111110", 
    10 => "10111101010111010110010011100101", 
    11 => "10111101011110011010101100000010", 
    12 => "10111101001110010011000001101110", 
    13 => "00111100000011001101001111111001", 
    14 => "00111110001011010100101100100111", 
    15 => "10111100100110001110101101010100", 
    16 => "10111101100101001000110111110111", 
    17 => "00111100010000000001000101101000", 
    18 => "10111101011110110000100110001100", 
    19 => "10111101001010111001101101011010", 
    20 => "00111101000100001011000101000011", 
    21 => "00111100110111110001100001011111", 
    22 => "10111101000011100101100000000010", 
    23 => "10111100101011111000010010111101", 
    24 => "00111101100101101101010100000110", 
    25 => "00111101111100111010101101000011", 
    26 => "00111101101111101010010101110010", 
    27 => "00111101011111010000001111100111", 
    28 => "10111101100100110001111011110110", 
    29 => "00111101110110101011110100011011", 
    30 => "10111101111101100011101110101100", 
    31 => "00111101101101111110101010010101", 
    32 => "00111101100001100010011100011110", 
    33 => "10111011101010100100110111110010", 
    34 => "10111110010001001100010000000101", 
    35 => "00111100101110100000101011110011", 
    36 => "10111101100001101010000110011000", 
    37 => "10111101010010001001110100001101", 
    38 => "00111101110000101111000101110100", 
    39 => "00111110001111100011001000011010", 
    40 => "10111101000100101011101110101010", 
    41 => "00111110010000110011001111111101", 
    42 => "10111101001001101101011001111110", 
    43 => "00111101100010101001001011011001", 
    44 => "00111101000001110110110001010110", 
    45 => "10111011010110110010011001010111", 
    46 => "00111100100001101110111111011110", 
    47 => "10111010111011111101010100111011", 
    48 => "00111110001011101101001001000110", 
    49 => "10111110000011100011101111001101", 
    50 => "00111110001000000001111111111011", 
    51 => "10111101011100101111100011001011", 
    52 => "10111101100111000110110001111101", 
    53 => "00111101111010111010101101100101", 
    54 => "00111101001101110001110101010011", 
    55 => "10111101100101000000001010001110", 
    56 => "10111101100001011100101101011110", 
    57 => "00111101111001000101010101100101", 
    58 => "00111101110111001101000010111011", 
    59 => "10111110000001100110111010000111", 
    60 => "00111101101001010011000111001110", 
    61 => "00111101111010101110100101101000", 
    62 => "00111101101011111000101010001111", 
    63 => "00111101011110010000101000001101", 
    64 => "10111101101111000010010001110011", 
    65 => "00111101100001001110000110001001", 
    66 => "00111101101001010101110010010110", 
    67 => "10111110000110101010101110001010", 
    68 => "00111110001100000110000011111110", 
    69 => "00111110010011101000000101000101", 
    70 => "00111101000101011101111110011011", 
    71 => "00111100110001100111000010010010", 
    72 => "10111100111110111100101100011101", 
    73 => "00111101001101110010000000001101", 
    74 => "10111101100101111010111110110101", 
    75 => "10111101111110100111000000001001", 
    76 => "00111101101001101110101111111101", 
    77 => "10111100101101101011010111010100", 
    78 => "10111101110110010100001010010001", 
    79 => "10111101100111110011001011110011", 
    80 => "10111110000101111101100001001001", 
    81 => "10111101101111111100111011111011", 
    82 => "10111101111110111111011010100001", 
    83 => "00111101110111111100101100001100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_108 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_108 is
    component inference_mult_1_120_120_84_s_W4_108_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_108_rom_U :  component inference_mult_1_120_120_84_s_W4_108_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


