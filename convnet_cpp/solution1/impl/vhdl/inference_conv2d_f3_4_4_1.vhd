-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_4_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_4_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100000111100001010011", 
    1 => "10111101011001011001101011011111", 
    2 => "00111110000001101110010011000001", 
    3 => "00111110001111000001110010100100", 
    4 => "00111101111011101110001110010011", 
    5 => "10111101011000100010010000010111", 
    6 => "00111110001011110100100100000110", 
    7 => "10111101100001001101001101010100", 
    8 => "10111010010111100000000011100011", 
    9 => "10111011110111110000111010011001", 
    10 => "00111100110001101011100111000011", 
    11 => "10111011101100010001011100001111", 
    12 => "10111101101011110100000000011100", 
    13 => "00111101000110010100111001010000", 
    14 => "10111101000101101001110011000101", 
    15 => "10111101110010100011011011110000", 
    16 => "00111101001101101001010000010001", 
    17 => "00111101100100110111000100111001", 
    18 => "10111101100111100111110111001111", 
    19 => "00111110001110111010001111001010", 
    20 => "10111101101100101000011100100001", 
    21 => "00111100010110111101101010000111", 
    22 => "10111110001011111111011101011001", 
    23 => "10111101001011000101000110011000", 
    24 => "00111101111100000001100111110100", 
    25 => "00111101001000111011000010101010", 
    26 => "00111101111111000111100110110011", 
    27 => "10111110000100000111111011100001", 
    28 => "10111101101011010100001101010111", 
    29 => "10111101001111100111100001011011", 
    30 => "00111100001101011001001000011110", 
    31 => "10111100010001000110101111010101", 
    32 => "10111110000100110111110110100110", 
    33 => "00111101101011111111110110100100", 
    34 => "00111110000110101111100111101100", 
    35 => "00111101010011011010101100011001", 
    36 => "10111100101011100000000011111010", 
    37 => "10111100110011111101100001010000", 
    38 => "10111110001000000001001110101001", 
    39 => "00111100100100011111110000010110", 
    40 => "00111101001010101001100111010010", 
    41 => "10111101101010011000010111001000", 
    42 => "10111100001110110011101001101001", 
    43 => "00111110000000111000001110101110", 
    44 => "10111101000000110110111110100111", 
    45 => "00111101110011001101100011011100", 
    46 => "10111110000001001111110111110100", 
    47 => "10111110001110100000010001001011", 
    48 => "00111101110101000000101000101000", 
    49 => "10111100010110001011001010110100", 
    50 => "00111100100010000101110011000110", 
    51 => "00111101000100000001010011010000", 
    52 => "10111101101110110001100000011111", 
    53 => "10111101110001001010101010110010", 
    54 => "00111010101011101111101011010101", 
    55 => "00111101010100100011011010011001", 
    56 => "00111101100111100000010001100010", 
    57 => "00111101101010100111010011101001", 
    58 => "10111101111000010000111110010101", 
    59 => "00111101100000000010111111111001", 
    60 => "00111101101000100000111110100101", 
    61 => "10111101011000000011011111001001", 
    62 => "10111011101000101100010100010001", 
    63 => "00111100110000101101100011000011", 
    64 => "10111100101010101100111100010110", 
    65 => "00111101110100001001000011110111", 
    66 => "10111101010001010000110110100001", 
    67 => "10111101110001111111111110101001", 
    68 => "10111100100001110100101001000001", 
    69 => "00111101110010000101001010110101", 
    70 => "00111101010101110101111000111011", 
    71 => "10111110010000100000001101100000", 
    72 => "10111110000000001001001111011001", 
    73 => "10111101101100101100000101101110", 
    74 => "00111101011000001011100101111110", 
    75 => "00111110001101010100010011111110", 
    76 => "00111100110110011100010011001101", 
    77 => "00111110000001100111010100010100", 
    78 => "00111101001001111101111010111100", 
    79 => "10111101001000110100001001110101", 
    80 => "00111101110001011011100001110001", 
    81 => "00111101010001101110010111101000", 
    82 => "10111101111110011010000111111101", 
    83 => "00111100100000010111101101100000", 
    84 => "10111100000110011011100101011010", 
    85 => "00111101100011001011101011000100", 
    86 => "00111110000100001011011000110001", 
    87 => "00111101011000110000110011111011", 
    88 => "00111110001000110010110100101100", 
    89 => "00111101101011101001001110111010", 
    90 => "00111101110101011010010000100111", 
    91 => "10111101101001010011000100010010", 
    92 => "00111101110111111100100011110011", 
    93 => "10111101010100001001001010001010", 
    94 => "00111110000010110101011000110010", 
    95 => "00111101101111110001101001011101", 
    96 => "10111101100101110110111010100100", 
    97 => "00111011111111110011101100011111", 
    98 => "10111101000000001111111110111111", 
    99 => "10111101001101010001111100010110", 
    100 => "10111110001011000110100011101100", 
    101 => "10111011111110010011001011011100", 
    102 => "10111100110100011000111001101000", 
    103 => "10111101011001111011001001111100", 
    104 => "00111110000010100111000101011000", 
    105 => "10111011101010100011010001011100", 
    106 => "10111100011011111001000111110100", 
    107 => "00111101101001000011111010001001", 
    108 => "00111101111101001110111000111001", 
    109 => "10111100010001001100111001100110", 
    110 => "10111101101100001111110001001010", 
    111 => "00111110001111101111001001000001", 
    112 => "10111100110000111010101011100101", 
    113 => "10111101011100010110110011110101", 
    114 => "10111011111011010101100110001010", 
    115 => "00111110000110000100101011011000", 
    116 => "00111100111000000001011110011000", 
    117 => "00111110001010011100010110100100", 
    118 => "10111101001011011111100100011101", 
    119 => "10111101010000010000001010010100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_4_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_4_1 is
    component inference_conv2d_f3_4_4_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_4_1_rom_U :  component inference_conv2d_f3_4_4_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


