-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_2_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_2_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110010100101100011011100", 
    1 => "00111101100001100001010000110001", 
    2 => "00111101101010111011011111011111", 
    3 => "00111100100010001010010101010110", 
    4 => "00111110000001010010101011000111", 
    5 => "10111101011111010101100001010000", 
    6 => "10111100011101101111100111000111", 
    7 => "10111110000010000111001110111101", 
    8 => "00111110001111101001001001001111", 
    9 => "10111101000101110111001011001000", 
    10 => "00111100111000000100010001000011", 
    11 => "10111101110001011001101111010001", 
    12 => "10111101100101101000001010000000", 
    13 => "00111100111001101001111011010000", 
    14 => "10111100001011100000101001101010", 
    15 => "00111100001011000110100110000000", 
    16 => "10111101001100100011101100011011", 
    17 => "00111101011011011101011001001101", 
    18 => "10111101101011101101000101100010", 
    19 => "10111101100011101011101001101011", 
    20 => "10111101100000100011111000001011", 
    21 => "00111110001100010000100101001010", 
    22 => "10111100111010101110100100011000", 
    23 => "00111100110100101101010100100101", 
    24 => "00111101101001010110010110001101", 
    25 => "10111101101010011111001010111011", 
    26 => "00111110000100001100011111000001", 
    27 => "10111101110001010100110010110011", 
    28 => "00111100101010100100010001110111", 
    29 => "10111101011011111101000001011000", 
    30 => "10111100010111100100101101111010", 
    31 => "10111110000110011000111000010001", 
    32 => "10111101001110010111001100000011", 
    33 => "10111100101011111101110110101001", 
    34 => "10111100100101110001001000110110", 
    35 => "10111110001111100111100000011000", 
    36 => "00111101100111001010100110011111", 
    37 => "10111101110110110001101011110100", 
    38 => "00111101011110100111111100000111", 
    39 => "00111101100101011000100110010010", 
    40 => "10111101100111000100100101000010", 
    41 => "10111101100110101110101010011101", 
    42 => "00111101100011100001011001010001", 
    43 => "10111101001010111011100000010101", 
    44 => "00111101100111111101001101000111", 
    45 => "00111110000101010011101111010001", 
    46 => "10111101000010001011001010001100", 
    47 => "10111011101000011000010111110111", 
    48 => "00111110000010011110000100101010", 
    49 => "00111011010011110000111101110010", 
    50 => "00111101110110100101100011110111", 
    51 => "00111110001110110011000100111100", 
    52 => "00111101100100001110101001000000", 
    53 => "00111101100011001000111100001010", 
    54 => "00111100111011001101111010111011", 
    55 => "00111101100011100010011011010101", 
    56 => "10111101101110100111101111100010", 
    57 => "00111101100001011110101111100000", 
    58 => "10111101011000100111010101110110", 
    59 => "00111101000101101101001101100110", 
    60 => "00111101010101110000001111110011", 
    61 => "00111101111101010010100101111000", 
    62 => "10111110001001010111111001100111", 
    63 => "10111101101010011000101110011010", 
    64 => "10111101100011110000001111000100", 
    65 => "10111101010011010101111111001111", 
    66 => "00111110010001100001100000000101", 
    67 => "00111100010001110111011100100010", 
    68 => "00111100000011110011011001010100", 
    69 => "10111101111010010011110000000100", 
    70 => "00111110000110110000110001000110", 
    71 => "10111100101001001110011011010101", 
    72 => "00111101100110110011100110010010", 
    73 => "00111110001101101000011100101011", 
    74 => "00111101101110101101101111111100", 
    75 => "10111101101001011101000100111101", 
    76 => "00111101011011111100000111000100", 
    77 => "10111101000101111011000110110011", 
    78 => "10111110000100000000000101010000", 
    79 => "10111101010011100001000000101110", 
    80 => "00111110001101101101000001001110", 
    81 => "10111101111111101111101111110100", 
    82 => "10111101111010101110001110100100", 
    83 => "10111011011111001110100101001010", 
    84 => "10111101101001100100011101001111", 
    85 => "00111100001110100000010110110101", 
    86 => "10111110000101110000000101010100", 
    87 => "00111101101111010010000100011011", 
    88 => "00111110001110100110001011101101", 
    89 => "10111101100011110010001111110101", 
    90 => "10111101001110000100001100111101", 
    91 => "00111101101011001101001000001011", 
    92 => "00111110011001111110110010111011", 
    93 => "10111101000111001010100010010010", 
    94 => "00111100010100100100111011101101", 
    95 => "10111100100100110011010010010000", 
    96 => "00111101101110011101100101000000", 
    97 => "00111101111100110110110001011001", 
    98 => "10111101110011010001010110101101", 
    99 => "00111101011110111111111100111010", 
    100 => "00111110000011010111110010110011", 
    101 => "00111101000110001100000011110111", 
    102 => "10111101100110100011010011110010", 
    103 => "00111101100111111111111101010010", 
    104 => "10111100101000111011101111000111", 
    105 => "10111101001111101010101000101010", 
    106 => "10111100011011111000000001010110", 
    107 => "00111100101101000010110111001111", 
    108 => "00111101111100001110100010000110", 
    109 => "00111101011010101011101101111011", 
    110 => "10111101111110011010100111011010", 
    111 => "00111101110010101110011111110000", 
    112 => "00111101100101111000001110011101", 
    113 => "10111100100111100001011111100011", 
    114 => "10111101111011111000010110010100", 
    115 => "00111011111001000111101111101011", 
    116 => "10111101101000000101111110101111", 
    117 => "10111110001100100011111101101000", 
    118 => "00111101010110000100011000101101", 
    119 => "00111101100000000100100010111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_2_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_2_2 is
    component inference_conv2d_f3_3_2_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_2_2_rom_U :  component inference_conv2d_f3_3_2_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


