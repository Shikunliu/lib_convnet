-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100100010101100111000101", 
    1 => "00111101011010111000110011111100", 
    2 => "10111110000011110011110011110111", 
    3 => "10111100011000100000000111101000", 
    4 => "00111101010001110101001100101011", 
    5 => "10111101100000111001110000000001", 
    6 => "10111101110110110100110000111100", 
    7 => "10111110000001100001111011010110", 
    8 => "00111101101010000111010001111000", 
    9 => "00111101001100010101010000011011", 
    10 => "10111110001110100001111111010001", 
    11 => "00111101001100100100001110110101", 
    12 => "00111011001100100010101010110101", 
    13 => "10111101100110110010000000100100", 
    14 => "00111110010010010111100111100001", 
    15 => "00111110010011011011110000100011", 
    16 => "10111101101110100001100111001010", 
    17 => "00111101000111100111100001110110", 
    18 => "10111100001010110010111111000100", 
    19 => "00111101110001100100010111100101", 
    20 => "10111101100011010001010111001000", 
    21 => "10111110000010001101011010010001", 
    22 => "00111011110011100001010100100001", 
    23 => "00111101111111000100111000101111", 
    24 => "00111101001001110001011001011010", 
    25 => "10111110001011111011101111011000", 
    26 => "00111101010000001110101011111100", 
    27 => "00111100100010011100001100101101", 
    28 => "10111101011111110010111100100000", 
    29 => "10111101011001010111000111000100", 
    30 => "10111101110101100110011010101010", 
    31 => "10111101000011110000111010101100", 
    32 => "00111101010100100010101010100101", 
    33 => "00111101110101101010110101110001", 
    34 => "10111100011100011001101000001100", 
    35 => "10111110001000100100000100111110", 
    36 => "10111110001010100001011001100001", 
    37 => "00111110010110111001100011001000", 
    38 => "00111101110000010100100011100011", 
    39 => "10111110000100101111110001101001", 
    40 => "10111110000101000100000111111111", 
    41 => "10111110010011101000101010110101", 
    42 => "00111101011100000000011010101001", 
    43 => "00111110000010011100000000100011", 
    44 => "10111101100010001110110010010110", 
    45 => "10111101010110101111101001010111", 
    46 => "00111101101110001110100001110001", 
    47 => "00111101110011110110110101110110", 
    48 => "10111100011011101101100011111100", 
    49 => "10111101100110001001011001001010", 
    50 => "00111101101100101010101110000100", 
    51 => "10111100111111100100011011111000", 
    52 => "10111110001101000011100011010010", 
    53 => "10111101000010100101110101101100", 
    54 => "00111100000101100100000001101001", 
    55 => "10111101010111011010011000000011", 
    56 => "00111101100110100111011010010110", 
    57 => "00111101010001111110100001000111", 
    58 => "00111101001110101100001001110100", 
    59 => "10111110000100010001000111110001", 
    60 => "10111000101000110010101011101011", 
    61 => "10111100110101000100101101000110", 
    62 => "10111011110110100001100001001111", 
    63 => "00111101000111001101001111100001", 
    64 => "10111101011100000011100011100011", 
    65 => "00111101100010001111001111011111", 
    66 => "10111110010001100001011000101111", 
    67 => "10111100100101101111000101001001", 
    68 => "00111101011100011101101101000100", 
    69 => "00111110001010111001101000010111", 
    70 => "00111101100101100111010000010101", 
    71 => "10111100100111000000111111001011", 
    72 => "10111101100011110000101011011000", 
    73 => "00111101101001111111110011010100", 
    74 => "10111101101011100110110111000100", 
    75 => "00111101011111100100100000111010", 
    76 => "10111101101101000010110111001111", 
    77 => "00111101110000010000000101101101", 
    78 => "10111101100010101111011010010001", 
    79 => "00111101100010101101010010001010", 
    80 => "10111101100001010110111111100001", 
    81 => "10111101111111101101010100101000", 
    82 => "10111101100101001001011011010011", 
    83 => "00111011010001100100001111110010", 
    84 => "10111101000100100100010000100000", 
    85 => "00111011000101110101001111101111", 
    86 => "00111101110110000011001011111101", 
    87 => "00111100111001010101101101101111", 
    88 => "00111101110111111101111001110010", 
    89 => "10111101010011101011001100111100", 
    90 => "00111101100100100001011011000110", 
    91 => "00111100100100101000011010110110", 
    92 => "00111101000100011011101010101000", 
    93 => "00111101010100011101000110011111", 
    94 => "00111101100111011111100010001001", 
    95 => "00111110000111000100011100011011", 
    96 => "00111100000111000101000101011010", 
    97 => "10111101101001010000100001001000", 
    98 => "10111101111001001100111110001101", 
    99 => "10111101110100000000001011100010", 
    100 => "10111101100000110111000110100101", 
    101 => "00111101110111001101111111110000", 
    102 => "10111101100011100100100110110010", 
    103 => "10111101000111011100111110100100", 
    104 => "00111100010000100001110011011011", 
    105 => "00111101010000110110000000100010", 
    106 => "10111101111101111111011110111110", 
    107 => "10111101101111000111000011001010", 
    108 => "00111110001000000010111111111001", 
    109 => "00111100000101011111010011011111", 
    110 => "00111110000000101011000011101010", 
    111 => "00111001100010011100110111001010", 
    112 => "10111110001001111011110111001111", 
    113 => "10111101001010010101001111101100", 
    114 => "10111100101110010111011100011010", 
    115 => "00111110001000001100101111110011", 
    116 => "10111100010110001010100101111010", 
    117 => "10111101100000000001110100110100", 
    118 => "10111100111111110110110010010010", 
    119 => "00111101010010111001111101010110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_13 is
    component inference_conv2d_f3_2_4_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_13_rom_U :  component inference_conv2d_f3_2_4_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


