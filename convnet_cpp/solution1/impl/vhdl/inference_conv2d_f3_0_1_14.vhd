-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011000100001011110001111", 
    1 => "10111100001111111001010001101011", 
    2 => "10111110000000011011001101101100", 
    3 => "00111101011010101100111110000010", 
    4 => "00111101110001001001000100000001", 
    5 => "00111101110001111001000000111111", 
    6 => "00111101010101101110011110100011", 
    7 => "00111110010001100001101110110000", 
    8 => "10111101110010110000011011111010", 
    9 => "00111101001001100101000010010111", 
    10 => "00111101110000000001101000001111", 
    11 => "10111110001010101100111111111010", 
    12 => "00111101100101011000110100001000", 
    13 => "10111101111110100110000001001110", 
    14 => "00111101011100011101100000011111", 
    15 => "00111101100010011100010101010011", 
    16 => "10111101100001010111000000111111", 
    17 => "00111100101100101110011101111110", 
    18 => "00111100100001000000111001001101", 
    19 => "00111101000010001010000011101110", 
    20 => "00111101111111110111111110001101", 
    21 => "00111101000111000101110000000111", 
    22 => "00111100101001111000011010001100", 
    23 => "10111110000011100001101000111111", 
    24 => "00111110001101110110110011001110", 
    25 => "10111101011111101100010101101101", 
    26 => "00111101100110000110011011010111", 
    27 => "00111110001011001000010100111100", 
    28 => "10111101111010111001001101000111", 
    29 => "10111110001001100101111111011001", 
    30 => "00111101101100000100010110000101", 
    31 => "00111110011001101011100011111010", 
    32 => "10111101111001111111100110010100", 
    33 => "10111110010101001001101100100000", 
    34 => "10111110000101011111110001111110", 
    35 => "00111100100010111011010111100001", 
    36 => "00111100010111001000101001000101", 
    37 => "00111110001100010001011011101100", 
    38 => "10111100000011011000100110100001", 
    39 => "00111101011100110101100111111111", 
    40 => "00111101010001110011000010010001", 
    41 => "00111101011011101010100000011111", 
    42 => "10111101011100110011000011100101", 
    43 => "10111101110010101010010111000110", 
    44 => "00111101100010001011101001000001", 
    45 => "10111101110110111101110101110110", 
    46 => "10111100110010101100011010011000", 
    47 => "00111101110000011011010010010011", 
    48 => "10111101001100100011101011100110", 
    49 => "00111110001101111101110101000100", 
    50 => "10111101100110011110010010100000", 
    51 => "00111110000010010100110011001011", 
    52 => "10111101101100000001011111101000", 
    53 => "00111100101110101110001011110101", 
    54 => "10111101001110110110101001101111", 
    55 => "10111110000000011000100100110111", 
    56 => "10111110000111111111110100011110", 
    57 => "00111101010010000111000011001101", 
    58 => "10111110000101111001111011100000", 
    59 => "00111110100100110100110111110000", 
    60 => "10111101100111011100100101100111", 
    61 => "00111011011010000111010011110100", 
    62 => "10111101000000100111010011010101", 
    63 => "10111100101101100011101101011011", 
    64 => "00111110000101010000001100110010", 
    65 => "10111110000111101100000001110010", 
    66 => "10111101010011111000110001001010", 
    67 => "10111101010000101010100001010001", 
    68 => "00111100111001001110010001010000", 
    69 => "00111101101011001101000111100011", 
    70 => "00111101000100001000111111010000", 
    71 => "10111110001010011111011011101100", 
    72 => "10111100110010110011110100010101", 
    73 => "10111101101010111101111010101011", 
    74 => "00111101100101011110100110111001", 
    75 => "10111101110000010101011111010100", 
    76 => "10111101011101011011110011001011", 
    77 => "10111100101011110001010011110110", 
    78 => "10111010001001001001100111111110", 
    79 => "10111010101111001010111101001000", 
    80 => "10111101110000110100001111101101", 
    81 => "10111011110000010100000111111111", 
    82 => "00111100001110001100111101010100", 
    83 => "00111101111101111101000111111110", 
    84 => "00111101110110010000001010011011", 
    85 => "00111100000010100101010100001110", 
    86 => "10111100101000001000100111100011", 
    87 => "00111101101110100000101000111000", 
    88 => "10111100100000001110011000001111", 
    89 => "10111101010110011000001110010100", 
    90 => "10111101111000111100110110011010", 
    91 => "00111101010011111001111010100100", 
    92 => "10111101100011000000001110111100", 
    93 => "00111101001101010011000011101010", 
    94 => "00111101101101011100010011101011", 
    95 => "00111101100001011100001110000001", 
    96 => "10111100100100011010100101110110", 
    97 => "10111101100101010001100000101011", 
    98 => "00111110010011001000000001000001", 
    99 => "10111100100000110100010100101111", 
    100 => "00111101001100100000100100110010", 
    101 => "00111101001110110111110001011101", 
    102 => "10111101111110101101011101010010", 
    103 => "00111101110010101101111111111000", 
    104 => "00111100111000110100100101111011", 
    105 => "00111101101001011011100000101110", 
    106 => "10111101000010111101101100000000", 
    107 => "10111110001000111011110101011010", 
    108 => "10111100100001000000000101001100", 
    109 => "10111101101101101011111001000101", 
    110 => "10111101010110110110111111100011", 
    111 => "00111101000110011111101000010010", 
    112 => "10111101011100000001101001111010", 
    113 => "00111101000001101011011001101000", 
    114 => "00111110000101100011110010111000", 
    115 => "10111110000010100010010000000011", 
    116 => "00111110010011010100110001110111", 
    117 => "00111110000001010101110110100010", 
    118 => "00111100101100001001101011010010", 
    119 => "10111101111010010011000110000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_14 is
    component inference_conv2d_f3_0_1_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_14_rom_U :  component inference_conv2d_f3_0_1_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


