-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_4_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_4_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001100110010001001110", 
    1 => "00111110010010000111101001001010", 
    2 => "00111110000111001111101010101101", 
    3 => "00111110000001011111110100000101", 
    4 => "10111101001000100010010111100000", 
    5 => "00111101101110000110000001100100", 
    6 => "10111101101010000100000100100101", 
    7 => "00111011011110000010000111100101", 
    8 => "00111101011011110110111000010111", 
    9 => "00111100011000111010100100011101", 
    10 => "00111101101000001001111010110100", 
    11 => "10111101100101010011000000111011", 
    12 => "10111101111100011011101000111101", 
    13 => "00111101010100000101001101001111", 
    14 => "00111101101101100000010001011100", 
    15 => "10111011111010111110111101010010", 
    16 => "00111110001110001011000110011010", 
    17 => "00111101111001101001110111111001", 
    18 => "10111100111111001100000111110010", 
    19 => "00111101010010001010001010000001", 
    20 => "00111101101111011011111111110111", 
    21 => "10111100100011100100000011010110", 
    22 => "10111101111011101000001010010101", 
    23 => "00111110000111000101110001010111", 
    24 => "00111110000111111110100000100101", 
    25 => "00111101000111110100111110100001", 
    26 => "10111101110010101110110011011110", 
    27 => "10111101101001111101100000000110", 
    28 => "00111101001111101110010001011100", 
    29 => "00111101101101110110011010010001", 
    30 => "10111101110010100001001111010000", 
    31 => "00111101011100110110111100101110", 
    32 => "10111101111010100011011110101100", 
    33 => "00111101110001001100000110011011", 
    34 => "00111011001100000000010000111111", 
    35 => "10111101011011010111000110001000", 
    36 => "00111101010000110110111010110101", 
    37 => "00111101111100011110001000010101", 
    38 => "10111101100000000000010000110010", 
    39 => "10111101010100001011010001001101", 
    40 => "10111101000011110000100001111100", 
    41 => "00111101110100001001001010001010", 
    42 => "00111100011111110100110101010011", 
    43 => "10111101000001001001000001010011", 
    44 => "00111110000011000001101011001110", 
    45 => "00111101001110110011001111101000", 
    46 => "00111101100100011000000110101011", 
    47 => "10111101010101001110000101101110", 
    48 => "10111101010010001101111101101101", 
    49 => "10111101010111010101111010000000", 
    50 => "00111110001001101100110111110010", 
    51 => "10111110001000011110110111100001", 
    52 => "00111101001001110110100111010001", 
    53 => "00111101000001001100100110101110", 
    54 => "10111110000000001110000010101000", 
    55 => "10111101101111111010100100101110", 
    56 => "10111101111100011110010111000001", 
    57 => "10111101101101100001100111001101", 
    58 => "00111101101001000000011001000111", 
    59 => "00111100110000000000100011001111", 
    60 => "00111101011001100100101110101001", 
    61 => "00111101000110000010000000000010", 
    62 => "10111110001111000000001000101010", 
    63 => "10111100110000110100010010001110", 
    64 => "10111100100000101000011110011010", 
    65 => "10111101001111000100000001110011", 
    66 => "10111110000110001001101010001001", 
    67 => "00111110010100100111100001001011", 
    68 => "00111011110011001000111101010000", 
    69 => "10111100111000011101110011111111", 
    70 => "00111101001110111110101100110011", 
    71 => "10111101101000100001100110001101", 
    72 => "10111101001001001110010001010000", 
    73 => "00111101111001000000001010001110", 
    74 => "10111101110000101011101111101101", 
    75 => "00111110001111101101011110000100", 
    76 => "00111101110000100111100010001110", 
    77 => "10111101000001010101100000101111", 
    78 => "00111101111100100000100111101110", 
    79 => "00111100111110111000111111111001", 
    80 => "00111101101000010111001110011110", 
    81 => "10111101100011001100011111101101", 
    82 => "00111101100010100101101000011110", 
    83 => "00111110001010011100010110100100", 
    84 => "00111101111101010110000100001011", 
    85 => "10111101011000101101001110000100", 
    86 => "10111101001010111011001101111000", 
    87 => "00111101100101011010001011110010", 
    88 => "00111101110001001000000101100010", 
    89 => "00111101100011001011100011101110", 
    90 => "00111110000111101101011011111110", 
    91 => "00111100000111011111110000011111", 
    92 => "10111101101001100111110101010000", 
    93 => "00111101000000010010001100110001", 
    94 => "00111101010011100111110011101011", 
    95 => "00111101100110110110110001101101", 
    96 => "10111101011110101001000100101011", 
    97 => "10111101001000000001111111000110", 
    98 => "00111101101011010101100011100100", 
    99 => "10111011110010110111100010100100", 
    100 => "10111101101100100000011110010010", 
    101 => "00111101010111110101101101111010", 
    102 => "00111101101100110001001100111000", 
    103 => "00111101001011001001111101100110", 
    104 => "00111101100000000101010101110101", 
    105 => "00111110000010100001110000100110", 
    106 => "00111110000110000110100000110100", 
    107 => "10111101100101011111101100010100", 
    108 => "00111100111010001011110001001100", 
    109 => "00111101010000001011111101011101", 
    110 => "00111101001100011111101100100101", 
    111 => "10111101000111111000001101101110", 
    112 => "10111101101000011001011001111011", 
    113 => "10111101001000100010001111100010", 
    114 => "10111101100000111010001010000010", 
    115 => "00111100111100101110001010101011", 
    116 => "10111101111000101001001100001000", 
    117 => "00111101000010101000111100111011", 
    118 => "10111101001101101100011100100010", 
    119 => "10111101101101110111011010101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_4_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_4_13 is
    component inference_conv2d_f3_0_4_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_4_13_rom_U :  component inference_conv2d_f3_0_4_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


