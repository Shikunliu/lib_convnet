-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100001001000000100010001000", 
    1 => "10111100111001011110110011111010", 
    2 => "00111101010000110000010110111111", 
    3 => "10111101110001010010101010101100", 
    4 => "10111101111001011100001101011001", 
    5 => "00111110000010010010011100001011", 
    6 => "00111110000000100100100111100100", 
    7 => "00111110000100110001101001001100", 
    8 => "00111101011101000101011011001111", 
    9 => "10111101010101110110000001010100", 
    10 => "00111100011100011001110101100111", 
    11 => "10111101101101011110111110100110", 
    12 => "10111100011010011110001101011110", 
    13 => "10111101000001110000010111100011", 
    14 => "00111101001101001000111111110101", 
    15 => "00111101100110111000011101000101", 
    16 => "00111101010100001011111100000000", 
    17 => "10111101111001000001100010010011", 
    18 => "10111110000100100000111011101001", 
    19 => "10111101100100111001000000001101", 
    20 => "00111101001110111101101100001101", 
    21 => "10111101011110100001001001100101", 
    22 => "10111101111001010111001110101000", 
    23 => "10111101001110001010010001110001", 
    24 => "00111011110101010101000011010101", 
    25 => "10111011011000000110110010010010", 
    26 => "00111101110111100010001011100110", 
    27 => "00111101101110010111100011110000", 
    28 => "10111101001010110010110101110110", 
    29 => "00111101000000010111001101001101", 
    30 => "10111101010010101000001101111100", 
    31 => "00111101010010110101101100101101", 
    32 => "00111101101110110110000100110101", 
    33 => "10111100011001100110100000010100", 
    34 => "10111101110111111010010011000110", 
    35 => "10111010111100100001001000000001", 
    36 => "00111110000110100111010001111110", 
    37 => "00111101100000100101110010101001", 
    38 => "10111101011111010001011011000111", 
    39 => "10111101101111001110000000110011", 
    40 => "00111101110000010010001010111000", 
    41 => "00111101100010001111010001011000", 
    42 => "10111101001011000110000010110001", 
    43 => "10111101010100101011011110101110", 
    44 => "00111100010011001000000011100010", 
    45 => "00111100110100100100001000100010", 
    46 => "00111101100111111111100111000011", 
    47 => "00111100110110011001101011011100", 
    48 => "00111101110100110111011011010101", 
    49 => "10111110001100111001111000101000", 
    50 => "10111011101001101011010101100001", 
    51 => "00111101111111101110000110111101", 
    52 => "00111101110111111011001101110100", 
    53 => "00111011111001101100110010101000", 
    54 => "00111100010000001000001101111110", 
    55 => "10111100010111111100010010001100", 
    56 => "00111011110011010010000110110001", 
    57 => "10111101101100111000101011000010", 
    58 => "00111110000110101100111011101110", 
    59 => "00111100111000100010001000110100", 
    60 => "10111101110000011011000110010110", 
    61 => "10111101001101010000001000001011", 
    62 => "10111101010011101111010000100100", 
    63 => "00111101100001001100001101100100", 
    64 => "00111100111011010110111100000100", 
    65 => "10111100101100111110001000011010", 
    66 => "00111110000000000100010001101011", 
    67 => "00111101101001110010100110011000", 
    68 => "00111101010001010100011001110110", 
    69 => "00111100101001111111101010111011", 
    70 => "10111110010101010111010010110100", 
    71 => "00111101110101101110110101100111", 
    72 => "00111101101000001001011100011010", 
    73 => "00111101001111011110010110101001", 
    74 => "00111101000001110000100111000101", 
    75 => "10111101010111010010001100001100", 
    76 => "00111100001011011000000110101110", 
    77 => "00111101000011100000111010000001", 
    78 => "10111101101101100100000111000001", 
    79 => "10111110011011011111010101001001", 
    80 => "10111110001011101010011111001110", 
    81 => "10111101011100100001010101000001", 
    82 => "10111101100110011101010001011111", 
    83 => "10111101110111001001111101110011", 
    84 => "00111101101101000100111000110110", 
    85 => "00111101000001011001110010001101", 
    86 => "00111100111101100111011100100000", 
    87 => "00111110001100001011100111011100", 
    88 => "10111101011101000001010000011111", 
    89 => "00111101101001111011111100101100", 
    90 => "10111101000000000011100100100110", 
    91 => "00111101111000100111101001100011", 
    92 => "10111101010001101110110000011000", 
    93 => "00111101011111100000010001100010", 
    94 => "10111100001111011100101100111101", 
    95 => "00111100010001111010011101011110", 
    96 => "10111110000001001100000011011111", 
    97 => "10111101000010001000011001100111", 
    98 => "10111101111101010011001101101110", 
    99 => "00111100000000100001111101001010", 
    100 => "10111100101010101101100111001000", 
    101 => "10111101100011011010100111100100", 
    102 => "00111110001101100000001001000011", 
    103 => "00111101111010001001001000100101", 
    104 => "10111101011100100110010000110110", 
    105 => "00111101100101010100100111000100", 
    106 => "00111101011101101111011111001001", 
    107 => "10111110001011010000111000010011", 
    108 => "00111101001101011100001010101010", 
    109 => "00111101010111011111011001110000", 
    110 => "00111110001100011100001101101001", 
    111 => "10111101101010110000101111011010", 
    112 => "00111101101011100010011010000100", 
    113 => "00111101110111101010100100011110", 
    114 => "10111101110010000101101001101010", 
    115 => "00111110001010101001110001010110", 
    116 => "00111110001010111101000010011110", 
    117 => "00111101101000010101101111111000", 
    118 => "00111011111010110101001011110101", 
    119 => "10111110001011011101111100000001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_7 is
    component inference_conv2d_f3_0_2_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_7_rom_U :  component inference_conv2d_f3_0_2_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


