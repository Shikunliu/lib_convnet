-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_67_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_67_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000111110110100110001000", 
    1 => "10111101110011000010011011101010", 
    2 => "10111100101110000000101100111111", 
    3 => "00111100001100000001110010010011", 
    4 => "00111100000110000100101101100110", 
    5 => "00111101000000001000100001010001", 
    6 => "10111011110110001101010111110000", 
    7 => "00111100011000000000111110100000", 
    8 => "00111100100000101001111100010111", 
    9 => "00111100011001000000101101000010", 
    10 => "00111101011011100001011001011110", 
    11 => "00111110001110001111011110011000", 
    12 => "10111110010101111011010001011111", 
    13 => "00111101100000110000110101100110", 
    14 => "10111100100101110111011110000000", 
    15 => "10111101101111001110000110000010", 
    16 => "00111100100000000001100010001001", 
    17 => "10111101100100110011101100000011", 
    18 => "10111100110001101110110101011010", 
    19 => "10111110001110111001010110100011", 
    20 => "00111110001001110010010011111011", 
    21 => "10111101110100110111001110110000", 
    22 => "10111101001011000001001011001000", 
    23 => "10111101111010011100100010000110", 
    24 => "10111101101001101101010111000010", 
    25 => "10111100000101011110010010101110", 
    26 => "10111101011100111100001110110010", 
    27 => "00111101101111110111100110010011", 
    28 => "00111101101001011101100110000110", 
    29 => "10111110000010000110111111001110", 
    30 => "00111101010110011001001110100000", 
    31 => "00111110001100010011010100010001", 
    32 => "10111101000100000011001010011000", 
    33 => "10111110011111100110110101011001", 
    34 => "00111101100010000000000110100111", 
    35 => "10111100100010000001100111100000", 
    36 => "10111100110010100110110101110111", 
    37 => "00111110000001011001100010011110", 
    38 => "10111110000001110001100100101111", 
    39 => "00111101000110000110001100111001", 
    40 => "00111110000111000111110001010010", 
    41 => "00111101110001111100111000101011", 
    42 => "10111101000110111101011010001011", 
    43 => "10111011101100010011001001101000", 
    44 => "00111110000011001101011011000011", 
    45 => "00111101100111010010101110010111", 
    46 => "00111110000011010010010001011011", 
    47 => "00111110000110000110111001111110", 
    48 => "10111110000101000110100100001110", 
    49 => "10111101101100010001010100001001", 
    50 => "00111110001000111010100111110100", 
    51 => "00111100111111101011000001110101", 
    52 => "00111100011100110011110101111010", 
    53 => "00111101011111010111001000110110", 
    54 => "10111101010001101101111110111000", 
    55 => "10111101111110011000011111000110", 
    56 => "10111101110111011000111100001100", 
    57 => "00111010010101100001101001101101", 
    58 => "00111110000011101000001111100100", 
    59 => "00111100001101000101011111110110", 
    60 => "00111110000011011001101000001111", 
    61 => "10111101100011111010010000011000", 
    62 => "00111011101111100010000110111001", 
    63 => "10111100111111010111011111000101", 
    64 => "00111101101010010011100101010111", 
    65 => "00111100001010001100100101001101", 
    66 => "10111101100001000000001111111001", 
    67 => "00111100111110000011001110000011", 
    68 => "00111110000000101010110100111111", 
    69 => "10111101110010100010011100000000", 
    70 => "10111101001000011100010011000110", 
    71 => "00111101111111001100010100110011", 
    72 => "00111101010111101011010000100000", 
    73 => "10111101101111001000000000110100", 
    74 => "10111010100101011001100101011010", 
    75 => "00111101001010000111001010010101", 
    76 => "00111101101010100011110011011101", 
    77 => "00111011101110100011001010010110", 
    78 => "10111011001001110000100011101110", 
    79 => "00111101001110010000010100111010", 
    80 => "00111011001111011011011110000110", 
    81 => "10111101111010011011000011101110", 
    82 => "00111110000100011111111001100101", 
    83 => "10111110000111111011101110010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_67 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_67 is
    component inference_mult_1_120_120_84_s_W4_67_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_67_rom_U :  component inference_mult_1_120_120_84_s_W4_67_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


