-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101010010011001011001010", 
    1 => "10111101100100010100101100111111", 
    2 => "10111100000100111000100100111111", 
    3 => "00111110000010011010001100001010", 
    4 => "00111101011100011000111000110010", 
    5 => "00111101111010011000000100111000", 
    6 => "00111011111011101101101001101001", 
    7 => "10111101110101000110110111000110", 
    8 => "10111101100000011100001011110001", 
    9 => "00111101111000111100001100011110", 
    10 => "10111101101000000010001100111011", 
    11 => "00111110000010110110100101010101", 
    12 => "00111110001001010001100101111010", 
    13 => "00111110001101000110011100111000", 
    14 => "10111110001000011110110001001110", 
    15 => "00111100011000111101001010100011", 
    16 => "10111100010101011110110101110010", 
    17 => "00111101001101011001011100100110", 
    18 => "00111101010000010100110011010001", 
    19 => "10111110000010011101111111011011", 
    20 => "10111100001100111101000110111111", 
    21 => "00111100101000100100011101010011", 
    22 => "10111101101111010111010010101101", 
    23 => "00111110001111111110111100111001", 
    24 => "00111101110100111100010101111010", 
    25 => "10111101101001010111001111011101", 
    26 => "00111101000000101101110000000011", 
    27 => "10111101111010000000011100110101", 
    28 => "00111100111011100111010111111111", 
    29 => "10111101100100000011010100011100", 
    30 => "10111101100000011001001110011001", 
    31 => "10111110000001111011000100111010", 
    32 => "10111100001111110100111001011111", 
    33 => "10111101110111001011101111000011", 
    34 => "00111100110110110001011000000110", 
    35 => "00111010010000001000000000011111", 
    36 => "10111101101011011110100000010011", 
    37 => "00111110010000010100101001001101", 
    38 => "10111101011010000111000011001101", 
    39 => "10111011100001011010001011000010", 
    40 => "00111110001001000100110000111000", 
    41 => "00111101101111001100010010011111", 
    42 => "00111101000101100111110011001001", 
    43 => "10111101100101000001000000100011", 
    44 => "00111101110001011101111000001000", 
    45 => "00111110010001011011000010111100", 
    46 => "10111011001100000001100001100001", 
    47 => "00111101011010101010111011001011", 
    48 => "10111101110111111010100001110010", 
    49 => "00111101100011100000010010110011", 
    50 => "10111110000001110010001010011111", 
    51 => "10111100000111100100001100101100", 
    52 => "00111101001111010011101011011001", 
    53 => "10111101111101011111010111110001", 
    54 => "10111101101011110110001011000100", 
    55 => "00111100101111000011000001101000", 
    56 => "00111011111100101010010100100100", 
    57 => "10111110000100000111101101111000", 
    58 => "10111101111011101001010111111011", 
    59 => "00111101001000010100001101100001", 
    60 => "10111101100101110110100010101010", 
    61 => "10111100010110101000111001010110", 
    62 => "00111101111111011001011011101010", 
    63 => "00111101101011111100101011010110", 
    64 => "10111101011100111010101001101100", 
    65 => "10111101001000001100010110001101", 
    66 => "00111101000001111110100011001101", 
    67 => "00111101100011001001111010000001", 
    68 => "00111110000111011101101110011000", 
    69 => "00111100010110111000111111011110", 
    70 => "10111101110010010000111111111001", 
    71 => "10111101100010111010011111010100", 
    72 => "00111101001000110101011110111110", 
    73 => "00111101000101010000010100010101", 
    74 => "00111110001100011011010010111011", 
    75 => "00111001001011001101011111010100", 
    76 => "10111110000111110001110111000101", 
    77 => "00111101110010001100101111011111", 
    78 => "10111010100111001000000101010110", 
    79 => "10111110000001101010101101011000", 
    80 => "10111110001011000010100001110000", 
    81 => "00111100001000100110000010001000", 
    82 => "10111110011100111110011101001011", 
    83 => "00111101100100011101111111010100", 
    84 => "10111100100001111111110011101111", 
    85 => "00111100100101111001001110011010", 
    86 => "00111101001100111101011101101000", 
    87 => "00111101011000111101000011011010", 
    88 => "10111101101111000010101001111011", 
    89 => "00111110001011010101011011110011", 
    90 => "10111010011111011001010100111001", 
    91 => "10111110010110001010110111101111", 
    92 => "10111101101101011000001001111110", 
    93 => "00111100101010010010111100111001", 
    94 => "00111101100000010100000011011101", 
    95 => "10111110010011101011010010100110", 
    96 => "00111100101101000000101000101000", 
    97 => "00111100100100111010000011000111", 
    98 => "00111110001000010011100000110111", 
    99 => "00111101101001010000100011000001", 
    100 => "10111011000110110110101110101100", 
    101 => "10111100010011100110000100100010", 
    102 => "00111101101010000101011101010010", 
    103 => "00111011110000011111110011111011", 
    104 => "00111101011001110111100100100000", 
    105 => "10111101110011000100100101000010", 
    106 => "00111110001000101000011000101111", 
    107 => "10111101011110010001111010110101", 
    108 => "00111101100010111100001001001110", 
    109 => "10111101110110111111101101011001", 
    110 => "10111100010001110111110101101101", 
    111 => "00111101100000011100110101101101", 
    112 => "00111101001001000110011110001001", 
    113 => "00111110000100101101111100001101", 
    114 => "00111101010110100100011000010111", 
    115 => "00111110001000001100110000110110", 
    116 => "00111100101100000100100010011101", 
    117 => "00111101010010001101010100100110", 
    118 => "10111011010111000111011100001111", 
    119 => "00111101110101101100011110101000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_10 is
    component inference_conv2d_f3_1_0_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_10_rom_U :  component inference_conv2d_f3_1_0_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


