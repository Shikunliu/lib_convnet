-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_55_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_55_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100010111011010000100110000", 
    1 => "00111101101000011011111110110001", 
    2 => "00111100011100111000100111010000", 
    3 => "00111101110111011010000001011010", 
    4 => "10111101110110100101000100011010", 
    5 => "10111101010110010011001010000110", 
    6 => "00111100110110010000000111111010", 
    7 => "10111110000001110010000010000110", 
    8 => "10111110100000001011001111010101", 
    9 => "10111101101100011101101001000101", 
    10 => "00111101000100011110001110001101", 
    11 => "00111110001100100001011111010011", 
    12 => "10111110001001101010011001011101", 
    13 => "10111101001000010100110101110010", 
    14 => "00111100010101110010111100100110", 
    15 => "10111100011100101001011011110110", 
    16 => "10111110000111101111111011010110", 
    17 => "00111110000110000110010110010101", 
    18 => "00111101000100011001010010011000", 
    19 => "10111101010101000000101100110101", 
    20 => "10111110001111000010101100001111", 
    21 => "10111110000010010000110101011010", 
    22 => "10111101100000001010000010110010", 
    23 => "10111100111110101110111001001000", 
    24 => "00111110000001000011010001011101", 
    25 => "00111100000101101111010111000110", 
    26 => "00111100011101011000010011100111", 
    27 => "00111110000000000101100010011011", 
    28 => "10111110001111000110101101001000", 
    29 => "10111101010100001111101000111110", 
    30 => "00111100101101011001101100100010", 
    31 => "00111100001110010001010011110101", 
    32 => "10111100111111111101101110111000", 
    33 => "00111101110001000001100101000010", 
    34 => "00111101001100101101000011011000", 
    35 => "10111101000010010010011010000101", 
    36 => "10111101110101001100111111010001", 
    37 => "10111100111000101101011100110000", 
    38 => "10111110001001110101110111011101", 
    39 => "10111101011101100001011111101010", 
    40 => "00111101010010011011110111010100", 
    41 => "10111101100101011110010000101011", 
    42 => "10111101110101011111011110000011", 
    43 => "00111100101001100010011110110010", 
    44 => "10111101101011011101011111111010", 
    45 => "10111101010111100010110101111101", 
    46 => "00111101000001001110000101111100", 
    47 => "00111101010001101111001011001110", 
    48 => "00111100011100111001010110001110", 
    49 => "10111100100001011000010001101111", 
    50 => "10111100000011110011011100010101", 
    51 => "10111101111010010101111000011000", 
    52 => "10111101011101101000100010100011", 
    53 => "00111100110110111101001011000100", 
    54 => "10111101100011110000110010000101", 
    55 => "00111101011100011001001011001111", 
    56 => "00111101010111011011100011100011", 
    57 => "10111110001010000011111110010010", 
    58 => "00111101110000110010000111001011", 
    59 => "00111101000101100101010101011100", 
    60 => "10111101100110010001101000100101", 
    61 => "00111110000111010111101011011101", 
    62 => "10111100110000001000111100111100", 
    63 => "00111010000010011111001100101011", 
    64 => "10111100111101111101001000110100", 
    65 => "10111101001100001000100110111011", 
    66 => "10111110000010000011000100100111", 
    67 => "00111101111000100010101000101100", 
    68 => "00111101110101110101010100110111", 
    69 => "00111110010100001110100101001111", 
    70 => "00111100110100101110110001101100", 
    71 => "10111110001110001100000100010010", 
    72 => "00111100101101101010001001010011", 
    73 => "10111110000001110001011111011111", 
    74 => "10111101110000001111010101010000", 
    75 => "10111101010110101111100100110000", 
    76 => "00111101011101001010111111110000", 
    77 => "10111101110111010111101110100110", 
    78 => "00111110000100100010111000011011", 
    79 => "10111101101110000010110010001010", 
    80 => "00111101010110100111101100100110", 
    81 => "10111100001100101110001111101101", 
    82 => "00111100001110101010001000101000", 
    83 => "00111101101101011100011101111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_55 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_55 is
    component inference_mult_1_120_120_84_s_W4_55_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_55_rom_U :  component inference_mult_1_120_120_84_s_W4_55_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


