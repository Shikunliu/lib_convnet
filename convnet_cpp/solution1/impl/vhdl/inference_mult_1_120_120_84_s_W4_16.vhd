-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_16_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_16_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111010000101000010000001", 
    1 => "10111101101110000000100001101010", 
    2 => "00111100000000001110011101000110", 
    3 => "00111100100100011111100111111110", 
    4 => "00111100101011010111010011100011", 
    5 => "10111100101101000011101000101111", 
    6 => "00111100111101000011110011101001", 
    7 => "10111101110100110110011110100001", 
    8 => "00111100111110010011111101010001", 
    9 => "10111101101101010111011101000110", 
    10 => "10111101110001011111001100101001", 
    11 => "00111101110110011101011011110001", 
    12 => "00111101101011011110101010001001", 
    13 => "00111101000100001001110111111000", 
    14 => "00111110000001010101110101011111", 
    15 => "00111011001101110110111110011000", 
    16 => "10111101110010111010111001000111", 
    17 => "10111101101011001110111011100001", 
    18 => "00111100010010110011000000010101", 
    19 => "10111101111010110110000001101011", 
    20 => "10111101011000000110101101100000", 
    21 => "00111100110110010001110101110011", 
    22 => "10111100010001001001111010010110", 
    23 => "00111101110001100110111100011010", 
    24 => "00111100111101011010101011011101", 
    25 => "00111101100110101011111111111101", 
    26 => "10111101000010011100111100000110", 
    27 => "00111100111110000110011110000101", 
    28 => "10111011111000110011111001101001", 
    29 => "00111101010101100011000100010100", 
    30 => "00111110010001000000010110110100", 
    31 => "00111101001110111110101011111101", 
    32 => "10111101110001010000101010001001", 
    33 => "10111101101001001111000110000111", 
    34 => "10111101101111000001110101010010", 
    35 => "10111110010010111111001010110010", 
    36 => "00111101100101101111111010100111", 
    37 => "10111101010000011110010011110111", 
    38 => "10111101100010000000001110010111", 
    39 => "00111110000010011100110000110010", 
    40 => "00111101101111010000100110010001", 
    41 => "00111101011111100000111000111110", 
    42 => "10111110000110101110010010110000", 
    43 => "00111110000111001000001100100011", 
    44 => "00111101111000011100111001101100", 
    45 => "00111101110000001001001101101110", 
    46 => "10111101010110100101100000100000", 
    47 => "00111110000001101001010101010011", 
    48 => "10111110001001110001100111111000", 
    49 => "10111100101100111001001010011111", 
    50 => "10111101111001100000100000000111", 
    51 => "10111100000110111101110001101010", 
    52 => "10111100011100100011011101010101", 
    53 => "00111101000111101011001011011110", 
    54 => "10111110001111010001001000000010", 
    55 => "10111101000011100101000110111000", 
    56 => "10111101100001100001111100100110", 
    57 => "00111110001001011000001011011100", 
    58 => "10111101011100101110000101101001", 
    59 => "10111101110010001111000000001100", 
    60 => "10111101001111100100000001111000", 
    61 => "00111110000010100111111110000000", 
    62 => "00111110001110001010010100000101", 
    63 => "00111101100111010111010011010110", 
    64 => "00111100100110001000001101001111", 
    65 => "00111101000110110101000100101010", 
    66 => "10111110000010010110001101010110", 
    67 => "00111100011010000110100111100001", 
    68 => "00111101100100001011110010111110", 
    69 => "00111100110000110100011100010010", 
    70 => "10111101100101000101011011000010", 
    71 => "00111101111010010000011000000011", 
    72 => "10111110000001110111010111111011", 
    73 => "00111101001110010110100010000111", 
    74 => "00111100001000011101101001010000", 
    75 => "00111011011110101110110100011100", 
    76 => "10111110000001100111101101011111", 
    77 => "00111101010000010000000100000010", 
    78 => "10111101001111011010011100101010", 
    79 => "10111011110111111011110111010110", 
    80 => "10111101110101011111100000001010", 
    81 => "10111100100000100110010010010100", 
    82 => "00111100110000000011001110010111", 
    83 => "00111100001101011011000111111110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_16 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_16 is
    component inference_mult_1_120_120_84_s_W4_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_16_rom_U :  component inference_mult_1_120_120_84_s_W4_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


