-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001001110101011101100", 
    1 => "00111101010110001011110011000101", 
    2 => "00111110010110000100000110101011", 
    3 => "00111101011101101011111111100101", 
    4 => "00111101001100101001011001110000", 
    5 => "00111101001110101111000110001000", 
    6 => "10111101110010000110000101110000", 
    7 => "10111101001111110000110111111101", 
    8 => "10111100110110111011010000100110", 
    9 => "10111101000001000100110110111101", 
    10 => "00111110001100101101111110010011", 
    11 => "00111100110110010011101110100110", 
    12 => "10111100110001010000010100100010", 
    13 => "10111101010001110000101111000011", 
    14 => "10111100110011111010100100100000", 
    15 => "00111100001110100000100111100111", 
    16 => "10111100100011010101000000010101", 
    17 => "10111100100011101111010011000101", 
    18 => "00111101100000011000001010001111", 
    19 => "00111100111011010011000110010001", 
    20 => "00111100101101000101100100000011", 
    21 => "00111101000111110011000100000011", 
    22 => "00111100101010100011110111110111", 
    23 => "10111101111001011111011010111010", 
    24 => "00111110001000000101100010011011", 
    25 => "00111100011110001111100100010000", 
    26 => "00111101001011001100110100000010", 
    27 => "10111101101001011111001011011001", 
    28 => "10111110000010101110101000110001", 
    29 => "10111101000001110101010000011101", 
    30 => "00111101100011000101111000000101", 
    31 => "10111101001110110010001111011101", 
    32 => "00111101000101001111100110100111", 
    33 => "10111110001111001100111000011100", 
    34 => "00111101100101100110000000001110", 
    35 => "10111101100111111101100000100111", 
    36 => "00111101100101001001010000011001", 
    37 => "00111101001100001101110100011000", 
    38 => "00111101101000000100111000010001", 
    39 => "10111101111000100001011111010011", 
    40 => "00111101100110010100101110001001", 
    41 => "00111000110100100000110110000111", 
    42 => "10111101101000000000000001010001", 
    43 => "00111101110010111111100011100010", 
    44 => "10111101111100110111001100101010", 
    45 => "10111101010111110000010110011010", 
    46 => "10111101111110001101000101010010", 
    47 => "00111100111111110000101011011000", 
    48 => "00111110000100100101000100111011", 
    49 => "10111101110101101001010001000110", 
    50 => "00111101011010011110111101101101", 
    51 => "00111101011001010010001110100110", 
    52 => "10111101101010111000100010101111", 
    53 => "10111101100110111101100011001100", 
    54 => "10111110000111101001100100100000", 
    55 => "00111101001100011010000011000010", 
    56 => "00111100100000000000001101011011", 
    57 => "10111110001000111100000011000010", 
    58 => "10111100100100010000101111110111", 
    59 => "00111100100001110100100111010110", 
    60 => "10111101110000101111010110011001", 
    61 => "00111110000101001000111010001010", 
    62 => "00111101100011110100111011011000", 
    63 => "10111101101100111011001011000010", 
    64 => "00111110000000101001101011100101", 
    65 => "00111011110011101110010001101010", 
    66 => "00111110001101010111101110000101", 
    67 => "00111101101100111010101001101100", 
    68 => "10111101000000000101010010011111", 
    69 => "10111100100111000011101011111111", 
    70 => "00111110001001100100001111001100", 
    71 => "10111110000000010011010011001110", 
    72 => "00111101100010101110110100101110", 
    73 => "00111101010000111001111001101011", 
    74 => "10111101111000001001100000001011", 
    75 => "10111101001111101111111101001111", 
    76 => "10111101110010101101111000100010", 
    77 => "00111100101111010000011100100111", 
    78 => "10111011100100001010000000100001", 
    79 => "00111110000000110000101001001110", 
    80 => "00111110001010011100100001000011", 
    81 => "10111101110000000101111100000000", 
    82 => "00111101110011011001110101110111", 
    83 => "00111101011111000111000101101011", 
    84 => "10111101101011001100001011001001", 
    85 => "00111100011001100010010111001111", 
    86 => "00111101001101011111001100000001", 
    87 => "10111101110100000011000100000101", 
    88 => "00111101100111010000101001011010", 
    89 => "00111101000011101111101111001100", 
    90 => "00111100010001000110001111011101", 
    91 => "10111101001101101001011110100001", 
    92 => "00111110000000010111111001111000", 
    93 => "00111110000110010110110111010010", 
    94 => "10111101101000101001001110101001", 
    95 => "10111101001100001110101011010100", 
    96 => "00111101100010110001111010000100", 
    97 => "10111100000110110001101110000101", 
    98 => "10111101001001100000100000000111", 
    99 => "00111011101110111100101110001000", 
    100 => "10111101011101001111100000010100", 
    101 => "00111110000010011101100101001101", 
    102 => "10111101101101100111001101110100", 
    103 => "00111101110101111101100111011100", 
    104 => "00111101111101011000000110001100", 
    105 => "10111101100111000110111000011101", 
    106 => "10111101000100110000101010000100", 
    107 => "10111110000000101110010100010101", 
    108 => "00111101000110011001101011110111", 
    109 => "10111110000000001111001000111001", 
    110 => "10111100110111001000001011101110", 
    111 => "00111110010010011011000001101000", 
    112 => "00111011101100110110001100000100", 
    113 => "00111101011010111010001101101101", 
    114 => "00111101010100011100000011011000", 
    115 => "10111101110001010011111100000100", 
    116 => "00111100111000000011011001101100", 
    117 => "10111101111100100000110000000111", 
    118 => "10111101010010101010101010011001", 
    119 => "10111110000001111000101110111101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_11 is
    component inference_conv2d_f3_3_1_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_11_rom_U :  component inference_conv2d_f3_3_1_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


