-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_18_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_18_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000011000011000010010000", 
    1 => "10111101110001100111111100001011", 
    2 => "00111110001000011010110101100100", 
    3 => "10111110000010100100100110000000", 
    4 => "00111101010011001011101011000100", 
    5 => "10111101001001110000110111110110", 
    6 => "10111101101101100000011110011100", 
    7 => "10111011111011011011011100010011", 
    8 => "10111101000000011101110000101001", 
    9 => "00111110000001101000011111110100", 
    10 => "00111101110101001110001000101010", 
    11 => "10111100111101010110010010011100", 
    12 => "10111101110100111001110100011011", 
    13 => "00111110000001001010100111001110", 
    14 => "10111110000010010101111001011011", 
    15 => "00111100001001001010000110100000", 
    16 => "10111110000001000110000110110111", 
    17 => "00111110000101001110010011001001", 
    18 => "10111110000000000011101111000101", 
    19 => "00111101111101000101111000001011", 
    20 => "10111100100111100111101001110100", 
    21 => "00111100110100111010100110010110", 
    22 => "00111011011000001111111111100000", 
    23 => "00111110010000010010011110110011", 
    24 => "10111100011010011101010111110010", 
    25 => "00111101111101011101100010010101", 
    26 => "00111101111111110000100100001111", 
    27 => "10111101110011110101110100110101", 
    28 => "00111101100000111100001001100010", 
    29 => "10111101111110110100100010010001", 
    30 => "10111110001101110111110111011000", 
    31 => "00111100110111010011001101001100", 
    32 => "10111110000010110101111111100101", 
    33 => "00111101011000100001010100110011", 
    34 => "00111101100010000101111100111101", 
    35 => "00111110000101100010110000110100", 
    36 => "00111110001011010111011010101011", 
    37 => "00111101001111101110111110101111", 
    38 => "10111101110101000110010111101001", 
    39 => "10111101011100110011111000110110", 
    40 => "00111101101011010100000110110111", 
    41 => "00111100100101100111100000010010", 
    42 => "10111101100101001001101011000010", 
    43 => "10111110000101001011010111011101", 
    44 => "00111011110101011011011101101101", 
    45 => "00111100101000101111101000000000", 
    46 => "10111101110010110101100000010101", 
    47 => "10111110001100111100001010011000", 
    48 => "10111101010001101100111011110001", 
    49 => "00111101101001110110110011101001", 
    50 => "00111101110001110111010001101001", 
    51 => "10111101110010110111010100000110", 
    52 => "00111101111110001011000011010001", 
    53 => "00111110001100001110010110100011", 
    54 => "10111101101111000000011110111000", 
    55 => "10111101100010011010001111111011", 
    56 => "00111100111101110010000101101010", 
    57 => "00111101100100011110010101010101", 
    58 => "10111101111110011111001101000001", 
    59 => "10111110000111111000111000111011", 
    60 => "00111110010001111100100000001000", 
    61 => "10111100101010001011100101011101", 
    62 => "10111000110101100110000100011000", 
    63 => "10111001100100011111100001111111", 
    64 => "00111101000010111011110111011001", 
    65 => "00111101111110000100001000110001", 
    66 => "10111101001101011101111111101100", 
    67 => "00111100001101101011111000000010", 
    68 => "10111110001010011010010000010110", 
    69 => "10111010101100110000001010100001", 
    70 => "00111101111110100111000000001001", 
    71 => "10111101110101110001010111000110", 
    72 => "10111101101110011000001101101100", 
    73 => "10111110000110000010010111100001", 
    74 => "10111011110000001010101101101100", 
    75 => "00111101000010000111001000001111", 
    76 => "10111101110001001011010110011010", 
    77 => "10111101110000010011111111111001", 
    78 => "10111101101000010110110010010111", 
    79 => "00111101011001100100011001010000", 
    80 => "10111100110100001100010000001000", 
    81 => "10111110000000010111111110000100", 
    82 => "00111110001110011000001000000010", 
    83 => "00111100010010000001110011001111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_18 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_18 is
    component inference_mult_1_120_120_84_s_W4_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_18_rom_U :  component inference_mult_1_120_120_84_s_W4_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


