-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_39_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_39_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101111010011010010001110", 
    1 => "10111100101111001101010001100111", 
    2 => "00111100001011010100111010000010", 
    3 => "00111100110011111100101000001101", 
    4 => "10111101101011001110011100101100", 
    5 => "00111101100101000001001101001000", 
    6 => "00111100001101100001101001101110", 
    7 => "00111110001101000101111001001110", 
    8 => "00111100100111110010010101011111", 
    9 => "10111101111111101110010001011100", 
    10 => "00111101100001001000100010010000", 
    11 => "00111101111100101000010000010110", 
    12 => "10111110000100110011001111111101", 
    13 => "10111110011010110111101101101100", 
    14 => "00111101110011010010110111001011", 
    15 => "00111100110001101011011011010011", 
    16 => "10111101011111001111011111011000", 
    17 => "00111101101100110011000101111000", 
    18 => "00111010101100101100001110001100", 
    19 => "10111100001000011011110101011111", 
    20 => "00111100101100010101111010110010", 
    21 => "00111110000010101100001001011001", 
    22 => "10111110000011111001100001110100", 
    23 => "10111101000100101010100110100000", 
    24 => "00111101001001010100101000000111", 
    25 => "10111110010000101101111011001010", 
    26 => "10111101000000000000010110101010", 
    27 => "00111100011110011000100111000100", 
    28 => "10111110010111001101010000100100", 
    29 => "10111110001001110000011010010010", 
    30 => "00111110001001100101011111111011", 
    31 => "10111101101111100101000011010011", 
    32 => "00111101110011010110111101010100", 
    33 => "00111101110001010100000110010110", 
    34 => "10111110010010101011111010101101", 
    35 => "00111101100010010000111100010101", 
    36 => "10111101001101110111010100010111", 
    37 => "00111101011000101101100001010111", 
    38 => "00111100100001100000100010001101", 
    39 => "00111101111101000111100111010101", 
    40 => "00111101000001010001111010000011", 
    41 => "00111101101001101100001001101010", 
    42 => "10111100100110101010100000100010", 
    43 => "00111100000000110101011110001110", 
    44 => "00111110011100001000100011010111", 
    45 => "00111101111101101101110010100000", 
    46 => "00111101010010100101000111001000", 
    47 => "00111101110110100100010100001011", 
    48 => "00111101111101100100001110001001", 
    49 => "10111101001110101111010011100011", 
    50 => "10111101100000110011010110000010", 
    51 => "10111110000110101100001101100101", 
    52 => "00111101010110110000010010111001", 
    53 => "10111101000011100001011011100100", 
    54 => "00111101110001011101000110110110", 
    55 => "00111011110010100011010011010111", 
    56 => "00111101001110011001001101001111", 
    57 => "00111101011000100101010011011001", 
    58 => "10111100111101100111011010110101", 
    59 => "00111101110010110010110100011000", 
    60 => "00111101001001110001111111111111", 
    61 => "00111101101001001101111101010101", 
    62 => "10111101101100110000110111000100", 
    63 => "00111101001011110111101101101000", 
    64 => "10111101010100101010011010010110", 
    65 => "10111101010000111111000000011010", 
    66 => "10111101011100001100110101111000", 
    67 => "00111101001100100111100001110011", 
    68 => "00111011111111110100010100011010", 
    69 => "00111110001000011000011011011011", 
    70 => "10111110000100111101001101011111", 
    71 => "00111100111000001111110111011100", 
    72 => "00111110001111010111000000011110", 
    73 => "10111011101000001001000101110000", 
    74 => "10111101000110011111111100011010", 
    75 => "00111101000101100011101011010101", 
    76 => "00111101101001101011000101100000", 
    77 => "10111101101111010000011001010000", 
    78 => "10111101100000110001010100011011", 
    79 => "00111100100011101000000000101011", 
    80 => "00111110000101111011001011001100", 
    81 => "00111101001100011101010110011011", 
    82 => "00111101010110010001101111100000", 
    83 => "00111101101011110000110000011010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_39 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_39 is
    component inference_mult_1_120_120_84_s_W4_39_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_39_rom_U :  component inference_mult_1_120_120_84_s_W4_39_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


