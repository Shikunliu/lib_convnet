-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110010001010110101000000", 
    1 => "10111101010011010111000101101101", 
    2 => "10111101001010111101111110011101", 
    3 => "10111101100100110010111001010011", 
    4 => "00111101011111000001101010110011", 
    5 => "10111101010011001001110111010011", 
    6 => "10111100111100000001011001111110", 
    7 => "00111011010100111101111011100101", 
    8 => "10111101111110110010001011010001", 
    9 => "10111101000010100010010110111110", 
    10 => "00111101010001010101100101110001", 
    11 => "00111101010011000110011111101101", 
    12 => "10111101101010001000011111000100", 
    13 => "10111011011111101001001111101111", 
    14 => "00111101111001110101111111110110", 
    15 => "10111101000000011111001110001011", 
    16 => "00111101101000111001101110001001", 
    17 => "00111101110110001011101101001101", 
    18 => "10111101101000011110111001100111", 
    19 => "00111110000100101110010111011110", 
    20 => "10111101000100011100101011001110", 
    21 => "10111100110001010100101011000011", 
    22 => "10111101101101001001100111010000", 
    23 => "10111101011011100101001010101001", 
    24 => "00111100101001011111010011110010", 
    25 => "10111101000101010110111111010100", 
    26 => "10111101100000011100111111110001", 
    27 => "10111101111001011110011011111111", 
    28 => "00111100101011001100110111110100", 
    29 => "10111110001011001111101100110011", 
    30 => "10111110000110111110000110101000", 
    31 => "00111101100010000000110101100101", 
    32 => "00111101101100101101011000111110", 
    33 => "00111101101011110100000101101100", 
    34 => "00111101101000011010101010101010", 
    35 => "10111101111100011010010010111110", 
    36 => "10111101110100010010101100011011", 
    37 => "10111100001000111101011000011110", 
    38 => "00111101011011010010001110000100", 
    39 => "00111110000011000111101001111101", 
    40 => "10111101001100011010010001101101", 
    41 => "10111101101010001101001010010101", 
    42 => "00111101100111111000000001111110", 
    43 => "10111011100001110001110001101001", 
    44 => "00111101110101010011010001111010", 
    45 => "00111010111000111001001100111000", 
    46 => "00111101101010010011010100110011", 
    47 => "00111101100100010110111111110010", 
    48 => "00111100110101101001101000001011", 
    49 => "00111100000001111101101001101010", 
    50 => "10111100110100010111100100111010", 
    51 => "10111100011101001100000100001000", 
    52 => "00111110001101111110101100101001", 
    53 => "00111110001011000001111110000110", 
    54 => "10111011110100101001110100011011", 
    55 => "00111101010101000010010100011011", 
    56 => "00111101011111011000001011100011", 
    57 => "00111101010101110101100100110011", 
    58 => "10111101100011100100110100110101", 
    59 => "10111100101000001101001011011110", 
    60 => "10111101111010101110111010100110", 
    61 => "00111100111001010000110000101001", 
    62 => "10111100011000001111101000010110", 
    63 => "10111101101111000101110011010000", 
    64 => "00111101000101001100000100001000", 
    65 => "10111110000011001001001110100111", 
    66 => "10111101100010000011000001000011", 
    67 => "10111101000111111010011100110000", 
    68 => "10111011110001001001000000010010", 
    69 => "00111101101001000000111101110100", 
    70 => "10111101101100100010101111100111", 
    71 => "00111101100110100110101101010001", 
    72 => "10111100000111101100100111001111", 
    73 => "10111101000101101101010111101011", 
    74 => "00111101010101111101010111111010", 
    75 => "10111110010100000101000111001010", 
    76 => "10111101100000111000000000010000", 
    77 => "00111101000100101100010100110100", 
    78 => "10111110000000100011010001100101", 
    79 => "00111101101111010110000000000101", 
    80 => "10111101100000111111010000100011", 
    81 => "00111100100000010110111110100001", 
    82 => "10111100100010100100011011100001", 
    83 => "00111011000101110101110001111110", 
    84 => "10111101010101101101000001011100", 
    85 => "00111100101101010100100111111001", 
    86 => "00111001111011010100011100110000", 
    87 => "00111110001111100101111100110001", 
    88 => "10111101100111101001010000100101", 
    89 => "10111101101000111100101110001111", 
    90 => "10111101010001010011111111110110", 
    91 => "10111101111010011111001011111110", 
    92 => "00111101111000001001010001100000", 
    93 => "10111110000011001001110101011010", 
    94 => "00111100110111010001111000011110", 
    95 => "10111101100100001000010100011110", 
    96 => "10111101100010010110100011110010", 
    97 => "00111101100111010101100001010000", 
    98 => "00111101000111101011100101011110", 
    99 => "10111011110011100111101010100010", 
    100 => "10111011000100100011000111000110", 
    101 => "00111101100000011001101110000011", 
    102 => "10111110001001010010001100101101", 
    103 => "10111101001001110010111010010011", 
    104 => "00111101110100100001000010111111", 
    105 => "00111101100010000111111101010011", 
    106 => "10111011111110100101110100111110", 
    107 => "10111101100001111100001011001010", 
    108 => "00111101001011101100001010001011", 
    109 => "10111101110001010011001101000110", 
    110 => "10111110010010010101101010101111", 
    111 => "10111101100110100011100011111100", 
    112 => "10111101100000101101010000001011", 
    113 => "10111101011010101011100101111101", 
    114 => "00111101100101001000001000000011", 
    115 => "10111101000001010010110100110001", 
    116 => "00111110010101101000110111111100", 
    117 => "00111101110111110000000100110010", 
    118 => "00111011100110100111111011110010", 
    119 => "10111110001001101111011010010100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_7 is
    component inference_conv2d_f3_0_3_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_7_rom_U :  component inference_conv2d_f3_0_3_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


