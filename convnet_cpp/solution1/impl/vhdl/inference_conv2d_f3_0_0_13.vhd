-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111100101100011110111001", 
    1 => "00111100110100010110101110011000", 
    2 => "00111101110100000110110111010111", 
    3 => "10111101100100000011010110110000", 
    4 => "00111101101101111010001101100010", 
    5 => "10111110000111100010110111101000", 
    6 => "10111100111100111011001001111111", 
    7 => "00111100101110000111010001010000", 
    8 => "10111101111010011110110010110011", 
    9 => "00111101111111111011100100111001", 
    10 => "10111011001011000001001010011000", 
    11 => "10111011100001000100011110111000", 
    12 => "10111101110001001111111110101111", 
    13 => "10111110011001011101111101100101", 
    14 => "10111100111110101001101110101000", 
    15 => "10111100010101100010000100001001", 
    16 => "00111100001110100011100110111000", 
    17 => "10111101100001111100101001100100", 
    18 => "00111101101111110000001000001001", 
    19 => "00111101110001100100010110010100", 
    20 => "10111101110010010100000011111111", 
    21 => "10111101111011000001001000100111", 
    22 => "00111101001000101000110101111001", 
    23 => "10111101110100101111001000110000", 
    24 => "00111101110111101110111101011111", 
    25 => "00111100111101001111000101111001", 
    26 => "00111101010101001110101011111001", 
    27 => "00111101100101010110010011101100", 
    28 => "00111101110001010100111101100000", 
    29 => "10111100011011001110010111011100", 
    30 => "00111101000011000111100110100110", 
    31 => "00111101100111011111011000000101", 
    32 => "00111100111111011100000011000000", 
    33 => "00111101001111101110011000001010", 
    34 => "00111100111110110000111100110101", 
    35 => "00111100111000011101000101110110", 
    36 => "10111110000010100000111001000001", 
    37 => "10111101101011010001010100001100", 
    38 => "00111101100001101100100111011100", 
    39 => "10111101101111001101011111011101", 
    40 => "00111100000100101110101000010011", 
    41 => "00111101000000010100011010111100", 
    42 => "10111101111000011011011011010100", 
    43 => "00111101011000011101100010011000", 
    44 => "10111101101000010101100011100000", 
    45 => "10111101100111100110110101110100", 
    46 => "00111100100011100011100110110100", 
    47 => "00111101101011011111110101001110", 
    48 => "10111101111001110000011001001111", 
    49 => "10111100100000001100010000010101", 
    50 => "00111100110001011100011010110100", 
    51 => "10111110001000000101100001011000", 
    52 => "10111110001101010100101011000011", 
    53 => "00111011100001001010010111101101", 
    54 => "00111011111101100000100100110001", 
    55 => "00111110010000101011111001001001", 
    56 => "10111101100011000111001110011110", 
    57 => "00111101010001010011100011010100", 
    58 => "00111101100101011110111001001001", 
    59 => "00111101111000111001010110000001", 
    60 => "10111110000100001100111111100001", 
    61 => "00111101100110101111001011100101", 
    62 => "00111101010110111110001100100000", 
    63 => "10111101100010011001001001101011", 
    64 => "10111101100101010101111100001101", 
    65 => "00111100110101111100110101111100", 
    66 => "10111101011111101010010010000000", 
    67 => "10111101101000101100001100110110", 
    68 => "00111101101001010101010111010011", 
    69 => "00111101100000110010101011010000", 
    70 => "10111110010111111001010010000101", 
    71 => "00111101001001110011011111001101", 
    72 => "10111101101111010000101111101101", 
    73 => "00111101011111011111000001011011", 
    74 => "00111101011010011000001100000001", 
    75 => "10111110000000110111011101011100", 
    76 => "10111101011110100100111101101100", 
    77 => "10111110000100111000000101010010", 
    78 => "10111101101101011000100001111000", 
    79 => "00111101101100011111110110000001", 
    80 => "00111101111100100100000011111011", 
    81 => "10111110000110100111000110011011", 
    82 => "00111100111011000010001110101010", 
    83 => "10111101000101001100111110110110", 
    84 => "10111101001010000001110011101010", 
    85 => "00111101111011011100110100101101", 
    86 => "00111101110001111001100111110011", 
    87 => "00111100100101111001010000111100", 
    88 => "10111100111110000101111011101100", 
    89 => "10111101100100101000111010100000", 
    90 => "00111101001101010000011010001101", 
    91 => "00111101010001110000101011010001", 
    92 => "00111100010101111101101111110101", 
    93 => "10111100111100100101110100010101", 
    94 => "10111101100110000011111100001100", 
    95 => "00111110011011111111001010100001", 
    96 => "00111110000100111010001100100011", 
    97 => "00111101111010101010011111011111", 
    98 => "00111101011100011001110011100000", 
    99 => "10111100111011100101101001010001", 
    100 => "00111100111001010111100110100010", 
    101 => "00111101101011001011010010100001", 
    102 => "10111101100111101000110111001101", 
    103 => "10111101111100110111110110100110", 
    104 => "10111101000000001101111101011001", 
    105 => "10111101110111101111011000110000", 
    106 => "10111101110010011111111001000011", 
    107 => "00111110000011010110110000101111", 
    108 => "10111101100001010111010111011011", 
    109 => "10111101111110100000101101011111", 
    110 => "10111101100010001011110100110000", 
    111 => "00111110000100100101100011010110", 
    112 => "00111110001110011100100000000000", 
    113 => "10111101101101011100001100100011", 
    114 => "00111101011011010000100010010010", 
    115 => "10111110000011111011000000001100", 
    116 => "00111101001111001010000100111011", 
    117 => "10111100111100110001011111110000", 
    118 => "10111101111101010110110100011010", 
    119 => "10111101111111001010111000100001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_13 is
    component inference_conv2d_f3_0_0_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_13_rom_U :  component inference_conv2d_f3_0_0_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


