-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000010000010011001100111", 
    1 => "10111101011111001011100100111110", 
    2 => "00111110010001001111110101101101", 
    3 => "00111101001101110100011101011111", 
    4 => "00111101110111100010011000001011", 
    5 => "10111101110100111111110010000111", 
    6 => "00111101110101110001000000000010", 
    7 => "10111101011001101100111111100011", 
    8 => "10111101101000001110100010010011", 
    9 => "00111110000000101010010011011011", 
    10 => "10111011101100000001010100000110", 
    11 => "00111101100011001010101001000000", 
    12 => "10111101111010001110011100010100", 
    13 => "00111100111000101001100011100111", 
    14 => "00111101110000110110000100100001", 
    15 => "00111110011001010001111001110101", 
    16 => "10111100111100101100110000000101", 
    17 => "00111110000001100101010101011100", 
    18 => "10111100110101011000000010011011", 
    19 => "10111101101010100000001011010011", 
    20 => "00111101001000101101010101001101", 
    21 => "10111110000001110011100110110000", 
    22 => "10111101110001110101000110100110", 
    23 => "00111110011010111001001100000011", 
    24 => "10111110010000111111001011010100", 
    25 => "10111101100100011001011100000001", 
    26 => "00111101101011010101000011101100", 
    27 => "00111100000101111100111110010101", 
    28 => "10111110010000010000110010110011", 
    29 => "10111101100000100110110011011101", 
    30 => "10111100111100110001010111010111", 
    31 => "00111101111100101111110100110011", 
    32 => "00111110000000000011000111001111", 
    33 => "10111101111000010111011101100100", 
    34 => "10111101111000000000001010011111", 
    35 => "00111101100101000010010100001110", 
    36 => "00111101100001111010000110110101", 
    37 => "00111101011000011010011001011110", 
    38 => "10111100110101010101010001011011", 
    39 => "00111011000101001010111011111001", 
    40 => "10111110001000101000111111100010", 
    41 => "10111110000000111100010101111010", 
    42 => "00111101110000010010100110001001", 
    43 => "00111010110101011101100100010000", 
    44 => "00111101111111110011000011101000", 
    45 => "00111101111101000000000000110010", 
    46 => "00111100001001001010010011111011", 
    47 => "10111100000010001001001011100001", 
    48 => "10111011011111110101011010111000", 
    49 => "10111011011011101010110111001000", 
    50 => "10111101100100110111100011000110", 
    51 => "10111100110100010111111101001111", 
    52 => "10111100011111001111111100101111", 
    53 => "00111101010101000101010001100110", 
    54 => "10111101000110100011000110001010", 
    55 => "00111110001010111101011000011111", 
    56 => "10111101001010111111100100011000", 
    57 => "10111101111100011010100101110110", 
    58 => "10111101101111111101100010000101", 
    59 => "10111101000010010000001101100100", 
    60 => "10111101110110010111101010101011", 
    61 => "00111101010010101011000100011001", 
    62 => "10111110000001001101101000001010", 
    63 => "00111101100000010000101001111111", 
    64 => "00111110001111111101011000001111", 
    65 => "10111100011010000001000011110110", 
    66 => "00111110001010010010010001101100", 
    67 => "10111110001010010101100010010111", 
    68 => "00111101101001011001001110001000", 
    69 => "10111101111111000001111001111001", 
    70 => "10111100110101110110110100000100", 
    71 => "00111101101011011011101001011011", 
    72 => "00111100010010000001000010100101", 
    73 => "10111100110011100000000010101001", 
    74 => "00111100110001000011100100010101", 
    75 => "10111101000001000100001001001111", 
    76 => "00111101110101000111111000000111", 
    77 => "00111110100001010110111101010100", 
    78 => "10111101110101110110100100100011", 
    79 => "00111110001110011010000001101010", 
    80 => "00111110000000011000101000000001", 
    81 => "10111101111000011001010000111010", 
    82 => "10111101100101010101111110000110", 
    83 => "00111101100011011000010111100000", 
    84 => "00111011011100001000001101100000", 
    85 => "00111100001010010100110111010111", 
    86 => "00111101010000011010010011001011", 
    87 => "10111110100001110110100001011010", 
    88 => "10111101000011001110001011010010", 
    89 => "10111101011000101110101001100000", 
    90 => "10111101011011111111000010111110", 
    91 => "00111110000110010100011000111101", 
    92 => "00111100001101111000000010100000", 
    93 => "00111101110110110100011001111000", 
    94 => "00111110000101100101001110000111", 
    95 => "10111110000000000001001011100000", 
    96 => "00111110000010101010000011001011", 
    97 => "00111110000000000100111010100101", 
    98 => "10111110001011011010011101101110", 
    99 => "00111101101101100010111001000000", 
    100 => "10111110010111100001110010011011", 
    101 => "00111100101000011101111001000001", 
    102 => "10111101011011001110110110000100", 
    103 => "10111101011001001111101001010110", 
    104 => "00111110010000100001100001011001", 
    105 => "10111101011110011010110010010100", 
    106 => "10111100101011110010010000010000", 
    107 => "10111101101111101101001100110111", 
    108 => "00111101110011101010010110110101", 
    109 => "10111101000000110100010110110101", 
    110 => "00111100111101100010110001110111", 
    111 => "00111101100101010110110110101110", 
    112 => "10111101110111110101101011011001", 
    113 => "00111101111111000000000000010001", 
    114 => "10111101001011100111001010111111", 
    115 => "00111101101000000010111101011000", 
    116 => "10111110010000101001001010000001", 
    117 => "10111100011001110101010101111010", 
    118 => "10111101111101011001110011010000", 
    119 => "00111100110010101000011101111000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_4 is
    component inference_conv2d_f3_0_3_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_4_rom_U :  component inference_conv2d_f3_0_3_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


