-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001011001010111110001", 
    1 => "10111101000110001111001111010010", 
    2 => "00111101110010011100000111111000", 
    3 => "10111100101111010011101100101010", 
    4 => "00111101111001111101111111100011", 
    5 => "00111101010001110010100011001110", 
    6 => "00111101111011001001100101101011", 
    7 => "00111110000110011000010100100111", 
    8 => "10111010010001011001111011110101", 
    9 => "00111110001011100111100100100101", 
    10 => "00111101010001010101101100011110", 
    11 => "00111101101110101111001000101001", 
    12 => "00111101010100000111011101111100", 
    13 => "10111110000010111101110110111010", 
    14 => "10111100101011110100011111101100", 
    15 => "00111101100111010001011110010000", 
    16 => "00111011010101111011010010110010", 
    17 => "10111011110111110110100000011010", 
    18 => "00111101110101101011001100110101", 
    19 => "10111100101101100011000010101001", 
    20 => "00111101100100111011101100001011", 
    21 => "10111101000001011011100101111101", 
    22 => "10111110000001100111101111100101", 
    23 => "10111101010110001010001110011011", 
    24 => "10111100101001111001100010010110", 
    25 => "10111011010100101101100100000000", 
    26 => "00111101101100110110100100011001", 
    27 => "10111100111000110111100001000000", 
    28 => "10111100011001111110010000010101", 
    29 => "10111110000111010010100100010011", 
    30 => "00111101101010011001010111101110", 
    31 => "10111110000001110110101010110110", 
    32 => "10111100001010010111011101011101", 
    33 => "10111110001000101011101111101101", 
    34 => "10111101100001100111011000010100", 
    35 => "00111101001000110100100111100111", 
    36 => "10111101100101111001100100001110", 
    37 => "10111101111000011010101000111111", 
    38 => "00111101100100100011000101000000", 
    39 => "00111101001000111100101101001100", 
    40 => "10111100100110010101000000110011", 
    41 => "10111101010000101000001000100110", 
    42 => "00111110000001110010001001011011", 
    43 => "00111101001000100111110011101000", 
    44 => "10111101110100110010011110101010", 
    45 => "10111101010110000010011000010111", 
    46 => "10111110000100001101010101100011", 
    47 => "00111110001100011111111011101011", 
    48 => "10111101000011100100100011001110", 
    49 => "10111101000110101110110110100111", 
    50 => "00111110000011000110010101000001", 
    51 => "00111110000011110001111101011000", 
    52 => "00111100010100001000000001001011", 
    53 => "00111101101001111010100111100011", 
    54 => "10111101001100010001100011110111", 
    55 => "10111101111110100001001010110110", 
    56 => "00111101111111010000111000010011", 
    57 => "00111101110000111001100000000101", 
    58 => "00111101001011010100101000110110", 
    59 => "00111110000010001110110111100101", 
    60 => "10111101110011111010000111100100", 
    61 => "10111100001101100001000110011111", 
    62 => "10111101100000000000101001111100", 
    63 => "10111101001011101001100000101110", 
    64 => "10111101010111110011000000101100", 
    65 => "10111101111001101100110110101111", 
    66 => "10111101101010011011110101101001", 
    67 => "00111101101011111100001001110011", 
    68 => "00111101001111101011101101011100", 
    69 => "10111100111010011111011011011111", 
    70 => "10111101110000011011110010011001", 
    71 => "00111101000101110110011100001010", 
    72 => "00111101100011000111011011000100", 
    73 => "00111101010011100101100010111110", 
    74 => "00111101011101010100100111000100", 
    75 => "00111100100010011001110101101101", 
    76 => "00111101011100110111000011011011", 
    77 => "10111101111111110111011110101111", 
    78 => "10111110000111100100010001110100", 
    79 => "10111100001010010110010110111111", 
    80 => "00111100110100101011101100100011", 
    81 => "00111101110011011110011111101010", 
    82 => "10111101101110001100110011010000", 
    83 => "00111100101110110111111101101000", 
    84 => "00111101101011101010100001111101", 
    85 => "00111101011000100000001111100110", 
    86 => "00111110001001100100101000010111", 
    87 => "10111100010010111010101111010000", 
    88 => "00111100110100000110011000010100", 
    89 => "10111101001011101110001000011011", 
    90 => "10111110000101101000000101100111", 
    91 => "10111101001000111011100101111000", 
    92 => "10111100101001101101110100011001", 
    93 => "00111010111110010101100011110010", 
    94 => "00111101100001101000001001100110", 
    95 => "10111101011101100000100111000010", 
    96 => "10111100011001111101011111101011", 
    97 => "00111101101111010011100000111010", 
    98 => "10111101100100011110001001011000", 
    99 => "00111101001000111000001111001000", 
    100 => "10111110010000000100101101111111", 
    101 => "00111101100101010000011011000011", 
    102 => "00111100110110001101100010101001", 
    103 => "00111101101110110000100000101111", 
    104 => "10111011110011111111010111100010", 
    105 => "00111110000100110000011111110010", 
    106 => "10111101011111000000000001111100", 
    107 => "00111011111011011000010011111110", 
    108 => "10111101110001100011001011111000", 
    109 => "00111101010000011000001010011100", 
    110 => "00111110000100010110011110101001", 
    111 => "10111101000110100100100011010001", 
    112 => "10111101101001010101010001110110", 
    113 => "00111011001110000000111010100101", 
    114 => "10111100001100001000100011001001", 
    115 => "10111110001010001010101001000011", 
    116 => "00111110001100101001000111111011", 
    117 => "10111100110010100110100111100110", 
    118 => "00111101010001011001111001110000", 
    119 => "00111101100000010001111000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_15 is
    component inference_conv2d_f3_0_0_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_15_rom_U :  component inference_conv2d_f3_0_0_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


