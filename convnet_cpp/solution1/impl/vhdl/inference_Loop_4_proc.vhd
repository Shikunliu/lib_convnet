-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inference_Loop_4_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Filter2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Filter2_ce0 : OUT STD_LOGIC;
    Filter2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    f2_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_0_ce0 : OUT STD_LOGIC;
    f2_0_we0 : OUT STD_LOGIC;
    f2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_1_ce0 : OUT STD_LOGIC;
    f2_1_we0 : OUT STD_LOGIC;
    f2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_2_ce0 : OUT STD_LOGIC;
    f2_2_we0 : OUT STD_LOGIC;
    f2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_3_ce0 : OUT STD_LOGIC;
    f2_3_we0 : OUT STD_LOGIC;
    f2_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    f2_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    f2_4_ce0 : OUT STD_LOGIC;
    f2_4_we0 : OUT STD_LOGIC;
    f2_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inference_Loop_4_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st5_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_960 : STD_LOGIC_VECTOR (11 downto 0) := "100101100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_1E0 : STD_LOGIC_VECTOR (9 downto 0) := "0111100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal indvar_flatten5_reg_169 : STD_LOGIC_VECTOR (11 downto 0);
    signal i5_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten6_reg_191 : STD_LOGIC_VECTOR (9 downto 0);
    signal j6_reg_202 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_213 : STD_LOGIC_VECTOR (7 downto 0);
    signal k7_reg_224 : STD_LOGIC_VECTOR (2 downto 0);
    signal l8_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten6_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten6_reg_574 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_91 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar_flatten_next6_fu_252_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i5_mid2_fu_308_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i5_mid2_reg_583 : STD_LOGIC_VECTOR (2 downto 0);
    signal j6_mid2_fu_354_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j6_mid2_reg_592 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal l8_mid2_fu_380_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal l8_mid2_reg_598 : STD_LOGIC_VECTOR (4 downto 0);
    signal k7_mid2_fu_388_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_mid2_reg_604 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_fu_396_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_fu_408_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next5_fu_422_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_726_fu_560_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_726_reg_631 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_bdd_133 : BOOLEAN;
    signal i5_phi_fu_184_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j6_phi_fu_206_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_phi_fu_228_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_762_cast_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_763_cast_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_258_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j6_mid_fu_270_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_mid_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_719_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_not_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_mid_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_mid_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_316_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k7_mid_fu_328_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond8_mid1_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_722_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_760_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_362_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_op_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten11_op_fu_416_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_433_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_fu_430_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_440_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_717_fu_457_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_716_fu_450_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_464_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_cast_fu_474_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_720_fu_477_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_758_fu_491_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_757_fu_483_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_fu_499_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_721_fu_503_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_509_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_723_fu_515_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_718_fu_468_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_cast_fu_512_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_724_fu_529_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_758_cast_fu_521_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_fu_546_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_725_fu_549_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_761_cast_fu_535_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast1_fu_543_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_402 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten6_fu_246_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_246_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten6_fu_246_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- i5_reg_180 assign process. --
    i5_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_574 = ap_const_lv1_0))) then 
                i5_reg_180 <= i5_mid2_reg_583;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133))) then 
                i5_reg_180 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten5_reg_169 assign process. --
    indvar_flatten5_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten6_fu_246_p2 = ap_const_lv1_0))) then 
                indvar_flatten5_reg_169 <= indvar_flatten_next6_fu_252_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133))) then 
                indvar_flatten5_reg_169 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten6_reg_191 assign process. --
    indvar_flatten6_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten6_fu_246_p2 = ap_const_lv1_0))) then 
                indvar_flatten6_reg_191 <= indvar_flatten_next5_fu_422_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133))) then 
                indvar_flatten6_reg_191 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_213 assign process. --
    indvar_flatten_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten6_fu_246_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_213 <= indvar_flatten_next_fu_408_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133))) then 
                indvar_flatten_reg_213 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- j6_reg_202 assign process. --
    j6_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_574 = ap_const_lv1_0))) then 
                j6_reg_202 <= j6_mid2_reg_592;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133))) then 
                j6_reg_202 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- k7_reg_224 assign process. --
    k7_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_574 = ap_const_lv1_0))) then 
                k7_reg_224 <= k7_mid2_reg_604;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133))) then 
                k7_reg_224 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- l8_reg_235 assign process. --
    l8_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten6_fu_246_p2 = ap_const_lv1_0))) then 
                l8_reg_235 <= l_fu_396_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_133))) then 
                l8_reg_235 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 <= j6_mid2_reg_592;
                exitcond_flatten6_reg_574 <= exitcond_flatten6_fu_246_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten6_fu_246_p2 = ap_const_lv1_0))) then
                i5_mid2_reg_583 <= i5_mid2_fu_308_p3;
                j6_mid2_reg_592 <= j6_mid2_fu_354_p3;
                k7_mid2_reg_604 <= k7_mid2_fu_388_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_fu_246_p2 = ap_const_lv1_0))) then
                l8_mid2_reg_598 <= l8_mid2_fu_380_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten6_reg_574 = ap_const_lv1_0))) then
                tmp_726_reg_631 <= tmp_726_fu_560_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten6_fu_246_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_bdd_133)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_133)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten6_fu_246_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten6_fu_246_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_2;
                end if;
            when ap_ST_st5_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Filter2_address0 <= tmp_762_cast_fu_555_p1(12 - 1 downto 0);

    -- Filter2_ce0 assign process. --
    Filter2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            Filter2_ce0 <= ap_const_logic_1;
        else 
            Filter2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st5_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_133 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_402 assign process. --
    ap_sig_bdd_402_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_402 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_91 assign process. --
    ap_sig_bdd_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_91 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_91)
    begin
        if (ap_sig_bdd_91) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_2 assign process. --
    ap_sig_cseq_ST_st5_fsm_2_assign_proc : process(ap_sig_bdd_402)
    begin
        if (ap_sig_bdd_402) then 
            ap_sig_cseq_ST_st5_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond8_mid1_fu_348_p2 <= (exitcond8_mid_fu_290_p2 and not_exitcond_flatten_mid_fu_342_p2);
    exitcond8_mid_fu_290_p2 <= (exitcond_fu_284_p2 and not_exitcond_flatten_fu_278_p2);
    exitcond_flatten2_fu_296_p2 <= "1" when (indvar_flatten_reg_213 = ap_const_lv8_60) else "0";
    exitcond_flatten6_fu_246_p2 <= "1" when (indvar_flatten5_reg_169 = ap_const_lv12_960) else "0";
    exitcond_flatten_fu_264_p2 <= "1" when (indvar_flatten6_reg_191 = ap_const_lv10_1E0) else "0";
    exitcond_flatten_mid_fu_302_p2 <= (exitcond_flatten2_fu_296_p2 and not_exitcond_flatten_fu_278_p2);
    exitcond_flatten_not_fu_336_p2 <= (exitcond_flatten2_fu_296_p2 xor ap_const_lv1_1);
    exitcond_fu_284_p2 <= "1" when (l8_reg_235 = ap_const_lv5_10) else "0";
    f2_0_address0 <= tmp_763_cast_fu_566_p1(9 - 1 downto 0);

    -- f2_0_ce0 assign process. --
    f2_0_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            f2_0_ce0 <= ap_const_logic_1;
        else 
            f2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_0_d0 <= Filter2_q0;

    -- f2_0_we0 assign process. --
    f2_0_we0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppstg_j6_mid2_reg_592_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 = ap_const_lv3_0)))) then 
            f2_0_we0 <= ap_const_logic_1;
        else 
            f2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_1_address0 <= tmp_763_cast_fu_566_p1(9 - 1 downto 0);

    -- f2_1_ce0 assign process. --
    f2_1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            f2_1_ce0 <= ap_const_logic_1;
        else 
            f2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_1_d0 <= Filter2_q0;

    -- f2_1_we0 assign process. --
    f2_1_we0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppstg_j6_mid2_reg_592_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 = ap_const_lv3_1)))) then 
            f2_1_we0 <= ap_const_logic_1;
        else 
            f2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_2_address0 <= tmp_763_cast_fu_566_p1(9 - 1 downto 0);

    -- f2_2_ce0 assign process. --
    f2_2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            f2_2_ce0 <= ap_const_logic_1;
        else 
            f2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_2_d0 <= Filter2_q0;

    -- f2_2_we0 assign process. --
    f2_2_we0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppstg_j6_mid2_reg_592_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 = ap_const_lv3_2)))) then 
            f2_2_we0 <= ap_const_logic_1;
        else 
            f2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_3_address0 <= tmp_763_cast_fu_566_p1(9 - 1 downto 0);

    -- f2_3_ce0 assign process. --
    f2_3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            f2_3_ce0 <= ap_const_logic_1;
        else 
            f2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_3_d0 <= Filter2_q0;

    -- f2_3_we0 assign process. --
    f2_3_we0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppstg_j6_mid2_reg_592_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 = ap_const_lv3_3)))) then 
            f2_3_we0 <= ap_const_logic_1;
        else 
            f2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_4_address0 <= tmp_763_cast_fu_566_p1(9 - 1 downto 0);

    -- f2_4_ce0 assign process. --
    f2_4_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            f2_4_ce0 <= ap_const_logic_1;
        else 
            f2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f2_4_d0 <= Filter2_q0;

    -- f2_4_we0 assign process. --
    f2_4_we0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppstg_j6_mid2_reg_592_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 = ap_const_lv3_3)) and not((ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 = ap_const_lv3_2)) and not((ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 = ap_const_lv3_1)) and not((ap_reg_ppstg_j6_mid2_reg_592_pp0_it1 = ap_const_lv3_0))))) then 
            f2_4_we0 <= ap_const_logic_1;
        else 
            f2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i5_mid2_fu_308_p3 <= 
        i_fu_258_p2 when (exitcond_flatten_fu_264_p2(0) = '1') else 
        i5_phi_fu_184_p4;

    -- i5_phi_fu_184_p4 assign process. --
    i5_phi_fu_184_p4_assign_proc : process(i5_reg_180, exitcond_flatten6_reg_574, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i5_mid2_reg_583)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_574 = ap_const_lv1_0))) then 
            i5_phi_fu_184_p4 <= i5_mid2_reg_583;
        else 
            i5_phi_fu_184_p4 <= i5_reg_180;
        end if; 
    end process;

    i_fu_258_p2 <= std_logic_vector(unsigned(i5_phi_fu_184_p4) + unsigned(ap_const_lv3_1));
    indvar_flatten11_op_fu_416_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_191) + unsigned(ap_const_lv10_1));
    indvar_flatten_next5_fu_422_p3 <= 
        ap_const_lv10_1 when (exitcond_flatten_fu_264_p2(0) = '1') else 
        indvar_flatten11_op_fu_416_p2;
    indvar_flatten_next6_fu_252_p2 <= std_logic_vector(unsigned(indvar_flatten5_reg_169) + unsigned(ap_const_lv12_1));
    indvar_flatten_next_fu_408_p3 <= 
        ap_const_lv8_1 when (tmp_719_fu_322_p2(0) = '1') else 
        indvar_flatten_op_fu_402_p2;
    indvar_flatten_op_fu_402_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_213) + unsigned(ap_const_lv8_1));
    j6_mid2_fu_354_p3 <= 
        j_5_fu_316_p2 when (exitcond_flatten_mid_fu_302_p2(0) = '1') else 
        j6_mid_fu_270_p3;
    j6_mid_fu_270_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten_fu_264_p2(0) = '1') else 
        j6_phi_fu_206_p4;

    -- j6_phi_fu_206_p4 assign process. --
    j6_phi_fu_206_p4_assign_proc : process(j6_reg_202, exitcond_flatten6_reg_574, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, j6_mid2_reg_592)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_574 = ap_const_lv1_0))) then 
            j6_phi_fu_206_p4 <= j6_mid2_reg_592;
        else 
            j6_phi_fu_206_p4 <= j6_reg_202;
        end if; 
    end process;

    j_5_fu_316_p2 <= std_logic_vector(unsigned(j6_mid_fu_270_p3) + unsigned(ap_const_lv3_1));
    k7_mid2_fu_388_p3 <= 
        k_fu_362_p2 when (exitcond8_mid1_fu_348_p2(0) = '1') else 
        k7_mid_fu_328_p3;
    k7_mid_fu_328_p3 <= 
        ap_const_lv3_0 when (tmp_719_fu_322_p2(0) = '1') else 
        k7_phi_fu_228_p4;

    -- k7_phi_fu_228_p4 assign process. --
    k7_phi_fu_228_p4_assign_proc : process(k7_reg_224, exitcond_flatten6_reg_574, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, k7_mid2_reg_604)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten6_reg_574 = ap_const_lv1_0))) then 
            k7_phi_fu_228_p4 <= k7_mid2_reg_604;
        else 
            k7_phi_fu_228_p4 <= k7_reg_224;
        end if; 
    end process;

    k_fu_362_p2 <= std_logic_vector(unsigned(k7_mid_fu_328_p3) + unsigned(ap_const_lv3_1));
    l8_mid2_fu_380_p3 <= 
        ap_const_lv5_0 when (tmp_760_fu_374_p2(0) = '1') else 
        l8_reg_235;
    l_fu_396_p2 <= std_logic_vector(unsigned(l8_mid2_fu_380_p3) + unsigned(ap_const_lv5_1));
    not_exitcond_flatten_fu_278_p2 <= (exitcond_flatten_fu_264_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_mid_fu_342_p2 <= (exitcond_flatten_fu_264_p2 or exitcond_flatten_not_fu_336_p2);
    p_shl2_fu_499_p1 <= std_logic_vector(resize(unsigned(tmp_758_fu_491_p3),9));
    p_shl4_cast_fu_464_p1 <= std_logic_vector(resize(unsigned(tmp_717_fu_457_p3),6));
    p_shl5_cast_fu_440_p1 <= std_logic_vector(resize(unsigned(tmp_fu_433_p3),6));
    tmp_11_cast_fu_512_p1 <= std_logic_vector(resize(unsigned(k7_mid2_reg_604),6));
    tmp_11_fu_509_p1 <= std_logic_vector(resize(unsigned(k7_mid2_reg_604),9));
    tmp_2_cast_fu_430_p1 <= std_logic_vector(resize(unsigned(i5_mid2_reg_583),6));
    tmp_6_cast_fu_474_p1 <= std_logic_vector(resize(unsigned(j6_mid2_reg_592),6));
    tmp_716_fu_450_p3 <= (i5_mid2_reg_583 & ap_const_lv3_0);
    tmp_717_fu_457_p3 <= (i5_mid2_reg_583 & ap_const_lv1_0);
    tmp_718_fu_468_p2 <= std_logic_vector(unsigned(tmp_716_fu_450_p3) - unsigned(p_shl4_cast_fu_464_p1));
    tmp_719_fu_322_p2 <= (exitcond_flatten_mid_fu_302_p2 or exitcond_flatten_fu_264_p2);
    tmp_720_fu_477_p2 <= std_logic_vector(unsigned(tmp_s_fu_444_p2) + unsigned(tmp_6_cast_fu_474_p1));
    tmp_721_fu_503_p2 <= std_logic_vector(unsigned(tmp_757_fu_483_p3) - unsigned(p_shl2_fu_499_p1));
    tmp_722_fu_368_p2 <= (exitcond8_mid1_fu_348_p2 or exitcond_flatten_mid_fu_302_p2);
    tmp_723_fu_515_p2 <= std_logic_vector(unsigned(tmp_721_fu_503_p2) + unsigned(tmp_11_fu_509_p1));
    tmp_724_fu_529_p2 <= std_logic_vector(unsigned(tmp_718_fu_468_p2) + unsigned(tmp_11_cast_fu_512_p1));
    tmp_725_fu_549_p2 <= std_logic_vector(unsigned(tmp_758_cast_fu_521_p3) + unsigned(tmp_cast_fu_546_p1));
    tmp_726_fu_560_p2 <= std_logic_vector(unsigned(tmp_761_cast_fu_535_p3) + unsigned(tmp_cast1_fu_543_p1));
    tmp_757_fu_483_p3 <= (tmp_720_fu_477_p2 & ap_const_lv3_0);
    tmp_758_cast_fu_521_p3 <= (tmp_723_fu_515_p2 & ap_const_lv4_0);
    tmp_758_fu_491_p3 <= (tmp_720_fu_477_p2 & ap_const_lv1_0);
    tmp_760_fu_374_p2 <= (tmp_722_fu_368_p2 or exitcond_flatten_fu_264_p2);
    tmp_761_cast_fu_535_p3 <= (tmp_724_fu_529_p2 & ap_const_lv4_0);
    tmp_762_cast_fu_555_p1 <= std_logic_vector(resize(unsigned(tmp_725_fu_549_p2),64));
    tmp_763_cast_fu_566_p1 <= std_logic_vector(resize(unsigned(tmp_726_reg_631),64));
    tmp_cast1_fu_543_p1 <= std_logic_vector(resize(unsigned(l8_mid2_reg_598),10));
    tmp_cast_fu_546_p1 <= std_logic_vector(resize(unsigned(l8_mid2_reg_598),13));
    tmp_fu_433_p3 <= (i5_mid2_reg_583 & ap_const_lv2_0);
    tmp_s_fu_444_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_430_p1) + unsigned(p_shl5_cast_fu_440_p1));
end behav;
