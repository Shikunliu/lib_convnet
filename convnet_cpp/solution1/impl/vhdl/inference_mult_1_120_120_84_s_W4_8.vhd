-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001100010000101001111111", 
    1 => "10111101010001110010110010010101", 
    2 => "10111110000101000100101011101000", 
    3 => "00111110001110100111101110010001", 
    4 => "10111100000001100110001111101000", 
    5 => "00111100110001111101001110011110", 
    6 => "10111101111010111011000100101001", 
    7 => "10111110000000011100111010101111", 
    8 => "00111101000011001110101111110001", 
    9 => "00111101010010010100001100100101", 
    10 => "10111101110110100100000111100101", 
    11 => "00111101001001000100101010110011", 
    12 => "00111101101111010010100111110111", 
    13 => "00111110000001000100101010100101", 
    14 => "10111101001010011010111010000101", 
    15 => "00111011111001111010001011111100", 
    16 => "00111011110110010011011001101000", 
    17 => "00111101000100111011010111011010", 
    18 => "10111101110000011010101001001100", 
    19 => "00111100101110011111111010010100", 
    20 => "10111011100100011101011010010111", 
    21 => "10111100101000011110101101000010", 
    22 => "00111110011000111101100110101001", 
    23 => "00111011100111000110010100100110", 
    24 => "10111110000011010000101111111010", 
    25 => "10111100011000101010011110010101", 
    26 => "00111101101101000111101011000110", 
    27 => "00111101100100000000010010111000", 
    28 => "00111101110001101101001100110001", 
    29 => "00111101010001001000110011000010", 
    30 => "10111101000000000111011011101001", 
    31 => "10111110000101111010010111110100", 
    32 => "00111110001001001110001011110011", 
    33 => "00111110000000110111011100011000", 
    34 => "00111100100110100010000010101000", 
    35 => "00111100000101111111001110010010", 
    36 => "10111101110001101010101111111001", 
    37 => "00111101011111110111011011110011", 
    38 => "00111110001001100111111001000001", 
    39 => "00111101010010111001110001001011", 
    40 => "10111110001101001001001110000110", 
    41 => "00111101000110011111111010101111", 
    42 => "00111101111000100100001101010111", 
    43 => "00111011110111000010011011011101", 
    44 => "10111101101011001010101101001100", 
    45 => "10111110011000010100111111001110", 
    46 => "00111100011000101010110010011110", 
    47 => "00111110010110000101000000010110", 
    48 => "10111110001101110000010110000101", 
    49 => "10111100101001111000100101111100", 
    50 => "00111110000110000110000100100000", 
    51 => "10111101001011101100011110101110", 
    52 => "00111100100100100111001011001001", 
    53 => "10111110000000011110111000100100", 
    54 => "10111010111000111000100001111011", 
    55 => "10111101110110100100001111111110", 
    56 => "00111011010100110100101111000010", 
    57 => "00111101000110010011011010011101", 
    58 => "00111101110110001001001111111011", 
    59 => "10111100101110110110110000011101", 
    60 => "00111101000100000101001111010101", 
    61 => "00111101101000000011000101100011", 
    62 => "00111100001111111111110011011011", 
    63 => "00111101101001011000001110110011", 
    64 => "10111101010010010010100100100100", 
    65 => "00111101001000101110000111000111", 
    66 => "10111101011001000110001110001101", 
    67 => "10111101111011111010011010011100", 
    68 => "10111011100010110001001110011010", 
    69 => "00111110000110100100010011001000", 
    70 => "10111110000001001010010011010011", 
    71 => "10111101111011100100011011010000", 
    72 => "10111101010110101010010000001011", 
    73 => "00111101110000101011110111011101", 
    74 => "10111101101001111001111111101101", 
    75 => "10111101111101011000010010110010", 
    76 => "10111100110010110010000110011100", 
    77 => "00111101100000110001011011100011", 
    78 => "00111101110001111101110000011101", 
    79 => "10111100110110011000010101111000", 
    80 => "10111101110000011110000000111111", 
    81 => "00111110000100001001001011001101", 
    82 => "10111100100010000000111000100001", 
    83 => "10111100001011101110100010110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_8 is
    component inference_mult_1_120_120_84_s_W4_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_8_rom_U :  component inference_mult_1_120_120_84_s_W4_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


