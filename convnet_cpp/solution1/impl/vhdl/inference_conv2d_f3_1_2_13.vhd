-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010000110100011011011011111", 
    1 => "10111101101111010111111000011101", 
    2 => "10111101011101111100100011111010", 
    3 => "10111100011110111001101111101101", 
    4 => "10111101011011100010101001100101", 
    5 => "00111101010011110101001100001010", 
    6 => "00111100001110100001101111110000", 
    7 => "00111011010100001110111001000101", 
    8 => "10111101011101001000100111000101", 
    9 => "00111101111110011000001010001000", 
    10 => "00111110001000011101001001011011", 
    11 => "00111100110111011011111011111000", 
    12 => "10111011100100001101001001001011", 
    13 => "10111101100100011011000010100100", 
    14 => "10111110000010011010011000101111", 
    15 => "00111010101101001010011010111011", 
    16 => "00111101110011010010111101011110", 
    17 => "10111101100110010110010001100011", 
    18 => "00111100110011001110100100011101", 
    19 => "10111101111010000110100000110100", 
    20 => "00111101100100101101111101111001", 
    21 => "10111101110110011110000111110100", 
    22 => "10111101011000000101010101000000", 
    23 => "00111100001011111011001011100001", 
    24 => "10111100000101100110111101111000", 
    25 => "00111101001111111110101011010010", 
    26 => "00111110001000000011011000000000", 
    27 => "10111110001011110000011001110000", 
    28 => "00111110000000010111111110000100", 
    29 => "10111101100100101011110001100101", 
    30 => "00111100101010111101101101010000", 
    31 => "00111101101110000101001100100000", 
    32 => "10111101010010100000011000010011", 
    33 => "10111101111110111110010101010100", 
    34 => "00111100000010110100011110000111", 
    35 => "10111101100011111100010110110011", 
    36 => "00111101000010000100111001101000", 
    37 => "10111101100110100110000111101110", 
    38 => "00111101111101001000110010110101", 
    39 => "00111101000111110110001000010110", 
    40 => "10111101100111101011100000001111", 
    41 => "10111100101100111001000110010010", 
    42 => "10111101100100100001010011110000", 
    43 => "10111100001110010100101000111001", 
    44 => "10111101011011110111101110000011", 
    45 => "00111110000000101111011111110101", 
    46 => "00111110000001000001110100001000", 
    47 => "10111101001101001111010111100001", 
    48 => "00111110001111111001101110011001", 
    49 => "00111100100001101110111010011100", 
    50 => "00111110000000110101000111011111", 
    51 => "00111101001000001110011110111100", 
    52 => "10111101110101110100000000111110", 
    53 => "00111101001010000111100010101010", 
    54 => "00111110001101101101001111111010", 
    55 => "10111100111001000001000110001101", 
    56 => "00111110001001101001001111000000", 
    57 => "00111101011111001101101110100011", 
    58 => "00111101001110001101011110000010", 
    59 => "00111101010100101010101001011100", 
    60 => "10111110001010101010100001100101", 
    61 => "00111100000101100010110101101001", 
    62 => "10111100010111110110001001100110", 
    63 => "10111101011101011001001001010011", 
    64 => "10111101101001101010001100111000", 
    65 => "00111110001100101011101111101101", 
    66 => "00111110001011111011110110101101", 
    67 => "00111101000111101101100111100000", 
    68 => "10111101101000000101100011011110", 
    69 => "10111101010100000010001101111111", 
    70 => "10111110000110110010010111110110", 
    71 => "10111101010111010110100100110010", 
    72 => "00111101101100111101101101010111", 
    73 => "00111011100000000101100011101011", 
    74 => "10111101101111000001010000011000", 
    75 => "10111101100001011001011011110000", 
    76 => "10111101001100111100111110100110", 
    77 => "10111101000011100010110101110000", 
    78 => "00111101100010010001000110100111", 
    79 => "00111101110110000000001011000001", 
    80 => "10111101101000001011110110100011", 
    81 => "00111110010010101000000101010110", 
    82 => "00111100011110111111101010111000", 
    83 => "00111110010010010101111110101011", 
    84 => "10111101000010011011111100010110", 
    85 => "10111110001001011100011100000100", 
    86 => "00111100101110011100000000010101", 
    87 => "10111100001011001110001100100010", 
    88 => "00111101111100010101101101010111", 
    89 => "10111101110101011111011011111101", 
    90 => "10111101101100011010110100100001", 
    91 => "00111101100101000011111011011001", 
    92 => "00111101100010000001000011011011", 
    93 => "10111011100000000001101111011010", 
    94 => "10111101100101000101000000001100", 
    95 => "10111100000010111111010111100010", 
    96 => "00111100110100101011011110010011", 
    97 => "10111100011111100000001100111011", 
    98 => "10111110000110000000000010101000", 
    99 => "00111110010001001011110100110100", 
    100 => "10111110010001000110010111101001", 
    101 => "00111100100111110111111000010101", 
    102 => "00111101010110010110001110110100", 
    103 => "00111110000001100110010011010100", 
    104 => "10111011101101100000111011011011", 
    105 => "00111100101001110110110000100000", 
    106 => "10111110001011000001101011001110", 
    107 => "00111101101101001110001010110000", 
    108 => "00111101110010111110011010100011", 
    109 => "00111100011011010111011010010001", 
    110 => "00111101110010001110100111101001", 
    111 => "10111101100010000010110101111011", 
    112 => "10111101110100100110101111111000", 
    113 => "00111101110011101100001000000101", 
    114 => "10111110001101001100111110001101", 
    115 => "10111101110001011010111100101001", 
    116 => "00111101111001101111110111101011", 
    117 => "00111110000000100101100111100010", 
    118 => "00111110010000111100100000011001", 
    119 => "10111011100000100110100110010010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_13 is
    component inference_conv2d_f3_1_2_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_13_rom_U :  component inference_conv2d_f3_1_2_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


