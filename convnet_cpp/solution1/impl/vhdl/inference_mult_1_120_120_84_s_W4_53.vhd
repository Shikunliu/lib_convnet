-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_53_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_53_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011100011101010001010000101", 
    1 => "00111100100010000101101101001110", 
    2 => "10111010100101101110000000101100", 
    3 => "00111100000011001101010000000100", 
    4 => "10111101110111000000001010110000", 
    5 => "10111101100000000100010001010001", 
    6 => "00111100111101010000101111100110", 
    7 => "00111011011110100100001001010001", 
    8 => "10111101100000101110000011111110", 
    9 => "00111101100100101100100100010110", 
    10 => "00111101110100101111011011101000", 
    11 => "10111100111101110000010110000101", 
    12 => "10111101101010000000101101110101", 
    13 => "00111101111000110100101110010100", 
    14 => "00111101010000010100010001101110", 
    15 => "10111101011010000011101010110010", 
    16 => "00111101110101011100100111100110", 
    17 => "00111011100100100111000111001000", 
    18 => "10111110010100011111001001010110", 
    19 => "10111101011000100110011111101111", 
    20 => "00111110001111101010011001111111", 
    21 => "00111101101111010011010101011000", 
    22 => "00111100111111110010000111101001", 
    23 => "00111101000010001010000010111000", 
    24 => "10111101110011101110001010000110", 
    25 => "00111110001000110111101010000001", 
    26 => "00111110001111000011011110100100", 
    27 => "10111100001100111011000000110001", 
    28 => "10111100011110010011010100001011", 
    29 => "10111101011111101110001001000011", 
    30 => "10111110001101101001110101110011", 
    31 => "10111101110110010100101011110101", 
    32 => "10111101110100000001100001100001", 
    33 => "10111101110011101110110001111101", 
    34 => "10111101101000010110001001000011", 
    35 => "00111110001100111100111001100100", 
    36 => "00111101100111010011011110001100", 
    37 => "00111101001011000101100010011110", 
    38 => "00111100111001100111101100101001", 
    39 => "00111100111010100111110111101101", 
    40 => "00111101010110000001001000101011", 
    41 => "10111100100100010110101111001110", 
    42 => "10111101110101011101000010110111", 
    43 => "00111101110101010111100000011100", 
    44 => "10111110000000001011111110100001", 
    45 => "10111110000000100101111011011101", 
    46 => "10111100000010011010110101010011", 
    47 => "10111101110111000100111000101111", 
    48 => "00111101111000110110001000100000", 
    49 => "10111101110010111001111010001100", 
    50 => "00111101110101111111000001100111", 
    51 => "10111010010101010010010111110011", 
    52 => "00111100011111100100001011111100", 
    53 => "10111101101010011000111010010111", 
    54 => "00111110000001011110100011010101", 
    55 => "10111101101011100001101111000101", 
    56 => "00111110000101111110010111101011", 
    57 => "00111101110101101000000001011010", 
    58 => "10111101001110100011011000001100", 
    59 => "10111101000000000110110000110111", 
    60 => "00111110001011110011111110010110", 
    61 => "10111110000111110000111111100000", 
    62 => "10111110010000100111010010011111", 
    63 => "10111110001001001000101011011111", 
    64 => "00111101110100000101110110010110", 
    65 => "00111110000010110010011110001001", 
    66 => "00111101101110101110001011110101", 
    67 => "10111101100101011101001100000110", 
    68 => "10111101100000010010111111101110", 
    69 => "10111101100111011010101010100000", 
    70 => "00111101110001011000011111001010", 
    71 => "00111101010101011101001111110111", 
    72 => "00111101100111010101010100011101", 
    73 => "10111110011011010001011110000011", 
    74 => "00111011111101000111011101001011", 
    75 => "10111110000010001110000111010110", 
    76 => "10111011111110000111010010011011", 
    77 => "10111100101011010010010001011011", 
    78 => "10111110001010001010000010010000", 
    79 => "10111100010101011100011001110001", 
    80 => "00111110000100000111010000100001", 
    81 => "10111101001110010001101101011010", 
    82 => "00111101100110100000001110011100", 
    83 => "10111110000001011111101000100010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_53 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_53 is
    component inference_mult_1_120_120_84_s_W4_53_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_53_rom_U :  component inference_mult_1_120_120_84_s_W4_53_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


