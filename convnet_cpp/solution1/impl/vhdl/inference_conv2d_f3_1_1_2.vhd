-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100011110000011000111011", 
    1 => "00111110000011111101001000100000", 
    2 => "10111101001011101010110101011101", 
    3 => "00111101110011000001000111111111", 
    4 => "00111101001001001110001100101001", 
    5 => "00111101000000011111001111011011", 
    6 => "10111100000010101011101001111001", 
    7 => "10111101001111000110001010000111", 
    8 => "10111011100011011001010110010101", 
    9 => "10111101110011101000100001011001", 
    10 => "00111101011111011001001100111110", 
    11 => "10111101011011011110000011001001", 
    12 => "10111101000100010101101000010101", 
    13 => "10111110010000101111101010010100", 
    14 => "10111100100110000101011110110000", 
    15 => "00111110000011001110111001011011", 
    16 => "00111100110011000001101111001101", 
    17 => "00111101101101011001111101101111", 
    18 => "10111110000001011100111010011110", 
    19 => "10111110000101010110100101101110", 
    20 => "10111101010010101000111111000001", 
    21 => "10111101101000100111111110101111", 
    22 => "10111110000111111010001010101101", 
    23 => "10111101000001111111100011011000", 
    24 => "10111101001111001100101010001100", 
    25 => "10111110000010011100110100111110", 
    26 => "00111101111100111011000100000111", 
    27 => "10111001001001100100011100100111", 
    28 => "10111101101010011111111011111111", 
    29 => "10111110000101100101101011011110", 
    30 => "00111101100100101011011110101110", 
    31 => "00111100110000001100000000011001", 
    32 => "10111100110011010100101101111000", 
    33 => "10111011101110101001011011101010", 
    34 => "10111011101101100001011000010010", 
    35 => "00111101100100111110110101000101", 
    36 => "10111101010001011101110110010000", 
    37 => "10111101000100010101000110010111", 
    38 => "10111101011010101000001000000100", 
    39 => "00111101110101001010111101001111", 
    40 => "00111011110101011010100000101000", 
    41 => "10111110010010110101100001001011", 
    42 => "10111110001101101111011001010001", 
    43 => "00111101100011100101000110011101", 
    44 => "10111100101111011100001101000101", 
    45 => "00111100000110101000100010010111", 
    46 => "00111100001100110000000011011110", 
    47 => "00111001010111011100101001100101", 
    48 => "00111011100110101001100110110100", 
    49 => "10111101110101000001100011010111", 
    50 => "10111110000101101100001011110000", 
    51 => "00111100011100100110001111001011", 
    52 => "00111110000101001101001011110110", 
    53 => "10111110001100011111110111011111", 
    54 => "00111011000001010111100101111100", 
    55 => "00111101101100101011110101110010", 
    56 => "00111101110000011110100100000001", 
    57 => "00111110000000111000010111000110", 
    58 => "00111110000001011000001110100101", 
    59 => "10111101001111110111111110101000", 
    60 => "00111101000110011100100000101000", 
    61 => "10111110000010101110010110111101", 
    62 => "10111110001010000000000011101011", 
    63 => "00111101110000110101100100110110", 
    64 => "00111100101001100101101100010011", 
    65 => "00111101110011100001111011110111", 
    66 => "00111100111101111011101000010110", 
    67 => "10111110000010101001100011101110", 
    68 => "10111101010011111111001100101000", 
    69 => "10111101100111011111110100100110", 
    70 => "00111101001100001101001100000111", 
    71 => "00111110000011010110111101010100", 
    72 => "10111101100011011110011110110101", 
    73 => "10111101000011101011011010010111", 
    74 => "00111101010011000011101001101011", 
    75 => "00111101011000000010110100010111", 
    76 => "10111101011001100011000100000111", 
    77 => "00111100110100100111010100011000", 
    78 => "00111100101011000000111110111110", 
    79 => "10111101010111000000001001011111", 
    80 => "00111101100100010110000010010101", 
    81 => "00111100111000011010000010011001", 
    82 => "10111110000111010101010010010111", 
    83 => "00111101111010011111100101001000", 
    84 => "10111101101101100100110011101011", 
    85 => "00111101101111000011101000110110", 
    86 => "10111101011000000111110110111001", 
    87 => "10111110000111010010110110001000", 
    88 => "00111100110111000010010000100011", 
    89 => "10111011010010110110100000011110", 
    90 => "10111101011001111011111101100010", 
    91 => "00111100100111101001001011001000", 
    92 => "00111110000001101011000111100110", 
    93 => "10111101110101111001011111001100", 
    94 => "10111110010001001111110101101101", 
    95 => "00111101111100111000101111001110", 
    96 => "10111101100001011001011010000101", 
    97 => "00111110000101000001110010000010", 
    98 => "10111011110100000111001001011110", 
    99 => "00111101110010001011011101111001", 
    100 => "00111101110001110010111101001111", 
    101 => "00111101000100011101010101100101", 
    102 => "00111100110110010001111000010100", 
    103 => "00111101011010000110100001101001", 
    104 => "00111011101010011000011000100001", 
    105 => "10111101011000000101010011010100", 
    106 => "00111100110110111101011100101100", 
    107 => "10111110000010011101010000001111", 
    108 => "10111101001101000111011110111100", 
    109 => "00111110000000001000101111111100", 
    110 => "10111101100100100110011011110000", 
    111 => "00111100111100100110100000110010", 
    112 => "00111101000101000111010000101011", 
    113 => "00111101011100000001001101011001", 
    114 => "00111101010001010110101110010101", 
    115 => "10111100111010011110110000101101", 
    116 => "00111101101101010110010101110010", 
    117 => "00111110001101111111110110000010", 
    118 => "10111101111001000111011011110011", 
    119 => "00111100011111101001011011011111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_2 is
    component inference_conv2d_f3_1_1_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_2_rom_U :  component inference_conv2d_f3_1_1_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


