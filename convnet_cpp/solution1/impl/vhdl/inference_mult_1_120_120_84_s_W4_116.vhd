-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_116_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_116_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011101010111111011001010011", 
    1 => "10111101000011111011111111100001", 
    2 => "00111110000000001111111111011010", 
    3 => "10111011111011001101101111110110", 
    4 => "10111110001101110100101001110111", 
    5 => "10111101011110000010101000101110", 
    6 => "10111100111011010111011111010011", 
    7 => "00111101100101000110101101000010", 
    8 => "10111101100111101000100000010110", 
    9 => "10111101101011011101100101010111", 
    10 => "10111110000101111111011101111011", 
    11 => "10111100110010101010100111011101", 
    12 => "00111101101100001011111000110110", 
    13 => "00111101000110011010000001010000", 
    14 => "00111110001010010111101011101110", 
    15 => "00111100010011101000011101001101", 
    16 => "10111101000010111000110000100101", 
    17 => "10111110001010100110000000001011", 
    18 => "00111101100001100010100101111010", 
    19 => "10111110000101100001110100000000", 
    20 => "10111101000100011101111101011011", 
    21 => "00111100101000001000111011101100", 
    22 => "00111101110001101010011110011111", 
    23 => "10111101111010101010111010110000", 
    24 => "00111110000011101110110001111101", 
    25 => "00111101100111000001111010100010", 
    26 => "10111110011011110010101101100111", 
    27 => "10111101100101101001000100111100", 
    28 => "10111100011110110010000101110100", 
    29 => "10111101010110011011010010001100", 
    30 => "00111110000100001010000101111011", 
    31 => "00111101001011101101001101101101", 
    32 => "00111101110110001110110000010000", 
    33 => "10111101010100100100000111101100", 
    34 => "10111101100010110001101000011101", 
    35 => "10111101011100011111001011000001", 
    36 => "00111110000111001001110101011010", 
    37 => "00111011111000110100000000010110", 
    38 => "00111010101000111011101111011100", 
    39 => "10111110000010001011010111001100", 
    40 => "00111101101111110000010100000110", 
    41 => "10111110010011011010010111011011", 
    42 => "00111101100011000101111011110110", 
    43 => "00111100010011110101100100000100", 
    44 => "10111100101000110011101010011000", 
    45 => "00111101101101110011011111110101", 
    46 => "00111100100001101110111000110001", 
    47 => "10111100110101101101010100101111", 
    48 => "00111101011110101101001011001111", 
    49 => "10111100111011111010000101111001", 
    50 => "00111100111011011101101110100110", 
    51 => "00111101101101000100100101010110", 
    52 => "00111101111111011001110110111011", 
    53 => "00111110001111000001110101101101", 
    54 => "00111101101010001101100001001100", 
    55 => "00111100111101011001110000101111", 
    56 => "00111101100101111010001000010011", 
    57 => "00111100101011010101101011100010", 
    58 => "10111101100011100101100110010101", 
    59 => "10111100100011111001011101001101", 
    60 => "10111101100110110011000111101010", 
    61 => "10111110100010000001100101001100", 
    62 => "00111101100101000111001101000111", 
    63 => "10111110001110001101101110001100", 
    64 => "00111100110001111110101001111010", 
    65 => "00111100110011100110010100011110", 
    66 => "10111101111110111010000000011111", 
    67 => "10111110000010000111101100010100", 
    68 => "00111110001111110110010010001100", 
    69 => "10111101001011110100110110010110", 
    70 => "10111110010011101100111101100100", 
    71 => "00111101110010110001110100100111", 
    72 => "00111110100000110110011100111100", 
    73 => "10111110000010001110011110011011", 
    74 => "10111010101100001011001010111011", 
    75 => "10111100000011111101010101001011", 
    76 => "00111101001100101100111111100110", 
    77 => "00111100001001000011011100010111", 
    78 => "10111100001001100000110101000101", 
    79 => "00111101101000000000010011010011", 
    80 => "10111100001100110100101110000111", 
    81 => "10111101110011101110011111000101", 
    82 => "00111110000001110111001010010011", 
    83 => "10111110001011101111011000110000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_116 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_116 is
    component inference_mult_1_120_120_84_s_W4_116_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_116_rom_U :  component inference_mult_1_120_120_84_s_W4_116_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


