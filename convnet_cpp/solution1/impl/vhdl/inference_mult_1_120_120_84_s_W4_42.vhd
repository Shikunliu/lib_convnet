-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_42_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_42_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011001001110011101110110", 
    1 => "10111101110101100010101101101011", 
    2 => "10111100010000000110101110010101", 
    3 => "00111101101000001001011101101010", 
    4 => "00111101110100111010011100010001", 
    5 => "00111101100101110000000011001110", 
    6 => "10111101111000011100100000100001", 
    7 => "00111110001011001100101011110111", 
    8 => "00111101110010100011010001011111", 
    9 => "00111101101010110011101100001010", 
    10 => "00111100110100110001111110010111", 
    11 => "10111101001011010101100000101000", 
    12 => "00111110000111100100110100011010", 
    13 => "00111101100011000101000010110011", 
    14 => "00111101110000100111110001010100", 
    15 => "00111101100000010111001010111001", 
    16 => "00111101101011001010000001001010", 
    17 => "00111101000110111011101011000001", 
    18 => "10111101011110010100001110000011", 
    19 => "00111010100001100110000010101101", 
    20 => "10111101101100100110011110111001", 
    21 => "10111101011100110111111010011000", 
    22 => "00111101010101110001001010111100", 
    23 => "10111101110011000001100011101011", 
    24 => "00111101100010110100011110011111", 
    25 => "10111101100101001101011010111100", 
    26 => "10111100011110100011110110110100", 
    27 => "00111011000001111000001111101101", 
    28 => "00111100100101010111000011100000", 
    29 => "00111101110010100011110001010111", 
    30 => "10111110010001001110111101000110", 
    31 => "00111101111000011010011100011010", 
    32 => "10111011010000101101011100101011", 
    33 => "10111101001110101011001010011110", 
    34 => "00111101100101100101110110001010", 
    35 => "10111101100000110100101001000101", 
    36 => "10111101100110001000011100100011", 
    37 => "10111101110000100110011111100010", 
    38 => "00111110001111011110110100101001", 
    39 => "00111101100011100111001000101100", 
    40 => "00111101101011110000111001101000", 
    41 => "10111101110000010110000010010101", 
    42 => "00111110000000001100010100100010", 
    43 => "00111100010111010110100000100110", 
    44 => "00111110000010101001100011101110", 
    45 => "10111100011011101011010011101010", 
    46 => "10111101101110001010111111011111", 
    47 => "00111101101101001101010101101101", 
    48 => "00111100100101001010100001100011", 
    49 => "00111101000101001011010010101000", 
    50 => "00111100100110111001100011100011", 
    51 => "10111110010000101110100101000111", 
    52 => "10111101111010111100010110011100", 
    53 => "00111101011111101001001000100111", 
    54 => "10111110001000000100000101000110", 
    55 => "00111101101000111101110001001000", 
    56 => "00111110000011001101011010000000", 
    57 => "00111101011101101111101111100000", 
    58 => "00111101011100101100101010001101", 
    59 => "10111101111110001011011010010101", 
    60 => "00111101011111101010010111011101", 
    61 => "00111110001010000011111110010010", 
    62 => "10111011101110111110001110011011", 
    63 => "00111100110111001111001010110101", 
    64 => "00111101010010110011001000101101", 
    65 => "10111101110101110110110001001000", 
    66 => "10111101110010101100110000110100", 
    67 => "00111101101010011111010110011101", 
    68 => "10111110000010100101010011000101", 
    69 => "00111100010101000001001010100111", 
    70 => "10111101001000011001100011110010", 
    71 => "10111110001010111111001001101111", 
    72 => "10111101111001111010001100010010", 
    73 => "00111110000010011001110100000010", 
    74 => "10111110000110000101010011001110", 
    75 => "10111110000110100111110100100100", 
    76 => "10111101111010011001000111111111", 
    77 => "00111100111011100101001100101111", 
    78 => "00111101100011001100010111101111", 
    79 => "00111101100111110111111101010111", 
    80 => "00111101010110110011000011111001", 
    81 => "00111101111101110110010111111110", 
    82 => "00111110000100010110011001011010", 
    83 => "10111101011000000010100100000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_42 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_42 is
    component inference_mult_1_120_120_84_s_W4_42_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_42_rom_U :  component inference_mult_1_120_120_84_s_W4_42_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


