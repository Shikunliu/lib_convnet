-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111101100010001100000111", 
    1 => "10111100100000011000000011010100", 
    2 => "10111101100111001001000010001111", 
    3 => "00111110000101010011100100110010", 
    4 => "00111110000101000111010111100110", 
    5 => "10111101010011001011111010001010", 
    6 => "00111101101011001100000101010001", 
    7 => "10111110010111000110010010111011", 
    8 => "00111101001010111011111100011011", 
    9 => "00111100100000101001011001001000", 
    10 => "00111101110011110100011000100100", 
    11 => "10111101100110011101000111110110", 
    12 => "00111101010011110111101010101100", 
    13 => "00111101100001110110101001001010", 
    14 => "00111101110101010110010000110000", 
    15 => "10111101100110101011110101010000", 
    16 => "10111100111111011100110111110111", 
    17 => "00111011011011100111010011101000", 
    18 => "00111110001111111001000010010111", 
    19 => "00111110000101111111000101110011", 
    20 => "00111110010001010111011011001101", 
    21 => "00111110000010110011111100100001", 
    22 => "10111101011110001101001000101001", 
    23 => "00111101111100111101100101100110", 
    24 => "00111101111001010100100110110110", 
    25 => "10111101100000010101001010100011", 
    26 => "10111101101110111011011011111011", 
    27 => "00111011111010011011111110001100", 
    28 => "00111101100111001001000100100011", 
    29 => "00111101000110011000001011110011", 
    30 => "10111101111011110110010100010011", 
    31 => "00111101100000110000000101001010", 
    32 => "00111011110010101000110000000000", 
    33 => "00111110001000000101100010011011", 
    34 => "10111110000101000100110010111110", 
    35 => "00111100000011111001010011011110", 
    36 => "00111101001010101100000010000011", 
    37 => "00111101110011110111101000001011", 
    38 => "10111110001100010111010111010001", 
    39 => "10111101111101001011011010100110", 
    40 => "00111101000000011010011001000011", 
    41 => "00111101111100001111000111110101", 
    42 => "00111100111110011011001100010101", 
    43 => "00111101010010101010001101011101", 
    44 => "00111101100101011000111100100001", 
    45 => "10111101000001110000000101000110", 
    46 => "10111100111101110001110000101100", 
    47 => "10111110001010010011010100110011", 
    48 => "00111110010011001111001110011001", 
    49 => "10111101111110010001101111000101", 
    50 => "00111101100101101100010011100000", 
    51 => "00111100010001011011011100101111", 
    52 => "00111110000001100000011011111011", 
    53 => "00111101111101001111010110010000", 
    54 => "00111110000011010111101001010111", 
    55 => "10111010111011010010111001101100", 
    56 => "10111101110111011011011111110001", 
    57 => "10111011110111010011111011001010", 
    58 => "10111101101101001010101101100000", 
    59 => "00111110000011110110000110101010", 
    60 => "10111100110100010010001000110010", 
    61 => "10111101010100011001110110110111", 
    62 => "10111110000001111001001000001000", 
    63 => "00111101000101010111010101100011", 
    64 => "10111110001001010110001100100100", 
    65 => "00111101110000000101101000000101", 
    66 => "10111101010101010111110011010100", 
    67 => "00111110001100010111011000010100", 
    68 => "00111100000111100000001001101010", 
    69 => "00111101101101101001000101001001", 
    70 => "00111101101100110011111010000110", 
    71 => "00111100101110000011100100101100", 
    72 => "00111101000101001100011110111110", 
    73 => "00111101110011110110101001010001", 
    74 => "00111110001001000101010010011011", 
    75 => "00111101111000110010001010101111", 
    76 => "10111101110000101100101010110110", 
    77 => "10111100010001001111111111100100", 
    78 => "00111101011100100101000010011010", 
    79 => "10111110001000110111100100110001", 
    80 => "00111110000001000110101000011010", 
    81 => "10111101110101111000010111111001", 
    82 => "10111101001001111100000110110000", 
    83 => "00111101010001011110111110011001", 
    84 => "00111100010110100110011000010011", 
    85 => "10111110010011000101111000101101", 
    86 => "10111100000011011011001011110001", 
    87 => "00111101100100111010111001001110", 
    88 => "10111101101101011011100111101001", 
    89 => "10111011000011010111100110100110", 
    90 => "00111101100110110011110000111110", 
    91 => "00111101010011100111000111101000", 
    92 => "00111100011100111011100100110101", 
    93 => "00111011100111000111010000111111", 
    94 => "10111101111100101010001001111111", 
    95 => "10111101110110010110011101000101", 
    96 => "00111100100111010110001101010011", 
    97 => "00111011110001101000001001000101", 
    98 => "00111001111100110011100100110111", 
    99 => "10111101111001000101100110010110", 
    100 => "00111101000110000011011110011010", 
    101 => "10111101101100101010001000101111", 
    102 => "10111100111000100011110010100001", 
    103 => "00111011101010010110101110011111", 
    104 => "00111110001100001001110100000110", 
    105 => "10111011011000111111111101000011", 
    106 => "00111110010001011111110011000010", 
    107 => "10111110000101010010001100101101", 
    108 => "10111110000011001110100110100011", 
    109 => "00111101100010011110110100000100", 
    110 => "00111100101011101110001010100001", 
    111 => "00111100111111111000101111010001", 
    112 => "10111101110010010001100111110000", 
    113 => "10111110000011000100100001101011", 
    114 => "10111101000111001011110100100000", 
    115 => "10111100101100000010001110110100", 
    116 => "10111101000011011011100001101010", 
    117 => "00111101110111101110110011000000", 
    118 => "00111110001001000010101001100111", 
    119 => "10111101101010000110100011000111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_6 is
    component inference_conv2d_f3_4_3_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_6_rom_U :  component inference_conv2d_f3_4_3_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


