-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_11_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_11_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011011110111101001100100000", 
    1 => "10111101010010110010010111101001", 
    2 => "00111100101001011110010010010110", 
    3 => "00111101110000010010010001001010", 
    4 => "10111101000010010111110000110000", 
    5 => "00111011011111001110101101001110", 
    6 => "10111110001110101001100111111010", 
    7 => "10111101101110100011010100001101", 
    8 => "00111010001010111000001111101100", 
    9 => "00111100101011010110010000011100", 
    10 => "10111101111100001101011110111111", 
    11 => "10111100110001001001010010000101", 
    12 => "10111101100000101001110111010101", 
    13 => "10111100111100011111010000000011", 
    14 => "10111101100011011001100001101111", 
    15 => "10111101010110010110001000100001", 
    16 => "00111101101110100110000001000001", 
    17 => "10111110010100110110111010110101", 
    18 => "10111100101000000001000011100010", 
    19 => "00111101100010111011101111001110", 
    20 => "00111101100010001100000100000100", 
    21 => "10111101101011011101100010011011", 
    22 => "00111101100001001010111010010011", 
    23 => "10111101111001111101000110111011", 
    24 => "00111101110111101111010000010111", 
    25 => "10111101111111001100000110000111", 
    26 => "00111101111110111111111100000100", 
    27 => "00111101111111100110110011010011", 
    28 => "10111100001000011010101110000001", 
    29 => "00111100110111000110100001001011", 
    30 => "00111101101100100010000011001010", 
    31 => "00111101100001010101101001110000", 
    32 => "10111110000110011001110111001011", 
    33 => "10111100101000110010011110111000", 
    34 => "10111110001100011000011100011110", 
    35 => "10111101000010101101010001010101", 
    36 => "10111100010001010001010110110100", 
    37 => "00111101101110010111001100000011", 
    38 => "10111101011111100000011110111101", 
    39 => "00111110000001110101000110001011", 
    40 => "00111101100110101010000011001011", 
    41 => "00111100111010010110101001011101", 
    42 => "00111100111010010001001111000000", 
    43 => "10111101011010100000100101101110", 
    44 => "00111101101100110000001010011001", 
    45 => "10111101011001001101000111011100", 
    46 => "10111101100001101111010100011100", 
    47 => "00111010111001000010010011011000", 
    48 => "00111101001000000101100101010111", 
    49 => "00111101001001100100000110110011", 
    50 => "10111110001001000110000111111010", 
    51 => "00111100110001100010001101100101", 
    52 => "00111101001101100111111110111001", 
    53 => "10111010101011011111001111000100", 
    54 => "00111101001111110010100000011001", 
    55 => "00111100100010010000100000011100", 
    56 => "00111101111010000111010101001111", 
    57 => "00111100111111000011100110100010", 
    58 => "10111101100110110111001100110000", 
    59 => "10111101010011110010010100011100", 
    60 => "00111110000111111111111110111101", 
    61 => "10111011010011100111000000010000", 
    62 => "00111101100111101000111010100100", 
    63 => "00111101110000001010101110011001", 
    64 => "00111101101001100111111010101101", 
    65 => "00111100000001001001101011011010", 
    66 => "00111101101100110000100110111011", 
    67 => "00111011010100010110011010010000", 
    68 => "00111101111000000000111100110100", 
    69 => "00111011110101101101000100110011", 
    70 => "10111101111000101000100110011000", 
    71 => "00111101001100111111111000011001", 
    72 => "10111101100110000100000000011000", 
    73 => "00111101010010101010110011001100", 
    74 => "10111100111001110111110001000110", 
    75 => "00111101101000110101100010110000", 
    76 => "10111101100110001000001010000110", 
    77 => "10111101001100100011000101011011", 
    78 => "00111101000000010100100110010001", 
    79 => "00111110001110001111000100001011", 
    80 => "10111101110111111110111100111001", 
    81 => "10111101100000111100111100101101", 
    82 => "10111101111100101001010011011101", 
    83 => "10111101101100110011011010110110", 
    84 => "00111101101111011100111000101100", 
    85 => "10111101001001101100100010100111", 
    86 => "10111100101100000010001101111111", 
    87 => "10111011111101110101110110011010", 
    88 => "00111101111110010111011011111111", 
    89 => "00111101000110011111111111110001", 
    90 => "10111101111110010111011011111111", 
    91 => "00111100111000110000001111011011", 
    92 => "00111101101101000101110110101101", 
    93 => "00111101011011110000111011100001", 
    94 => "00111010111010001110010010000101", 
    95 => "10111101010101111110000011100010", 
    96 => "10111101101010001000100111110111", 
    97 => "00111011100001000101010000001101", 
    98 => "00111110001100010001000101101011", 
    99 => "00111101001010010100010000010111", 
    100 => "00111011100001000111100110110111", 
    101 => "10111110000011110001001111001111", 
    102 => "10111101000100100000010010010101", 
    103 => "10111101110000100000110011101011", 
    104 => "00111101010010011101100010101100", 
    105 => "10111011111010000001000000011111", 
    106 => "10111101110001100010111110001111", 
    107 => "10111100011101111111110010010001", 
    108 => "10111101011111101001111010100001", 
    109 => "00111110001000011000101100001101", 
    110 => "10111101101100111100011111100011", 
    111 => "00111101110111011100100111000101", 
    112 => "00111101001111000000111100001111", 
    113 => "00111100101010001110101101111100", 
    114 => "00111101101110101111101010001101", 
    115 => "10111011100000100001011000000101", 
    116 => "10111101001100011111111110001100", 
    117 => "00111011111001011000001011010001", 
    118 => "10111110000010100001110111111100", 
    119 => "10111101110000011001011000010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_11 is
    component inference_conv2d_f3_2_4_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_11_rom_U :  component inference_conv2d_f3_2_4_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


