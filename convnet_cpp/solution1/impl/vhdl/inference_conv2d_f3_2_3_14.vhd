-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_3_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_3_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100011111111001001101100", 
    1 => "00111101111000101111110011110000", 
    2 => "00111101111101000000000000110010", 
    3 => "10111100101100011110110101001101", 
    4 => "00111101110111010011100100010001", 
    5 => "10111101101101110001010111101110", 
    6 => "00111101111000110110011001010001", 
    7 => "00111101101011001111101011001000", 
    8 => "10111101101101001010011001100101", 
    9 => "10111110001110001001110011100101", 
    10 => "00111110001011010110101000010110", 
    11 => "00111101111100010010111011000111", 
    12 => "00111110001110001001000011010110", 
    13 => "10111101111100010101000101100001", 
    14 => "10111101100101111011010011100101", 
    15 => "10111101111100110110110011011111", 
    16 => "10111100010010101011111110101100", 
    17 => "10111101000010010010010101000011", 
    18 => "10111101101110110110110000001111", 
    19 => "00111110000011101100001010001011", 
    20 => "00111110000010111100110011110011", 
    21 => "00111100010011111111010010011111", 
    22 => "00111101100010001010010110100110", 
    23 => "00111100110001110000001100101010", 
    24 => "00111101010101100001101110110000", 
    25 => "00111101101111000011101011110001", 
    26 => "10111101110110110011110010000010", 
    27 => "10111101110111110001010100011110", 
    28 => "00111101101101011001001101000101", 
    29 => "10111101110001100011000010000001", 
    30 => "10111101100110101000010100001111", 
    31 => "00111100011001110011011000000101", 
    32 => "00111101110010011111011110001101", 
    33 => "00111100111101011101101011100011", 
    34 => "00111101001101110101000001100100", 
    35 => "10111110000000100011100101100000", 
    36 => "00111110000101101001010110010110", 
    37 => "10111101110111110111010000000100", 
    38 => "10111101001001111010101111100001", 
    39 => "00111100100100101111010010011010", 
    40 => "10111100101011101000000100011101", 
    41 => "00111101110011101010010000100011", 
    42 => "10111110001000010000110110111111", 
    43 => "00111110000101000101101001100000", 
    44 => "00111101000001100011001000101110", 
    45 => "10111101000001001010100111001110", 
    46 => "10111110010010011011010100100000", 
    47 => "10111100111001110111111010010100", 
    48 => "10111101111101101100000001010001", 
    49 => "00111100111010010100101110111110", 
    50 => "00111011100001000100000101000011", 
    51 => "00111100110101010110111011111101", 
    52 => "10111010110011101010111101010000", 
    53 => "00111101000010101110111010001011", 
    54 => "00111100011011010000000001001001", 
    55 => "00111101010001010010000111000011", 
    56 => "00111110000101110111001011010110", 
    57 => "10111100111011010100000110000010", 
    58 => "10111101111110011101010111100101", 
    59 => "00111110000100001100010011011111", 
    60 => "10111110001110111111001100111000", 
    61 => "00111100011111110000101010100010", 
    62 => "10111110011001000000111011100000", 
    63 => "10111101101010110110010001011010", 
    64 => "10111100001111000101010001000100", 
    65 => "00111101101010100100011000110010", 
    66 => "00111110001111100110111001100101", 
    67 => "10111110000000110001110100101110", 
    68 => "00111100101010001010110111010100", 
    69 => "10111101110011011101100111000010", 
    70 => "00111101110010010111000101100011", 
    71 => "00111101101000010111001001011011", 
    72 => "10111101011011100110000001001011", 
    73 => "00111110010011000000101100010011", 
    74 => "10111100100011001001000001100111", 
    75 => "10111110001000111101100111101100", 
    76 => "10111101101010001010000110001111", 
    77 => "10111100101111101011000011100000", 
    78 => "10111101010101010111111100100011", 
    79 => "10111011110111100101100110101000", 
    80 => "10111100000011101101010110100110", 
    81 => "00111101000011000001001010010011", 
    82 => "00111101111101011010111100101001", 
    83 => "00111011000110001000110111010110", 
    84 => "00111101110111010110011100110100", 
    85 => "10111101111101100110010010010001", 
    86 => "10111101010101010010010100010000", 
    87 => "10111101100101001111100010110110", 
    88 => "00111100001101011010001000001110", 
    89 => "00111110001000001110010110100011", 
    90 => "10111110001001011010010011110000", 
    91 => "10111101011010101100101110000110", 
    92 => "10111101100101000101010111010000", 
    93 => "10111101100000100011110001000011", 
    94 => "00111101011011011000010111000101", 
    95 => "00111011000011100001000100100101", 
    96 => "10111100100010100111001111000010", 
    97 => "00111110000011101110010100100110", 
    98 => "10111110000101000001111110100111", 
    99 => "10111101100011111100110110101011", 
    100 => "00111100100010101110110011000011", 
    101 => "10111101100010001011100010000110", 
    102 => "00111100101000001001100011111101", 
    103 => "00111100010001100101111010001001", 
    104 => "00111101101111100111000111110110", 
    105 => "10111101000100011100010111100000", 
    106 => "00111101001001001100001100101110", 
    107 => "10111100111010000000010011001100", 
    108 => "10111100110011101111000001011110", 
    109 => "00111100111010111010111100010000", 
    110 => "00111110000000110011011011011111", 
    111 => "10111110001001010101110010010110", 
    112 => "10111101001111110100110111011001", 
    113 => "10111101001010010110110000100101", 
    114 => "10111110000101001110110110110011", 
    115 => "00111110010000111101010001101011", 
    116 => "00111101000011000000111000101011", 
    117 => "10111101100011001000001100110001", 
    118 => "10111101000101001011100100010000", 
    119 => "00111101110100111101110000000101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_3_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_3_14 is
    component inference_conv2d_f3_2_3_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_3_14_rom_U :  component inference_conv2d_f3_2_3_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


