-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001110101101100011111111", 
    1 => "10111101101001111101010010010000", 
    2 => "10111101110111111111010011111101", 
    3 => "10111011011110010111010001110110", 
    4 => "10111101110011111111010101000001", 
    5 => "10111101111110010110110100001001", 
    6 => "10111110000100001001110100000110", 
    7 => "00111101001001000011011110000010", 
    8 => "10111100000011000000010011100110", 
    9 => "00111101100000010001001000100110", 
    10 => "10111101011100111101100110011100", 
    11 => "10111110010110000101010101010100", 
    12 => "00111110001010011000111011011010", 
    13 => "00111110000000010000011000100101", 
    14 => "00111101001000111000010011010101", 
    15 => "10111101111000001010100111011111", 
    16 => "00111101010001000111100110101101", 
    17 => "00111110000010000000111111011100", 
    18 => "00111101010101110111101100010001", 
    19 => "00111101011011101101011100011001", 
    20 => "00111101000111110010110011010001", 
    21 => "10111101101110100110010100111100", 
    22 => "00111101001010101010011100001000", 
    23 => "10111101010010001010100100000001", 
    24 => "00111100111011111101111010110101", 
    25 => "10111011110111011011010100100111", 
    26 => "10111101110010101000000101111110", 
    27 => "10111100100110110011000000000111", 
    28 => "10111110010101101000011001100010", 
    29 => "10111101100110000101011000111000", 
    30 => "10111101010110110010011101010011", 
    31 => "10111101010000100010011000110000", 
    32 => "10111101011011001010101100111111", 
    33 => "00111101100000001010000100010000", 
    34 => "00111100001001001100100100001101", 
    35 => "00111101111011100000011001010011", 
    36 => "10111100110011110000101110100001", 
    37 => "10111100101001001010100101100010", 
    38 => "00111101001110011000111101101110", 
    39 => "10111101000111100101000110101010", 
    40 => "00111101110101000111111100010011", 
    41 => "10111110000011101101111001010101", 
    42 => "00111101111100100100000110000001", 
    43 => "10111101110000110101111111111001", 
    44 => "00111001111101100110010101011110", 
    45 => "00111101111101011110010100101010", 
    46 => "10111110000111100000000010001111", 
    47 => "10111101100111011010000110000001", 
    48 => "00111101101010000011001111100001", 
    49 => "00111110000001011100011000111011", 
    50 => "00111101101000110001111110010111", 
    51 => "00111110000100100100001101010111", 
    52 => "10111010100010001100110011000011", 
    53 => "10111010111110111111101000001100", 
    54 => "00111101100011001000110001101011", 
    55 => "10111101111001000110111010001111", 
    56 => "00111011111101100111100001000010", 
    57 => "10111100011100000100110000101110", 
    58 => "10111100110001110110000110111110", 
    59 => "00111101110011111000011100100111", 
    60 => "00111110010000011110010111000001", 
    61 => "00111101110000000000110111100101", 
    62 => "00111101000010111000100011001010", 
    63 => "00111101101110110000111010111100", 
    64 => "10111101100000011001010011101000", 
    65 => "10111100000010101110101100001011", 
    66 => "00111100110011101001110001111011", 
    67 => "00111101110101101000110011101111", 
    68 => "10111101010100111001011111000010", 
    69 => "10111101101001000010111011011100", 
    70 => "00111101110010101010100000100010", 
    71 => "10111100010001001011111101001101", 
    72 => "00111100010110011000011010000100", 
    73 => "10111110000111010001010111110000", 
    74 => "10111110000111100100011111011100", 
    75 => "00111110010001110000011100011000", 
    76 => "00111101101000111001100101010101", 
    77 => "10111101000001000011000100111000", 
    78 => "10111101000101010010011111001010", 
    79 => "00111110001000101001000001101001", 
    80 => "00111101110100011001111001110011", 
    81 => "00111100011110000101110000110010", 
    82 => "10111110000001000001101100110011", 
    83 => "10111101101111100010000001111100", 
    84 => "00111101110000101010111010101001", 
    85 => "10111110010010011111101100011110", 
    86 => "00111100101100101011101100111110", 
    87 => "00111010001011110100000111110111", 
    88 => "10111100110101110001011000110010", 
    89 => "00111011110000011011101101100001", 
    90 => "00111101010111001000110001011101", 
    91 => "10111101110010010011101111000001", 
    92 => "00111001111110111100011110100110", 
    93 => "10111100111001111010100001010000", 
    94 => "10111101011110100100001010000111", 
    95 => "10111101101010001101000100000010", 
    96 => "10111101010001010010011001111011", 
    97 => "00111101011100100101101001000000", 
    98 => "00111110001111110101100101000111", 
    99 => "00111101100110000010100101010111", 
    100 => "10111101010101000000110000001100", 
    101 => "00111110010100001011010011100001", 
    102 => "00111101100000001110011100101001", 
    103 => "00111101101011011111101101101011", 
    104 => "10111101110111110111110011101110", 
    105 => "00111101000011101010111010111010", 
    106 => "00111101101001111011010001010010", 
    107 => "00111101110001011100000000100110", 
    108 => "00111101001101010010100101011101", 
    109 => "10111110000011010110111110010111", 
    110 => "00111101001001100110000101011110", 
    111 => "10111101100001011111100001011010", 
    112 => "00111100110101010011011001011110", 
    113 => "00111101001001101110110000110011", 
    114 => "10111101011110001100010111100100", 
    115 => "00111101000000000010011100110111", 
    116 => "10111101001001010111101110000101", 
    117 => "00111101101011111000111010110100", 
    118 => "00111101011101110111011101100110", 
    119 => "00111110010100111100110010001110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_1 is
    component inference_conv2d_f3_3_1_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_1_rom_U :  component inference_conv2d_f3_3_1_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


