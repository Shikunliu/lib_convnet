-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_59_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_59_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000001010101011111011110", 
    1 => "00111101010011101111001001110111", 
    2 => "10111011001001000110100000101010", 
    3 => "10111101100100000010101111000111", 
    4 => "10111100110100110101000110110111", 
    5 => "10111101111000111110101101111101", 
    6 => "00111110000100010001111101001111", 
    7 => "10111100111111000010011001010111", 
    8 => "00111110101000111000000101010010", 
    9 => "00111101110011010011000011110000", 
    10 => "00111101000011111010001100001011", 
    11 => "00111101000010111001000000111100", 
    12 => "10111101110001110101111010110100", 
    13 => "00111101010111010101101101110101", 
    14 => "00111110001100010010110001101011", 
    15 => "10111101101110001000000000000001", 
    16 => "00111101000101001000001111100110", 
    17 => "10111110001010011110000100101010", 
    18 => "00111110001111100010011000001011", 
    19 => "10111101000011000110010101101001", 
    20 => "10111100101010010101101011011000", 
    21 => "00111101110011111110111101111100", 
    22 => "00111101011101100000001111001000", 
    23 => "10111101100101010000001000001011", 
    24 => "00111101101110110100010001101100", 
    25 => "00111100100110101000100101001110", 
    26 => "10111101011001101101101011100110", 
    27 => "10111110001101101001001010110100", 
    28 => "00111101011110011010011001001010", 
    29 => "10111101101100010111111000011010", 
    30 => "00111011101111010010000011001000", 
    31 => "00111100100101101010110100100000", 
    32 => "10111110000100011100101101000111", 
    33 => "00111101000000100110110101001000", 
    34 => "10111011101101001011110110110111", 
    35 => "00111101111001100110010001001110", 
    36 => "00111101011100010111001110010000", 
    37 => "10111101001110101000111110110011", 
    38 => "10111100111100011010111101110000", 
    39 => "10111110000010101101001010011010", 
    40 => "00111110000001101000010100010010", 
    41 => "10111110010001101100000010010100", 
    42 => "00111100110000000110011000100010", 
    43 => "10111101100011010111101101100011", 
    44 => "10111110000010100100011111101101", 
    45 => "00111101101100010101001011100110", 
    46 => "00111011111111001100111110110100", 
    47 => "10111101111011001010110011010010", 
    48 => "00111101111100101100111100010000", 
    49 => "10111011110001001100110101100100", 
    50 => "00111100000011011110100011000001", 
    51 => "00111101101001011000110011010010", 
    52 => "00111110000001011000010110111110", 
    53 => "00111101011000101011010111110011", 
    54 => "00111101000001011001111100010001", 
    55 => "00111110010100100101000000101111", 
    56 => "10111100101010000100011110110010", 
    57 => "00111101100111110110111010111000", 
    58 => "00111101101101000010011001011101", 
    59 => "00111101101000110111100000100101", 
    60 => "00111101011000010001110001100000", 
    61 => "10111110100001010100101001011110", 
    62 => "00111110000011011000001011111101", 
    63 => "10111101100001011111101001110011", 
    64 => "00111101110001001010110010111101", 
    65 => "00111110010111100101111001101000", 
    66 => "10111101101011111010100000010100", 
    67 => "00111110000000100001110111011010", 
    68 => "00111100110001111110000011010101", 
    69 => "10111101111000000101010001101001", 
    70 => "00111101111100100000110000000111", 
    71 => "00111101100101010011110000101111", 
    72 => "00111110010111000111011000001000", 
    73 => "10111100100101111000001011010100", 
    74 => "10111100000111011000000001000100", 
    75 => "00111100101000000111011011001110", 
    76 => "00111101111011100111011010000110", 
    77 => "00111110001100001010110101000111", 
    78 => "10111011111000101111110111111100", 
    79 => "00111101100010110000110001100000", 
    80 => "10111101100110011110010010101110", 
    81 => "10111110010100011001101101001110", 
    82 => "10111101011011001011111101100001", 
    83 => "10111011111110011101011111001000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_59 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_59 is
    component inference_mult_1_120_120_84_s_W4_59_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_59_rom_U :  component inference_mult_1_120_120_84_s_W4_59_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


