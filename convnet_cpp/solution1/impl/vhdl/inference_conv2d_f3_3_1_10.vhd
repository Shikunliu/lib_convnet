-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_1_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_1_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100010110110011011010001", 
    1 => "10111011011101111011010010101101", 
    2 => "10111101100111101100110010001111", 
    3 => "00111100000000011010100111000100", 
    4 => "00111101011011101111000011100100", 
    5 => "10111101010011101010011101001000", 
    6 => "00111101001001111011111000111010", 
    7 => "10111101101110101011010000001001", 
    8 => "00111101000111110010011011110010", 
    9 => "00111100101111010010011001100111", 
    10 => "00111101101110101010011101100110", 
    11 => "00111101100110010011110111001100", 
    12 => "00111100000100110100100111101010", 
    13 => "00111011010000001001000100101010", 
    14 => "00111101110101110000100010101011", 
    15 => "10111010100001110110101001101101", 
    16 => "10111101011011011010000011010010", 
    17 => "00111100010101101001100011111110", 
    18 => "10111101101110010111010001101110", 
    19 => "00111101101010001111110100110100", 
    20 => "00111011111000000000100111000000", 
    21 => "10111101110001001100011001010011", 
    22 => "00111101101110110011010001100001", 
    23 => "10111101011111100110110101011001", 
    24 => "00111110000001110100100010100001", 
    25 => "00111110000101001001011010101011", 
    26 => "10111100110110110111000101000000", 
    27 => "00111101011000010110100000010101", 
    28 => "00111101010111100101111011100000", 
    29 => "00111101100100000001100000101011", 
    30 => "10111101010010111100100111101000", 
    31 => "00111101011000100110110011000010", 
    32 => "00111011100111111001111010000001", 
    33 => "00111100100111111111001001111001", 
    34 => "10111110001100110100110000011011", 
    35 => "10111101011110001110111101010000", 
    36 => "00111100111010000011000000110101", 
    37 => "10111110001111000010110000011011", 
    38 => "00111101010100000110111101001110", 
    39 => "10111011110101100100000000101001", 
    40 => "00111100110110001110001001001111", 
    41 => "10111110010101101101001100110001", 
    42 => "00111101111110001010011001010101", 
    43 => "10111101000010010100110100110110", 
    44 => "10111101011110110011001101111101", 
    45 => "00111101000111010111010111111101", 
    46 => "00111101111101000101110110000101", 
    47 => "00111011100100110001101001100100", 
    48 => "10111100111111100111100110111000", 
    49 => "00111101000111111110101111111001", 
    50 => "00111100111010111101011101010100", 
    51 => "00111100010101100101001000011100", 
    52 => "00111101110001000100010111111011", 
    53 => "00111110001000000001110100011001", 
    54 => "00111101101110011010000111000111", 
    55 => "00111010101001000001000000010101", 
    56 => "10111101000110001110110010010110", 
    57 => "10111110000000110101010101000111", 
    58 => "00111101101010010011111000101010", 
    59 => "00111101010010001010000101110100", 
    60 => "00111101110110010100001010010001", 
    61 => "00111101101111111010011111011110", 
    62 => "10111101100001101100010000001010", 
    63 => "00111101011000111110101010100110", 
    64 => "00111101101000110010110111001101", 
    65 => "00111100110101101010000011110111", 
    66 => "00111101101011101001100001111111", 
    67 => "10111100100011010101010011101000", 
    68 => "00111110000000001011101101101111", 
    69 => "10111101100001111010011101101100", 
    70 => "10111110001000111111010111111001", 
    71 => "00111101111000111011000111010001", 
    72 => "00111101000110101010010011000111", 
    73 => "00111101001010111110011001010011", 
    74 => "00111101111011100101011100010001", 
    75 => "10111101011101011000011110000110", 
    76 => "00111110000101001100101111100010", 
    77 => "10111011001110000010001010011100", 
    78 => "10111101100110111111111100010010", 
    79 => "00111101101010110011100011010110", 
    80 => "10111101000101110011011010110011", 
    81 => "00111100011010001111111100110010", 
    82 => "10111101011010011000000010010111", 
    83 => "00111101000111000011000010011101", 
    84 => "10111101111001011101010100101100", 
    85 => "00111101000010111010000000010010", 
    86 => "10111101100000100010101001100010", 
    87 => "00111101010011111111001010100001", 
    88 => "10111110010100101111001010110110", 
    89 => "00111101110101111111111010001111", 
    90 => "00111101101011100011010100010111", 
    91 => "00111101111000001110101101101000", 
    92 => "10111110001001011011100011011100", 
    93 => "10111101100100001101100111110010", 
    94 => "00111101001010000100010011011101", 
    95 => "10111101100111011010000011000101", 
    96 => "10111101011111010111110100000011", 
    97 => "00111101111100001100100010001010", 
    98 => "10111101001100101000010001100111", 
    99 => "10111110000011101010001001001101", 
    100 => "10111101011001101100111111111110", 
    101 => "10111110001101011010110100010000", 
    102 => "00111101010101100000110101010011", 
    103 => "00111110000010011010111011010101", 
    104 => "00111101000101111001100000011101", 
    105 => "00111101001011100001110011111001", 
    106 => "10111101100001111000001011101110", 
    107 => "00111101011100000001110110011111", 
    108 => "10111101100011111001000110110001", 
    109 => "10111101100010010100000011100100", 
    110 => "00111101101111100011011000001001", 
    111 => "00111101001001000101100111001100", 
    112 => "10111101110111110111000011011111", 
    113 => "00111100110001111110100001100001", 
    114 => "00111101111000110010101000000110", 
    115 => "00111101100100010001111010100001", 
    116 => "00111101110011001100101100010010", 
    117 => "10111101000111010111011010000011", 
    118 => "00111110001011000101000101010101", 
    119 => "10111100100011110011011100001010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_1_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_1_10 is
    component inference_conv2d_f3_3_1_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_1_10_rom_U :  component inference_conv2d_f3_3_1_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


