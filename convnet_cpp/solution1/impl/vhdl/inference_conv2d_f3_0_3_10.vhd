-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110100100101101110111000", 
    1 => "00111100111101100100110101100100", 
    2 => "00111110001100011001000110011011", 
    3 => "00111010101000110000111110111010", 
    4 => "10111101001010000110111110100110", 
    5 => "10111010110010110011011100100000", 
    6 => "10111110010100101101111001000100", 
    7 => "10111101000010111000010001100011", 
    8 => "10111100110000010011010101010100", 
    9 => "10111101101001101011110101111100", 
    10 => "00111101110000000111111111000101", 
    11 => "10111110001000110100010110001101", 
    12 => "10111101011111010000001111001100", 
    13 => "10111101100100110001100011111100", 
    14 => "10111101111010001110100000100001", 
    15 => "10111100000101011010000000000101", 
    16 => "00111101010000101000110001101101", 
    17 => "00111101011011111110010011001010", 
    18 => "10111001100000110010110000110100", 
    19 => "10111110000001110010011110011010", 
    20 => "10111110010010011111011101110011", 
    21 => "10111101101010000110011101101010", 
    22 => "00111101001101110000000010011000", 
    23 => "00111101101110000100001111101100", 
    24 => "00111101100110110111100101101110", 
    25 => "10111110000010100101011110101000", 
    26 => "00111101010111011010110010000100", 
    27 => "10111101100111111000101101100110", 
    28 => "10111101010111010100100001111011", 
    29 => "10111101110001110011010100000110", 
    30 => "10111101100100100100101100011001", 
    31 => "10111101101011101001011100100010", 
    32 => "10111101010011100000001111101010", 
    33 => "00111101101100110010001011100101", 
    34 => "00111110001010000110100010111010", 
    35 => "10111110001100010010001001110101", 
    36 => "10111100100111010110000111011011", 
    37 => "10111101001110110100110000111100", 
    38 => "10111100111011000011100110101111", 
    39 => "00111101111111110000010111101010", 
    40 => "00111100110110100010110001100111", 
    41 => "00111101010010101100101110111011", 
    42 => "10111100111101011011001100001011", 
    43 => "10111100110000110110110011010010", 
    44 => "10111101001011111101000011011110", 
    45 => "10111101100100101101011011101101", 
    46 => "00111101111001111001010001100100", 
    47 => "00111101111101111010110011000101", 
    48 => "00111101000110011110100011111010", 
    49 => "00111110000110111100110010101111", 
    50 => "00111110001111100100011111011100", 
    51 => "00111010001001010111111110000001", 
    52 => "00111100111110001111000000001100", 
    53 => "10111101110100100110001010001001", 
    54 => "00111101010100111100010110010101", 
    55 => "10111101011001100110011100100010", 
    56 => "00111110000000100101100001001111", 
    57 => "00111110000010010111011101000010", 
    58 => "00111101001000110111110100010010", 
    59 => "10111101000101100011110100111110", 
    60 => "10111101100110111101110000100111", 
    61 => "00111100110011000101100100001010", 
    62 => "10111100001000010100011001110111", 
    63 => "00111110000010111101110000100111", 
    64 => "00111101001101111111110101001101", 
    65 => "10111100101010011110011110010000", 
    66 => "00111101111111101011010000100000", 
    67 => "10111110000011010101110110000001", 
    68 => "10111100111101000010011001000011", 
    69 => "10111110100000001111101001011001", 
    70 => "10111100101000111001100101100010", 
    71 => "00111100011010110000011011011111", 
    72 => "10111110010001011001011001000010", 
    73 => "00111101101001001101010100110111", 
    74 => "00111101100001111101000110000110", 
    75 => "00111100000000111100010011111100", 
    76 => "10111101001101001000111111011010", 
    77 => "10111110000101100000101100101101", 
    78 => "10111101010111010111011100100100", 
    79 => "10111100111111000001100110001100", 
    80 => "10111110000111011001011011101010", 
    81 => "00111100101101100110110101111010", 
    82 => "10111100100100011000010011000010", 
    83 => "10111011101101100110111011010010", 
    84 => "00111100011011100101100111100101", 
    85 => "10111101101101110101010100001110", 
    86 => "10111101001010100101010010000010", 
    87 => "10111101110100011011100010101010", 
    88 => "10111101111011111001111101000101", 
    89 => "00111101010100100110011100001011", 
    90 => "00111101100010100010000000111101", 
    91 => "10111101101111011011000001110010", 
    92 => "10111101011001011111000101111100", 
    93 => "00111101000000011100010101100111", 
    94 => "10111101011100101011100010000100", 
    95 => "10111101000100010101101000110000", 
    96 => "10111101001100001101001100111100", 
    97 => "00111110000001000111100100001100", 
    98 => "10111101100101001000110111001111", 
    99 => "00111110000100010010010101010111", 
    100 => "00111110010010100100011011100001", 
    101 => "10111100101000010001010111111010", 
    102 => "00111100100011011111010010110101", 
    103 => "10111101110010011011100100101010", 
    104 => "00111011111001101000100011110110", 
    105 => "10111100110010100010101110011101", 
    106 => "00111101101001011101110111000101", 
    107 => "00111101111100000000011110011010", 
    108 => "10111100110111000001010101110101", 
    109 => "00111101000101000100111001101100", 
    110 => "10111110010100100101101000100101", 
    111 => "10111101001110111010010101000010", 
    112 => "00111101010000011110111111111010", 
    113 => "00111110001001101110101101001111", 
    114 => "10111100101111001000110100011001", 
    115 => "00111101001000011011000101000110", 
    116 => "00111110010000101010010101100001", 
    117 => "10111101110100100010011111010000", 
    118 => "00111100101001000101110101111000", 
    119 => "10111110001110110001110101010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_10 is
    component inference_conv2d_f3_0_3_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_10_rom_U :  component inference_conv2d_f3_0_3_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


