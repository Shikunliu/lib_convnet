-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100000000101100010110110", 
    1 => "10111101000011101111101110110001", 
    2 => "00111110000101100001010001011001", 
    3 => "00111110000101001001101011011101", 
    4 => "10111101001110010010110101100011", 
    5 => "00111110000000110100101001000101", 
    6 => "10111110000011110010100100001011", 
    7 => "00111101100011111011100010001010", 
    8 => "00111011100010010101011100010111", 
    9 => "10111100001000100100001010001011", 
    10 => "00111101011100101011101110101010", 
    11 => "10111101100111111000101010110111", 
    12 => "10111101010010011000100000111111", 
    13 => "00111101000111001000110101001111", 
    14 => "10111100001010101011000110000100", 
    15 => "00111101100110010001101010111001", 
    16 => "00111101100001111111110001011011", 
    17 => "10111110001001101111011010010100", 
    18 => "10111101111010110010011111001100", 
    19 => "10111101110011110010100101001110", 
    20 => "10111110001111001100001010010100", 
    21 => "10111101000010011100100111100011", 
    22 => "10111101010101101101011010001100", 
    23 => "00111101010110100101111011110001", 
    24 => "10111101010001001000100011000110", 
    25 => "10111101110101110100100110101110", 
    26 => "00111110000010010001111101110001", 
    27 => "00111100111100100010011111010000", 
    28 => "10111110100101110110010101110111", 
    29 => "10111100100111001000100001100001", 
    30 => "00111101100011111001011111000110", 
    31 => "10111101011100000101101011011100", 
    32 => "10111101011000011100100101100100", 
    33 => "10111100000111001100111001000010", 
    34 => "10111101111110100100110111110100", 
    35 => "00111110001000010011011111110100", 
    36 => "10111101111001110110001010010101", 
    37 => "00111100100011101001110111110011", 
    38 => "00111101111000001100100011001101", 
    39 => "00111101110110000011101111100110", 
    40 => "00111101110011001101010100110000", 
    41 => "10111101000001101101011011101010", 
    42 => "00111101111001000110010010011001", 
    43 => "10111011101011100101101001110001", 
    44 => "10111101011001000001000111011101", 
    45 => "10111101101100011000000011010100", 
    46 => "10111101100110010000111110101001", 
    47 => "00111101100110111011001000011011", 
    48 => "10111101101111110111010100111001", 
    49 => "10111101111000000010110110011101", 
    50 => "10111101001001100011000111011110", 
    51 => "00111101001000000100011010010010", 
    52 => "00111010010000000100000000011001", 
    53 => "10111100111001101000110100110011", 
    54 => "00111110000000000111000010111001", 
    55 => "00111110001111000110010001110111", 
    56 => "10111101110010100111111100000111", 
    57 => "00111100101101011001001001010011", 
    58 => "10111101100001010100101000111100", 
    59 => "10111110001111111011001101110100", 
    60 => "00111101100110011001010110000011", 
    61 => "10111101111010010011001010010100", 
    62 => "10111101100000111001100011000001", 
    63 => "00111101100110101111110101100010", 
    64 => "00111101010010011000010000101000", 
    65 => "10111101100000110111011011110000", 
    66 => "10111101101000110101100000110111", 
    67 => "00111101100000001111011111111101", 
    68 => "10111010000010010110011100001011", 
    69 => "10111101111000111100101011111011", 
    70 => "10111110001110101101011101010010", 
    71 => "10111100011001111010100111001000", 
    72 => "10111101110101010010111010110110", 
    73 => "10111101110000000110101101000101", 
    74 => "10111101001110001010110010011111", 
    75 => "10111100111001110011111100111111", 
    76 => "10111100000111011100101010010110", 
    77 => "10111011110101011000111101010100", 
    78 => "10111101100010100111111011011111", 
    79 => "00111101110110110100000010110011", 
    80 => "10111101000000110100111100001010", 
    81 => "10111101101100001101110101000000", 
    82 => "10111110000011100011011111011111", 
    83 => "00111110000110001001110100101000", 
    84 => "00111101111101111010011100000001", 
    85 => "10111011010100100110111111001111", 
    86 => "00111110010111110001000011101101", 
    87 => "10111110010001011100100111100110", 
    88 => "10111011111110000111100110100100", 
    89 => "10111101001110011001100000111101", 
    90 => "10111100101000011001000011011111", 
    91 => "00111100000001110010010001110111", 
    92 => "10111100110000110010111001010011", 
    93 => "00111101111101000010101110110110", 
    94 => "10111101001000000000110110000111", 
    95 => "00111101101010110000001111100010", 
    96 => "00111101110011101110110100000011", 
    97 => "00111101010101000100110101011111", 
    98 => "00111101010000010000001011100101", 
    99 => "00111011001110011100011100110111", 
    100 => "10111110000011000000100111000100", 
    101 => "10111101001000100111011010011101", 
    102 => "00111100100000000011111011101010", 
    103 => "10111110000011111011101101010001", 
    104 => "00111101010011000011010000111011", 
    105 => "10111100101010100110000111010011", 
    106 => "10111110001101111100011011111100", 
    107 => "10111110000010011101101011100000", 
    108 => "00111101110110100110000101011011", 
    109 => "00111101100111101100111100100000", 
    110 => "10111101100101010011110010011011", 
    111 => "00111011101111001010100110101010", 
    112 => "00111101010100100001001010100010", 
    113 => "00111110000001110011100001100001", 
    114 => "10111110001101011110000111000001", 
    115 => "10111101101101111101000101111000", 
    116 => "10111110001101010000110100101000", 
    117 => "10111101110001000010110101110001", 
    118 => "10111101100001110001011101001011", 
    119 => "00111110010111010110000111110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_14 is
    component inference_conv2d_f3_1_2_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_14_rom_U :  component inference_conv2d_f3_1_2_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


