-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000000101000011011111001", 
    1 => "00111110010110010100101011110101", 
    2 => "10111101000011110011101011010001", 
    3 => "10111101010011111010111001000011", 
    4 => "10111101010111110000001001011001", 
    5 => "10111101001101110100010011110110", 
    6 => "10111101110011011011101101011010", 
    7 => "10111101001010010101110101110111", 
    8 => "00111110010001010100111000101011", 
    9 => "10111110000101011100011111001110", 
    10 => "10111101010111001101101001100001", 
    11 => "00111011100111010101011110101010", 
    12 => "10111101010000000101001101011101", 
    13 => "10111110000100010111000000001101", 
    14 => "10111100111111111010111101000010", 
    15 => "00111101100001010000010111111001", 
    16 => "10111101100010110010011001100010", 
    17 => "00111101000101110011110001011101", 
    18 => "10111101111111100101111010101011", 
    19 => "00111101101100110011000010000111", 
    20 => "00111101010000111101111100000010", 
    21 => "00111100001100000010000001011001", 
    22 => "00111101101101000000111010000010", 
    23 => "00111110000111110010101010011101", 
    24 => "10111100011100011000010111101010", 
    25 => "10111101111111110110011011101000", 
    26 => "10111101001001001100001101111110", 
    27 => "00111101100011001100101101110000", 
    28 => "10111101000001010100101011000011", 
    29 => "00111101011101101100000101011101", 
    30 => "10111101100010111100100001001000", 
    31 => "10111101010101000000011000010010", 
    32 => "00111011100101100001100001110000", 
    33 => "00111110000110001010110001011100", 
    34 => "00111101100011000001001100001011", 
    35 => "10111101001101010101000101101011", 
    36 => "10111101101110001010101000011011", 
    37 => "10111100001000111000000001001101", 
    38 => "10111101000110100011010110111100", 
    39 => "10111110000000000000111000101000", 
    40 => "10111110001101011111110111001110", 
    41 => "00111101100100101010101001101010", 
    42 => "00111101110011000111000101011101", 
    43 => "00111110000011101100011101000011", 
    44 => "10111101100100110010110101111100", 
    45 => "00111100011110101001100100100011", 
    46 => "10111101101010010011010101110110", 
    47 => "10111110000011001001000100001000", 
    48 => "00111101011110101001010000110110", 
    49 => "10111101000110111000011000000011", 
    50 => "00111101111011111000101011010010", 
    51 => "00111101111100101110001110000010", 
    52 => "00111101100001010110101101101100", 
    53 => "00111110000110101010011111011111", 
    54 => "00111101101101110111001010010011", 
    55 => "00111101001111010111100100100010", 
    56 => "10111110000100011100110010010110", 
    57 => "00111010001011010100011010001110", 
    58 => "10111101011111001010001001001000", 
    59 => "00111100110001100111000000100111", 
    60 => "00111101111010000000111000000110", 
    61 => "00111101110111110101100101000111", 
    62 => "00111110001011001100000111001010", 
    63 => "10111101100001101011011000010111", 
    64 => "10111100100100100000001000101011", 
    65 => "00111101100010111110101011110000", 
    66 => "10111100101100101100100011100000", 
    67 => "10111110010000011100100101110001", 
    68 => "00111101111111111101001011101001", 
    69 => "10111101101110101011000101000001", 
    70 => "10111011111010001101100100011101", 
    71 => "00111110000101110010001110101011", 
    72 => "00111110000010101110100110101011", 
    73 => "10111110000011100000110110101010", 
    74 => "00111101111010011010101110110000", 
    75 => "10111110011001011010010101110110", 
    76 => "00111011011000000111101001111111", 
    77 => "00111100110010010011010011001000", 
    78 => "10111100111110011101001000011110", 
    79 => "10111101110001001100101001011101", 
    80 => "00111100111111001011001000000010", 
    81 => "10111101100101100111011101010110", 
    82 => "00111101111000110111101000111110", 
    83 => "00111101110001011001100001000000", 
    84 => "00111110001110000001001110001000", 
    85 => "00111101110001011010101101110000", 
    86 => "10111101111100101100100111010001", 
    87 => "10111100111000100000010010100010", 
    88 => "00111011011001001111110001101110", 
    89 => "10111101111110011011111001001101", 
    90 => "10111101100110111111000001110001", 
    91 => "10111101010110101011011010110101", 
    92 => "10111101111000100001001100011011", 
    93 => "00111101101101001000001110100011", 
    94 => "10111101101010001001001010011110", 
    95 => "00111101001010101001010001000011", 
    96 => "10111101011100111011101000001100", 
    97 => "00111101001100110011011111010000", 
    98 => "00111100001101110100101011110000", 
    99 => "00111110001010111100001001110110", 
    100 => "10111101100111000100101000100110", 
    101 => "10111110000010001011100101111000", 
    102 => "00111101000110100001001010011011", 
    103 => "10111101111001000001110011000101", 
    104 => "00111101101011110011100100110001", 
    105 => "10111101110100110101101100001100", 
    106 => "00111101101001101100001001110111", 
    107 => "10111101110110010100010110110111", 
    108 => "00111101010100100010001011001000", 
    109 => "10111101110001100001101001000110", 
    110 => "10111101100000101101100101010110", 
    111 => "10111101011110000000010011011010", 
    112 => "00111101101000011010000111101001", 
    113 => "00111101111011101111010101100110", 
    114 => "10111110001101101110101011001000", 
    115 => "00111110000111110001110111000101", 
    116 => "10111100101100000111010000111100", 
    117 => "10111101101000100100001100000110", 
    118 => "00111101000001100111101010100011", 
    119 => "00111100101010110011011101010001" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_13 is
    component inference_conv2d_f3_4_1_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_13_rom_U :  component inference_conv2d_f3_4_1_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


