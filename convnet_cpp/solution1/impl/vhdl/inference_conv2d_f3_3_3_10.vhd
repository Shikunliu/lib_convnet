-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_3_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_3_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100000100000010001110001111", 
    1 => "00111101101001101001101001001110", 
    2 => "10111101001011111101111110001100", 
    3 => "10111101101001001010010110101001", 
    4 => "00111101111110101000100010101101", 
    5 => "10111101110001000100111011001010", 
    6 => "10111101011100000100111100000011", 
    7 => "00111101001010001001110000000000", 
    8 => "00111110000100000001100111110100", 
    9 => "10111100010101100110000100110110", 
    10 => "10111110001111000100000001001010", 
    11 => "10111011010010001001110000111100", 
    12 => "10111100101011101000101010001101", 
    13 => "10111101101011111100110000100110", 
    14 => "00111110001001100100101011100000", 
    15 => "00111101010010110011010111011001", 
    16 => "00111101101111110110100000010000", 
    17 => "10111011010100011000000100010010", 
    18 => "10111100111100010110011100010110", 
    19 => "10111101000100110110110011011111", 
    20 => "10111101111000100110010101101011", 
    21 => "10111011101110110100111101100001", 
    22 => "00111101101000011001110001011010", 
    23 => "10111101111001010100000111011001", 
    24 => "00111101011001000101000010101101", 
    25 => "00111100111011100000000111010001", 
    26 => "00111101111100000111011011000000", 
    27 => "10111101100011101000010011111110", 
    28 => "00111101011101001111001000000000", 
    29 => "00111101111010101100111110110111", 
    30 => "00111100110000001001100110000011", 
    31 => "10111110000101101101101101010001", 
    32 => "00111110010000010001101110100100", 
    33 => "00111110000101101010111110001010", 
    34 => "00111110000011000001101000000101", 
    35 => "00111101101001101000100011011001", 
    36 => "00111101010101011001111100000011", 
    37 => "10111100100000000111010100111011", 
    38 => "10111101100000111111101100101010", 
    39 => "00111101110110000011111110010010", 
    40 => "10111101101101010000101110010101", 
    41 => "10111110010100000101000001111010", 
    42 => "10111101110000011101001111111011", 
    43 => "00111110000001001100100110000110", 
    44 => "00111100010011000100111011111001", 
    45 => "10111101100010101011110100101000", 
    46 => "10111101100011100001101001001101", 
    47 => "10111101011101011111100110110111", 
    48 => "00111101101011110111100001011110", 
    49 => "10111101100111101010111010000100", 
    50 => "00111110000100100001000111001011", 
    51 => "00111100011010000110011000011011", 
    52 => "10111110010000111000011000001010", 
    53 => "00111101011110001100100100001010", 
    54 => "10111101111101011010010100110011", 
    55 => "00111101101001001011110110111010", 
    56 => "00111101110110001101001001011111", 
    57 => "00111101101111101101110111001110", 
    58 => "00111101001110011000111001000110", 
    59 => "10111101101001101110010001110000", 
    60 => "00111100100011110110011011011011", 
    61 => "00111100011010111011110001111100", 
    62 => "00111101101001011001001100101010", 
    63 => "10111110001110001000101101010100", 
    64 => "10111101110011001101010000100100", 
    65 => "10111101101101100010011000000100", 
    66 => "00111110000011101110000110111101", 
    67 => "10111110000111000010110100101000", 
    68 => "00111101100111100010111111100110", 
    69 => "00111101101110110000110111110011", 
    70 => "10111100011010011010111111000111", 
    71 => "00111011001100100110010000010110", 
    72 => "00111100111111111101111110110100", 
    73 => "10111100011100001111000111011011", 
    74 => "10111110000101001010010001001100", 
    75 => "10111101001011110100011101001011", 
    76 => "00111110000101111001111110101001", 
    77 => "00111110000010010101000111000110", 
    78 => "00111101110110000101110001101000", 
    79 => "10111101101111101101001011100111", 
    80 => "00111110001110011010111001001111", 
    81 => "00111100001001011011101000111001", 
    82 => "10111101110010101001100110001111", 
    83 => "00111100001101101100111110100000", 
    84 => "00111110000110110010000011111011", 
    85 => "00111100010010101101110000110010", 
    86 => "00111100000000001011000010101010", 
    87 => "10111101001000011010000001001001", 
    88 => "10111100000010110000010011101100", 
    89 => "10111101101000011101010001001011", 
    90 => "00111101010000000000110011001011", 
    91 => "10111101100011011011100101001110", 
    92 => "10111101011111101101010110101110", 
    93 => "00111110000000111100000000111100", 
    94 => "00111101000011101111111001101011", 
    95 => "00111110000011101010000011111101", 
    96 => "00111110001010111000000000100100", 
    97 => "10111101111110000111111100000010", 
    98 => "10111101000101010110110111010110", 
    99 => "10111110000010011111101100011110", 
    100 => "10111101100011100111100010101100", 
    101 => "00111101000100001001010000011101", 
    102 => "00111101100011000010011100000101", 
    103 => "10111110010101100100101100100011", 
    104 => "00111110100000100000011001100100", 
    105 => "00111100100111100111101010101010", 
    106 => "10111101010111000001000001101100", 
    107 => "00111101100001001100001101100100", 
    108 => "10111101100100100010100111000001", 
    109 => "10111101101001011110000001110010", 
    110 => "00111101011101110111101111101000", 
    111 => "10111011011100011101111001010100", 
    112 => "10111101011101010110000111111100", 
    113 => "10111101101001010111011111110100", 
    114 => "00111011100011101001001110000001", 
    115 => "00111110001111011101010100001011", 
    116 => "00111100001100000110010110001110", 
    117 => "10111100111001100101111111100110", 
    118 => "00111101000001011011111000000000", 
    119 => "00111101111100000100101100111100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_3_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_3_10 is
    component inference_conv2d_f3_3_3_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_3_10_rom_U :  component inference_conv2d_f3_3_3_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


