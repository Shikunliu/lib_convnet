-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_1_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_1_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001111000110110100011110", 
    1 => "10111100111111011111010011111000", 
    2 => "00111100010001001000101110110110", 
    3 => "00111100010010110111000001000001", 
    4 => "10111101100000111001101100101011", 
    5 => "00111110000110011110011011101111", 
    6 => "10111101001110100110111100010111", 
    7 => "00111110001010110011001100010010", 
    8 => "00111101110000100011001100001000", 
    9 => "10111101000010110000101000111010", 
    10 => "10111101011101010100001100101000", 
    11 => "10111101001010011010010100010101", 
    12 => "00111101100010100100000111100101", 
    13 => "00111011000000010011110001010110", 
    14 => "10111101011100100011110011111111", 
    15 => "10111100101010010010010110010011", 
    16 => "00111101100011001101010100110000", 
    17 => "10111101001000011011011000011000", 
    18 => "10111100000110001000101100011100", 
    19 => "00111101000111101101011001001111", 
    20 => "10111100111010010101111111100000", 
    21 => "10111011111011000000110110110000", 
    22 => "10111100101100011000101000011011", 
    23 => "00111101111101011100010000100010", 
    24 => "10111100111001111000011001010111", 
    25 => "10111100111001001101010001100000", 
    26 => "00111101111110011011000000100101", 
    27 => "00111100111011111110101110000000", 
    28 => "00111100100000010011110010101100", 
    29 => "10111110001011100100101000111000", 
    30 => "10111101000010010100000001101011", 
    31 => "10111100111101100001011110110100", 
    32 => "10111100101110010100001000001011", 
    33 => "10111101111110010011111101101100", 
    34 => "10111101110101011011001111100001", 
    35 => "00111100010100000010010101000111", 
    36 => "00111101110101011101001001001010", 
    37 => "00111101011101010110010001100110", 
    38 => "00111110001000110000110011101101", 
    39 => "00111100111001100110111101101011", 
    40 => "00111101000110101110110110100111", 
    41 => "00111101010010100001010110110011", 
    42 => "00111101000001000111011100101000", 
    43 => "00111101000100110100110101101010", 
    44 => "10111011100110101110101111111111", 
    45 => "10111101101101100011000101001010", 
    46 => "00111101110001111000101100101010", 
    47 => "00111110000111001011000111001101", 
    48 => "00111010010010101111010100010111", 
    49 => "00111110000000001001001101010011", 
    50 => "10111110000010101010100001100101", 
    51 => "00111101001000101001001010011100", 
    52 => "00111101100110111010100111000101", 
    53 => "00111100011000010110011001001100", 
    54 => "10111101111001001000011000100111", 
    55 => "00111101011101010111010011000001", 
    56 => "10111100111110000001111101100001", 
    57 => "00111110010000010111011111101010", 
    58 => "00111101111101100001011101111111", 
    59 => "00111101110111011110111001111000", 
    60 => "00111100110100110110100011111110", 
    61 => "10111101000000101111001000111110", 
    62 => "00111101111011010001101101110001", 
    63 => "00111100100100101010101011111101", 
    64 => "00111101101010111001110110001101", 
    65 => "10111100010001011110001100111001", 
    66 => "10111101000010000000011000001110", 
    67 => "00111101010000011011110111000000", 
    68 => "10111101001010110100000100101100", 
    69 => "00111011101100111001110111100111", 
    70 => "10111100100111001010100100011001", 
    71 => "10111101110101100111101010010110", 
    72 => "10111101100100110011000101101011", 
    73 => "00111101010010010000110110010000", 
    74 => "00111101101010110000111011100101", 
    75 => "00111101001000110010000111110011", 
    76 => "10111100100100010001001001110111", 
    77 => "00111011100000010100101000000010", 
    78 => "10111110001001011010111101101100", 
    79 => "10111101100010001110110011001011", 
    80 => "00111101111000100110100000001010", 
    81 => "00111101100001111110101010110000", 
    82 => "10111101001000111100000110100110", 
    83 => "10111100000111101001111000110001", 
    84 => "00111110000101101101111011111100", 
    85 => "00111101010010001011001110011000", 
    86 => "10111011000001110101000001101100", 
    87 => "10111110000101111111001111001111", 
    88 => "00111110001010101010011011010010", 
    89 => "10111100110000100010111110000101", 
    90 => "10111101011000101110010000110001", 
    91 => "00111110010000100010010011101110", 
    92 => "00111110000001101101100101111011", 
    93 => "00111101000111001110010010001101", 
    94 => "10111110000001110011010001110010", 
    95 => "10111101111010001111100011101000", 
    96 => "10111110001010100011111011000000", 
    97 => "00111100110101010100001010000111", 
    98 => "10111101010110010101001011101101", 
    99 => "00111110001100100011011100000100", 
    100 => "00111101101101111000010111111001", 
    101 => "00111101100111101110110010010111", 
    102 => "10111101110111101010011100000101", 
    103 => "00111101110011110111110100110001", 
    104 => "00111101101100000000001001011100", 
    105 => "00111100110000110000010001100010", 
    106 => "10111100101001011011001101001110", 
    107 => "10111100100100111111110101000011", 
    108 => "10111100010010011000000101010011", 
    109 => "00111101100000100001111001111011", 
    110 => "10111100110101101010101100111101", 
    111 => "00111101101000100101011110000110", 
    112 => "10111011101110101100100100111111", 
    113 => "10111101000000011001110011010011", 
    114 => "10111101111000011011100001100111", 
    115 => "00111101110111000101010100000000", 
    116 => "00111110000001000110111001001100", 
    117 => "10111100011010100100101011110111", 
    118 => "10111101101010011011011101101111", 
    119 => "10111110001100010101110100101101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_1_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_1_14 is
    component inference_conv2d_f3_4_1_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_1_14_rom_U :  component inference_conv2d_f3_4_1_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


