-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_10_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_10_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000100101111100010111110", 
    1 => "00111101100010111111100101001101", 
    2 => "10111100101010011110101001111111", 
    3 => "00111101010011100100101110001000", 
    4 => "00111101111011011000011111111001", 
    5 => "00111101101010010001111111001111", 
    6 => "00111100100011101100000011000011", 
    7 => "00111100101000101100111010010111", 
    8 => "00111110000000101000110111001010", 
    9 => "10111100100001111111101101000001", 
    10 => "10111101110011010000111111101001", 
    11 => "10111100100111111100010011110111", 
    12 => "10111011000101011001001100100101", 
    13 => "00111101001011101001110000010000", 
    14 => "00111101011001000000010110011001", 
    15 => "00111100110010111111111101111101", 
    16 => "10111101011111010100001111000011", 
    17 => "00111110001110110110111111100011", 
    18 => "00111100111011110001000001011001", 
    19 => "00111101100100011000101100001101", 
    20 => "00111101101101011011010110101010", 
    21 => "00111101111100010110111101000100", 
    22 => "10111101100110101000000111001111", 
    23 => "10111101001001011000101110101011", 
    24 => "10111101101111001100111110000111", 
    25 => "10111101001010110000000100000000", 
    26 => "10111101100001101111000010011010", 
    27 => "00111101110111011110111110000101", 
    28 => "00111101111000000110100001010101", 
    29 => "10111101111001001010110011110011", 
    30 => "00111011110010001000110101100010", 
    31 => "00111100101010110101000110001000", 
    32 => "00111100011000110000100011100100", 
    33 => "10111101011100101100110110011000", 
    34 => "10111110001100011101100111110101", 
    35 => "10111110001100001001001010001010", 
    36 => "10111100100000000001000001011100", 
    37 => "10111101110101000111001100000100", 
    38 => "10111101110110110010000100111110", 
    39 => "00111100100000101110011000101111", 
    40 => "10111101010110011110001111010111", 
    41 => "10111101001000111010101001111010", 
    42 => "00111101011011110001110001101000", 
    43 => "00111110000100000100100011100000", 
    44 => "10111110001000100100010111110110", 
    45 => "10111101111010100001110111111100", 
    46 => "10111101101110111010010100011010", 
    47 => "00111100100111010011001100010111", 
    48 => "00111110001001110001111000101010", 
    49 => "10111101011100111011011010010110", 
    50 => "10111101101010101011100100111001", 
    51 => "00111101010111101100000010011011", 
    52 => "10111011110001111010101000111001", 
    53 => "00111101111010110101001111010110", 
    54 => "00111110001101100000000001101101", 
    55 => "10111100000110110111011001111110", 
    56 => "00111101100110001011011110101111", 
    57 => "10111110000001111100100110011011", 
    58 => "10111101100101010100011101101000", 
    59 => "10111101110101110100100110101110", 
    60 => "00111110000001110011011011001110", 
    61 => "00111100101111010000101111111010", 
    62 => "10111100110110010001001100101100", 
    63 => "00111101100010110001011101010110", 
    64 => "00111101110101110111011011000101", 
    65 => "00111100111001000110000110101001", 
    66 => "10111101110011010101110110000001", 
    67 => "10111101100100100010001011010101", 
    68 => "00111100000101101100111010000011", 
    69 => "00111101010000010111011100010011", 
    70 => "10111110000000000101100101100100", 
    71 => "10111100000100011100000010010010", 
    72 => "10111010110111001111011001100110", 
    73 => "10111101100011000111011110011010", 
    74 => "10111101110010001001001110000010", 
    75 => "00111101001001000011111001010011", 
    76 => "00111110000100010101100100111110", 
    77 => "10111101010001110100010010110011", 
    78 => "10111110000000001110111101010110", 
    79 => "10111100011111011010011011110101", 
    80 => "00111101101001100101110100011111", 
    81 => "10111101100101110011100000101011", 
    82 => "10111101101000011010100100110011", 
    83 => "00111100110101010110100111110101", 
    84 => "10111110000101100101010000001101", 
    85 => "10111110010000100011111011100010", 
    86 => "00111101000111010111000001101110", 
    87 => "10111101101101001100010010011000", 
    88 => "00111100011001011011101110110001", 
    89 => "10111110000000011011101000111101", 
    90 => "10111011010011010011100110000100", 
    91 => "10111101010000111101110100011111", 
    92 => "10111110010010010100100101100010", 
    93 => "00111101101011100011001101000001", 
    94 => "10111110000110010000101110000101", 
    95 => "00111110000001001000101111101011", 
    96 => "10111110000011001011000101000110", 
    97 => "10111101110111000111100000100001", 
    98 => "10111101101000001011110001000110", 
    99 => "10111101100111001011101010101001", 
    100 => "10111101000001011001011000100111", 
    101 => "00111101100101000100010100001001", 
    102 => "10111101101000110010100101110011", 
    103 => "00111101110001001011111000100101", 
    104 => "00111101101001001001011010011101", 
    105 => "00111101101000011111100000001101", 
    106 => "00111101001011011100101011000100", 
    107 => "00111101111101101100101011001101", 
    108 => "00111101101100110100100101101110", 
    109 => "00111101001101011100110000110101", 
    110 => "10111110000010011100111111011101", 
    111 => "00111101100111101001000010000111", 
    112 => "00111100110000010001101101010011", 
    113 => "00111110000011000011110110101011", 
    114 => "10111101000110000001001110111101", 
    115 => "00111011110101011100010010011000", 
    116 => "00111101111111100111111010100110", 
    117 => "00111100111000111110111111001001", 
    118 => "10111101001100000010111000110001", 
    119 => "10111101001001011111110101010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_10 is
    component inference_conv2d_f3_1_2_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_10_rom_U :  component inference_conv2d_f3_1_2_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


