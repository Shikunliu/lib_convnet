-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_0_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_0_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010001001010000001000011", 
    1 => "00111101101100010110000001000101", 
    2 => "00111101001110100011100011000110", 
    3 => "10111110000100101110001000110011", 
    4 => "00111101100001000001101011100010", 
    5 => "00111101000110000010111000001111", 
    6 => "00111110001000110110001010100110", 
    7 => "00111110011001011111110000111011", 
    8 => "00111110001110100010110011101101", 
    9 => "10111101001010101101011000111000", 
    10 => "00111101001101000010000111000000", 
    11 => "00111101101101100001100010011000", 
    12 => "10111101011101000101010110101000", 
    13 => "10111110100000100010001100111010", 
    14 => "00111101101001011000101011101111", 
    15 => "10111110001100101100011010101100", 
    16 => "10111110001100000000110101011111", 
    17 => "10111110000101010000100011110110", 
    18 => "10111100110110011111001001001111", 
    19 => "10111101010001001100101010100000", 
    20 => "00111100111010010001110110011011", 
    21 => "00111110000111101101110101001000", 
    22 => "10111101100000000011100011010101", 
    23 => "10111011101000101111011010111011", 
    24 => "00111101010111011111001111101100", 
    25 => "00111101010100001000101110011110", 
    26 => "00111110001111101001110011001011", 
    27 => "00111101110110011001011110000001", 
    28 => "00111100100110010110110111111011", 
    29 => "10111101111011001100001001010000", 
    30 => "00111101110000100111100011010001", 
    31 => "00111100110110001001000011110000", 
    32 => "10111101110011000100011001111010", 
    33 => "10111101010110001010101101111000", 
    34 => "10111101111110000100011111110101", 
    35 => "10111110001101001110111100000011", 
    36 => "10111101101000000110111101000001", 
    37 => "10111100111010111110011101111010", 
    38 => "00111110001000000111001110011011", 
    39 => "10111011011110101000100010011101", 
    40 => "00111110010011010100010000010011", 
    41 => "10111110001100000111001110011011", 
    42 => "00111101000100001111010001111010", 
    43 => "00111101111000001010010000011010", 
    44 => "10111101000010110010100011011000", 
    45 => "00111101011100001011010111100000", 
    46 => "10111101110111100110111001100101", 
    47 => "10111101111001100110101110100101", 
    48 => "00111100010110101100111111000101", 
    49 => "00111101000110000101101100100110", 
    50 => "10111011110111110111101111010001", 
    51 => "10111101100001000001001101001000", 
    52 => "10111101010100000010100001010001", 
    53 => "00111101101010000011010011000101", 
    54 => "00111010111000111010110100001110", 
    55 => "10111101010011110110010001010111", 
    56 => "00111100110011101010111101011011", 
    57 => "10111100000001110001110110010110", 
    58 => "10111101001001101011011001101000", 
    59 => "10111110000111011001111011000111", 
    60 => "00111100000000001111000001010101", 
    61 => "00111100100011001010101000110010", 
    62 => "10111110010001111011111011011011", 
    63 => "10111100100101101111011101011110", 
    64 => "00111101101000011110010000010011", 
    65 => "10111100111100111011000000110001", 
    66 => "00111100110111101101101111111001", 
    67 => "00111101101100000000100111110110", 
    68 => "00111101111010010010011100001011", 
    69 => "10111101100010010111010001010011", 
    70 => "10111110000010100111100101111001", 
    71 => "00111100111100101100110111101000", 
    72 => "00111100100000000010111111010001", 
    73 => "00111101110001110111111100011011", 
    74 => "00111110001111011110110110101111", 
    75 => "10111101100101010100000000000011", 
    76 => "10111101101010110011000011000011", 
    77 => "10111101101101001100111001110100", 
    78 => "10111101111001111101100110011001", 
    79 => "00111101011100101111001111011110", 
    80 => "10111100110010110110101010010111", 
    81 => "00111101110000110011000010101111", 
    82 => "00111011011100100011110110100000", 
    83 => "00111100110010010011100010001110", 
    84 => "00111101110101100010101001011110", 
    85 => "10111101100010110010111100001000", 
    86 => "10111101011101000010101001110100", 
    87 => "10111101101100010110101111101001", 
    88 => "00111101000101011101111001110100", 
    89 => "10111100011000110100011111001110", 
    90 => "10111011011001110101000101011101", 
    91 => "00111100001010111000011010010111", 
    92 => "00111101101100101111110001011100", 
    93 => "10111101100000001100110100110101", 
    94 => "10111101110111000011001011101100", 
    95 => "10111101110010000110100011000111", 
    96 => "10111101000000011100101100101100", 
    97 => "10111100010001100110110110100011", 
    98 => "10111101001001101010101001110100", 
    99 => "10111101010000111011000111010001", 
    100 => "00111110001101010001100000101011", 
    101 => "10111110011011000011110101101000", 
    102 => "10111101000010100101110001011111", 
    103 => "10111101111010100000010111011110", 
    104 => "00111101100001101010000000101101", 
    105 => "10111101011111010000010100101001", 
    106 => "00111101000111011010101101110111", 
    107 => "10111011111011110001110101011010", 
    108 => "00111110000011101000100110101001", 
    109 => "00111100101111100000010110001010", 
    110 => "00111100111001000101100100010000", 
    111 => "00111010010000000110010011011111", 
    112 => "00111101000101000110000100010110", 
    113 => "10111110010000000010010100111001", 
    114 => "10111100111101000101011001111111", 
    115 => "10111100111111011010011110010110", 
    116 => "10111101111001001010111000000000", 
    117 => "10111110001101011000011111010111", 
    118 => "10111101111010101100010010110101", 
    119 => "10111110010001100111110110111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_0_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_0_4 is
    component inference_conv2d_f3_1_0_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_0_4_rom_U :  component inference_conv2d_f3_1_0_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


