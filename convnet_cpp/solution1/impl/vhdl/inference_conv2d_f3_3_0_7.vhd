-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_0_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_0_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100011011110000011001001", 
    1 => "10111110000010110101100000001000", 
    2 => "10111101100011101110011111111010", 
    3 => "00111110000000101001101100101000", 
    4 => "10111101110101111011010110101111", 
    5 => "00111010101010110011001100011111", 
    6 => "00111101101001111101101011001101", 
    7 => "00111100100110001100110000010100", 
    8 => "00111101000101110110010101110111", 
    9 => "00111101101011110111000111010000", 
    10 => "00111101100001000011011001000000", 
    11 => "00111101000101010111111001001100", 
    12 => "00111101100111110010110010000001", 
    13 => "00111101111000000100010010101111", 
    14 => "10111101101100011011111101101101", 
    15 => "00111101000110011000100010000010", 
    16 => "00111100101000010111111110101101", 
    17 => "10111101100011010001000010100101", 
    18 => "00111011000001000100111100000101", 
    19 => "00111101000111111010101111001101", 
    20 => "00111101010110010001101010000011", 
    21 => "10111101010001000110001110001101", 
    22 => "10111101000101111000010011010010", 
    23 => "00111101010111000001101000010010", 
    24 => "00111101100000000000111110010010", 
    25 => "00111101010001101011010100001011", 
    26 => "10111101011101101100101101010011", 
    27 => "10111101100100111000111001111011", 
    28 => "10111101101011111001111011100111", 
    29 => "10111110000111001000001000010111", 
    30 => "00111101100101111101100111011100", 
    31 => "10111101100100011011010001101011", 
    32 => "00111110000110000000111110011001", 
    33 => "10111010000000100101111110100111", 
    34 => "00111100101010011100011000000010", 
    35 => "00111101100110101101110001011010", 
    36 => "10111101110100110000011100101001", 
    37 => "10111101000010110111110010100000", 
    38 => "00111100111000001100110011001001", 
    39 => "00111101101011101110000001101110", 
    40 => "00111100101101011101010111011011", 
    41 => "10111100110110101111100000001001", 
    42 => "00111110001010000011000000011010", 
    43 => "00111101100011101010001001011010", 
    44 => "10111101011100011000100000000011", 
    45 => "10111101101001011100101010010101", 
    46 => "10111101100110110010100101101100", 
    47 => "00111101100101100001010101110011", 
    48 => "10111110000100010100001010110011", 
    49 => "00111110001000001110010010010111", 
    50 => "00111110001101010111111110110111", 
    51 => "10111101000111100111110000111101", 
    52 => "00111110000011000001101111011010", 
    53 => "10111101101001100001100101101111", 
    54 => "00111101001001011101010111001101", 
    55 => "00111101111000001001001011001101", 
    56 => "10111101101100000011010000111000", 
    57 => "00111101010101001111010011010100", 
    58 => "10111110001110101101100001011110", 
    59 => "10111101111001001001101100100000", 
    60 => "10111101110101001000101010011100", 
    61 => "10111101010110100110111001110110", 
    62 => "10111110000100010100010100001111", 
    63 => "00111101111101000000000000110010", 
    64 => "00111101101111110000100110100011", 
    65 => "10111101101110001001011011000010", 
    66 => "10111101000001110111111101010000", 
    67 => "10111110000100010110000010010101", 
    68 => "00111101100001110101100111000110", 
    69 => "10111100110011100010111110100011", 
    70 => "00111101000110111111100101110110", 
    71 => "00111011011100011110001111011110", 
    72 => "10111110000011110001101011100011", 
    73 => "00111101001111111000011101001111", 
    74 => "00111101001010000101101100110011", 
    75 => "10111101110100001111101001011001", 
    76 => "10111101101100001010000001010100", 
    77 => "10111100111101001010000111001000", 
    78 => "10111101010011000100010111011001", 
    79 => "00111110000010110100000001110000", 
    80 => "10111110000000101001000110111000", 
    81 => "00111101100100100000011010010011", 
    82 => "00111101010000111011010011000000", 
    83 => "00111110000111001010000011000011", 
    84 => "00111101010010010100101100011101", 
    85 => "00111100101110101000011111110001", 
    86 => "10111100010010001110011101100101", 
    87 => "10111100010100101001001101001011", 
    88 => "10111101101100000110101110010101", 
    89 => "00111110001001001110111001111100", 
    90 => "10111101001101101110001011101011", 
    91 => "00111110000010011111000110101110", 
    92 => "10111101011101110101000001100100", 
    93 => "10111100110001001111010100110010", 
    94 => "00111110000000000011011111010110", 
    95 => "00111101011001000011111100001111", 
    96 => "10111101100100100000111111011010", 
    97 => "00111110000101001010010000001001", 
    98 => "00111110000011000100100111111101", 
    99 => "00111101110101000011101001100100", 
    100 => "10111101000011100110001111000001", 
    101 => "00111101001010001101100100100010", 
    102 => "10111011001100101101111100010000", 
    103 => "00111101100001101110011001010100", 
    104 => "10111101011001001001000110010101", 
    105 => "00111101110010001011111010000000", 
    106 => "00111101010111011000111011110010", 
    107 => "00111101010111100100000001000010", 
    108 => "00111101001010010010110001111111", 
    109 => "00111101011010101101011000000010", 
    110 => "00111101010101111011110110100111", 
    111 => "00111110000101010011000011001111", 
    112 => "00111100101111100011011100001000", 
    113 => "00111101100101110101000110110011", 
    114 => "00111101111001001100110111111011", 
    115 => "10111100100111011100011001001111", 
    116 => "10111101110011101000101001110010", 
    117 => "10111101001100111110000100001110", 
    118 => "00111101000101010110001010000011", 
    119 => "10111110000101101100111000110110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_0_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_0_7 is
    component inference_conv2d_f3_3_0_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_0_7_rom_U :  component inference_conv2d_f3_3_0_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


