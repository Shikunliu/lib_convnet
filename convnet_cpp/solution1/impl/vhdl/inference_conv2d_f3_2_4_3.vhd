-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_4_3_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_4_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110111101111000001101011", 
    1 => "10111110000110100010011010100010", 
    2 => "00111101110100000000110011011000", 
    3 => "10111101110011011110000100011010", 
    4 => "10111101100100010110000100001110", 
    5 => "10111101000101111010101011111101", 
    6 => "10111110000101100100110101111111", 
    7 => "00111101011101001011110100100110", 
    8 => "10111101000101000101000100001011", 
    9 => "10111101000111010000101011101110", 
    10 => "00111101001000111111110000101001", 
    11 => "10111101001000001101000010101011", 
    12 => "00111101111100000010011000000011", 
    13 => "00111101100100010011001101111111", 
    14 => "00111100011000100001100000100011", 
    15 => "00111011110000011010110101110100", 
    16 => "00111100101111001001000100010101", 
    17 => "10111101100101111001000010111000", 
    18 => "10111110000000111000011010010000", 
    19 => "10111101100010101100010101110001", 
    20 => "00111101110101000110110000110011", 
    21 => "00111100110110011011101000011011", 
    22 => "10111101111011010101110001110100", 
    23 => "10111101000001110001111111100101", 
    24 => "00111101111001010000001001101001", 
    25 => "00111101100100100001100000111110", 
    26 => "10111100100101100010101000001110", 
    27 => "10111101110000111011110100100100", 
    28 => "00111101101011111101111111001111", 
    29 => "00111101111101101111111000101110", 
    30 => "10111011110011110101110111110111", 
    31 => "00111100100001010010100100110101", 
    32 => "10111100000110010101000011010100", 
    33 => "00111101101000010001011111101011", 
    34 => "10111101100001001010000011110001", 
    35 => "00111100100001100001111011111110", 
    36 => "00111100000111000011001000000101", 
    37 => "10111101000100110000110010000010", 
    38 => "00111110001010001011110100100011", 
    39 => "00111011100101110110011000100011", 
    40 => "10111101100001111011010100110110", 
    41 => "10111101111100011111011000000001", 
    42 => "00111010110111111110101001100001", 
    43 => "00111101101011110111000000100011", 
    44 => "10111101111100001000001101010110", 
    45 => "10111100101111010101011000110111", 
    46 => "10111101110100111010011100010001", 
    47 => "10111101111111110010111011001111", 
    48 => "10111101101100001111100001101000", 
    49 => "00111101101100010111100111011011", 
    50 => "10111101111001100111000011100011", 
    51 => "10111100110011111101011000110111", 
    52 => "10111101011110000000010000111000", 
    53 => "00111101100111011111110110011111", 
    54 => "00111101101110111001110010001110", 
    55 => "10111011100100011011100001001111", 
    56 => "10111101100000110101110011101111", 
    57 => "10111101100011010100101000110110", 
    58 => "10111110000100100011101101111001", 
    59 => "00111101110001011101001100111011", 
    60 => "10111100100110100000010001011000", 
    61 => "00111101001011001011011011111101", 
    62 => "10111101111011101000000001111100", 
    63 => "10111110001110001001100001110000", 
    64 => "00111101101010111110110100001001", 
    65 => "10111101111010111100100111001101", 
    66 => "10111100000011001010100111000111", 
    67 => "00111100100011001110001100001000", 
    68 => "10111101000111000010101001101110", 
    69 => "00111100110101011110000110110100", 
    70 => "00111110000111110010011000101001", 
    71 => "10111101010111110100100111111000", 
    72 => "00111101101101110000001100011100", 
    73 => "10111100100000101101010001011011", 
    74 => "00111101110000011100001010101110", 
    75 => "10111101110111000100010000111001", 
    76 => "10111100101110110011001110110011", 
    77 => "00111110000110000010000001100000", 
    78 => "10111110001101011001000101000111", 
    79 => "00111101001001001101010001111011", 
    80 => "00111101100100100010001101101001", 
    81 => "00111100001010100101110001011111", 
    82 => "10111100101101011010100011000100", 
    83 => "00111101101000101010011001010011", 
    84 => "00111110000110011111111110010011", 
    85 => "00111101111111001000010100111100", 
    86 => "10111110000111111000001100111000", 
    87 => "00111101101111011110110011110011", 
    88 => "10111101111110111010101110101000", 
    89 => "10111101100011010110010110000110", 
    90 => "00111100110010101001111101100001", 
    91 => "10111101100000101100000110100100", 
    92 => "00111101001011011100000100011110", 
    93 => "00111100000101001100100110100110", 
    94 => "10111101100111001110010001010111", 
    95 => "10111100111001011101000011100000", 
    96 => "00111101100001010000101101101101", 
    97 => "00111101101010011111000001101100", 
    98 => "00111101100111011000100110110011", 
    99 => "00111101110111011100100111000101", 
    100 => "00111110010000110110011111100100", 
    101 => "10111110000110011011101001011110", 
    102 => "10111100111100000110011001100101", 
    103 => "00111001010010001001101100110001", 
    104 => "10111101100011111111101011000010", 
    105 => "10111011100000110111010100010101", 
    106 => "00111101011100010111111011001000", 
    107 => "10111100110101000110001011111001", 
    108 => "00111101011000011011110011001110", 
    109 => "10111100011110010001101000110011", 
    110 => "00111110000011010111010101011100", 
    111 => "10111110001011010111110100111001", 
    112 => "10111100010100100110011011010101", 
    113 => "00111100011000110010111101111010", 
    114 => "00111101010100100100001100101110", 
    115 => "10111110000001111110000110111001", 
    116 => "10111101010011011010010011101001", 
    117 => "10111110001110111001111110011001", 
    118 => "00111101101000000101001111010101", 
    119 => "00111101101000110110100011001000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_4_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_4_3 is
    component inference_conv2d_f3_2_4_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_4_3_rom_U :  component inference_conv2d_f3_2_4_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


