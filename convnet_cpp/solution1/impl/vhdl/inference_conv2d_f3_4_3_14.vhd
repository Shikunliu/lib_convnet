-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_14_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_14_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100010101101010101100001", 
    1 => "10111101011011111100001010000000", 
    2 => "10111110000110111101110110111010", 
    3 => "00111101011000011111110100110000", 
    4 => "00111100101000101100101010011011", 
    5 => "00111101101011100101011101101110", 
    6 => "00111101100010010000011000000011", 
    7 => "10111010100001100100001001111010", 
    8 => "00111110000100001000101000100110", 
    9 => "10111100110111110111100000110110", 
    10 => "10111101100011011111111111000101", 
    11 => "10111101111001101010110100101110", 
    12 => "00111101110101011010010000100111", 
    13 => "00111110000001010000111011111110", 
    14 => "00111101011100110111001101000101", 
    15 => "10111110000110011001100010001101", 
    16 => "10111110000001110011011100010001", 
    17 => "10111101101010000111110100011111", 
    18 => "00111101000100010111100101010100", 
    19 => "00111110001111010011110001111001", 
    20 => "00111101110110011111101100011110", 
    21 => "10111100110100000110111011100011", 
    22 => "10111100011111101000111110111101", 
    23 => "00111101010111011101110111100111", 
    24 => "00111110000001011100010010101000", 
    25 => "00111001111011100011110111100001", 
    26 => "10111010001110000001001011010110", 
    27 => "10111101001111011000111101000010", 
    28 => "10111100100011100100111000001100", 
    29 => "00111110000111101100111110100111", 
    30 => "10111101100101010111010010110100", 
    31 => "10111100010111111011111111101111", 
    32 => "00111100100101101111111000010100", 
    33 => "00111100001100000111110000110100", 
    34 => "00111101101101010001010101111110", 
    35 => "10111110010101110001111000101010", 
    36 => "10111101101100100110111001101111", 
    37 => "00111101011101101011101000100001", 
    38 => "10111101110001011100000110011110", 
    39 => "00111101110101010100110010011000", 
    40 => "00111110001110000010000010100011", 
    41 => "10111100101100101100110100010010", 
    42 => "10111110001110010001010001101110", 
    43 => "00111110000101110101100010011111", 
    44 => "00111110000010000111101010001101", 
    45 => "10111110010010001010110111101111", 
    46 => "00111100101101110011110100011001", 
    47 => "10111100110110011111010101110101", 
    48 => "00111110000001110001110100011101", 
    49 => "00111011011110000110100010110010", 
    50 => "00111011001001000111000000001100", 
    51 => "00111101101010100101110100000001", 
    52 => "10111101101100011101110111110001", 
    53 => "00111101101001001110100001001101", 
    54 => "10111011101011001110010111010010", 
    55 => "10111101011100110001010111110010", 
    56 => "10111101101101010110110000001101", 
    57 => "00111011111110101110000010011100", 
    58 => "00111101100100110111101000100011", 
    59 => "00111101111011011110110010100010", 
    60 => "10111101010110101111101100101110", 
    61 => "10111100011001000110001101010111", 
    62 => "00111101001110100000101101000100", 
    63 => "00111110000010011011101101101011", 
    64 => "00111101100101101110001101100100", 
    65 => "10111101001010010001001001100011", 
    66 => "10111100001111101000110101101111", 
    67 => "00111101111101011101100100011011", 
    68 => "00111110011001000001111000010101", 
    69 => "00111101010111100011010011010100", 
    70 => "00111101011101111010101101001101", 
    71 => "00111110000110011011110110000100", 
    72 => "00111110001010000010000010100011", 
    73 => "00111101100000001100001001000000", 
    74 => "00111100100000111000010110010001", 
    75 => "00111101011011011100000100011110", 
    76 => "10111110000000100100001110011010", 
    77 => "10111100101000011011100110001110", 
    78 => "00111101111100001010111111100110", 
    79 => "10111110000010110001001010010000", 
    80 => "00111101101010001010011000000100", 
    81 => "10111101110100000011001110100100", 
    82 => "10111110010101111001001100010100", 
    83 => "00111101100110010001010111100110", 
    84 => "00111110001010110100101011101101", 
    85 => "00111101010010110110000110101110", 
    86 => "10111101000000101101010110000010", 
    87 => "10111101100001010011111001001000", 
    88 => "00111101110110100111101010000101", 
    89 => "10111101111101110000101000111101", 
    90 => "00111101110110100101000000001101", 
    91 => "10111101111100011000011001010101", 
    92 => "10111101101100001110101010111001", 
    93 => "10111110000011100110100011100100", 
    94 => "00111101001011000111100101010101", 
    95 => "10111110000101110000010111001001", 
    96 => "00111101110101011111100000001010", 
    97 => "00111101000110111000110111000101", 
    98 => "10111101110010101101000000110000", 
    99 => "00111011001000100001111011001110", 
    100 => "10111110000010011111110011110100", 
    101 => "10111101100010111101110111000111", 
    102 => "10111101111110100101100011110111", 
    103 => "00111100101101000110110000011000", 
    104 => "00111100011111001100110101000110", 
    105 => "00111100110011100111001011110101", 
    106 => "10111101010011111101110000110001", 
    107 => "10111110000000001011101010100110", 
    108 => "00111110000111100101100110110000", 
    109 => "10111100001011001101101001010100", 
    110 => "00111101101110001010111010101011", 
    111 => "00111101100010000000011111010111", 
    112 => "10111101101111100111000000100000", 
    113 => "10111101111000111001110111100101", 
    114 => "10111101110010001100110010001101", 
    115 => "10111100111011111010111000001110", 
    116 => "10111101011110011010011110100111", 
    117 => "00111100000111000110101010100101", 
    118 => "00111101101100101010111011111001", 
    119 => "10111100101010111110100000011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_14 is
    component inference_conv2d_f3_4_3_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_14_rom_U :  component inference_conv2d_f3_4_3_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


