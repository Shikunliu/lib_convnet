-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100101110111101011110110010", 
    1 => "10111101100001011111110001100100", 
    2 => "00111101011111101100001000010010", 
    3 => "10111101010000011101100111110101", 
    4 => "00111110000111000011011101100001", 
    5 => "10111110000001000100101001100010", 
    6 => "00111011010001111011101101101011", 
    7 => "10111110001011101000100101100101", 
    8 => "00111110001001010010010111001100", 
    9 => "00111101101100101010000011011111", 
    10 => "10111100101001110111111110100001", 
    11 => "00111101100111111011110110101101", 
    12 => "10111101111000110111100100110001", 
    13 => "10111101110110111100010011010010", 
    14 => "00111011100001111101111010000110", 
    15 => "00111100111010010111001101100001", 
    16 => "00111100001111001001100111100100", 
    17 => "10111101011001111000100110010111", 
    18 => "00111101001000101010100111001001", 
    19 => "10111101100111101100110000010110", 
    20 => "10111101010110000000001110010111", 
    21 => "00111101100011000011001000111101", 
    22 => "10111101110101011010100001011000", 
    23 => "00111101111001100101111000000011", 
    24 => "00111101111100111000111011110011", 
    25 => "00111101110010000000100011100011", 
    26 => "00111101010000001001010011001011", 
    27 => "00111011101110111010111110011001", 
    28 => "00111110011010011010011011111000", 
    29 => "00111101011011111110110011000010", 
    30 => "00111101011110100111000011011111", 
    31 => "00111100000000000100001010000110", 
    32 => "10111101111011001011100101100111", 
    33 => "00111101110000010111001001000001", 
    34 => "00111100100011011011101010011110", 
    35 => "00111101101111111100100110111100", 
    36 => "00111101001000100000010101111001", 
    37 => "00111101100010001110110111011000", 
    38 => "10111101100111101010011011000010", 
    39 => "00111101000111000101010110000110", 
    40 => "10111101101110111111111001110001", 
    41 => "00111101110100100000001110100011", 
    42 => "10111101101100011010011000110110", 
    43 => "10111011011011100110011010100101", 
    44 => "00111100001011010100000110000010", 
    45 => "10111101001001000100110101010010", 
    46 => "10111101101011100011101100011111", 
    47 => "00111101011000001101011111100111", 
    48 => "10111101110011001010000011011101", 
    49 => "10111101101110100101100001110001", 
    50 => "00111101010010110010101101011101", 
    51 => "10111100111000100010110111110011", 
    52 => "10111101010010101001000010110010", 
    53 => "00111101111011011000011011101100", 
    54 => "00111110000111100110111100101111", 
    55 => "10111100101000100010100111000001", 
    56 => "00111110011000010010110011110001", 
    57 => "10111101100010000000100000011010", 
    58 => "10111101010010011111110101000100", 
    59 => "00111100100000000001011000000101", 
    60 => "10111101111001010111111000100100", 
    61 => "10111110001111010011000110111010", 
    62 => "10111110000001010100111000101011", 
    63 => "00111101101100000100111101101110", 
    64 => "10111110000110001010001110110101", 
    65 => "10111101000010111000110100110010", 
    66 => "00111101000011110100100011011110", 
    67 => "00111101100100000011011000101001", 
    68 => "10111101011000100001001001111001", 
    69 => "10111110001001110010111100110100", 
    70 => "10111100101100110011111110010011", 
    71 => "10111101110100001001100011010100", 
    72 => "00111101010110001100000101100010", 
    73 => "10111100110110100110110000100111", 
    74 => "10111101100000001011110001111011", 
    75 => "10111100110000101001011000010010", 
    76 => "00111101001010010111001110110010", 
    77 => "00111101100100100111011010011101", 
    78 => "00111011010000001101000000111111", 
    79 => "10111101100101000110110001000001", 
    80 => "10111101100010101111000100111000", 
    81 => "10111101101011000010010000110000", 
    82 => "10111101110111000001110001100001", 
    83 => "10111100010000111001010100010110", 
    84 => "00111110000001010100111011110100", 
    85 => "00111100110110110110000101010000", 
    86 => "00111110001111011010110110111000", 
    87 => "00111101010001000000110101110110", 
    88 => "00111101111001011010100100100010", 
    89 => "00111101111000110000000110101000", 
    90 => "10111110001000000010111011101100", 
    91 => "10111101110011001010011001101100", 
    92 => "00111100111001111111010000000101", 
    93 => "10111101001101110001011100100011", 
    94 => "10111100111000010101000110001001", 
    95 => "00111101000011010011110011001010", 
    96 => "10111101100110110100001111011001", 
    97 => "10111100101110111110100110000101", 
    98 => "10111110000011110011011011110000", 
    99 => "10111100111110100111010011011011", 
    100 => "10111101010110010101001010000010", 
    101 => "00111101110000011101000110111010", 
    102 => "10111011110100101100110100000001", 
    103 => "10111101001110010010011101001110", 
    104 => "00111101111010111000111110011011", 
    105 => "00111010100010110000100010000111", 
    106 => "00111110000011010101001101001000", 
    107 => "00111101110100101001111011010100", 
    108 => "00111101111111010010011000110001", 
    109 => "00111100101000011101011001001001", 
    110 => "00111100001101110110000001010100", 
    111 => "10111101011000001000101001001111", 
    112 => "10111101001001111000110010000111", 
    113 => "00111101101011011111110100001011", 
    114 => "10111110001101101011101100010011", 
    115 => "00111100100111101111010111000100", 
    116 => "00111101011000001000000001110011", 
    117 => "10111011111110100010000110011010", 
    118 => "10111101011111110111010101100001", 
    119 => "00111100111001111011000000010011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_0 is
    component inference_conv2d_f3_0_3_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_0_rom_U :  component inference_conv2d_f3_0_3_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


