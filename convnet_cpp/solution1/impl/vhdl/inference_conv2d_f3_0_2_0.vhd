-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110011001010110011000000110", 
    1 => "00111101101011110010010101000100", 
    2 => "00111100010010100100000000101011", 
    3 => "00111100100011010100010011111000", 
    4 => "00111110010111000110101100000101", 
    5 => "00111101100001010010010111110101", 
    6 => "10111101011010100011011011010101", 
    7 => "00111100011000010000111100001111", 
    8 => "10111101101100111111100101000111", 
    9 => "10111101001110011100101011100010", 
    10 => "10111101011111110111010011000000", 
    11 => "00111101101001111101111100011010", 
    12 => "00111100110110111001000111000001", 
    13 => "10111101110001011010000110010101", 
    14 => "10111101110010101101111110011010", 
    15 => "00111101101110000011000011100100", 
    16 => "00111101110000001100110111110001", 
    17 => "10111101110011001000000010000100", 
    18 => "00111101010100100001001000011100", 
    19 => "00111101111110001100011101011100", 
    20 => "10111101101011011100001111100110", 
    21 => "10111011100110011010101110001101", 
    22 => "00111101001000110010000011001100", 
    23 => "00111101100101000010001010111111", 
    24 => "10111101101110111001010100011100", 
    25 => "10111101111000100000001011011010", 
    26 => "00111110000100011110100001100000", 
    27 => "10111110000110101110101001110100", 
    28 => "10111101110101101000100101000100", 
    29 => "10111101111110001000110000011110", 
    30 => "10111011110000011101011101100110", 
    31 => "10111100110001101111010011100111", 
    32 => "10111101001010110101111101011111", 
    33 => "10111110000101010110101111001010", 
    34 => "00111101001101100010110111101111", 
    35 => "00111100101100011011100111101100", 
    36 => "00111011101101001100011100011101", 
    37 => "10111110000110110000110011001100", 
    38 => "00111110000001110000111100111001", 
    39 => "00111101011001000110110100010111", 
    40 => "10111101110011110010010100011100", 
    41 => "00111101010001100111101111100101", 
    42 => "10111101011000111110011011000101", 
    43 => "00111100110101101111000011011101", 
    44 => "00111101100100101110001001110110", 
    45 => "10111101001000001011111010100010", 
    46 => "00111101100100100010101111011010", 
    47 => "00111101101110100000101010010110", 
    48 => "00111101101111101000011110000010", 
    49 => "10111101100110001011001001111110", 
    50 => "10111110010000100000111001100011", 
    51 => "00111100010110111111010101011111", 
    52 => "00111101101011001000110011001001", 
    53 => "10111101101011110000001110011100", 
    54 => "10111100110011111111111100011100", 
    55 => "00111110010100001001000000101110", 
    56 => "00111101000001100111110011010111", 
    57 => "10111101011010011011010110001011", 
    58 => "10111101100111110010100100011000", 
    59 => "00111101100100010011111110110110", 
    60 => "10111101110000111011010001100010", 
    61 => "00111101100111101011101011111110", 
    62 => "10111101101010000001010101010000", 
    63 => "10111110001011000100101111010011", 
    64 => "00111110000111101000010110111010", 
    65 => "00111110001010100100110100101011", 
    66 => "00111101101110111101000010000011", 
    67 => "00111100100001100111010010001110", 
    68 => "10111101111111000101011010010011", 
    69 => "00111101001101011001010010000111", 
    70 => "10111110001101011101001011010000", 
    71 => "10111101110000100000111110110010", 
    72 => "10111110000000010101000101100001", 
    73 => "10111101101101010110000001000010", 
    74 => "10111110000000111101011001000001", 
    75 => "10111101110101110101111010100110", 
    76 => "00111110000001001100001000101111", 
    77 => "10111101100100010110100111111000", 
    78 => "10111101000101110111100100010011", 
    79 => "00111101111101000101000101110110", 
    80 => "00111110000100101111011101101110", 
    81 => "10111110001110111111000100100000", 
    82 => "10111110000111011110000000001101", 
    83 => "10111100011011010001101010110110", 
    84 => "10111100100011011110101101000101", 
    85 => "10111110000000011000101101010000", 
    86 => "00111110011101011111010000011011", 
    87 => "00111101100000001111010001101100", 
    88 => "10111101000111000010110001010001", 
    89 => "10111110000101100101101001010111", 
    90 => "10111110001011100011000111010111", 
    91 => "00111101010000100000001101100000", 
    92 => "00111101100111101011001100101111", 
    93 => "10111101000110000001011011111101", 
    94 => "00111101100000101011111000111011", 
    95 => "10111110010111000110011110011101", 
    96 => "10111101011100010101111011001101", 
    97 => "10111110010001110101100101101000", 
    98 => "10111100110110001111111000110011", 
    99 => "10111101001000000100100111101101", 
    100 => "00111101011101000101001111111010", 
    101 => "10111101010000010001100010110100", 
    102 => "00111100010001001010110101000100", 
    103 => "10111100100011101100110101011000", 
    104 => "00111101110000100101000001111111", 
    105 => "10111011110110010000011010101100", 
    106 => "00111100111100001101111000100100", 
    107 => "00111100101001000100010001001101", 
    108 => "10111101001110111110001100000101", 
    109 => "00111101110001100001101000101011", 
    110 => "00111101100000010111001011101111", 
    111 => "00111101100110010110010111110101", 
    112 => "00111101000011001101110100101000", 
    113 => "10111101101111110000111010010001", 
    114 => "10111100100000100011100010001010", 
    115 => "00111101010111100111000001001000", 
    116 => "00111100101101110000001100110111", 
    117 => "10111101101010100101000100110101", 
    118 => "10111100010011110101100100000100", 
    119 => "00111110010010010100011010000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_0 is
    component inference_conv2d_f3_0_2_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_0_rom_U :  component inference_conv2d_f3_0_2_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


