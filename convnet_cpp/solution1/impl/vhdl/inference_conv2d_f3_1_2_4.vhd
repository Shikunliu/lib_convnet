-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_4_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_4_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100101011111001001001", 
    1 => "10111101111101111110011001110001", 
    2 => "10111101001001111100001111111111", 
    3 => "00111101111100011100011001001100", 
    4 => "00111101111000101110111011001000", 
    5 => "10111101101100010111111101011100", 
    6 => "10111101100001011100010011101011", 
    7 => "10111101101100011110101101111000", 
    8 => "10111011101000110111000001011101", 
    9 => "10111101001110001011011001000101", 
    10 => "10111101111101010010110000010111", 
    11 => "00111110001001100100001111001100", 
    12 => "00111101110011101111011001110011", 
    13 => "10111101011101101010101100001000", 
    14 => "00111110001111111000010000000010", 
    15 => "10111101100001100000110011001101", 
    16 => "10111101110100100001000101000101", 
    17 => "10111110000000010001011001100110", 
    18 => "10111110000000111101101011111001", 
    19 => "00111101001011101100101000110011", 
    20 => "00111110000110101100100111110011", 
    21 => "00111101101000110011011111011110", 
    22 => "10111101111010101001010001111001", 
    23 => "10111101100110001011000010011011", 
    24 => "00111101000100010001110001101101", 
    25 => "10111101000111001011100110101010", 
    26 => "10111011000000101011101011011011", 
    27 => "00111101001011000110001111110001", 
    28 => "10111110000000101101111100001101", 
    29 => "00111101010010111000111101001011", 
    30 => "00111101100101100000101011001111", 
    31 => "10111101100110111100010100001000", 
    32 => "10111110000101010101101101000110", 
    33 => "10111100100000001001001100111000", 
    34 => "10111101101011100001011000110110", 
    35 => "10111011100011011110011101110100", 
    36 => "10111110000101101101000011010101", 
    37 => "00111101100000110110101101100111", 
    38 => "10111101110110101100010101111110", 
    39 => "00111010100010111011010011111111", 
    40 => "10111101010000101100111111110100", 
    41 => "00111101100001110111101100011111", 
    42 => "00111100110111111001100011101101", 
    43 => "00111100111110001100011010111011", 
    44 => "10111101101111110010010110010101", 
    45 => "00111101111011101111010011100000", 
    46 => "00111101001001110111010000011000", 
    47 => "10111110010100011111110101011001", 
    48 => "00111101110101000011011000110011", 
    49 => "00111101011010000011101111110100", 
    50 => "10111101111011001011100001011010", 
    51 => "00111101000011001101011010001101", 
    52 => "10111101111010010101001110011100", 
    53 => "10111101100101000010010010100010", 
    54 => "00111011110100011000011110000111", 
    55 => "00111101110110101001000000000100", 
    56 => "00111100110010101000111010011010", 
    57 => "00111101000111000010100100010001", 
    58 => "10111101101011011101110001101111", 
    59 => "10111101000011001100000011110011", 
    60 => "00111100010001101100111111001000", 
    61 => "00111101101001010000101100110111", 
    62 => "10111100101101111100001111110001", 
    63 => "10111101011111011010010000000101", 
    64 => "10111100100011011011100110010010", 
    65 => "00111101001011101011110011111100", 
    66 => "10111110000110111010001010111110", 
    67 => "00111101111100000010000101001011", 
    68 => "00111010111101001101100001011010", 
    69 => "00111101001101011100111000011000", 
    70 => "00111101101011100111101111010001", 
    71 => "10111110000110001010000011010011", 
    72 => "00111101101110010101110001101010", 
    73 => "10111101100010101110011010100001", 
    74 => "00111100111001110101001111001100", 
    75 => "10111101110000111011010001111101", 
    76 => "00111101110010011010111100001011", 
    77 => "00111110011101101110011110100011", 
    78 => "10111011110110001110001000011001", 
    79 => "00111101000001110100011101101101", 
    80 => "10111101111100110110111101111110", 
    81 => "00111101000100111000011011000110", 
    82 => "10111100010110000010100110001101", 
    83 => "00111101110111110001010110100101", 
    84 => "10111110000010010011000100000001", 
    85 => "10111101101001101110111110101001", 
    86 => "10111010001110100001001111010001", 
    87 => "00111101111011111000011010100001", 
    88 => "10111101110001110011010111000010", 
    89 => "10111110000000000101111011100101", 
    90 => "00111101101011101011010101010101", 
    91 => "10111101011110100000001000111111", 
    92 => "10111101101101001001110000111010", 
    93 => "10111110001110011110010101011100", 
    94 => "10111101010010110111110110010010", 
    95 => "10111110010100000100001000001111", 
    96 => "10111101000101111100011111101101", 
    97 => "10111101101001010001011110110010", 
    98 => "10111101100110001000111000001110", 
    99 => "10111101010110001110001101011100", 
    100 => "10111101001110111011110010001010", 
    101 => "00111101110001110100011001100000", 
    102 => "10111110001101000001000111000011", 
    103 => "10111100110010101110110011000011", 
    104 => "00111101101110000010010010101101", 
    105 => "00111101010001100101100111101100", 
    106 => "10111100001101110100110010011101", 
    107 => "10111101111111001111111101100101", 
    108 => "00111110010001101100001011110000", 
    109 => "10111101111111011100000011011011", 
    110 => "10111100110010101011011010101000", 
    111 => "00111100111000111010101001011111", 
    112 => "10111101101010110000000111110001", 
    113 => "00111101100101100000100010000000", 
    114 => "00111101010100010110101101111101", 
    115 => "10111100111010001011101000110011", 
    116 => "00111101011100111111110111100100", 
    117 => "10111101100110001100001010100100", 
    118 => "00111101011011000110010001000010", 
    119 => "10111101001110010000110110011101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_4 is
    component inference_conv2d_f3_1_2_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_4_rom_U :  component inference_conv2d_f3_1_2_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


