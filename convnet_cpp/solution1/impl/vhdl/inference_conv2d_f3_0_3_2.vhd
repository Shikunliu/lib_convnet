-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_2_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001000011101000001001111", 
    1 => "10111101111111110010100010000101", 
    2 => "00111101110101111001000001110101", 
    3 => "00111101110101110010000101001111", 
    4 => "10111101011110001000010110000011", 
    5 => "00111101010001001111110010001001", 
    6 => "10111101001011011100010001011110", 
    7 => "10111110000101110000101011000100", 
    8 => "00111101010100000000110111100101", 
    9 => "10111101000110101011111110111010", 
    10 => "10111101101001101001100010101110", 
    11 => "00111110000011100000110111101101", 
    12 => "00111100101100101111010001001001", 
    13 => "10111101100011110111100000001101", 
    14 => "10111101000011000101110000101111", 
    15 => "00111101100101001000100100010111", 
    16 => "00111101100001110011101010100010", 
    17 => "10111101000010010101000011000111", 
    18 => "00111110001011101011011100000010", 
    19 => "00111100101110011010010111011110", 
    20 => "00111101010100100111001100110101", 
    21 => "00111101010100111010000011111100", 
    22 => "10111100100000100110011101001110", 
    23 => "10111101111110110010000000110010", 
    24 => "10111101111110101001000100010000", 
    25 => "10111110010101011101000010110111", 
    26 => "00111101110111101100011100000000", 
    27 => "00111101000111100101101100110101", 
    28 => "10111011101011010011000000111010", 
    29 => "10111101011011010100110011110000", 
    30 => "00111101110110000000010111100110", 
    31 => "10111011101010000111111100111011", 
    32 => "00111110000100100100111011011111", 
    33 => "10111100111100100100100010111101", 
    34 => "00111101101111110100111010111101", 
    35 => "10111101000100101111100011001011", 
    36 => "00111101010100010000101001100100", 
    37 => "00111101101001001101011111111110", 
    38 => "10111110001011001001001010011011", 
    39 => "00111100101001010110110001101011", 
    40 => "10111110001001100010011010110011", 
    41 => "10111101111101100001101010100100", 
    42 => "00111011001101111011100100010100", 
    43 => "00111110010001101000011001100010", 
    44 => "10111100111000001111000001110000", 
    45 => "00111101100110101111000100011101", 
    46 => "00111100001100101000011100111100", 
    47 => "00111101000001111001101011111111", 
    48 => "00111110001001001010111100001100", 
    49 => "00111100000010100100000110000010", 
    50 => "10111110001000110100010011000011", 
    51 => "10111101011001011110101000001010", 
    52 => "10111010110100100001111001110000", 
    53 => "10111101001110010110000001011001", 
    54 => "00111100101111111011100001000111", 
    55 => "00111101100011010101010110111110", 
    56 => "10111101101011110010100100110011", 
    57 => "10111011111011001110110000111100", 
    58 => "00111101101111101101011000100111", 
    59 => "00111101010110100011000000010010", 
    60 => "10111100101100011001100000101001", 
    61 => "00111101110010100110001000111111", 
    62 => "10111100100000111000110001111100", 
    63 => "10111100010010011100001110011000", 
    64 => "00111011011000110111000010101000", 
    65 => "00111101100001010100001101000011", 
    66 => "00111101111000101001101101101011", 
    67 => "00111110000101000111011010110000", 
    68 => "00111100111011111111001101111000", 
    69 => "00111100111101001011011110011000", 
    70 => "00111101101010110101000001101110", 
    71 => "00111101000011000000011101110101", 
    72 => "10111101000000111100100011001000", 
    73 => "10111100011010110100001001101110", 
    74 => "10111011100100001101110100011101", 
    75 => "00111110000100110001011000011010", 
    76 => "10111101100000101110000011001000", 
    77 => "00111101010000111110010111010011", 
    78 => "00111101001111000111001110000100", 
    79 => "00111110010111011011101100010111", 
    80 => "00111110001110100000110111111110", 
    81 => "00111100101001001110110010110100", 
    82 => "00111011110101100111111110101001", 
    83 => "00111101110100000101101011110111", 
    84 => "00111101110010011011000010010000", 
    85 => "10111101101101001111000111010111", 
    86 => "00111101011010110010011110110001", 
    87 => "00111101100001100001101000111001", 
    88 => "10111100100000110100111110101011", 
    89 => "10111101100110010000111110101001", 
    90 => "10111101001110101110001100101011", 
    91 => "10111110001111000110101110001011", 
    92 => "00111110000000001001111110100101", 
    93 => "00111101001111000111000011001010", 
    94 => "00111101100101100011000110101000", 
    95 => "00111110011001011011011111010000", 
    96 => "00111101101111100010000010110010", 
    97 => "10111101101001001010000011110001", 
    98 => "10111100110010001001110000011011", 
    99 => "10111101101000100001111001100000", 
    100 => "10111101101011110001001010011010", 
    101 => "10111100100101001000100111000101", 
    102 => "10111101000101100010111101100111", 
    103 => "10111101110111011010001011111001", 
    104 => "10111011000010001001111111001100", 
    105 => "10111110001011010001110000111011", 
    106 => "00111101110000000010110001001101", 
    107 => "10111101111111101101101011101100", 
    108 => "00111101101010101010110101000101", 
    109 => "10111100100100001101011111110100", 
    110 => "00111110001011101010101000101010", 
    111 => "10111100101000010111111010100000", 
    112 => "00111011101000001101100000111101", 
    113 => "10111101111111111000001010110010", 
    114 => "10111011111101110111000111111100", 
    115 => "00111101101100111111111111010100", 
    116 => "00111101011110011010010011101101", 
    117 => "10111100111110111011111110010100", 
    118 => "10111110000000011011101100000110", 
    119 => "10111110000011101100011100000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_2 is
    component inference_conv2d_f3_0_3_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_2_rom_U :  component inference_conv2d_f3_0_3_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


