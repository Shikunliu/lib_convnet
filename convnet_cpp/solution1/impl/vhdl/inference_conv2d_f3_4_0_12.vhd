-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_0_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_0_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000010110000001000001100", 
    1 => "00111101110110010001011010000111", 
    2 => "00111100111110001110000010111100", 
    3 => "00111110000110111011111011001011", 
    4 => "00111101110100001100101110110000", 
    5 => "00111101000001110010011100111100", 
    6 => "10111011101000010101111001001010", 
    7 => "00111110000110100011110101110001", 
    8 => "00111011110001110011001100011010", 
    9 => "00111011100111011001011010101001", 
    10 => "10111101001011100110100011111111", 
    11 => "00111101101000100001001101010000", 
    12 => "00111101010000100010000010111100", 
    13 => "10111101010000101011010111110011", 
    14 => "00111110001100001101101101101010", 
    15 => "10111101010111001101000100100111", 
    16 => "10111110000000000011110111011110", 
    17 => "10111101101000111100110111000011", 
    18 => "10111100110110111100111000100111", 
    19 => "00111101110101011000111100101110", 
    20 => "00111101010101001100010101101111", 
    21 => "10111100111010101111000011011010", 
    22 => "10111110000100011111011111010111", 
    23 => "10111101110110111101110111111101", 
    24 => "10111101100101011010111101010010", 
    25 => "10111100010110010111001110100100", 
    26 => "00111110000001101101011010011001", 
    27 => "10111101110001100110001011010110", 
    28 => "00111101100010001011010000010001", 
    29 => "00111101110100010111110101101011", 
    30 => "00111101101100100000001000101011", 
    31 => "00111101011001010101011111011110", 
    32 => "10111101101110100011101001011001", 
    33 => "10111101010011101110010110101100", 
    34 => "00111101000010111111100011111101", 
    35 => "10111110001010010010010111111111", 
    36 => "10111101100111011011100001000010", 
    37 => "00111110000011011110000001010000", 
    38 => "10111101010101000011110001111101", 
    39 => "10111101101010011111000101010000", 
    40 => "00111011111110101010011000001110", 
    41 => "10111100000010001100101000111110", 
    42 => "10111101010010101010100110100111", 
    43 => "00111101100100101110010100010101", 
    44 => "00111110000000000000111110111011", 
    45 => "10111100101000010100011010100010", 
    46 => "10111101101100100111110110100100", 
    47 => "00111100101000010001000110010011", 
    48 => "00111100100100101011001101100001", 
    49 => "00111101110111100010111011110101", 
    50 => "00111101100110010000001011011110", 
    51 => "10111100101000000001101111001010", 
    52 => "10111100111011110001110001001101", 
    53 => "00111100010011000001101011110110", 
    54 => "00111110000110011001000110111100", 
    55 => "10111100110111000101110011111000", 
    56 => "10111101110000100000101010011100", 
    57 => "00111100101111000001111100000000", 
    58 => "00111101010010101111101111000010", 
    59 => "10111101000011111100111101001011", 
    60 => "10111110001011000110011110011101", 
    61 => "00111101010010111001011001010001", 
    62 => "10111101011010100110001110110111", 
    63 => "10111101000110010100100111001110", 
    64 => "00111011101010011001000001110010", 
    65 => "10111101100101011110010001111011", 
    66 => "10111110000101110100100101101011", 
    67 => "10111101101101100001111000001100", 
    68 => "10111101100001011011111111010101", 
    69 => "00111010100001010110100101100001", 
    70 => "00111100111101111110001011000101", 
    71 => "10111101110011111001101110011001", 
    72 => "10111110010100010010110101110111", 
    73 => "00111110000000011011101100000110", 
    74 => "10111101110111010111100010000001", 
    75 => "00111100111000011011011100001010", 
    76 => "10111101010000011010101111010010", 
    77 => "00111100111001111011101100110000", 
    78 => "00111101110011001110000111000110", 
    79 => "10111101001011010011010010000001", 
    80 => "00111101001011111100111110011100", 
    81 => "10111101110011101010111000011001", 
    82 => "00111100001110100001110110011110", 
    83 => "00111101100010001011000000010101", 
    84 => "00111011101111100111010110011100", 
    85 => "10111100111000001001011110000101", 
    86 => "10111101110100000101110110010110", 
    87 => "00111110000110100011011101101001", 
    88 => "00111101111100101011111001001001", 
    89 => "10111101011100111001000100001100", 
    90 => "10111101110101100111100001111101", 
    91 => "00111110001001111110110001111000", 
    92 => "00111110000011110011101000010101", 
    93 => "00111101000101111001010101111110", 
    94 => "00111101101100101011011000001101", 
    95 => "00111110000111000110010110000100", 
    96 => "00111010101000000011001110010010", 
    97 => "10111110000011011001101000001111", 
    98 => "10111101100110010011010111010100", 
    99 => "00111101110000001100010111111001", 
    100 => "10111100000010110101000000010101", 
    101 => "10111110000010001101110100011110", 
    102 => "10111101010010110111101000011100", 
    103 => "00111101110000001111001101111011", 
    104 => "10111101101111111110101110001110", 
    105 => "00111101000100000001111110011101", 
    106 => "10111101010000100111101101010101", 
    107 => "10111011001010010001100000010010", 
    108 => "00111110001110010100111011100100", 
    109 => "10111101011010010010101111011110", 
    110 => "00111101110010111010000001100010", 
    111 => "00111101111110010001001101100010", 
    112 => "00111110001111000110100000100011", 
    113 => "10111011111111100000010000111101", 
    114 => "10111101001000011110010110110011", 
    115 => "00111110000110011100001011000010", 
    116 => "00111101001000111111001001101000", 
    117 => "00111100100000111011011010100100", 
    118 => "10111101100100000010100101111001", 
    119 => "00111100110111010001110000111011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_0_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_0_12 is
    component inference_conv2d_f3_4_0_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_0_12_rom_U :  component inference_conv2d_f3_4_0_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


