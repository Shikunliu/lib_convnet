-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_111_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_111_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011100000100000101101110011", 
    1 => "10111101110110101000101101001100", 
    2 => "00111101001001011101001110011001", 
    3 => "00111101001001010000111001111000", 
    4 => "00111110000110110001111111101111", 
    5 => "00111101100000101011010011001011", 
    6 => "10111101111111111100000110011100", 
    7 => "10111110010001000101001100001001", 
    8 => "00111101001000000010111001011001", 
    9 => "10111110011101011100101111111111", 
    10 => "10111101100010000100000011010100", 
    11 => "10111101110010101000011111100100", 
    12 => "00111101110011111011001110110111", 
    13 => "10111101010101000010110111001111", 
    14 => "10111101110110000110001100111001", 
    15 => "00111100101000000011011111100100", 
    16 => "00111110000111110110111011000110", 
    17 => "00111110000001111110010110101000", 
    18 => "00111110000101011111011111000110", 
    19 => "00111101011111011011110001110100", 
    20 => "00111100000100000111110001000100", 
    21 => "10111101110010110000000100101000", 
    22 => "00111011000111111111111001100011", 
    23 => "10111101001110101000100101001110", 
    24 => "10111101101001010011110000100010", 
    25 => "00111101101111010010010101101000", 
    26 => "10111100110011101000011110111000", 
    27 => "10111101110100111010101000110111", 
    28 => "10111100101110101111011101001101", 
    29 => "10111110001101001001101011011101", 
    30 => "00111110010000000011110000001000", 
    31 => "10111101111101111110101110101111", 
    32 => "10111110001010111011010101011011", 
    33 => "00111101001010101111101111110111", 
    34 => "10111101110000111100010110110000", 
    35 => "10111101101101010110111111111100", 
    36 => "10111110001101110111101001110000", 
    37 => "10111101011010111011010111000110", 
    38 => "10111100000011011100110010110010", 
    39 => "10111101000110110111011111011011", 
    40 => "10111101101101100101111001111100", 
    41 => "00111101000110100010100010100000", 
    42 => "10111110100001001100011110001111", 
    43 => "00111101110111101001010010101011", 
    44 => "10111100100001111110101011100110", 
    45 => "00111110000001101011000001010011", 
    46 => "10111110000110111000100010000111", 
    47 => "10111101101110000001110000010011", 
    48 => "10111101101010000111100110101001", 
    49 => "00111101101101100110011000001000", 
    50 => "00111101100101010011000001010110", 
    51 => "10111011101010000001001110011010", 
    52 => "10111110001010010000101001111000", 
    53 => "10111101101100000001110000011010", 
    54 => "10111011100011111110110100110011", 
    55 => "00111110010001110010011101010111", 
    56 => "10111101100010101110011010101110", 
    57 => "00111101101000110100101110010100", 
    58 => "00111101110000100100100110101111", 
    59 => "00111101110110011001100100010011", 
    60 => "00111110000011011111000101011010", 
    61 => "00111110010010011000001111011000", 
    62 => "10111101110110110110110010111110", 
    63 => "00111110001011010000110101001010", 
    64 => "00111100001101110101111111101001", 
    65 => "00111100000110101000000011010101", 
    66 => "10111110010100110100100010110010", 
    67 => "10111101111101111101010010011101", 
    68 => "00111110010010000100111110010000", 
    69 => "00111101110010101001001100110111", 
    70 => "10111101110011001111101101110110", 
    71 => "00111100101101000000011010011000", 
    72 => "00111101010011010110000000111011", 
    73 => "00111101100001111110100001111100", 
    74 => "10111101011100111001100100011111", 
    75 => "00111101101111101010100110001001", 
    76 => "10111101001011010011111001110111", 
    77 => "00111101001110010000001010011011", 
    78 => "00111101110010000000000111101010", 
    79 => "10111110000110000100110001101010", 
    80 => "00111110001101011011111111110000", 
    81 => "00111110011000111001101100000010", 
    82 => "10111101100001011111110001100100", 
    83 => "00111101111001000110111110011100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_111 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_111 is
    component inference_mult_1_120_120_84_s_W4_111_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_111_rom_U :  component inference_mult_1_120_120_84_s_W4_111_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


