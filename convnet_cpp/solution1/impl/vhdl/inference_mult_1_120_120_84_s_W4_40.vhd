-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_40_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_40_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101010010000111110001110", 
    1 => "10111011110101000001010001101010", 
    2 => "10111101001110010011100011101100", 
    3 => "00111101111111001110111110101010", 
    4 => "10111001110110100000011100011101", 
    5 => "10111110010110100101111011111111", 
    6 => "10111100111001100100110001100101", 
    7 => "00111101010001111000111110010001", 
    8 => "00111101001100010110101011110111", 
    9 => "10111101101001010000001111000110", 
    10 => "10111110001101010100011001001110", 
    11 => "10111101111100001101101001011110", 
    12 => "00111101011111011111111010011110", 
    13 => "10111100101111010111010000110101", 
    14 => "10111101010001100001101001111100", 
    15 => "10111100010100010100100011001000", 
    16 => "00111010111001001011111010000110", 
    17 => "10111101101000000110011101110001", 
    18 => "00111110010011011111011100011111", 
    19 => "00111101110110000000111001001001", 
    20 => "00111101011001011010100100000111", 
    21 => "10111101110110000010110000101100", 
    22 => "10111110000001000111011110111100", 
    23 => "00111101111001001100000001011001", 
    24 => "10111101000000011100101000111010", 
    25 => "00111101100111101010010101110010", 
    26 => "10111101101001001001110100101011", 
    27 => "10111100111110100010010001010100", 
    28 => "10111101010001110010000010111011", 
    29 => "10111101100110011100001110110011", 
    30 => "00111101101001110010110110101111", 
    31 => "00111011110110001110010101110100", 
    32 => "00111100000111011011011100100000", 
    33 => "10111101001010000010001011001001", 
    34 => "00111101110011011110000100011010", 
    35 => "00111110001000001110111001001010", 
    36 => "00111011111001100100101101111001", 
    37 => "10111101110111101010000101000000", 
    38 => "00111101011100111000001110100000", 
    39 => "00111100111000110110110111000011", 
    40 => "00111101100011011111101111001001", 
    41 => "10111101000101011100110110101101", 
    42 => "10111101100010100000001011100001", 
    43 => "10111101101110000101100110111011", 
    44 => "00111101010001000010110000101111", 
    45 => "00111011000010001010000001001101", 
    46 => "00111101010110011011111001101000", 
    47 => "00111101111110111001110011111010", 
    48 => "00111101000000100111101011101010", 
    49 => "00111100000110011100001100110101", 
    50 => "00111101101101010010111011000011", 
    51 => "00111100110011100100101010110001", 
    52 => "10111101101001011001101111010001", 
    53 => "00111100011111010010100110001100", 
    54 => "10111101111010111001001000111010", 
    55 => "00111101010010001001000010010011", 
    56 => "10111101100000100010001100110011", 
    57 => "10111100101111111111000110001000", 
    58 => "10111101111000111011000111010001", 
    59 => "00111101111110100100111100000001", 
    60 => "00111100110000000011010000111000", 
    61 => "10111101101111101110011010000011", 
    62 => "00111100011100001110111111000010", 
    63 => "00111101100101111111101000011010", 
    64 => "00111100101111011001001101110100", 
    65 => "10111110000101010111000100001001", 
    66 => "10111101110010000101001101110001", 
    67 => "10111101001101110000010110111011", 
    68 => "00111101101000101111000001000000", 
    69 => "10111101000001001111100101111111", 
    70 => "00111101101111000101010011110011", 
    71 => "00111101101111010110000101111101", 
    72 => "00111101110011110010000111110111", 
    73 => "00111101000111111011011010110100", 
    74 => "10111110000011000111011011010001", 
    75 => "00111110000110101100101001111001", 
    76 => "00111101101100101111010000111100", 
    77 => "00111100111110010111010100000001", 
    78 => "10111100000100111001001100010000", 
    79 => "00111101110010111000001000101111", 
    80 => "10111101100101110011000100111111", 
    81 => "10111101000011011010100110111100", 
    82 => "10111101100001000110011000000011", 
    83 => "00111100010001000010111111011011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_40 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_40 is
    component inference_mult_1_120_120_84_s_W4_40_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_40_rom_U :  component inference_mult_1_120_120_84_s_W4_40_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


