-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_3_4_13_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_3_4_13_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110001011000001000111011", 
    1 => "10111101101011000010100011011011", 
    2 => "00111100110001000101110110010011", 
    3 => "10111110001111001100011101001100", 
    4 => "10111101001111000011100101010001", 
    5 => "00111110000011011000011011101100", 
    6 => "10111101011010111101111110011101", 
    7 => "00111101100111101001111000110110", 
    8 => "10111011100010010010000110111101", 
    9 => "00111100111011000010101010010110", 
    10 => "00111101100000000001110101000001", 
    11 => "10111101011101000000010001001001", 
    12 => "10111100110000101001010001100101", 
    13 => "10111101010111111110101000010110", 
    14 => "00111101001000011111010100111000", 
    15 => "00111101100100110000110110011100", 
    16 => "00111101101101011101100100001101", 
    17 => "10111101011000100010011110001101", 
    18 => "00111101110110100101111000110101", 
    19 => "00111101111101000100110111001011", 
    20 => "00111100111001011010011010111000", 
    21 => "10111101111101100101111001000110", 
    22 => "00111100110001111100001010100010", 
    23 => "00111101101001110010100011001110", 
    24 => "10111101100010100101111111111110", 
    25 => "10111101110100100000010110111100", 
    26 => "10111101100001000101100101100001", 
    27 => "00111100100000111010011111000000", 
    28 => "00111101011000100001010001111000", 
    29 => "10111100100111101011000000100100", 
    30 => "00111011000110100100001100111000", 
    31 => "10111100101101100111110111010110", 
    32 => "10111101111110110110010001011010", 
    33 => "10111100101101110101111011011100", 
    34 => "10111100100000101101111110101110", 
    35 => "10111101001011100111111000010010", 
    36 => "00111101101000001101010101001000", 
    37 => "00111101111011101101000100111001", 
    38 => "10111101101100010110010101001101", 
    39 => "00111100100001001110111010110010", 
    40 => "10111110000001001110101010001110", 
    41 => "10111110001111110011011101110110", 
    42 => "10111101100011100000100110000110", 
    43 => "10111101110010000111100101100110", 
    44 => "10111101111001001111011001011010", 
    45 => "10111101000011111000001101111011", 
    46 => "10111110000111000001110111110011", 
    47 => "10111110001100110111110100100000", 
    48 => "10111100001101110000010001111001", 
    49 => "10111100110010111101001110101001", 
    50 => "10111101001100100110110101110000", 
    51 => "00111101100111001100100111111000", 
    52 => "00111110000100111010000100001010", 
    53 => "00111100101101010011101011100000", 
    54 => "10111101000001111111111001100111", 
    55 => "00111110000011101100010001100001", 
    56 => "00111101100000110010001110010100", 
    57 => "00111100101101001010111000101000", 
    58 => "00111101001000101000110101000011", 
    59 => "00111101001000010111011101111111", 
    60 => "10111101011001100111110000110110", 
    61 => "00111101111111010100011010110010", 
    62 => "10111101110010011101111011001110", 
    63 => "00111100111111110101101001010011", 
    64 => "10111101000111011011101001000000", 
    65 => "10111101001111001001100101111001", 
    66 => "10111101111110110111011100111010", 
    67 => "10111101111100001001101111111010", 
    68 => "10111100111000101000011000111101", 
    69 => "10111101011100100001101010011010", 
    70 => "10111101010010010000110011010100", 
    71 => "10111100100111001001101110101101", 
    72 => "00111101010011010101011101010001", 
    73 => "10111110001010100001001101111111", 
    74 => "10111110001001001100011001100001", 
    75 => "10111100010111101111001001101001", 
    76 => "10111101010010110010111010011101", 
    77 => "10111100101000111110001011001001", 
    78 => "00111101100000110010000010110001", 
    79 => "10111100110101111101101100011110", 
    80 => "00111101010110010011101000010011", 
    81 => "00111100101011101111010001110101", 
    82 => "10111110001110011001001010000110", 
    83 => "10111101111111110011011100110011", 
    84 => "00111101001101111111111011111010", 
    85 => "10111101100111100000101110010001", 
    86 => "10111100010011100110011010010101", 
    87 => "00111100110010011100010011011011", 
    88 => "10111101011011000101110001100101", 
    89 => "00111010111110110100110011101000", 
    90 => "10111101100010010111000101111110", 
    91 => "10111110000100001110010000010001", 
    92 => "10111101100000101001001000001001", 
    93 => "10111100110011000111000010111100", 
    94 => "10111101111001010001001000100011", 
    95 => "00111011110000110010010101011001", 
    96 => "10111101000110001001000000110101", 
    97 => "00111010110101101111001010010110", 
    98 => "00111110000000010011010011001110", 
    99 => "00111100011010101110000010110100", 
    100 => "00111100111110001010010011000010", 
    101 => "10111101010100000001001101110011", 
    102 => "00111101000011111100011110001001", 
    103 => "00111110000000011111000011000011", 
    104 => "10111101110100100101010101101101", 
    105 => "10111101100000110000111101010111", 
    106 => "10111101110001110010011110100111", 
    107 => "00111011111111100111100011010111", 
    108 => "10111110000011010001000110111110", 
    109 => "10111100111111110110001010110111", 
    110 => "10111110000000101101010000001011", 
    111 => "10111101110111110101011100101110", 
    112 => "00111100010110000100010011010000", 
    113 => "00111100100110000110010011100110", 
    114 => "00111101000100000100111111011001", 
    115 => "10111110001001101101100011110101", 
    116 => "10111101110001001001010110000100", 
    117 => "00111101100101101111001010110011", 
    118 => "10111011000110111010001001011101", 
    119 => "00111101001010101101000001011000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_3_4_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_3_4_13 is
    component inference_conv2d_f3_3_4_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_3_4_13_rom_U :  component inference_conv2d_f3_3_4_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


