-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_1_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_1_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100001101011111100000001", 
    1 => "00111101101010001110011100101111", 
    2 => "00111110000000101110011011101011", 
    3 => "00111110000011100110100010100001", 
    4 => "00111110000011000101000100010001", 
    5 => "00111101011110010100011001011000", 
    6 => "00111101010010010011001101101011", 
    7 => "10111101010110010101011100111010", 
    8 => "00111101100001100000001000011011", 
    9 => "00111110010101011011001111100001", 
    10 => "00111100001001110001011011000101", 
    11 => "10111101101010111001111010100111", 
    12 => "10111110000101000000010100101101", 
    13 => "10111110010011110011000000011111", 
    14 => "10111011101000101011110000101101", 
    15 => "00111110000011000100011101011110", 
    16 => "00111101010101101100011100111100", 
    17 => "00111011001101001110101010000011", 
    18 => "10111101101100001010110010011000", 
    19 => "00111101101111000111111001011110", 
    20 => "00111101111001111001101000101000", 
    21 => "10111101111101100001000000101000", 
    22 => "00111101000010100000111100110011", 
    23 => "00111101000010111001111001001001", 
    24 => "00111110000101100111111101001110", 
    25 => "10111101101000011101000101011100", 
    26 => "10111100011001101000110000100110", 
    27 => "00111110000111101100100110011111", 
    28 => "10111101011100010000001110101110", 
    29 => "10111101000001000011111010001001", 
    30 => "10111100100010101001011101101000", 
    31 => "00111101101000110001011000011010", 
    32 => "00111100010001010110101101000100", 
    33 => "00111101101011001001110010101100", 
    34 => "00111110001000001001101100110000", 
    35 => "00111100000110100101101000001001", 
    36 => "00111100110001110001000001100000", 
    37 => "00111101011011001010101000110010", 
    38 => "00111101100001101011000000111000", 
    39 => "10111101001011111000111001001000", 
    40 => "10111110000010011100010100011110", 
    41 => "00111101111010000001011001101010", 
    42 => "00111100110110011111101110111111", 
    43 => "10111101011101101111000001110010", 
    44 => "00111101110000001100011001110001", 
    45 => "00111101001100101101111110100001", 
    46 => "00111100000100000001000001100100", 
    47 => "10111110010010011101011000101000", 
    48 => "10111101110000110111111011101000", 
    49 => "10111100010011100011010010101100", 
    50 => "10111101110001100110000110100001", 
    51 => "00111100101010100110110000011010", 
    52 => "10111101000000010101100000111111", 
    53 => "10111101110100001110001101000111", 
    54 => "00111100100100111100100101000000", 
    55 => "00111101111010101010010010111010", 
    56 => "00111101110111010000001110010111", 
    57 => "10111101011011010110001001010100", 
    58 => "10111101101111110110011101100001", 
    59 => "10111101001001000001111010101000", 
    60 => "00111101011000101100101110100111", 
    61 => "10111010111001100100100100100000", 
    62 => "00111101000010100101000010000110", 
    63 => "10111110000111110111101111100001", 
    64 => "00111101100011010100101100110101", 
    65 => "00111101011011100011101101000111", 
    66 => "00111101100000000110101100111000", 
    67 => "10111100000010100011100100110100", 
    68 => "00111101100001001000000011110110", 
    69 => "10111110000000101101100110001100", 
    70 => "00111110000000011111000100000110", 
    71 => "00111101110001110110010010101110", 
    72 => "00111110010110101110001011011010", 
    73 => "10111100010011111101010100101010", 
    74 => "00111100000100111001010001111101", 
    75 => "00111110000101110110110001001000", 
    76 => "00111101111010101101110001001101", 
    77 => "00111100010100101010111000100011", 
    78 => "10111101010010001011110010000010", 
    79 => "00111010001010001011101000000100", 
    80 => "10111101111000100111011111000100", 
    81 => "00111101110111111011011010011010", 
    82 => "00111101101010100100111101010001", 
    83 => "00111110001000011000100010110001", 
    84 => "00111101110111011010101011010110", 
    85 => "10111110001111011010100010111101", 
    86 => "00111101110001011010101110011001", 
    87 => "10111101111111110011100111010010", 
    88 => "00111100101111111111101011000010", 
    89 => "10111101100110011100001111011100", 
    90 => "10111101101101111001100000101010", 
    91 => "10111110000110111010000011101000", 
    92 => "00111110000101000111001011000001", 
    93 => "00111110000001011001010001101100", 
    94 => "00111110000100110111101100000111", 
    95 => "00111110000000101011101010011101", 
    96 => "10111011101101101100100010101001", 
    97 => "00111101110010010010101010101001", 
    98 => "10111100100000011000011110111111", 
    99 => "00111110000010010001110110011011", 
    100 => "10111100010110011000111011101000", 
    101 => "10111101111110000100010111011101", 
    102 => "10111110010001000111000101110001", 
    103 => "10111100101100110100011001001001", 
    104 => "10111101100100000100010110010011", 
    105 => "00111110001000010110110010100100", 
    106 => "00111110010010011100000101110010", 
    107 => "00111101101011010000011101101010", 
    108 => "10111101011000001000001110110011", 
    109 => "10111101100100010010001010101010", 
    110 => "10111101001001110011000001110110", 
    111 => "00111110000110010011111011100110", 
    112 => "00111101010010111011000010001000", 
    113 => "00111101100011010111001110111100", 
    114 => "10111110000110101000000100010011", 
    115 => "10111100100100001000001100111011", 
    116 => "10111101110010010110110110000010", 
    117 => "00111101001101011100000011000111", 
    118 => "00111100110011111000010000000010", 
    119 => "10111101011010101000110101010111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_1_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_1_12 is
    component inference_conv2d_f3_1_1_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_1_12_rom_U :  component inference_conv2d_f3_1_1_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


