-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_0_0_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_0_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111110001011010001111100", 
    1 => "10111101100110111100101001100001", 
    2 => "10111100110011100011110100001111", 
    3 => "00111101011010100101001111000110", 
    4 => "10111101011010100001011000111001", 
    5 => "00111101101011110110100100101010", 
    6 => "00111100000100111101010100111111", 
    7 => "00111101001100000010111111000011", 
    8 => "10111101011111110011110110110011", 
    9 => "10111101100110100100011111000101", 
    10 => "00111011001010101111000000101110", 
    11 => "10111101101111010001110111011011", 
    12 => "10111101111010110011100010010011", 
    13 => "10111101100100010001100111011011", 
    14 => "10111110000011000101010101000011", 
    15 => "10111011010100000011111001110001", 
    16 => "00111101001111111000001010010111", 
    17 => "00111100101100010000011101110100", 
    18 => "00111101000010101011100110110010", 
    19 => "00111100110001001101001001100010", 
    20 => "00111110000001011001100100100100", 
    21 => "00111101100100111111010000111110", 
    22 => "00111101111101011110111100100000", 
    23 => "10111101100101110000001001010011", 
    24 => "00111110001000010111110100101000", 
    25 => "10111110000010101010110100011101", 
    26 => "10111101011111010011110010000111", 
    27 => "00111110001101100110110110111101", 
    28 => "00111101110011011000101110100100", 
    29 => "10111101100001001100010100101100", 
    30 => "00111101111100010111100010110011", 
    31 => "10111101101110100010011111110010", 
    32 => "00111110000000110001100100111111", 
    33 => "10111100010110101001110010011001", 
    34 => "00111100000001100111100001001010", 
    35 => "00111101000101100100011110111011", 
    36 => "10111101001101111010110010001111", 
    37 => "00111101000101011001001110110000", 
    38 => "10111110000000111110110111011001", 
    39 => "00111101111001101010010111010111", 
    40 => "10111100111100100101101101100111", 
    41 => "10111110001111110111100011111111", 
    42 => "00111100000000110100100100101011", 
    43 => "00111100101110101011111101001110", 
    44 => "10111110000001111011110100000110", 
    45 => "10111100101011010111100011011111", 
    46 => "00111101101000101111110100110011", 
    47 => "10111110000111111110100100110010", 
    48 => "10111101010001001100000001011001", 
    49 => "10111101100001001011010000010100", 
    50 => "00111101100110111111110111011101", 
    51 => "00111101101001001111100110100111", 
    52 => "10111010000011001100000101001101", 
    53 => "00111101010110000111100000110001", 
    54 => "10111110001001100111101100011100", 
    55 => "10111110000010011110100101001011", 
    56 => "10111100010001111100010010111011", 
    57 => "00111101111100011110010010110100", 
    58 => "00111101001111011000000001111001", 
    59 => "00111101000010011100001101100011", 
    60 => "10111101111010110101010001011100", 
    61 => "10111011111001111001001000001011", 
    62 => "10111100111100001000101010101101", 
    63 => "00111101101101101100000011111111", 
    64 => "10111100110110010111100001000001", 
    65 => "10111100110100100101110011000100", 
    66 => "10111110000010011101010110100010", 
    67 => "10111100011101001001101110110011", 
    68 => "10111101101011000101111011110110", 
    69 => "00111101101110000100010011011101", 
    70 => "00111101100001110111101111110101", 
    71 => "00111101110111111110010000110110", 
    72 => "00111110001010000111100001110101", 
    73 => "10111101110110110101001100001101", 
    74 => "10111101011100010110010000001011", 
    75 => "10111001000010111101110010111010", 
    76 => "10111101100011000110110111001101", 
    77 => "10111110001100011000000100010111", 
    78 => "10111110011000101011011000101000", 
    79 => "00111110010001010101110000010000", 
    80 => "10111101111011111111000010001001", 
    81 => "10111101110011110000100011001100", 
    82 => "00111101100111101000110000010010", 
    83 => "10111101000001001011001000110001", 
    84 => "10111101100001101000101000101000", 
    85 => "00111101110001111000101001100000", 
    86 => "10111101010001000101011100010010", 
    87 => "10111101100001011000110100111101", 
    88 => "10111100010000101010011101000100", 
    89 => "00111101111011100011110001010011", 
    90 => "00111101100111011010100001010010", 
    91 => "10111110000101101100111101000010", 
    92 => "00111110010000000011110001001011", 
    93 => "10111100000110001000000000110100", 
    94 => "10111110001101000111001001111110", 
    95 => "00111101011101100011001100010010", 
    96 => "00111100110000010001110010010101", 
    97 => "00111100111111110001001101110001", 
    98 => "00111110000000011001001011101010", 
    99 => "10111101001100110111001000011101", 
    100 => "00111101100011011011101000110011", 
    101 => "00111100100001010010001101010101", 
    102 => "00111101111001000110111110011100", 
    103 => "00111101110100000001011101010101", 
    104 => "10111101000011101101010110000110", 
    105 => "00111101100001010110111101000000", 
    106 => "00111110001111001110000011111100", 
    107 => "00111100110101110011110010010010", 
    108 => "10111100111100110101010111001110", 
    109 => "10111101000110011010101011100111", 
    110 => "10111100110000111100011011111111", 
    111 => "10111101100101100010011010100110", 
    112 => "00111110000100011011110100011111", 
    113 => "10111110001100101101110101111011", 
    114 => "10111110000010101010101011000001", 
    115 => "10111100111110110010011110111111", 
    116 => "00111011110010101110110010001101", 
    117 => "00111110010101111010110010000010", 
    118 => "10111101101011101001000100110101", 
    119 => "10111110000000001110110010110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_0_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_0_0 is
    component inference_conv2d_f3_0_0_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_0_0_rom_U :  component inference_conv2d_f3_0_0_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


