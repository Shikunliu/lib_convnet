-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_0_7_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_0_7_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111111111000110010101000", 
    1 => "00111101100101010011000101110000", 
    2 => "10111100101100000010010010001011", 
    3 => "00111101100011011000101001100010", 
    4 => "10111101100110011011010110110100", 
    5 => "00111100000001101111101101100111", 
    6 => "00111101010010101001011111101111", 
    7 => "10111101001000101011000111110111", 
    8 => "10111100001010100100010001110111", 
    9 => "10111101100001000011001100110110", 
    10 => "00111011110001000101001011000000", 
    11 => "00111100100100100000001110100011", 
    12 => "10111010100011110010110110000101", 
    13 => "10111100010010010100001101000000", 
    14 => "10111100010001010111000001001101", 
    15 => "10111101111100101111011101101110", 
    16 => "10111101010000011110010010001100", 
    17 => "00111101001011111001011001110110", 
    18 => "00111110001001100011110010111000", 
    19 => "00111100001010010101100001010011", 
    20 => "00111010111010110001111110011110", 
    21 => "00111100111111110110000001101000", 
    22 => "00111101101000100111011010111000", 
    23 => "00111110000010110100000011110110", 
    24 => "00111100011101101001110111101100", 
    25 => "10111101101000000001100010001001", 
    26 => "10111101100110110110010001011010", 
    27 => "00111101010111011011110000100011", 
    28 => "10111100010011000110101000111100", 
    29 => "10111110000010001010100110111101", 
    30 => "10111110011101111000001100010111", 
    31 => "10111101011111011010001100101110", 
    32 => "00111011010000110000101110000011", 
    33 => "10111100111011001000101011011000", 
    34 => "10111101000001010100111011110100", 
    35 => "10111010111011110101111001110010", 
    36 => "10111101101010000110001101100001", 
    37 => "00111101001010100100000101101101", 
    38 => "10111100101100100110100011010011", 
    39 => "00111100101110110011000001011000", 
    40 => "00111101011001010000010001001100", 
    41 => "00111100100001101110110001001110", 
    42 => "10111101111111011000000101101011", 
    43 => "00111101100100000000100001110001", 
    44 => "00111100011101110111011100110000", 
    45 => "00111100110111011001111111101110", 
    46 => "10111100100000100111000010001000", 
    47 => "10111110000010100111101100001011", 
    48 => "00111011100100000010101111000111", 
    49 => "10111101100101010111010110011000", 
    50 => "00111101110011010111011000100101", 
    51 => "00111101000000101100011111000110", 
    52 => "00111110001100010101011000011001", 
    53 => "00111101001110101110111000101101", 
    54 => "10111101100110111000111010011100", 
    55 => "00111101001110110111011100011111", 
    56 => "10111101000011101010011000100001", 
    57 => "00111101101111110001000011101101", 
    58 => "10111110001000100000001111100110", 
    59 => "10111101001000101110101100000001", 
    60 => "10111110001000111100000011000010", 
    61 => "00111110000111001100101000101110", 
    62 => "00111101011010101110100011000111", 
    63 => "00111110000011011100100000110010", 
    64 => "10111100111011110100011100010101", 
    65 => "00111100100100010010111011000111", 
    66 => "00111101110011111101001100101100", 
    67 => "10111101011000101110010111011110", 
    68 => "00111100100010110010000110011100", 
    69 => "00111101101110001000101100010001", 
    70 => "00111110001000001110010111100110", 
    71 => "10111110000010111110101010010010", 
    72 => "00111101101110010001000000100010", 
    73 => "00111101001111000000111101000101", 
    74 => "00111101100001100010100000000010", 
    75 => "10111110001011000111111001101011", 
    76 => "10111101001111011011000000101111", 
    77 => "00111100100001111011010100110110", 
    78 => "10111011111111101100110010100100", 
    79 => "00111110001000101000110000110111", 
    80 => "10111101101000111001010000010111", 
    81 => "00111100010110101101001010110100", 
    82 => "00111101010100101000011111011101", 
    83 => "00111101111101101011101010001100", 
    84 => "00111101101110010100010010101010", 
    85 => "00111101111110101011001110101011", 
    86 => "10111101001000101111111100001001", 
    87 => "00111101110011010101110001110100", 
    88 => "10111101111100001011101101101111", 
    89 => "00111101100001001111010001000001", 
    90 => "10111101111001101110001010101000", 
    91 => "10111100110000000111001111111001", 
    92 => "10111011111100001100001110110111", 
    93 => "00111101110101110001010010111010", 
    94 => "00111110001010001010101101010000", 
    95 => "00111101100001000001110101110100", 
    96 => "10111101100010100010001111000000", 
    97 => "10111101101101101000001000111101", 
    98 => "00111101101001111111010101100010", 
    99 => "00111101100010100110111111010011", 
    100 => "00111100001111000100100000011010", 
    101 => "10111101110110000101010010001011", 
    102 => "00111101011101100101111111011001", 
    103 => "10111110001111111010001001101010", 
    104 => "00111100000101001010110100100001", 
    105 => "10111101000101011111111101111011", 
    106 => "00111100100101000011111001111011", 
    107 => "10111101100010110011010001100001", 
    108 => "00111101110001110110001101010001", 
    109 => "00111110001011010011010010011100", 
    110 => "00111100111110011001110110110000", 
    111 => "10111101101100101011110000110000", 
    112 => "10111101100110011100011010100011", 
    113 => "10111101001011010001011111111100", 
    114 => "10111101000101111100000011100111", 
    115 => "10111110010001000011001101010001", 
    116 => "00111101011101110100001100101101", 
    117 => "00111101101100011110011001100010", 
    118 => "10111110001100111101111111110100", 
    119 => "10111110000011111100010111001110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_0_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_0_7 is
    component inference_conv2d_f3_2_0_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_0_7_rom_U :  component inference_conv2d_f3_2_0_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


