-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_2_2_6_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_2_2_6_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100001110010001100010111011", 
    1 => "10111101010000010101101100101111", 
    2 => "00111101001000101100101110100111", 
    3 => "00111100100000010001010011010011", 
    4 => "10111101110100100001000101000101", 
    5 => "00111100111011000110111101011111", 
    6 => "00111101101100001000010101000110", 
    7 => "10111101010110001101011101100111", 
    8 => "00111101111001111011101100110000", 
    9 => "00111101101110000101010110010111", 
    10 => "10111110010000110100011101100011", 
    11 => "00111100100000000111000101110101", 
    12 => "10111101100011001011001011011001", 
    13 => "00111110000110110100001100001111", 
    14 => "10111100000101011011100010011001", 
    15 => "00111101100010111100000101011100", 
    16 => "00111100110000100111010100100101", 
    17 => "10111110001000100011111101101000", 
    18 => "00111101101111010011110010100001", 
    19 => "00111101000001011011101011000000", 
    20 => "10111101010110010001000011111000", 
    21 => "10111110000010111100010111011111", 
    22 => "10111100100000011100100001010111", 
    23 => "00111100110101010011111110011000", 
    24 => "00111011010001001111000010001010", 
    25 => "10111101010001000110100001000101", 
    26 => "00111101001000000001100101000101", 
    27 => "10111101001010010001011100000000", 
    28 => "00111101101101110000111010010111", 
    29 => "10111101001001110110110110110011", 
    30 => "00111110010010110101100101011000", 
    31 => "10111110010000111001110010010101", 
    32 => "00111110001111010100010100100000", 
    33 => "10111101101110110001000100011000", 
    34 => "00111101100011000111001010011111", 
    35 => "00111101101001011110101101011001", 
    36 => "10111101100100001011000110101110", 
    37 => "00111011101000011001010001001111", 
    38 => "00111100111000110010110000011111", 
    39 => "00111101000110100000011100101101", 
    40 => "00111101011100010100110000100011", 
    41 => "00111110000010010010000011000000", 
    42 => "00111101101000001101100110000111", 
    43 => "00111101110110001101011110011101", 
    44 => "00111100111100110011011101100101", 
    45 => "00111101111111010111111001000110", 
    46 => "10111100010011101011001000010101", 
    47 => "00111000001011101010111011000101", 
    48 => "10111101000111110101001100010111", 
    49 => "00111101111000100111110001111100", 
    50 => "00111100011011100000001101111110", 
    51 => "10111100111110101011001010111001", 
    52 => "10111100100000000111011010110011", 
    53 => "00111101101111111101000000111101", 
    54 => "00111011101010111100110111100100", 
    55 => "10111101000011010111111101000101", 
    56 => "10111100010001111101101000011111", 
    57 => "10111100101010010111111011101010", 
    58 => "10111110010000111100001010011000", 
    59 => "10111110000001011100011011000001", 
    60 => "10111100010110111111000110011000", 
    61 => "10111101011111100001001011000000", 
    62 => "00111001001100010100001111010010", 
    63 => "10111110000010010110010010100110", 
    64 => "00111101010100111011011011001100", 
    65 => "00111110001000000010011110010101", 
    66 => "00111101100100110100111011000111", 
    67 => "10111110001011111010111001111001", 
    68 => "10111101100100001001100111101110", 
    69 => "00111101100111001111010111110101", 
    70 => "00111100010001110000010101111000", 
    71 => "10111110000000001101110101000000", 
    72 => "10111010000101010011101110001000", 
    73 => "00111100101000010101011011111101", 
    74 => "10111110010100111000111001101101", 
    75 => "00111011110100110000110011000010", 
    76 => "00111101100000001010010101110111", 
    77 => "00111101110000111010101101000011", 
    78 => "10111101101011101101010100101000", 
    79 => "00111100100000101111101101011101", 
    80 => "00111110000001100110011001100110", 
    81 => "10111101010010101110101011000101", 
    82 => "00111101111101101001110100110000", 
    83 => "10111110010001110010110101011110", 
    84 => "00111100100010001010000001001101", 
    85 => "10111101011011000011010001110001", 
    86 => "10111101000000000100011100011000", 
    87 => "00111100100110110100001001000110", 
    88 => "10111101011101111011101001100111", 
    89 => "10111101110100101101101010011000", 
    90 => "10111101100101011011110110111101", 
    91 => "10111101111110100001011111110100", 
    92 => "10111100101100101110100010001011", 
    93 => "00111101011000011011100001100111", 
    94 => "10111100111000110001100000110011", 
    95 => "00111101101010011111111011111111", 
    96 => "10111101101100011001010100101011", 
    97 => "00111100101010000011000010100001", 
    98 => "00111101101001100100000001010110", 
    99 => "10111110001001110010000111010101", 
    100 => "00111101011010001010101001111001", 
    101 => "00111101001101000110100001101101", 
    102 => "10111101111011111110011010010010", 
    103 => "00111100100010110101011001110101", 
    104 => "00111101111111011110110101101100", 
    105 => "00111101111110001001001001101000", 
    106 => "00111101100101110101111111001110", 
    107 => "10111101001010001100010101101100", 
    108 => "00111101110101011101001111011101", 
    109 => "00111101010001001011111010010001", 
    110 => "10111110001100101011011101111000", 
    111 => "10111101110010010111110111000011", 
    112 => "00111110000001000111011011110011", 
    113 => "10111100001010000011001010111010", 
    114 => "00111101001110110010000011010011", 
    115 => "00111100100101011111011010101101", 
    116 => "00111011101111110111000100000100", 
    117 => "10111101110001011110001000011111", 
    118 => "00111100111110110111111000100110", 
    119 => "10111101101000011010100011010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_2_2_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_2_2_6 is
    component inference_conv2d_f3_2_2_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_2_2_6_rom_U :  component inference_conv2d_f3_2_2_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


