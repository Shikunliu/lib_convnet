-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_mult_1_120_120_84_s_W4_93_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_mult_1_120_120_84_s_W4_93_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100100011111110010001111", 
    1 => "10111100110001010101010110101010", 
    2 => "10111101101001111000100100101100", 
    3 => "00111110010011000110100110110110", 
    4 => "00111101011010100010101111010011", 
    5 => "10111101010101010000000010101110", 
    6 => "10111101101011111100010110011000", 
    7 => "00111010001010000000011110100100", 
    8 => "00111101110011000100011111001010", 
    9 => "10111101100101011100101000101010", 
    10 => "00111011111110011000011111000001", 
    11 => "00111101001111101011100001010010", 
    12 => "00111100100110010101110100110100", 
    13 => "10111110000111101110111000001111", 
    14 => "10111101100000010100110010000001", 
    15 => "10111110001010101011110000001110", 
    16 => "10111011111011000100001101001010", 
    17 => "00111100111101100010001110101000", 
    18 => "10111101111100011010110100100001", 
    19 => "00111101101010111011000100101001", 
    20 => "00111101111101011010101101111110", 
    21 => "10111100111000001110100001111000", 
    22 => "10111101101001111111001011010000", 
    23 => "00111101110110000101000101100101", 
    24 => "00111101110010001011111011011110", 
    25 => "00111100111111110100100010000000", 
    26 => "10111101010111010100110101001110", 
    27 => "10111100101011000000000110110001", 
    28 => "00111101000110000100111010101011", 
    29 => "10111101111100111101011111010100", 
    30 => "10111101001001111110011111000000", 
    31 => "10111101101111100110000111101011", 
    32 => "00111101000101000110110101110101", 
    33 => "10111100011110001010110100100101", 
    34 => "00111100001011110101011000101111", 
    35 => "10111110001111111111001101101011", 
    36 => "10111011110010100001110011101111", 
    37 => "10111100110111011010001010101000", 
    38 => "00111101101011001010000101111110", 
    39 => "10111101000010100100110000011111", 
    40 => "10111101100100001011010101011010", 
    41 => "00111101010010011101101000100100", 
    42 => "10111101101010011010001001000000", 
    43 => "10111100110111001111101111101111", 
    44 => "00111011101001011010001000010001", 
    45 => "00111011000111100111000111000110", 
    46 => "10111110000101011111110110001011", 
    47 => "10111101010011011110101101000101", 
    48 => "00111100101001010111111110000001", 
    49 => "00111101000000111110011110110110", 
    50 => "10111100101111001001100000110111", 
    51 => "00111110000110000101111110001101", 
    52 => "10111101000110110011110100100011", 
    53 => "00111100000100101101011010011100", 
    54 => "10111100001101011011000010111100", 
    55 => "00111100000000101000110110100100", 
    56 => "00111101111001101011001001101100", 
    57 => "10111101100110110011001001010110", 
    58 => "10111101101010001100111111110101", 
    59 => "10111101001111011000001010101101", 
    60 => "10111101111100110100000101011011", 
    61 => "00111101100001001011011000010010", 
    62 => "00111110000000101110001111000101", 
    63 => "10111100110000001010000010100100", 
    64 => "00111100100000101110111011001000", 
    65 => "00111101001110110011101001101001", 
    66 => "00111110000100000010011101010010", 
    67 => "00111101110111001011000101000110", 
    68 => "10111101001010101000000000000110", 
    69 => "10111101001000111111110110100001", 
    70 => "00111101110101010100100101110011", 
    71 => "00111101111111101011011101000101", 
    72 => "00111100110111110101100011110110", 
    73 => "00111101101100100110000001100010", 
    74 => "00111100110100100100011010001001", 
    75 => "00111100111001010110101110010101", 
    76 => "10111101001010000011011100000110", 
    77 => "10111101111001100010011001110000", 
    78 => "00111010000110011000001100111000", 
    79 => "00111100101001100011111101100101", 
    80 => "00111110000110110111000110111001", 
    81 => "10111110000100011010001001100010", 
    82 => "10111101111100101011010001010011", 
    83 => "00111101101000011010001111011010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_mult_1_120_120_84_s_W4_93 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_mult_1_120_120_84_s_W4_93 is
    component inference_mult_1_120_120_84_s_W4_93_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_mult_1_120_120_84_s_W4_93_rom_U :  component inference_mult_1_120_120_84_s_W4_93_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


