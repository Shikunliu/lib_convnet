-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_3_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_3_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000001100100001011000000", 
    1 => "00111100111100001100001110000010", 
    2 => "00111100100001000000110101000000", 
    3 => "00111011010011100011101000110101", 
    4 => "00111101001010110110100000010011", 
    5 => "10111100110010000110100011110000", 
    6 => "00111101011111010011110000110110", 
    7 => "10111101110101010111001101100100", 
    8 => "10111101010111111111100010001110", 
    9 => "10111101010000101110101011001100", 
    10 => "10111110000100101101110010110001", 
    11 => "10111100100100100001011100100100", 
    12 => "10111011101000101001101000001001", 
    13 => "10111101101001100001111010101101", 
    14 => "00111110000001001101000001010111", 
    15 => "00111011011110000111000101101011", 
    16 => "10111110001110101101011100001110", 
    17 => "10111100111100111101110000000101", 
    18 => "10111101110101111011000001110000", 
    19 => "10111101111010010011100101100101", 
    20 => "00111101111010000000100111010101", 
    21 => "00111110000101000111000011101011", 
    22 => "00111011110100110100000100011011", 
    23 => "00111101111001000010001110010110", 
    24 => "00111110000111010111100000111110", 
    25 => "10111101101111001010010101010010", 
    26 => "10111101001010010101001101100110", 
    27 => "00111101111011110010100001000001", 
    28 => "00111011011001010001010001101100", 
    29 => "10111101001111101011100100001110", 
    30 => "10111011101110001100001101010101", 
    31 => "00111110000000010011011011100111", 
    32 => "00111100110111001000101001000101", 
    33 => "00111101101110110110010010011101", 
    34 => "10111100110011011011011011011000", 
    35 => "00111101110111101111111000001101", 
    36 => "10111011110000001001001000010110", 
    37 => "00111101101010001111110101011101", 
    38 => "10111011110111111110100011001001", 
    39 => "00111100010011100110101110011110", 
    40 => "10111101101111101100100001101010", 
    41 => "00111101100001000100011010001110", 
    42 => "10111100111010110010110001101001", 
    43 => "00111101010111011010110001001110", 
    44 => "10111101010110000111010010000110", 
    45 => "10111101100110010111000111011100", 
    46 => "10111101000100101000000100001100", 
    47 => "00111101111010101101110011010011", 
    48 => "10111101110101110101001100011110", 
    49 => "10111101101101011101011111001011", 
    50 => "00111011101100001101001110011101", 
    51 => "10111101101110001100101001100111", 
    52 => "10111110000100000101010011101111", 
    53 => "00111110011000000001010010110110", 
    54 => "00111100101010000000010011001100", 
    55 => "00111101100001001001011000001010", 
    56 => "00111100001000110101011000110001", 
    57 => "00111101100001011010010001011100", 
    58 => "10111101101101010101011111010001", 
    59 => "00111100100001110101010100101001", 
    60 => "00111011000010001101011001010011", 
    61 => "00111110010101100100010001010010", 
    62 => "00111101111000101111101001010001", 
    63 => "00111101110111100011100111110111", 
    64 => "00111101111111101001011111010000", 
    65 => "10111101001100010010000110101011", 
    66 => "00111100100010000011011001100101", 
    67 => "00111101110011111011110110101101", 
    68 => "10111101000011011000100100100000", 
    69 => "10111110000011010101110111000100", 
    70 => "00111101100111000100111011111001", 
    71 => "00111101110011001010001111011010", 
    72 => "10111011100111110100101100110100", 
    73 => "00111011101000111111111011100011", 
    74 => "00111101000111111111101101111110", 
    75 => "00111100110011000110111010100011", 
    76 => "10111101100000000100001101000100", 
    77 => "00111011110111011111010110111111", 
    78 => "00111101100000110010000111100110", 
    79 => "10111110000100001010110110001010", 
    80 => "00111101011101011100011101100010", 
    81 => "00111101001010100111111011111010", 
    82 => "00111100101101011111010001000011", 
    83 => "00111101101010101001000011101000", 
    84 => "10111101110011000110110101111100", 
    85 => "00111100000010000111111111110111", 
    86 => "00111101110110110000010001101000", 
    87 => "00111101110101000011000101111011", 
    88 => "00111110001001011110101010101011", 
    89 => "10111110000001011101010001100011", 
    90 => "00111100010101111110011110110011", 
    91 => "10111100000101000100011101110101", 
    92 => "10111100110010000011001100001010", 
    93 => "10111100100111100111000011001111", 
    94 => "10111101100110010111010101101101", 
    95 => "00111100111101000011010100100110", 
    96 => "10111101100101011100001100001000", 
    97 => "00111010101001000111111111010010", 
    98 => "10111101010100100111000100011100", 
    99 => "00111101100001010010100010010100", 
    100 => "10111101111111100010001001100000", 
    101 => "10111101010001111101101000011111", 
    102 => "00111101011010010011010110000011", 
    103 => "10111110000000000001111110111000", 
    104 => "00111110001001110011101100000000", 
    105 => "00111101100110000000000110001100", 
    106 => "00111100101011001111011101111010", 
    107 => "10111100001111010010010111111011", 
    108 => "10111100110011011111110101001110", 
    109 => "10111100010011001011111011110101", 
    110 => "10111110000111001100100101100100", 
    111 => "10111101100001101110001101110001", 
    112 => "00111101101100011010010000011101", 
    113 => "00111100100100010111000001101011", 
    114 => "00111101101110111000000000110001", 
    115 => "00111101011000110001011110010010", 
    116 => "00111110000110001010011001010101", 
    117 => "00111101110110001100101100001000", 
    118 => "10111101101100100101110010000001", 
    119 => "00111101111110101010011100010110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_3_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_3_1 is
    component inference_conv2d_f3_0_3_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_3_1_rom_U :  component inference_conv2d_f3_0_3_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


