-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_2_15_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_2_15_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000001011110100010010010", 
    1 => "00111101111001101000101000001101", 
    2 => "00111101111000101110011101110001", 
    3 => "00111110000100010001100111001110", 
    4 => "00111101111001111101111001010001", 
    5 => "10111100100011101011111101001011", 
    6 => "10111101100010110010111101100110", 
    7 => "00111101100100001100111011100010", 
    8 => "00111101011010011110111001000110", 
    9 => "00111101000010100011110011101010", 
    10 => "00111101011111001000101000001111", 
    11 => "00111101101000101100001011001011", 
    12 => "10111100111101110100101011110000", 
    13 => "00111101000101100110010100110010", 
    14 => "00111101100110110001001011101110", 
    15 => "00111101100000000001110001000010", 
    16 => "10111101110100010110010101001101", 
    17 => "00111101100010000100101110000110", 
    18 => "00111101110110010110100011010111", 
    19 => "00111101101101111011011100100110", 
    20 => "10111101101010110110101000011111", 
    21 => "00111110010000100100110100001010", 
    22 => "00111101110110000011001001110110", 
    23 => "00111101110001010110000011111101", 
    24 => "10111100000010011010111010100000", 
    25 => "10111101001101011001000111101000", 
    26 => "00111101100011101110101000101110", 
    27 => "00111100100000100001001010010100", 
    28 => "00111101000110110100000010011000", 
    29 => "00111110001101011010010010101101", 
    30 => "00111101001100011000010001010111", 
    31 => "10111101011110110101010010100000", 
    32 => "00111100100001010011100000011000", 
    33 => "10111101000101011101010111110101", 
    34 => "10111011111011111000101011010010", 
    35 => "00111101001010111001111100111011", 
    36 => "10111101101000100000001101010011", 
    37 => "10111100100001001111000000101010", 
    38 => "10111101001001110011110111111101", 
    39 => "10111101010101101100101100011110", 
    40 => "10111110000110111110110110110111", 
    41 => "00111101101010001111101011110011", 
    42 => "10111011001001000010011000111010", 
    43 => "00111100100011110010100011001000", 
    44 => "10111100101100101100100111101100", 
    45 => "00111101100000001110001011001111", 
    46 => "00111011011001111101110111110101", 
    47 => "10111110000101001110010000000000", 
    48 => "00111100101111011011011110000110", 
    49 => "10111101110011010010100100010011", 
    50 => "10111101100001111001000010010000", 
    51 => "10111110010000110101010000111011", 
    52 => "10111100010011110001001111001111", 
    53 => "10111101011010011101000001001001", 
    54 => "00111100011011111101100001101011", 
    55 => "00111101110110111110100110000101", 
    56 => "00111101100110000110101011111011", 
    57 => "10111101100110001110111101101011", 
    58 => "10111011000001100000111001110111", 
    59 => "00111101100001110011110000100111", 
    60 => "10111101110001110110011010000100", 
    61 => "00111101011111011000111010111100", 
    62 => "10111101011000100101110000010110", 
    63 => "10111110000010010110111111101011", 
    64 => "10111101101010010100011000110000", 
    65 => "10111101110000101011000000100001", 
    66 => "00111101101100011010010110000111", 
    67 => "10111101010010000000111011111000", 
    68 => "00111100100100101111001010000001", 
    69 => "10111100010100111101100001011010", 
    70 => "10111011011000010000110001001010", 
    71 => "00111100011010100100111001010010", 
    72 => "10111101010001011101111001001011", 
    73 => "10111100100110000011110111100100", 
    74 => "00111110000010111010000001100010", 
    75 => "10111100111100000100101101010111", 
    76 => "00111101011110111110101110111001", 
    77 => "00111100111011101000001011001010", 
    78 => "00111101010101100001000001000010", 
    79 => "10111101111010100010110010101010", 
    80 => "00111110001001111100111000010000", 
    81 => "10111101111010000000101111101101", 
    82 => "10111101100100011001000101011000", 
    83 => "00111100001011110110100101111010", 
    84 => "10111101110110111110010001000111", 
    85 => "10111101101111100000100110101110", 
    86 => "00111100001001001111110101111011", 
    87 => "10111110001000110100101101010001", 
    88 => "00111101100001011101101010111011", 
    89 => "10111110000111000100011101011110", 
    90 => "10111110000101100110001111000111", 
    91 => "00111100110001101101001011101101", 
    92 => "00111110000111001001001001011000", 
    93 => "00111100110110100100001100001101", 
    94 => "00111101111110101100011110010111", 
    95 => "10111101110010111000100101000011", 
    96 => "10111101001111011001011001100100", 
    97 => "10111110000111100001110101100101", 
    98 => "00111100100010011000101001011000", 
    99 => "10111101000100101110001010010001", 
    100 => "10111101010101101111101110001111", 
    101 => "00111101011010101001010010101110", 
    102 => "00111100010011101111011000000111", 
    103 => "10111101001010101111011010011110", 
    104 => "10111101010110111001011001000100", 
    105 => "10111101011100001111000010011001", 
    106 => "00111101101111011011000110011001", 
    107 => "10111101100011101010000010010010", 
    108 => "00111101110101111111000001100111", 
    109 => "10111101001000100100100101101100", 
    110 => "00111110010111100110100000011011", 
    111 => "00111100111011011101011100111110", 
    112 => "00111100110010010010011100100110", 
    113 => "00111101000111001100100110011010", 
    114 => "10111101111011111010000101011110", 
    115 => "00111110000111000111100100101101", 
    116 => "00111010010001110000001110000010", 
    117 => "10111100110011000101001001010100", 
    118 => "00111100011010110110110011001011", 
    119 => "00111011101111011110111111010000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_2_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_2_15 is
    component inference_conv2d_f3_0_2_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_2_15_rom_U :  component inference_conv2d_f3_0_2_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


