-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_4_3_12_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_4_3_12_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000100111110011000110001", 
    1 => "00111101100000011000100001100001", 
    2 => "10111110000000011000111011111100", 
    3 => "10111101101011000011011001101111", 
    4 => "00111101110000100001000010001001", 
    5 => "10111101001111111101010100111000", 
    6 => "00111101001101100110010111010011", 
    7 => "10111101001100101010011100000001", 
    8 => "00111100101000111100100011001000", 
    9 => "10111101000000000011100111000111", 
    10 => "10111110001000111101001011011000", 
    11 => "10111110001101111001010110110011", 
    12 => "10111101101100001010011001011011", 
    13 => "10111100100010111111100111010100", 
    14 => "10111100001110111111011001010000", 
    15 => "00111101101101101011110111110101", 
    16 => "10111101000101110111111100101000", 
    17 => "00111101111001110110011111010011", 
    18 => "00111101111101010001111011111011", 
    19 => "00111101110101101011010101001110", 
    20 => "00111100101110100100101111110110", 
    21 => "00111100110100100100001111001111", 
    22 => "00111100010001100110011000010110", 
    23 => "10111101010000101100110110100101", 
    24 => "00111101110110010111000000101110", 
    25 => "10111101111110011010001100001010", 
    26 => "10111101011110011110100111101100", 
    27 => "00111011110010001111100010101101", 
    28 => "00111101011111000001010011101111", 
    29 => "00111100100111010011100011110110", 
    30 => "10111100101000110011110011100110", 
    31 => "00111100000001011000001010010110", 
    32 => "10111101011010010010010100001101", 
    33 => "10111101111101111100101010100111", 
    34 => "10111100110001110011101110010011", 
    35 => "10111101101100100101010011110100", 
    36 => "00111101111000100100110111010011", 
    37 => "00111110000101000101000000100111", 
    38 => "10111101011000111001000011111111", 
    39 => "10111101111101000000101010101111", 
    40 => "10111101010001000101010110110101", 
    41 => "10111100011001010010101000100110", 
    42 => "00111101100100011001000011000100", 
    43 => "00111101000110011010000001010000", 
    44 => "10111101101000101100100110101001", 
    45 => "10111101111110000111110111110110", 
    46 => "10111101101100110001100010000100", 
    47 => "00111101101010010011010101000000", 
    48 => "00111101001111110001010100111001", 
    49 => "00111101101001100001010110101001", 
    50 => "00111110000011001001000110001110", 
    51 => "10111101000000011101001001101000", 
    52 => "10111101010111101111111001111000", 
    53 => "00111101001010001101110110001010", 
    54 => "10111101010110100010001001010110", 
    55 => "00111101111101011011000010111100", 
    56 => "10111100111111101100001001111110", 
    57 => "00111101101010100110010010110110", 
    58 => "10111101001010011101100110000011", 
    59 => "00111101100011011001110001101011", 
    60 => "00111101010000000111110011100011", 
    61 => "00111101101010110001111111010100", 
    62 => "10111100101110011101100110101011", 
    63 => "00111110010010011111101100011110", 
    64 => "10111101101110000111011111111100", 
    65 => "10111101000101000101010011010001", 
    66 => "00111101111110011110010010010011", 
    67 => "00111100101111101000011110010000", 
    68 => "00111110010011101011111100100011", 
    69 => "00111101101011010011001110001111", 
    70 => "10111101100101101110111100100010", 
    71 => "10111101001100000000110100001110", 
    72 => "00111101101011010111001100000000", 
    73 => "10111101101000100101000001100101", 
    74 => "00111101100011111010100001111111", 
    75 => "00111101001111100011100100000110", 
    76 => "00111101000011001111101110010001", 
    77 => "10111101100010111100110110101110", 
    78 => "10111101110100000010100110101110", 
    79 => "00111101001111101100110100110000", 
    80 => "10111110000001000000001001001011", 
    81 => "10111101001111111100011101100000", 
    82 => "10111010111001011101000010101010", 
    83 => "10111100101001010011001110010110", 
    84 => "00111110000101010100000111011001", 
    85 => "10111100110111111101010011100111", 
    86 => "00111100110000001111100101011010", 
    87 => "00111101111001101101111011111100", 
    88 => "00111110000111101100000000101111", 
    89 => "00111101110001101001000111010000", 
    90 => "10111101111001001110001101111010", 
    91 => "00111101001111001010001101010100", 
    92 => "10111110001001110111110010001001", 
    93 => "00111101001010101111000110010110", 
    94 => "10111110000011001010111000100001", 
    95 => "00111101100010111111111010011001", 
    96 => "10111101001010110110101100011110", 
    97 => "10111011101010111001000111010100", 
    98 => "00111101100001101000110110111001", 
    99 => "00111101011001001010011101001010", 
    100 => "00111100111000001001001000010001", 
    101 => "00111101100000010000000111001011", 
    102 => "10111100100011101111000100110101", 
    103 => "10111100101111001000000001001110", 
    104 => "10111100101100101011111100111010", 
    105 => "10111101101010010011101001100100", 
    106 => "10111101111100101110101111100110", 
    107 => "10111110000100001000000011111010", 
    108 => "10111101101011001100100011101100", 
    109 => "10111110000011010111111110010101", 
    110 => "10111100100000000011110001100110", 
    111 => "10111110001000100000110111011100", 
    112 => "00111110000101001001001001111001", 
    113 => "00111101111110100101101010001010", 
    114 => "10111100101111101010101011001011", 
    115 => "00111101010101100101001100101001", 
    116 => "00111100110110110000000110101110", 
    117 => "00111110000100111011000010000001", 
    118 => "10111101001110100010000100010011", 
    119 => "10111101011100001011001101011100" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_4_3_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_4_3_12 is
    component inference_conv2d_f3_4_3_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_4_3_12_rom_U :  component inference_conv2d_f3_4_3_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


