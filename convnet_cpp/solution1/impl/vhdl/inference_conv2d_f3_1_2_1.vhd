-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_1_2_1_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_1_2_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000001101110001011000011", 
    1 => "00111110011000000101110111011001", 
    2 => "10111101010101010011011001111000", 
    3 => "00111101101000011011100010000010", 
    4 => "00111100111011111011111101110110", 
    5 => "00111101011101100111001110101010", 
    6 => "00111101101000001001011101111000", 
    7 => "10111101110011100110010110111111", 
    8 => "00111101110000100000011011010110", 
    9 => "00111100110011111100111101001011", 
    10 => "00111110000101100101100111010001", 
    11 => "00111101111110110101110110001001", 
    12 => "10111100100000101010100110010011", 
    13 => "10111101100011101110110011000000", 
    14 => "10111100100001110000001101011111", 
    15 => "00111101100111111010001001011101", 
    16 => "10111101101111010101001010100111", 
    17 => "00111110010000011001111100111100", 
    18 => "10111110000111100010011100011000", 
    19 => "00111011010100111101100110110001", 
    20 => "10111010111110010011100101100111", 
    21 => "00111101101110111101001100111101", 
    22 => "00111101100110000110001001100010", 
    23 => "10111100001100100010011110011010", 
    24 => "10111101101100001011110001101110", 
    25 => "10111110001110110101100000001000", 
    26 => "00111101111000011101110100011010", 
    27 => "00111110000100101011101101100110", 
    28 => "10111100101111010001010000101000", 
    29 => "10111100111110011110010010010011", 
    30 => "10111100010101001011011111101000", 
    31 => "00111101110100000111110010000101", 
    32 => "10111101110001000100100100010011", 
    33 => "10111011100010101001111100010101", 
    34 => "10111101010011100100110111110001", 
    35 => "00111110010010111001110001110011", 
    36 => "10111100000100001001000100111101", 
    37 => "10111101100100000100100100001001", 
    38 => "10111100100001000000110000110100", 
    39 => "00111100101001001001100100000111", 
    40 => "10111101010110100100110001000111", 
    41 => "00111101100010011100100011010111", 
    42 => "10111101101010011110010111110000", 
    43 => "10111101100000011001101001000001", 
    44 => "10111100001111000001011101110011", 
    45 => "10111100110110100000010110011010", 
    46 => "00111110011001011011101001101111", 
    47 => "10111100110000001110100100110100", 
    48 => "10111100111001100001101010110001", 
    49 => "00111101100101000001101011101111", 
    50 => "00111100101100011110111100110001", 
    51 => "00111100110111111000111000111011", 
    52 => "00111101000010100010000000010100", 
    53 => "10111011101110101011111011000011", 
    54 => "00111101001001101101011011001111", 
    55 => "10111100111010101001101011011110", 
    56 => "10111101101101011100010011011110", 
    57 => "00111101010100010011001010101000", 
    58 => "00111101100010010110101111101111", 
    59 => "00111001101111111010101011101010", 
    60 => "10111101001111110100110010110010", 
    61 => "00111100110011111100001101010111", 
    62 => "00111100001111111110011101110111", 
    63 => "10111110001100011101111100110011", 
    64 => "00111101101001100001010010001111", 
    65 => "00111011110110100010010111010001", 
    66 => "10111100101001000111100011110001", 
    67 => "00111110001011110010000011101010", 
    68 => "10111101011010011110110110001010", 
    69 => "00111010100111111001000001111111", 
    70 => "00111101111100100011001001001101", 
    71 => "10111101010000100011000101001101", 
    72 => "00111001011111011011001110110001", 
    73 => "10111110001101011011111100100111", 
    74 => "00111101100011100100000100011001", 
    75 => "10111010111011010000100011010111", 
    76 => "00111101000101101010100101011010", 
    77 => "00111110000001011100100100011101", 
    78 => "00111100110100010001011010101001", 
    79 => "00111110000010110010100010010101", 
    80 => "00111110001011110111010000000100", 
    81 => "10111100111001000111010010111111", 
    82 => "10111101100101100100111001111110", 
    83 => "00111101100000010111110110010100", 
    84 => "00111101100011000110011110111000", 
    85 => "00111101110110110100000111000000", 
    86 => "10111100111010100011001000111000", 
    87 => "10111011110101000101101111100010", 
    88 => "00111100101101011011001101110110", 
    89 => "00111101110010001100100100001010", 
    90 => "10111101000110110100000001001000", 
    91 => "00111101111000101010111001001011", 
    92 => "00111101100111010100100110010101", 
    93 => "10111101000101111001101111111110", 
    94 => "10111100100100000100011000110100", 
    95 => "00111110001001111111011000101011", 
    96 => "00111101010111011000011000100011", 
    97 => "00111101011100001100010011111010", 
    98 => "10111101000010101001010011111111", 
    99 => "10111101100000001011000001000100", 
    100 => "10111110000111111010011101100101", 
    101 => "00111101100001100001011010110101", 
    102 => "00111100001011000111000111100011", 
    103 => "00111101100011010101000110110101", 
    104 => "00111101100000010010010010101000", 
    105 => "10111101110011100001010100000001", 
    106 => "00111100100010101111001000110111", 
    107 => "00111100111100000001100001100001", 
    108 => "10111101111000000101011100001000", 
    109 => "00111101110011100000100011110010", 
    110 => "00111101111011000011111100111110", 
    111 => "00111101101101000011000011110101", 
    112 => "00111101110000001000100001101011", 
    113 => "00111110000001000100111010010100", 
    114 => "10111101001001010001001100010101", 
    115 => "10111101101001111000100110100100", 
    116 => "10111101001110001100010000011100", 
    117 => "10111110000110111001111100010010", 
    118 => "10111101110101111001010010100111", 
    119 => "10111100000111000101111101100111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_1_2_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_1_2_1 is
    component inference_conv2d_f3_1_2_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_1_2_1_rom_U :  component inference_conv2d_f3_1_2_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


