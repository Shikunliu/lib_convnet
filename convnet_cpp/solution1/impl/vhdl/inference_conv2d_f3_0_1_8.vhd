-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity inference_conv2d_f3_0_1_8_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of inference_conv2d_f3_0_1_8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011000111001010011000101", 
    1 => "00111100101101110010000110100000", 
    2 => "00111101010010100110100100010000", 
    3 => "10111101111010111000010010011001", 
    4 => "10111101100011000101100000001011", 
    5 => "10111110011011110000001000111111", 
    6 => "10111100100011110100000101010001", 
    7 => "10111110010011101100111000010100", 
    8 => "00111101011100111010100100101010", 
    9 => "10111110010111010010000001101101", 
    10 => "10111101000110110101000110010101", 
    11 => "00111110010001000001001100010010", 
    12 => "10111101001001000101101111001010", 
    13 => "10111101100110101000101111000101", 
    14 => "00111101111011011101001001101011", 
    15 => "00111101100101001110110101010101", 
    16 => "00111101100000010100111110100110", 
    17 => "00111101101000111111111111100010", 
    18 => "10111101110100101101101110100101", 
    19 => "10111101101001010011100100100101", 
    20 => "10111101100110001011111001100101", 
    21 => "10111101010101110000110011011101", 
    22 => "10111101101000010111100101101111", 
    23 => "00111101011101111001000110110111", 
    24 => "10111110000011011000000101101011", 
    25 => "10111110000000110110001100101100", 
    26 => "00111100000001101011111110011000", 
    27 => "10111011100101111001010111011110", 
    28 => "10111100111000011011101111011101", 
    29 => "00111101100110010001011011100101", 
    30 => "00111011111010001000011000010001", 
    31 => "00111101001110100101001100110011", 
    32 => "00111101101111011011000001010111", 
    33 => "10111101111010011001001110010010", 
    34 => "00111110000000010101000101100001", 
    35 => "10111101110100101101010001001110", 
    36 => "00111100101011000000100101110011", 
    37 => "00111101111000000110000011111110", 
    38 => "00111100100000101110100100011110", 
    39 => "00111110010011101110010110101100", 
    40 => "00111101100000011011011110011110", 
    41 => "00111100110101111000111100110011", 
    42 => "00111101000011010001000011011010", 
    43 => "10111110011000111001110110100001", 
    44 => "10111101111100011110111100110001", 
    45 => "00111101100000111101100111101100", 
    46 => "00111101110001000001011000001111", 
    47 => "00111110010000000001001110101001", 
    48 => "00111101110001110000010011010111", 
    49 => "00111101111010001001010101001010", 
    50 => "00111101100001110011101000101001", 
    51 => "10111110001001000101001010000011", 
    52 => "00111011101001011001010101111011", 
    53 => "10111101110110111101011100101100", 
    54 => "10111101110110100110110101101010", 
    55 => "00111101100110101101000011010001", 
    56 => "10111101001011111110010010010100", 
    57 => "00111101101001101110101000110101", 
    58 => "00111101001011011100010110100001", 
    59 => "00111100100000100001000110111110", 
    60 => "00111101100101100100011111010110", 
    61 => "10111101110100101001110000110100", 
    62 => "10111110000000000010101111000111", 
    63 => "00111100001111111111010101001110", 
    64 => "10111100000011111000001110001011", 
    65 => "00111101101011110000011100000100", 
    66 => "00111100110011000111011100000111", 
    67 => "10111100101000000001010111101010", 
    68 => "10111110100101100010010011011101", 
    69 => "10111110000101000000001100010101", 
    70 => "00111101101011010101001000100000", 
    71 => "10111110010001010110001110101010", 
    72 => "10111110000011010110101010011100", 
    73 => "10111101010111100101100111011000", 
    74 => "10111101100000010111000001111000", 
    75 => "00111100010101011000110111010001", 
    76 => "00111101100000010100110100111101", 
    77 => "10111101011111101100110111101100", 
    78 => "10111101100011100100111011100011", 
    79 => "10111101101001100010000000110011", 
    80 => "10111100111010000110000111101001", 
    81 => "00111100110101011110000010100111", 
    82 => "00111101010000111011101000011001", 
    83 => "00111110010101110000110010011001", 
    84 => "00111101101111101001001110000100", 
    85 => "10111011000000111000010001011001", 
    86 => "00111011001101011110000111001111", 
    87 => "10111110001001100101000100101011", 
    88 => "00111101110010111111110101001001", 
    89 => "10111100011000111101010111111110", 
    90 => "10111011000000111110110010001001", 
    91 => "10111101000001011101010111101000", 
    92 => "10111101101101001000001111001011", 
    93 => "10111101001101110001011011101110", 
    94 => "10111101001111101010110001000011", 
    95 => "10111110011100001011101100101100", 
    96 => "10111101100001111011110111110111", 
    97 => "10111101011010001100100001011011", 
    98 => "00111101100000111111110100000000", 
    99 => "10111011001000010010000110100011", 
    100 => "00111100110010011100100000110110", 
    101 => "00111101101101011011111101001111", 
    102 => "10111101101101100101100010101010", 
    103 => "10111101011001101010011111010101", 
    104 => "10111100110010110011101011000111", 
    105 => "00111110000011101001000101000011", 
    106 => "00111101000001100011000011010001", 
    107 => "10111110001110001010011111100111", 
    108 => "00111101000001100011100110111011", 
    109 => "00111101111011101011101010101110", 
    110 => "10111101101111000101111110110010", 
    111 => "00111100101000100101110100100010", 
    112 => "10111100000111000110100001000001", 
    113 => "00111101101100001111011111000111", 
    114 => "00111100100010000110110000010101", 
    115 => "10111101101101100101111001010011", 
    116 => "00111110000000000010110101011010", 
    117 => "00111101100001001001100111101011", 
    118 => "00111101110101101111100011110000", 
    119 => "10111100101101011101100010010101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity inference_conv2d_f3_0_1_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of inference_conv2d_f3_0_1_8 is
    component inference_conv2d_f3_0_1_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    inference_conv2d_f3_0_1_8_rom_U :  component inference_conv2d_f3_0_1_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


