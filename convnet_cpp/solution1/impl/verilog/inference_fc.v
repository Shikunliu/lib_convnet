// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inference_fc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_0_address0,
        X_0_ce0,
        X_0_q0,
        W_address0,
        W_ce0,
        W_q0,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        Y_0_address0,
        Y_0_ce0,
        Y_0_we0,
        Y_0_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 30'b1;
parameter    ap_ST_st2_fsm_1 = 30'b10;
parameter    ap_ST_st3_fsm_2 = 30'b100;
parameter    ap_ST_st4_fsm_3 = 30'b1000;
parameter    ap_ST_st5_fsm_4 = 30'b10000;
parameter    ap_ST_st6_fsm_5 = 30'b100000;
parameter    ap_ST_st7_fsm_6 = 30'b1000000;
parameter    ap_ST_st8_fsm_7 = 30'b10000000;
parameter    ap_ST_st9_fsm_8 = 30'b100000000;
parameter    ap_ST_st10_fsm_9 = 30'b1000000000;
parameter    ap_ST_st11_fsm_10 = 30'b10000000000;
parameter    ap_ST_st12_fsm_11 = 30'b100000000000;
parameter    ap_ST_st13_fsm_12 = 30'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 30'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 30'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 30'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 30'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 30'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 30'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 30'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 30'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 30'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 30'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 30'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 30'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 30'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 30'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 30'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 30'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 30'b100000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv7_54 = 7'b1010100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_80000000 = 32'b10000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] X_0_address0;
output   X_0_ce0;
input  [31:0] X_0_q0;
output  [13:0] W_address0;
output   W_ce0;
input  [31:0] W_q0;
output  [6:0] B_0_address0;
output   B_0_ce0;
input  [31:0] B_0_q0;
output  [6:0] Y_0_address0;
output   Y_0_ce0;
output   Y_0_we0;
output  [31:0] Y_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_0_ce0;
reg W_ce0;
reg B_0_ce0;
reg Y_0_ce0;
reg Y_0_we0;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm = 30'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_48;
wire   [31:0] grp_fu_129_p2;
reg   [31:0] reg_144;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_85;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_92;
wire   [6:0] j_fu_156_p2;
reg   [6:0] j_reg_202;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_102;
wire   [63:0] tmp_i_fu_162_p1;
reg   [63:0] tmp_i_reg_207;
wire   [0:0] exitcond_i_fu_150_p2;
wire   [31:0] T_0_q0;
reg   [31:0] T_0_load_reg_222;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_121;
reg   [31:0] B_0_load_reg_227;
wire   [6:0] j_14_fu_174_p2;
reg   [6:0] j_14_reg_235;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_131;
wire   [63:0] tmp_7_i_fu_180_p1;
reg   [63:0] tmp_7_i_reg_240;
wire   [0:0] exitcond_i4_fu_168_p2;
wire   [31:0] S_0_q0;
reg   [31:0] S_0_load_reg_250;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_147;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_156;
wire   [31:0] grp_fu_139_p2;
reg   [31:0] tmp_9_i_reg_260;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_165;
wire   [31:0] grp_fu_134_p2;
reg   [31:0] tmp_1_i_reg_265;
reg    ap_sig_cseq_ST_st29_fsm_28;
reg    ap_sig_bdd_174;
reg   [6:0] T_0_address0;
reg    T_0_ce0;
reg    T_0_we0;
wire   [31:0] T_0_d0;
reg   [6:0] S_0_address0;
reg    S_0_ce0;
reg    S_0_we0;
wire   [31:0] S_0_d0;
wire    grp_inference_mult_1_120_120_84_s_fu_119_ap_start;
wire    grp_inference_mult_1_120_120_84_s_fu_119_ap_done;
wire    grp_inference_mult_1_120_120_84_s_fu_119_ap_idle;
wire    grp_inference_mult_1_120_120_84_s_fu_119_ap_ready;
wire   [6:0] grp_inference_mult_1_120_120_84_s_fu_119_A_0_address0;
wire    grp_inference_mult_1_120_120_84_s_fu_119_A_0_ce0;
wire   [31:0] grp_inference_mult_1_120_120_84_s_fu_119_A_0_q0;
wire   [13:0] grp_inference_mult_1_120_120_84_s_fu_119_B_address0;
wire    grp_inference_mult_1_120_120_84_s_fu_119_B_ce0;
wire   [31:0] grp_inference_mult_1_120_120_84_s_fu_119_B_q0;
wire   [6:0] grp_inference_mult_1_120_120_84_s_fu_119_C_0_address0;
wire    grp_inference_mult_1_120_120_84_s_fu_119_C_0_ce0;
wire    grp_inference_mult_1_120_120_84_s_fu_119_C_0_we0;
wire   [31:0] grp_inference_mult_1_120_120_84_s_fu_119_C_0_d0;
reg   [6:0] j_i_reg_97;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_216;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_224;
reg   [6:0] j_i3_reg_108;
reg    ap_sig_cseq_ST_st30_fsm_29;
reg    ap_sig_bdd_236;
reg    grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg = 1'b0;
reg   [31:0] grp_fu_129_p0;
reg   [31:0] grp_fu_129_p1;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_258;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_bdd_265;
wire   [31:0] grp_fu_139_p1;
wire   [31:0] tmp_8_to_int_i_fu_185_p1;
wire   [31:0] tmp_8_neg_i_fu_188_p2;
wire    grp_fu_129_ce;
wire    grp_fu_134_ce;
wire    grp_fu_139_ce;
reg   [29:0] ap_NS_fsm;


inference_fc_T_0 #(
    .DataWidth( 32 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
T_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_0_address0 ),
    .ce0( T_0_ce0 ),
    .we0( T_0_we0 ),
    .d0( T_0_d0 ),
    .q0( T_0_q0 )
);

inference_fc_T_0 #(
    .DataWidth( 32 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
S_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( S_0_address0 ),
    .ce0( S_0_ce0 ),
    .we0( S_0_we0 ),
    .d0( S_0_d0 ),
    .q0( S_0_q0 )
);

inference_mult_1_120_120_84_s grp_inference_mult_1_120_120_84_s_fu_119(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_inference_mult_1_120_120_84_s_fu_119_ap_start ),
    .ap_done( grp_inference_mult_1_120_120_84_s_fu_119_ap_done ),
    .ap_idle( grp_inference_mult_1_120_120_84_s_fu_119_ap_idle ),
    .ap_ready( grp_inference_mult_1_120_120_84_s_fu_119_ap_ready ),
    .A_0_address0( grp_inference_mult_1_120_120_84_s_fu_119_A_0_address0 ),
    .A_0_ce0( grp_inference_mult_1_120_120_84_s_fu_119_A_0_ce0 ),
    .A_0_q0( grp_inference_mult_1_120_120_84_s_fu_119_A_0_q0 ),
    .B_address0( grp_inference_mult_1_120_120_84_s_fu_119_B_address0 ),
    .B_ce0( grp_inference_mult_1_120_120_84_s_fu_119_B_ce0 ),
    .B_q0( grp_inference_mult_1_120_120_84_s_fu_119_B_q0 ),
    .C_0_address0( grp_inference_mult_1_120_120_84_s_fu_119_C_0_address0 ),
    .C_0_ce0( grp_inference_mult_1_120_120_84_s_fu_119_C_0_ce0 ),
    .C_0_we0( grp_inference_mult_1_120_120_84_s_fu_119_C_0_we0 ),
    .C_0_d0( grp_inference_mult_1_120_120_84_s_fu_119_C_0_d0 )
);

inference_fadd_32ns_32ns_32_4_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inference_fadd_32ns_32ns_32_4_full_dsp_U33(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_129_p0 ),
    .din1( grp_fu_129_p1 ),
    .ce( grp_fu_129_ce ),
    .dout( grp_fu_129_p2 )
);

inference_fdiv_32ns_32ns_32_8 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inference_fdiv_32ns_32ns_32_8_U34(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( ap_const_lv32_3F800000 ),
    .din1( reg_144 ),
    .ce( grp_fu_134_ce ),
    .dout( grp_fu_134_p2 )
);

inference_fexp_32ns_32ns_32_6_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inference_fexp_32ns_32ns_32_6_full_dsp_U35(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( ap_const_lv32_0 ),
    .din1( grp_fu_139_p1 ),
    .ce( grp_fu_139_ce ),
    .dout( grp_fu_139_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_inference_mult_1_120_120_84_s_fu_119_ap_ready)) begin
            grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond_i_fu_150_p2 == ap_const_lv1_0))) begin
        j_i3_reg_108 <= ap_const_lv7_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st30_fsm_29)) begin
        j_i3_reg_108 <= j_14_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_inference_mult_1_120_120_84_s_fu_119_ap_done))) begin
        j_i_reg_97 <= ap_const_lv7_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        j_i_reg_97 <= j_reg_202;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        B_0_load_reg_227 <= B_0_q0;
        T_0_load_reg_222 <= T_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        S_0_load_reg_250 <= S_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        j_14_reg_235 <= j_14_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_reg_202 <= j_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20))) begin
        reg_144 <= grp_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st29_fsm_28)) begin
        tmp_1_i_reg_265 <= grp_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (ap_const_lv1_0 == exitcond_i4_fu_168_p2))) begin
        tmp_7_i_reg_240[6 : 0] <= tmp_7_i_fu_180_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        tmp_9_i_reg_260 <= grp_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond_i_fu_150_p2 == ap_const_lv1_0))) begin
        tmp_i_reg_207[6 : 0] <= tmp_i_fu_162_p1[6 : 0];
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        B_0_ce0 = ap_const_logic_1;
    end else begin
        B_0_ce0 = ap_const_logic_0;
    end
end

always @ (tmp_i_reg_207 or ap_sig_cseq_ST_st10_fsm_9 or tmp_7_i_fu_180_p1 or ap_sig_cseq_ST_st9_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        S_0_address0 = tmp_i_reg_207;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        S_0_address0 = tmp_7_i_fu_180_p1;
    end else begin
        S_0_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st9_fsm_8) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        S_0_ce0 = ap_const_logic_1;
    end else begin
        S_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st9_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        S_0_we0 = ap_const_logic_1;
    end else begin
        S_0_we0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_i_fu_162_p1 or grp_inference_mult_1_120_120_84_s_fu_119_C_0_address0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        T_0_address0 = tmp_i_fu_162_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_address0 = grp_inference_mult_1_120_120_84_s_fu_119_C_0_address0;
    end else begin
        T_0_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or grp_inference_mult_1_120_120_84_s_fu_119_C_0_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        T_0_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_ce0 = grp_inference_mult_1_120_120_84_s_fu_119_C_0_ce0;
    end else begin
        T_0_ce0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_120_120_84_s_fu_119_C_0_we0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_we0 = grp_inference_mult_1_120_120_84_s_fu_119_C_0_we0;
    end else begin
        T_0_we0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_120_120_84_s_fu_119_B_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        W_ce0 = grp_inference_mult_1_120_120_84_s_fu_119_B_ce0;
    end else begin
        W_ce0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_120_120_84_s_fu_119_A_0_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        X_0_ce0 = grp_inference_mult_1_120_120_84_s_fu_119_A_0_ce0;
    end else begin
        X_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st30_fsm_29) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st30_fsm_29)) begin
        Y_0_ce0 = ap_const_logic_1;
    end else begin
        Y_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st30_fsm_29) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st30_fsm_29)) begin
        Y_0_we0 = ap_const_logic_1;
    end else begin
        Y_0_we0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st10_fsm_9 or exitcond_i4_fu_168_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == exitcond_i4_fu_168_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st10_fsm_9 or exitcond_i4_fu_168_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == exitcond_i4_fu_168_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_131) begin
    if (ap_sig_bdd_131) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_147) begin
    if (ap_sig_bdd_147) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_156) begin
    if (ap_sig_bdd_156) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_165) begin
    if (ap_sig_bdd_165) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_265) begin
    if (ap_sig_bdd_265) begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_48) begin
    if (ap_sig_bdd_48) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_92) begin
    if (ap_sig_bdd_92) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_174) begin
    if (ap_sig_bdd_174) begin
        ap_sig_cseq_ST_st29_fsm_28 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st29_fsm_28 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_224) begin
    if (ap_sig_bdd_224) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_236) begin
    if (ap_sig_bdd_236) begin
        ap_sig_cseq_ST_st30_fsm_29 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st30_fsm_29 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_102) begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_121) begin
    if (ap_sig_bdd_121) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_258) begin
    if (ap_sig_bdd_258) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_85) begin
    if (ap_sig_bdd_85) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_216) begin
    if (ap_sig_bdd_216) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

always @ (T_0_load_reg_222 or tmp_9_i_reg_260 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st18_fsm_17) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        grp_fu_129_p0 = tmp_9_i_reg_260;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_129_p0 = T_0_load_reg_222;
    end else begin
        grp_fu_129_p0 = 'bx;
    end
end

always @ (B_0_load_reg_227 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st18_fsm_17) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        grp_fu_129_p1 = ap_const_lv32_3F800000;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_129_p1 = B_0_load_reg_227;
    end else begin
        grp_fu_129_p1 = 'bx;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_i_fu_150_p2 or exitcond_i4_fu_168_p2 or grp_inference_mult_1_120_120_84_s_fu_119_ap_done) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_inference_mult_1_120_120_84_s_fu_119_ap_done)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(exitcond_i_fu_150_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_i4_fu_168_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign B_0_address0 = tmp_i_fu_162_p1;

assign S_0_d0 = reg_144;

assign T_0_d0 = grp_inference_mult_1_120_120_84_s_fu_119_C_0_d0;

assign W_address0 = grp_inference_mult_1_120_120_84_s_fu_119_B_address0;

assign X_0_address0 = grp_inference_mult_1_120_120_84_s_fu_119_A_0_address0;

assign Y_0_address0 = tmp_7_i_reg_240;

assign Y_0_d0 = tmp_1_i_reg_265;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_121 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_131 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_147 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_156 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_165 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_174 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1C]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_216 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_224 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_236 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1D]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_258 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_265 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_48 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_85 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_92 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

assign exitcond_i4_fu_168_p2 = (j_i3_reg_108 == ap_const_lv7_54? 1'b1: 1'b0);

assign exitcond_i_fu_150_p2 = (j_i_reg_97 == ap_const_lv7_54? 1'b1: 1'b0);

assign grp_fu_129_ce = ap_const_logic_1;

assign grp_fu_134_ce = ap_const_logic_1;

assign grp_fu_139_ce = ap_const_logic_1;

assign grp_fu_139_p1 = tmp_8_neg_i_fu_188_p2;

assign grp_inference_mult_1_120_120_84_s_fu_119_A_0_q0 = X_0_q0;

assign grp_inference_mult_1_120_120_84_s_fu_119_B_q0 = W_q0;

assign grp_inference_mult_1_120_120_84_s_fu_119_ap_start = grp_inference_mult_1_120_120_84_s_fu_119_ap_start_ap_start_reg;

assign j_14_fu_174_p2 = (j_i3_reg_108 + ap_const_lv7_1);

assign j_fu_156_p2 = (j_i_reg_97 + ap_const_lv7_1);

assign tmp_7_i_fu_180_p1 = j_i3_reg_108;

assign tmp_8_neg_i_fu_188_p2 = (tmp_8_to_int_i_fu_185_p1 ^ ap_const_lv32_80000000);

assign tmp_8_to_int_i_fu_185_p1 = S_0_load_reg_250;

assign tmp_i_fu_162_p1 = j_i_reg_97;
always @ (posedge ap_clk) begin
    tmp_i_reg_207[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_7_i_reg_240[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end



endmodule //inference_fc

