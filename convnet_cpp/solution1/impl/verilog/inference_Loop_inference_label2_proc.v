// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inference_Loop_inference_label2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        bias1_TDATA,
        bias1_TVALID,
        bias1_TREADY,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] bias1_TDATA;
input   bias1_TVALID;
output   bias1_TREADY;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bias1_TREADY;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [2:0] k_fu_89_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_46;
wire   [0:0] exitcond_fu_83_p2;
reg    ap_sig_bdd_53;
wire   [2:0] k4_phi_fu_76_p4;
reg   [2:0] k4_reg_72;
reg    ap_sig_bdd_62;
reg   [31:0] b1_5_fu_42;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_95;
reg   [31:0] b1_5_1_fu_46;
reg   [31:0] b1_5_2_fu_50;
reg   [31:0] b1_5_3_fu_54;
reg   [31:0] b1_5_4_fu_58;
reg   [31:0] b1_5_5_fu_62;
reg   [2:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53)) begin
        k4_reg_72 <= k_fu_89_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_62)) begin
        k4_reg_72 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53 & (k4_phi_fu_76_p4 == ap_const_lv3_4))) begin
        b1_5_1_fu_46 <= bias1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53 & (ap_const_lv3_0 == k4_phi_fu_76_p4))) begin
        b1_5_2_fu_50 <= bias1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53 & (k4_phi_fu_76_p4 == ap_const_lv3_3))) begin
        b1_5_3_fu_54 <= bias1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53 & (k4_phi_fu_76_p4 == ap_const_lv3_2))) begin
        b1_5_4_fu_58 <= bias1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53 & (k4_phi_fu_76_p4 == ap_const_lv3_1))) begin
        b1_5_5_fu_62 <= bias1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53 & ~(k4_phi_fu_76_p4 == ap_const_lv3_4) & ~(k4_phi_fu_76_p4 == ap_const_lv3_3) & ~(k4_phi_fu_76_p4 == ap_const_lv3_2) & ~(k4_phi_fu_76_p4 == ap_const_lv3_1) & ~(ap_const_lv3_0 == k4_phi_fu_76_p4))) begin
        b1_5_fu_42 <= bias1_TDATA;
    end
end

always @ (ap_done_reg or ap_sig_cseq_ST_st3_fsm_2) begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_22) begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_46) begin
    if (ap_sig_bdd_46) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_95) begin
    if (ap_sig_bdd_95) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_83_p2 or ap_sig_bdd_53) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53)) begin
        bias1_TREADY = ap_const_logic_1;
    end else begin
        bias1_TREADY = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or exitcond_fu_83_p2 or ap_sig_bdd_53 or ap_sig_bdd_62) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_62) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (((exitcond_fu_83_p2 == ap_const_lv1_0) & ~ap_sig_bdd_53)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if ((~ap_sig_bdd_53 & ~(exitcond_fu_83_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return_0 = b1_5_2_fu_50;

assign ap_return_1 = b1_5_5_fu_62;

assign ap_return_2 = b1_5_4_fu_58;

assign ap_return_3 = b1_5_3_fu_54;

assign ap_return_4 = b1_5_1_fu_46;

assign ap_return_5 = b1_5_fu_42;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_46 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (bias1_TVALID or exitcond_fu_83_p2) begin
    ap_sig_bdd_53 = ((bias1_TVALID == ap_const_logic_0) & (exitcond_fu_83_p2 == ap_const_lv1_0));
end


always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_62 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_95 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond_fu_83_p2 = (k4_reg_72 == ap_const_lv3_6? 1'b1: 1'b0);

assign k4_phi_fu_76_p4 = k4_reg_72;

assign k_fu_89_p2 = (k4_reg_72 + ap_const_lv3_1);


endmodule //inference_Loop_inference_label2_proc

