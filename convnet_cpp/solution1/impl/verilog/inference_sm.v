// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inference_sm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_0_address0,
        X_0_ce0,
        X_0_q0,
        W_address0,
        W_ce0,
        W_q0,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        argmax,
        argmax_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_CF000000 = 32'b11001111000000000000000000000000;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] X_0_address0;
output   X_0_ce0;
input  [31:0] X_0_q0;
output  [9:0] W_address0;
output   W_ce0;
input  [31:0] W_q0;
output  [3:0] B_0_address0;
output   B_0_ce0;
input  [31:0] B_0_q0;
output  [31:0] argmax;
output   argmax_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_0_ce0;
reg W_ce0;
reg B_0_ce0;
reg argmax_ap_vld;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm = 12'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_30;
wire   [3:0] j_fu_171_p2;
reg   [3:0] j_reg_315;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_62;
wire   [63:0] tmp_i_fu_177_p1;
reg   [63:0] tmp_i_reg_320;
wire   [0:0] exitcond_i_fu_165_p2;
wire   [31:0] T_0_q0;
reg   [31:0] T_0_load_reg_342;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_81;
reg   [31:0] B_0_load_reg_347;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] tmp_75_i_reg_352;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_91;
wire   [3:0] i_i1_cast2_fu_188_p1;
reg   [3:0] i_i1_cast2_reg_357;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_100;
wire   [3:0] j_1_fu_198_p2;
reg   [3:0] j_1_reg_365;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_109;
wire   [0:0] exitcond_i4_fu_192_p2;
reg   [3:0] T_0_address0;
reg    T_0_ce0;
reg    T_0_we0;
wire   [31:0] T_0_d0;
reg   [3:0] S_0_address0;
reg    S_0_ce0;
reg    S_0_we0;
wire   [31:0] S_0_d0;
wire   [31:0] S_0_q0;
wire    grp_inference_mult_1_84_84_10_s_fu_146_ap_start;
wire    grp_inference_mult_1_84_84_10_s_fu_146_ap_done;
wire    grp_inference_mult_1_84_84_10_s_fu_146_ap_idle;
wire    grp_inference_mult_1_84_84_10_s_fu_146_ap_ready;
wire   [6:0] grp_inference_mult_1_84_84_10_s_fu_146_A_0_address0;
wire    grp_inference_mult_1_84_84_10_s_fu_146_A_0_ce0;
wire   [31:0] grp_inference_mult_1_84_84_10_s_fu_146_A_0_q0;
wire   [9:0] grp_inference_mult_1_84_84_10_s_fu_146_B_address0;
wire    grp_inference_mult_1_84_84_10_s_fu_146_B_ce0;
wire   [31:0] grp_inference_mult_1_84_84_10_s_fu_146_B_q0;
wire   [3:0] grp_inference_mult_1_84_84_10_s_fu_146_C_0_address0;
wire    grp_inference_mult_1_84_84_10_s_fu_146_C_0_ce0;
wire    grp_inference_mult_1_84_84_10_s_fu_146_C_0_we0;
wire   [31:0] grp_inference_mult_1_84_84_10_s_fu_146_C_0_d0;
reg   [3:0] j_i_reg_110;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_157;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_165;
wire   [0:0] i_i1_phi_fu_126_p4;
reg   [0:0] i_i1_reg_121;
reg   [3:0] j_i3_reg_134;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_183;
reg    grp_inference_mult_1_84_84_10_s_fu_146_ap_start_ap_start_reg = 1'b0;
wire   [63:0] tmp_2_i_fu_204_p1;
reg   [31:0] max_val_1_fu_58;
wire   [0:0] tmp_8_fu_291_p2;
wire   [31:0] max_val_to_int_fu_213_p1;
wire   [31:0] max_val_1_i_to_int_fu_231_p1;
wire   [7:0] tmp_fu_217_p4;
wire   [22:0] tmp_1_fu_227_p1;
wire   [0:0] notrhs_fu_255_p2;
wire   [0:0] notlhs_fu_249_p2;
wire   [7:0] tmp_2_fu_235_p4;
wire   [22:0] tmp_3_fu_245_p1;
wire   [0:0] notrhs5_fu_273_p2;
wire   [0:0] notlhs4_fu_267_p2;
wire   [0:0] tmp_4_fu_261_p2;
wire   [0:0] tmp_5_fu_279_p2;
wire   [0:0] tmp_6_fu_285_p2;
wire   [0:0] tmp_7_fu_160_p2;
wire   [3:0] tmp_4_i_fu_297_p2;
wire    grp_fu_156_ce;
wire   [4:0] tmp_7_fu_160_opcode;
reg   [11:0] ap_NS_fsm;


inference_sm_T_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
T_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_0_address0 ),
    .ce0( T_0_ce0 ),
    .we0( T_0_we0 ),
    .d0( T_0_d0 ),
    .q0( T_0_q0 )
);

inference_sm_T_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
S_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( S_0_address0 ),
    .ce0( S_0_ce0 ),
    .we0( S_0_we0 ),
    .d0( S_0_d0 ),
    .q0( S_0_q0 )
);

inference_mult_1_84_84_10_s grp_inference_mult_1_84_84_10_s_fu_146(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_inference_mult_1_84_84_10_s_fu_146_ap_start ),
    .ap_done( grp_inference_mult_1_84_84_10_s_fu_146_ap_done ),
    .ap_idle( grp_inference_mult_1_84_84_10_s_fu_146_ap_idle ),
    .ap_ready( grp_inference_mult_1_84_84_10_s_fu_146_ap_ready ),
    .A_0_address0( grp_inference_mult_1_84_84_10_s_fu_146_A_0_address0 ),
    .A_0_ce0( grp_inference_mult_1_84_84_10_s_fu_146_A_0_ce0 ),
    .A_0_q0( grp_inference_mult_1_84_84_10_s_fu_146_A_0_q0 ),
    .B_address0( grp_inference_mult_1_84_84_10_s_fu_146_B_address0 ),
    .B_ce0( grp_inference_mult_1_84_84_10_s_fu_146_B_ce0 ),
    .B_q0( grp_inference_mult_1_84_84_10_s_fu_146_B_q0 ),
    .C_0_address0( grp_inference_mult_1_84_84_10_s_fu_146_C_0_address0 ),
    .C_0_ce0( grp_inference_mult_1_84_84_10_s_fu_146_C_0_ce0 ),
    .C_0_we0( grp_inference_mult_1_84_84_10_s_fu_146_C_0_we0 ),
    .C_0_d0( grp_inference_mult_1_84_84_10_s_fu_146_C_0_d0 )
);

inference_fadd_32ns_32ns_32_4_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inference_fadd_32ns_32ns_32_4_full_dsp_U46(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( T_0_load_reg_342 ),
    .din1( B_0_load_reg_347 ),
    .ce( grp_fu_156_ce ),
    .dout( grp_fu_156_p2 )
);

inference_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
inference_fcmp_32ns_32ns_1_1_U47(
    .din0( S_0_q0 ),
    .din1( max_val_1_fu_58 ),
    .opcode( tmp_7_fu_160_opcode ),
    .dout( tmp_7_fu_160_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_inference_mult_1_84_84_10_s_fu_146_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_inference_mult_1_84_84_10_s_fu_146_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            grp_inference_mult_1_84_84_10_s_fu_146_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_inference_mult_1_84_84_10_s_fu_146_ap_ready)) begin
            grp_inference_mult_1_84_84_10_s_fu_146_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) & ~(ap_const_lv1_0 == exitcond_i4_fu_192_p2))) begin
        i_i1_reg_121 <= ap_const_lv1_1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond_i_fu_165_p2 == ap_const_lv1_0))) begin
        i_i1_reg_121 <= ap_const_lv1_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (ap_const_lv1_0 == i_i1_phi_fu_126_p4))) begin
        j_i3_reg_134 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        j_i3_reg_134 <= j_1_reg_365;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_inference_mult_1_84_84_10_s_fu_146_ap_done))) begin
        j_i_reg_110 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        j_i_reg_110 <= j_reg_315;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & ~(ap_const_lv1_0 == tmp_8_fu_291_p2))) begin
        max_val_1_fu_58 <= S_0_q0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond_i_fu_165_p2 == ap_const_lv1_0))) begin
        max_val_1_fu_58 <= ap_const_lv32_CF000000;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        B_0_load_reg_347 <= B_0_q0;
        T_0_load_reg_342 <= T_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        i_i1_cast2_reg_357[0] <= i_i1_cast2_fu_188_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        j_1_reg_365 <= j_1_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_reg_315 <= j_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_75_i_reg_352 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond_i_fu_165_p2 == ap_const_lv1_0))) begin
        tmp_i_reg_320[3 : 0] <= tmp_i_fu_177_p1[3 : 0];
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        B_0_ce0 = ap_const_logic_1;
    end else begin
        B_0_ce0 = ap_const_logic_0;
    end
end

always @ (tmp_i_reg_320 or ap_sig_cseq_ST_st11_fsm_10 or ap_sig_cseq_ST_st9_fsm_8 or tmp_2_i_fu_204_p1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        S_0_address0 = tmp_i_reg_320;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        S_0_address0 = tmp_2_i_fu_204_p1;
    end else begin
        S_0_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st11_fsm_10 or ap_sig_cseq_ST_st9_fsm_8) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        S_0_ce0 = ap_const_logic_1;
    end else begin
        S_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st9_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        S_0_we0 = ap_const_logic_1;
    end else begin
        S_0_we0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_i_fu_177_p1 or grp_inference_mult_1_84_84_10_s_fu_146_C_0_address0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        T_0_address0 = tmp_i_fu_177_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_address0 = grp_inference_mult_1_84_84_10_s_fu_146_C_0_address0;
    end else begin
        T_0_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or grp_inference_mult_1_84_84_10_s_fu_146_C_0_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        T_0_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_ce0 = grp_inference_mult_1_84_84_10_s_fu_146_C_0_ce0;
    end else begin
        T_0_ce0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_84_84_10_s_fu_146_C_0_we0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_we0 = grp_inference_mult_1_84_84_10_s_fu_146_C_0_we0;
    end else begin
        T_0_we0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_84_84_10_s_fu_146_B_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        W_ce0 = grp_inference_mult_1_84_84_10_s_fu_146_B_ce0;
    end else begin
        W_ce0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_84_84_10_s_fu_146_A_0_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        X_0_ce0 = grp_inference_mult_1_84_84_10_s_fu_146_A_0_ce0;
    end else begin
        X_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st10_fsm_9 or i_i1_phi_fu_126_p4) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == i_i1_phi_fu_126_p4)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st10_fsm_9 or i_i1_phi_fu_126_p4) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == i_i1_phi_fu_126_p4))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_100) begin
    if (ap_sig_bdd_100) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_109) begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_183) begin
    if (ap_sig_bdd_183) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_30) begin
    if (ap_sig_bdd_30) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_165) begin
    if (ap_sig_bdd_165) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_62) begin
    if (ap_sig_bdd_62) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_81) begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_91) begin
    if (ap_sig_bdd_91) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_157) begin
    if (ap_sig_bdd_157) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st12_fsm_11 or tmp_8_fu_291_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & ~(ap_const_lv1_0 == tmp_8_fu_291_p2))) begin
        argmax_ap_vld = ap_const_logic_1;
    end else begin
        argmax_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_i_fu_165_p2 or exitcond_i4_fu_192_p2 or grp_inference_mult_1_84_84_10_s_fu_146_ap_done or i_i1_phi_fu_126_p4) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_inference_mult_1_84_84_10_s_fu_146_ap_done)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(exitcond_i_fu_165_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_lv1_0 == i_i1_phi_fu_126_p4)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            if ((ap_const_lv1_0 == exitcond_i4_fu_192_p2)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign B_0_address0 = tmp_i_fu_177_p1;

assign S_0_d0 = tmp_75_i_reg_352;

assign T_0_d0 = grp_inference_mult_1_84_84_10_s_fu_146_C_0_d0;

assign W_address0 = grp_inference_mult_1_84_84_10_s_fu_146_B_address0;

assign X_0_address0 = grp_inference_mult_1_84_84_10_s_fu_146_A_0_address0;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_100 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_157 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_165 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_183 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_30 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_62 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_91 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

assign argmax = tmp_4_i_fu_297_p2;

assign exitcond_i4_fu_192_p2 = (j_i3_reg_134 == ap_const_lv4_A? 1'b1: 1'b0);

assign exitcond_i_fu_165_p2 = (j_i_reg_110 == ap_const_lv4_A? 1'b1: 1'b0);

assign grp_fu_156_ce = ap_const_logic_1;

assign grp_inference_mult_1_84_84_10_s_fu_146_A_0_q0 = X_0_q0;

assign grp_inference_mult_1_84_84_10_s_fu_146_B_q0 = W_q0;

assign grp_inference_mult_1_84_84_10_s_fu_146_ap_start = grp_inference_mult_1_84_84_10_s_fu_146_ap_start_ap_start_reg;

assign i_i1_cast2_fu_188_p1 = i_i1_reg_121;

assign i_i1_phi_fu_126_p4 = i_i1_reg_121;

assign j_1_fu_198_p2 = (j_i3_reg_134 + ap_const_lv4_1);

assign j_fu_171_p2 = (j_i_reg_110 + ap_const_lv4_1);

assign max_val_1_i_to_int_fu_231_p1 = max_val_1_fu_58;

assign max_val_to_int_fu_213_p1 = S_0_q0;

assign notlhs4_fu_267_p2 = (tmp_2_fu_235_p4 != ap_const_lv8_FF? 1'b1: 1'b0);

assign notlhs_fu_249_p2 = (tmp_fu_217_p4 != ap_const_lv8_FF? 1'b1: 1'b0);

assign notrhs5_fu_273_p2 = (tmp_3_fu_245_p1 == ap_const_lv23_0? 1'b1: 1'b0);

assign notrhs_fu_255_p2 = (tmp_1_fu_227_p1 == ap_const_lv23_0? 1'b1: 1'b0);

assign tmp_1_fu_227_p1 = max_val_to_int_fu_213_p1[22:0];

assign tmp_2_fu_235_p4 = {{max_val_1_i_to_int_fu_231_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_2_i_fu_204_p1 = j_i3_reg_134;

assign tmp_3_fu_245_p1 = max_val_1_i_to_int_fu_231_p1[22:0];

assign tmp_4_fu_261_p2 = (notrhs_fu_255_p2 | notlhs_fu_249_p2);

assign tmp_4_i_fu_297_p2 = (j_i3_reg_134 + i_i1_cast2_reg_357);

assign tmp_5_fu_279_p2 = (notrhs5_fu_273_p2 | notlhs4_fu_267_p2);

assign tmp_6_fu_285_p2 = (tmp_4_fu_261_p2 & tmp_5_fu_279_p2);

assign tmp_7_fu_160_opcode = ap_const_lv5_2;

assign tmp_8_fu_291_p2 = (tmp_6_fu_285_p2 & tmp_7_fu_160_p2);

assign tmp_fu_217_p4 = {{max_val_to_int_fu_213_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_i_fu_177_p1 = j_i_reg_110;
always @ (posedge ap_clk) begin
    tmp_i_reg_320[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i_i1_cast2_reg_357[3:1] <= 3'b000;
end



endmodule //inference_sm

