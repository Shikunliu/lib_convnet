// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module inference_sm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_0_address0,
        X_0_ce0,
        X_0_q0,
        W_address0,
        W_ce0,
        W_q0,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        argmax_TDATA,
        argmax_TVALID,
        argmax_TREADY
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_st3_fsm_2 = 10'b100;
parameter    ap_ST_st4_fsm_3 = 10'b1000;
parameter    ap_ST_st5_fsm_4 = 10'b10000;
parameter    ap_ST_st6_fsm_5 = 10'b100000;
parameter    ap_ST_st7_fsm_6 = 10'b1000000;
parameter    ap_ST_st8_fsm_7 = 10'b10000000;
parameter    ap_ST_st9_fsm_8 = 10'b100000000;
parameter    ap_ST_st10_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] X_0_address0;
output   X_0_ce0;
input  [31:0] X_0_q0;
output  [9:0] W_address0;
output   W_ce0;
input  [31:0] W_q0;
output  [3:0] B_0_address0;
output   B_0_ce0;
input  [31:0] B_0_q0;
output  [31:0] argmax_TDATA;
output   argmax_TVALID;
input   argmax_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_0_ce0;
reg W_ce0;
reg B_0_ce0;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
wire   [3:0] j_fu_120_p2;
reg   [3:0] j_reg_135;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_61;
wire   [63:0] tmp_i_fu_126_p1;
reg   [63:0] tmp_i_reg_140;
wire   [0:0] exitcond_i_fu_114_p2;
wire   [31:0] T_0_q0;
reg   [31:0] T_0_load_reg_155;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_80;
reg   [31:0] B_0_load_reg_160;
wire   [31:0] grp_fu_110_p2;
reg   [31:0] tmp_75_i_reg_165;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_90;
reg   [3:0] T_0_address0;
reg    T_0_ce0;
reg    T_0_we0;
wire   [31:0] T_0_d0;
reg   [3:0] S_0_address0;
reg    S_0_ce0;
reg    S_0_we0;
wire   [31:0] S_0_d0;
wire   [31:0] S_0_q0;
wire    grp_inference_mult_1_84_84_10_s_fu_93_ap_start;
wire    grp_inference_mult_1_84_84_10_s_fu_93_ap_done;
wire    grp_inference_mult_1_84_84_10_s_fu_93_ap_idle;
wire    grp_inference_mult_1_84_84_10_s_fu_93_ap_ready;
wire   [6:0] grp_inference_mult_1_84_84_10_s_fu_93_A_0_address0;
wire    grp_inference_mult_1_84_84_10_s_fu_93_A_0_ce0;
wire   [31:0] grp_inference_mult_1_84_84_10_s_fu_93_A_0_q0;
wire   [9:0] grp_inference_mult_1_84_84_10_s_fu_93_B_address0;
wire    grp_inference_mult_1_84_84_10_s_fu_93_B_ce0;
wire   [31:0] grp_inference_mult_1_84_84_10_s_fu_93_B_q0;
wire   [3:0] grp_inference_mult_1_84_84_10_s_fu_93_C_0_address0;
wire    grp_inference_mult_1_84_84_10_s_fu_93_C_0_ce0;
wire    grp_inference_mult_1_84_84_10_s_fu_93_C_0_we0;
wire   [31:0] grp_inference_mult_1_84_84_10_s_fu_93_C_0_d0;
wire    grp_inference_softmax_1_10_s_fu_103_ap_start;
wire    grp_inference_softmax_1_10_s_fu_103_ap_done;
wire    grp_inference_softmax_1_10_s_fu_103_ap_idle;
wire    grp_inference_softmax_1_10_s_fu_103_ap_ready;
wire   [3:0] grp_inference_softmax_1_10_s_fu_103_A_0_address0;
wire    grp_inference_softmax_1_10_s_fu_103_A_0_ce0;
wire   [31:0] grp_inference_softmax_1_10_s_fu_103_A_0_q0;
wire   [31:0] grp_inference_softmax_1_10_s_fu_103_argmax_TDATA;
wire    grp_inference_softmax_1_10_s_fu_103_argmax_TVALID;
wire    grp_inference_softmax_1_10_s_fu_103_argmax_TREADY;
reg   [3:0] j_i_reg_82;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_145;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_153;
reg    grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg = 1'b0;
reg    grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_172;
wire    grp_fu_110_ce;
reg   [9:0] ap_NS_fsm;


inference_sm_T_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
T_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( T_0_address0 ),
    .ce0( T_0_ce0 ),
    .we0( T_0_we0 ),
    .d0( T_0_d0 ),
    .q0( T_0_q0 )
);

inference_sm_T_0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
S_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( S_0_address0 ),
    .ce0( S_0_ce0 ),
    .we0( S_0_we0 ),
    .d0( S_0_d0 ),
    .q0( S_0_q0 )
);

inference_mult_1_84_84_10_s grp_inference_mult_1_84_84_10_s_fu_93(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_inference_mult_1_84_84_10_s_fu_93_ap_start ),
    .ap_done( grp_inference_mult_1_84_84_10_s_fu_93_ap_done ),
    .ap_idle( grp_inference_mult_1_84_84_10_s_fu_93_ap_idle ),
    .ap_ready( grp_inference_mult_1_84_84_10_s_fu_93_ap_ready ),
    .A_0_address0( grp_inference_mult_1_84_84_10_s_fu_93_A_0_address0 ),
    .A_0_ce0( grp_inference_mult_1_84_84_10_s_fu_93_A_0_ce0 ),
    .A_0_q0( grp_inference_mult_1_84_84_10_s_fu_93_A_0_q0 ),
    .B_address0( grp_inference_mult_1_84_84_10_s_fu_93_B_address0 ),
    .B_ce0( grp_inference_mult_1_84_84_10_s_fu_93_B_ce0 ),
    .B_q0( grp_inference_mult_1_84_84_10_s_fu_93_B_q0 ),
    .C_0_address0( grp_inference_mult_1_84_84_10_s_fu_93_C_0_address0 ),
    .C_0_ce0( grp_inference_mult_1_84_84_10_s_fu_93_C_0_ce0 ),
    .C_0_we0( grp_inference_mult_1_84_84_10_s_fu_93_C_0_we0 ),
    .C_0_d0( grp_inference_mult_1_84_84_10_s_fu_93_C_0_d0 )
);

inference_softmax_1_10_s grp_inference_softmax_1_10_s_fu_103(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_inference_softmax_1_10_s_fu_103_ap_start ),
    .ap_done( grp_inference_softmax_1_10_s_fu_103_ap_done ),
    .ap_idle( grp_inference_softmax_1_10_s_fu_103_ap_idle ),
    .ap_ready( grp_inference_softmax_1_10_s_fu_103_ap_ready ),
    .A_0_address0( grp_inference_softmax_1_10_s_fu_103_A_0_address0 ),
    .A_0_ce0( grp_inference_softmax_1_10_s_fu_103_A_0_ce0 ),
    .A_0_q0( grp_inference_softmax_1_10_s_fu_103_A_0_q0 ),
    .argmax_TDATA( grp_inference_softmax_1_10_s_fu_103_argmax_TDATA ),
    .argmax_TVALID( grp_inference_softmax_1_10_s_fu_103_argmax_TVALID ),
    .argmax_TREADY( grp_inference_softmax_1_10_s_fu_103_argmax_TREADY )
);

inference_fadd_32ns_32ns_32_4_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inference_fadd_32ns_32ns_32_4_full_dsp_U49(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( T_0_load_reg_155 ),
    .din1( B_0_load_reg_160 ),
    .ce( grp_fu_110_ce ),
    .dout( grp_fu_110_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_inference_mult_1_84_84_10_s_fu_93_ap_ready)) begin
            grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond_i_fu_114_p2 == ap_const_lv1_0))) begin
            grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_inference_softmax_1_10_s_fu_103_ap_ready)) begin
            grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_inference_mult_1_84_84_10_s_fu_93_ap_done))) begin
        j_i_reg_82 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        j_i_reg_82 <= j_reg_135;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        B_0_load_reg_160 <= B_0_q0;
        T_0_load_reg_155 <= T_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_reg_135 <= j_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_75_i_reg_165 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond_i_fu_114_p2 == ap_const_lv1_0))) begin
        tmp_i_reg_140[3 : 0] <= tmp_i_fu_126_p1[3 : 0];
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        B_0_ce0 = ap_const_logic_1;
    end else begin
        B_0_ce0 = ap_const_logic_0;
    end
end

always @ (tmp_i_reg_140 or grp_inference_softmax_1_10_s_fu_103_A_0_address0 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        S_0_address0 = tmp_i_reg_140;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        S_0_address0 = grp_inference_softmax_1_10_s_fu_103_A_0_address0;
    end else begin
        S_0_address0 = 'bx;
    end
end

always @ (grp_inference_softmax_1_10_s_fu_103_A_0_ce0 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        S_0_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        S_0_ce0 = grp_inference_softmax_1_10_s_fu_103_A_0_ce0;
    end else begin
        S_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st9_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        S_0_we0 = ap_const_logic_1;
    end else begin
        S_0_we0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_i_fu_126_p1 or grp_inference_mult_1_84_84_10_s_fu_93_C_0_address0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        T_0_address0 = tmp_i_fu_126_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_address0 = grp_inference_mult_1_84_84_10_s_fu_93_C_0_address0;
    end else begin
        T_0_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or grp_inference_mult_1_84_84_10_s_fu_93_C_0_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        T_0_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_ce0 = grp_inference_mult_1_84_84_10_s_fu_93_C_0_ce0;
    end else begin
        T_0_ce0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_84_84_10_s_fu_93_C_0_we0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        T_0_we0 = grp_inference_mult_1_84_84_10_s_fu_93_C_0_we0;
    end else begin
        T_0_we0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_84_84_10_s_fu_93_B_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        W_ce0 = grp_inference_mult_1_84_84_10_s_fu_93_B_ce0;
    end else begin
        W_ce0 = ap_const_logic_0;
    end
end

always @ (grp_inference_mult_1_84_84_10_s_fu_93_A_0_ce0 or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        X_0_ce0 = grp_inference_mult_1_84_84_10_s_fu_93_A_0_ce0;
    end else begin
        X_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or grp_inference_softmax_1_10_s_fu_103_ap_done or ap_sig_cseq_ST_st10_fsm_9) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_logic_0 == grp_inference_softmax_1_10_s_fu_103_ap_done)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (grp_inference_softmax_1_10_s_fu_103_ap_done or ap_sig_cseq_ST_st10_fsm_9) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_logic_0 == grp_inference_softmax_1_10_s_fu_103_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_172) begin
    if (ap_sig_bdd_172) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_28) begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_153) begin
    if (ap_sig_bdd_153) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_61) begin
    if (ap_sig_bdd_61) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_80) begin
    if (ap_sig_bdd_80) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_90) begin
    if (ap_sig_bdd_90) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_145) begin
    if (ap_sig_bdd_145) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_i_fu_114_p2 or grp_inference_mult_1_84_84_10_s_fu_93_ap_done or grp_inference_softmax_1_10_s_fu_103_ap_done) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_inference_mult_1_84_84_10_s_fu_93_ap_done)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(exitcond_i_fu_114_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_logic_0 == grp_inference_softmax_1_10_s_fu_103_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign B_0_address0 = tmp_i_fu_126_p1;

assign S_0_d0 = tmp_75_i_reg_165;

assign T_0_d0 = grp_inference_mult_1_84_84_10_s_fu_93_C_0_d0;

assign W_address0 = grp_inference_mult_1_84_84_10_s_fu_93_B_address0;

assign X_0_address0 = grp_inference_mult_1_84_84_10_s_fu_93_A_0_address0;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_145 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_153 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_172 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_61 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_80 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_90 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

assign argmax_TDATA = grp_inference_softmax_1_10_s_fu_103_argmax_TDATA;

assign argmax_TVALID = grp_inference_softmax_1_10_s_fu_103_argmax_TVALID;

assign exitcond_i_fu_114_p2 = (j_i_reg_82 == ap_const_lv4_A? 1'b1: 1'b0);

assign grp_fu_110_ce = ap_const_logic_1;

assign grp_inference_mult_1_84_84_10_s_fu_93_A_0_q0 = X_0_q0;

assign grp_inference_mult_1_84_84_10_s_fu_93_B_q0 = W_q0;

assign grp_inference_mult_1_84_84_10_s_fu_93_ap_start = grp_inference_mult_1_84_84_10_s_fu_93_ap_start_ap_start_reg;

assign grp_inference_softmax_1_10_s_fu_103_A_0_q0 = S_0_q0;

assign grp_inference_softmax_1_10_s_fu_103_ap_start = grp_inference_softmax_1_10_s_fu_103_ap_start_ap_start_reg;

assign grp_inference_softmax_1_10_s_fu_103_argmax_TREADY = argmax_TREADY;

assign j_fu_120_p2 = (j_i_reg_82 + ap_const_lv4_1);

assign tmp_i_fu_126_p1 = j_i_reg_82;
always @ (posedge ap_clk) begin
    tmp_i_reg_140[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end



endmodule //inference_sm

