// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      inference
`define AUTOTB_DUT_INST AESL_inst_inference
`define AUTOTB_TOP      apatb_inference_top
`define AUTOTB_LAT_RESULT_FILE "inference.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "inference.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_inference_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00
`define LENGTH_inputImage 784
`define LENGTH_Filter1 150
`define LENGTH_bias1 6
`define LENGTH_Filter2 2400
`define LENGTH_bias2 16
`define LENGTH_Filter3 48000
`define LENGTH_bias3 120
`define LENGTH_fcWeight 10080
`define LENGTH_fcBias 84
`define LENGTH_smWeight 840
`define LENGTH_smBias 10
`define LENGTH_outDigit 1

`define	AESL_MEM_inputImage AESL_automem_inputImage
`define	AESL_MEM_INST_inputImage mem_inst_inputImage
`define	AESL_MEM_Filter1 AESL_automem_Filter1
`define	AESL_MEM_INST_Filter1 mem_inst_Filter1
`define	AESL_MEM_bias1 AESL_automem_bias1
`define	AESL_MEM_INST_bias1 mem_inst_bias1
`define	AESL_MEM_Filter2 AESL_automem_Filter2
`define	AESL_MEM_INST_Filter2 mem_inst_Filter2
`define	AESL_MEM_bias2 AESL_automem_bias2
`define	AESL_MEM_INST_bias2 mem_inst_bias2
`define	AESL_MEM_Filter3 AESL_automem_Filter3
`define	AESL_MEM_INST_Filter3 mem_inst_Filter3
`define	AESL_MEM_bias3 AESL_automem_bias3
`define	AESL_MEM_INST_bias3 mem_inst_bias3
`define	AESL_MEM_fcWeight AESL_automem_fcWeight
`define	AESL_MEM_INST_fcWeight mem_inst_fcWeight
`define	AESL_MEM_fcBias AESL_automem_fcBias
`define	AESL_MEM_INST_fcBias mem_inst_fcBias
`define	AESL_MEM_smWeight AESL_automem_smWeight
`define	AESL_MEM_INST_smWeight mem_inst_smWeight
`define	AESL_MEM_smBias AESL_automem_smBias
`define	AESL_MEM_INST_smBias mem_inst_smBias
`define   AESL_DEPTH_outDigit 1
`define AUTOTB_TVIN_inputImage  "./c.inference.autotvin_inputImage.dat"
`define AUTOTB_TVIN_Filter1  "./c.inference.autotvin_Filter1.dat"
`define AUTOTB_TVIN_bias1  "./c.inference.autotvin_bias1.dat"
`define AUTOTB_TVIN_Filter2  "./c.inference.autotvin_Filter2.dat"
`define AUTOTB_TVIN_bias2  "./c.inference.autotvin_bias2.dat"
`define AUTOTB_TVIN_Filter3  "./c.inference.autotvin_Filter3.dat"
`define AUTOTB_TVIN_bias3  "./c.inference.autotvin_bias3.dat"
`define AUTOTB_TVIN_fcWeight  "./c.inference.autotvin_fcWeight.dat"
`define AUTOTB_TVIN_fcBias  "./c.inference.autotvin_fcBias.dat"
`define AUTOTB_TVIN_smWeight  "./c.inference.autotvin_smWeight.dat"
`define AUTOTB_TVIN_smBias  "./c.inference.autotvin_smBias.dat"
`define AUTOTB_TVIN_inputImage_out_wrapc  "./rtl.inference.autotvin_inputImage.dat"
`define AUTOTB_TVIN_Filter1_out_wrapc  "./rtl.inference.autotvin_Filter1.dat"
`define AUTOTB_TVIN_bias1_out_wrapc  "./rtl.inference.autotvin_bias1.dat"
`define AUTOTB_TVIN_Filter2_out_wrapc  "./rtl.inference.autotvin_Filter2.dat"
`define AUTOTB_TVIN_bias2_out_wrapc  "./rtl.inference.autotvin_bias2.dat"
`define AUTOTB_TVIN_Filter3_out_wrapc  "./rtl.inference.autotvin_Filter3.dat"
`define AUTOTB_TVIN_bias3_out_wrapc  "./rtl.inference.autotvin_bias3.dat"
`define AUTOTB_TVIN_fcWeight_out_wrapc  "./rtl.inference.autotvin_fcWeight.dat"
`define AUTOTB_TVIN_fcBias_out_wrapc  "./rtl.inference.autotvin_fcBias.dat"
`define AUTOTB_TVIN_smWeight_out_wrapc  "./rtl.inference.autotvin_smWeight.dat"
`define AUTOTB_TVIN_smBias_out_wrapc  "./rtl.inference.autotvin_smBias.dat"
`define AUTOTB_TVOUT_outDigit  "./c.inference.autotvout_outDigit.dat"
`define AUTOTB_TVOUT_outDigit_out_wrapc  "./impl_rtl.inference.autotvout_outDigit.dat"

module `AUTOTB_TOP;

task read_token;
    input integer fp;
    output reg [175 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

task post_check;
    input integer fp1;
    input integer fp2;
    reg [175 : 0] token1;
    reg [175 : 0] token2;
    reg [175 : 0] golden;
    reg [175 : 0] result;
    integer ret;
    begin
        read_token(fp1, token1);
        read_token(fp2, token2);
        if (token1 != "[[[runtime]]]" || token2 != "[[[runtime]]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp1, token1);
        read_token(fp2, token2);
        while (token1 != "[[[/runtime]]]" && token2 != "[[[/runtime]]]") begin
            if (token1 != "[[transaction]]" || token2 != "[[transaction]]") begin
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
            end
            read_token(fp1, token1);  // skip transaction number
            read_token(fp2, token2);  // skip transaction number
	          read_token(fp1, token1);
	          read_token(fp2, token2);
            while(token1 != "[[/transaction]]" && token2 != "[[/transaction]]") begin
                ret = $sscanf(token1, "0x%x", golden);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                ret = $sscanf(token2, "0x%x", result);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                if(golden != result) begin
	                  $display("%x (expected) vs. %x (actual) - mismatch", golden, result);
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
                end
	              read_token(fp1, token1);
	              read_token(fp2, token2);
            end
	          read_token(fp1, token1);
	          read_token(fp2, token2);
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [23 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [23 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire [9 : 0] inputImage_address0;
wire  inputImage_ce0;
wire [31 : 0] inputImage_q0;
wire [7 : 0] Filter1_address0;
wire  Filter1_ce0;
wire [31 : 0] Filter1_q0;
wire [2 : 0] bias1_address0;
wire  bias1_ce0;
wire [31 : 0] bias1_q0;
wire [11 : 0] Filter2_address0;
wire  Filter2_ce0;
wire [31 : 0] Filter2_q0;
wire [3 : 0] bias2_address0;
wire  bias2_ce0;
wire [31 : 0] bias2_q0;
wire [15 : 0] Filter3_address0;
wire  Filter3_ce0;
wire [31 : 0] Filter3_q0;
wire [6 : 0] bias3_address0;
wire  bias3_ce0;
wire [31 : 0] bias3_q0;
wire [13 : 0] fcWeight_address0;
wire  fcWeight_ce0;
wire [31 : 0] fcWeight_q0;
wire [6 : 0] fcBias_address0;
wire  fcBias_ce0;
wire [31 : 0] fcBias_q0;
wire [9 : 0] smWeight_address0;
wire  smWeight_ce0;
wire [31 : 0] smWeight_q0;
wire [3 : 0] smBias_address0;
wire  smBias_ce0;
wire [31 : 0] smBias_q0;
wire [31 : 0] outDigit;
wire  outDigit_ap_vld;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
	.ap_clk(ap_clk),
	.ap_rst(ap_rst),
	.ap_start(ap_start),
	.ap_done(ap_done),
	.ap_idle(ap_idle),
	.ap_ready(ap_ready),
	.inputImage_address0(inputImage_address0),
	.inputImage_ce0(inputImage_ce0),
	.inputImage_q0(inputImage_q0),
	.Filter1_address0(Filter1_address0),
	.Filter1_ce0(Filter1_ce0),
	.Filter1_q0(Filter1_q0),
	.bias1_address0(bias1_address0),
	.bias1_ce0(bias1_ce0),
	.bias1_q0(bias1_q0),
	.Filter2_address0(Filter2_address0),
	.Filter2_ce0(Filter2_ce0),
	.Filter2_q0(Filter2_q0),
	.bias2_address0(bias2_address0),
	.bias2_ce0(bias2_ce0),
	.bias2_q0(bias2_q0),
	.Filter3_address0(Filter3_address0),
	.Filter3_ce0(Filter3_ce0),
	.Filter3_q0(Filter3_q0),
	.bias3_address0(bias3_address0),
	.bias3_ce0(bias3_ce0),
	.bias3_q0(bias3_q0),
	.fcWeight_address0(fcWeight_address0),
	.fcWeight_ce0(fcWeight_ce0),
	.fcWeight_q0(fcWeight_q0),
	.fcBias_address0(fcBias_address0),
	.fcBias_ce0(fcBias_ce0),
	.fcBias_q0(fcBias_q0),
	.smWeight_address0(smWeight_address0),
	.smWeight_ce0(smWeight_ce0),
	.smWeight_q0(smWeight_q0),
	.smBias_address0(smBias_address0),
	.smBias_ce0(smBias_ce0),
	.smBias_q0(smBias_q0),
	.outDigit(outDigit),
	.outDigit_ap_vld(outDigit_ap_vld));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst = AESL_reset;
assign ap_rst_n = ~AESL_reset;
assign AESL_reset = rst;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_done = ap_done;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = continue;
	always @(posedge AESL_clock) begin
		if (AESL_reset) begin
		end else begin
			if (AESL_done !== 1 && AESL_done !== 0) begin
				$display("ERROR: Control signal AESL_done is invalid!");
				$finish;
			end
		end
	end
	always @(posedge AESL_clock) begin
		if (AESL_reset) begin
		end else begin
			if (AESL_ready !== 1 && AESL_ready !== 0) begin
				$display("ERROR: Control signal AESL_ready is invalid!");
				$finish;
			end
		end
	end
//------------------------arrayinputImage Instantiation--------------

// The input and output of arrayinputImage
wire    arrayinputImage_ce0, arrayinputImage_ce1;
wire	arrayinputImage_we0, arrayinputImage_we1;
wire    [9 : 0]	arrayinputImage_address0, arrayinputImage_address1;
wire	[31 : 0]	arrayinputImage_din0, arrayinputImage_din1;
wire    [31 : 0]	arrayinputImage_dout0, arrayinputImage_dout1;
wire	arrayinputImage_ready;
wire	arrayinputImage_done;

`AESL_MEM_inputImage `AESL_MEM_INST_inputImage(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayinputImage_ce0),
    .we0        (arrayinputImage_we0),
    .address0   (arrayinputImage_address0),
    .din0       (arrayinputImage_din0),
    .dout0      (arrayinputImage_dout0),
    .ce1        (arrayinputImage_ce1),
    .we1        (arrayinputImage_we1),
    .address1   (arrayinputImage_address1),
    .din1       (arrayinputImage_din1),
    .dout1      (arrayinputImage_dout1),
    .ready	  (arrayinputImage_ready),
    .done	(arrayinputImage_done)
);

// Assignment between dut and arrayinputImage
assign arrayinputImage_address0 = inputImage_address0;
assign arrayinputImage_ce0 = inputImage_ce0;
assign inputImage_q0 = arrayinputImage_dout0;
assign arrayinputImage_we0 = 0;
assign arrayinputImage_din0 = 0;
assign arrayinputImage_we1 = 0;
assign arrayinputImage_din1 = 0;
assign arrayinputImage_ready=	ready;
assign arrayinputImage_done = 0;


//------------------------arrayFilter1 Instantiation--------------

// The input and output of arrayFilter1
wire    arrayFilter1_ce0, arrayFilter1_ce1;
wire	arrayFilter1_we0, arrayFilter1_we1;
wire    [7 : 0]	arrayFilter1_address0, arrayFilter1_address1;
wire	[31 : 0]	arrayFilter1_din0, arrayFilter1_din1;
wire    [31 : 0]	arrayFilter1_dout0, arrayFilter1_dout1;
wire	arrayFilter1_ready;
wire	arrayFilter1_done;

`AESL_MEM_Filter1 `AESL_MEM_INST_Filter1(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayFilter1_ce0),
    .we0        (arrayFilter1_we0),
    .address0   (arrayFilter1_address0),
    .din0       (arrayFilter1_din0),
    .dout0      (arrayFilter1_dout0),
    .ce1        (arrayFilter1_ce1),
    .we1        (arrayFilter1_we1),
    .address1   (arrayFilter1_address1),
    .din1       (arrayFilter1_din1),
    .dout1      (arrayFilter1_dout1),
    .ready	  (arrayFilter1_ready),
    .done	(arrayFilter1_done)
);

// Assignment between dut and arrayFilter1
assign arrayFilter1_address0 = Filter1_address0;
assign arrayFilter1_ce0 = Filter1_ce0;
assign Filter1_q0 = arrayFilter1_dout0;
assign arrayFilter1_we0 = 0;
assign arrayFilter1_din0 = 0;
assign arrayFilter1_we1 = 0;
assign arrayFilter1_din1 = 0;
assign arrayFilter1_ready=	ready;
assign arrayFilter1_done = 0;


//------------------------arraybias1 Instantiation--------------

// The input and output of arraybias1
wire    arraybias1_ce0, arraybias1_ce1;
wire	arraybias1_we0, arraybias1_we1;
wire    [2 : 0]	arraybias1_address0, arraybias1_address1;
wire	[31 : 0]	arraybias1_din0, arraybias1_din1;
wire    [31 : 0]	arraybias1_dout0, arraybias1_dout1;
wire	arraybias1_ready;
wire	arraybias1_done;

`AESL_MEM_bias1 `AESL_MEM_INST_bias1(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraybias1_ce0),
    .we0        (arraybias1_we0),
    .address0   (arraybias1_address0),
    .din0       (arraybias1_din0),
    .dout0      (arraybias1_dout0),
    .ce1        (arraybias1_ce1),
    .we1        (arraybias1_we1),
    .address1   (arraybias1_address1),
    .din1       (arraybias1_din1),
    .dout1      (arraybias1_dout1),
    .ready	  (arraybias1_ready),
    .done	(arraybias1_done)
);

// Assignment between dut and arraybias1
assign arraybias1_address0 = bias1_address0;
assign arraybias1_ce0 = bias1_ce0;
assign bias1_q0 = arraybias1_dout0;
assign arraybias1_we0 = 0;
assign arraybias1_din0 = 0;
assign arraybias1_we1 = 0;
assign arraybias1_din1 = 0;
assign arraybias1_ready=	ready;
assign arraybias1_done = 0;


//------------------------arrayFilter2 Instantiation--------------

// The input and output of arrayFilter2
wire    arrayFilter2_ce0, arrayFilter2_ce1;
wire	arrayFilter2_we0, arrayFilter2_we1;
wire    [11 : 0]	arrayFilter2_address0, arrayFilter2_address1;
wire	[31 : 0]	arrayFilter2_din0, arrayFilter2_din1;
wire    [31 : 0]	arrayFilter2_dout0, arrayFilter2_dout1;
wire	arrayFilter2_ready;
wire	arrayFilter2_done;

`AESL_MEM_Filter2 `AESL_MEM_INST_Filter2(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayFilter2_ce0),
    .we0        (arrayFilter2_we0),
    .address0   (arrayFilter2_address0),
    .din0       (arrayFilter2_din0),
    .dout0      (arrayFilter2_dout0),
    .ce1        (arrayFilter2_ce1),
    .we1        (arrayFilter2_we1),
    .address1   (arrayFilter2_address1),
    .din1       (arrayFilter2_din1),
    .dout1      (arrayFilter2_dout1),
    .ready	  (arrayFilter2_ready),
    .done	(arrayFilter2_done)
);

// Assignment between dut and arrayFilter2
assign arrayFilter2_address0 = Filter2_address0;
assign arrayFilter2_ce0 = Filter2_ce0;
assign Filter2_q0 = arrayFilter2_dout0;
assign arrayFilter2_we0 = 0;
assign arrayFilter2_din0 = 0;
assign arrayFilter2_we1 = 0;
assign arrayFilter2_din1 = 0;
assign arrayFilter2_ready=	ready;
assign arrayFilter2_done = 0;


//------------------------arraybias2 Instantiation--------------

// The input and output of arraybias2
wire    arraybias2_ce0, arraybias2_ce1;
wire	arraybias2_we0, arraybias2_we1;
wire    [3 : 0]	arraybias2_address0, arraybias2_address1;
wire	[31 : 0]	arraybias2_din0, arraybias2_din1;
wire    [31 : 0]	arraybias2_dout0, arraybias2_dout1;
wire	arraybias2_ready;
wire	arraybias2_done;

`AESL_MEM_bias2 `AESL_MEM_INST_bias2(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraybias2_ce0),
    .we0        (arraybias2_we0),
    .address0   (arraybias2_address0),
    .din0       (arraybias2_din0),
    .dout0      (arraybias2_dout0),
    .ce1        (arraybias2_ce1),
    .we1        (arraybias2_we1),
    .address1   (arraybias2_address1),
    .din1       (arraybias2_din1),
    .dout1      (arraybias2_dout1),
    .ready	  (arraybias2_ready),
    .done	(arraybias2_done)
);

// Assignment between dut and arraybias2
assign arraybias2_address0 = bias2_address0;
assign arraybias2_ce0 = bias2_ce0;
assign bias2_q0 = arraybias2_dout0;
assign arraybias2_we0 = 0;
assign arraybias2_din0 = 0;
assign arraybias2_we1 = 0;
assign arraybias2_din1 = 0;
assign arraybias2_ready=	ready;
assign arraybias2_done = 0;


//------------------------arrayFilter3 Instantiation--------------

// The input and output of arrayFilter3
wire    arrayFilter3_ce0, arrayFilter3_ce1;
wire	arrayFilter3_we0, arrayFilter3_we1;
wire    [15 : 0]	arrayFilter3_address0, arrayFilter3_address1;
wire	[31 : 0]	arrayFilter3_din0, arrayFilter3_din1;
wire    [31 : 0]	arrayFilter3_dout0, arrayFilter3_dout1;
wire	arrayFilter3_ready;
wire	arrayFilter3_done;

`AESL_MEM_Filter3 `AESL_MEM_INST_Filter3(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayFilter3_ce0),
    .we0        (arrayFilter3_we0),
    .address0   (arrayFilter3_address0),
    .din0       (arrayFilter3_din0),
    .dout0      (arrayFilter3_dout0),
    .ce1        (arrayFilter3_ce1),
    .we1        (arrayFilter3_we1),
    .address1   (arrayFilter3_address1),
    .din1       (arrayFilter3_din1),
    .dout1      (arrayFilter3_dout1),
    .ready	  (arrayFilter3_ready),
    .done	(arrayFilter3_done)
);

// Assignment between dut and arrayFilter3
assign arrayFilter3_address0 = Filter3_address0;
assign arrayFilter3_ce0 = Filter3_ce0;
assign Filter3_q0 = arrayFilter3_dout0;
assign arrayFilter3_we0 = 0;
assign arrayFilter3_din0 = 0;
assign arrayFilter3_we1 = 0;
assign arrayFilter3_din1 = 0;
assign arrayFilter3_ready=	ready;
assign arrayFilter3_done = 0;


//------------------------arraybias3 Instantiation--------------

// The input and output of arraybias3
wire    arraybias3_ce0, arraybias3_ce1;
wire	arraybias3_we0, arraybias3_we1;
wire    [6 : 0]	arraybias3_address0, arraybias3_address1;
wire	[31 : 0]	arraybias3_din0, arraybias3_din1;
wire    [31 : 0]	arraybias3_dout0, arraybias3_dout1;
wire	arraybias3_ready;
wire	arraybias3_done;

`AESL_MEM_bias3 `AESL_MEM_INST_bias3(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraybias3_ce0),
    .we0        (arraybias3_we0),
    .address0   (arraybias3_address0),
    .din0       (arraybias3_din0),
    .dout0      (arraybias3_dout0),
    .ce1        (arraybias3_ce1),
    .we1        (arraybias3_we1),
    .address1   (arraybias3_address1),
    .din1       (arraybias3_din1),
    .dout1      (arraybias3_dout1),
    .ready	  (arraybias3_ready),
    .done	(arraybias3_done)
);

// Assignment between dut and arraybias3
assign arraybias3_address0 = bias3_address0;
assign arraybias3_ce0 = bias3_ce0;
assign bias3_q0 = arraybias3_dout0;
assign arraybias3_we0 = 0;
assign arraybias3_din0 = 0;
assign arraybias3_we1 = 0;
assign arraybias3_din1 = 0;
assign arraybias3_ready=	ready;
assign arraybias3_done = 0;


//------------------------arrayfcWeight Instantiation--------------

// The input and output of arrayfcWeight
wire    arrayfcWeight_ce0, arrayfcWeight_ce1;
wire	arrayfcWeight_we0, arrayfcWeight_we1;
wire    [13 : 0]	arrayfcWeight_address0, arrayfcWeight_address1;
wire	[31 : 0]	arrayfcWeight_din0, arrayfcWeight_din1;
wire    [31 : 0]	arrayfcWeight_dout0, arrayfcWeight_dout1;
wire	arrayfcWeight_ready;
wire	arrayfcWeight_done;

`AESL_MEM_fcWeight `AESL_MEM_INST_fcWeight(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayfcWeight_ce0),
    .we0        (arrayfcWeight_we0),
    .address0   (arrayfcWeight_address0),
    .din0       (arrayfcWeight_din0),
    .dout0      (arrayfcWeight_dout0),
    .ce1        (arrayfcWeight_ce1),
    .we1        (arrayfcWeight_we1),
    .address1   (arrayfcWeight_address1),
    .din1       (arrayfcWeight_din1),
    .dout1      (arrayfcWeight_dout1),
    .ready	  (arrayfcWeight_ready),
    .done	(arrayfcWeight_done)
);

// Assignment between dut and arrayfcWeight
assign arrayfcWeight_address0 = fcWeight_address0;
assign arrayfcWeight_ce0 = fcWeight_ce0;
assign fcWeight_q0 = arrayfcWeight_dout0;
assign arrayfcWeight_we0 = 0;
assign arrayfcWeight_din0 = 0;
assign arrayfcWeight_we1 = 0;
assign arrayfcWeight_din1 = 0;
assign arrayfcWeight_ready=	ready;
assign arrayfcWeight_done = 0;


//------------------------arrayfcBias Instantiation--------------

// The input and output of arrayfcBias
wire    arrayfcBias_ce0, arrayfcBias_ce1;
wire	arrayfcBias_we0, arrayfcBias_we1;
wire    [6 : 0]	arrayfcBias_address0, arrayfcBias_address1;
wire	[31 : 0]	arrayfcBias_din0, arrayfcBias_din1;
wire    [31 : 0]	arrayfcBias_dout0, arrayfcBias_dout1;
wire	arrayfcBias_ready;
wire	arrayfcBias_done;

`AESL_MEM_fcBias `AESL_MEM_INST_fcBias(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayfcBias_ce0),
    .we0        (arrayfcBias_we0),
    .address0   (arrayfcBias_address0),
    .din0       (arrayfcBias_din0),
    .dout0      (arrayfcBias_dout0),
    .ce1        (arrayfcBias_ce1),
    .we1        (arrayfcBias_we1),
    .address1   (arrayfcBias_address1),
    .din1       (arrayfcBias_din1),
    .dout1      (arrayfcBias_dout1),
    .ready	  (arrayfcBias_ready),
    .done	(arrayfcBias_done)
);

// Assignment between dut and arrayfcBias
assign arrayfcBias_address0 = fcBias_address0;
assign arrayfcBias_ce0 = fcBias_ce0;
assign fcBias_q0 = arrayfcBias_dout0;
assign arrayfcBias_we0 = 0;
assign arrayfcBias_din0 = 0;
assign arrayfcBias_we1 = 0;
assign arrayfcBias_din1 = 0;
assign arrayfcBias_ready=	ready;
assign arrayfcBias_done = 0;


//------------------------arraysmWeight Instantiation--------------

// The input and output of arraysmWeight
wire    arraysmWeight_ce0, arraysmWeight_ce1;
wire	arraysmWeight_we0, arraysmWeight_we1;
wire    [9 : 0]	arraysmWeight_address0, arraysmWeight_address1;
wire	[31 : 0]	arraysmWeight_din0, arraysmWeight_din1;
wire    [31 : 0]	arraysmWeight_dout0, arraysmWeight_dout1;
wire	arraysmWeight_ready;
wire	arraysmWeight_done;

`AESL_MEM_smWeight `AESL_MEM_INST_smWeight(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysmWeight_ce0),
    .we0        (arraysmWeight_we0),
    .address0   (arraysmWeight_address0),
    .din0       (arraysmWeight_din0),
    .dout0      (arraysmWeight_dout0),
    .ce1        (arraysmWeight_ce1),
    .we1        (arraysmWeight_we1),
    .address1   (arraysmWeight_address1),
    .din1       (arraysmWeight_din1),
    .dout1      (arraysmWeight_dout1),
    .ready	  (arraysmWeight_ready),
    .done	(arraysmWeight_done)
);

// Assignment between dut and arraysmWeight
assign arraysmWeight_address0 = smWeight_address0;
assign arraysmWeight_ce0 = smWeight_ce0;
assign smWeight_q0 = arraysmWeight_dout0;
assign arraysmWeight_we0 = 0;
assign arraysmWeight_din0 = 0;
assign arraysmWeight_we1 = 0;
assign arraysmWeight_din1 = 0;
assign arraysmWeight_ready=	ready;
assign arraysmWeight_done = 0;


//------------------------arraysmBias Instantiation--------------

// The input and output of arraysmBias
wire    arraysmBias_ce0, arraysmBias_ce1;
wire	arraysmBias_we0, arraysmBias_we1;
wire    [3 : 0]	arraysmBias_address0, arraysmBias_address1;
wire	[31 : 0]	arraysmBias_din0, arraysmBias_din1;
wire    [31 : 0]	arraysmBias_dout0, arraysmBias_dout1;
wire	arraysmBias_ready;
wire	arraysmBias_done;

`AESL_MEM_smBias `AESL_MEM_INST_smBias(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysmBias_ce0),
    .we0        (arraysmBias_we0),
    .address0   (arraysmBias_address0),
    .din0       (arraysmBias_din0),
    .dout0      (arraysmBias_dout0),
    .ce1        (arraysmBias_ce1),
    .we1        (arraysmBias_we1),
    .address1   (arraysmBias_address1),
    .din1       (arraysmBias_din1),
    .dout1      (arraysmBias_dout1),
    .ready	  (arraysmBias_ready),
    .done	(arraysmBias_done)
);

// Assignment between dut and arraysmBias
assign arraysmBias_address0 = smBias_address0;
assign arraysmBias_ce0 = smBias_ce0;
assign smBias_q0 = arraysmBias_dout0;
assign arraysmBias_we0 = 0;
assign arraysmBias_din0 = 0;
assign arraysmBias_we1 = 0;
assign arraysmBias_din1 = 0;
assign arraysmBias_ready=	ready;
assign arraysmBias_done = 0;


reg AESL_REG_outDigit_ap_vld = 0;
// The signal of port outDigit
reg [31: 0] AESL_REG_outDigit = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_outDigit = 0; 
    else if(outDigit_ap_vld) begin
        AESL_REG_outDigit <= outDigit;
        AESL_REG_outDigit_ap_vld <= 1;
    end
end 

initial begin : write_file_process_outDigit
	integer fp;
	integer fp_size;
	integer err;
	integer ret;
	integer i;
	integer hls_stream_size;
	integer rand;
	integer outDigit_count;
	reg [175:0] token;
	integer transaction_idx;
	reg [8 * 5:1] str;
    wait(AESL_reset === 0);
	fp = $fopen(`AUTOTB_TVOUT_outDigit_out_wrapc,"w");
	if(fp == 0) begin       // Failed to open file
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outDigit_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	transaction_idx = 0;
	while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_outDigit_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_outDigit);
        AESL_REG_outDigit_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

	event next_trigger_ready_cnt;
	
	initial begin : gen_ready_cnt
		ready_cnt = 0;
		wait (AESL_reset === 0);
		forever begin
			@ (posedge AESL_clock);
			if (ready == 1) begin
				if (ready_cnt < `AUTOTB_TRANSACTION_NUM) begin
					ready_cnt = ready_cnt + 1;
				end
			end
			-> next_trigger_ready_cnt;
		end
	end
	
	wire all_finish = (done_cnt == `AUTOTB_TRANSACTION_NUM);
	
	// done_cnt
	always @ (posedge AESL_clock) begin
		if (AESL_reset) begin
			done_cnt <= 0;
		end else begin
			if (AESL_done == 1) begin
				if (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
					done_cnt <= done_cnt + 1;
				end
			end
		end
	end
	
	initial begin : finish_simulation
		integer fp1;
		integer fp2;
		wait (all_finish == 1);
		// last transaction is saved at negedge right after last done
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
    fp1 = $fopen("./rtl.inference.autotvout_outDigit.dat", "r");
    fp2 = $fopen("./impl_rtl.inference.autotvout_outDigit.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.inference.autotvout_outDigit.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.inference.autotvout_outDigit.dat\"!");
    else begin
        $display("Comparing rtl.inference.autotvout_outDigit.dat with impl_rtl.inference.autotvout_outDigit.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
		$display("Simulation Passed.");
		$finish;
	end
	
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_inputImage;
reg [31:0] size_inputImage;
reg end_Filter1;
reg [31:0] size_Filter1;
reg end_bias1;
reg [31:0] size_bias1;
reg end_Filter2;
reg [31:0] size_Filter2;
reg end_bias2;
reg [31:0] size_bias2;
reg end_Filter3;
reg [31:0] size_Filter3;
reg end_bias3;
reg [31:0] size_bias3;
reg end_fcWeight;
reg [31:0] size_fcWeight;
reg end_fcBias;
reg [31:0] size_fcBias;
reg end_smWeight;
reg [31:0] size_smWeight;
reg end_smBias;
reg [31:0] size_smBias;
reg end_outDigit;
reg [31:0] size_outDigit;

initial begin : initial_process
    integer rand;
    rst = 1;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 0;
end

initial begin : start_process
	integer rand;
	start = 0;
	ce = 1;
	wait (AESL_reset === 0);
	@ (posedge AESL_clock);
	start = 1;
	while (ready_cnt < `AUTOTB_TRANSACTION_NUM + 1) begin
		@ (posedge AESL_clock);
	end
	start = 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
always @ (negedge AESL_clock) begin
    if(AESL_reset)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end
end

always @ (posedge AESL_clock or posedge AESL_reset) begin
	if (AESL_reset) begin
		AESL_mLatCnterOut_addr = 0;
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
	end else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
		AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
	end
end

always @ (posedge AESL_clock or posedge AESL_reset) begin
	if (AESL_reset) begin
		reported_stuck_cnt <= 0;
	end else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		reported_stuck <= 0;
	end else if (reported_stuck == 0 && reported_stuck_cnt < 4) begin
		if (AESL_mLatCnterIn_addr > AESL_mLatCnterOut_addr) begin
			if (AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 10000 && AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 10 * 3731601) begin
				$display("WARNING: The latency is much larger than expected. Simulation may stuck.");
				reported_stuck <= 1;
				reported_stuck_cnt <= reported_stuck_cnt + 1;
			end
		end
	end
end
always @ (posedge AESL_clock or posedge AESL_reset) begin
	if (AESL_reset) begin
		AESL_mLatCnterIn_addr = 0;
	end else begin
		if (AESL_start && AESL_mLatCnterIn_addr == 0) begin
			AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
			AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
		end else if (AESL_ready && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
			AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
			AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
		end
	end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];

	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);

	@(negedge AESL_reset);
	while (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	for (i = 0; i < `AUTOTB_TRANSACTION_NUM; i = i + 1) begin
		latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
		lat_array[i] = latthistime;
		if (latthistime > latmax) latmax = latthistime;
		if (latthistime < latmin) latmin = latthistime;
		lattotal = lattotal + latthistime;
		if (`AUTOTB_TRANSACTION_NUM == 1) begin
			thrthistime = latthistime;
		end else begin
			thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
		end
		thr_array[i] = thrthistime;
		if (thrthistime > thrmax) thrmax = thrthistime;
		if (thrthistime < thrmin) thrmin = thrthistime;
		thrtotal = thrtotal + thrthistime;
	end

	lataver = lattotal / `AUTOTB_TRANSACTION_NUM;
	thraver = thrtotal / `AUTOTB_TRANSACTION_NUM;

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax);
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin);
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver);
	end else begin
		// $::AESL_AUTOSIM::gDataflowTaskPipelineFlag && $::AESL_AUTOSIM::gnoPortSwitchingFlag == 0
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax );
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin );
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver );
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax );
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin );
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver );
	end

	$fclose(fp);

	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		i = 0;
		thr_array[i] = 0;
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end else begin
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
		end
	end
	$fclose(fp);
end

endmodule
