// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      inference
`define AUTOTB_DUT_INST AESL_inst_inference
`define AUTOTB_TOP      apatb_inference_top
`define AUTOTB_LAT_RESULT_FILE "inference.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "inference.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_inference_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00
`define LENGTH_inputImage 784
`define LENGTH_Filter1 150
`define LENGTH_bias1 6
`define LENGTH_Filter2 2400
`define LENGTH_bias2 16
`define LENGTH_Filter3 48000
`define LENGTH_bias3 120
`define LENGTH_fcWeight 10080
`define LENGTH_fcBias 84
`define LENGTH_smWeight 840
`define LENGTH_smBias 10
`define LENGTH_outDigit 1

`define   AESL_DEPTH_inputImage 1
`define   AESL_DEPTH_Filter1 1
`define   AESL_DEPTH_bias1 1
`define   AESL_DEPTH_Filter2 1
`define   AESL_DEPTH_bias2 1
`define   AESL_DEPTH_Filter3 1
`define   AESL_DEPTH_bias3 1
`define   AESL_DEPTH_fcWeight 1
`define   AESL_DEPTH_fcBias 1
`define   AESL_DEPTH_smWeight 1
`define   AESL_DEPTH_smBias 1
`define   AESL_DEPTH_outDigit 1
`define AUTOTB_TVIN_inputImage  "./c.inference.autotvin_inputImage.dat"
`define AUTOTB_TVIN_Filter1  "./c.inference.autotvin_Filter1.dat"
`define AUTOTB_TVIN_bias1  "./c.inference.autotvin_bias1.dat"
`define AUTOTB_TVIN_Filter2  "./c.inference.autotvin_Filter2.dat"
`define AUTOTB_TVIN_bias2  "./c.inference.autotvin_bias2.dat"
`define AUTOTB_TVIN_Filter3  "./c.inference.autotvin_Filter3.dat"
`define AUTOTB_TVIN_bias3  "./c.inference.autotvin_bias3.dat"
`define AUTOTB_TVIN_fcWeight  "./c.inference.autotvin_fcWeight.dat"
`define AUTOTB_TVIN_fcBias  "./c.inference.autotvin_fcBias.dat"
`define AUTOTB_TVIN_smWeight  "./c.inference.autotvin_smWeight.dat"
`define AUTOTB_TVIN_smBias  "./c.inference.autotvin_smBias.dat"
`define AUTOTB_TVIN_outDigit  "./c.inference.autotvin_outDigit.dat"
`define AUTOTB_TVIN_inputImage_out_wrapc  "./rtl.inference.autotvin_inputImage.dat"
`define AUTOTB_TVIN_Filter1_out_wrapc  "./rtl.inference.autotvin_Filter1.dat"
`define AUTOTB_TVIN_bias1_out_wrapc  "./rtl.inference.autotvin_bias1.dat"
`define AUTOTB_TVIN_Filter2_out_wrapc  "./rtl.inference.autotvin_Filter2.dat"
`define AUTOTB_TVIN_bias2_out_wrapc  "./rtl.inference.autotvin_bias2.dat"
`define AUTOTB_TVIN_Filter3_out_wrapc  "./rtl.inference.autotvin_Filter3.dat"
`define AUTOTB_TVIN_bias3_out_wrapc  "./rtl.inference.autotvin_bias3.dat"
`define AUTOTB_TVIN_fcWeight_out_wrapc  "./rtl.inference.autotvin_fcWeight.dat"
`define AUTOTB_TVIN_fcBias_out_wrapc  "./rtl.inference.autotvin_fcBias.dat"
`define AUTOTB_TVIN_smWeight_out_wrapc  "./rtl.inference.autotvin_smWeight.dat"
`define AUTOTB_TVIN_smBias_out_wrapc  "./rtl.inference.autotvin_smBias.dat"
`define AUTOTB_TVIN_outDigit_out_wrapc  "./rtl.inference.autotvin_outDigit.dat"
`define AUTOTB_TVOUT_outDigit  "./c.inference.autotvout_outDigit.dat"
`define AUTOTB_TVOUT_outDigit_out_wrapc  "./impl_rtl.inference.autotvout_outDigit.dat"

module `AUTOTB_TOP;

task read_token;
    input integer fp;
    output reg [159 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

task post_check;
    input integer fp1;
    input integer fp2;
    reg [159 : 0] token1;
    reg [159 : 0] token2;
    reg [159 : 0] golden;
    reg [159 : 0] result;
    integer ret;
    begin
        read_token(fp1, token1);
        read_token(fp2, token2);
        if (token1 != "[[[runtime]]]" || token2 != "[[[runtime]]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp1, token1);
        read_token(fp2, token2);
        while (token1 != "[[[/runtime]]]" && token2 != "[[[/runtime]]]") begin
            if (token1 != "[[transaction]]" || token2 != "[[transaction]]") begin
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
            end
            read_token(fp1, token1);  // skip transaction number
            read_token(fp2, token2);  // skip transaction number
	          read_token(fp1, token1);
	          read_token(fp2, token2);
            while(token1 != "[[/transaction]]" && token2 != "[[/transaction]]") begin
                ret = $sscanf(token1, "0x%x", golden);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                ret = $sscanf(token2, "0x%x", result);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                if(golden != result) begin
	                  $display("%x (expected) vs. %x (actual) - mismatch", golden, result);
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
                end
	              read_token(fp1, token1);
	              read_token(fp2, token2);
            end
	          read_token(fp1, token1);
	          read_token(fp2, token2);
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [18 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [18 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire [31 : 0] inputImage_TDATA;
wire [31 : 0] Filter1_TDATA;
wire [31 : 0] bias1_TDATA;
wire [31 : 0] Filter2_TDATA;
wire [31 : 0] bias2_TDATA;
wire [31 : 0] Filter3_TDATA;
wire [31 : 0] bias3_TDATA;
wire [31 : 0] fcWeight_TDATA;
wire [31 : 0] fcBias_TDATA;
wire [31 : 0] smWeight_TDATA;
wire [31 : 0] smBias_TDATA;
wire [31 : 0] outDigit_TDATA;
wire  inputImage_TVALID;
wire  inputImage_TREADY;
wire  Filter1_TVALID;
wire  Filter1_TREADY;
wire  bias1_TVALID;
wire  bias1_TREADY;
wire  Filter2_TVALID;
wire  Filter2_TREADY;
wire  bias2_TVALID;
wire  bias2_TREADY;
wire  Filter3_TVALID;
wire  Filter3_TREADY;
wire  bias3_TVALID;
wire  bias3_TREADY;
wire  fcWeight_TVALID;
wire  fcWeight_TREADY;
wire  fcBias_TVALID;
wire  fcBias_TREADY;
wire  smWeight_TVALID;
wire  smWeight_TREADY;
wire  smBias_TVALID;
wire  smBias_TREADY;
wire  outDigit_TVALID;
wire  outDigit_TREADY;
wire ap_done;
wire ap_start;
wire ap_idle;
wire ap_ready;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
	.ap_clk(ap_clk),
	.ap_rst_n(ap_rst_n),
	.inputImage_TDATA(inputImage_TDATA),
	.Filter1_TDATA(Filter1_TDATA),
	.bias1_TDATA(bias1_TDATA),
	.Filter2_TDATA(Filter2_TDATA),
	.bias2_TDATA(bias2_TDATA),
	.Filter3_TDATA(Filter3_TDATA),
	.bias3_TDATA(bias3_TDATA),
	.fcWeight_TDATA(fcWeight_TDATA),
	.fcBias_TDATA(fcBias_TDATA),
	.smWeight_TDATA(smWeight_TDATA),
	.smBias_TDATA(smBias_TDATA),
	.outDigit_TDATA(outDigit_TDATA),
	.inputImage_TVALID(inputImage_TVALID),
	.inputImage_TREADY(inputImage_TREADY),
	.Filter1_TVALID(Filter1_TVALID),
	.Filter1_TREADY(Filter1_TREADY),
	.bias1_TVALID(bias1_TVALID),
	.bias1_TREADY(bias1_TREADY),
	.Filter2_TVALID(Filter2_TVALID),
	.Filter2_TREADY(Filter2_TREADY),
	.bias2_TVALID(bias2_TVALID),
	.bias2_TREADY(bias2_TREADY),
	.Filter3_TVALID(Filter3_TVALID),
	.Filter3_TREADY(Filter3_TREADY),
	.bias3_TVALID(bias3_TVALID),
	.bias3_TREADY(bias3_TREADY),
	.fcWeight_TVALID(fcWeight_TVALID),
	.fcWeight_TREADY(fcWeight_TREADY),
	.fcBias_TVALID(fcBias_TVALID),
	.fcBias_TREADY(fcBias_TREADY),
	.smWeight_TVALID(smWeight_TVALID),
	.smWeight_TREADY(smWeight_TREADY),
	.smBias_TVALID(smBias_TVALID),
	.smBias_TREADY(smBias_TREADY),
	.outDigit_TVALID(outDigit_TVALID),
	.outDigit_TREADY(outDigit_TREADY),
	.ap_done(ap_done),
	.ap_start(ap_start),
	.ap_idle(ap_idle),
	.ap_ready(ap_ready));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst_n = AESL_reset;
assign ap_rst_n_n = ~AESL_reset;
assign AESL_reset = rst;
assign AESL_done = ap_done;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = continue;
	always @(posedge AESL_clock) begin
		if (AESL_reset === 0) begin
		end else begin
			if (AESL_done !== 1 && AESL_done !== 0) begin
				$display("ERROR: Control signal AESL_done is invalid!");
				$finish;
			end
		end
	end
	always @(posedge AESL_clock) begin
		if (AESL_reset === 0) begin
		end else begin
			if (AESL_ready !== 1 && AESL_ready !== 0) begin
				$display("ERROR: Control signal AESL_ready is invalid!");
				$finish;
			end
		end
	end












reg [31:0] ap_c_n_tvin_trans_num_inputImage;
reg inputImage_ready_reg; // for self-sync

wire inputImage_ready;
wire inputImage_done;
wire [31:0] inputImage_transaction;
wire axi_s_inputImage_TVALID;
wire axi_s_inputImage_TREADY;

AESL_axi_s_inputImage AESL_AXI_S_inputImage(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_inputImage_TDATA(inputImage_TDATA),
	.TRAN_inputImage_TVALID(axi_s_inputImage_TVALID),
	.TRAN_inputImage_TREADY(axi_s_inputImage_TREADY),
	.ready(inputImage_ready),
	.done(inputImage_done),
	.transaction(inputImage_transaction));

assign inputImage_ready = ready;
assign inputImage_done = 0;

reg reg_inputImage_TVALID;
initial begin : gen_reg_inputImage_TVALID_process
	integer rand;
	reg_inputImage_TVALID = axi_s_inputImage_TVALID;
	while (1) begin
		@ (axi_s_inputImage_TVALID);
		reg_inputImage_TVALID = axi_s_inputImage_TVALID;
	end
end


assign inputImage_TVALID = reg_inputImage_TVALID;

assign axi_s_inputImage_TREADY = inputImage_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_Filter1;
reg Filter1_ready_reg; // for self-sync

wire Filter1_ready;
wire Filter1_done;
wire [31:0] Filter1_transaction;
wire axi_s_Filter1_TVALID;
wire axi_s_Filter1_TREADY;

AESL_axi_s_Filter1 AESL_AXI_S_Filter1(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_Filter1_TDATA(Filter1_TDATA),
	.TRAN_Filter1_TVALID(axi_s_Filter1_TVALID),
	.TRAN_Filter1_TREADY(axi_s_Filter1_TREADY),
	.ready(Filter1_ready),
	.done(Filter1_done),
	.transaction(Filter1_transaction));

assign Filter1_ready = ready;
assign Filter1_done = 0;

reg reg_Filter1_TVALID;
initial begin : gen_reg_Filter1_TVALID_process
	integer rand;
	reg_Filter1_TVALID = axi_s_Filter1_TVALID;
	while (1) begin
		@ (axi_s_Filter1_TVALID);
		reg_Filter1_TVALID = axi_s_Filter1_TVALID;
	end
end


assign Filter1_TVALID = reg_Filter1_TVALID;

assign axi_s_Filter1_TREADY = Filter1_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_bias1;
reg bias1_ready_reg; // for self-sync

wire bias1_ready;
wire bias1_done;
wire [31:0] bias1_transaction;
wire axi_s_bias1_TVALID;
wire axi_s_bias1_TREADY;

AESL_axi_s_bias1 AESL_AXI_S_bias1(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_bias1_TDATA(bias1_TDATA),
	.TRAN_bias1_TVALID(axi_s_bias1_TVALID),
	.TRAN_bias1_TREADY(axi_s_bias1_TREADY),
	.ready(bias1_ready),
	.done(bias1_done),
	.transaction(bias1_transaction));

assign bias1_ready = ready;
assign bias1_done = 0;

reg reg_bias1_TVALID;
initial begin : gen_reg_bias1_TVALID_process
	integer rand;
	reg_bias1_TVALID = axi_s_bias1_TVALID;
	while (1) begin
		@ (axi_s_bias1_TVALID);
		reg_bias1_TVALID = axi_s_bias1_TVALID;
	end
end


assign bias1_TVALID = reg_bias1_TVALID;

assign axi_s_bias1_TREADY = bias1_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_Filter2;
reg Filter2_ready_reg; // for self-sync

wire Filter2_ready;
wire Filter2_done;
wire [31:0] Filter2_transaction;
wire axi_s_Filter2_TVALID;
wire axi_s_Filter2_TREADY;

AESL_axi_s_Filter2 AESL_AXI_S_Filter2(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_Filter2_TDATA(Filter2_TDATA),
	.TRAN_Filter2_TVALID(axi_s_Filter2_TVALID),
	.TRAN_Filter2_TREADY(axi_s_Filter2_TREADY),
	.ready(Filter2_ready),
	.done(Filter2_done),
	.transaction(Filter2_transaction));

assign Filter2_ready = ready;
assign Filter2_done = 0;

reg reg_Filter2_TVALID;
initial begin : gen_reg_Filter2_TVALID_process
	integer rand;
	reg_Filter2_TVALID = axi_s_Filter2_TVALID;
	while (1) begin
		@ (axi_s_Filter2_TVALID);
		reg_Filter2_TVALID = axi_s_Filter2_TVALID;
	end
end


assign Filter2_TVALID = reg_Filter2_TVALID;

assign axi_s_Filter2_TREADY = Filter2_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_bias2;
reg bias2_ready_reg; // for self-sync

wire bias2_ready;
wire bias2_done;
wire [31:0] bias2_transaction;
wire axi_s_bias2_TVALID;
wire axi_s_bias2_TREADY;

AESL_axi_s_bias2 AESL_AXI_S_bias2(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_bias2_TDATA(bias2_TDATA),
	.TRAN_bias2_TVALID(axi_s_bias2_TVALID),
	.TRAN_bias2_TREADY(axi_s_bias2_TREADY),
	.ready(bias2_ready),
	.done(bias2_done),
	.transaction(bias2_transaction));

assign bias2_ready = ready;
assign bias2_done = 0;

reg reg_bias2_TVALID;
initial begin : gen_reg_bias2_TVALID_process
	integer rand;
	reg_bias2_TVALID = axi_s_bias2_TVALID;
	while (1) begin
		@ (axi_s_bias2_TVALID);
		reg_bias2_TVALID = axi_s_bias2_TVALID;
	end
end


assign bias2_TVALID = reg_bias2_TVALID;

assign axi_s_bias2_TREADY = bias2_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_Filter3;
reg Filter3_ready_reg; // for self-sync

wire Filter3_ready;
wire Filter3_done;
wire [31:0] Filter3_transaction;
wire axi_s_Filter3_TVALID;
wire axi_s_Filter3_TREADY;

AESL_axi_s_Filter3 AESL_AXI_S_Filter3(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_Filter3_TDATA(Filter3_TDATA),
	.TRAN_Filter3_TVALID(axi_s_Filter3_TVALID),
	.TRAN_Filter3_TREADY(axi_s_Filter3_TREADY),
	.ready(Filter3_ready),
	.done(Filter3_done),
	.transaction(Filter3_transaction));

assign Filter3_ready = ready;
assign Filter3_done = 0;

reg reg_Filter3_TVALID;
initial begin : gen_reg_Filter3_TVALID_process
	integer rand;
	reg_Filter3_TVALID = axi_s_Filter3_TVALID;
	while (1) begin
		@ (axi_s_Filter3_TVALID);
		reg_Filter3_TVALID = axi_s_Filter3_TVALID;
	end
end


assign Filter3_TVALID = reg_Filter3_TVALID;

assign axi_s_Filter3_TREADY = Filter3_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_bias3;
reg bias3_ready_reg; // for self-sync

wire bias3_ready;
wire bias3_done;
wire [31:0] bias3_transaction;
wire axi_s_bias3_TVALID;
wire axi_s_bias3_TREADY;

AESL_axi_s_bias3 AESL_AXI_S_bias3(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_bias3_TDATA(bias3_TDATA),
	.TRAN_bias3_TVALID(axi_s_bias3_TVALID),
	.TRAN_bias3_TREADY(axi_s_bias3_TREADY),
	.ready(bias3_ready),
	.done(bias3_done),
	.transaction(bias3_transaction));

assign bias3_ready = ready;
assign bias3_done = 0;

reg reg_bias3_TVALID;
initial begin : gen_reg_bias3_TVALID_process
	integer rand;
	reg_bias3_TVALID = axi_s_bias3_TVALID;
	while (1) begin
		@ (axi_s_bias3_TVALID);
		reg_bias3_TVALID = axi_s_bias3_TVALID;
	end
end


assign bias3_TVALID = reg_bias3_TVALID;

assign axi_s_bias3_TREADY = bias3_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_fcWeight;
reg fcWeight_ready_reg; // for self-sync

wire fcWeight_ready;
wire fcWeight_done;
wire [31:0] fcWeight_transaction;
wire axi_s_fcWeight_TVALID;
wire axi_s_fcWeight_TREADY;

AESL_axi_s_fcWeight AESL_AXI_S_fcWeight(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_fcWeight_TDATA(fcWeight_TDATA),
	.TRAN_fcWeight_TVALID(axi_s_fcWeight_TVALID),
	.TRAN_fcWeight_TREADY(axi_s_fcWeight_TREADY),
	.ready(fcWeight_ready),
	.done(fcWeight_done),
	.transaction(fcWeight_transaction));

assign fcWeight_ready = ready;
assign fcWeight_done = 0;

reg reg_fcWeight_TVALID;
initial begin : gen_reg_fcWeight_TVALID_process
	integer rand;
	reg_fcWeight_TVALID = axi_s_fcWeight_TVALID;
	while (1) begin
		@ (axi_s_fcWeight_TVALID);
		reg_fcWeight_TVALID = axi_s_fcWeight_TVALID;
	end
end


assign fcWeight_TVALID = reg_fcWeight_TVALID;

assign axi_s_fcWeight_TREADY = fcWeight_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_fcBias;
reg fcBias_ready_reg; // for self-sync

wire fcBias_ready;
wire fcBias_done;
wire [31:0] fcBias_transaction;
wire axi_s_fcBias_TVALID;
wire axi_s_fcBias_TREADY;

AESL_axi_s_fcBias AESL_AXI_S_fcBias(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_fcBias_TDATA(fcBias_TDATA),
	.TRAN_fcBias_TVALID(axi_s_fcBias_TVALID),
	.TRAN_fcBias_TREADY(axi_s_fcBias_TREADY),
	.ready(fcBias_ready),
	.done(fcBias_done),
	.transaction(fcBias_transaction));

assign fcBias_ready = ready;
assign fcBias_done = 0;

reg reg_fcBias_TVALID;
initial begin : gen_reg_fcBias_TVALID_process
	integer rand;
	reg_fcBias_TVALID = axi_s_fcBias_TVALID;
	while (1) begin
		@ (axi_s_fcBias_TVALID);
		reg_fcBias_TVALID = axi_s_fcBias_TVALID;
	end
end


assign fcBias_TVALID = reg_fcBias_TVALID;

assign axi_s_fcBias_TREADY = fcBias_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_smWeight;
reg smWeight_ready_reg; // for self-sync

wire smWeight_ready;
wire smWeight_done;
wire [31:0] smWeight_transaction;
wire axi_s_smWeight_TVALID;
wire axi_s_smWeight_TREADY;

AESL_axi_s_smWeight AESL_AXI_S_smWeight(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_smWeight_TDATA(smWeight_TDATA),
	.TRAN_smWeight_TVALID(axi_s_smWeight_TVALID),
	.TRAN_smWeight_TREADY(axi_s_smWeight_TREADY),
	.ready(smWeight_ready),
	.done(smWeight_done),
	.transaction(smWeight_transaction));

assign smWeight_ready = ready;
assign smWeight_done = 0;

reg reg_smWeight_TVALID;
initial begin : gen_reg_smWeight_TVALID_process
	integer rand;
	reg_smWeight_TVALID = axi_s_smWeight_TVALID;
	while (1) begin
		@ (axi_s_smWeight_TVALID);
		reg_smWeight_TVALID = axi_s_smWeight_TVALID;
	end
end


assign smWeight_TVALID = reg_smWeight_TVALID;

assign axi_s_smWeight_TREADY = smWeight_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_smBias;
reg smBias_ready_reg; // for self-sync

wire smBias_ready;
wire smBias_done;
wire [31:0] smBias_transaction;
wire axi_s_smBias_TVALID;
wire axi_s_smBias_TREADY;

AESL_axi_s_smBias AESL_AXI_S_smBias(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_smBias_TDATA(smBias_TDATA),
	.TRAN_smBias_TVALID(axi_s_smBias_TVALID),
	.TRAN_smBias_TREADY(axi_s_smBias_TREADY),
	.ready(smBias_ready),
	.done(smBias_done),
	.transaction(smBias_transaction));

assign smBias_ready = ready;
assign smBias_done = 0;

reg reg_smBias_TVALID;
initial begin : gen_reg_smBias_TVALID_process
	integer rand;
	reg_smBias_TVALID = axi_s_smBias_TVALID;
	while (1) begin
		@ (axi_s_smBias_TVALID);
		reg_smBias_TVALID = axi_s_smBias_TVALID;
	end
end


assign smBias_TVALID = reg_smBias_TVALID;

assign axi_s_smBias_TREADY = smBias_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_outDigit;
reg outDigit_ready_reg; // for self-sync

wire outDigit_ready;
wire outDigit_done;
wire [31:0] outDigit_transaction;
wire axi_s_outDigit_TVALID;
wire axi_s_outDigit_TREADY;

AESL_axi_s_outDigit AESL_AXI_S_outDigit(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_outDigit_TDATA(outDigit_TDATA),
	.TRAN_outDigit_TVALID(axi_s_outDigit_TVALID),
	.TRAN_outDigit_TREADY(axi_s_outDigit_TREADY),
	.ready(outDigit_ready),
	.done(outDigit_done),
	.transaction(outDigit_transaction));

assign outDigit_ready = 0;
assign outDigit_done = AESL_done;

assign axi_s_outDigit_TVALID = outDigit_TVALID;

reg reg_outDigit_TREADY;
initial begin : gen_reg_outDigit_TREADY_process
    integer rand;
    reg_outDigit_TREADY = 0;
    while(1)
    begin
        @(axi_s_outDigit_TREADY);
        reg_outDigit_TREADY = axi_s_outDigit_TREADY;
    end
end


assign outDigit_TREADY = reg_outDigit_TREADY;

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

	event next_trigger_ready_cnt;
	
	initial begin : gen_ready_cnt
		ready_cnt = 0;
		wait (AESL_reset === 1);
		forever begin
			@ (posedge AESL_clock);
			if (ready == 1) begin
				if (ready_cnt < `AUTOTB_TRANSACTION_NUM) begin
					ready_cnt = ready_cnt + 1;
				end
			end
			-> next_trigger_ready_cnt;
		end
	end
	
	wire all_finish = (done_cnt == `AUTOTB_TRANSACTION_NUM);
	
	// done_cnt
	always @ (posedge AESL_clock) begin
		if (~AESL_reset) begin
			done_cnt <= 0;
		end else begin
			if (AESL_done == 1) begin
				if (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
					done_cnt <= done_cnt + 1;
				end
			end
		end
	end
	
	initial begin : finish_simulation
		integer fp1;
		integer fp2;
		wait (all_finish == 1);
		// last transaction is saved at negedge right after last done
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
    fp1 = $fopen("./rtl.inference.autotvout_outDigit.dat", "r");
    fp2 = $fopen("./impl_rtl.inference.autotvout_outDigit.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.inference.autotvout_outDigit.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.inference.autotvout_outDigit.dat\"!");
    else begin
        $display("Comparing rtl.inference.autotvout_outDigit.dat with impl_rtl.inference.autotvout_outDigit.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
		$display("Simulation Passed.");
		$finish;
	end
	
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_inputImage;
reg [31:0] size_inputImage;
reg end_Filter1;
reg [31:0] size_Filter1;
reg end_bias1;
reg [31:0] size_bias1;
reg end_Filter2;
reg [31:0] size_Filter2;
reg end_bias2;
reg [31:0] size_bias2;
reg end_Filter3;
reg [31:0] size_Filter3;
reg end_bias3;
reg [31:0] size_bias3;
reg end_fcWeight;
reg [31:0] size_fcWeight;
reg end_fcBias;
reg [31:0] size_fcBias;
reg end_smWeight;
reg [31:0] size_smWeight;
reg end_smBias;
reg [31:0] size_smBias;
reg end_outDigit;
reg [31:0] size_outDigit;

initial begin : initial_process
    integer rand;
    rst = 0;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 1;
end

initial begin : start_process
	integer rand;
	start = 0;
	ce = 1;
	wait (AESL_reset === 1);
	@ (posedge AESL_clock);
	start = 1;
	while (ready_cnt < `AUTOTB_TRANSACTION_NUM + 1) begin
		@ (posedge AESL_clock);
	end
	start = 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
	
	initial begin : proc_gen_axis_internal_ready_inputImage
		inputImage_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_inputImage or inputImage_transaction);
			if (ap_c_n_tvin_trans_num_inputImage > inputImage_transaction) begin
				inputImage_ready_reg = 1;
			end else begin
				inputImage_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_Filter1
		Filter1_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_Filter1 or Filter1_transaction);
			if (ap_c_n_tvin_trans_num_Filter1 > Filter1_transaction) begin
				Filter1_ready_reg = 1;
			end else begin
				Filter1_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_bias1
		bias1_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_bias1 or bias1_transaction);
			if (ap_c_n_tvin_trans_num_bias1 > bias1_transaction) begin
				bias1_ready_reg = 1;
			end else begin
				bias1_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_Filter2
		Filter2_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_Filter2 or Filter2_transaction);
			if (ap_c_n_tvin_trans_num_Filter2 > Filter2_transaction) begin
				Filter2_ready_reg = 1;
			end else begin
				Filter2_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_bias2
		bias2_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_bias2 or bias2_transaction);
			if (ap_c_n_tvin_trans_num_bias2 > bias2_transaction) begin
				bias2_ready_reg = 1;
			end else begin
				bias2_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_Filter3
		Filter3_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_Filter3 or Filter3_transaction);
			if (ap_c_n_tvin_trans_num_Filter3 > Filter3_transaction) begin
				Filter3_ready_reg = 1;
			end else begin
				Filter3_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_bias3
		bias3_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_bias3 or bias3_transaction);
			if (ap_c_n_tvin_trans_num_bias3 > bias3_transaction) begin
				bias3_ready_reg = 1;
			end else begin
				bias3_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_fcWeight
		fcWeight_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_fcWeight or fcWeight_transaction);
			if (ap_c_n_tvin_trans_num_fcWeight > fcWeight_transaction) begin
				fcWeight_ready_reg = 1;
			end else begin
				fcWeight_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_fcBias
		fcBias_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_fcBias or fcBias_transaction);
			if (ap_c_n_tvin_trans_num_fcBias > fcBias_transaction) begin
				fcBias_ready_reg = 1;
			end else begin
				fcBias_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_smWeight
		smWeight_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_smWeight or smWeight_transaction);
			if (ap_c_n_tvin_trans_num_smWeight > smWeight_transaction) begin
				smWeight_ready_reg = 1;
			end else begin
				smWeight_ready_reg = 0;
			end
		end
	end
	
	initial begin : proc_gen_axis_internal_ready_smBias
		smBias_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_smBias or smBias_transaction);
			if (ap_c_n_tvin_trans_num_smBias > smBias_transaction) begin
				smBias_ready_reg = 1;
			end else begin
				smBias_ready_reg = 0;
			end
		end
	end
	`define STREAM_SIZE_IN_inputImage "./stream_size_in_inputImage.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inputImage
		integer fp_inputImage;
		reg [127:0] token_inputImage;
		integer ret;
		
		ap_c_n_tvin_trans_num_inputImage = 0;
		end_inputImage = 0;
		wait (AESL_reset === 1);
		
		fp_inputImage = $fopen(`AUTOTB_TVIN_inputImage, "r");
		if(fp_inputImage == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_inputImage);
			$finish;
		end
		read_token(fp_inputImage, token_inputImage); // should be [[[runtime]]]
		if (token_inputImage != "[[[runtime]]]") begin
			$display("ERROR: token_inputImage != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_inputImage = ap_c_n_tvin_trans_num_inputImage + 1;
		read_token(fp_inputImage, token_inputImage); // should be [[transaction]] or [[[/runtime]]]
		if (token_inputImage == "[[[/runtime]]]") begin
			$fclose(fp_inputImage);
			end_inputImage = 1;
		end else begin
			end_inputImage = 0;
			read_token(fp_inputImage, token_inputImage); // should be transaction number
			read_token(fp_inputImage, token_inputImage);
		end
		while (token_inputImage == "[[/transaction]]" && end_inputImage == 0) begin
			ap_c_n_tvin_trans_num_inputImage = ap_c_n_tvin_trans_num_inputImage + 1;
			read_token(fp_inputImage, token_inputImage); // should be [[transaction]] or [[[/runtime]]]
			if (token_inputImage == "[[[/runtime]]]") begin
				$fclose(fp_inputImage);
				end_inputImage = 1;
			end else begin
				end_inputImage = 0;
				read_token(fp_inputImage, token_inputImage); // should be transaction number
				read_token(fp_inputImage, token_inputImage);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inputImage == 0) begin
				if (inputImage_TREADY == 1) begin
					read_token(fp_inputImage, token_inputImage);
					while (token_inputImage == "[[/transaction]]" && end_inputImage == 0) begin
						ap_c_n_tvin_trans_num_inputImage = ap_c_n_tvin_trans_num_inputImage + 1;
						read_token(fp_inputImage, token_inputImage); // should be [[transaction]] or [[[/runtime]]]
						if (token_inputImage == "[[[/runtime]]]") begin
							$fclose(fp_inputImage);
							end_inputImage = 1;
						end else begin
							end_inputImage = 0;
							read_token(fp_inputImage, token_inputImage); // should be transaction number
							read_token(fp_inputImage, token_inputImage);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inputImage = ap_c_n_tvin_trans_num_inputImage + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_Filter1 "./stream_size_in_Filter1.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_Filter1
		integer fp_Filter1;
		reg [127:0] token_Filter1;
		integer ret;
		
		ap_c_n_tvin_trans_num_Filter1 = 0;
		end_Filter1 = 0;
		wait (AESL_reset === 1);
		
		fp_Filter1 = $fopen(`AUTOTB_TVIN_Filter1, "r");
		if(fp_Filter1 == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_Filter1);
			$finish;
		end
		read_token(fp_Filter1, token_Filter1); // should be [[[runtime]]]
		if (token_Filter1 != "[[[runtime]]]") begin
			$display("ERROR: token_Filter1 != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_Filter1 = ap_c_n_tvin_trans_num_Filter1 + 1;
		read_token(fp_Filter1, token_Filter1); // should be [[transaction]] or [[[/runtime]]]
		if (token_Filter1 == "[[[/runtime]]]") begin
			$fclose(fp_Filter1);
			end_Filter1 = 1;
		end else begin
			end_Filter1 = 0;
			read_token(fp_Filter1, token_Filter1); // should be transaction number
			read_token(fp_Filter1, token_Filter1);
		end
		while (token_Filter1 == "[[/transaction]]" && end_Filter1 == 0) begin
			ap_c_n_tvin_trans_num_Filter1 = ap_c_n_tvin_trans_num_Filter1 + 1;
			read_token(fp_Filter1, token_Filter1); // should be [[transaction]] or [[[/runtime]]]
			if (token_Filter1 == "[[[/runtime]]]") begin
				$fclose(fp_Filter1);
				end_Filter1 = 1;
			end else begin
				end_Filter1 = 0;
				read_token(fp_Filter1, token_Filter1); // should be transaction number
				read_token(fp_Filter1, token_Filter1);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_Filter1 == 0) begin
				if (Filter1_TREADY == 1) begin
					read_token(fp_Filter1, token_Filter1);
					while (token_Filter1 == "[[/transaction]]" && end_Filter1 == 0) begin
						ap_c_n_tvin_trans_num_Filter1 = ap_c_n_tvin_trans_num_Filter1 + 1;
						read_token(fp_Filter1, token_Filter1); // should be [[transaction]] or [[[/runtime]]]
						if (token_Filter1 == "[[[/runtime]]]") begin
							$fclose(fp_Filter1);
							end_Filter1 = 1;
						end else begin
							end_Filter1 = 0;
							read_token(fp_Filter1, token_Filter1); // should be transaction number
							read_token(fp_Filter1, token_Filter1);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_Filter1 = ap_c_n_tvin_trans_num_Filter1 + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_bias1 "./stream_size_in_bias1.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_bias1
		integer fp_bias1;
		reg [127:0] token_bias1;
		integer ret;
		
		ap_c_n_tvin_trans_num_bias1 = 0;
		end_bias1 = 0;
		wait (AESL_reset === 1);
		
		fp_bias1 = $fopen(`AUTOTB_TVIN_bias1, "r");
		if(fp_bias1 == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_bias1);
			$finish;
		end
		read_token(fp_bias1, token_bias1); // should be [[[runtime]]]
		if (token_bias1 != "[[[runtime]]]") begin
			$display("ERROR: token_bias1 != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_bias1 = ap_c_n_tvin_trans_num_bias1 + 1;
		read_token(fp_bias1, token_bias1); // should be [[transaction]] or [[[/runtime]]]
		if (token_bias1 == "[[[/runtime]]]") begin
			$fclose(fp_bias1);
			end_bias1 = 1;
		end else begin
			end_bias1 = 0;
			read_token(fp_bias1, token_bias1); // should be transaction number
			read_token(fp_bias1, token_bias1);
		end
		while (token_bias1 == "[[/transaction]]" && end_bias1 == 0) begin
			ap_c_n_tvin_trans_num_bias1 = ap_c_n_tvin_trans_num_bias1 + 1;
			read_token(fp_bias1, token_bias1); // should be [[transaction]] or [[[/runtime]]]
			if (token_bias1 == "[[[/runtime]]]") begin
				$fclose(fp_bias1);
				end_bias1 = 1;
			end else begin
				end_bias1 = 0;
				read_token(fp_bias1, token_bias1); // should be transaction number
				read_token(fp_bias1, token_bias1);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_bias1 == 0) begin
				if (bias1_TREADY == 1) begin
					read_token(fp_bias1, token_bias1);
					while (token_bias1 == "[[/transaction]]" && end_bias1 == 0) begin
						ap_c_n_tvin_trans_num_bias1 = ap_c_n_tvin_trans_num_bias1 + 1;
						read_token(fp_bias1, token_bias1); // should be [[transaction]] or [[[/runtime]]]
						if (token_bias1 == "[[[/runtime]]]") begin
							$fclose(fp_bias1);
							end_bias1 = 1;
						end else begin
							end_bias1 = 0;
							read_token(fp_bias1, token_bias1); // should be transaction number
							read_token(fp_bias1, token_bias1);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_bias1 = ap_c_n_tvin_trans_num_bias1 + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_Filter2 "./stream_size_in_Filter2.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_Filter2
		integer fp_Filter2;
		reg [127:0] token_Filter2;
		integer ret;
		
		ap_c_n_tvin_trans_num_Filter2 = 0;
		end_Filter2 = 0;
		wait (AESL_reset === 1);
		
		fp_Filter2 = $fopen(`AUTOTB_TVIN_Filter2, "r");
		if(fp_Filter2 == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_Filter2);
			$finish;
		end
		read_token(fp_Filter2, token_Filter2); // should be [[[runtime]]]
		if (token_Filter2 != "[[[runtime]]]") begin
			$display("ERROR: token_Filter2 != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_Filter2 = ap_c_n_tvin_trans_num_Filter2 + 1;
		read_token(fp_Filter2, token_Filter2); // should be [[transaction]] or [[[/runtime]]]
		if (token_Filter2 == "[[[/runtime]]]") begin
			$fclose(fp_Filter2);
			end_Filter2 = 1;
		end else begin
			end_Filter2 = 0;
			read_token(fp_Filter2, token_Filter2); // should be transaction number
			read_token(fp_Filter2, token_Filter2);
		end
		while (token_Filter2 == "[[/transaction]]" && end_Filter2 == 0) begin
			ap_c_n_tvin_trans_num_Filter2 = ap_c_n_tvin_trans_num_Filter2 + 1;
			read_token(fp_Filter2, token_Filter2); // should be [[transaction]] or [[[/runtime]]]
			if (token_Filter2 == "[[[/runtime]]]") begin
				$fclose(fp_Filter2);
				end_Filter2 = 1;
			end else begin
				end_Filter2 = 0;
				read_token(fp_Filter2, token_Filter2); // should be transaction number
				read_token(fp_Filter2, token_Filter2);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_Filter2 == 0) begin
				if (Filter2_TREADY == 1) begin
					read_token(fp_Filter2, token_Filter2);
					while (token_Filter2 == "[[/transaction]]" && end_Filter2 == 0) begin
						ap_c_n_tvin_trans_num_Filter2 = ap_c_n_tvin_trans_num_Filter2 + 1;
						read_token(fp_Filter2, token_Filter2); // should be [[transaction]] or [[[/runtime]]]
						if (token_Filter2 == "[[[/runtime]]]") begin
							$fclose(fp_Filter2);
							end_Filter2 = 1;
						end else begin
							end_Filter2 = 0;
							read_token(fp_Filter2, token_Filter2); // should be transaction number
							read_token(fp_Filter2, token_Filter2);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_Filter2 = ap_c_n_tvin_trans_num_Filter2 + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_bias2 "./stream_size_in_bias2.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_bias2
		integer fp_bias2;
		reg [127:0] token_bias2;
		integer ret;
		
		ap_c_n_tvin_trans_num_bias2 = 0;
		end_bias2 = 0;
		wait (AESL_reset === 1);
		
		fp_bias2 = $fopen(`AUTOTB_TVIN_bias2, "r");
		if(fp_bias2 == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_bias2);
			$finish;
		end
		read_token(fp_bias2, token_bias2); // should be [[[runtime]]]
		if (token_bias2 != "[[[runtime]]]") begin
			$display("ERROR: token_bias2 != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_bias2 = ap_c_n_tvin_trans_num_bias2 + 1;
		read_token(fp_bias2, token_bias2); // should be [[transaction]] or [[[/runtime]]]
		if (token_bias2 == "[[[/runtime]]]") begin
			$fclose(fp_bias2);
			end_bias2 = 1;
		end else begin
			end_bias2 = 0;
			read_token(fp_bias2, token_bias2); // should be transaction number
			read_token(fp_bias2, token_bias2);
		end
		while (token_bias2 == "[[/transaction]]" && end_bias2 == 0) begin
			ap_c_n_tvin_trans_num_bias2 = ap_c_n_tvin_trans_num_bias2 + 1;
			read_token(fp_bias2, token_bias2); // should be [[transaction]] or [[[/runtime]]]
			if (token_bias2 == "[[[/runtime]]]") begin
				$fclose(fp_bias2);
				end_bias2 = 1;
			end else begin
				end_bias2 = 0;
				read_token(fp_bias2, token_bias2); // should be transaction number
				read_token(fp_bias2, token_bias2);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_bias2 == 0) begin
				if (bias2_TREADY == 1) begin
					read_token(fp_bias2, token_bias2);
					while (token_bias2 == "[[/transaction]]" && end_bias2 == 0) begin
						ap_c_n_tvin_trans_num_bias2 = ap_c_n_tvin_trans_num_bias2 + 1;
						read_token(fp_bias2, token_bias2); // should be [[transaction]] or [[[/runtime]]]
						if (token_bias2 == "[[[/runtime]]]") begin
							$fclose(fp_bias2);
							end_bias2 = 1;
						end else begin
							end_bias2 = 0;
							read_token(fp_bias2, token_bias2); // should be transaction number
							read_token(fp_bias2, token_bias2);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_bias2 = ap_c_n_tvin_trans_num_bias2 + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_Filter3 "./stream_size_in_Filter3.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_Filter3
		integer fp_Filter3;
		reg [127:0] token_Filter3;
		integer ret;
		
		ap_c_n_tvin_trans_num_Filter3 = 0;
		end_Filter3 = 0;
		wait (AESL_reset === 1);
		
		fp_Filter3 = $fopen(`AUTOTB_TVIN_Filter3, "r");
		if(fp_Filter3 == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_Filter3);
			$finish;
		end
		read_token(fp_Filter3, token_Filter3); // should be [[[runtime]]]
		if (token_Filter3 != "[[[runtime]]]") begin
			$display("ERROR: token_Filter3 != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_Filter3 = ap_c_n_tvin_trans_num_Filter3 + 1;
		read_token(fp_Filter3, token_Filter3); // should be [[transaction]] or [[[/runtime]]]
		if (token_Filter3 == "[[[/runtime]]]") begin
			$fclose(fp_Filter3);
			end_Filter3 = 1;
		end else begin
			end_Filter3 = 0;
			read_token(fp_Filter3, token_Filter3); // should be transaction number
			read_token(fp_Filter3, token_Filter3);
		end
		while (token_Filter3 == "[[/transaction]]" && end_Filter3 == 0) begin
			ap_c_n_tvin_trans_num_Filter3 = ap_c_n_tvin_trans_num_Filter3 + 1;
			read_token(fp_Filter3, token_Filter3); // should be [[transaction]] or [[[/runtime]]]
			if (token_Filter3 == "[[[/runtime]]]") begin
				$fclose(fp_Filter3);
				end_Filter3 = 1;
			end else begin
				end_Filter3 = 0;
				read_token(fp_Filter3, token_Filter3); // should be transaction number
				read_token(fp_Filter3, token_Filter3);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_Filter3 == 0) begin
				if (Filter3_TREADY == 1) begin
					read_token(fp_Filter3, token_Filter3);
					while (token_Filter3 == "[[/transaction]]" && end_Filter3 == 0) begin
						ap_c_n_tvin_trans_num_Filter3 = ap_c_n_tvin_trans_num_Filter3 + 1;
						read_token(fp_Filter3, token_Filter3); // should be [[transaction]] or [[[/runtime]]]
						if (token_Filter3 == "[[[/runtime]]]") begin
							$fclose(fp_Filter3);
							end_Filter3 = 1;
						end else begin
							end_Filter3 = 0;
							read_token(fp_Filter3, token_Filter3); // should be transaction number
							read_token(fp_Filter3, token_Filter3);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_Filter3 = ap_c_n_tvin_trans_num_Filter3 + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_bias3 "./stream_size_in_bias3.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_bias3
		integer fp_bias3;
		reg [127:0] token_bias3;
		integer ret;
		
		ap_c_n_tvin_trans_num_bias3 = 0;
		end_bias3 = 0;
		wait (AESL_reset === 1);
		
		fp_bias3 = $fopen(`AUTOTB_TVIN_bias3, "r");
		if(fp_bias3 == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_bias3);
			$finish;
		end
		read_token(fp_bias3, token_bias3); // should be [[[runtime]]]
		if (token_bias3 != "[[[runtime]]]") begin
			$display("ERROR: token_bias3 != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_bias3 = ap_c_n_tvin_trans_num_bias3 + 1;
		read_token(fp_bias3, token_bias3); // should be [[transaction]] or [[[/runtime]]]
		if (token_bias3 == "[[[/runtime]]]") begin
			$fclose(fp_bias3);
			end_bias3 = 1;
		end else begin
			end_bias3 = 0;
			read_token(fp_bias3, token_bias3); // should be transaction number
			read_token(fp_bias3, token_bias3);
		end
		while (token_bias3 == "[[/transaction]]" && end_bias3 == 0) begin
			ap_c_n_tvin_trans_num_bias3 = ap_c_n_tvin_trans_num_bias3 + 1;
			read_token(fp_bias3, token_bias3); // should be [[transaction]] or [[[/runtime]]]
			if (token_bias3 == "[[[/runtime]]]") begin
				$fclose(fp_bias3);
				end_bias3 = 1;
			end else begin
				end_bias3 = 0;
				read_token(fp_bias3, token_bias3); // should be transaction number
				read_token(fp_bias3, token_bias3);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_bias3 == 0) begin
				if (bias3_TREADY == 1) begin
					read_token(fp_bias3, token_bias3);
					while (token_bias3 == "[[/transaction]]" && end_bias3 == 0) begin
						ap_c_n_tvin_trans_num_bias3 = ap_c_n_tvin_trans_num_bias3 + 1;
						read_token(fp_bias3, token_bias3); // should be [[transaction]] or [[[/runtime]]]
						if (token_bias3 == "[[[/runtime]]]") begin
							$fclose(fp_bias3);
							end_bias3 = 1;
						end else begin
							end_bias3 = 0;
							read_token(fp_bias3, token_bias3); // should be transaction number
							read_token(fp_bias3, token_bias3);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_bias3 = ap_c_n_tvin_trans_num_bias3 + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_fcWeight "./stream_size_in_fcWeight.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_fcWeight
		integer fp_fcWeight;
		reg [127:0] token_fcWeight;
		integer ret;
		
		ap_c_n_tvin_trans_num_fcWeight = 0;
		end_fcWeight = 0;
		wait (AESL_reset === 1);
		
		fp_fcWeight = $fopen(`AUTOTB_TVIN_fcWeight, "r");
		if(fp_fcWeight == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_fcWeight);
			$finish;
		end
		read_token(fp_fcWeight, token_fcWeight); // should be [[[runtime]]]
		if (token_fcWeight != "[[[runtime]]]") begin
			$display("ERROR: token_fcWeight != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_fcWeight = ap_c_n_tvin_trans_num_fcWeight + 1;
		read_token(fp_fcWeight, token_fcWeight); // should be [[transaction]] or [[[/runtime]]]
		if (token_fcWeight == "[[[/runtime]]]") begin
			$fclose(fp_fcWeight);
			end_fcWeight = 1;
		end else begin
			end_fcWeight = 0;
			read_token(fp_fcWeight, token_fcWeight); // should be transaction number
			read_token(fp_fcWeight, token_fcWeight);
		end
		while (token_fcWeight == "[[/transaction]]" && end_fcWeight == 0) begin
			ap_c_n_tvin_trans_num_fcWeight = ap_c_n_tvin_trans_num_fcWeight + 1;
			read_token(fp_fcWeight, token_fcWeight); // should be [[transaction]] or [[[/runtime]]]
			if (token_fcWeight == "[[[/runtime]]]") begin
				$fclose(fp_fcWeight);
				end_fcWeight = 1;
			end else begin
				end_fcWeight = 0;
				read_token(fp_fcWeight, token_fcWeight); // should be transaction number
				read_token(fp_fcWeight, token_fcWeight);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_fcWeight == 0) begin
				if (fcWeight_TREADY == 1) begin
					read_token(fp_fcWeight, token_fcWeight);
					while (token_fcWeight == "[[/transaction]]" && end_fcWeight == 0) begin
						ap_c_n_tvin_trans_num_fcWeight = ap_c_n_tvin_trans_num_fcWeight + 1;
						read_token(fp_fcWeight, token_fcWeight); // should be [[transaction]] or [[[/runtime]]]
						if (token_fcWeight == "[[[/runtime]]]") begin
							$fclose(fp_fcWeight);
							end_fcWeight = 1;
						end else begin
							end_fcWeight = 0;
							read_token(fp_fcWeight, token_fcWeight); // should be transaction number
							read_token(fp_fcWeight, token_fcWeight);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_fcWeight = ap_c_n_tvin_trans_num_fcWeight + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_fcBias "./stream_size_in_fcBias.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_fcBias
		integer fp_fcBias;
		reg [127:0] token_fcBias;
		integer ret;
		
		ap_c_n_tvin_trans_num_fcBias = 0;
		end_fcBias = 0;
		wait (AESL_reset === 1);
		
		fp_fcBias = $fopen(`AUTOTB_TVIN_fcBias, "r");
		if(fp_fcBias == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_fcBias);
			$finish;
		end
		read_token(fp_fcBias, token_fcBias); // should be [[[runtime]]]
		if (token_fcBias != "[[[runtime]]]") begin
			$display("ERROR: token_fcBias != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_fcBias = ap_c_n_tvin_trans_num_fcBias + 1;
		read_token(fp_fcBias, token_fcBias); // should be [[transaction]] or [[[/runtime]]]
		if (token_fcBias == "[[[/runtime]]]") begin
			$fclose(fp_fcBias);
			end_fcBias = 1;
		end else begin
			end_fcBias = 0;
			read_token(fp_fcBias, token_fcBias); // should be transaction number
			read_token(fp_fcBias, token_fcBias);
		end
		while (token_fcBias == "[[/transaction]]" && end_fcBias == 0) begin
			ap_c_n_tvin_trans_num_fcBias = ap_c_n_tvin_trans_num_fcBias + 1;
			read_token(fp_fcBias, token_fcBias); // should be [[transaction]] or [[[/runtime]]]
			if (token_fcBias == "[[[/runtime]]]") begin
				$fclose(fp_fcBias);
				end_fcBias = 1;
			end else begin
				end_fcBias = 0;
				read_token(fp_fcBias, token_fcBias); // should be transaction number
				read_token(fp_fcBias, token_fcBias);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_fcBias == 0) begin
				if (fcBias_TREADY == 1) begin
					read_token(fp_fcBias, token_fcBias);
					while (token_fcBias == "[[/transaction]]" && end_fcBias == 0) begin
						ap_c_n_tvin_trans_num_fcBias = ap_c_n_tvin_trans_num_fcBias + 1;
						read_token(fp_fcBias, token_fcBias); // should be [[transaction]] or [[[/runtime]]]
						if (token_fcBias == "[[[/runtime]]]") begin
							$fclose(fp_fcBias);
							end_fcBias = 1;
						end else begin
							end_fcBias = 0;
							read_token(fp_fcBias, token_fcBias); // should be transaction number
							read_token(fp_fcBias, token_fcBias);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_fcBias = ap_c_n_tvin_trans_num_fcBias + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_smWeight "./stream_size_in_smWeight.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_smWeight
		integer fp_smWeight;
		reg [127:0] token_smWeight;
		integer ret;
		
		ap_c_n_tvin_trans_num_smWeight = 0;
		end_smWeight = 0;
		wait (AESL_reset === 1);
		
		fp_smWeight = $fopen(`AUTOTB_TVIN_smWeight, "r");
		if(fp_smWeight == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_smWeight);
			$finish;
		end
		read_token(fp_smWeight, token_smWeight); // should be [[[runtime]]]
		if (token_smWeight != "[[[runtime]]]") begin
			$display("ERROR: token_smWeight != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_smWeight = ap_c_n_tvin_trans_num_smWeight + 1;
		read_token(fp_smWeight, token_smWeight); // should be [[transaction]] or [[[/runtime]]]
		if (token_smWeight == "[[[/runtime]]]") begin
			$fclose(fp_smWeight);
			end_smWeight = 1;
		end else begin
			end_smWeight = 0;
			read_token(fp_smWeight, token_smWeight); // should be transaction number
			read_token(fp_smWeight, token_smWeight);
		end
		while (token_smWeight == "[[/transaction]]" && end_smWeight == 0) begin
			ap_c_n_tvin_trans_num_smWeight = ap_c_n_tvin_trans_num_smWeight + 1;
			read_token(fp_smWeight, token_smWeight); // should be [[transaction]] or [[[/runtime]]]
			if (token_smWeight == "[[[/runtime]]]") begin
				$fclose(fp_smWeight);
				end_smWeight = 1;
			end else begin
				end_smWeight = 0;
				read_token(fp_smWeight, token_smWeight); // should be transaction number
				read_token(fp_smWeight, token_smWeight);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_smWeight == 0) begin
				if (smWeight_TREADY == 1) begin
					read_token(fp_smWeight, token_smWeight);
					while (token_smWeight == "[[/transaction]]" && end_smWeight == 0) begin
						ap_c_n_tvin_trans_num_smWeight = ap_c_n_tvin_trans_num_smWeight + 1;
						read_token(fp_smWeight, token_smWeight); // should be [[transaction]] or [[[/runtime]]]
						if (token_smWeight == "[[[/runtime]]]") begin
							$fclose(fp_smWeight);
							end_smWeight = 1;
						end else begin
							end_smWeight = 0;
							read_token(fp_smWeight, token_smWeight); // should be transaction number
							read_token(fp_smWeight, token_smWeight);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_smWeight = ap_c_n_tvin_trans_num_smWeight + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_smBias "./stream_size_in_smBias.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_smBias
		integer fp_smBias;
		reg [127:0] token_smBias;
		integer ret;
		
		ap_c_n_tvin_trans_num_smBias = 0;
		end_smBias = 0;
		wait (AESL_reset === 1);
		
		fp_smBias = $fopen(`AUTOTB_TVIN_smBias, "r");
		if(fp_smBias == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_smBias);
			$finish;
		end
		read_token(fp_smBias, token_smBias); // should be [[[runtime]]]
		if (token_smBias != "[[[runtime]]]") begin
			$display("ERROR: token_smBias != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_smBias = ap_c_n_tvin_trans_num_smBias + 1;
		read_token(fp_smBias, token_smBias); // should be [[transaction]] or [[[/runtime]]]
		if (token_smBias == "[[[/runtime]]]") begin
			$fclose(fp_smBias);
			end_smBias = 1;
		end else begin
			end_smBias = 0;
			read_token(fp_smBias, token_smBias); // should be transaction number
			read_token(fp_smBias, token_smBias);
		end
		while (token_smBias == "[[/transaction]]" && end_smBias == 0) begin
			ap_c_n_tvin_trans_num_smBias = ap_c_n_tvin_trans_num_smBias + 1;
			read_token(fp_smBias, token_smBias); // should be [[transaction]] or [[[/runtime]]]
			if (token_smBias == "[[[/runtime]]]") begin
				$fclose(fp_smBias);
				end_smBias = 1;
			end else begin
				end_smBias = 0;
				read_token(fp_smBias, token_smBias); // should be transaction number
				read_token(fp_smBias, token_smBias);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_smBias == 0) begin
				if (smBias_TREADY == 1) begin
					read_token(fp_smBias, token_smBias);
					while (token_smBias == "[[/transaction]]" && end_smBias == 0) begin
						ap_c_n_tvin_trans_num_smBias = ap_c_n_tvin_trans_num_smBias + 1;
						read_token(fp_smBias, token_smBias); // should be [[transaction]] or [[[/runtime]]]
						if (token_smBias == "[[[/runtime]]]") begin
							$fclose(fp_smBias);
							end_smBias = 1;
						end else begin
							end_smBias = 0;
							read_token(fp_smBias, token_smBias); // should be transaction number
							read_token(fp_smBias, token_smBias);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_smBias = ap_c_n_tvin_trans_num_smBias + 1;
			end
		end
	end
	

reg dump_tvout_finish_outDigit;

initial begin : dump_tvout_runtime_sign_outDigit
	integer fp;
	dump_tvout_finish_outDigit = 0;
	fp = $fopen(`AUTOTB_TVOUT_outDigit_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outDigit_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outDigit_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outDigit_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outDigit = 1;
end

always @ (negedge AESL_clock) begin
    if(AESL_reset === 0)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		AESL_mLatCnterOut_addr = 0;
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
	end else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
		AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
	end
end
always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		reported_stuck_cnt <= 0;
	end else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		reported_stuck <= 0;
	end else if (reported_stuck == 0 && reported_stuck_cnt < 4) begin
		if (AESL_mLatCnterIn_addr > AESL_mLatCnterOut_addr) begin
			if (AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 10000 && AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 10 * 67706) begin
				$display("WARNING: The latency is much larger than expected. Simulation may stuck.");
				reported_stuck <= 1;
				reported_stuck_cnt <= reported_stuck_cnt + 1;
			end
		end
	end
end
always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		AESL_mLatCnterIn_addr = 0;
	end else begin
		if (AESL_start && AESL_mLatCnterIn_addr == 0) begin
			AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
			AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
		end else if (AESL_ready && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
			AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
			AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
		end
	end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];

	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);

	@(posedge AESL_reset);
	while (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	for (i = 0; i < `AUTOTB_TRANSACTION_NUM; i = i + 1) begin
		latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
		lat_array[i] = latthistime;
		if (latthistime > latmax) latmax = latthistime;
		if (latthistime < latmin) latmin = latthistime;
		lattotal = lattotal + latthistime;
		if (`AUTOTB_TRANSACTION_NUM == 1) begin
			thrthistime = latthistime;
		end else begin
			thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
		end
		thr_array[i] = thrthistime;
		if (thrthistime > thrmax) thrmax = thrthistime;
		if (thrthistime < thrmin) thrmin = thrthistime;
		thrtotal = thrtotal + thrthistime;
	end

	lataver = lattotal / `AUTOTB_TRANSACTION_NUM;
	thraver = thrtotal / `AUTOTB_TRANSACTION_NUM;

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax);
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin);
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver);
	end else begin
		// $::AESL_AUTOSIM::gDataflowTaskPipelineFlag && $::AESL_AUTOSIM::gnoPortSwitchingFlag == 0
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax );
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin );
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver );
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax );
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin );
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver );
	end

	$fclose(fp);

	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		i = 0;
		thr_array[i] = 0;
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end else begin
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
		end
	end
	$fclose(fp);
end

endmodule
