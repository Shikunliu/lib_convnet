// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      inference
`define AUTOTB_DUT_INST AESL_inst_inference
`define AUTOTB_TOP      apatb_inference_top
`define AUTOTB_LAT_RESULT_FILE "inference.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "inference.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_inference_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00
`define LENGTH_inputImage 784
`define LENGTH_outDigit 1

`define   AESL_DEPTH_inputImage 1
`define   AESL_DEPTH_outDigit 1
`define AUTOTB_TVIN_inputImage  "./c.inference.autotvin_inputImage.dat"
`define AUTOTB_TVIN_outDigit  "./c.inference.autotvin_outDigit.dat"
`define AUTOTB_TVIN_inputImage_out_wrapc  "./rtl.inference.autotvin_inputImage.dat"
`define AUTOTB_TVIN_outDigit_out_wrapc  "./rtl.inference.autotvin_outDigit.dat"
`define AUTOTB_TVOUT_outDigit  "./c.inference.autotvout_outDigit.dat"
`define AUTOTB_TVOUT_outDigit_out_wrapc  "./impl_rtl.inference.autotvout_outDigit.dat"

module `AUTOTB_TOP;

task read_token;
    input integer fp;
    output reg [159 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

task post_check;
    input integer fp1;
    input integer fp2;
    reg [159 : 0] token1;
    reg [159 : 0] token2;
    reg [159 : 0] golden;
    reg [159 : 0] result;
    integer ret;
    begin
        read_token(fp1, token1);
        read_token(fp2, token2);
        if (token1 != "[[[runtime]]]" || token2 != "[[[runtime]]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp1, token1);
        read_token(fp2, token2);
        while (token1 != "[[[/runtime]]]" && token2 != "[[[/runtime]]]") begin
            if (token1 != "[[transaction]]" || token2 != "[[transaction]]") begin
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
            end
            read_token(fp1, token1);  // skip transaction number
            read_token(fp2, token2);  // skip transaction number
	          read_token(fp1, token1);
	          read_token(fp2, token2);
            while(token1 != "[[/transaction]]" && token2 != "[[/transaction]]") begin
                ret = $sscanf(token1, "0x%x", golden);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                ret = $sscanf(token2, "0x%x", result);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                if(golden != result) begin
	                  $display("%x (expected) vs. %x (actual) - mismatch", golden, result);
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
                end
	              read_token(fp1, token1);
	              read_token(fp2, token2);
            end
	          read_token(fp1, token1);
	          read_token(fp2, token2);
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [17 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [17 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire [31 : 0] inputImage_TDATA;
wire [31 : 0] outDigit_TDATA;
wire  inputImage_TVALID;
wire  inputImage_TREADY;
wire  outDigit_TVALID;
wire  outDigit_TREADY;
wire ap_done;
wire ap_start;
wire ap_idle;
wire ap_ready;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
	.ap_clk(ap_clk),
	.ap_rst_n(ap_rst_n),
	.inputImage_TDATA(inputImage_TDATA),
	.outDigit_TDATA(outDigit_TDATA),
	.inputImage_TVALID(inputImage_TVALID),
	.inputImage_TREADY(inputImage_TREADY),
	.outDigit_TVALID(outDigit_TVALID),
	.outDigit_TREADY(outDigit_TREADY),
	.ap_done(ap_done),
	.ap_start(ap_start),
	.ap_idle(ap_idle),
	.ap_ready(ap_ready));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst_n = AESL_reset;
assign ap_rst_n_n = ~AESL_reset;
assign AESL_reset = rst;
assign AESL_done = ap_done;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = continue;
	always @(posedge AESL_clock) begin
		if (AESL_reset === 0) begin
		end else begin
			if (AESL_done !== 1 && AESL_done !== 0) begin
				$display("ERROR: Control signal AESL_done is invalid!");
				$finish;
			end
		end
	end
	always @(posedge AESL_clock) begin
		if (AESL_reset === 0) begin
		end else begin
			if (AESL_ready !== 1 && AESL_ready !== 0) begin
				$display("ERROR: Control signal AESL_ready is invalid!");
				$finish;
			end
		end
	end


reg [31:0] ap_c_n_tvin_trans_num_inputImage;
reg inputImage_ready_reg; // for self-sync

wire inputImage_ready;
wire inputImage_done;
wire [31:0] inputImage_transaction;
wire axi_s_inputImage_TVALID;
wire axi_s_inputImage_TREADY;

AESL_axi_s_inputImage AESL_AXI_S_inputImage(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_inputImage_TDATA(inputImage_TDATA),
	.TRAN_inputImage_TVALID(axi_s_inputImage_TVALID),
	.TRAN_inputImage_TREADY(axi_s_inputImage_TREADY),
	.ready(inputImage_ready),
	.done(inputImage_done),
	.transaction(inputImage_transaction));

assign inputImage_ready = ready;
assign inputImage_done = 0;

reg reg_inputImage_TVALID;
initial begin : gen_reg_inputImage_TVALID_process
	integer rand;
	reg_inputImage_TVALID = axi_s_inputImage_TVALID;
	while (1) begin
		@ (axi_s_inputImage_TVALID);
		reg_inputImage_TVALID = axi_s_inputImage_TVALID;
	end
end


assign inputImage_TVALID = reg_inputImage_TVALID;

assign axi_s_inputImage_TREADY = inputImage_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_outDigit;
reg outDigit_ready_reg; // for self-sync

wire outDigit_ready;
wire outDigit_done;
wire [31:0] outDigit_transaction;
wire axi_s_outDigit_TVALID;
wire axi_s_outDigit_TREADY;

AESL_axi_s_outDigit AESL_AXI_S_outDigit(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_outDigit_TDATA(outDigit_TDATA),
	.TRAN_outDigit_TVALID(axi_s_outDigit_TVALID),
	.TRAN_outDigit_TREADY(axi_s_outDigit_TREADY),
	.ready(outDigit_ready),
	.done(outDigit_done),
	.transaction(outDigit_transaction));

assign outDigit_ready = 0;
assign outDigit_done = AESL_done;

assign axi_s_outDigit_TVALID = outDigit_TVALID;

reg reg_outDigit_TREADY;
initial begin : gen_reg_outDigit_TREADY_process
    integer rand;
    reg_outDigit_TREADY = 0;
    while(1)
    begin
        @(axi_s_outDigit_TREADY);
        reg_outDigit_TREADY = axi_s_outDigit_TREADY;
    end
end


assign outDigit_TREADY = reg_outDigit_TREADY;

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

	event next_trigger_ready_cnt;
	
	initial begin : gen_ready_cnt
		ready_cnt = 0;
		wait (AESL_reset === 1);
		forever begin
			@ (posedge AESL_clock);
			if (ready == 1) begin
				if (ready_cnt < `AUTOTB_TRANSACTION_NUM) begin
					ready_cnt = ready_cnt + 1;
				end
			end
			-> next_trigger_ready_cnt;
		end
	end
	
	wire all_finish = (done_cnt == `AUTOTB_TRANSACTION_NUM);
	
	// done_cnt
	always @ (posedge AESL_clock) begin
		if (~AESL_reset) begin
			done_cnt <= 0;
		end else begin
			if (AESL_done == 1) begin
				if (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
					done_cnt <= done_cnt + 1;
				end
			end
		end
	end
	
	initial begin : finish_simulation
		integer fp1;
		integer fp2;
		wait (all_finish == 1);
		// last transaction is saved at negedge right after last done
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
    fp1 = $fopen("./rtl.inference.autotvout_outDigit.dat", "r");
    fp2 = $fopen("./impl_rtl.inference.autotvout_outDigit.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.inference.autotvout_outDigit.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.inference.autotvout_outDigit.dat\"!");
    else begin
        $display("Comparing rtl.inference.autotvout_outDigit.dat with impl_rtl.inference.autotvout_outDigit.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
		$display("Simulation Passed.");
		$finish;
	end
	
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_inputImage;
reg [31:0] size_inputImage;
reg end_outDigit;
reg [31:0] size_outDigit;

initial begin : initial_process
    integer rand;
    rst = 0;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 1;
end

initial begin : start_process
	integer rand;
	start = 0;
	ce = 1;
	wait (AESL_reset === 1);
	@ (posedge AESL_clock);
	start = 1;
	while (ready_cnt < `AUTOTB_TRANSACTION_NUM + 1) begin
		@ (posedge AESL_clock);
	end
	start = 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
	
	initial begin : proc_gen_axis_internal_ready_inputImage
		inputImage_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_inputImage or inputImage_transaction);
			if (ap_c_n_tvin_trans_num_inputImage > inputImage_transaction) begin
				inputImage_ready_reg = 1;
			end else begin
				inputImage_ready_reg = 0;
			end
		end
	end
	`define STREAM_SIZE_IN_inputImage "./stream_size_in_inputImage.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inputImage
		integer fp_inputImage;
		reg [127:0] token_inputImage;
		integer ret;
		
		ap_c_n_tvin_trans_num_inputImage = 0;
		end_inputImage = 0;
		wait (AESL_reset === 1);
		
		fp_inputImage = $fopen(`AUTOTB_TVIN_inputImage, "r");
		if(fp_inputImage == 0) begin
			$display("Failed to open file \"%s\"!", `AUTOTB_TVIN_inputImage);
			$finish;
		end
		read_token(fp_inputImage, token_inputImage); // should be [[[runtime]]]
		if (token_inputImage != "[[[runtime]]]") begin
			$display("ERROR: token_inputImage != \"[[[runtime]]]\"");
			$finish;
		end
		ap_c_n_tvin_trans_num_inputImage = ap_c_n_tvin_trans_num_inputImage + 1;
		read_token(fp_inputImage, token_inputImage); // should be [[transaction]] or [[[/runtime]]]
		if (token_inputImage == "[[[/runtime]]]") begin
			$fclose(fp_inputImage);
			end_inputImage = 1;
		end else begin
			end_inputImage = 0;
			read_token(fp_inputImage, token_inputImage); // should be transaction number
			read_token(fp_inputImage, token_inputImage);
		end
		while (token_inputImage == "[[/transaction]]" && end_inputImage == 0) begin
			ap_c_n_tvin_trans_num_inputImage = ap_c_n_tvin_trans_num_inputImage + 1;
			read_token(fp_inputImage, token_inputImage); // should be [[transaction]] or [[[/runtime]]]
			if (token_inputImage == "[[[/runtime]]]") begin
				$fclose(fp_inputImage);
				end_inputImage = 1;
			end else begin
				end_inputImage = 0;
				read_token(fp_inputImage, token_inputImage); // should be transaction number
				read_token(fp_inputImage, token_inputImage);
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inputImage == 0) begin
				if (inputImage_TREADY == 1) begin
					read_token(fp_inputImage, token_inputImage);
					while (token_inputImage == "[[/transaction]]" && end_inputImage == 0) begin
						ap_c_n_tvin_trans_num_inputImage = ap_c_n_tvin_trans_num_inputImage + 1;
						read_token(fp_inputImage, token_inputImage); // should be [[transaction]] or [[[/runtime]]]
						if (token_inputImage == "[[[/runtime]]]") begin
							$fclose(fp_inputImage);
							end_inputImage = 1;
						end else begin
							end_inputImage = 0;
							read_token(fp_inputImage, token_inputImage); // should be transaction number
							read_token(fp_inputImage, token_inputImage);
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inputImage = ap_c_n_tvin_trans_num_inputImage + 1;
			end
		end
	end
	

reg dump_tvout_finish_outDigit;

initial begin : dump_tvout_runtime_sign_outDigit
	integer fp;
	dump_tvout_finish_outDigit = 0;
	fp = $fopen(`AUTOTB_TVOUT_outDigit_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outDigit_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outDigit_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outDigit_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outDigit = 1;
end

always @ (negedge AESL_clock) begin
    if(AESL_reset === 0)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		AESL_mLatCnterOut_addr = 0;
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
	end else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
		AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
	end
end
always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		reported_stuck_cnt <= 0;
	end else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		reported_stuck <= 0;
	end else if (reported_stuck == 0 && reported_stuck_cnt < 4) begin
		if (AESL_mLatCnterIn_addr > AESL_mLatCnterOut_addr) begin
			if (AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 10000 && AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 10 * 63300) begin
				$display("WARNING: The latency is much larger than expected. Simulation may stuck.");
				reported_stuck <= 1;
				reported_stuck_cnt <= reported_stuck_cnt + 1;
			end
		end
	end
end
always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		AESL_mLatCnterIn_addr = 0;
	end else begin
		if (AESL_start && AESL_mLatCnterIn_addr == 0) begin
			AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
			AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
		end else if (AESL_ready && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
			AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
			AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
		end
	end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];

	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);

	@(posedge AESL_reset);
	while (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	for (i = 0; i < `AUTOTB_TRANSACTION_NUM; i = i + 1) begin
		latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
		lat_array[i] = latthistime;
		if (latthistime > latmax) latmax = latthistime;
		if (latthistime < latmin) latmin = latthistime;
		lattotal = lattotal + latthistime;
		if (`AUTOTB_TRANSACTION_NUM == 1) begin
			thrthistime = latthistime;
		end else begin
			thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
		end
		thr_array[i] = thrthistime;
		if (thrthistime > thrmax) thrmax = thrthistime;
		if (thrthistime < thrmin) thrmin = thrthistime;
		thrtotal = thrtotal + thrthistime;
	end

	lataver = lattotal / `AUTOTB_TRANSACTION_NUM;
	thraver = thrtotal / `AUTOTB_TRANSACTION_NUM;

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax);
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin);
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver);
	end else begin
		// $::AESL_AUTOSIM::gDataflowTaskPipelineFlag && $::AESL_AUTOSIM::gnoPortSwitchingFlag == 0
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax );
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin );
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver );
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax );
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin );
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver );
	end

	$fclose(fp);

	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		i = 0;
		thr_array[i] = 0;
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end else begin
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
		end
	end
	$fclose(fp);
end

endmodule
